
sinking-clock_master_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006efc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  08006fb8  08006fb8  00016fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075e0  080075e0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  080075e0  080075e0  000175e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075e8  080075e8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075e8  080075e8  000175e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075ec  080075ec  000175ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080075f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200000a0  08007690  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08007690  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154a6  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000287c  00000000  00000000  0003556e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00037df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  000390b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d11  00000000  00000000  0003a278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016590  00000000  00000000  00052f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009db4d  00000000  00000000  00069519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107066  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ca8  00000000  00000000  001070b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000a0 	.word	0x200000a0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006fa0 	.word	0x08006fa0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a4 	.word	0x200000a4
 8000100:	08006fa0 	.word	0x08006fa0

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	469b      	mov	fp, r3
 80002a6:	d433      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a8:	465a      	mov	r2, fp
 80002aa:	4653      	mov	r3, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83a      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e078      	b.n	80003b4 <__udivmoddi4+0x144>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e075      	b.n	80003ba <__udivmoddi4+0x14a>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e028      	b.n	800033a <__udivmoddi4+0xca>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	2320      	movs	r3, #32
 8000314:	1a9b      	subs	r3, r3, r2
 8000316:	4652      	mov	r2, sl
 8000318:	40da      	lsrs	r2, r3
 800031a:	4641      	mov	r1, r8
 800031c:	0013      	movs	r3, r2
 800031e:	464a      	mov	r2, r9
 8000320:	408a      	lsls	r2, r1
 8000322:	0017      	movs	r7, r2
 8000324:	4642      	mov	r2, r8
 8000326:	431f      	orrs	r7, r3
 8000328:	4653      	mov	r3, sl
 800032a:	4093      	lsls	r3, r2
 800032c:	001e      	movs	r6, r3
 800032e:	42af      	cmp	r7, r5
 8000330:	d9c4      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0d9      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000340:	07fb      	lsls	r3, r7, #31
 8000342:	0872      	lsrs	r2, r6, #1
 8000344:	431a      	orrs	r2, r3
 8000346:	4646      	mov	r6, r8
 8000348:	087b      	lsrs	r3, r7, #1
 800034a:	e00e      	b.n	800036a <__udivmoddi4+0xfa>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d101      	bne.n	8000354 <__udivmoddi4+0xe4>
 8000350:	42a2      	cmp	r2, r4
 8000352:	d80c      	bhi.n	800036e <__udivmoddi4+0xfe>
 8000354:	1aa4      	subs	r4, r4, r2
 8000356:	419d      	sbcs	r5, r3
 8000358:	2001      	movs	r0, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2100      	movs	r1, #0
 8000360:	3e01      	subs	r6, #1
 8000362:	1824      	adds	r4, r4, r0
 8000364:	414d      	adcs	r5, r1
 8000366:	2e00      	cmp	r6, #0
 8000368:	d006      	beq.n	8000378 <__udivmoddi4+0x108>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d9ee      	bls.n	800034c <__udivmoddi4+0xdc>
 800036e:	3e01      	subs	r6, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2e00      	cmp	r6, #0
 8000376:	d1f8      	bne.n	800036a <__udivmoddi4+0xfa>
 8000378:	9800      	ldr	r0, [sp, #0]
 800037a:	9901      	ldr	r1, [sp, #4]
 800037c:	465b      	mov	r3, fp
 800037e:	1900      	adds	r0, r0, r4
 8000380:	4169      	adcs	r1, r5
 8000382:	2b00      	cmp	r3, #0
 8000384:	db24      	blt.n	80003d0 <__udivmoddi4+0x160>
 8000386:	002b      	movs	r3, r5
 8000388:	465a      	mov	r2, fp
 800038a:	4644      	mov	r4, r8
 800038c:	40d3      	lsrs	r3, r2
 800038e:	002a      	movs	r2, r5
 8000390:	40e2      	lsrs	r2, r4
 8000392:	001c      	movs	r4, r3
 8000394:	465b      	mov	r3, fp
 8000396:	0015      	movs	r5, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	db2a      	blt.n	80003f2 <__udivmoddi4+0x182>
 800039c:	0026      	movs	r6, r4
 800039e:	409e      	lsls	r6, r3
 80003a0:	0033      	movs	r3, r6
 80003a2:	0026      	movs	r6, r4
 80003a4:	4647      	mov	r7, r8
 80003a6:	40be      	lsls	r6, r7
 80003a8:	0032      	movs	r2, r6
 80003aa:	1a80      	subs	r0, r0, r2
 80003ac:	4199      	sbcs	r1, r3
 80003ae:	9000      	str	r0, [sp, #0]
 80003b0:	9101      	str	r1, [sp, #4]
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b4:	42a3      	cmp	r3, r4
 80003b6:	d8bc      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80003b8:	e783      	b.n	80002c2 <__udivmoddi4+0x52>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	2100      	movs	r1, #0
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	2200      	movs	r2, #0
 80003c4:	9100      	str	r1, [sp, #0]
 80003c6:	9201      	str	r2, [sp, #4]
 80003c8:	2201      	movs	r2, #1
 80003ca:	40da      	lsrs	r2, r3
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	e786      	b.n	80002de <__udivmoddi4+0x6e>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	4646      	mov	r6, r8
 80003da:	409a      	lsls	r2, r3
 80003dc:	0023      	movs	r3, r4
 80003de:	40f3      	lsrs	r3, r6
 80003e0:	4644      	mov	r4, r8
 80003e2:	4313      	orrs	r3, r2
 80003e4:	002a      	movs	r2, r5
 80003e6:	40e2      	lsrs	r2, r4
 80003e8:	001c      	movs	r4, r3
 80003ea:	465b      	mov	r3, fp
 80003ec:	0015      	movs	r5, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dad4      	bge.n	800039c <__udivmoddi4+0x12c>
 80003f2:	4642      	mov	r2, r8
 80003f4:	002f      	movs	r7, r5
 80003f6:	2320      	movs	r3, #32
 80003f8:	0026      	movs	r6, r4
 80003fa:	4097      	lsls	r7, r2
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	40de      	lsrs	r6, r3
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7cd      	b.n	80003a2 <__udivmoddi4+0x132>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000464:	2301      	movs	r3, #1
 8000466:	425b      	negs	r3, r3
 8000468:	1d39      	adds	r1, r7, #4
 800046a:	4804      	ldr	r0, [pc, #16]	; (800047c <__io_putchar+0x20>)
 800046c:	2201      	movs	r2, #1
 800046e:	f005 f8a5 	bl	80055bc <HAL_UART_Transmit>
  return ch;
 8000472:	687b      	ldr	r3, [r7, #4]
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000188 	.word	0x20000188

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b590      	push	{r4, r7, lr}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000486:	f001 fb13 	bl	8001ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048a:	f000 f835 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048e:	f000 f9dd 	bl	800084c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000492:	f000 f9a7 	bl	80007e4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000496:	f000 f87b 	bl	8000590 <MX_I2C1_Init>
  MX_RTC_Init();
 800049a:	f000 f8b9 	bl	8000610 <MX_RTC_Init>
  MX_TIM16_Init();
 800049e:	f000 f979 	bl	8000794 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  displayToggle = 2; 		// Display at 100% intensity for next display toggle
 80004a2:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <main+0x64>)
 80004a4:	2202      	movs	r2, #2
 80004a6:	701a      	strb	r2, [r3, #0]
  sevSeg_I2C1_Init();		//Initialize 7-seg
 80004a8:	f000 fa94 	bl	80009d4 <sevSeg_I2C1_Init>

  userAlarmToggle = false;			//Default to off
 80004ac:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <main+0x68>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef halRet = HAL_RTC_DeactivateAlarm(&hrtc, userAlarm);	//Initially disable user alarm
 80004b2:	1dfc      	adds	r4, r7, #7
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	009a      	lsls	r2, r3, #2
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <main+0x6c>)
 80004ba:	0011      	movs	r1, r2
 80004bc:	0018      	movs	r0, r3
 80004be:	f004 fc6d 	bl	8004d9c <HAL_RTC_DeactivateAlarm>
 80004c2:	0003      	movs	r3, r0
 80004c4:	7023      	strb	r3, [r4, #0]

  if(halRet != HAL_OK) {
 80004c6:	1dfb      	adds	r3, r7, #7
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d004      	beq.n	80004d8 <main+0x58>
	  printf("Error deactivating user alarm.\n\r");
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <main+0x70>)
 80004d0:	0018      	movs	r0, r3
 80004d2:	f005 fd8d 	bl	8005ff0 <iprintf>
 80004d6:	e003      	b.n	80004e0 <main+0x60>
  } else {
	  printf("User alarm deactivated.\n\r");
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <main+0x74>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f005 fd88 	bl	8005ff0 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <main+0x60>
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	20000248 	.word	0x20000248
 80004e8:	20000249 	.word	0x20000249
 80004ec:	20000110 	.word	0x20000110
 80004f0:	08006fb8 	.word	0x08006fb8
 80004f4:	08006fdc 	.word	0x08006fdc

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b093      	sub	sp, #76	; 0x4c
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	2410      	movs	r4, #16
 8000500:	193b      	adds	r3, r7, r4
 8000502:	0018      	movs	r0, r3
 8000504:	2338      	movs	r3, #56	; 0x38
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f005 fd68 	bl	8005fde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050e:	003b      	movs	r3, r7
 8000510:	0018      	movs	r0, r3
 8000512:	2310      	movs	r3, #16
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f005 fd61 	bl	8005fde <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	0018      	movs	r0, r3
 8000522:	f003 f89b 	bl	800365c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	220a      	movs	r2, #10
 800052a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	0052      	lsls	r2, r2, #1
 8000532:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000534:	0021      	movs	r1, r4
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2240      	movs	r2, #64	; 0x40
 8000540:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2201      	movs	r2, #1
 8000546:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	187b      	adds	r3, r7, r1
 8000550:	0018      	movs	r0, r3
 8000552:	f003 f8f9 	bl	8003748 <HAL_RCC_OscConfig>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800055a:	f001 f82b 	bl	80015b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	003b      	movs	r3, r7
 8000560:	2207      	movs	r2, #7
 8000562:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000564:	003b      	movs	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	003b      	movs	r3, r7
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000570:	003b      	movs	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000576:	003b      	movs	r3, r7
 8000578:	2100      	movs	r1, #0
 800057a:	0018      	movs	r0, r3
 800057c:	f003 fbfe 	bl	8003d7c <HAL_RCC_ClockConfig>
 8000580:	1e03      	subs	r3, r0, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000584:	f001 f816 	bl	80015b4 <Error_Handler>
  }
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	b013      	add	sp, #76	; 0x4c
 800058e:	bd90      	pop	{r4, r7, pc}

08000590 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_I2C1_Init+0x74>)
 8000596:	4a1c      	ldr	r2, [pc, #112]	; (8000608 <MX_I2C1_Init+0x78>)
 8000598:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <MX_I2C1_Init+0x74>)
 800059c:	4a1b      	ldr	r2, [pc, #108]	; (800060c <MX_I2C1_Init+0x7c>)
 800059e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <MX_I2C1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a6:	4b17      	ldr	r3, [pc, #92]	; (8000604 <MX_I2C1_Init+0x74>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <MX_I2C1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_I2C1_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <MX_I2C1_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_I2C1_Init+0x74>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_I2C1_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_I2C1_Init+0x74>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fe1b 	bl	8002208 <HAL_I2C_Init>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005d6:	f000 ffed 	bl	80015b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <MX_I2C1_Init+0x74>)
 80005dc:	2100      	movs	r1, #0
 80005de:	0018      	movs	r0, r3
 80005e0:	f002 ffa4 	bl	800352c <HAL_I2CEx_ConfigAnalogFilter>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d001      	beq.n	80005ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005e8:	f000 ffe4 	bl	80015b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <MX_I2C1_Init+0x74>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	0018      	movs	r0, r3
 80005f2:	f002 ffe7 	bl	80035c4 <HAL_I2CEx_ConfigDigitalFilter>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005fa:	f000 ffdb 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200000bc 	.word	0x200000bc
 8000608:	40005400 	.word	0x40005400
 800060c:	0010061a 	.word	0x0010061a

08000610 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b090      	sub	sp, #64	; 0x40
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000616:	232c      	movs	r3, #44	; 0x2c
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	0018      	movs	r0, r3
 800061c:	2314      	movs	r3, #20
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f005 fcdc 	bl	8005fde <memset>
  RTC_DateTypeDef sDate = {0};
 8000626:	2328      	movs	r3, #40	; 0x28
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800062e:	003b      	movs	r3, r7
 8000630:	0018      	movs	r0, r3
 8000632:	2328      	movs	r3, #40	; 0x28
 8000634:	001a      	movs	r2, r3
 8000636:	2100      	movs	r1, #0
 8000638:	f005 fcd1 	bl	8005fde <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800063c:	4b51      	ldr	r3, [pc, #324]	; (8000784 <MX_RTC_Init+0x174>)
 800063e:	4a52      	ldr	r2, [pc, #328]	; (8000788 <MX_RTC_Init+0x178>)
 8000640:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000642:	4b50      	ldr	r3, [pc, #320]	; (8000784 <MX_RTC_Init+0x174>)
 8000644:	2240      	movs	r2, #64	; 0x40
 8000646:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000648:	4b4e      	ldr	r3, [pc, #312]	; (8000784 <MX_RTC_Init+0x174>)
 800064a:	227f      	movs	r2, #127	; 0x7f
 800064c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800064e:	4b4d      	ldr	r3, [pc, #308]	; (8000784 <MX_RTC_Init+0x174>)
 8000650:	22ff      	movs	r2, #255	; 0xff
 8000652:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000654:	4b4b      	ldr	r3, [pc, #300]	; (8000784 <MX_RTC_Init+0x174>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800065a:	4b4a      	ldr	r3, [pc, #296]	; (8000784 <MX_RTC_Init+0x174>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000660:	4b48      	ldr	r3, [pc, #288]	; (8000784 <MX_RTC_Init+0x174>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000666:	4b47      	ldr	r3, [pc, #284]	; (8000784 <MX_RTC_Init+0x174>)
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	05d2      	lsls	r2, r2, #23
 800066c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800066e:	4b45      	ldr	r3, [pc, #276]	; (8000784 <MX_RTC_Init+0x174>)
 8000670:	2200      	movs	r2, #0
 8000672:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000674:	4b43      	ldr	r3, [pc, #268]	; (8000784 <MX_RTC_Init+0x174>)
 8000676:	0018      	movs	r0, r3
 8000678:	f003 fea4 	bl	80043c4 <HAL_RTC_Init>
 800067c:	1e03      	subs	r3, r0, #0
 800067e:	d001      	beq.n	8000684 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000680:	f000 ff98 	bl	80015b4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000684:	212c      	movs	r1, #44	; 0x2c
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x50;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2250      	movs	r2, #80	; 0x50
 8000696:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006b0:	1879      	adds	r1, r7, r1
 80006b2:	4b34      	ldr	r3, [pc, #208]	; (8000784 <MX_RTC_Init+0x174>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	0018      	movs	r0, r3
 80006b8:	f003 ff26 	bl	8004508 <HAL_RTC_SetTime>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d001      	beq.n	80006c4 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 80006c0:	f000 ff78 	bl	80015b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006c4:	2128      	movs	r1, #40	; 0x28
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2201      	movs	r2, #1
 80006d0:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2201      	movs	r2, #1
 80006d6:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006de:	1879      	adds	r1, r7, r1
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_RTC_Init+0x174>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	0018      	movs	r0, r3
 80006e6:	f004 f813 	bl	8004710 <HAL_RTC_SetDate>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 80006ee:	f000 ff61 	bl	80015b4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 80006f2:	003b      	movs	r3, r7
 80006f4:	2201      	movs	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80006f8:	003b      	movs	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80006fe:	003b      	movs	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000704:	003b      	movs	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800070a:	003b      	movs	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000710:	003b      	movs	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000716:	003b      	movs	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 800071c:	003b      	movs	r3, r7
 800071e:	4a1b      	ldr	r2, [pc, #108]	; (800078c <MX_RTC_Init+0x17c>)
 8000720:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000722:	003b      	movs	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000728:	003b      	movs	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800072e:	003b      	movs	r3, r7
 8000730:	2220      	movs	r2, #32
 8000732:	2101      	movs	r1, #1
 8000734:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000736:	003b      	movs	r3, r7
 8000738:	2280      	movs	r2, #128	; 0x80
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800073e:	0039      	movs	r1, r7
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_RTC_Init+0x174>)
 8000742:	2201      	movs	r2, #1
 8000744:	0018      	movs	r0, r3
 8000746:	f004 f9e9 	bl	8004b1c <HAL_RTC_SetAlarm_IT>
 800074a:	1e03      	subs	r3, r0, #0
 800074c:	d001      	beq.n	8000752 <MX_RTC_Init+0x142>
  {
    Error_Handler();
 800074e:	f000 ff31 	bl	80015b4 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Hours = 0x2;
 8000752:	003b      	movs	r3, r7
 8000754:	2202      	movs	r2, #2
 8000756:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8000758:	003b      	movs	r3, r7
 800075a:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <MX_RTC_Init+0x180>)
 800075c:	615a      	str	r2, [r3, #20]
  sAlarm.Alarm = RTC_ALARM_B;
 800075e:	003b      	movs	r3, r7
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	0092      	lsls	r2, r2, #2
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000766:	0039      	movs	r1, r7
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_RTC_Init+0x174>)
 800076a:	2201      	movs	r2, #1
 800076c:	0018      	movs	r0, r3
 800076e:	f004 f9d5 	bl	8004b1c <HAL_RTC_SetAlarm_IT>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_RTC_Init+0x16a>
  {
    Error_Handler();
 8000776:	f000 ff1d 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b010      	add	sp, #64	; 0x40
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	20000110 	.word	0x20000110
 8000788:	40002800 	.word	0x40002800
 800078c:	80800080 	.word	0x80800080
 8000790:	80808080 	.word	0x80808080

08000794 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_TIM16_Init+0x44>)
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <MX_TIM16_Init+0x48>)
 800079c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 244;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007a0:	22f4      	movs	r2, #244	; 0xf4
 80007a2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007ac:	4a0c      	ldr	r2, [pc, #48]	; (80007e0 <MX_TIM16_Init+0x4c>)
 80007ae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007c4:	0018      	movs	r0, r3
 80007c6:	f004 fd88 	bl	80052da <HAL_TIM_Base_Init>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80007ce:	f000 fef1 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2000013c 	.word	0x2000013c
 80007dc:	40014400 	.word	0x40014400
 80007e0:	0000ffff 	.word	0x0000ffff

080007e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_USART2_UART_Init+0x60>)
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <MX_USART2_UART_Init+0x64>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_USART2_UART_Init+0x60>)
 80007f0:	22e1      	movs	r2, #225	; 0xe1
 80007f2:	0252      	lsls	r2, r2, #9
 80007f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_USART2_UART_Init+0x60>)
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	0152      	lsls	r2, r2, #5
 80007fc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_USART2_UART_Init+0x60>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_USART2_UART_Init+0x60>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_USART2_UART_Init+0x60>)
 800080c:	220c      	movs	r2, #12
 800080e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USART2_UART_Init+0x60>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_USART2_UART_Init+0x60>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_USART2_UART_Init+0x60>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_USART2_UART_Init+0x60>)
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_USART2_UART_Init+0x60>)
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <MX_USART2_UART_Init+0x60>)
 8000830:	0018      	movs	r0, r3
 8000832:	f004 fe6d 	bl	8005510 <HAL_UART_Init>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800083a:	f000 febb 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000188 	.word	0x20000188
 8000848:	40004400 	.word	0x40004400

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b08b      	sub	sp, #44	; 0x2c
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	2414      	movs	r4, #20
 8000854:	193b      	adds	r3, r7, r4
 8000856:	0018      	movs	r0, r3
 8000858:	2314      	movs	r3, #20
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f005 fbbe 	bl	8005fde <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b57      	ldr	r3, [pc, #348]	; (80009c0 <MX_GPIO_Init+0x174>)
 8000864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000866:	4b56      	ldr	r3, [pc, #344]	; (80009c0 <MX_GPIO_Init+0x174>)
 8000868:	2102      	movs	r1, #2
 800086a:	430a      	orrs	r2, r1
 800086c:	635a      	str	r2, [r3, #52]	; 0x34
 800086e:	4b54      	ldr	r3, [pc, #336]	; (80009c0 <MX_GPIO_Init+0x174>)
 8000870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000872:	2202      	movs	r2, #2
 8000874:	4013      	ands	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b51      	ldr	r3, [pc, #324]	; (80009c0 <MX_GPIO_Init+0x174>)
 800087c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800087e:	4b50      	ldr	r3, [pc, #320]	; (80009c0 <MX_GPIO_Init+0x174>)
 8000880:	2104      	movs	r1, #4
 8000882:	430a      	orrs	r2, r1
 8000884:	635a      	str	r2, [r3, #52]	; 0x34
 8000886:	4b4e      	ldr	r3, [pc, #312]	; (80009c0 <MX_GPIO_Init+0x174>)
 8000888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800088a:	2204      	movs	r2, #4
 800088c:	4013      	ands	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000892:	4b4b      	ldr	r3, [pc, #300]	; (80009c0 <MX_GPIO_Init+0x174>)
 8000894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000896:	4b4a      	ldr	r3, [pc, #296]	; (80009c0 <MX_GPIO_Init+0x174>)
 8000898:	2120      	movs	r1, #32
 800089a:	430a      	orrs	r2, r1
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
 800089e:	4b48      	ldr	r3, [pc, #288]	; (80009c0 <MX_GPIO_Init+0x174>)
 80008a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008a2:	2220      	movs	r2, #32
 80008a4:	4013      	ands	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b45      	ldr	r3, [pc, #276]	; (80009c0 <MX_GPIO_Init+0x174>)
 80008ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ae:	4b44      	ldr	r3, [pc, #272]	; (80009c0 <MX_GPIO_Init+0x174>)
 80008b0:	2101      	movs	r1, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	635a      	str	r2, [r3, #52]	; 0x34
 80008b6:	4b42      	ldr	r3, [pc, #264]	; (80009c0 <MX_GPIO_Init+0x174>)
 80008b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ba:	2201      	movs	r2, #1
 80008bc:	4013      	ands	r3, r2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Output_Pin|PM_LED_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);
 80008c2:	4b40      	ldr	r3, [pc, #256]	; (80009c4 <MX_GPIO_Init+0x178>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	21c2      	movs	r1, #194	; 0xc2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f001 fc4c 	bl	8002166 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008ce:	4b3e      	ldr	r3, [pc, #248]	; (80009c8 <MX_GPIO_Init+0x17c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	2140      	movs	r1, #64	; 0x40
 80008d4:	0018      	movs	r0, r3
 80008d6:	f001 fc46 	bl	8002166 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2204      	movs	r2, #4
 80008de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2288      	movs	r2, #136	; 0x88
 80008e4:	0352      	lsls	r2, r2, #13
 80008e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	4a36      	ldr	r2, [pc, #216]	; (80009cc <MX_GPIO_Init+0x180>)
 80008f2:	0019      	movs	r1, r3
 80008f4:	0010      	movs	r0, r2
 80008f6:	f001 fab5 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_Button_Pin Alarm_Set_Button_Pin Alarm_Enable_Button_Pin Hour_Set_Button_Pin
                           Minute_Set_Button_Pin */
  GPIO_InitStruct.Pin = Display_Button_Pin|Alarm_Set_Button_Pin|Alarm_Enable_Button_Pin|Hour_Set_Button_Pin
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	4a34      	ldr	r2, [pc, #208]	; (80009d0 <MX_GPIO_Init+0x184>)
 80008fe:	601a      	str	r2, [r3, #0]
                          |Minute_Set_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2284      	movs	r2, #132	; 0x84
 8000904:	0392      	lsls	r2, r2, #14
 8000906:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	2201      	movs	r2, #1
 800090c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	193a      	adds	r2, r7, r4
 8000910:	23a0      	movs	r3, #160	; 0xa0
 8000912:	05db      	lsls	r3, r3, #23
 8000914:	0011      	movs	r1, r2
 8000916:	0018      	movs	r0, r3
 8000918:	f001 faa4 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Output_Pin PM_LED_Pin Alarm_LED_Pin */
  GPIO_InitStruct.Pin = Buzzer_Output_Pin|PM_LED_Pin|Alarm_LED_Pin;
 800091c:	193b      	adds	r3, r7, r4
 800091e:	22c2      	movs	r2, #194	; 0xc2
 8000920:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	193b      	adds	r3, r7, r4
 8000924:	2201      	movs	r2, #1
 8000926:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	193b      	adds	r3, r7, r4
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	193b      	adds	r3, r7, r4
 8000936:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <MX_GPIO_Init+0x178>)
 8000938:	0019      	movs	r1, r3
 800093a:	0010      	movs	r0, r2
 800093c:	f001 fa92 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000940:	193b      	adds	r3, r7, r4
 8000942:	2240      	movs	r2, #64	; 0x40
 8000944:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	193b      	adds	r3, r7, r4
 8000948:	2201      	movs	r2, #1
 800094a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000958:	193b      	adds	r3, r7, r4
 800095a:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <MX_GPIO_Init+0x17c>)
 800095c:	0019      	movs	r1, r3
 800095e:	0010      	movs	r0, r2
 8000960:	f001 fa80 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Snooze_Button_Pin */
  GPIO_InitStruct.Pin = Snooze_Button_Pin;
 8000964:	0021      	movs	r1, r4
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	0112      	lsls	r2, r2, #4
 800096c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2201      	movs	r2, #1
 8000978:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Snooze_Button_GPIO_Port, &GPIO_InitStruct);
 800097a:	187a      	adds	r2, r7, r1
 800097c:	23a0      	movs	r3, #160	; 0xa0
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	0011      	movs	r1, r2
 8000982:	0018      	movs	r0, r3
 8000984:	f001 fa6e 	bl	8001e64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2101      	movs	r1, #1
 800098c:	2005      	movs	r0, #5
 800098e:	f001 f9c1 	bl	8001d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000992:	2005      	movs	r0, #5
 8000994:	f001 f9d3 	bl	8001d3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	2006      	movs	r0, #6
 800099e:	f001 f9b9 	bl	8001d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80009a2:	2006      	movs	r0, #6
 80009a4:	f001 f9cb 	bl	8001d3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	2007      	movs	r0, #7
 80009ae:	f001 f9b1 	bl	8001d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80009b2:	2007      	movs	r0, #7
 80009b4:	f001 f9c3 	bl	8001d3e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b00b      	add	sp, #44	; 0x2c
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	40021000 	.word	0x40021000
 80009c4:	50000400 	.word	0x50000400
 80009c8:	50000800 	.word	0x50000800
 80009cc:	50001400 	.word	0x50001400
 80009d0:	00001033 	.word	0x00001033

080009d4 <sevSeg_I2C1_Init>:

/* USER CODE BEGIN 4 */

void sevSeg_I2C1_Init(void) {
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af02      	add	r7, sp, #8
	 */

	HAL_StatusTypeDef halRet;

	//Set display to decode hex data inputs
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_decodeBuffer, 2, HAL_MAX_DELAY);
 80009da:	4b66      	ldr	r3, [pc, #408]	; (8000b74 <sevSeg_I2C1_Init+0x1a0>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b299      	uxth	r1, r3
 80009e0:	1dfc      	adds	r4, r7, #7
 80009e2:	4a65      	ldr	r2, [pc, #404]	; (8000b78 <sevSeg_I2C1_Init+0x1a4>)
 80009e4:	4865      	ldr	r0, [pc, #404]	; (8000b7c <sevSeg_I2C1_Init+0x1a8>)
 80009e6:	2301      	movs	r3, #1
 80009e8:	425b      	negs	r3, r3
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2302      	movs	r3, #2
 80009ee:	f001 fca1 	bl	8002334 <HAL_I2C_Master_Transmit>
 80009f2:	0003      	movs	r3, r0
 80009f4:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d004      	beq.n	8000a08 <sevSeg_I2C1_Init+0x34>
		printf("HAL Error - TX decode mode\n\r");
 80009fe:	4b60      	ldr	r3, [pc, #384]	; (8000b80 <sevSeg_I2C1_Init+0x1ac>)
 8000a00:	0018      	movs	r0, r3
 8000a02:	f005 faf5 	bl	8005ff0 <iprintf>
 8000a06:	e003      	b.n	8000a10 <sevSeg_I2C1_Init+0x3c>
	} else{
		printf("Display set to decode mode\n\r");
 8000a08:	4b5e      	ldr	r3, [pc, #376]	; (8000b84 <sevSeg_I2C1_Init+0x1b0>)
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f005 faf0 	bl	8005ff0 <iprintf>
	}

	//Disable shutdown mode
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_SD_ONBuff, 2, HAL_MAX_DELAY);
 8000a10:	4b58      	ldr	r3, [pc, #352]	; (8000b74 <sevSeg_I2C1_Init+0x1a0>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b299      	uxth	r1, r3
 8000a16:	1dfc      	adds	r4, r7, #7
 8000a18:	4a5b      	ldr	r2, [pc, #364]	; (8000b88 <sevSeg_I2C1_Init+0x1b4>)
 8000a1a:	4858      	ldr	r0, [pc, #352]	; (8000b7c <sevSeg_I2C1_Init+0x1a8>)
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	425b      	negs	r3, r3
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	2302      	movs	r3, #2
 8000a24:	f001 fc86 	bl	8002334 <HAL_I2C_Master_Transmit>
 8000a28:	0003      	movs	r3, r0
 8000a2a:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d004      	beq.n	8000a3e <sevSeg_I2C1_Init+0x6a>
		printf("HAL Error - TX disable shutdown mode\n\r");
 8000a34:	4b55      	ldr	r3, [pc, #340]	; (8000b8c <sevSeg_I2C1_Init+0x1b8>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f005 fada 	bl	8005ff0 <iprintf>
 8000a3c:	e003      	b.n	8000a46 <sevSeg_I2C1_Init+0x72>
	} else {
		printf("Display shutdown mode disabled\n\r");
 8000a3e:	4b54      	ldr	r3, [pc, #336]	; (8000b90 <sevSeg_I2C1_Init+0x1bc>)
 8000a40:	0018      	movs	r0, r3
 8000a42:	f005 fad5 	bl	8005ff0 <iprintf>
	}

	//Set to test mode
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_testONBuff, 2, HAL_MAX_DELAY);
 8000a46:	4b4b      	ldr	r3, [pc, #300]	; (8000b74 <sevSeg_I2C1_Init+0x1a0>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	b299      	uxth	r1, r3
 8000a4c:	1dfc      	adds	r4, r7, #7
 8000a4e:	4a51      	ldr	r2, [pc, #324]	; (8000b94 <sevSeg_I2C1_Init+0x1c0>)
 8000a50:	484a      	ldr	r0, [pc, #296]	; (8000b7c <sevSeg_I2C1_Init+0x1a8>)
 8000a52:	2301      	movs	r3, #1
 8000a54:	425b      	negs	r3, r3
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	2302      	movs	r3, #2
 8000a5a:	f001 fc6b 	bl	8002334 <HAL_I2C_Master_Transmit>
 8000a5e:	0003      	movs	r3, r0
 8000a60:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d004      	beq.n	8000a74 <sevSeg_I2C1_Init+0xa0>
		printf("HAL Error - TX test mode ON data\n\r");
 8000a6a:	4b4b      	ldr	r3, [pc, #300]	; (8000b98 <sevSeg_I2C1_Init+0x1c4>)
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f005 fabf 	bl	8005ff0 <iprintf>
 8000a72:	e003      	b.n	8000a7c <sevSeg_I2C1_Init+0xa8>
	} else {
		printf("Test mode enabled - all LEDs on\n\r");
 8000a74:	4b49      	ldr	r3, [pc, #292]	; (8000b9c <sevSeg_I2C1_Init+0x1c8>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f005 faba 	bl	8005ff0 <iprintf>
	}

	// Disable test mode
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_testOFFBuff, 2, HAL_MAX_DELAY);
 8000a7c:	4b3d      	ldr	r3, [pc, #244]	; (8000b74 <sevSeg_I2C1_Init+0x1a0>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b299      	uxth	r1, r3
 8000a82:	1dfc      	adds	r4, r7, #7
 8000a84:	4a46      	ldr	r2, [pc, #280]	; (8000ba0 <sevSeg_I2C1_Init+0x1cc>)
 8000a86:	483d      	ldr	r0, [pc, #244]	; (8000b7c <sevSeg_I2C1_Init+0x1a8>)
 8000a88:	2301      	movs	r3, #1
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2302      	movs	r3, #2
 8000a90:	f001 fc50 	bl	8002334 <HAL_I2C_Master_Transmit>
 8000a94:	0003      	movs	r3, r0
 8000a96:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d004      	beq.n	8000aaa <sevSeg_I2C1_Init+0xd6>
		printf("HAL Error - TX test mode OFF data\n\r");
 8000aa0:	4b40      	ldr	r3, [pc, #256]	; (8000ba4 <sevSeg_I2C1_Init+0x1d0>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f005 faa4 	bl	8005ff0 <iprintf>
 8000aa8:	e003      	b.n	8000ab2 <sevSeg_I2C1_Init+0xde>
	} else {
		printf("Test mode disabled - all LEDs off\n\r");
 8000aaa:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <sevSeg_I2C1_Init+0x1d4>)
 8000aac:	0018      	movs	r0, r3
 8000aae:	f005 fa9f 	bl	8005ff0 <iprintf>
	}

	sevSeg_intensityBuff[1] = sevSeg_intensityDuty[1];		// Initialize to 50% duty cycle
 8000ab2:	2231      	movs	r2, #49	; 0x31
 8000ab4:	4b3d      	ldr	r3, [pc, #244]	; (8000bac <sevSeg_I2C1_Init+0x1d8>)
 8000ab6:	705a      	strb	r2, [r3, #1]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_intensityBuff, 2, HAL_MAX_DELAY);
 8000ab8:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <sevSeg_I2C1_Init+0x1a0>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b299      	uxth	r1, r3
 8000abe:	1dfc      	adds	r4, r7, #7
 8000ac0:	4a3a      	ldr	r2, [pc, #232]	; (8000bac <sevSeg_I2C1_Init+0x1d8>)
 8000ac2:	482e      	ldr	r0, [pc, #184]	; (8000b7c <sevSeg_I2C1_Init+0x1a8>)
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2302      	movs	r3, #2
 8000acc:	f001 fc32 	bl	8002334 <HAL_I2C_Master_Transmit>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000ad4:	1dfb      	adds	r3, r7, #7
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d004      	beq.n	8000ae6 <sevSeg_I2C1_Init+0x112>
		printf("HAL Error - TX intensity level data\n\r");
 8000adc:	4b34      	ldr	r3, [pc, #208]	; (8000bb0 <sevSeg_I2C1_Init+0x1dc>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f005 fa86 	bl	8005ff0 <iprintf>
 8000ae4:	e003      	b.n	8000aee <sevSeg_I2C1_Init+0x11a>
	} else {
		printf("Intensity Set\n\r");
 8000ae6:	4b33      	ldr	r3, [pc, #204]	; (8000bb4 <sevSeg_I2C1_Init+0x1e0>)
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f005 fa81 	bl	8005ff0 <iprintf>
	}

	// Set and display current time (12:00 A.M.)

	currTime.Hours = 12;
 8000aee:	4b32      	ldr	r3, [pc, #200]	; (8000bb8 <sevSeg_I2C1_Init+0x1e4>)
 8000af0:	220c      	movs	r2, #12
 8000af2:	701a      	strb	r2, [r3, #0]
	currTime.Minutes = 58;
 8000af4:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <sevSeg_I2C1_Init+0x1e4>)
 8000af6:	223a      	movs	r2, #58	; 0x3a
 8000af8:	705a      	strb	r2, [r3, #1]
	currTime.Seconds = 50;
 8000afa:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <sevSeg_I2C1_Init+0x1e4>)
 8000afc:	2232      	movs	r2, #50	; 0x32
 8000afe:	709a      	strb	r2, [r3, #2]
	currTime.TimeFormat = RTC_HOURFORMAT12_AM;			//This is initially in the A.M., so P.M. LED is off.
 8000b00:	4b2d      	ldr	r3, [pc, #180]	; (8000bb8 <sevSeg_I2C1_Init+0x1e4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	70da      	strb	r2, [r3, #3]

	currDate.Year = 0;
 8000b06:	4b2d      	ldr	r3, [pc, #180]	; (8000bbc <sevSeg_I2C1_Init+0x1e8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	70da      	strb	r2, [r3, #3]
	currDate.Month = RTC_MONTH_JANUARY;
 8000b0c:	4b2b      	ldr	r3, [pc, #172]	; (8000bbc <sevSeg_I2C1_Init+0x1e8>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	705a      	strb	r2, [r3, #1]
	currDate.Date = 0;
 8000b12:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <sevSeg_I2C1_Init+0x1e8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8000b18:	4927      	ldr	r1, [pc, #156]	; (8000bb8 <sevSeg_I2C1_Init+0x1e4>)
 8000b1a:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <sevSeg_I2C1_Init+0x1ec>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f003 fcf2 	bl	8004508 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 8000b24:	4925      	ldr	r1, [pc, #148]	; (8000bbc <sevSeg_I2C1_Init+0x1e8>)
 8000b26:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <sevSeg_I2C1_Init+0x1ec>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f003 fdf0 	bl	8004710 <HAL_RTC_SetDate>

	printf("Current time defaulted to: %d:%d:%d\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000b30:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <sevSeg_I2C1_Init+0x1e4>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	0019      	movs	r1, r3
 8000b36:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <sevSeg_I2C1_Init+0x1e4>)
 8000b38:	785b      	ldrb	r3, [r3, #1]
 8000b3a:	001a      	movs	r2, r3
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <sevSeg_I2C1_Init+0x1e4>)
 8000b3e:	789b      	ldrb	r3, [r3, #2]
 8000b40:	4820      	ldr	r0, [pc, #128]	; (8000bc4 <sevSeg_I2C1_Init+0x1f0>)
 8000b42:	f005 fa55 	bl	8005ff0 <iprintf>

	halRet = updateAndDisplayTime();
 8000b46:	1dfc      	adds	r4, r7, #7
 8000b48:	f000 f842 	bl	8000bd0 <updateAndDisplayTime>
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d004      	beq.n	8000b62 <sevSeg_I2C1_Init+0x18e>
		printf("HAL Error - TX current time\n\r");
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <sevSeg_I2C1_Init+0x1f4>)
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f005 fa48 	bl	8005ff0 <iprintf>
	} else {
		printf("Display Updated with current time\n\r");
	}

	return;
 8000b60:	e004      	b.n	8000b6c <sevSeg_I2C1_Init+0x198>
		printf("Display Updated with current time\n\r");
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <sevSeg_I2C1_Init+0x1f8>)
 8000b64:	0018      	movs	r0, r3
 8000b66:	f005 fa43 	bl	8005ff0 <iprintf>
	return;
 8000b6a:	46c0      	nop			; (mov r8, r8)

}
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b003      	add	sp, #12
 8000b70:	bd90      	pop	{r4, r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000004 	.word	0x20000004
 8000b7c:	200000bc 	.word	0x200000bc
 8000b80:	08006ff8 	.word	0x08006ff8
 8000b84:	08007018 	.word	0x08007018
 8000b88:	2000000c 	.word	0x2000000c
 8000b8c:	08007038 	.word	0x08007038
 8000b90:	08007060 	.word	0x08007060
 8000b94:	2000001c 	.word	0x2000001c
 8000b98:	08007084 	.word	0x08007084
 8000b9c:	080070a8 	.word	0x080070a8
 8000ba0:	20000018 	.word	0x20000018
 8000ba4:	080070cc 	.word	0x080070cc
 8000ba8:	080070f0 	.word	0x080070f0
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	08007114 	.word	0x08007114
 8000bb4:	0800713c 	.word	0x0800713c
 8000bb8:	2000021c 	.word	0x2000021c
 8000bbc:	20000230 	.word	0x20000230
 8000bc0:	20000110 	.word	0x20000110
 8000bc4:	0800714c 	.word	0x0800714c
 8000bc8:	08007174 	.word	0x08007174
 8000bcc:	08007194 	.word	0x08007194

08000bd0 <updateAndDisplayTime>:

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af02      	add	r7, sp, #8

	HAL_StatusTypeDef halRet = HAL_OK;
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]

	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8000bdc:	4941      	ldr	r1, [pc, #260]	; (8000ce4 <updateAndDisplayTime+0x114>)
 8000bde:	4b42      	ldr	r3, [pc, #264]	; (8000ce8 <updateAndDisplayTime+0x118>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	0018      	movs	r0, r3
 8000be4:	f003 fd38 	bl	8004658 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 8000be8:	4940      	ldr	r1, [pc, #256]	; (8000cec <updateAndDisplayTime+0x11c>)
 8000bea:	4b3f      	ldr	r3, [pc, #252]	; (8000ce8 <updateAndDisplayTime+0x118>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f003 fe20 	bl	8004834 <HAL_RTC_GetDate>

	sevSeg_digit0Buff[1] = currTime.Hours / 10;
 8000bf4:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <updateAndDisplayTime+0x114>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	210a      	movs	r1, #10
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff fa8c 	bl	8000118 <__udivsi3>
 8000c00:	0003      	movs	r3, r0
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b3a      	ldr	r3, [pc, #232]	; (8000cf0 <updateAndDisplayTime+0x120>)
 8000c06:	705a      	strb	r2, [r3, #1]
	sevSeg_digit1Buff[1] = currTime.Hours % 10;
 8000c08:	4b36      	ldr	r3, [pc, #216]	; (8000ce4 <updateAndDisplayTime+0x114>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	210a      	movs	r1, #10
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff fb08 	bl	8000224 <__aeabi_uidivmod>
 8000c14:	000b      	movs	r3, r1
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	4b36      	ldr	r3, [pc, #216]	; (8000cf4 <updateAndDisplayTime+0x124>)
 8000c1a:	705a      	strb	r2, [r3, #1]
	sevSeg_digit2Buff[1] = currTime.Minutes / 10;
 8000c1c:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <updateAndDisplayTime+0x114>)
 8000c1e:	785b      	ldrb	r3, [r3, #1]
 8000c20:	210a      	movs	r1, #10
 8000c22:	0018      	movs	r0, r3
 8000c24:	f7ff fa78 	bl	8000118 <__udivsi3>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b32      	ldr	r3, [pc, #200]	; (8000cf8 <updateAndDisplayTime+0x128>)
 8000c2e:	705a      	strb	r2, [r3, #1]
	sevSeg_digit3Buff[1] = currTime.Minutes % 10;
 8000c30:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <updateAndDisplayTime+0x114>)
 8000c32:	785b      	ldrb	r3, [r3, #1]
 8000c34:	210a      	movs	r1, #10
 8000c36:	0018      	movs	r0, r3
 8000c38:	f7ff faf4 	bl	8000224 <__aeabi_uidivmod>
 8000c3c:	000b      	movs	r3, r1
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <updateAndDisplayTime+0x12c>)
 8000c42:	705a      	strb	r2, [r3, #1]

	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit0Buff, 2, HAL_MAX_DELAY);
 8000c44:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <updateAndDisplayTime+0x130>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b299      	uxth	r1, r3
 8000c4a:	1dfc      	adds	r4, r7, #7
 8000c4c:	4a28      	ldr	r2, [pc, #160]	; (8000cf0 <updateAndDisplayTime+0x120>)
 8000c4e:	482d      	ldr	r0, [pc, #180]	; (8000d04 <updateAndDisplayTime+0x134>)
 8000c50:	2301      	movs	r3, #1
 8000c52:	425b      	negs	r3, r3
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2302      	movs	r3, #2
 8000c58:	f001 fb6c 	bl	8002334 <HAL_I2C_Master_Transmit>
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit1Buff, 2, HAL_MAX_DELAY);
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <updateAndDisplayTime+0x130>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b299      	uxth	r1, r3
 8000c66:	1dfc      	adds	r4, r7, #7
 8000c68:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <updateAndDisplayTime+0x124>)
 8000c6a:	4826      	ldr	r0, [pc, #152]	; (8000d04 <updateAndDisplayTime+0x134>)
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	425b      	negs	r3, r3
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2302      	movs	r3, #2
 8000c74:	f001 fb5e 	bl	8002334 <HAL_I2C_Master_Transmit>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit2Buff, 2, HAL_MAX_DELAY);
 8000c7c:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <updateAndDisplayTime+0x130>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b299      	uxth	r1, r3
 8000c82:	1dfc      	adds	r4, r7, #7
 8000c84:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <updateAndDisplayTime+0x128>)
 8000c86:	481f      	ldr	r0, [pc, #124]	; (8000d04 <updateAndDisplayTime+0x134>)
 8000c88:	2301      	movs	r3, #1
 8000c8a:	425b      	negs	r3, r3
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2302      	movs	r3, #2
 8000c90:	f001 fb50 	bl	8002334 <HAL_I2C_Master_Transmit>
 8000c94:	0003      	movs	r3, r0
 8000c96:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit3Buff, 2, HAL_MAX_DELAY);
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <updateAndDisplayTime+0x130>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b299      	uxth	r1, r3
 8000c9e:	1dfc      	adds	r4, r7, #7
 8000ca0:	4a16      	ldr	r2, [pc, #88]	; (8000cfc <updateAndDisplayTime+0x12c>)
 8000ca2:	4818      	ldr	r0, [pc, #96]	; (8000d04 <updateAndDisplayTime+0x134>)
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2302      	movs	r3, #2
 8000cac:	f001 fb42 	bl	8002334 <HAL_I2C_Master_Transmit>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	7023      	strb	r3, [r4, #0]

	if(currTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <updateAndDisplayTime+0x114>)
 8000cb6:	78db      	ldrb	r3, [r3, #3]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d106      	bne.n	8000cca <updateAndDisplayTime+0xfa>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000cbc:	2140      	movs	r1, #64	; 0x40
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <updateAndDisplayTime+0x138>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f001 fa4f 	bl	8002166 <HAL_GPIO_WritePin>
 8000cc8:	e005      	b.n	8000cd6 <updateAndDisplayTime+0x106>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000cca:	2140      	movs	r1, #64	; 0x40
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <updateAndDisplayTime+0x138>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f001 fa48 	bl	8002166 <HAL_GPIO_WritePin>
	}

	return halRet;
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	781b      	ldrb	r3, [r3, #0]

}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b003      	add	sp, #12
 8000ce0:	bd90      	pop	{r4, r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	2000021c 	.word	0x2000021c
 8000ce8:	20000110 	.word	0x20000110
 8000cec:	20000230 	.word	0x20000230
 8000cf0:	20000020 	.word	0x20000020
 8000cf4:	20000024 	.word	0x20000024
 8000cf8:	20000028 	.word	0x20000028
 8000cfc:	2000002c 	.word	0x2000002c
 8000d00:	20000000 	.word	0x20000000
 8000d04:	200000bc 	.word	0x200000bc
 8000d08:	50000400 	.word	0x50000400

08000d0c <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8000d0c:	b5b0      	push	{r4, r5, r7, lr}
 8000d0e:	b08e      	sub	sp, #56	; 0x38
 8000d10:	af02      	add	r7, sp, #8

	HAL_StatusTypeDef halRet = HAL_OK;
 8000d12:	242f      	movs	r4, #47	; 0x2f
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef userAlarmObj;
	HAL_RTC_GetAlarm(&hrtc, &userAlarmObj, userAlarm, RTC_FORMAT_BCD);
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	009a      	lsls	r2, r3, #2
 8000d1e:	1d39      	adds	r1, r7, #4
 8000d20:	4841      	ldr	r0, [pc, #260]	; (8000e28 <updateAndDisplayAlarm+0x11c>)
 8000d22:	2301      	movs	r3, #1
 8000d24:	f004 f8da 	bl	8004edc <HAL_RTC_GetAlarm>
	userAlarmTime = userAlarmObj.AlarmTime;
 8000d28:	4b40      	ldr	r3, [pc, #256]	; (8000e2c <updateAndDisplayAlarm+0x120>)
 8000d2a:	1d3a      	adds	r2, r7, #4
 8000d2c:	ca23      	ldmia	r2!, {r0, r1, r5}
 8000d2e:	c323      	stmia	r3!, {r0, r1, r5}
 8000d30:	ca03      	ldmia	r2!, {r0, r1}
 8000d32:	c303      	stmia	r3!, {r0, r1}

	sevSeg_digit0Buff[1] = userAlarmTime.Hours / 10;
 8000d34:	4b3d      	ldr	r3, [pc, #244]	; (8000e2c <updateAndDisplayAlarm+0x120>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	210a      	movs	r1, #10
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff f9ec 	bl	8000118 <__udivsi3>
 8000d40:	0003      	movs	r3, r0
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <updateAndDisplayAlarm+0x124>)
 8000d46:	705a      	strb	r2, [r3, #1]
	sevSeg_digit1Buff[1] = userAlarmTime.Hours % 10;
 8000d48:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <updateAndDisplayAlarm+0x120>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	210a      	movs	r1, #10
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff fa68 	bl	8000224 <__aeabi_uidivmod>
 8000d54:	000b      	movs	r3, r1
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b36      	ldr	r3, [pc, #216]	; (8000e34 <updateAndDisplayAlarm+0x128>)
 8000d5a:	705a      	strb	r2, [r3, #1]
	sevSeg_digit2Buff[1] = userAlarmTime.Minutes / 10;
 8000d5c:	4b33      	ldr	r3, [pc, #204]	; (8000e2c <updateAndDisplayAlarm+0x120>)
 8000d5e:	785b      	ldrb	r3, [r3, #1]
 8000d60:	210a      	movs	r1, #10
 8000d62:	0018      	movs	r0, r3
 8000d64:	f7ff f9d8 	bl	8000118 <__udivsi3>
 8000d68:	0003      	movs	r3, r0
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b32      	ldr	r3, [pc, #200]	; (8000e38 <updateAndDisplayAlarm+0x12c>)
 8000d6e:	705a      	strb	r2, [r3, #1]
	sevSeg_digit3Buff[1] = userAlarmTime.Minutes % 10;
 8000d70:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <updateAndDisplayAlarm+0x120>)
 8000d72:	785b      	ldrb	r3, [r3, #1]
 8000d74:	210a      	movs	r1, #10
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff fa54 	bl	8000224 <__aeabi_uidivmod>
 8000d7c:	000b      	movs	r3, r1
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <updateAndDisplayAlarm+0x130>)
 8000d82:	705a      	strb	r2, [r3, #1]

	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit0Buff, 2, HAL_MAX_DELAY);
 8000d84:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <updateAndDisplayAlarm+0x134>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b299      	uxth	r1, r3
 8000d8a:	0025      	movs	r5, r4
 8000d8c:	197c      	adds	r4, r7, r5
 8000d8e:	4a28      	ldr	r2, [pc, #160]	; (8000e30 <updateAndDisplayAlarm+0x124>)
 8000d90:	482c      	ldr	r0, [pc, #176]	; (8000e44 <updateAndDisplayAlarm+0x138>)
 8000d92:	2301      	movs	r3, #1
 8000d94:	425b      	negs	r3, r3
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2302      	movs	r3, #2
 8000d9a:	f001 facb 	bl	8002334 <HAL_I2C_Master_Transmit>
 8000d9e:	0003      	movs	r3, r0
 8000da0:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit1Buff, 2, HAL_MAX_DELAY);
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <updateAndDisplayAlarm+0x134>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b299      	uxth	r1, r3
 8000da8:	197c      	adds	r4, r7, r5
 8000daa:	4a22      	ldr	r2, [pc, #136]	; (8000e34 <updateAndDisplayAlarm+0x128>)
 8000dac:	4825      	ldr	r0, [pc, #148]	; (8000e44 <updateAndDisplayAlarm+0x138>)
 8000dae:	2301      	movs	r3, #1
 8000db0:	425b      	negs	r3, r3
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2302      	movs	r3, #2
 8000db6:	f001 fabd 	bl	8002334 <HAL_I2C_Master_Transmit>
 8000dba:	0003      	movs	r3, r0
 8000dbc:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit2Buff, 2, HAL_MAX_DELAY);
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <updateAndDisplayAlarm+0x134>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b299      	uxth	r1, r3
 8000dc4:	197c      	adds	r4, r7, r5
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <updateAndDisplayAlarm+0x12c>)
 8000dc8:	481e      	ldr	r0, [pc, #120]	; (8000e44 <updateAndDisplayAlarm+0x138>)
 8000dca:	2301      	movs	r3, #1
 8000dcc:	425b      	negs	r3, r3
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	f001 faaf 	bl	8002334 <HAL_I2C_Master_Transmit>
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit3Buff, 2, HAL_MAX_DELAY);
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <updateAndDisplayAlarm+0x134>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b299      	uxth	r1, r3
 8000de0:	197c      	adds	r4, r7, r5
 8000de2:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <updateAndDisplayAlarm+0x130>)
 8000de4:	4817      	ldr	r0, [pc, #92]	; (8000e44 <updateAndDisplayAlarm+0x138>)
 8000de6:	2301      	movs	r3, #1
 8000de8:	425b      	negs	r3, r3
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2302      	movs	r3, #2
 8000dee:	f001 faa1 	bl	8002334 <HAL_I2C_Master_Transmit>
 8000df2:	0003      	movs	r3, r0
 8000df4:	7023      	strb	r3, [r4, #0]

	if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <updateAndDisplayAlarm+0x120>)
 8000df8:	78db      	ldrb	r3, [r3, #3]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d106      	bne.n	8000e0c <updateAndDisplayAlarm+0x100>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000dfe:	2140      	movs	r1, #64	; 0x40
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <updateAndDisplayAlarm+0x13c>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	0018      	movs	r0, r3
 8000e06:	f001 f9ae 	bl	8002166 <HAL_GPIO_WritePin>
 8000e0a:	e005      	b.n	8000e18 <updateAndDisplayAlarm+0x10c>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000e0c:	2140      	movs	r1, #64	; 0x40
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <updateAndDisplayAlarm+0x13c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	0018      	movs	r0, r3
 8000e14:	f001 f9a7 	bl	8002166 <HAL_GPIO_WritePin>
	}

	return halRet;
 8000e18:	232f      	movs	r3, #47	; 0x2f
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	781b      	ldrb	r3, [r3, #0]

}
 8000e1e:	0018      	movs	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b00c      	add	sp, #48	; 0x30
 8000e24:	bdb0      	pop	{r4, r5, r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	20000110 	.word	0x20000110
 8000e2c:	20000234 	.word	0x20000234
 8000e30:	20000020 	.word	0x20000020
 8000e34:	20000024 	.word	0x20000024
 8000e38:	20000028 	.word	0x20000028
 8000e3c:	2000002c 	.word	0x2000002c
 8000e40:	20000000 	.word	0x20000000
 8000e44:	200000bc 	.word	0x200000bc
 8000e48:	50000400 	.word	0x50000400

08000e4c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b093      	sub	sp, #76	; 0x4c
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

	  printf("Enter alarm minute increment interrupt\n\r");
 8000e54:	4b22      	ldr	r3, [pc, #136]	; (8000ee0 <HAL_RTC_AlarmAEventCallback+0x94>)
 8000e56:	0018      	movs	r0, r3
 8000e58:	f005 f8ca 	bl	8005ff0 <iprintf>

	  RTC_AlarmTypeDef sAlarm;
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, FORMAT_BIN);
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	005a      	lsls	r2, r3, #1
 8000e60:	2420      	movs	r4, #32
 8000e62:	1939      	adds	r1, r7, r4
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	2300      	movs	r3, #0
 8000e68:	f004 f838 	bl	8004edc <HAL_RTC_GetAlarm>

	  RTC_TimeTypeDef currTime;
	  RTC_DateTypeDef currDate;
	  HAL_RTC_GetTime(hrtc, &currTime, RTC_FORMAT_BIN);
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	18f9      	adds	r1, r7, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	0018      	movs	r0, r3
 8000e76:	f003 fbef 	bl	8004658 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(hrtc, &currDate, RTC_FORMAT_BIN);		//get date is necessary, else RTC will not update time
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	18f9      	adds	r1, r7, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	0018      	movs	r0, r3
 8000e84:	f003 fcd6 	bl	8004834 <HAL_RTC_GetDate>

	  if(sAlarm.AlarmTime.Minutes>58) {
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	785b      	ldrb	r3, [r3, #1]
 8000e8c:	2b3a      	cmp	r3, #58	; 0x3a
 8000e8e:	d903      	bls.n	8000e98 <HAL_RTC_AlarmAEventCallback+0x4c>
		sAlarm.AlarmTime.Minutes=0;
 8000e90:	193b      	adds	r3, r7, r4
 8000e92:	2200      	movs	r2, #0
 8000e94:	705a      	strb	r2, [r3, #1]
 8000e96:	e006      	b.n	8000ea6 <HAL_RTC_AlarmAEventCallback+0x5a>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8000e98:	2120      	movs	r1, #32
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	785b      	ldrb	r3, [r3, #1]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	2320      	movs	r3, #32
 8000eaa:	18f9      	adds	r1, r7, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f003 fe33 	bl	8004b1c <HAL_RTC_SetAlarm_IT>
 8000eb6:	1e03      	subs	r3, r0, #0
 8000eb8:	d1f6      	bne.n	8000ea8 <HAL_RTC_AlarmAEventCallback+0x5c>

	  updateAndDisplayTime();
 8000eba:	f7ff fe89 	bl	8000bd0 <updateAndDisplayTime>

	  printf("Current time: %d : %d : %d\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000ebe:	200c      	movs	r0, #12
 8000ec0:	183b      	adds	r3, r7, r0
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	183b      	adds	r3, r7, r0
 8000ec8:	785b      	ldrb	r3, [r3, #1]
 8000eca:	001a      	movs	r2, r3
 8000ecc:	183b      	adds	r3, r7, r0
 8000ece:	789b      	ldrb	r3, [r3, #2]
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <HAL_RTC_AlarmAEventCallback+0x98>)
 8000ed2:	f005 f88d 	bl	8005ff0 <iprintf>

}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b013      	add	sp, #76	; 0x4c
 8000edc:	bd90      	pop	{r4, r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	080071b8 	.word	0x080071b8
 8000ee4:	080071e4 	.word	0x080071e4

08000ee8 <HAL_GPIO_EXTI_Falling_Callback>:



}

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	0002      	movs	r2, r0
 8000ef0:	1dbb      	adds	r3, r7, #6
 8000ef2:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	1dbb      	adds	r3, r7, #6
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d113      	bne.n	8000f26 <HAL_GPIO_EXTI_Falling_Callback+0x3e>
		halRet = displayButtonISR();
 8000efe:	250f      	movs	r5, #15
 8000f00:	197c      	adds	r4, r7, r5
 8000f02:	f000 f88f 	bl	8001024 <displayButtonISR>
 8000f06:	0003      	movs	r3, r0
 8000f08:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000f0a:	197b      	adds	r3, r7, r5
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d004      	beq.n	8000f1c <HAL_GPIO_EXTI_Falling_Callback+0x34>
			printf("Error toggling display.\n\r");
 8000f12:	4b3a      	ldr	r3, [pc, #232]	; (8000ffc <HAL_GPIO_EXTI_Falling_Callback+0x114>)
 8000f14:	0018      	movs	r0, r3
 8000f16:	f005 f86b 	bl	8005ff0 <iprintf>
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8000f1a:	e06a      	b.n	8000ff2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Display intensity toggled.\n\r");
 8000f1c:	4b38      	ldr	r3, [pc, #224]	; (8001000 <HAL_GPIO_EXTI_Falling_Callback+0x118>)
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f005 f866 	bl	8005ff0 <iprintf>
}
 8000f24:	e065      	b.n	8000ff2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8000f26:	2210      	movs	r2, #16
 8000f28:	1dbb      	adds	r3, r7, #6
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d113      	bne.n	8000f58 <HAL_GPIO_EXTI_Falling_Callback+0x70>
		halRet = alarmEnableISR();
 8000f30:	250f      	movs	r5, #15
 8000f32:	197c      	adds	r4, r7, r5
 8000f34:	f000 f8b6 	bl	80010a4 <alarmEnableISR>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000f3c:	197b      	adds	r3, r7, r5
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d004      	beq.n	8000f4e <HAL_GPIO_EXTI_Falling_Callback+0x66>
			printf("Error toggling user alarm.\n\r");
 8000f44:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <HAL_GPIO_EXTI_Falling_Callback+0x11c>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f005 f852 	bl	8005ff0 <iprintf>
}
 8000f4c:	e051      	b.n	8000ff2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm toggled.\n\r");
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <HAL_GPIO_EXTI_Falling_Callback+0x120>)
 8000f50:	0018      	movs	r0, r3
 8000f52:	f005 f84d 	bl	8005ff0 <iprintf>
}
 8000f56:	e04c      	b.n	8000ff2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8000f58:	2202      	movs	r2, #2
 8000f5a:	1dbb      	adds	r3, r7, #6
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d113      	bne.n	8000f8a <HAL_GPIO_EXTI_Falling_Callback+0xa2>
		halRet = alarmSetISR();
 8000f62:	250f      	movs	r5, #15
 8000f64:	197c      	adds	r4, r7, r5
 8000f66:	f000 f90d 	bl	8001184 <alarmSetISR>
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000f6e:	197b      	adds	r3, r7, r5
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d004      	beq.n	8000f80 <HAL_GPIO_EXTI_Falling_Callback+0x98>
			printf("Error setting user alarm.\n\r");
 8000f76:	4b25      	ldr	r3, [pc, #148]	; (800100c <HAL_GPIO_EXTI_Falling_Callback+0x124>)
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f005 f839 	bl	8005ff0 <iprintf>
}
 8000f7e:	e038      	b.n	8000ff2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm set.\n\r");
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <HAL_GPIO_EXTI_Falling_Callback+0x128>)
 8000f82:	0018      	movs	r0, r3
 8000f84:	f005 f834 	bl	8005ff0 <iprintf>
}
 8000f88:	e033      	b.n	8000ff2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == hourSetButtonPin) {
 8000f8a:	2220      	movs	r2, #32
 8000f8c:	1dbb      	adds	r3, r7, #6
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d113      	bne.n	8000fbc <HAL_GPIO_EXTI_Falling_Callback+0xd4>
		halRet = hourSetISR();
 8000f94:	250f      	movs	r5, #15
 8000f96:	197c      	adds	r4, r7, r5
 8000f98:	f000 f966 	bl	8001268 <hourSetISR>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000fa0:	197b      	adds	r3, r7, r5
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d004      	beq.n	8000fb2 <HAL_GPIO_EXTI_Falling_Callback+0xca>
			printf("Error incrementing hour.\n\r");
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 8000faa:	0018      	movs	r0, r3
 8000fac:	f005 f820 	bl	8005ff0 <iprintf>
}
 8000fb0:	e01f      	b.n	8000ff2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Hour increment ISR success.\n\r");
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_GPIO_EXTI_Falling_Callback+0x130>)
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f005 f81b 	bl	8005ff0 <iprintf>
}
 8000fba:	e01a      	b.n	8000ff2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	015b      	lsls	r3, r3, #5
 8000fc0:	1dba      	adds	r2, r7, #6
 8000fc2:	8812      	ldrh	r2, [r2, #0]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d113      	bne.n	8000ff0 <HAL_GPIO_EXTI_Falling_Callback+0x108>
		halRet = minuteSetISR();
 8000fc8:	250f      	movs	r5, #15
 8000fca:	197c      	adds	r4, r7, r5
 8000fcc:	f000 fa04 	bl	80013d8 <minuteSetISR>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000fd4:	197b      	adds	r3, r7, r5
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d004      	beq.n	8000fe6 <HAL_GPIO_EXTI_Falling_Callback+0xfe>
			printf("Error incrementing minute.\n\r");
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_GPIO_EXTI_Falling_Callback+0x134>)
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f005 f806 	bl	8005ff0 <iprintf>
}
 8000fe4:	e005      	b.n	8000ff2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Minute increment ISR success.\n\r");
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_GPIO_EXTI_Falling_Callback+0x138>)
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f005 f801 	bl	8005ff0 <iprintf>
}
 8000fee:	e000      	b.n	8000ff2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
		__NOP();
 8000ff0:	46c0      	nop			; (mov r8, r8)
}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b004      	add	sp, #16
 8000ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	08007224 	.word	0x08007224
 8001000:	08007240 	.word	0x08007240
 8001004:	08007260 	.word	0x08007260
 8001008:	08007280 	.word	0x08007280
 800100c:	08007298 	.word	0x08007298
 8001010:	080072b4 	.word	0x080072b4
 8001014:	080072c8 	.word	0x080072c8
 8001018:	080072e4 	.word	0x080072e4
 800101c:	08007304 	.word	0x08007304
 8001020:	08007324 	.word	0x08007324

08001024 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b085      	sub	sp, #20
 8001028:	af02      	add	r7, sp, #8

	printf("Entered display toggle ISR\n\r");
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <displayButtonISR+0x68>)
 800102c:	0018      	movs	r0, r3
 800102e:	f004 ffdf 	bl	8005ff0 <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]

	sevSeg_intensityBuff[1] = sevSeg_intensityDuty[displayToggle];			//Turn display to proper duty cycle
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <displayButtonISR+0x6c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	001a      	movs	r2, r3
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <displayButtonISR+0x70>)
 8001040:	5c9a      	ldrb	r2, [r3, r2]
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <displayButtonISR+0x74>)
 8001044:	705a      	strb	r2, [r3, #1]

	// TX new intensity to 7-seg driver
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_intensityBuff, 2, HAL_MAX_DELAY);
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <displayButtonISR+0x78>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b299      	uxth	r1, r3
 800104c:	1dfc      	adds	r4, r7, #7
 800104e:	4a12      	ldr	r2, [pc, #72]	; (8001098 <displayButtonISR+0x74>)
 8001050:	4813      	ldr	r0, [pc, #76]	; (80010a0 <displayButtonISR+0x7c>)
 8001052:	2301      	movs	r3, #1
 8001054:	425b      	negs	r3, r3
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2302      	movs	r3, #2
 800105a:	f001 f96b 	bl	8002334 <HAL_I2C_Master_Transmit>
 800105e:	0003      	movs	r3, r0
 8001060:	7023      	strb	r3, [r4, #0]

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <displayButtonISR+0x6c>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d903      	bls.n	8001072 <displayButtonISR+0x4e>
		displayToggle = 0;
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <displayButtonISR+0x6c>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	e005      	b.n	800107e <displayButtonISR+0x5a>
	} else {
		displayToggle++;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <displayButtonISR+0x6c>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <displayButtonISR+0x6c>)
 800107c:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]

}
 8001082:	0018      	movs	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	b003      	add	sp, #12
 8001088:	bd90      	pop	{r4, r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	08007344 	.word	0x08007344
 8001090:	20000248 	.word	0x20000248
 8001094:	080074cc 	.word	0x080074cc
 8001098:	20000008 	.word	0x20000008
 800109c:	20000000 	.word	0x20000000
 80010a0:	200000bc 	.word	0x200000bc

080010a4 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b093      	sub	sp, #76	; 0x4c
 80010a8:	af02      	add	r7, sp, #8

	printf("Entered alarm toggle ISR\n\r");
 80010aa:	4b30      	ldr	r3, [pc, #192]	; (800116c <alarmEnableISR+0xc8>)
 80010ac:	0018      	movs	r0, r3
 80010ae:	f004 ff9f 	bl	8005ff0 <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 80010b2:	233f      	movs	r3, #63	; 0x3f
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <alarmEnableISR+0xcc>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2201      	movs	r2, #1
 80010c0:	4053      	eors	r3, r2
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d030      	beq.n	800112a <alarmEnableISR+0x86>

		// Use object to get current user alarm time and set/enable the user alarm to that time.
		RTC_AlarmTypeDef userAlarmObj;
		HAL_RTC_GetAlarm(&hrtc, &userAlarmObj, userAlarm, RTC_FORMAT_BCD);
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	009a      	lsls	r2, r3, #2
 80010cc:	0039      	movs	r1, r7
 80010ce:	4829      	ldr	r0, [pc, #164]	; (8001174 <alarmEnableISR+0xd0>)
 80010d0:	2301      	movs	r3, #1
 80010d2:	f003 ff03 	bl	8004edc <HAL_RTC_GetAlarm>
		HAL_RTC_SetAlarm(&hrtc, &userAlarmObj, RTC_FORMAT_BCD);
 80010d6:	0039      	movs	r1, r7
 80010d8:	4b26      	ldr	r3, [pc, #152]	; (8001174 <alarmEnableISR+0xd0>)
 80010da:	2201      	movs	r2, #1
 80010dc:	0018      	movs	r0, r3
 80010de:	f003 fbf7 	bl	80048d0 <HAL_RTC_SetAlarm>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_SET);			// Turn on alarm LED
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	4b24      	ldr	r3, [pc, #144]	; (8001178 <alarmEnableISR+0xd4>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	0018      	movs	r0, r3
 80010ea:	f001 f83c 	bl	8002166 <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <alarmEnableISR+0xcc>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]

		RTC_TimeTypeDef alarmTime = userAlarmObj.AlarmTime;
 80010f4:	2428      	movs	r4, #40	; 0x28
 80010f6:	193a      	adds	r2, r7, r4
 80010f8:	003b      	movs	r3, r7
 80010fa:	0010      	movs	r0, r2
 80010fc:	0019      	movs	r1, r3
 80010fe:	2314      	movs	r3, #20
 8001100:	001a      	movs	r2, r3
 8001102:	f004 ff63 	bl	8005fcc <memcpy>
		printf("User alarm set to: %d:%d:%d on alarm %d.\n\r", alarmTime.Hours,
 8001106:	0020      	movs	r0, r4
 8001108:	183b      	adds	r3, r7, r0
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	0019      	movs	r1, r3
								alarmTime.Minutes, alarmTime.Seconds, userAlarmObj.Alarm);
 800110e:	183b      	adds	r3, r7, r0
 8001110:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm set to: %d:%d:%d on alarm %d.\n\r", alarmTime.Hours,
 8001112:	001a      	movs	r2, r3
								alarmTime.Minutes, alarmTime.Seconds, userAlarmObj.Alarm);
 8001114:	183b      	adds	r3, r7, r0
 8001116:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm set to: %d:%d:%d on alarm %d.\n\r", alarmTime.Hours,
 8001118:	001c      	movs	r4, r3
 800111a:	003b      	movs	r3, r7
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	4817      	ldr	r0, [pc, #92]	; (800117c <alarmEnableISR+0xd8>)
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	0023      	movs	r3, r4
 8001124:	f004 ff64 	bl	8005ff0 <iprintf>
 8001128:	e019      	b.n	800115e <alarmEnableISR+0xba>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <alarmEnableISR+0xcc>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d014      	beq.n	800115c <alarmEnableISR+0xb8>

		HAL_RTC_DeactivateAlarm(&hrtc, userAlarm);				// Deactivate alarm
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	009a      	lsls	r2, r3, #2
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <alarmEnableISR+0xd0>)
 8001138:	0011      	movs	r1, r2
 800113a:	0018      	movs	r0, r3
 800113c:	f003 fe2e 	bl	8004d9c <HAL_RTC_DeactivateAlarm>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_RESET);			// Turn off alarm LED
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <alarmEnableISR+0xd4>)
 8001144:	2200      	movs	r2, #0
 8001146:	0018      	movs	r0, r3
 8001148:	f001 f80d 	bl	8002166 <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <alarmEnableISR+0xcc>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]

		printf("User alarm disabled.\n\r");
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <alarmEnableISR+0xdc>)
 8001154:	0018      	movs	r0, r3
 8001156:	f004 ff4b 	bl	8005ff0 <iprintf>
 800115a:	e000      	b.n	800115e <alarmEnableISR+0xba>
	}
	else {
		__NOP();							//Code should never reach here.
 800115c:	46c0      	nop			; (mov r8, r8)
	}

	return halRet;
 800115e:	233f      	movs	r3, #63	; 0x3f
 8001160:	18fb      	adds	r3, r7, r3
 8001162:	781b      	ldrb	r3, [r3, #0]

}
 8001164:	0018      	movs	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	b011      	add	sp, #68	; 0x44
 800116a:	bd90      	pop	{r4, r7, pc}
 800116c:	08007364 	.word	0x08007364
 8001170:	20000249 	.word	0x20000249
 8001174:	20000110 	.word	0x20000110
 8001178:	50000400 	.word	0x50000400
 800117c:	08007380 	.word	0x08007380
 8001180:	080073ac 	.word	0x080073ac

08001184 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af02      	add	r7, sp, #8

	printf("Enter user alarm set ISR.\n\r");
 800118a:	4b31      	ldr	r3, [pc, #196]	; (8001250 <alarmSetISR+0xcc>)
 800118c:	0018      	movs	r0, r3
 800118e:	f004 ff2f 	bl	8005ff0 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim16);						// Begin timer 16 counting (to 500 ms)
 8001198:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <alarmSetISR+0xd0>)
 800119a:	0018      	movs	r0, r3
 800119c:	f004 f8f6 	bl	800538c <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(&htim16);	// Get initial timer value to compare to
 80011a0:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <alarmSetISR+0xd0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011a6:	1dbb      	adds	r3, r7, #6
 80011a8:	801a      	strh	r2, [r3, #0]
	bool displayBlink = false;
 80011aa:	1d7b      	adds	r3, r7, #5
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]

	do {											// while the alarm set button is not held down, blink display.

		updateAndDisplayAlarm();
 80011b0:	f7ff fdac 	bl	8000d0c <updateAndDisplayAlarm>

		if(__HAL_TIM_GET_COUNTER(&htim16) - timerVal >= (65536 / 2)) {
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <alarmSetISR+0xd0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ba:	1dbb      	adds	r3, r7, #6
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	1ad2      	subs	r2, r2, r3
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d324      	bcc.n	8001212 <alarmSetISR+0x8e>

			sevSeg_intensityBuff[1] = sevSeg_intensityDuty[displayBlink];		// Initialize to whatever duty cycle
 80011c8:	1d7b      	adds	r3, r7, #5
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4a22      	ldr	r2, [pc, #136]	; (8001258 <alarmSetISR+0xd4>)
 80011ce:	5cd2      	ldrb	r2, [r2, r3]
 80011d0:	4b22      	ldr	r3, [pc, #136]	; (800125c <alarmSetISR+0xd8>)
 80011d2:	705a      	strb	r2, [r3, #1]
			HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_intensityBuff, 2, HAL_MAX_DELAY);
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <alarmSetISR+0xdc>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b299      	uxth	r1, r3
 80011da:	4a20      	ldr	r2, [pc, #128]	; (800125c <alarmSetISR+0xd8>)
 80011dc:	4821      	ldr	r0, [pc, #132]	; (8001264 <alarmSetISR+0xe0>)
 80011de:	2301      	movs	r3, #1
 80011e0:	425b      	negs	r3, r3
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2302      	movs	r3, #2
 80011e6:	f001 f8a5 	bl	8002334 <HAL_I2C_Master_Transmit>

			timerVal = __HAL_TIM_GET_COUNTER(&htim16);
 80011ea:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <alarmSetISR+0xd0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f0:	1dbb      	adds	r3, r7, #6
 80011f2:	801a      	strh	r2, [r3, #0]
			displayBlink = !displayBlink;
 80011f4:	1d7b      	adds	r3, r7, #5
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	1e5a      	subs	r2, r3, #1
 80011fa:	4193      	sbcs	r3, r2
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2201      	movs	r2, #1
 8001200:	4053      	eors	r3, r2
 8001202:	b2db      	uxtb	r3, r3
 8001204:	001a      	movs	r2, r3
 8001206:	1d7b      	adds	r3, r7, #5
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	781a      	ldrb	r2, [r3, #0]
 800120c:	2101      	movs	r1, #1
 800120e:	400a      	ands	r2, r1
 8001210:	701a      	strb	r2, [r3, #0]

		}

	}while(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == GPIO_PIN_RESET);
 8001212:	2202      	movs	r2, #2
 8001214:	23a0      	movs	r3, #160	; 0xa0
 8001216:	05db      	lsls	r3, r3, #23
 8001218:	0011      	movs	r1, r2
 800121a:	0018      	movs	r0, r3
 800121c:	f000 ff86 	bl	800212c <HAL_GPIO_ReadPin>
 8001220:	1e03      	subs	r3, r0, #0
 8001222:	d0c5      	beq.n	80011b0 <alarmSetISR+0x2c>

	sevSeg_intensityBuff[1] = sevSeg_intensityDuty[2];
 8001224:	2263      	movs	r2, #99	; 0x63
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <alarmSetISR+0xd8>)
 8001228:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_intensityBuff, 2, HAL_MAX_DELAY);
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <alarmSetISR+0xdc>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b299      	uxth	r1, r3
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <alarmSetISR+0xd8>)
 8001232:	480c      	ldr	r0, [pc, #48]	; (8001264 <alarmSetISR+0xe0>)
 8001234:	2301      	movs	r3, #1
 8001236:	425b      	negs	r3, r3
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2302      	movs	r3, #2
 800123c:	f001 f87a 	bl	8002334 <HAL_I2C_Master_Transmit>

	updateAndDisplayTime();
 8001240:	f7ff fcc6 	bl	8000bd0 <updateAndDisplayTime>

	return halRet;
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	781b      	ldrb	r3, [r3, #0]

}
 8001248:	0018      	movs	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}
 8001250:	080073c4 	.word	0x080073c4
 8001254:	2000013c 	.word	0x2000013c
 8001258:	080074cc 	.word	0x080074cc
 800125c:	20000008 	.word	0x20000008
 8001260:	20000000 	.word	0x20000000
 8001264:	200000bc 	.word	0x200000bc

08001268 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b08d      	sub	sp, #52	; 0x34
 800126c:	af00      	add	r7, sp, #0

	printf("Entered hour set ISR.\n\r");
 800126e:	4b53      	ldr	r3, [pc, #332]	; (80013bc <hourSetISR+0x154>)
 8001270:	0018      	movs	r0, r3
 8001272:	f004 febd 	bl	8005ff0 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 8001276:	232f      	movs	r3, #47	; 0x2f
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) != GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 800127e:	2202      	movs	r2, #2
 8001280:	23a0      	movs	r3, #160	; 0xa0
 8001282:	05db      	lsls	r3, r3, #23
 8001284:	0011      	movs	r1, r2
 8001286:	0018      	movs	r0, r3
 8001288:	f000 ff50 	bl	800212c <HAL_GPIO_ReadPin>
 800128c:	0003      	movs	r3, r0
 800128e:	2b01      	cmp	r3, #1
 8001290:	d043      	beq.n	800131a <hourSetISR+0xb2>

		RTC_AlarmTypeDef userAlarmObj;
		HAL_RTC_GetAlarm(&hrtc, &userAlarmObj, userAlarm, RTC_FORMAT_BCD);
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	009a      	lsls	r2, r3, #2
 8001296:	1d39      	adds	r1, r7, #4
 8001298:	4849      	ldr	r0, [pc, #292]	; (80013c0 <hourSetISR+0x158>)
 800129a:	2301      	movs	r3, #1
 800129c:	f003 fe1e 	bl	8004edc <HAL_RTC_GetAlarm>
		userAlarmTime = userAlarmObj.AlarmTime;
 80012a0:	4b48      	ldr	r3, [pc, #288]	; (80013c4 <hourSetISR+0x15c>)
 80012a2:	1d3a      	adds	r2, r7, #4
 80012a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012a6:	c313      	stmia	r3!, {r0, r1, r4}
 80012a8:	ca03      	ldmia	r2!, {r0, r1}
 80012aa:	c303      	stmia	r3!, {r0, r1}

		if(userAlarmTime.Hours >= 12) {
 80012ac:	4b45      	ldr	r3, [pc, #276]	; (80013c4 <hourSetISR+0x15c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b0b      	cmp	r3, #11
 80012b2:	d90e      	bls.n	80012d2 <hourSetISR+0x6a>
			userAlarmTime.Hours = 1;
 80012b4:	4b43      	ldr	r3, [pc, #268]	; (80013c4 <hourSetISR+0x15c>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80012ba:	4b42      	ldr	r3, [pc, #264]	; (80013c4 <hourSetISR+0x15c>)
 80012bc:	78db      	ldrb	r3, [r3, #3]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d103      	bne.n	80012ca <hourSetISR+0x62>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80012c2:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <hourSetISR+0x15c>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	70da      	strb	r2, [r3, #3]
 80012c8:	e00f      	b.n	80012ea <hourSetISR+0x82>
			} else {
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80012ca:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <hourSetISR+0x15c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	70da      	strb	r2, [r3, #3]
 80012d0:	e00b      	b.n	80012ea <hourSetISR+0x82>
			}
		}
		else if(userAlarmTime.Hours < 12) {
 80012d2:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <hourSetISR+0x15c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b0b      	cmp	r3, #11
 80012d8:	d806      	bhi.n	80012e8 <hourSetISR+0x80>
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 80012da:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <hourSetISR+0x15c>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <hourSetISR+0x15c>)
 80012e4:	701a      	strb	r2, [r3, #0]
 80012e6:	e000      	b.n	80012ea <hourSetISR+0x82>
		}
		else {
			__NOP();
 80012e8:	46c0      	nop			; (mov r8, r8)
		}

		userAlarmObj.AlarmTime = userAlarmTime;
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4a35      	ldr	r2, [pc, #212]	; (80013c4 <hourSetISR+0x15c>)
 80012ee:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012f0:	c313      	stmia	r3!, {r0, r1, r4}
 80012f2:	ca03      	ldmia	r2!, {r0, r1}
 80012f4:	c303      	stmia	r3!, {r0, r1}

		HAL_RTC_SetAlarm(&hrtc, &userAlarmObj, RTC_FORMAT_BCD);
 80012f6:	1d39      	adds	r1, r7, #4
 80012f8:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <hourSetISR+0x158>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	0018      	movs	r0, r3
 80012fe:	f003 fae7 	bl	80048d0 <HAL_RTC_SetAlarm>

		printf("User alarm hour incremented to %d:%d:%d\n\r", userAlarmObj.AlarmTime.Hours,
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	0019      	movs	r1, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm hour incremented to %d:%d:%d\n\r", userAlarmObj.AlarmTime.Hours,
 800130c:	001a      	movs	r2, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm hour incremented to %d:%d:%d\n\r", userAlarmObj.AlarmTime.Hours,
 8001312:	482d      	ldr	r0, [pc, #180]	; (80013c8 <hourSetISR+0x160>)
 8001314:	f004 fe6c 	bl	8005ff0 <iprintf>
 8001318:	e049      	b.n	80013ae <hourSetISR+0x146>

	}
	else {									// Otherwise, change current time hour.

		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 800131a:	492c      	ldr	r1, [pc, #176]	; (80013cc <hourSetISR+0x164>)
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <hourSetISR+0x158>)
 800131e:	2201      	movs	r2, #1
 8001320:	0018      	movs	r0, r3
 8001322:	f003 f999 	bl	8004658 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 8001326:	492a      	ldr	r1, [pc, #168]	; (80013d0 <hourSetISR+0x168>)
 8001328:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <hourSetISR+0x158>)
 800132a:	2201      	movs	r2, #1
 800132c:	0018      	movs	r0, r3
 800132e:	f003 fa81 	bl	8004834 <HAL_RTC_GetDate>
		if(currTime.Hours >= 12) {
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <hourSetISR+0x164>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b0b      	cmp	r3, #11
 8001338:	d90e      	bls.n	8001358 <hourSetISR+0xf0>
			currTime.Hours = 1;
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <hourSetISR+0x164>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
			if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <hourSetISR+0x164>)
 8001342:	78db      	ldrb	r3, [r3, #3]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d103      	bne.n	8001350 <hourSetISR+0xe8>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <hourSetISR+0x164>)
 800134a:	2201      	movs	r2, #1
 800134c:	70da      	strb	r2, [r3, #3]
 800134e:	e00f      	b.n	8001370 <hourSetISR+0x108>
			} else {
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001350:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <hourSetISR+0x164>)
 8001352:	2200      	movs	r2, #0
 8001354:	70da      	strb	r2, [r3, #3]
 8001356:	e00b      	b.n	8001370 <hourSetISR+0x108>
			}
		}
		else if(currTime.Hours < 12) {
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <hourSetISR+0x164>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b0b      	cmp	r3, #11
 800135e:	d806      	bhi.n	800136e <hourSetISR+0x106>
			currTime.Hours = currTime.Hours + 1;
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <hourSetISR+0x164>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <hourSetISR+0x164>)
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	e000      	b.n	8001370 <hourSetISR+0x108>
		}
		else {
			__NOP();
 800136e:	46c0      	nop			; (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8001370:	4916      	ldr	r1, [pc, #88]	; (80013cc <hourSetISR+0x164>)
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <hourSetISR+0x158>)
 8001374:	2201      	movs	r2, #1
 8001376:	0018      	movs	r0, r3
 8001378:	f003 f8c6 	bl	8004508 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 800137c:	f7ff fc28 	bl	8000bd0 <updateAndDisplayTime>

		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8001380:	4912      	ldr	r1, [pc, #72]	; (80013cc <hourSetISR+0x164>)
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <hourSetISR+0x158>)
 8001384:	2201      	movs	r2, #1
 8001386:	0018      	movs	r0, r3
 8001388:	f003 f966 	bl	8004658 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 800138c:	4910      	ldr	r1, [pc, #64]	; (80013d0 <hourSetISR+0x168>)
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <hourSetISR+0x158>)
 8001390:	2201      	movs	r2, #1
 8001392:	0018      	movs	r0, r3
 8001394:	f003 fa4e 	bl	8004834 <HAL_RTC_GetDate>

		printf("Current time hour incremented to %d:%d:%d.\n\r", currTime.Hours,
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <hourSetISR+0x164>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <hourSetISR+0x164>)
 80013a0:	785b      	ldrb	r3, [r3, #1]
		printf("Current time hour incremented to %d:%d:%d.\n\r", currTime.Hours,
 80013a2:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <hourSetISR+0x164>)
 80013a6:	789b      	ldrb	r3, [r3, #2]
		printf("Current time hour incremented to %d:%d:%d.\n\r", currTime.Hours,
 80013a8:	480a      	ldr	r0, [pc, #40]	; (80013d4 <hourSetISR+0x16c>)
 80013aa:	f004 fe21 	bl	8005ff0 <iprintf>
	}

	return halRet;
 80013ae:	232f      	movs	r3, #47	; 0x2f
 80013b0:	18fb      	adds	r3, r7, r3
 80013b2:	781b      	ldrb	r3, [r3, #0]
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b00d      	add	sp, #52	; 0x34
 80013ba:	bd90      	pop	{r4, r7, pc}
 80013bc:	080073e0 	.word	0x080073e0
 80013c0:	20000110 	.word	0x20000110
 80013c4:	20000234 	.word	0x20000234
 80013c8:	080073f8 	.word	0x080073f8
 80013cc:	2000021c 	.word	0x2000021c
 80013d0:	20000230 	.word	0x20000230
 80013d4:	08007424 	.word	0x08007424

080013d8 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b08d      	sub	sp, #52	; 0x34
 80013dc:	af00      	add	r7, sp, #0

	printf("Entered minute set ISR.\n\r");
 80013de:	4b6e      	ldr	r3, [pc, #440]	; (8001598 <minuteSetISR+0x1c0>)
 80013e0:	0018      	movs	r0, r3
 80013e2:	f004 fe05 	bl	8005ff0 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 80013e6:	232f      	movs	r3, #47	; 0x2f
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == !GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 80013ee:	2202      	movs	r2, #2
 80013f0:	23a0      	movs	r3, #160	; 0xa0
 80013f2:	05db      	lsls	r3, r3, #23
 80013f4:	0011      	movs	r1, r2
 80013f6:	0018      	movs	r0, r3
 80013f8:	f000 fe98 	bl	800212c <HAL_GPIO_ReadPin>
 80013fc:	1e03      	subs	r3, r0, #0
 80013fe:	d15e      	bne.n	80014be <minuteSetISR+0xe6>

		RTC_AlarmTypeDef userAlarmObj;
		HAL_RTC_GetAlarm(&hrtc, &userAlarmObj, userAlarm, RTC_FORMAT_BCD);
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	009a      	lsls	r2, r3, #2
 8001404:	1d39      	adds	r1, r7, #4
 8001406:	4865      	ldr	r0, [pc, #404]	; (800159c <minuteSetISR+0x1c4>)
 8001408:	2301      	movs	r3, #1
 800140a:	f003 fd67 	bl	8004edc <HAL_RTC_GetAlarm>
		userAlarmTime = userAlarmObj.AlarmTime;
 800140e:	4b64      	ldr	r3, [pc, #400]	; (80015a0 <minuteSetISR+0x1c8>)
 8001410:	1d3a      	adds	r2, r7, #4
 8001412:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001414:	c313      	stmia	r3!, {r0, r1, r4}
 8001416:	ca03      	ldmia	r2!, {r0, r1}
 8001418:	c303      	stmia	r3!, {r0, r1}

		if(userAlarmTime.Minutes >= 59) {
 800141a:	4b61      	ldr	r3, [pc, #388]	; (80015a0 <minuteSetISR+0x1c8>)
 800141c:	785b      	ldrb	r3, [r3, #1]
 800141e:	2b3a      	cmp	r3, #58	; 0x3a
 8001420:	d929      	bls.n	8001476 <minuteSetISR+0x9e>
			userAlarmTime.Minutes = 0;
 8001422:	4b5f      	ldr	r3, [pc, #380]	; (80015a0 <minuteSetISR+0x1c8>)
 8001424:	2200      	movs	r2, #0
 8001426:	705a      	strb	r2, [r3, #1]
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001428:	4b5d      	ldr	r3, [pc, #372]	; (80015a0 <minuteSetISR+0x1c8>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b5b      	ldr	r3, [pc, #364]	; (80015a0 <minuteSetISR+0x1c8>)
 8001432:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.Hours > 12) {
 8001434:	4b5a      	ldr	r3, [pc, #360]	; (80015a0 <minuteSetISR+0x1c8>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b0c      	cmp	r3, #12
 800143a:	d902      	bls.n	8001442 <minuteSetISR+0x6a>
				userAlarmTime.Hours = 1;
 800143c:	4b58      	ldr	r3, [pc, #352]	; (80015a0 <minuteSetISR+0x1c8>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
			}
			if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001442:	4b57      	ldr	r3, [pc, #348]	; (80015a0 <minuteSetISR+0x1c8>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b0c      	cmp	r3, #12
 8001448:	d107      	bne.n	800145a <minuteSetISR+0x82>
 800144a:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <minuteSetISR+0x1c8>)
 800144c:	78db      	ldrb	r3, [r3, #3]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d103      	bne.n	800145a <minuteSetISR+0x82>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001452:	4b53      	ldr	r3, [pc, #332]	; (80015a0 <minuteSetISR+0x1c8>)
 8001454:	2201      	movs	r2, #1
 8001456:	70da      	strb	r2, [r3, #3]
 8001458:	e019      	b.n	800148e <minuteSetISR+0xb6>
			} else if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 800145a:	4b51      	ldr	r3, [pc, #324]	; (80015a0 <minuteSetISR+0x1c8>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b0c      	cmp	r3, #12
 8001460:	d107      	bne.n	8001472 <minuteSetISR+0x9a>
 8001462:	4b4f      	ldr	r3, [pc, #316]	; (80015a0 <minuteSetISR+0x1c8>)
 8001464:	78db      	ldrb	r3, [r3, #3]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d103      	bne.n	8001472 <minuteSetISR+0x9a>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800146a:	4b4d      	ldr	r3, [pc, #308]	; (80015a0 <minuteSetISR+0x1c8>)
 800146c:	2200      	movs	r2, #0
 800146e:	70da      	strb	r2, [r3, #3]
 8001470:	e00d      	b.n	800148e <minuteSetISR+0xb6>
			}
			else {
				__NOP();
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	e00b      	b.n	800148e <minuteSetISR+0xb6>
			}
		}
		else if(userAlarmTime.Minutes < 59) {
 8001476:	4b4a      	ldr	r3, [pc, #296]	; (80015a0 <minuteSetISR+0x1c8>)
 8001478:	785b      	ldrb	r3, [r3, #1]
 800147a:	2b3a      	cmp	r3, #58	; 0x3a
 800147c:	d806      	bhi.n	800148c <minuteSetISR+0xb4>
			userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 800147e:	4b48      	ldr	r3, [pc, #288]	; (80015a0 <minuteSetISR+0x1c8>)
 8001480:	785b      	ldrb	r3, [r3, #1]
 8001482:	3301      	adds	r3, #1
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4b46      	ldr	r3, [pc, #280]	; (80015a0 <minuteSetISR+0x1c8>)
 8001488:	705a      	strb	r2, [r3, #1]
 800148a:	e000      	b.n	800148e <minuteSetISR+0xb6>
		}
		else {
			__NOP();
 800148c:	46c0      	nop			; (mov r8, r8)
		}

		userAlarmObj.AlarmTime = userAlarmTime;
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4a43      	ldr	r2, [pc, #268]	; (80015a0 <minuteSetISR+0x1c8>)
 8001492:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001494:	c313      	stmia	r3!, {r0, r1, r4}
 8001496:	ca03      	ldmia	r2!, {r0, r1}
 8001498:	c303      	stmia	r3!, {r0, r1}

		HAL_RTC_SetAlarm(&hrtc, &userAlarmObj, RTC_FORMAT_BCD);
 800149a:	1d39      	adds	r1, r7, #4
 800149c:	4b3f      	ldr	r3, [pc, #252]	; (800159c <minuteSetISR+0x1c4>)
 800149e:	2201      	movs	r2, #1
 80014a0:	0018      	movs	r0, r3
 80014a2:	f003 fa15 	bl	80048d0 <HAL_RTC_SetAlarm>

		printf("User alarm minute incremented to %d:%d:%d\n\r", userAlarmObj.AlarmTime.Hours,
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	0019      	movs	r1, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm minute incremented to %d:%d:%d\n\r", userAlarmObj.AlarmTime.Hours,
 80014b0:	001a      	movs	r2, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm minute incremented to %d:%d:%d\n\r", userAlarmObj.AlarmTime.Hours,
 80014b6:	483b      	ldr	r0, [pc, #236]	; (80015a4 <minuteSetISR+0x1cc>)
 80014b8:	f004 fd9a 	bl	8005ff0 <iprintf>
 80014bc:	e064      	b.n	8001588 <minuteSetISR+0x1b0>

	}
	else {									// Otherwise, change current time hour.

		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 80014be:	493a      	ldr	r1, [pc, #232]	; (80015a8 <minuteSetISR+0x1d0>)
 80014c0:	4b36      	ldr	r3, [pc, #216]	; (800159c <minuteSetISR+0x1c4>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	0018      	movs	r0, r3
 80014c6:	f003 f8c7 	bl	8004658 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 80014ca:	4938      	ldr	r1, [pc, #224]	; (80015ac <minuteSetISR+0x1d4>)
 80014cc:	4b33      	ldr	r3, [pc, #204]	; (800159c <minuteSetISR+0x1c4>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	0018      	movs	r0, r3
 80014d2:	f003 f9af 	bl	8004834 <HAL_RTC_GetDate>

		if(currTime.Minutes >= 59) {
 80014d6:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <minuteSetISR+0x1d0>)
 80014d8:	785b      	ldrb	r3, [r3, #1]
 80014da:	2b3a      	cmp	r3, #58	; 0x3a
 80014dc:	d929      	bls.n	8001532 <minuteSetISR+0x15a>
			currTime.Minutes = 0;
 80014de:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <minuteSetISR+0x1d0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	705a      	strb	r2, [r3, #1]
			currTime.Hours = currTime.Hours + 1;
 80014e4:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <minuteSetISR+0x1d0>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <minuteSetISR+0x1d0>)
 80014ee:	701a      	strb	r2, [r3, #0]
			if(currTime.Hours > 12) {
 80014f0:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <minuteSetISR+0x1d0>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b0c      	cmp	r3, #12
 80014f6:	d902      	bls.n	80014fe <minuteSetISR+0x126>
				currTime.Hours = 1;
 80014f8:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <minuteSetISR+0x1d0>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
			}
			if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80014fe:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <minuteSetISR+0x1d0>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b0c      	cmp	r3, #12
 8001504:	d107      	bne.n	8001516 <minuteSetISR+0x13e>
 8001506:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <minuteSetISR+0x1d0>)
 8001508:	78db      	ldrb	r3, [r3, #3]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d103      	bne.n	8001516 <minuteSetISR+0x13e>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <minuteSetISR+0x1d0>)
 8001510:	2201      	movs	r2, #1
 8001512:	70da      	strb	r2, [r3, #3]
 8001514:	e019      	b.n	800154a <minuteSetISR+0x172>
			} else if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <minuteSetISR+0x1d0>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b0c      	cmp	r3, #12
 800151c:	d107      	bne.n	800152e <minuteSetISR+0x156>
 800151e:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <minuteSetISR+0x1d0>)
 8001520:	78db      	ldrb	r3, [r3, #3]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d103      	bne.n	800152e <minuteSetISR+0x156>
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001526:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <minuteSetISR+0x1d0>)
 8001528:	2200      	movs	r2, #0
 800152a:	70da      	strb	r2, [r3, #3]
 800152c:	e00d      	b.n	800154a <minuteSetISR+0x172>
			}
			else {
				__NOP();
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	e00b      	b.n	800154a <minuteSetISR+0x172>
			}
		}
		else if(currTime.Minutes < 59) {
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <minuteSetISR+0x1d0>)
 8001534:	785b      	ldrb	r3, [r3, #1]
 8001536:	2b3a      	cmp	r3, #58	; 0x3a
 8001538:	d806      	bhi.n	8001548 <minuteSetISR+0x170>
			currTime.Minutes = currTime.Minutes + 1;
 800153a:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <minuteSetISR+0x1d0>)
 800153c:	785b      	ldrb	r3, [r3, #1]
 800153e:	3301      	adds	r3, #1
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <minuteSetISR+0x1d0>)
 8001544:	705a      	strb	r2, [r3, #1]
 8001546:	e000      	b.n	800154a <minuteSetISR+0x172>
		}
		else {
			__NOP();
 8001548:	46c0      	nop			; (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 800154a:	4917      	ldr	r1, [pc, #92]	; (80015a8 <minuteSetISR+0x1d0>)
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <minuteSetISR+0x1c4>)
 800154e:	2201      	movs	r2, #1
 8001550:	0018      	movs	r0, r3
 8001552:	f002 ffd9 	bl	8004508 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8001556:	f7ff fb3b 	bl	8000bd0 <updateAndDisplayTime>

		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 800155a:	4913      	ldr	r1, [pc, #76]	; (80015a8 <minuteSetISR+0x1d0>)
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <minuteSetISR+0x1c4>)
 800155e:	2201      	movs	r2, #1
 8001560:	0018      	movs	r0, r3
 8001562:	f003 f879 	bl	8004658 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 8001566:	4911      	ldr	r1, [pc, #68]	; (80015ac <minuteSetISR+0x1d4>)
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <minuteSetISR+0x1c4>)
 800156a:	2201      	movs	r2, #1
 800156c:	0018      	movs	r0, r3
 800156e:	f003 f961 	bl	8004834 <HAL_RTC_GetDate>

		printf("Current time minute incremented to %d:%d:%d.\n\r", currTime.Hours,
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <minuteSetISR+0x1d0>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <minuteSetISR+0x1d0>)
 800157a:	785b      	ldrb	r3, [r3, #1]
		printf("Current time minute incremented to %d:%d:%d.\n\r", currTime.Hours,
 800157c:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <minuteSetISR+0x1d0>)
 8001580:	789b      	ldrb	r3, [r3, #2]
		printf("Current time minute incremented to %d:%d:%d.\n\r", currTime.Hours,
 8001582:	480b      	ldr	r0, [pc, #44]	; (80015b0 <minuteSetISR+0x1d8>)
 8001584:	f004 fd34 	bl	8005ff0 <iprintf>
	}

	return halRet;
 8001588:	232f      	movs	r3, #47	; 0x2f
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	781b      	ldrb	r3, [r3, #0]
}
 800158e:	0018      	movs	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	b00d      	add	sp, #52	; 0x34
 8001594:	bd90      	pop	{r4, r7, pc}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	08007454 	.word	0x08007454
 800159c:	20000110 	.word	0x20000110
 80015a0:	20000234 	.word	0x20000234
 80015a4:	08007470 	.word	0x08007470
 80015a8:	2000021c 	.word	0x2000021c
 80015ac:	20000230 	.word	0x20000230
 80015b0:	0800749c 	.word	0x0800749c

080015b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b8:	b672      	cpsid	i
}
 80015ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015bc:	e7fe      	b.n	80015bc <Error_Handler+0x8>
	...

080015c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_MspInit+0x54>)
 80015c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_MspInit+0x54>)
 80015cc:	2101      	movs	r1, #1
 80015ce:	430a      	orrs	r2, r1
 80015d0:	641a      	str	r2, [r3, #64]	; 0x40
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_MspInit+0x54>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	2201      	movs	r2, #1
 80015d8:	4013      	ands	r3, r2
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_MspInit+0x54>)
 80015e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_MspInit+0x54>)
 80015e4:	2180      	movs	r1, #128	; 0x80
 80015e6:	0549      	lsls	r1, r1, #21
 80015e8:	430a      	orrs	r2, r1
 80015ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_MspInit+0x54>)
 80015ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	055b      	lsls	r3, r3, #21
 80015f4:	4013      	ands	r3, r2
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	2001      	movs	r0, #1
 8001600:	f000 fb88 	bl	8001d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001604:	2001      	movs	r0, #1
 8001606:	f000 fb9a 	bl	8001d3e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	b002      	add	sp, #8
 8001610:	bd80      	pop	{r7, pc}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	40021000 	.word	0x40021000

08001618 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b095      	sub	sp, #84	; 0x54
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	233c      	movs	r3, #60	; 0x3c
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	0018      	movs	r0, r3
 8001626:	2314      	movs	r3, #20
 8001628:	001a      	movs	r2, r3
 800162a:	2100      	movs	r1, #0
 800162c:	f004 fcd7 	bl	8005fde <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001630:	2414      	movs	r4, #20
 8001632:	193b      	adds	r3, r7, r4
 8001634:	0018      	movs	r0, r3
 8001636:	2328      	movs	r3, #40	; 0x28
 8001638:	001a      	movs	r2, r3
 800163a:	2100      	movs	r1, #0
 800163c:	f004 fccf 	bl	8005fde <memset>
  if(hi2c->Instance==I2C1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a26      	ldr	r2, [pc, #152]	; (80016e0 <HAL_I2C_MspInit+0xc8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d146      	bne.n	80016d8 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800164a:	193b      	adds	r3, r7, r4
 800164c:	2220      	movs	r2, #32
 800164e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001650:	193b      	adds	r3, r7, r4
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001656:	193b      	adds	r3, r7, r4
 8001658:	0018      	movs	r0, r3
 800165a:	f002 fd39 	bl	80040d0 <HAL_RCCEx_PeriphCLKConfig>
 800165e:	1e03      	subs	r3, r0, #0
 8001660:	d001      	beq.n	8001666 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001662:	f7ff ffa7 	bl	80015b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <HAL_I2C_MspInit+0xcc>)
 8001668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <HAL_I2C_MspInit+0xcc>)
 800166c:	2102      	movs	r1, #2
 800166e:	430a      	orrs	r2, r1
 8001670:	635a      	str	r2, [r3, #52]	; 0x34
 8001672:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <HAL_I2C_MspInit+0xcc>)
 8001674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001676:	2202      	movs	r2, #2
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800167e:	213c      	movs	r1, #60	; 0x3c
 8001680:	187b      	adds	r3, r7, r1
 8001682:	22c0      	movs	r2, #192	; 0xc0
 8001684:	0092      	lsls	r2, r2, #2
 8001686:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001688:	187b      	adds	r3, r7, r1
 800168a:	2212      	movs	r2, #18
 800168c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	187b      	adds	r3, r7, r1
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	187b      	adds	r3, r7, r1
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800169a:	187b      	adds	r3, r7, r1
 800169c:	2206      	movs	r2, #6
 800169e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <HAL_I2C_MspInit+0xd0>)
 80016a4:	0019      	movs	r1, r3
 80016a6:	0010      	movs	r0, r2
 80016a8:	f000 fbdc 	bl	8001e64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_I2C_MspInit+0xcc>)
 80016ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_I2C_MspInit+0xcc>)
 80016b2:	2180      	movs	r1, #128	; 0x80
 80016b4:	0389      	lsls	r1, r1, #14
 80016b6:	430a      	orrs	r2, r1
 80016b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_I2C_MspInit+0xcc>)
 80016bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	039b      	lsls	r3, r3, #14
 80016c2:	4013      	ands	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	2017      	movs	r0, #23
 80016ce:	f000 fb21 	bl	8001d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80016d2:	2017      	movs	r0, #23
 80016d4:	f000 fb33 	bl	8001d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b015      	add	sp, #84	; 0x54
 80016de:	bd90      	pop	{r4, r7, pc}
 80016e0:	40005400 	.word	0x40005400
 80016e4:	40021000 	.word	0x40021000
 80016e8:	50000400 	.word	0x50000400

080016ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b08f      	sub	sp, #60	; 0x3c
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f4:	2410      	movs	r4, #16
 80016f6:	193b      	adds	r3, r7, r4
 80016f8:	0018      	movs	r0, r3
 80016fa:	2328      	movs	r3, #40	; 0x28
 80016fc:	001a      	movs	r2, r3
 80016fe:	2100      	movs	r1, #0
 8001700:	f004 fc6d 	bl	8005fde <memset>
  if(hrtc->Instance==RTC)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a19      	ldr	r2, [pc, #100]	; (8001770 <HAL_RTC_MspInit+0x84>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d12c      	bne.n	8001768 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800170e:	193b      	adds	r3, r7, r4
 8001710:	2280      	movs	r2, #128	; 0x80
 8001712:	0292      	lsls	r2, r2, #10
 8001714:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001716:	193b      	adds	r3, r7, r4
 8001718:	2280      	movs	r2, #128	; 0x80
 800171a:	0092      	lsls	r2, r2, #2
 800171c:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171e:	193b      	adds	r3, r7, r4
 8001720:	0018      	movs	r0, r3
 8001722:	f002 fcd5 	bl	80040d0 <HAL_RCCEx_PeriphCLKConfig>
 8001726:	1e03      	subs	r3, r0, #0
 8001728:	d001      	beq.n	800172e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800172a:	f7ff ff43 	bl	80015b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_RTC_MspInit+0x88>)
 8001730:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <HAL_RTC_MspInit+0x88>)
 8001734:	2180      	movs	r1, #128	; 0x80
 8001736:	0209      	lsls	r1, r1, #8
 8001738:	430a      	orrs	r2, r1
 800173a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <HAL_RTC_MspInit+0x88>)
 800173e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_RTC_MspInit+0x88>)
 8001742:	2180      	movs	r1, #128	; 0x80
 8001744:	00c9      	lsls	r1, r1, #3
 8001746:	430a      	orrs	r2, r1
 8001748:	63da      	str	r2, [r3, #60]	; 0x3c
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <HAL_RTC_MspInit+0x88>)
 800174c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4013      	ands	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	2100      	movs	r1, #0
 800175c:	2002      	movs	r0, #2
 800175e:	f000 fad9 	bl	8001d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001762:	2002      	movs	r0, #2
 8001764:	f000 faeb 	bl	8001d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001768:	46c0      	nop			; (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b00f      	add	sp, #60	; 0x3c
 800176e:	bd90      	pop	{r4, r7, pc}
 8001770:	40002800 	.word	0x40002800
 8001774:	40021000 	.word	0x40021000

08001778 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_TIM_Base_MspInit+0x38>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d10d      	bne.n	80017a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_TIM_Base_MspInit+0x3c>)
 800178c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_TIM_Base_MspInit+0x3c>)
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	0289      	lsls	r1, r1, #10
 8001794:	430a      	orrs	r2, r1
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_TIM_Base_MspInit+0x3c>)
 800179a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	029b      	lsls	r3, r3, #10
 80017a0:	4013      	ands	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b004      	add	sp, #16
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	40014400 	.word	0x40014400
 80017b4:	40021000 	.word	0x40021000

080017b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b08b      	sub	sp, #44	; 0x2c
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	2414      	movs	r4, #20
 80017c2:	193b      	adds	r3, r7, r4
 80017c4:	0018      	movs	r0, r3
 80017c6:	2314      	movs	r3, #20
 80017c8:	001a      	movs	r2, r3
 80017ca:	2100      	movs	r1, #0
 80017cc:	f004 fc07 	bl	8005fde <memset>
  if(huart->Instance==USART2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <HAL_UART_MspInit+0x8c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d130      	bne.n	800183c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017da:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <HAL_UART_MspInit+0x90>)
 80017dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_UART_MspInit+0x90>)
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	0289      	lsls	r1, r1, #10
 80017e4:	430a      	orrs	r2, r1
 80017e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <HAL_UART_MspInit+0x90>)
 80017ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	029b      	lsls	r3, r3, #10
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <HAL_UART_MspInit+0x90>)
 80017f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <HAL_UART_MspInit+0x90>)
 80017fc:	2101      	movs	r1, #1
 80017fe:	430a      	orrs	r2, r1
 8001800:	635a      	str	r2, [r3, #52]	; 0x34
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_UART_MspInit+0x90>)
 8001804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001806:	2201      	movs	r2, #1
 8001808:	4013      	ands	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800180e:	0021      	movs	r1, r4
 8001810:	187b      	adds	r3, r7, r1
 8001812:	220c      	movs	r2, #12
 8001814:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	187b      	adds	r3, r7, r1
 8001818:	2202      	movs	r2, #2
 800181a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800181c:	187b      	adds	r3, r7, r1
 800181e:	2201      	movs	r2, #1
 8001820:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	187b      	adds	r3, r7, r1
 8001824:	2200      	movs	r2, #0
 8001826:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001828:	187b      	adds	r3, r7, r1
 800182a:	2201      	movs	r2, #1
 800182c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	187a      	adds	r2, r7, r1
 8001830:	23a0      	movs	r3, #160	; 0xa0
 8001832:	05db      	lsls	r3, r3, #23
 8001834:	0011      	movs	r1, r2
 8001836:	0018      	movs	r0, r3
 8001838:	f000 fb14 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b00b      	add	sp, #44	; 0x2c
 8001842:	bd90      	pop	{r4, r7, pc}
 8001844:	40004400 	.word	0x40004400
 8001848:	40021000 	.word	0x40021000

0800184c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <NMI_Handler+0x4>

08001852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <HardFault_Handler+0x4>

08001858 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001870:	f000 f988 	bl	8001b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001874:	46c0      	nop			; (mov r8, r8)
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800187e:	f001 ff2d 	bl	80036dc <HAL_PWREx_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <RTC_TAMP_IRQHandler+0x14>)
 800188e:	0018      	movs	r0, r3
 8001890:	f003 fbea 	bl	8005068 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	20000110 	.word	0x20000110

080018a0 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Display_Button_Pin);
 80018a4:	2001      	movs	r0, #1
 80018a6:	f000 fc7b 	bl	80021a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Set_Button_Pin);
 80018aa:	2002      	movs	r0, #2
 80018ac:	f000 fc78 	bl	80021a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_NRST_Pin);
 80018ba:	2004      	movs	r0, #4
 80018bc:	f000 fc70 	bl	80021a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80018c0:	46c0      	nop			; (mov r8, r8)
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alarm_Enable_Button_Pin);
 80018ca:	2010      	movs	r0, #16
 80018cc:	f000 fc68 	bl	80021a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Hour_Set_Button_Pin);
 80018d0:	2020      	movs	r0, #32
 80018d2:	f000 fc65 	bl	80021a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Minute_Set_Button_Pin);
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	015b      	lsls	r3, r3, #5
 80018da:	0018      	movs	r0, r3
 80018dc:	f000 fc60 	bl	80021a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <I2C1_IRQHandler+0x2c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699a      	ldr	r2, [r3, #24]
 80018f2:	23e0      	movs	r3, #224	; 0xe0
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4013      	ands	r3, r2
 80018f8:	d004      	beq.n	8001904 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <I2C1_IRQHandler+0x2c>)
 80018fc:	0018      	movs	r0, r3
 80018fe:	f000 fe3b 	bl	8002578 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001902:	e003      	b.n	800190c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <I2C1_IRQHandler+0x2c>)
 8001906:	0018      	movs	r0, r3
 8001908:	f000 fe1c 	bl	8002544 <HAL_I2C_EV_IRQHandler>
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	200000bc 	.word	0x200000bc

08001918 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	e00a      	b.n	8001940 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800192a:	e000      	b.n	800192e <_read+0x16>
 800192c:	bf00      	nop
 800192e:	0001      	movs	r1, r0
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	60ba      	str	r2, [r7, #8]
 8001936:	b2ca      	uxtb	r2, r1
 8001938:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	429a      	cmp	r2, r3
 8001946:	dbf0      	blt.n	800192a <_read+0x12>
  }

  return len;
 8001948:	687b      	ldr	r3, [r7, #4]
}
 800194a:	0018      	movs	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	b006      	add	sp, #24
 8001950:	bd80      	pop	{r7, pc}

08001952 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	e009      	b.n	8001978 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	60ba      	str	r2, [r7, #8]
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	0018      	movs	r0, r3
 800196e:	f7fe fd75 	bl	800045c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	429a      	cmp	r2, r3
 800197e:	dbf1      	blt.n	8001964 <_write+0x12>
  }
  return len;
 8001980:	687b      	ldr	r3, [r7, #4]
}
 8001982:	0018      	movs	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	b006      	add	sp, #24
 8001988:	bd80      	pop	{r7, pc}

0800198a <_close>:

int _close(int file)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001992:	2301      	movs	r3, #1
 8001994:	425b      	negs	r3, r3
}
 8001996:	0018      	movs	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	b002      	add	sp, #8
 800199c:	bd80      	pop	{r7, pc}

0800199e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	0192      	lsls	r2, r2, #6
 80019ae:	605a      	str	r2, [r3, #4]
  return 0;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	0018      	movs	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b002      	add	sp, #8
 80019b8:	bd80      	pop	{r7, pc}

080019ba <_isatty>:

int _isatty(int file)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019c2:	2301      	movs	r3, #1
}
 80019c4:	0018      	movs	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b002      	add	sp, #8
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	b004      	add	sp, #16
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ec:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <_sbrk+0x5c>)
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <_sbrk+0x60>)
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <_sbrk+0x64>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <_sbrk+0x68>)
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	18d3      	adds	r3, r2, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d207      	bcs.n	8001a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a14:	f004 fab0 	bl	8005f78 <__errno>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	425b      	negs	r3, r3
 8001a22:	e009      	b.n	8001a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	18d2      	adds	r2, r2, r3
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <_sbrk+0x64>)
 8001a34:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a36:	68fb      	ldr	r3, [r7, #12]
}
 8001a38:	0018      	movs	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b006      	add	sp, #24
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20002000 	.word	0x20002000
 8001a44:	00000400 	.word	0x00000400
 8001a48:	2000024c 	.word	0x2000024c
 8001a4c:	20000268 	.word	0x20000268

08001a50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a5c:	480d      	ldr	r0, [pc, #52]	; (8001a94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a60:	f7ff fff6 	bl	8001a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a66:	490d      	ldr	r1, [pc, #52]	; (8001a9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a68:	4a0d      	ldr	r2, [pc, #52]	; (8001aa0 <LoopForever+0xe>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a6c:	e002      	b.n	8001a74 <LoopCopyDataInit>

08001a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a72:	3304      	adds	r3, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a78:	d3f9      	bcc.n	8001a6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a7c:	4c0a      	ldr	r4, [pc, #40]	; (8001aa8 <LoopForever+0x16>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a80:	e001      	b.n	8001a86 <LoopFillZerobss>

08001a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a84:	3204      	adds	r2, #4

08001a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a88:	d3fb      	bcc.n	8001a82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a8a:	f004 fa7b 	bl	8005f84 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001a8e:	f7fe fcf7 	bl	8000480 <main>

08001a92 <LoopForever>:

LoopForever:
  b LoopForever
 8001a92:	e7fe      	b.n	8001a92 <LoopForever>
  ldr   r0, =_estack
 8001a94:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a9c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001aa0:	080075f0 	.word	0x080075f0
  ldr r2, =_sbss
 8001aa4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001aa8:	20000264 	.word	0x20000264

08001aac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aac:	e7fe      	b.n	8001aac <ADC1_IRQHandler>
	...

08001ab0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab6:	1dfb      	adds	r3, r7, #7
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_Init+0x3c>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <HAL_Init+0x3c>)
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	0049      	lsls	r1, r1, #1
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aca:	2000      	movs	r0, #0
 8001acc:	f000 f810 	bl	8001af0 <HAL_InitTick>
 8001ad0:	1e03      	subs	r3, r0, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ad4:	1dfb      	adds	r3, r7, #7
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	e001      	b.n	8001ae0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001adc:	f7ff fd70 	bl	80015c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ae0:	1dfb      	adds	r3, r7, #7
 8001ae2:	781b      	ldrb	r3, [r3, #0]
}
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b002      	add	sp, #8
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40022000 	.word	0x40022000

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001af8:	230f      	movs	r3, #15
 8001afa:	18fb      	adds	r3, r7, r3
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001b00:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <HAL_InitTick+0x88>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d02b      	beq.n	8001b60 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001b08:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <HAL_InitTick+0x8c>)
 8001b0a:	681c      	ldr	r4, [r3, #0]
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <HAL_InitTick+0x88>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	0019      	movs	r1, r3
 8001b12:	23fa      	movs	r3, #250	; 0xfa
 8001b14:	0098      	lsls	r0, r3, #2
 8001b16:	f7fe faff 	bl	8000118 <__udivsi3>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	0020      	movs	r0, r4
 8001b20:	f7fe fafa 	bl	8000118 <__udivsi3>
 8001b24:	0003      	movs	r3, r0
 8001b26:	0018      	movs	r0, r3
 8001b28:	f000 f919 	bl	8001d5e <HAL_SYSTICK_Config>
 8001b2c:	1e03      	subs	r3, r0, #0
 8001b2e:	d112      	bne.n	8001b56 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d80a      	bhi.n	8001b4c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	2301      	movs	r3, #1
 8001b3a:	425b      	negs	r3, r3
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f000 f8e8 	bl	8001d14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_InitTick+0x90>)
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e00d      	b.n	8001b68 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	2201      	movs	r2, #1
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	e008      	b.n	8001b68 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b56:	230f      	movs	r3, #15
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	e003      	b.n	8001b68 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b60:	230f      	movs	r3, #15
 8001b62:	18fb      	adds	r3, r7, r3
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001b68:	230f      	movs	r3, #15
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	781b      	ldrb	r3, [r3, #0]
}
 8001b6e:	0018      	movs	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b005      	add	sp, #20
 8001b74:	bd90      	pop	{r4, r7, pc}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	20000038 	.word	0x20000038
 8001b7c:	20000030 	.word	0x20000030
 8001b80:	20000034 	.word	0x20000034

08001b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_IncTick+0x1c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	001a      	movs	r2, r3
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	18d2      	adds	r2, r2, r3
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b96:	601a      	str	r2, [r3, #0]
}
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	20000038 	.word	0x20000038
 8001ba4:	20000250 	.word	0x20000250

08001ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bac:	4b02      	ldr	r3, [pc, #8]	; (8001bb8 <HAL_GetTick+0x10>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	20000250 	.word	0x20000250

08001bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	1dfb      	adds	r3, r7, #7
 8001bc6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bc8:	1dfb      	adds	r3, r7, #7
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8001bce:	d809      	bhi.n	8001be4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd0:	1dfb      	adds	r3, r7, #7
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	001a      	movs	r2, r3
 8001bd6:	231f      	movs	r3, #31
 8001bd8:	401a      	ands	r2, r3
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <__NVIC_EnableIRQ+0x30>)
 8001bdc:	2101      	movs	r1, #1
 8001bde:	4091      	lsls	r1, r2
 8001be0:	000a      	movs	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b002      	add	sp, #8
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	1dfb      	adds	r3, r7, #7
 8001bfc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bfe:	1dfb      	adds	r3, r7, #7
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b7f      	cmp	r3, #127	; 0x7f
 8001c04:	d828      	bhi.n	8001c58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c06:	4a2f      	ldr	r2, [pc, #188]	; (8001cc4 <__NVIC_SetPriority+0xd4>)
 8001c08:	1dfb      	adds	r3, r7, #7
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b25b      	sxtb	r3, r3
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	33c0      	adds	r3, #192	; 0xc0
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	589b      	ldr	r3, [r3, r2]
 8001c16:	1dfa      	adds	r2, r7, #7
 8001c18:	7812      	ldrb	r2, [r2, #0]
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	400a      	ands	r2, r1
 8001c20:	00d2      	lsls	r2, r2, #3
 8001c22:	21ff      	movs	r1, #255	; 0xff
 8001c24:	4091      	lsls	r1, r2
 8001c26:	000a      	movs	r2, r1
 8001c28:	43d2      	mvns	r2, r2
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	019b      	lsls	r3, r3, #6
 8001c32:	22ff      	movs	r2, #255	; 0xff
 8001c34:	401a      	ands	r2, r3
 8001c36:	1dfb      	adds	r3, r7, #7
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	4003      	ands	r3, r0
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c44:	481f      	ldr	r0, [pc, #124]	; (8001cc4 <__NVIC_SetPriority+0xd4>)
 8001c46:	1dfb      	adds	r3, r7, #7
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	b25b      	sxtb	r3, r3
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	33c0      	adds	r3, #192	; 0xc0
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c56:	e031      	b.n	8001cbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c58:	4a1b      	ldr	r2, [pc, #108]	; (8001cc8 <__NVIC_SetPriority+0xd8>)
 8001c5a:	1dfb      	adds	r3, r7, #7
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	0019      	movs	r1, r3
 8001c60:	230f      	movs	r3, #15
 8001c62:	400b      	ands	r3, r1
 8001c64:	3b08      	subs	r3, #8
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3306      	adds	r3, #6
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	18d3      	adds	r3, r2, r3
 8001c6e:	3304      	adds	r3, #4
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	1dfa      	adds	r2, r7, #7
 8001c74:	7812      	ldrb	r2, [r2, #0]
 8001c76:	0011      	movs	r1, r2
 8001c78:	2203      	movs	r2, #3
 8001c7a:	400a      	ands	r2, r1
 8001c7c:	00d2      	lsls	r2, r2, #3
 8001c7e:	21ff      	movs	r1, #255	; 0xff
 8001c80:	4091      	lsls	r1, r2
 8001c82:	000a      	movs	r2, r1
 8001c84:	43d2      	mvns	r2, r2
 8001c86:	401a      	ands	r2, r3
 8001c88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	019b      	lsls	r3, r3, #6
 8001c8e:	22ff      	movs	r2, #255	; 0xff
 8001c90:	401a      	ands	r2, r3
 8001c92:	1dfb      	adds	r3, r7, #7
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	0018      	movs	r0, r3
 8001c98:	2303      	movs	r3, #3
 8001c9a:	4003      	ands	r3, r0
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ca0:	4809      	ldr	r0, [pc, #36]	; (8001cc8 <__NVIC_SetPriority+0xd8>)
 8001ca2:	1dfb      	adds	r3, r7, #7
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	001c      	movs	r4, r3
 8001ca8:	230f      	movs	r3, #15
 8001caa:	4023      	ands	r3, r4
 8001cac:	3b08      	subs	r3, #8
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	3306      	adds	r3, #6
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	18c3      	adds	r3, r0, r3
 8001cb8:	3304      	adds	r3, #4
 8001cba:	601a      	str	r2, [r3, #0]
}
 8001cbc:	46c0      	nop			; (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b003      	add	sp, #12
 8001cc2:	bd90      	pop	{r4, r7, pc}
 8001cc4:	e000e100 	.word	0xe000e100
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	1e5a      	subs	r2, r3, #1
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	045b      	lsls	r3, r3, #17
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d301      	bcc.n	8001ce4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e010      	b.n	8001d06 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <SysTick_Config+0x44>)
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	3a01      	subs	r2, #1
 8001cea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cec:	2301      	movs	r3, #1
 8001cee:	425b      	negs	r3, r3
 8001cf0:	2103      	movs	r1, #3
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f7ff ff7c 	bl	8001bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <SysTick_Config+0x44>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <SysTick_Config+0x44>)
 8001d00:	2207      	movs	r2, #7
 8001d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	0018      	movs	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b002      	add	sp, #8
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	e000e010 	.word	0xe000e010

08001d14 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	210f      	movs	r1, #15
 8001d20:	187b      	adds	r3, r7, r1
 8001d22:	1c02      	adds	r2, r0, #0
 8001d24:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	187b      	adds	r3, r7, r1
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	b25b      	sxtb	r3, r3
 8001d2e:	0011      	movs	r1, r2
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7ff ff5d 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b004      	add	sp, #16
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	0002      	movs	r2, r0
 8001d46:	1dfb      	adds	r3, r7, #7
 8001d48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d4a:	1dfb      	adds	r3, r7, #7
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	b25b      	sxtb	r3, r3
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7ff ff33 	bl	8001bbc <__NVIC_EnableIRQ>
}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b002      	add	sp, #8
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7ff ffaf 	bl	8001ccc <SysTick_Config>
 8001d6e:	0003      	movs	r3, r0
}
 8001d70:	0018      	movs	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b002      	add	sp, #8
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d80:	210f      	movs	r1, #15
 8001d82:	187b      	adds	r3, r7, r1
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2225      	movs	r2, #37	; 0x25
 8001d8c:	5c9b      	ldrb	r3, [r3, r2]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d006      	beq.n	8001da2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2204      	movs	r2, #4
 8001d98:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d9a:	187b      	adds	r3, r7, r1
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
 8001da0:	e049      	b.n	8001e36 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	210e      	movs	r1, #14
 8001dae:	438a      	bics	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	438a      	bics	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dcc:	491d      	ldr	r1, [pc, #116]	; (8001e44 <HAL_DMA_Abort_IT+0xcc>)
 8001dce:	400a      	ands	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HAL_DMA_Abort_IT+0xd0>)
 8001dd4:	6859      	ldr	r1, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	221c      	movs	r2, #28
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2201      	movs	r2, #1
 8001de0:	409a      	lsls	r2, r3
 8001de2:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_DMA_Abort_IT+0xd0>)
 8001de4:	430a      	orrs	r2, r1
 8001de6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001df0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00c      	beq.n	8001e14 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e04:	490f      	ldr	r1, [pc, #60]	; (8001e44 <HAL_DMA_Abort_IT+0xcc>)
 8001e06:	400a      	ands	r2, r1
 8001e08:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001e12:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2225      	movs	r2, #37	; 0x25
 8001e18:	2101      	movs	r1, #1
 8001e1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2224      	movs	r2, #36	; 0x24
 8001e20:	2100      	movs	r1, #0
 8001e22:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d004      	beq.n	8001e36 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	0010      	movs	r0, r2
 8001e34:	4798      	blx	r3
    }
  }
  return status;
 8001e36:	230f      	movs	r3, #15
 8001e38:	18fb      	adds	r3, r7, r3
 8001e3a:	781b      	ldrb	r3, [r3, #0]
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b004      	add	sp, #16
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	fffffeff 	.word	0xfffffeff
 8001e48:	40020000 	.word	0x40020000

08001e4c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2225      	movs	r2, #37	; 0x25
 8001e58:	5c9b      	ldrb	r3, [r3, r2]
 8001e5a:	b2db      	uxtb	r3, r3
}
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b002      	add	sp, #8
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e72:	e147      	b.n	8002104 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2101      	movs	r1, #1
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4091      	lsls	r1, r2
 8001e7e:	000a      	movs	r2, r1
 8001e80:	4013      	ands	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d100      	bne.n	8001e8c <HAL_GPIO_Init+0x28>
 8001e8a:	e138      	b.n	80020fe <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2203      	movs	r2, #3
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d005      	beq.n	8001ea4 <HAL_GPIO_Init+0x40>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d130      	bne.n	8001f06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	2203      	movs	r2, #3
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	0013      	movs	r3, r2
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	0013      	movs	r3, r2
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eda:	2201      	movs	r2, #1
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	0013      	movs	r3, r2
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	0013      	movs	r3, r2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d017      	beq.n	8001f42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	0013      	movs	r3, r2
 8001f22:	43da      	mvns	r2, r3
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	409a      	lsls	r2, r3
 8001f34:	0013      	movs	r3, r2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2203      	movs	r2, #3
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d123      	bne.n	8001f96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	08da      	lsrs	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3208      	adds	r2, #8
 8001f56:	0092      	lsls	r2, r2, #2
 8001f58:	58d3      	ldr	r3, [r2, r3]
 8001f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2207      	movs	r2, #7
 8001f60:	4013      	ands	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	220f      	movs	r2, #15
 8001f66:	409a      	lsls	r2, r3
 8001f68:	0013      	movs	r3, r2
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	691a      	ldr	r2, [r3, #16]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2107      	movs	r1, #7
 8001f7a:	400b      	ands	r3, r1
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	0013      	movs	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	08da      	lsrs	r2, r3, #3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3208      	adds	r2, #8
 8001f90:	0092      	lsls	r2, r2, #2
 8001f92:	6939      	ldr	r1, [r7, #16]
 8001f94:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	0013      	movs	r3, r2
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	0013      	movs	r3, r2
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	23c0      	movs	r3, #192	; 0xc0
 8001fd0:	029b      	lsls	r3, r3, #10
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d100      	bne.n	8001fd8 <HAL_GPIO_Init+0x174>
 8001fd6:	e092      	b.n	80020fe <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001fd8:	4a50      	ldr	r2, [pc, #320]	; (800211c <HAL_GPIO_Init+0x2b8>)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	089b      	lsrs	r3, r3, #2
 8001fde:	3318      	adds	r3, #24
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	589b      	ldr	r3, [r3, r2]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2203      	movs	r2, #3
 8001fea:	4013      	ands	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	220f      	movs	r2, #15
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	0013      	movs	r3, r2
 8001ff4:	43da      	mvns	r2, r3
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	23a0      	movs	r3, #160	; 0xa0
 8002000:	05db      	lsls	r3, r3, #23
 8002002:	429a      	cmp	r2, r3
 8002004:	d013      	beq.n	800202e <HAL_GPIO_Init+0x1ca>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a45      	ldr	r2, [pc, #276]	; (8002120 <HAL_GPIO_Init+0x2bc>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00d      	beq.n	800202a <HAL_GPIO_Init+0x1c6>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a44      	ldr	r2, [pc, #272]	; (8002124 <HAL_GPIO_Init+0x2c0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d007      	beq.n	8002026 <HAL_GPIO_Init+0x1c2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a43      	ldr	r2, [pc, #268]	; (8002128 <HAL_GPIO_Init+0x2c4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d101      	bne.n	8002022 <HAL_GPIO_Init+0x1be>
 800201e:	2303      	movs	r3, #3
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x1cc>
 8002022:	2305      	movs	r3, #5
 8002024:	e004      	b.n	8002030 <HAL_GPIO_Init+0x1cc>
 8002026:	2302      	movs	r3, #2
 8002028:	e002      	b.n	8002030 <HAL_GPIO_Init+0x1cc>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_GPIO_Init+0x1cc>
 800202e:	2300      	movs	r3, #0
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	2103      	movs	r1, #3
 8002034:	400a      	ands	r2, r1
 8002036:	00d2      	lsls	r2, r2, #3
 8002038:	4093      	lsls	r3, r2
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002040:	4936      	ldr	r1, [pc, #216]	; (800211c <HAL_GPIO_Init+0x2b8>)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	3318      	adds	r3, #24
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800204e:	4b33      	ldr	r3, [pc, #204]	; (800211c <HAL_GPIO_Init+0x2b8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	43da      	mvns	r2, r3
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	035b      	lsls	r3, r3, #13
 8002066:	4013      	ands	r3, r2
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002072:	4b2a      	ldr	r3, [pc, #168]	; (800211c <HAL_GPIO_Init+0x2b8>)
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002078:	4b28      	ldr	r3, [pc, #160]	; (800211c <HAL_GPIO_Init+0x2b8>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	43da      	mvns	r2, r3
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	039b      	lsls	r3, r3, #14
 8002090:	4013      	ands	r3, r2
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800209c:	4b1f      	ldr	r3, [pc, #124]	; (800211c <HAL_GPIO_Init+0x2b8>)
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020a2:	4a1e      	ldr	r2, [pc, #120]	; (800211c <HAL_GPIO_Init+0x2b8>)
 80020a4:	2384      	movs	r3, #132	; 0x84
 80020a6:	58d3      	ldr	r3, [r2, r3]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	43da      	mvns	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	029b      	lsls	r3, r3, #10
 80020bc:	4013      	ands	r3, r2
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020c8:	4914      	ldr	r1, [pc, #80]	; (800211c <HAL_GPIO_Init+0x2b8>)
 80020ca:	2284      	movs	r2, #132	; 0x84
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80020d0:	4a12      	ldr	r2, [pc, #72]	; (800211c <HAL_GPIO_Init+0x2b8>)
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	58d3      	ldr	r3, [r2, r3]
 80020d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	43da      	mvns	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	025b      	lsls	r3, r3, #9
 80020ea:	4013      	ands	r3, r2
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020f6:	4909      	ldr	r1, [pc, #36]	; (800211c <HAL_GPIO_Init+0x2b8>)
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3301      	adds	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	40da      	lsrs	r2, r3
 800210c:	1e13      	subs	r3, r2, #0
 800210e:	d000      	beq.n	8002112 <HAL_GPIO_Init+0x2ae>
 8002110:	e6b0      	b.n	8001e74 <HAL_GPIO_Init+0x10>
  }
}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	46bd      	mov	sp, r7
 8002118:	b006      	add	sp, #24
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021800 	.word	0x40021800
 8002120:	50000400 	.word	0x50000400
 8002124:	50000800 	.word	0x50000800
 8002128:	50000c00 	.word	0x50000c00

0800212c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	000a      	movs	r2, r1
 8002136:	1cbb      	adds	r3, r7, #2
 8002138:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	1cba      	adds	r2, r7, #2
 8002140:	8812      	ldrh	r2, [r2, #0]
 8002142:	4013      	ands	r3, r2
 8002144:	d004      	beq.n	8002150 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002146:	230f      	movs	r3, #15
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
 800214e:	e003      	b.n	8002158 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002150:	230f      	movs	r3, #15
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002158:	230f      	movs	r3, #15
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	781b      	ldrb	r3, [r3, #0]
}
 800215e:	0018      	movs	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	b004      	add	sp, #16
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	0008      	movs	r0, r1
 8002170:	0011      	movs	r1, r2
 8002172:	1cbb      	adds	r3, r7, #2
 8002174:	1c02      	adds	r2, r0, #0
 8002176:	801a      	strh	r2, [r3, #0]
 8002178:	1c7b      	adds	r3, r7, #1
 800217a:	1c0a      	adds	r2, r1, #0
 800217c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800217e:	1c7b      	adds	r3, r7, #1
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d004      	beq.n	8002190 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002186:	1cbb      	adds	r3, r7, #2
 8002188:	881a      	ldrh	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800218e:	e003      	b.n	8002198 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002190:	1cbb      	adds	r3, r7, #2
 8002192:	881a      	ldrh	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	b002      	add	sp, #8
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	0002      	movs	r2, r0
 80021a8:	1dbb      	adds	r3, r7, #6
 80021aa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80021ac:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	1dba      	adds	r2, r7, #6
 80021b2:	8812      	ldrh	r2, [r2, #0]
 80021b4:	4013      	ands	r3, r2
 80021b6:	d008      	beq.n	80021ca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021ba:	1dba      	adds	r2, r7, #6
 80021bc:	8812      	ldrh	r2, [r2, #0]
 80021be:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80021c0:	1dbb      	adds	r3, r7, #6
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	0018      	movs	r0, r3
 80021c6:	f000 f815 	bl	80021f4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	1dba      	adds	r2, r7, #6
 80021d0:	8812      	ldrh	r2, [r2, #0]
 80021d2:	4013      	ands	r3, r2
 80021d4:	d008      	beq.n	80021e8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021d8:	1dba      	adds	r2, r7, #6
 80021da:	8812      	ldrh	r2, [r2, #0]
 80021dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80021de:	1dbb      	adds	r3, r7, #6
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7fe fe80 	bl	8000ee8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021800 	.word	0x40021800

080021f4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	0002      	movs	r2, r0
 80021fc:	1dbb      	adds	r3, r7, #6
 80021fe:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e082      	b.n	8002320 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2241      	movs	r2, #65	; 0x41
 800221e:	5c9b      	ldrb	r3, [r3, r2]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d107      	bne.n	8002236 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2240      	movs	r2, #64	; 0x40
 800222a:	2100      	movs	r1, #0
 800222c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	0018      	movs	r0, r3
 8002232:	f7ff f9f1 	bl	8001618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2241      	movs	r2, #65	; 0x41
 800223a:	2124      	movs	r1, #36	; 0x24
 800223c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2101      	movs	r1, #1
 800224a:	438a      	bics	r2, r1
 800224c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4934      	ldr	r1, [pc, #208]	; (8002328 <HAL_I2C_Init+0x120>)
 8002258:	400a      	ands	r2, r1
 800225a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4931      	ldr	r1, [pc, #196]	; (800232c <HAL_I2C_Init+0x124>)
 8002268:	400a      	ands	r2, r1
 800226a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d108      	bne.n	8002286 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2180      	movs	r1, #128	; 0x80
 800227e:	0209      	lsls	r1, r1, #8
 8002280:	430a      	orrs	r2, r1
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	e007      	b.n	8002296 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2184      	movs	r1, #132	; 0x84
 8002290:	0209      	lsls	r1, r1, #8
 8002292:	430a      	orrs	r2, r1
 8002294:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d104      	bne.n	80022a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2280      	movs	r2, #128	; 0x80
 80022a4:	0112      	lsls	r2, r2, #4
 80022a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	491f      	ldr	r1, [pc, #124]	; (8002330 <HAL_I2C_Init+0x128>)
 80022b4:	430a      	orrs	r2, r1
 80022b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	491a      	ldr	r1, [pc, #104]	; (800232c <HAL_I2C_Init+0x124>)
 80022c4:	400a      	ands	r2, r1
 80022c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	431a      	orrs	r2, r3
 80022d2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69d9      	ldr	r1, [r3, #28]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1a      	ldr	r2, [r3, #32]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2241      	movs	r2, #65	; 0x41
 800230c:	2120      	movs	r1, #32
 800230e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2242      	movs	r2, #66	; 0x42
 800231a:	2100      	movs	r1, #0
 800231c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b002      	add	sp, #8
 8002326:	bd80      	pop	{r7, pc}
 8002328:	f0ffffff 	.word	0xf0ffffff
 800232c:	ffff7fff 	.word	0xffff7fff
 8002330:	02008000 	.word	0x02008000

08002334 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	0008      	movs	r0, r1
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	0019      	movs	r1, r3
 8002342:	230a      	movs	r3, #10
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	1c02      	adds	r2, r0, #0
 8002348:	801a      	strh	r2, [r3, #0]
 800234a:	2308      	movs	r3, #8
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	1c0a      	adds	r2, r1, #0
 8002350:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2241      	movs	r2, #65	; 0x41
 8002356:	5c9b      	ldrb	r3, [r3, r2]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b20      	cmp	r3, #32
 800235c:	d000      	beq.n	8002360 <HAL_I2C_Master_Transmit+0x2c>
 800235e:	e0e7      	b.n	8002530 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2240      	movs	r2, #64	; 0x40
 8002364:	5c9b      	ldrb	r3, [r3, r2]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_I2C_Master_Transmit+0x3a>
 800236a:	2302      	movs	r3, #2
 800236c:	e0e1      	b.n	8002532 <HAL_I2C_Master_Transmit+0x1fe>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2240      	movs	r2, #64	; 0x40
 8002372:	2101      	movs	r1, #1
 8002374:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002376:	f7ff fc17 	bl	8001ba8 <HAL_GetTick>
 800237a:	0003      	movs	r3, r0
 800237c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	0219      	lsls	r1, r3, #8
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	2319      	movs	r3, #25
 800238a:	2201      	movs	r2, #1
 800238c:	f000 fe76 	bl	800307c <I2C_WaitOnFlagUntilTimeout>
 8002390:	1e03      	subs	r3, r0, #0
 8002392:	d001      	beq.n	8002398 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0cc      	b.n	8002532 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2241      	movs	r2, #65	; 0x41
 800239c:	2121      	movs	r1, #33	; 0x21
 800239e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2242      	movs	r2, #66	; 0x42
 80023a4:	2110      	movs	r1, #16
 80023a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2208      	movs	r2, #8
 80023b8:	18ba      	adds	r2, r7, r2
 80023ba:	8812      	ldrh	r2, [r2, #0]
 80023bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2bff      	cmp	r3, #255	; 0xff
 80023cc:	d911      	bls.n	80023f2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	22ff      	movs	r2, #255	; 0xff
 80023d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	045c      	lsls	r4, r3, #17
 80023de:	230a      	movs	r3, #10
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	8819      	ldrh	r1, [r3, #0]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	4b55      	ldr	r3, [pc, #340]	; (800253c <HAL_I2C_Master_Transmit+0x208>)
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	0023      	movs	r3, r4
 80023ec:	f001 f800 	bl	80033f0 <I2C_TransferConfig>
 80023f0:	e075      	b.n	80024de <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002400:	b2da      	uxtb	r2, r3
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	049c      	lsls	r4, r3, #18
 8002406:	230a      	movs	r3, #10
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	8819      	ldrh	r1, [r3, #0]
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	4b4b      	ldr	r3, [pc, #300]	; (800253c <HAL_I2C_Master_Transmit+0x208>)
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	0023      	movs	r3, r4
 8002414:	f000 ffec 	bl	80033f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002418:	e061      	b.n	80024de <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	0018      	movs	r0, r3
 8002422:	f000 fe6a 	bl	80030fa <I2C_WaitOnTXISFlagUntilTimeout>
 8002426:	1e03      	subs	r3, r0, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e081      	b.n	8002532 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	781a      	ldrb	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d03a      	beq.n	80024de <HAL_I2C_Master_Transmit+0x1aa>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	d136      	bne.n	80024de <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	0013      	movs	r3, r2
 800247a:	2200      	movs	r2, #0
 800247c:	2180      	movs	r1, #128	; 0x80
 800247e:	f000 fdfd 	bl	800307c <I2C_WaitOnFlagUntilTimeout>
 8002482:	1e03      	subs	r3, r0, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e053      	b.n	8002532 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	2bff      	cmp	r3, #255	; 0xff
 8002492:	d911      	bls.n	80024b8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	22ff      	movs	r2, #255	; 0xff
 8002498:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	045c      	lsls	r4, r3, #17
 80024a4:	230a      	movs	r3, #10
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	8819      	ldrh	r1, [r3, #0]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	2300      	movs	r3, #0
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	0023      	movs	r3, r4
 80024b2:	f000 ff9d 	bl	80033f0 <I2C_TransferConfig>
 80024b6:	e012      	b.n	80024de <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	049c      	lsls	r4, r3, #18
 80024cc:	230a      	movs	r3, #10
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	8819      	ldrh	r1, [r3, #0]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	2300      	movs	r3, #0
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	0023      	movs	r3, r4
 80024da:	f000 ff89 	bl	80033f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d198      	bne.n	800241a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 fe42 	bl	8003178 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024f4:	1e03      	subs	r3, r0, #0
 80024f6:	d001      	beq.n	80024fc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e01a      	b.n	8002532 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2220      	movs	r2, #32
 8002502:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	490c      	ldr	r1, [pc, #48]	; (8002540 <HAL_I2C_Master_Transmit+0x20c>)
 8002510:	400a      	ands	r2, r1
 8002512:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2241      	movs	r2, #65	; 0x41
 8002518:	2120      	movs	r1, #32
 800251a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2242      	movs	r2, #66	; 0x42
 8002520:	2100      	movs	r1, #0
 8002522:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2240      	movs	r2, #64	; 0x40
 8002528:	2100      	movs	r1, #0
 800252a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	e000      	b.n	8002532 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002530:	2302      	movs	r3, #2
  }
}
 8002532:	0018      	movs	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	b007      	add	sp, #28
 8002538:	bd90      	pop	{r4, r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	80002000 	.word	0x80002000
 8002540:	fe00e800 	.word	0xfe00e800

08002544 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	68f9      	ldr	r1, [r7, #12]
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	4798      	blx	r3
  }
}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	b004      	add	sp, #16
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	0a1b      	lsrs	r3, r3, #8
 8002594:	001a      	movs	r2, r3
 8002596:	2301      	movs	r3, #1
 8002598:	4013      	ands	r3, r2
 800259a:	d010      	beq.n	80025be <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	09db      	lsrs	r3, r3, #7
 80025a0:	001a      	movs	r2, r3
 80025a2:	2301      	movs	r3, #1
 80025a4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80025a6:	d00a      	beq.n	80025be <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ac:	2201      	movs	r2, #1
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2280      	movs	r2, #128	; 0x80
 80025ba:	0052      	lsls	r2, r2, #1
 80025bc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	0a9b      	lsrs	r3, r3, #10
 80025c2:	001a      	movs	r2, r3
 80025c4:	2301      	movs	r3, #1
 80025c6:	4013      	ands	r3, r2
 80025c8:	d010      	beq.n	80025ec <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	09db      	lsrs	r3, r3, #7
 80025ce:	001a      	movs	r2, r3
 80025d0:	2301      	movs	r3, #1
 80025d2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80025d4:	d00a      	beq.n	80025ec <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	2208      	movs	r2, #8
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2280      	movs	r2, #128	; 0x80
 80025e8:	00d2      	lsls	r2, r2, #3
 80025ea:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	0a5b      	lsrs	r3, r3, #9
 80025f0:	001a      	movs	r2, r3
 80025f2:	2301      	movs	r3, #1
 80025f4:	4013      	ands	r3, r2
 80025f6:	d010      	beq.n	800261a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	09db      	lsrs	r3, r3, #7
 80025fc:	001a      	movs	r2, r3
 80025fe:	2301      	movs	r3, #1
 8002600:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002602:	d00a      	beq.n	800261a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	2202      	movs	r2, #2
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2280      	movs	r2, #128	; 0x80
 8002616:	0092      	lsls	r2, r2, #2
 8002618:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	220b      	movs	r2, #11
 8002624:	4013      	ands	r3, r2
 8002626:	d005      	beq.n	8002634 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	0011      	movs	r1, r2
 800262e:	0018      	movs	r0, r3
 8002630:	f000 fbd8 	bl	8002de4 <I2C_ITError>
  }
}
 8002634:	46c0      	nop			; (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b006      	add	sp, #24
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002644:	46c0      	nop			; (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	b002      	add	sp, #8
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002654:	46c0      	nop			; (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	b002      	add	sp, #8
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	0008      	movs	r0, r1
 8002666:	0011      	movs	r1, r2
 8002668:	1cfb      	adds	r3, r7, #3
 800266a:	1c02      	adds	r2, r0, #0
 800266c:	701a      	strb	r2, [r3, #0]
 800266e:	003b      	movs	r3, r7
 8002670:	1c0a      	adds	r2, r1, #0
 8002672:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b002      	add	sp, #8
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002684:	46c0      	nop			; (mov r8, r8)
 8002686:	46bd      	mov	sp, r7
 8002688:	b002      	add	sp, #8
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002694:	46c0      	nop			; (mov r8, r8)
 8002696:	46bd      	mov	sp, r7
 8002698:	b002      	add	sp, #8
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b002      	add	sp, #8
 80026aa:	bd80      	pop	{r7, pc}

080026ac <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2240      	movs	r2, #64	; 0x40
 80026c6:	5c9b      	ldrb	r3, [r3, r2]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <I2C_Slave_ISR_IT+0x24>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e0fa      	b.n	80028c6 <I2C_Slave_ISR_IT+0x21a>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2240      	movs	r2, #64	; 0x40
 80026d4:	2101      	movs	r1, #1
 80026d6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	001a      	movs	r2, r3
 80026de:	2301      	movs	r3, #1
 80026e0:	4013      	ands	r3, r2
 80026e2:	d00b      	beq.n	80026fc <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	001a      	movs	r2, r3
 80026ea:	2301      	movs	r3, #1
 80026ec:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026ee:	d005      	beq.n	80026fc <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	0011      	movs	r1, r2
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 f9f6 	bl	8002ae8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	001a      	movs	r2, r3
 8002702:	2301      	movs	r3, #1
 8002704:	4013      	ands	r3, r2
 8002706:	d054      	beq.n	80027b2 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	001a      	movs	r2, r3
 800270e:	2301      	movs	r3, #1
 8002710:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002712:	d04e      	beq.n	80027b2 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d12d      	bne.n	800277a <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2241      	movs	r2, #65	; 0x41
 8002722:	5c9b      	ldrb	r3, [r3, r2]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b28      	cmp	r3, #40	; 0x28
 8002728:	d10b      	bne.n	8002742 <I2C_Slave_ISR_IT+0x96>
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	049b      	lsls	r3, r3, #18
 8002730:	429a      	cmp	r2, r3
 8002732:	d106      	bne.n	8002742 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	0011      	movs	r1, r2
 800273a:	0018      	movs	r0, r3
 800273c:	f000 faf8 	bl	8002d30 <I2C_ITListenCplt>
 8002740:	e036      	b.n	80027b0 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2241      	movs	r2, #65	; 0x41
 8002746:	5c9b      	ldrb	r3, [r3, r2]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b29      	cmp	r3, #41	; 0x29
 800274c:	d110      	bne.n	8002770 <I2C_Slave_ISR_IT+0xc4>
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	4a5f      	ldr	r2, [pc, #380]	; (80028d0 <I2C_Slave_ISR_IT+0x224>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00c      	beq.n	8002770 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2210      	movs	r2, #16
 800275c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	0018      	movs	r0, r3
 8002762:	f000 fc4a 	bl	8002ffa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	0018      	movs	r0, r3
 800276a:	f000 f957 	bl	8002a1c <I2C_ITSlaveSeqCplt>
 800276e:	e01f      	b.n	80027b0 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2210      	movs	r2, #16
 8002776:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002778:	e09d      	b.n	80028b6 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2210      	movs	r2, #16
 8002780:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	2204      	movs	r2, #4
 8002788:	431a      	orrs	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <I2C_Slave_ISR_IT+0xf4>
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	045b      	lsls	r3, r3, #17
 800279a:	429a      	cmp	r2, r3
 800279c:	d000      	beq.n	80027a0 <I2C_Slave_ISR_IT+0xf4>
 800279e:	e08a      	b.n	80028b6 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	0011      	movs	r1, r2
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 fb1b 	bl	8002de4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80027ae:	e082      	b.n	80028b6 <I2C_Slave_ISR_IT+0x20a>
 80027b0:	e081      	b.n	80028b6 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	089b      	lsrs	r3, r3, #2
 80027b6:	001a      	movs	r2, r3
 80027b8:	2301      	movs	r3, #1
 80027ba:	4013      	ands	r3, r2
 80027bc:	d031      	beq.n	8002822 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	089b      	lsrs	r3, r3, #2
 80027c2:	001a      	movs	r2, r3
 80027c4:	2301      	movs	r3, #1
 80027c6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027c8:	d02b      	beq.n	8002822 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d018      	beq.n	8002806 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280a:	b29b      	uxth	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d154      	bne.n	80028ba <I2C_Slave_ISR_IT+0x20e>
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	4a2f      	ldr	r2, [pc, #188]	; (80028d0 <I2C_Slave_ISR_IT+0x224>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d050      	beq.n	80028ba <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	0018      	movs	r0, r3
 800281c:	f000 f8fe 	bl	8002a1c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002820:	e04b      	b.n	80028ba <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	08db      	lsrs	r3, r3, #3
 8002826:	001a      	movs	r2, r3
 8002828:	2301      	movs	r3, #1
 800282a:	4013      	ands	r3, r2
 800282c:	d00c      	beq.n	8002848 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	08db      	lsrs	r3, r3, #3
 8002832:	001a      	movs	r2, r3
 8002834:	2301      	movs	r3, #1
 8002836:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002838:	d006      	beq.n	8002848 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	0011      	movs	r1, r2
 8002840:	0018      	movs	r0, r3
 8002842:	f000 f847 	bl	80028d4 <I2C_ITAddrCplt>
 8002846:	e039      	b.n	80028bc <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	085b      	lsrs	r3, r3, #1
 800284c:	001a      	movs	r2, r3
 800284e:	2301      	movs	r3, #1
 8002850:	4013      	ands	r3, r2
 8002852:	d033      	beq.n	80028bc <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	085b      	lsrs	r3, r3, #1
 8002858:	001a      	movs	r2, r3
 800285a:	2301      	movs	r3, #1
 800285c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800285e:	d02d      	beq.n	80028bc <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d018      	beq.n	800289c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	781a      	ldrb	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	851a      	strh	r2, [r3, #40]	; 0x28
 800289a:	e00f      	b.n	80028bc <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	045b      	lsls	r3, r3, #17
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d002      	beq.n	80028ac <I2C_Slave_ISR_IT+0x200>
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d107      	bne.n	80028bc <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	0018      	movs	r0, r3
 80028b0:	f000 f8b4 	bl	8002a1c <I2C_ITSlaveSeqCplt>
 80028b4:	e002      	b.n	80028bc <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	e000      	b.n	80028bc <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80028ba:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2240      	movs	r2, #64	; 0x40
 80028c0:	2100      	movs	r1, #0
 80028c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	0018      	movs	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b006      	add	sp, #24
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	ffff0000 	.word	0xffff0000

080028d4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028d4:	b5b0      	push	{r4, r5, r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2241      	movs	r2, #65	; 0x41
 80028e2:	5c9b      	ldrb	r3, [r3, r2]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	001a      	movs	r2, r3
 80028e8:	2328      	movs	r3, #40	; 0x28
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b28      	cmp	r3, #40	; 0x28
 80028ee:	d000      	beq.n	80028f2 <I2C_ITAddrCplt+0x1e>
 80028f0:	e088      	b.n	8002a04 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	0c1b      	lsrs	r3, r3, #16
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	250f      	movs	r5, #15
 80028fe:	197b      	adds	r3, r7, r5
 8002900:	2101      	movs	r1, #1
 8002902:	400a      	ands	r2, r1
 8002904:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	0c1b      	lsrs	r3, r3, #16
 800290e:	b29a      	uxth	r2, r3
 8002910:	200c      	movs	r0, #12
 8002912:	183b      	adds	r3, r7, r0
 8002914:	21fe      	movs	r1, #254	; 0xfe
 8002916:	400a      	ands	r2, r1
 8002918:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	b29a      	uxth	r2, r3
 8002922:	240a      	movs	r4, #10
 8002924:	193b      	adds	r3, r7, r4
 8002926:	0592      	lsls	r2, r2, #22
 8002928:	0d92      	lsrs	r2, r2, #22
 800292a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	b29a      	uxth	r2, r3
 8002934:	2308      	movs	r3, #8
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	21fe      	movs	r1, #254	; 0xfe
 800293a:	400a      	ands	r2, r1
 800293c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d148      	bne.n	80029d8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002946:	0021      	movs	r1, r4
 8002948:	187b      	adds	r3, r7, r1
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	09db      	lsrs	r3, r3, #7
 800294e:	b29a      	uxth	r2, r3
 8002950:	183b      	adds	r3, r7, r0
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	4053      	eors	r3, r2
 8002956:	b29b      	uxth	r3, r3
 8002958:	001a      	movs	r2, r3
 800295a:	2306      	movs	r3, #6
 800295c:	4013      	ands	r3, r2
 800295e:	d120      	bne.n	80029a2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8002960:	183b      	adds	r3, r7, r0
 8002962:	187a      	adds	r2, r7, r1
 8002964:	8812      	ldrh	r2, [r2, #0]
 8002966:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002976:	2b02      	cmp	r3, #2
 8002978:	d14c      	bne.n	8002a14 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2208      	movs	r2, #8
 8002986:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2240      	movs	r2, #64	; 0x40
 800298c:	2100      	movs	r1, #0
 800298e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002990:	183b      	adds	r3, r7, r0
 8002992:	881a      	ldrh	r2, [r3, #0]
 8002994:	197b      	adds	r3, r7, r5
 8002996:	7819      	ldrb	r1, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	0018      	movs	r0, r3
 800299c:	f7ff fe5e 	bl	800265c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80029a0:	e038      	b.n	8002a14 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80029a2:	240c      	movs	r4, #12
 80029a4:	193b      	adds	r3, r7, r4
 80029a6:	2208      	movs	r2, #8
 80029a8:	18ba      	adds	r2, r7, r2
 80029aa:	8812      	ldrh	r2, [r2, #0]
 80029ac:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	021a      	lsls	r2, r3, #8
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	0011      	movs	r1, r2
 80029b6:	0018      	movs	r0, r3
 80029b8:	f000 fd54 	bl	8003464 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2240      	movs	r2, #64	; 0x40
 80029c0:	2100      	movs	r1, #0
 80029c2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029c4:	193b      	adds	r3, r7, r4
 80029c6:	881a      	ldrh	r2, [r3, #0]
 80029c8:	230f      	movs	r3, #15
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	7819      	ldrb	r1, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7ff fe43 	bl	800265c <HAL_I2C_AddrCallback>
}
 80029d6:	e01d      	b.n	8002a14 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	021a      	lsls	r2, r3, #8
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	0011      	movs	r1, r2
 80029e0:	0018      	movs	r0, r3
 80029e2:	f000 fd3f 	bl	8003464 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2240      	movs	r2, #64	; 0x40
 80029ea:	2100      	movs	r1, #0
 80029ec:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029ee:	230c      	movs	r3, #12
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	881a      	ldrh	r2, [r3, #0]
 80029f4:	230f      	movs	r3, #15
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	7819      	ldrb	r1, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	0018      	movs	r0, r3
 80029fe:	f7ff fe2d 	bl	800265c <HAL_I2C_AddrCallback>
}
 8002a02:	e007      	b.n	8002a14 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2208      	movs	r2, #8
 8002a0a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2240      	movs	r2, #64	; 0x40
 8002a10:	2100      	movs	r1, #0
 8002a12:	5499      	strb	r1, [r3, r2]
}
 8002a14:	46c0      	nop			; (mov r8, r8)
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b004      	add	sp, #16
 8002a1a:	bdb0      	pop	{r4, r5, r7, pc}

08002a1c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2242      	movs	r2, #66	; 0x42
 8002a30:	2100      	movs	r1, #0
 8002a32:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	0b9b      	lsrs	r3, r3, #14
 8002a38:	001a      	movs	r2, r3
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d008      	beq.n	8002a52 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4925      	ldr	r1, [pc, #148]	; (8002ae0 <I2C_ITSlaveSeqCplt+0xc4>)
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	e00d      	b.n	8002a6e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	0bdb      	lsrs	r3, r3, #15
 8002a56:	001a      	movs	r2, r3
 8002a58:	2301      	movs	r3, #1
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	491e      	ldr	r1, [pc, #120]	; (8002ae4 <I2C_ITSlaveSeqCplt+0xc8>)
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2241      	movs	r2, #65	; 0x41
 8002a72:	5c9b      	ldrb	r3, [r3, r2]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b29      	cmp	r3, #41	; 0x29
 8002a78:	d114      	bne.n	8002aa4 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2241      	movs	r2, #65	; 0x41
 8002a7e:	2128      	movs	r1, #40	; 0x28
 8002a80:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2221      	movs	r2, #33	; 0x21
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f000 fce9 	bl	8003464 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2240      	movs	r2, #64	; 0x40
 8002a96:	2100      	movs	r1, #0
 8002a98:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f7ff fdcd 	bl	800263c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002aa2:	e019      	b.n	8002ad8 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2241      	movs	r2, #65	; 0x41
 8002aa8:	5c9b      	ldrb	r3, [r3, r2]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b2a      	cmp	r3, #42	; 0x2a
 8002aae:	d113      	bne.n	8002ad8 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2241      	movs	r2, #65	; 0x41
 8002ab4:	2128      	movs	r1, #40	; 0x28
 8002ab6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2222      	movs	r2, #34	; 0x22
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f000 fcce 	bl	8003464 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2240      	movs	r2, #64	; 0x40
 8002acc:	2100      	movs	r1, #0
 8002ace:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f7ff fdba 	bl	800264c <HAL_I2C_SlaveRxCpltCallback>
}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b004      	add	sp, #16
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	ffffbfff 	.word	0xffffbfff
 8002ae4:	ffff7fff 	.word	0xffff7fff

08002ae8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002afe:	200f      	movs	r0, #15
 8002b00:	183b      	adds	r3, r7, r0
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	2141      	movs	r1, #65	; 0x41
 8002b06:	5c52      	ldrb	r2, [r2, r1]
 8002b08:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b12:	183b      	adds	r3, r7, r0
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b21      	cmp	r3, #33	; 0x21
 8002b18:	d003      	beq.n	8002b22 <I2C_ITSlaveCplt+0x3a>
 8002b1a:	183b      	adds	r3, r7, r0
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b29      	cmp	r3, #41	; 0x29
 8002b20:	d109      	bne.n	8002b36 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002b22:	4a7d      	ldr	r2, [pc, #500]	; (8002d18 <I2C_ITSlaveCplt+0x230>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	0011      	movs	r1, r2
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f000 fc9b 	bl	8003464 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2221      	movs	r2, #33	; 0x21
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
 8002b34:	e011      	b.n	8002b5a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b36:	220f      	movs	r2, #15
 8002b38:	18bb      	adds	r3, r7, r2
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b22      	cmp	r3, #34	; 0x22
 8002b3e:	d003      	beq.n	8002b48 <I2C_ITSlaveCplt+0x60>
 8002b40:	18bb      	adds	r3, r7, r2
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b2a      	cmp	r3, #42	; 0x2a
 8002b46:	d108      	bne.n	8002b5a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002b48:	4a74      	ldr	r2, [pc, #464]	; (8002d1c <I2C_ITSlaveCplt+0x234>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	0011      	movs	r1, r2
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f000 fc88 	bl	8003464 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2222      	movs	r2, #34	; 0x22
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2180      	movs	r1, #128	; 0x80
 8002b66:	0209      	lsls	r1, r1, #8
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	496a      	ldr	r1, [pc, #424]	; (8002d20 <I2C_ITSlaveCplt+0x238>)
 8002b78:	400a      	ands	r2, r1
 8002b7a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f000 fa3b 	bl	8002ffa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	0b9b      	lsrs	r3, r3, #14
 8002b88:	001a      	movs	r2, r3
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d013      	beq.n	8002bb8 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4962      	ldr	r1, [pc, #392]	; (8002d24 <I2C_ITSlaveCplt+0x23c>)
 8002b9c:	400a      	ands	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bb6:	e018      	b.n	8002bea <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	0bdb      	lsrs	r3, r3, #15
 8002bbc:	001a      	movs	r2, r3
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d012      	beq.n	8002bea <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4956      	ldr	r1, [pc, #344]	; (8002d28 <I2C_ITSlaveCplt+0x240>)
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d006      	beq.n	8002bea <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	001a      	movs	r2, r3
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d020      	beq.n	8002c38 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	4393      	bics	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00c      	beq.n	8002c38 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	2204      	movs	r2, #4
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2242      	movs	r2, #66	; 0x42
 8002c52:	2100      	movs	r1, #0
 8002c54:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d013      	beq.n	8002c8c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	0011      	movs	r1, r2
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 f8b9 	bl	8002de4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2241      	movs	r2, #65	; 0x41
 8002c76:	5c9b      	ldrb	r3, [r3, r2]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b28      	cmp	r3, #40	; 0x28
 8002c7c:	d147      	bne.n	8002d0e <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	0011      	movs	r1, r2
 8002c84:	0018      	movs	r0, r3
 8002c86:	f000 f853 	bl	8002d30 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c8a:	e040      	b.n	8002d0e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	4a26      	ldr	r2, [pc, #152]	; (8002d2c <I2C_ITSlaveCplt+0x244>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d016      	beq.n	8002cc4 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f7ff febf 	bl	8002a1c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a22      	ldr	r2, [pc, #136]	; (8002d2c <I2C_ITSlaveCplt+0x244>)
 8002ca2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2241      	movs	r2, #65	; 0x41
 8002ca8:	2120      	movs	r1, #32
 8002caa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2240      	movs	r2, #64	; 0x40
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7ff fcdd 	bl	800267c <HAL_I2C_ListenCpltCallback>
}
 8002cc2:	e024      	b.n	8002d0e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2241      	movs	r2, #65	; 0x41
 8002cc8:	5c9b      	ldrb	r3, [r3, r2]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b22      	cmp	r3, #34	; 0x22
 8002cce:	d10f      	bne.n	8002cf0 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2241      	movs	r2, #65	; 0x41
 8002cd4:	2120      	movs	r1, #32
 8002cd6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2240      	movs	r2, #64	; 0x40
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f7ff fcaf 	bl	800264c <HAL_I2C_SlaveRxCpltCallback>
}
 8002cee:	e00e      	b.n	8002d0e <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2241      	movs	r2, #65	; 0x41
 8002cf4:	2120      	movs	r1, #32
 8002cf6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2240      	movs	r2, #64	; 0x40
 8002d02:	2100      	movs	r1, #0
 8002d04:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f7ff fc97 	bl	800263c <HAL_I2C_SlaveTxCpltCallback>
}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b006      	add	sp, #24
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	00008001 	.word	0x00008001
 8002d1c:	00008002 	.word	0x00008002
 8002d20:	fe00e800 	.word	0xfe00e800
 8002d24:	ffffbfff 	.word	0xffffbfff
 8002d28:	ffff7fff 	.word	0xffff7fff
 8002d2c:	ffff0000 	.word	0xffff0000

08002d30 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a27      	ldr	r2, [pc, #156]	; (8002ddc <I2C_ITListenCplt+0xac>)
 8002d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2241      	movs	r2, #65	; 0x41
 8002d4a:	2120      	movs	r1, #32
 8002d4c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2242      	movs	r2, #66	; 0x42
 8002d52:	2100      	movs	r1, #0
 8002d54:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	089b      	lsrs	r3, r3, #2
 8002d60:	001a      	movs	r2, r3
 8002d62:	2301      	movs	r3, #1
 8002d64:	4013      	ands	r3, r2
 8002d66:	d022      	beq.n	8002dae <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d012      	beq.n	8002dae <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	2204      	movs	r2, #4
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002dae:	4a0c      	ldr	r2, [pc, #48]	; (8002de0 <I2C_ITListenCplt+0xb0>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	0011      	movs	r1, r2
 8002db4:	0018      	movs	r0, r3
 8002db6:	f000 fb55 	bl	8003464 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2210      	movs	r2, #16
 8002dc0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2240      	movs	r2, #64	; 0x40
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7ff fc55 	bl	800267c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	b002      	add	sp, #8
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	ffff0000 	.word	0xffff0000
 8002de0:	00008003 	.word	0x00008003

08002de4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002dee:	200f      	movs	r0, #15
 8002df0:	183b      	adds	r3, r7, r0
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	2141      	movs	r1, #65	; 0x41
 8002df6:	5c52      	ldrb	r2, [r2, r1]
 8002df8:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2242      	movs	r2, #66	; 0x42
 8002dfe:	2100      	movs	r1, #0
 8002e00:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a62      	ldr	r2, [pc, #392]	; (8002f90 <I2C_ITError+0x1ac>)
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002e1a:	183b      	adds	r3, r7, r0
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b28      	cmp	r3, #40	; 0x28
 8002e20:	d007      	beq.n	8002e32 <I2C_ITError+0x4e>
 8002e22:	183b      	adds	r3, r7, r0
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b29      	cmp	r3, #41	; 0x29
 8002e28:	d003      	beq.n	8002e32 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002e2a:	183b      	adds	r3, r7, r0
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e30:	d10c      	bne.n	8002e4c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2103      	movs	r1, #3
 8002e36:	0018      	movs	r0, r3
 8002e38:	f000 fb14 	bl	8003464 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2241      	movs	r2, #65	; 0x41
 8002e40:	2128      	movs	r1, #40	; 0x28
 8002e42:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a53      	ldr	r2, [pc, #332]	; (8002f94 <I2C_ITError+0x1b0>)
 8002e48:	635a      	str	r2, [r3, #52]	; 0x34
 8002e4a:	e012      	b.n	8002e72 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e4c:	4a52      	ldr	r2, [pc, #328]	; (8002f98 <I2C_ITError+0x1b4>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	0011      	movs	r1, r2
 8002e52:	0018      	movs	r0, r3
 8002e54:	f000 fb06 	bl	8003464 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2241      	movs	r2, #65	; 0x41
 8002e5c:	5c9b      	ldrb	r3, [r3, r2]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b60      	cmp	r3, #96	; 0x60
 8002e62:	d003      	beq.n	8002e6c <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2241      	movs	r2, #65	; 0x41
 8002e68:	2120      	movs	r1, #32
 8002e6a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d03b      	beq.n	8002ef8 <I2C_ITError+0x114>
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b11      	cmp	r3, #17
 8002e84:	d002      	beq.n	8002e8c <I2C_ITError+0xa8>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b21      	cmp	r3, #33	; 0x21
 8002e8a:	d135      	bne.n	8002ef8 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	01db      	lsls	r3, r3, #7
 8002e96:	401a      	ands	r2, r3
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	01db      	lsls	r3, r3, #7
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d107      	bne.n	8002eb0 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	493c      	ldr	r1, [pc, #240]	; (8002f9c <I2C_ITError+0x1b8>)
 8002eac:	400a      	ands	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f7fe ffc9 	bl	8001e4c <HAL_DMA_GetState>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d016      	beq.n	8002eee <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	4a36      	ldr	r2, [pc, #216]	; (8002fa0 <I2C_ITError+0x1bc>)
 8002ec6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2240      	movs	r2, #64	; 0x40
 8002ecc:	2100      	movs	r1, #0
 8002ece:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f7fe ff4f 	bl	8001d78 <HAL_DMA_Abort_IT>
 8002eda:	1e03      	subs	r3, r0, #0
 8002edc:	d051      	beq.n	8002f82 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	0018      	movs	r0, r3
 8002eea:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002eec:	e049      	b.n	8002f82 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f000 f859 	bl	8002fa8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ef6:	e044      	b.n	8002f82 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d03b      	beq.n	8002f78 <I2C_ITError+0x194>
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b12      	cmp	r3, #18
 8002f04:	d002      	beq.n	8002f0c <I2C_ITError+0x128>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b22      	cmp	r3, #34	; 0x22
 8002f0a:	d135      	bne.n	8002f78 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	401a      	ands	r2, r3
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d107      	bne.n	8002f30 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	491e      	ldr	r1, [pc, #120]	; (8002fa4 <I2C_ITError+0x1c0>)
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f34:	0018      	movs	r0, r3
 8002f36:	f7fe ff89 	bl	8001e4c <HAL_DMA_GetState>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d016      	beq.n	8002f6e <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f44:	4a16      	ldr	r2, [pc, #88]	; (8002fa0 <I2C_ITError+0x1bc>)
 8002f46:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2240      	movs	r2, #64	; 0x40
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f54:	0018      	movs	r0, r3
 8002f56:	f7fe ff0f 	bl	8001d78 <HAL_DMA_Abort_IT>
 8002f5a:	1e03      	subs	r3, r0, #0
 8002f5c:	d013      	beq.n	8002f86 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f68:	0018      	movs	r0, r3
 8002f6a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f6c:	e00b      	b.n	8002f86 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f000 f819 	bl	8002fa8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f76:	e006      	b.n	8002f86 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f000 f814 	bl	8002fa8 <I2C_TreatErrorCallback>
  }
}
 8002f80:	e002      	b.n	8002f88 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	e000      	b.n	8002f88 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f86:	46c0      	nop			; (mov r8, r8)
}
 8002f88:	46c0      	nop			; (mov r8, r8)
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b004      	add	sp, #16
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	ffff0000 	.word	0xffff0000
 8002f94:	080026ad 	.word	0x080026ad
 8002f98:	00008003 	.word	0x00008003
 8002f9c:	ffffbfff 	.word	0xffffbfff
 8002fa0:	0800303f 	.word	0x0800303f
 8002fa4:	ffff7fff 	.word	0xffff7fff

08002fa8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2241      	movs	r2, #65	; 0x41
 8002fb4:	5c9b      	ldrb	r3, [r3, r2]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b60      	cmp	r3, #96	; 0x60
 8002fba:	d10f      	bne.n	8002fdc <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2241      	movs	r2, #65	; 0x41
 8002fc0:	2120      	movs	r1, #32
 8002fc2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2240      	movs	r2, #64	; 0x40
 8002fce:	2100      	movs	r1, #0
 8002fd0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7ff fb61 	bl	800269c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002fda:	e00a      	b.n	8002ff2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2240      	movs	r2, #64	; 0x40
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	0018      	movs	r0, r3
 8002fee:	f7ff fb4d 	bl	800268c <HAL_I2C_ErrorCallback>
}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b002      	add	sp, #8
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2202      	movs	r2, #2
 800300a:	4013      	ands	r3, r2
 800300c:	2b02      	cmp	r3, #2
 800300e:	d103      	bne.n	8003018 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2200      	movs	r2, #0
 8003016:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	2201      	movs	r2, #1
 8003020:	4013      	ands	r3, r2
 8003022:	2b01      	cmp	r3, #1
 8003024:	d007      	beq.n	8003036 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699a      	ldr	r2, [r3, #24]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2101      	movs	r1, #1
 8003032:	430a      	orrs	r2, r1
 8003034:	619a      	str	r2, [r3, #24]
  }
}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b002      	add	sp, #8
 800303c:	bd80      	pop	{r7, pc}

0800303e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003058:	2200      	movs	r2, #0
 800305a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003068:	2200      	movs	r2, #0
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	0018      	movs	r0, r3
 8003070:	f7ff ff9a 	bl	8002fa8 <I2C_TreatErrorCallback>
}
 8003074:	46c0      	nop			; (mov r8, r8)
 8003076:	46bd      	mov	sp, r7
 8003078:	b004      	add	sp, #16
 800307a:	bd80      	pop	{r7, pc}

0800307c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	1dfb      	adds	r3, r7, #7
 800308a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800308c:	e021      	b.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	3301      	adds	r3, #1
 8003092:	d01e      	beq.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003094:	f7fe fd88 	bl	8001ba8 <HAL_GetTick>
 8003098:	0002      	movs	r2, r0
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d302      	bcc.n	80030aa <I2C_WaitOnFlagUntilTimeout+0x2e>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d113      	bne.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	2220      	movs	r2, #32
 80030b0:	431a      	orrs	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2241      	movs	r2, #65	; 0x41
 80030ba:	2120      	movs	r1, #32
 80030bc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2242      	movs	r2, #66	; 0x42
 80030c2:	2100      	movs	r1, #0
 80030c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2240      	movs	r2, #64	; 0x40
 80030ca:	2100      	movs	r1, #0
 80030cc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e00f      	b.n	80030f2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	4013      	ands	r3, r2
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	425a      	negs	r2, r3
 80030e2:	4153      	adcs	r3, r2
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	001a      	movs	r2, r3
 80030e8:	1dfb      	adds	r3, r7, #7
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d0ce      	beq.n	800308e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	0018      	movs	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b004      	add	sp, #16
 80030f8:	bd80      	pop	{r7, pc}

080030fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003106:	e02b      	b.n	8003160 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	0018      	movs	r0, r3
 8003110:	f000 f86e 	bl	80031f0 <I2C_IsErrorOccurred>
 8003114:	1e03      	subs	r3, r0, #0
 8003116:	d001      	beq.n	800311c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e029      	b.n	8003170 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	3301      	adds	r3, #1
 8003120:	d01e      	beq.n	8003160 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003122:	f7fe fd41 	bl	8001ba8 <HAL_GetTick>
 8003126:	0002      	movs	r2, r0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	429a      	cmp	r2, r3
 8003130:	d302      	bcc.n	8003138 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d113      	bne.n	8003160 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	2220      	movs	r2, #32
 800313e:	431a      	orrs	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2241      	movs	r2, #65	; 0x41
 8003148:	2120      	movs	r1, #32
 800314a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2242      	movs	r2, #66	; 0x42
 8003150:	2100      	movs	r1, #0
 8003152:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2240      	movs	r2, #64	; 0x40
 8003158:	2100      	movs	r1, #0
 800315a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e007      	b.n	8003170 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2202      	movs	r2, #2
 8003168:	4013      	ands	r3, r2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d1cc      	bne.n	8003108 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b004      	add	sp, #16
 8003176:	bd80      	pop	{r7, pc}

08003178 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003184:	e028      	b.n	80031d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	0018      	movs	r0, r3
 800318e:	f000 f82f 	bl	80031f0 <I2C_IsErrorOccurred>
 8003192:	1e03      	subs	r3, r0, #0
 8003194:	d001      	beq.n	800319a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e026      	b.n	80031e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7fe fd05 	bl	8001ba8 <HAL_GetTick>
 800319e:	0002      	movs	r2, r0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d113      	bne.n	80031d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b4:	2220      	movs	r2, #32
 80031b6:	431a      	orrs	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2241      	movs	r2, #65	; 0x41
 80031c0:	2120      	movs	r1, #32
 80031c2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2242      	movs	r2, #66	; 0x42
 80031c8:	2100      	movs	r1, #0
 80031ca:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2240      	movs	r2, #64	; 0x40
 80031d0:	2100      	movs	r1, #0
 80031d2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e007      	b.n	80031e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2220      	movs	r2, #32
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b20      	cmp	r3, #32
 80031e4:	d1cf      	bne.n	8003186 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	0018      	movs	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b004      	add	sp, #16
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f0:	b590      	push	{r4, r7, lr}
 80031f2:	b08b      	sub	sp, #44	; 0x2c
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031fc:	2327      	movs	r3, #39	; 0x27
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2210      	movs	r2, #16
 8003218:	4013      	ands	r3, r2
 800321a:	d100      	bne.n	800321e <I2C_IsErrorOccurred+0x2e>
 800321c:	e082      	b.n	8003324 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2210      	movs	r2, #16
 8003224:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003226:	e060      	b.n	80032ea <I2C_IsErrorOccurred+0xfa>
 8003228:	2427      	movs	r4, #39	; 0x27
 800322a:	193b      	adds	r3, r7, r4
 800322c:	193a      	adds	r2, r7, r4
 800322e:	7812      	ldrb	r2, [r2, #0]
 8003230:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	3301      	adds	r3, #1
 8003236:	d058      	beq.n	80032ea <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003238:	f7fe fcb6 	bl	8001ba8 <HAL_GetTick>
 800323c:	0002      	movs	r2, r0
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	429a      	cmp	r2, r3
 8003246:	d306      	bcc.n	8003256 <I2C_IsErrorOccurred+0x66>
 8003248:	193b      	adds	r3, r7, r4
 800324a:	193a      	adds	r2, r7, r4
 800324c:	7812      	ldrb	r2, [r2, #0]
 800324e:	701a      	strb	r2, [r3, #0]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d149      	bne.n	80032ea <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	01db      	lsls	r3, r3, #7
 8003260:	4013      	ands	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003264:	2013      	movs	r0, #19
 8003266:	183b      	adds	r3, r7, r0
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	2142      	movs	r1, #66	; 0x42
 800326c:	5c52      	ldrb	r2, [r2, r1]
 800326e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	401a      	ands	r2, r3
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	021b      	lsls	r3, r3, #8
 8003280:	429a      	cmp	r2, r3
 8003282:	d126      	bne.n	80032d2 <I2C_IsErrorOccurred+0xe2>
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	01db      	lsls	r3, r3, #7
 800328a:	429a      	cmp	r2, r3
 800328c:	d021      	beq.n	80032d2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800328e:	183b      	adds	r3, r7, r0
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b20      	cmp	r3, #32
 8003294:	d01d      	beq.n	80032d2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2180      	movs	r1, #128	; 0x80
 80032a2:	01c9      	lsls	r1, r1, #7
 80032a4:	430a      	orrs	r2, r1
 80032a6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80032a8:	f7fe fc7e 	bl	8001ba8 <HAL_GetTick>
 80032ac:	0003      	movs	r3, r0
 80032ae:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032b0:	e00f      	b.n	80032d2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032b2:	f7fe fc79 	bl	8001ba8 <HAL_GetTick>
 80032b6:	0002      	movs	r2, r0
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b19      	cmp	r3, #25
 80032be:	d908      	bls.n	80032d2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	2220      	movs	r2, #32
 80032c4:	4313      	orrs	r3, r2
 80032c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80032c8:	2327      	movs	r3, #39	; 0x27
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]

              break;
 80032d0:	e00b      	b.n	80032ea <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2220      	movs	r2, #32
 80032da:	4013      	ands	r3, r2
 80032dc:	2127      	movs	r1, #39	; 0x27
 80032de:	187a      	adds	r2, r7, r1
 80032e0:	1879      	adds	r1, r7, r1
 80032e2:	7809      	ldrb	r1, [r1, #0]
 80032e4:	7011      	strb	r1, [r2, #0]
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d1e3      	bne.n	80032b2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2220      	movs	r2, #32
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b20      	cmp	r3, #32
 80032f6:	d004      	beq.n	8003302 <I2C_IsErrorOccurred+0x112>
 80032f8:	2327      	movs	r3, #39	; 0x27
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d092      	beq.n	8003228 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003302:	2327      	movs	r3, #39	; 0x27
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d103      	bne.n	8003314 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2220      	movs	r2, #32
 8003312:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	2204      	movs	r2, #4
 8003318:	4313      	orrs	r3, r2
 800331a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800331c:	2327      	movs	r3, #39	; 0x27
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4013      	ands	r3, r2
 8003334:	d00c      	beq.n	8003350 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	2201      	movs	r2, #1
 800333a:	4313      	orrs	r3, r2
 800333c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2280      	movs	r2, #128	; 0x80
 8003344:	0052      	lsls	r2, r2, #1
 8003346:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003348:	2327      	movs	r3, #39	; 0x27
 800334a:	18fb      	adds	r3, r7, r3
 800334c:	2201      	movs	r2, #1
 800334e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4013      	ands	r3, r2
 8003358:	d00c      	beq.n	8003374 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	2208      	movs	r2, #8
 800335e:	4313      	orrs	r3, r2
 8003360:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2280      	movs	r2, #128	; 0x80
 8003368:	00d2      	lsls	r2, r2, #3
 800336a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800336c:	2327      	movs	r3, #39	; 0x27
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	2201      	movs	r2, #1
 8003372:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4013      	ands	r3, r2
 800337c:	d00c      	beq.n	8003398 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	2202      	movs	r2, #2
 8003382:	4313      	orrs	r3, r2
 8003384:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2280      	movs	r2, #128	; 0x80
 800338c:	0092      	lsls	r2, r2, #2
 800338e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003390:	2327      	movs	r3, #39	; 0x27
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003398:	2327      	movs	r3, #39	; 0x27
 800339a:	18fb      	adds	r3, r7, r3
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d01d      	beq.n	80033de <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	0018      	movs	r0, r3
 80033a6:	f7ff fe28 	bl	8002ffa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	490d      	ldr	r1, [pc, #52]	; (80033ec <I2C_IsErrorOccurred+0x1fc>)
 80033b6:	400a      	ands	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2241      	movs	r2, #65	; 0x41
 80033ca:	2120      	movs	r1, #32
 80033cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2242      	movs	r2, #66	; 0x42
 80033d2:	2100      	movs	r1, #0
 80033d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2240      	movs	r2, #64	; 0x40
 80033da:	2100      	movs	r1, #0
 80033dc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80033de:	2327      	movs	r3, #39	; 0x27
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	781b      	ldrb	r3, [r3, #0]
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b00b      	add	sp, #44	; 0x2c
 80033ea:	bd90      	pop	{r4, r7, pc}
 80033ec:	fe00e800 	.word	0xfe00e800

080033f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	0008      	movs	r0, r1
 80033fa:	0011      	movs	r1, r2
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	240a      	movs	r4, #10
 8003400:	193b      	adds	r3, r7, r4
 8003402:	1c02      	adds	r2, r0, #0
 8003404:	801a      	strh	r2, [r3, #0]
 8003406:	2009      	movs	r0, #9
 8003408:	183b      	adds	r3, r7, r0
 800340a:	1c0a      	adds	r2, r1, #0
 800340c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800340e:	193b      	adds	r3, r7, r4
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	059b      	lsls	r3, r3, #22
 8003414:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003416:	183b      	adds	r3, r7, r0
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	0419      	lsls	r1, r3, #16
 800341c:	23ff      	movs	r3, #255	; 0xff
 800341e:	041b      	lsls	r3, r3, #16
 8003420:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003422:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342a:	4313      	orrs	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	085b      	lsrs	r3, r3, #1
 8003430:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800343a:	0d51      	lsrs	r1, r2, #21
 800343c:	2280      	movs	r2, #128	; 0x80
 800343e:	00d2      	lsls	r2, r2, #3
 8003440:	400a      	ands	r2, r1
 8003442:	4907      	ldr	r1, [pc, #28]	; (8003460 <I2C_TransferConfig+0x70>)
 8003444:	430a      	orrs	r2, r1
 8003446:	43d2      	mvns	r2, r2
 8003448:	401a      	ands	r2, r3
 800344a:	0011      	movs	r1, r2
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	46bd      	mov	sp, r7
 800345a:	b007      	add	sp, #28
 800345c:	bd90      	pop	{r4, r7, pc}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	03ff63ff 	.word	0x03ff63ff

08003464 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	000a      	movs	r2, r1
 800346e:	1cbb      	adds	r3, r7, #2
 8003470:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003476:	1cbb      	adds	r3, r7, #2
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	2201      	movs	r2, #1
 800347c:	4013      	ands	r3, r2
 800347e:	d010      	beq.n	80034a2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2242      	movs	r2, #66	; 0x42
 8003484:	4313      	orrs	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2241      	movs	r2, #65	; 0x41
 800348c:	5c9b      	ldrb	r3, [r3, r2]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	001a      	movs	r2, r3
 8003492:	2328      	movs	r3, #40	; 0x28
 8003494:	4013      	ands	r3, r2
 8003496:	2b28      	cmp	r3, #40	; 0x28
 8003498:	d003      	beq.n	80034a2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	22b0      	movs	r2, #176	; 0xb0
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80034a2:	1cbb      	adds	r3, r7, #2
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	2202      	movs	r2, #2
 80034a8:	4013      	ands	r3, r2
 80034aa:	d010      	beq.n	80034ce <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2244      	movs	r2, #68	; 0x44
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2241      	movs	r2, #65	; 0x41
 80034b8:	5c9b      	ldrb	r3, [r3, r2]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	001a      	movs	r2, r3
 80034be:	2328      	movs	r3, #40	; 0x28
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b28      	cmp	r3, #40	; 0x28
 80034c4:	d003      	beq.n	80034ce <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	22b0      	movs	r2, #176	; 0xb0
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80034ce:	1cbb      	adds	r3, r7, #2
 80034d0:	2200      	movs	r2, #0
 80034d2:	5e9b      	ldrsh	r3, [r3, r2]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	da03      	bge.n	80034e0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	22b8      	movs	r2, #184	; 0xb8
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80034e0:	1cbb      	adds	r3, r7, #2
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d103      	bne.n	80034f0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2290      	movs	r2, #144	; 0x90
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80034f0:	1cbb      	adds	r3, r7, #2
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d103      	bne.n	8003500 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003500:	1cbb      	adds	r3, r7, #2
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	2b40      	cmp	r3, #64	; 0x40
 8003506:	d103      	bne.n	8003510 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2240      	movs	r2, #64	; 0x40
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	43d9      	mvns	r1, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	400a      	ands	r2, r1
 8003520:	601a      	str	r2, [r3, #0]
}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	b004      	add	sp, #16
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2241      	movs	r2, #65	; 0x41
 800353a:	5c9b      	ldrb	r3, [r3, r2]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b20      	cmp	r3, #32
 8003540:	d138      	bne.n	80035b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2240      	movs	r2, #64	; 0x40
 8003546:	5c9b      	ldrb	r3, [r3, r2]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800354c:	2302      	movs	r3, #2
 800354e:	e032      	b.n	80035b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2240      	movs	r2, #64	; 0x40
 8003554:	2101      	movs	r1, #1
 8003556:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2241      	movs	r2, #65	; 0x41
 800355c:	2124      	movs	r1, #36	; 0x24
 800355e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2101      	movs	r1, #1
 800356c:	438a      	bics	r2, r1
 800356e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4911      	ldr	r1, [pc, #68]	; (80035c0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800357c:	400a      	ands	r2, r1
 800357e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6819      	ldr	r1, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2101      	movs	r1, #1
 800359c:	430a      	orrs	r2, r1
 800359e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2241      	movs	r2, #65	; 0x41
 80035a4:	2120      	movs	r1, #32
 80035a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2240      	movs	r2, #64	; 0x40
 80035ac:	2100      	movs	r1, #0
 80035ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	e000      	b.n	80035b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035b4:	2302      	movs	r3, #2
  }
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b002      	add	sp, #8
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	ffffefff 	.word	0xffffefff

080035c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2241      	movs	r2, #65	; 0x41
 80035d2:	5c9b      	ldrb	r3, [r3, r2]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d139      	bne.n	800364e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2240      	movs	r2, #64	; 0x40
 80035de:	5c9b      	ldrb	r3, [r3, r2]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e033      	b.n	8003650 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2240      	movs	r2, #64	; 0x40
 80035ec:	2101      	movs	r1, #1
 80035ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2241      	movs	r2, #65	; 0x41
 80035f4:	2124      	movs	r1, #36	; 0x24
 80035f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2101      	movs	r1, #1
 8003604:	438a      	bics	r2, r1
 8003606:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4a11      	ldr	r2, [pc, #68]	; (8003658 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003614:	4013      	ands	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	021b      	lsls	r3, r3, #8
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2101      	movs	r1, #1
 8003636:	430a      	orrs	r2, r1
 8003638:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2241      	movs	r2, #65	; 0x41
 800363e:	2120      	movs	r1, #32
 8003640:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2240      	movs	r2, #64	; 0x40
 8003646:	2100      	movs	r1, #0
 8003648:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	e000      	b.n	8003650 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800364e:	2302      	movs	r3, #2
  }
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	b004      	add	sp, #16
 8003656:	bd80      	pop	{r7, pc}
 8003658:	fffff0ff 	.word	0xfffff0ff

0800365c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a19      	ldr	r2, [pc, #100]	; (80036d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800366a:	4013      	ands	r3, r2
 800366c:	0019      	movs	r1, r3
 800366e:	4b17      	ldr	r3, [pc, #92]	; (80036cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	430a      	orrs	r2, r1
 8003674:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	2380      	movs	r3, #128	; 0x80
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	429a      	cmp	r2, r3
 800367e:	d11f      	bne.n	80036c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003680:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	0013      	movs	r3, r2
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	189b      	adds	r3, r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4912      	ldr	r1, [pc, #72]	; (80036d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800368e:	0018      	movs	r0, r3
 8003690:	f7fc fd42 	bl	8000118 <__udivsi3>
 8003694:	0003      	movs	r3, r0
 8003696:	3301      	adds	r3, #1
 8003698:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800369a:	e008      	b.n	80036ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	e001      	b.n	80036ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e009      	b.n	80036c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036ae:	4b07      	ldr	r3, [pc, #28]	; (80036cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	2380      	movs	r3, #128	; 0x80
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	401a      	ands	r2, r3
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	429a      	cmp	r2, r3
 80036be:	d0ed      	beq.n	800369c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	0018      	movs	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b004      	add	sp, #16
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	40007000 	.word	0x40007000
 80036d0:	fffff9ff 	.word	0xfffff9ff
 80036d4:	20000030 	.word	0x20000030
 80036d8:	000f4240 	.word	0x000f4240

080036dc <HAL_PWREx_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_IRQHandler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Check PWR exti Rising flag */
  if (__HAL_PWR_PVD_EXTI_GET_RISING_FLAG() != 0x0U)
 80036e0:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	2380      	movs	r3, #128	; 0x80
 80036e6:	025b      	lsls	r3, r3, #9
 80036e8:	4013      	ands	r3, r2
 80036ea:	d005      	beq.n	80036f8 <HAL_PWREx_PVD_IRQHandler+0x1c>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_RISING_FLAG();
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80036ee:	2280      	movs	r2, #128	; 0x80
 80036f0:	0252      	lsls	r2, r2, #9
 80036f2:	60da      	str	r2, [r3, #12]

    /* PWR PVD interrupt rising user callback */
    HAL_PWREx_PVD_Rising_Callback();
 80036f4:	f000 f812 	bl	800371c <HAL_PWREx_PVD_Rising_Callback>
  }

  /* Check PWR exti fallling flag */
  if (__HAL_PWR_PVD_EXTI_GET_FALLING_FLAG() != 0x0U)
 80036f8:	4b07      	ldr	r3, [pc, #28]	; (8003718 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	2380      	movs	r3, #128	; 0x80
 80036fe:	025b      	lsls	r3, r3, #9
 8003700:	4013      	ands	r3, r2
 8003702:	d005      	beq.n	8003710 <HAL_PWREx_PVD_IRQHandler+0x34>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FALLING_FLAG();
 8003704:	4b04      	ldr	r3, [pc, #16]	; (8003718 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8003706:	2280      	movs	r2, #128	; 0x80
 8003708:	0252      	lsls	r2, r2, #9
 800370a:	611a      	str	r2, [r3, #16]

    /* PWR PVD interrupt falling user callback */
    HAL_PWREx_PVD_Falling_Callback();
 800370c:	f000 f80b 	bl	8003726 <HAL_PWREx_PVD_Falling_Callback>
  }
}
 8003710:	46c0      	nop			; (mov r8, r8)
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	40021800 	.word	0x40021800

0800371c <HAL_PWREx_PVD_Rising_Callback>:
/**
  * @brief  PWR PVD interrupt rising callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Rising_Callback(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Rising_Callback can be implemented in the user file
  */
}
 8003720:	46c0      	nop			; (mov r8, r8)
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_PWREx_PVD_Falling_Callback>:
/**
  * @brief  PWR PVD interrupt Falling callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Falling_Callback(void)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Falling_Callback can be implemented in the user file
  */
}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003734:	4b03      	ldr	r3, [pc, #12]	; (8003744 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	23e0      	movs	r3, #224	; 0xe0
 800373a:	01db      	lsls	r3, r3, #7
 800373c:	4013      	ands	r3, r2
}
 800373e:	0018      	movs	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000

08003748 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e2fe      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2201      	movs	r2, #1
 8003760:	4013      	ands	r3, r2
 8003762:	d100      	bne.n	8003766 <HAL_RCC_OscConfig+0x1e>
 8003764:	e07c      	b.n	8003860 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003766:	4bc3      	ldr	r3, [pc, #780]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2238      	movs	r2, #56	; 0x38
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003770:	4bc0      	ldr	r3, [pc, #768]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2203      	movs	r2, #3
 8003776:	4013      	ands	r3, r2
 8003778:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	2b10      	cmp	r3, #16
 800377e:	d102      	bne.n	8003786 <HAL_RCC_OscConfig+0x3e>
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2b03      	cmp	r3, #3
 8003784:	d002      	beq.n	800378c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b08      	cmp	r3, #8
 800378a:	d10b      	bne.n	80037a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378c:	4bb9      	ldr	r3, [pc, #740]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	2380      	movs	r3, #128	; 0x80
 8003792:	029b      	lsls	r3, r3, #10
 8003794:	4013      	ands	r3, r2
 8003796:	d062      	beq.n	800385e <HAL_RCC_OscConfig+0x116>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d15e      	bne.n	800385e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e2d9      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	025b      	lsls	r3, r3, #9
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_OscConfig+0x78>
 80037b0:	4bb0      	ldr	r3, [pc, #704]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	4baf      	ldr	r3, [pc, #700]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80037b6:	2180      	movs	r1, #128	; 0x80
 80037b8:	0249      	lsls	r1, r1, #9
 80037ba:	430a      	orrs	r2, r1
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e020      	b.n	8003802 <HAL_RCC_OscConfig+0xba>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	23a0      	movs	r3, #160	; 0xa0
 80037c6:	02db      	lsls	r3, r3, #11
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d10e      	bne.n	80037ea <HAL_RCC_OscConfig+0xa2>
 80037cc:	4ba9      	ldr	r3, [pc, #676]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4ba8      	ldr	r3, [pc, #672]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80037d2:	2180      	movs	r1, #128	; 0x80
 80037d4:	02c9      	lsls	r1, r1, #11
 80037d6:	430a      	orrs	r2, r1
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	4ba6      	ldr	r3, [pc, #664]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4ba5      	ldr	r3, [pc, #660]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80037e0:	2180      	movs	r1, #128	; 0x80
 80037e2:	0249      	lsls	r1, r1, #9
 80037e4:	430a      	orrs	r2, r1
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	e00b      	b.n	8003802 <HAL_RCC_OscConfig+0xba>
 80037ea:	4ba2      	ldr	r3, [pc, #648]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4ba1      	ldr	r3, [pc, #644]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80037f0:	49a1      	ldr	r1, [pc, #644]	; (8003a78 <HAL_RCC_OscConfig+0x330>)
 80037f2:	400a      	ands	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	4b9f      	ldr	r3, [pc, #636]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	4b9e      	ldr	r3, [pc, #632]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80037fc:	499f      	ldr	r1, [pc, #636]	; (8003a7c <HAL_RCC_OscConfig+0x334>)
 80037fe:	400a      	ands	r2, r1
 8003800:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d014      	beq.n	8003834 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fe f9cd 	bl	8001ba8 <HAL_GetTick>
 800380e:	0003      	movs	r3, r0
 8003810:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003814:	f7fe f9c8 	bl	8001ba8 <HAL_GetTick>
 8003818:	0002      	movs	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e298      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003826:	4b93      	ldr	r3, [pc, #588]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	029b      	lsls	r3, r3, #10
 800382e:	4013      	ands	r3, r2
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0xcc>
 8003832:	e015      	b.n	8003860 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fe f9b8 	bl	8001ba8 <HAL_GetTick>
 8003838:	0003      	movs	r3, r0
 800383a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383e:	f7fe f9b3 	bl	8001ba8 <HAL_GetTick>
 8003842:	0002      	movs	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b64      	cmp	r3, #100	; 0x64
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e283      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003850:	4b88      	ldr	r3, [pc, #544]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	029b      	lsls	r3, r3, #10
 8003858:	4013      	ands	r3, r2
 800385a:	d1f0      	bne.n	800383e <HAL_RCC_OscConfig+0xf6>
 800385c:	e000      	b.n	8003860 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800385e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2202      	movs	r2, #2
 8003866:	4013      	ands	r3, r2
 8003868:	d100      	bne.n	800386c <HAL_RCC_OscConfig+0x124>
 800386a:	e099      	b.n	80039a0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800386c:	4b81      	ldr	r3, [pc, #516]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2238      	movs	r2, #56	; 0x38
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003876:	4b7f      	ldr	r3, [pc, #508]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2203      	movs	r2, #3
 800387c:	4013      	ands	r3, r2
 800387e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	2b10      	cmp	r3, #16
 8003884:	d102      	bne.n	800388c <HAL_RCC_OscConfig+0x144>
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d002      	beq.n	8003892 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d135      	bne.n	80038fe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003892:	4b78      	ldr	r3, [pc, #480]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4013      	ands	r3, r2
 800389c:	d005      	beq.n	80038aa <HAL_RCC_OscConfig+0x162>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e256      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038aa:	4b72      	ldr	r3, [pc, #456]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	4a74      	ldr	r2, [pc, #464]	; (8003a80 <HAL_RCC_OscConfig+0x338>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	0019      	movs	r1, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	021a      	lsls	r2, r3, #8
 80038ba:	4b6e      	ldr	r3, [pc, #440]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80038bc:	430a      	orrs	r2, r1
 80038be:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d112      	bne.n	80038ec <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80038c6:	4b6b      	ldr	r3, [pc, #428]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a6e      	ldr	r2, [pc, #440]	; (8003a84 <HAL_RCC_OscConfig+0x33c>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	0019      	movs	r1, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	4b67      	ldr	r3, [pc, #412]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80038d6:	430a      	orrs	r2, r1
 80038d8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80038da:	4b66      	ldr	r3, [pc, #408]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	0adb      	lsrs	r3, r3, #11
 80038e0:	2207      	movs	r2, #7
 80038e2:	4013      	ands	r3, r2
 80038e4:	4a68      	ldr	r2, [pc, #416]	; (8003a88 <HAL_RCC_OscConfig+0x340>)
 80038e6:	40da      	lsrs	r2, r3
 80038e8:	4b68      	ldr	r3, [pc, #416]	; (8003a8c <HAL_RCC_OscConfig+0x344>)
 80038ea:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038ec:	4b68      	ldr	r3, [pc, #416]	; (8003a90 <HAL_RCC_OscConfig+0x348>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	0018      	movs	r0, r3
 80038f2:	f7fe f8fd 	bl	8001af0 <HAL_InitTick>
 80038f6:	1e03      	subs	r3, r0, #0
 80038f8:	d051      	beq.n	800399e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e22c      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d030      	beq.n	8003968 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003906:	4b5b      	ldr	r3, [pc, #364]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a5e      	ldr	r2, [pc, #376]	; (8003a84 <HAL_RCC_OscConfig+0x33c>)
 800390c:	4013      	ands	r3, r2
 800390e:	0019      	movs	r1, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	4b57      	ldr	r3, [pc, #348]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 8003916:	430a      	orrs	r2, r1
 8003918:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800391a:	4b56      	ldr	r3, [pc, #344]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4b55      	ldr	r3, [pc, #340]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 8003920:	2180      	movs	r1, #128	; 0x80
 8003922:	0049      	lsls	r1, r1, #1
 8003924:	430a      	orrs	r2, r1
 8003926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fe f93e 	bl	8001ba8 <HAL_GetTick>
 800392c:	0003      	movs	r3, r0
 800392e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003932:	f7fe f939 	bl	8001ba8 <HAL_GetTick>
 8003936:	0002      	movs	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e209      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003944:	4b4b      	ldr	r3, [pc, #300]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4013      	ands	r3, r2
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003950:	4b48      	ldr	r3, [pc, #288]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	4a4a      	ldr	r2, [pc, #296]	; (8003a80 <HAL_RCC_OscConfig+0x338>)
 8003956:	4013      	ands	r3, r2
 8003958:	0019      	movs	r1, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	021a      	lsls	r2, r3, #8
 8003960:	4b44      	ldr	r3, [pc, #272]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	e01b      	b.n	80039a0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003968:	4b42      	ldr	r3, [pc, #264]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b41      	ldr	r3, [pc, #260]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 800396e:	4949      	ldr	r1, [pc, #292]	; (8003a94 <HAL_RCC_OscConfig+0x34c>)
 8003970:	400a      	ands	r2, r1
 8003972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003974:	f7fe f918 	bl	8001ba8 <HAL_GetTick>
 8003978:	0003      	movs	r3, r0
 800397a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800397e:	f7fe f913 	bl	8001ba8 <HAL_GetTick>
 8003982:	0002      	movs	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e1e3      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003990:	4b38      	ldr	r3, [pc, #224]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4013      	ands	r3, r2
 800399a:	d1f0      	bne.n	800397e <HAL_RCC_OscConfig+0x236>
 800399c:	e000      	b.n	80039a0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800399e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2208      	movs	r2, #8
 80039a6:	4013      	ands	r3, r2
 80039a8:	d047      	beq.n	8003a3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80039aa:	4b32      	ldr	r3, [pc, #200]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2238      	movs	r2, #56	; 0x38
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b18      	cmp	r3, #24
 80039b4:	d10a      	bne.n	80039cc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80039b6:	4b2f      	ldr	r3, [pc, #188]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80039b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ba:	2202      	movs	r2, #2
 80039bc:	4013      	ands	r3, r2
 80039be:	d03c      	beq.n	8003a3a <HAL_RCC_OscConfig+0x2f2>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d138      	bne.n	8003a3a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e1c5      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d019      	beq.n	8003a08 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80039d4:	4b27      	ldr	r3, [pc, #156]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80039d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039d8:	4b26      	ldr	r3, [pc, #152]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80039da:	2101      	movs	r1, #1
 80039dc:	430a      	orrs	r2, r1
 80039de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fe f8e2 	bl	8001ba8 <HAL_GetTick>
 80039e4:	0003      	movs	r3, r0
 80039e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ea:	f7fe f8dd 	bl	8001ba8 <HAL_GetTick>
 80039ee:	0002      	movs	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e1ad      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039fc:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 80039fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a00:	2202      	movs	r2, #2
 8003a02:	4013      	ands	r3, r2
 8003a04:	d0f1      	beq.n	80039ea <HAL_RCC_OscConfig+0x2a2>
 8003a06:	e018      	b.n	8003a3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003a08:	4b1a      	ldr	r3, [pc, #104]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 8003a0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a0c:	4b19      	ldr	r3, [pc, #100]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 8003a0e:	2101      	movs	r1, #1
 8003a10:	438a      	bics	r2, r1
 8003a12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a14:	f7fe f8c8 	bl	8001ba8 <HAL_GetTick>
 8003a18:	0003      	movs	r3, r0
 8003a1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1e:	f7fe f8c3 	bl	8001ba8 <HAL_GetTick>
 8003a22:	0002      	movs	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e193      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a30:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 8003a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a34:	2202      	movs	r2, #2
 8003a36:	4013      	ands	r3, r2
 8003a38:	d1f1      	bne.n	8003a1e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2204      	movs	r2, #4
 8003a40:	4013      	ands	r3, r2
 8003a42:	d100      	bne.n	8003a46 <HAL_RCC_OscConfig+0x2fe>
 8003a44:	e0c6      	b.n	8003bd4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a46:	231f      	movs	r3, #31
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003a4e:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2238      	movs	r2, #56	; 0x38
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b20      	cmp	r3, #32
 8003a58:	d11e      	bne.n	8003a98 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_RCC_OscConfig+0x32c>)
 8003a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5e:	2202      	movs	r2, #2
 8003a60:	4013      	ands	r3, r2
 8003a62:	d100      	bne.n	8003a66 <HAL_RCC_OscConfig+0x31e>
 8003a64:	e0b6      	b.n	8003bd4 <HAL_RCC_OscConfig+0x48c>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d000      	beq.n	8003a70 <HAL_RCC_OscConfig+0x328>
 8003a6e:	e0b1      	b.n	8003bd4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e171      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
 8003a74:	40021000 	.word	0x40021000
 8003a78:	fffeffff 	.word	0xfffeffff
 8003a7c:	fffbffff 	.word	0xfffbffff
 8003a80:	ffff80ff 	.word	0xffff80ff
 8003a84:	ffffc7ff 	.word	0xffffc7ff
 8003a88:	00f42400 	.word	0x00f42400
 8003a8c:	20000030 	.word	0x20000030
 8003a90:	20000034 	.word	0x20000034
 8003a94:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a98:	4bb1      	ldr	r3, [pc, #708]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a9c:	2380      	movs	r3, #128	; 0x80
 8003a9e:	055b      	lsls	r3, r3, #21
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x360>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x362>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d011      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003aae:	4bac      	ldr	r3, [pc, #688]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003ab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ab2:	4bab      	ldr	r3, [pc, #684]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003ab4:	2180      	movs	r1, #128	; 0x80
 8003ab6:	0549      	lsls	r1, r1, #21
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	63da      	str	r2, [r3, #60]	; 0x3c
 8003abc:	4ba8      	ldr	r3, [pc, #672]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac0:	2380      	movs	r3, #128	; 0x80
 8003ac2:	055b      	lsls	r3, r3, #21
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003aca:	231f      	movs	r3, #31
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	2201      	movs	r2, #1
 8003ad0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad2:	4ba4      	ldr	r3, [pc, #656]	; (8003d64 <HAL_RCC_OscConfig+0x61c>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	4013      	ands	r3, r2
 8003adc:	d11a      	bne.n	8003b14 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ade:	4ba1      	ldr	r3, [pc, #644]	; (8003d64 <HAL_RCC_OscConfig+0x61c>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	4ba0      	ldr	r3, [pc, #640]	; (8003d64 <HAL_RCC_OscConfig+0x61c>)
 8003ae4:	2180      	movs	r1, #128	; 0x80
 8003ae6:	0049      	lsls	r1, r1, #1
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003aec:	f7fe f85c 	bl	8001ba8 <HAL_GetTick>
 8003af0:	0003      	movs	r3, r0
 8003af2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af6:	f7fe f857 	bl	8001ba8 <HAL_GetTick>
 8003afa:	0002      	movs	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e127      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b08:	4b96      	ldr	r3, [pc, #600]	; (8003d64 <HAL_RCC_OscConfig+0x61c>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4013      	ands	r3, r2
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCC_OscConfig+0x3e2>
 8003b1c:	4b90      	ldr	r3, [pc, #576]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003b1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b20:	4b8f      	ldr	r3, [pc, #572]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003b22:	2101      	movs	r1, #1
 8003b24:	430a      	orrs	r2, r1
 8003b26:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b28:	e01c      	b.n	8003b64 <HAL_RCC_OscConfig+0x41c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x404>
 8003b32:	4b8b      	ldr	r3, [pc, #556]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003b34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b36:	4b8a      	ldr	r3, [pc, #552]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003b38:	2104      	movs	r1, #4
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b3e:	4b88      	ldr	r3, [pc, #544]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003b40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b42:	4b87      	ldr	r3, [pc, #540]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003b44:	2101      	movs	r1, #1
 8003b46:	430a      	orrs	r2, r1
 8003b48:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCC_OscConfig+0x41c>
 8003b4c:	4b84      	ldr	r3, [pc, #528]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003b4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b50:	4b83      	ldr	r3, [pc, #524]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003b52:	2101      	movs	r1, #1
 8003b54:	438a      	bics	r2, r1
 8003b56:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b58:	4b81      	ldr	r3, [pc, #516]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003b5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b5c:	4b80      	ldr	r3, [pc, #512]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003b5e:	2104      	movs	r1, #4
 8003b60:	438a      	bics	r2, r1
 8003b62:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d014      	beq.n	8003b96 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fe f81c 	bl	8001ba8 <HAL_GetTick>
 8003b70:	0003      	movs	r3, r0
 8003b72:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b74:	e009      	b.n	8003b8a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fe f817 	bl	8001ba8 <HAL_GetTick>
 8003b7a:	0002      	movs	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	4a79      	ldr	r2, [pc, #484]	; (8003d68 <HAL_RCC_OscConfig+0x620>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e0e6      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8a:	4b75      	ldr	r3, [pc, #468]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8e:	2202      	movs	r2, #2
 8003b90:	4013      	ands	r3, r2
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x42e>
 8003b94:	e013      	b.n	8003bbe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b96:	f7fe f807 	bl	8001ba8 <HAL_GetTick>
 8003b9a:	0003      	movs	r3, r0
 8003b9c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b9e:	e009      	b.n	8003bb4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba0:	f7fe f802 	bl	8001ba8 <HAL_GetTick>
 8003ba4:	0002      	movs	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	4a6f      	ldr	r2, [pc, #444]	; (8003d68 <HAL_RCC_OscConfig+0x620>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e0d1      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bb4:	4b6a      	ldr	r3, [pc, #424]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb8:	2202      	movs	r2, #2
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003bbe:	231f      	movs	r3, #31
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003bc8:	4b65      	ldr	r3, [pc, #404]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003bca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bcc:	4b64      	ldr	r3, [pc, #400]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003bce:	4967      	ldr	r1, [pc, #412]	; (8003d6c <HAL_RCC_OscConfig+0x624>)
 8003bd0:	400a      	ands	r2, r1
 8003bd2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d100      	bne.n	8003bde <HAL_RCC_OscConfig+0x496>
 8003bdc:	e0bb      	b.n	8003d56 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bde:	4b60      	ldr	r3, [pc, #384]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2238      	movs	r2, #56	; 0x38
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b10      	cmp	r3, #16
 8003be8:	d100      	bne.n	8003bec <HAL_RCC_OscConfig+0x4a4>
 8003bea:	e07b      	b.n	8003ce4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d156      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf4:	4b5a      	ldr	r3, [pc, #360]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	4b59      	ldr	r3, [pc, #356]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003bfa:	495d      	ldr	r1, [pc, #372]	; (8003d70 <HAL_RCC_OscConfig+0x628>)
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fd ffd2 	bl	8001ba8 <HAL_GetTick>
 8003c04:	0003      	movs	r3, r0
 8003c06:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0a:	f7fd ffcd 	bl	8001ba8 <HAL_GetTick>
 8003c0e:	0002      	movs	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e09d      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c1c:	4b50      	ldr	r3, [pc, #320]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2380      	movs	r3, #128	; 0x80
 8003c22:	049b      	lsls	r3, r3, #18
 8003c24:	4013      	ands	r3, r2
 8003c26:	d1f0      	bne.n	8003c0a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c28:	4b4d      	ldr	r3, [pc, #308]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4a51      	ldr	r2, [pc, #324]	; (8003d74 <HAL_RCC_OscConfig+0x62c>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	0019      	movs	r1, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1a      	ldr	r2, [r3, #32]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	021b      	lsls	r3, r3, #8
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c54:	431a      	orrs	r2, r3
 8003c56:	4b42      	ldr	r3, [pc, #264]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c5c:	4b40      	ldr	r3, [pc, #256]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4b3f      	ldr	r3, [pc, #252]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003c62:	2180      	movs	r1, #128	; 0x80
 8003c64:	0449      	lsls	r1, r1, #17
 8003c66:	430a      	orrs	r2, r1
 8003c68:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003c6a:	4b3d      	ldr	r3, [pc, #244]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	4b3c      	ldr	r3, [pc, #240]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003c70:	2180      	movs	r1, #128	; 0x80
 8003c72:	0549      	lsls	r1, r1, #21
 8003c74:	430a      	orrs	r2, r1
 8003c76:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fd ff96 	bl	8001ba8 <HAL_GetTick>
 8003c7c:	0003      	movs	r3, r0
 8003c7e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c82:	f7fd ff91 	bl	8001ba8 <HAL_GetTick>
 8003c86:	0002      	movs	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e061      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c94:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	2380      	movs	r3, #128	; 0x80
 8003c9a:	049b      	lsls	r3, r3, #18
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x53a>
 8003ca0:	e059      	b.n	8003d56 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca2:	4b2f      	ldr	r3, [pc, #188]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4b2e      	ldr	r3, [pc, #184]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003ca8:	4931      	ldr	r1, [pc, #196]	; (8003d70 <HAL_RCC_OscConfig+0x628>)
 8003caa:	400a      	ands	r2, r1
 8003cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cae:	f7fd ff7b 	bl	8001ba8 <HAL_GetTick>
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb8:	f7fd ff76 	bl	8001ba8 <HAL_GetTick>
 8003cbc:	0002      	movs	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e046      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cca:	4b25      	ldr	r3, [pc, #148]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	2380      	movs	r3, #128	; 0x80
 8003cd0:	049b      	lsls	r3, r3, #18
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003cd6:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	4b21      	ldr	r3, [pc, #132]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003cdc:	4926      	ldr	r1, [pc, #152]	; (8003d78 <HAL_RCC_OscConfig+0x630>)
 8003cde:	400a      	ands	r2, r1
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	e038      	b.n	8003d56 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e033      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <HAL_RCC_OscConfig+0x618>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d126      	bne.n	8003d52 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2270      	movs	r2, #112	; 0x70
 8003d08:	401a      	ands	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d11f      	bne.n	8003d52 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	23fe      	movs	r3, #254	; 0xfe
 8003d16:	01db      	lsls	r3, r3, #7
 8003d18:	401a      	ands	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d116      	bne.n	8003d52 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	23f8      	movs	r3, #248	; 0xf8
 8003d28:	039b      	lsls	r3, r3, #14
 8003d2a:	401a      	ands	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d10e      	bne.n	8003d52 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	23e0      	movs	r3, #224	; 0xe0
 8003d38:	051b      	lsls	r3, r3, #20
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d106      	bne.n	8003d52 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	0f5b      	lsrs	r3, r3, #29
 8003d48:	075a      	lsls	r2, r3, #29
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d001      	beq.n	8003d56 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b008      	add	sp, #32
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40007000 	.word	0x40007000
 8003d68:	00001388 	.word	0x00001388
 8003d6c:	efffffff 	.word	0xefffffff
 8003d70:	feffffff 	.word	0xfeffffff
 8003d74:	11c1808c 	.word	0x11c1808c
 8003d78:	eefefffc 	.word	0xeefefffc

08003d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0e9      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d90:	4b76      	ldr	r3, [pc, #472]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2207      	movs	r2, #7
 8003d96:	4013      	ands	r3, r2
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d91e      	bls.n	8003ddc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9e:	4b73      	ldr	r3, [pc, #460]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2207      	movs	r2, #7
 8003da4:	4393      	bics	r3, r2
 8003da6:	0019      	movs	r1, r3
 8003da8:	4b70      	ldr	r3, [pc, #448]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003db0:	f7fd fefa 	bl	8001ba8 <HAL_GetTick>
 8003db4:	0003      	movs	r3, r0
 8003db6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003db8:	e009      	b.n	8003dce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dba:	f7fd fef5 	bl	8001ba8 <HAL_GetTick>
 8003dbe:	0002      	movs	r2, r0
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	4a6a      	ldr	r2, [pc, #424]	; (8003f70 <HAL_RCC_ClockConfig+0x1f4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e0ca      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003dce:	4b67      	ldr	r3, [pc, #412]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2207      	movs	r2, #7
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d1ee      	bne.n	8003dba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2202      	movs	r2, #2
 8003de2:	4013      	ands	r3, r2
 8003de4:	d015      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2204      	movs	r2, #4
 8003dec:	4013      	ands	r3, r2
 8003dee:	d006      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003df0:	4b60      	ldr	r3, [pc, #384]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	4b5f      	ldr	r3, [pc, #380]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003df6:	21e0      	movs	r1, #224	; 0xe0
 8003df8:	01c9      	lsls	r1, r1, #7
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dfe:	4b5d      	ldr	r3, [pc, #372]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	4a5d      	ldr	r2, [pc, #372]	; (8003f78 <HAL_RCC_ClockConfig+0x1fc>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	0019      	movs	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2201      	movs	r2, #1
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d057      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e24:	4b53      	ldr	r3, [pc, #332]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	029b      	lsls	r3, r3, #10
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d12b      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e097      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d107      	bne.n	8003e4c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e3c:	4b4d      	ldr	r3, [pc, #308]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	049b      	lsls	r3, r3, #18
 8003e44:	4013      	ands	r3, r2
 8003e46:	d11f      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e08b      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d107      	bne.n	8003e64 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e54:	4b47      	ldr	r3, [pc, #284]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	2380      	movs	r3, #128	; 0x80
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d113      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e07f      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d106      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e6c:	4b41      	ldr	r3, [pc, #260]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e70:	2202      	movs	r2, #2
 8003e72:	4013      	ands	r3, r2
 8003e74:	d108      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e074      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e7a:	4b3e      	ldr	r3, [pc, #248]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7e:	2202      	movs	r2, #2
 8003e80:	4013      	ands	r3, r2
 8003e82:	d101      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e06d      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e88:	4b3a      	ldr	r3, [pc, #232]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2207      	movs	r2, #7
 8003e8e:	4393      	bics	r3, r2
 8003e90:	0019      	movs	r1, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9c:	f7fd fe84 	bl	8001ba8 <HAL_GetTick>
 8003ea0:	0003      	movs	r3, r0
 8003ea2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea4:	e009      	b.n	8003eba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea6:	f7fd fe7f 	bl	8001ba8 <HAL_GetTick>
 8003eaa:	0002      	movs	r2, r0
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	4a2f      	ldr	r2, [pc, #188]	; (8003f70 <HAL_RCC_ClockConfig+0x1f4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e054      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eba:	4b2e      	ldr	r3, [pc, #184]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2238      	movs	r2, #56	; 0x38
 8003ec0:	401a      	ands	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1ec      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ecc:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2207      	movs	r2, #7
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d21e      	bcs.n	8003f18 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2207      	movs	r2, #7
 8003ee0:	4393      	bics	r3, r2
 8003ee2:	0019      	movs	r1, r3
 8003ee4:	4b21      	ldr	r3, [pc, #132]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003eec:	f7fd fe5c 	bl	8001ba8 <HAL_GetTick>
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ef4:	e009      	b.n	8003f0a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef6:	f7fd fe57 	bl	8001ba8 <HAL_GetTick>
 8003efa:	0002      	movs	r2, r0
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	4a1b      	ldr	r2, [pc, #108]	; (8003f70 <HAL_RCC_ClockConfig+0x1f4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e02c      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f0a:	4b18      	ldr	r3, [pc, #96]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2207      	movs	r2, #7
 8003f10:	4013      	ands	r3, r2
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d1ee      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d009      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003f22:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <HAL_RCC_ClockConfig+0x200>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003f32:	430a      	orrs	r2, r1
 8003f34:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003f36:	f000 f829 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8003f3a:	0001      	movs	r1, r0
 8003f3c:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	0a1b      	lsrs	r3, r3, #8
 8003f42:	220f      	movs	r2, #15
 8003f44:	401a      	ands	r2, r3
 8003f46:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <HAL_RCC_ClockConfig+0x204>)
 8003f48:	0092      	lsls	r2, r2, #2
 8003f4a:	58d3      	ldr	r3, [r2, r3]
 8003f4c:	221f      	movs	r2, #31
 8003f4e:	4013      	ands	r3, r2
 8003f50:	000a      	movs	r2, r1
 8003f52:	40da      	lsrs	r2, r3
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <HAL_RCC_ClockConfig+0x208>)
 8003f56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCC_ClockConfig+0x20c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f7fd fdc7 	bl	8001af0 <HAL_InitTick>
 8003f62:	0003      	movs	r3, r0
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b004      	add	sp, #16
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40022000 	.word	0x40022000
 8003f70:	00001388 	.word	0x00001388
 8003f74:	40021000 	.word	0x40021000
 8003f78:	fffff0ff 	.word	0xfffff0ff
 8003f7c:	ffff8fff 	.word	0xffff8fff
 8003f80:	080074d0 	.word	0x080074d0
 8003f84:	20000030 	.word	0x20000030
 8003f88:	20000034 	.word	0x20000034

08003f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f92:	4b3c      	ldr	r3, [pc, #240]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2238      	movs	r2, #56	; 0x38
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d10f      	bne.n	8003fbc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003f9c:	4b39      	ldr	r3, [pc, #228]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	0adb      	lsrs	r3, r3, #11
 8003fa2:	2207      	movs	r2, #7
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	0013      	movs	r3, r2
 8003fac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003fae:	6839      	ldr	r1, [r7, #0]
 8003fb0:	4835      	ldr	r0, [pc, #212]	; (8004088 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003fb2:	f7fc f8b1 	bl	8000118 <__udivsi3>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	e05d      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fbc:	4b31      	ldr	r3, [pc, #196]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2238      	movs	r2, #56	; 0x38
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d102      	bne.n	8003fce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fc8:	4b30      	ldr	r3, [pc, #192]	; (800408c <HAL_RCC_GetSysClockFreq+0x100>)
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	e054      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fce:	4b2d      	ldr	r3, [pc, #180]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2238      	movs	r2, #56	; 0x38
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b10      	cmp	r3, #16
 8003fd8:	d138      	bne.n	800404c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003fda:	4b2a      	ldr	r3, [pc, #168]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	2203      	movs	r2, #3
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fe4:	4b27      	ldr	r3, [pc, #156]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	2207      	movs	r2, #7
 8003fec:	4013      	ands	r3, r2
 8003fee:	3301      	adds	r3, #1
 8003ff0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d10d      	bne.n	8004014 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	4824      	ldr	r0, [pc, #144]	; (800408c <HAL_RCC_GetSysClockFreq+0x100>)
 8003ffc:	f7fc f88c 	bl	8000118 <__udivsi3>
 8004000:	0003      	movs	r3, r0
 8004002:	0019      	movs	r1, r3
 8004004:	4b1f      	ldr	r3, [pc, #124]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	0a1b      	lsrs	r3, r3, #8
 800400a:	227f      	movs	r2, #127	; 0x7f
 800400c:	4013      	ands	r3, r2
 800400e:	434b      	muls	r3, r1
 8004010:	617b      	str	r3, [r7, #20]
        break;
 8004012:	e00d      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	481c      	ldr	r0, [pc, #112]	; (8004088 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004018:	f7fc f87e 	bl	8000118 <__udivsi3>
 800401c:	0003      	movs	r3, r0
 800401e:	0019      	movs	r1, r3
 8004020:	4b18      	ldr	r3, [pc, #96]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	0a1b      	lsrs	r3, r3, #8
 8004026:	227f      	movs	r2, #127	; 0x7f
 8004028:	4013      	ands	r3, r2
 800402a:	434b      	muls	r3, r1
 800402c:	617b      	str	r3, [r7, #20]
        break;
 800402e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004030:	4b14      	ldr	r3, [pc, #80]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	0f5b      	lsrs	r3, r3, #29
 8004036:	2207      	movs	r2, #7
 8004038:	4013      	ands	r3, r2
 800403a:	3301      	adds	r3, #1
 800403c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	6978      	ldr	r0, [r7, #20]
 8004042:	f7fc f869 	bl	8000118 <__udivsi3>
 8004046:	0003      	movs	r3, r0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	e015      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800404c:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2238      	movs	r2, #56	; 0x38
 8004052:	4013      	ands	r3, r2
 8004054:	2b20      	cmp	r3, #32
 8004056:	d103      	bne.n	8004060 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004058:	2380      	movs	r3, #128	; 0x80
 800405a:	021b      	lsls	r3, r3, #8
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	e00b      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004060:	4b08      	ldr	r3, [pc, #32]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2238      	movs	r2, #56	; 0x38
 8004066:	4013      	ands	r3, r2
 8004068:	2b18      	cmp	r3, #24
 800406a:	d103      	bne.n	8004074 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800406c:	23fa      	movs	r3, #250	; 0xfa
 800406e:	01db      	lsls	r3, r3, #7
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	e001      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004078:	693b      	ldr	r3, [r7, #16]
}
 800407a:	0018      	movs	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	b006      	add	sp, #24
 8004080:	bd80      	pop	{r7, pc}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	40021000 	.word	0x40021000
 8004088:	00f42400 	.word	0x00f42400
 800408c:	007a1200 	.word	0x007a1200

08004090 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004094:	4b02      	ldr	r3, [pc, #8]	; (80040a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	0018      	movs	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	20000030 	.word	0x20000030

080040a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a4:	b5b0      	push	{r4, r5, r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80040a8:	f7ff fff2 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040ac:	0004      	movs	r4, r0
 80040ae:	f7ff fb3f 	bl	8003730 <LL_RCC_GetAPB1Prescaler>
 80040b2:	0003      	movs	r3, r0
 80040b4:	0b1a      	lsrs	r2, r3, #12
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80040b8:	0092      	lsls	r2, r2, #2
 80040ba:	58d3      	ldr	r3, [r2, r3]
 80040bc:	221f      	movs	r2, #31
 80040be:	4013      	ands	r3, r2
 80040c0:	40dc      	lsrs	r4, r3
 80040c2:	0023      	movs	r3, r4
}
 80040c4:	0018      	movs	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bdb0      	pop	{r4, r5, r7, pc}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	08007510 	.word	0x08007510

080040d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80040d8:	2313      	movs	r3, #19
 80040da:	18fb      	adds	r3, r7, r3
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040e0:	2312      	movs	r3, #18
 80040e2:	18fb      	adds	r3, r7, r3
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	2380      	movs	r3, #128	; 0x80
 80040ee:	029b      	lsls	r3, r3, #10
 80040f0:	4013      	ands	r3, r2
 80040f2:	d100      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80040f4:	e0a3      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f6:	2011      	movs	r0, #17
 80040f8:	183b      	adds	r3, r7, r0
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040fe:	4ba5      	ldr	r3, [pc, #660]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004100:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004102:	2380      	movs	r3, #128	; 0x80
 8004104:	055b      	lsls	r3, r3, #21
 8004106:	4013      	ands	r3, r2
 8004108:	d110      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800410a:	4ba2      	ldr	r3, [pc, #648]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800410c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800410e:	4ba1      	ldr	r3, [pc, #644]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004110:	2180      	movs	r1, #128	; 0x80
 8004112:	0549      	lsls	r1, r1, #21
 8004114:	430a      	orrs	r2, r1
 8004116:	63da      	str	r2, [r3, #60]	; 0x3c
 8004118:	4b9e      	ldr	r3, [pc, #632]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800411a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800411c:	2380      	movs	r3, #128	; 0x80
 800411e:	055b      	lsls	r3, r3, #21
 8004120:	4013      	ands	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004126:	183b      	adds	r3, r7, r0
 8004128:	2201      	movs	r2, #1
 800412a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800412c:	4b9a      	ldr	r3, [pc, #616]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b99      	ldr	r3, [pc, #612]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004132:	2180      	movs	r1, #128	; 0x80
 8004134:	0049      	lsls	r1, r1, #1
 8004136:	430a      	orrs	r2, r1
 8004138:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800413a:	f7fd fd35 	bl	8001ba8 <HAL_GetTick>
 800413e:	0003      	movs	r3, r0
 8004140:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004142:	e00b      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004144:	f7fd fd30 	bl	8001ba8 <HAL_GetTick>
 8004148:	0002      	movs	r2, r0
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d904      	bls.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004152:	2313      	movs	r3, #19
 8004154:	18fb      	adds	r3, r7, r3
 8004156:	2203      	movs	r2, #3
 8004158:	701a      	strb	r2, [r3, #0]
        break;
 800415a:	e005      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800415c:	4b8e      	ldr	r3, [pc, #568]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	2380      	movs	r3, #128	; 0x80
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	4013      	ands	r3, r2
 8004166:	d0ed      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004168:	2313      	movs	r3, #19
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d154      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004172:	4b88      	ldr	r3, [pc, #544]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004174:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004176:	23c0      	movs	r3, #192	; 0xc0
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4013      	ands	r3, r2
 800417c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d019      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	429a      	cmp	r2, r3
 800418c:	d014      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800418e:	4b81      	ldr	r3, [pc, #516]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004192:	4a82      	ldr	r2, [pc, #520]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004194:	4013      	ands	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004198:	4b7e      	ldr	r3, [pc, #504]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800419a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800419c:	4b7d      	ldr	r3, [pc, #500]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800419e:	2180      	movs	r1, #128	; 0x80
 80041a0:	0249      	lsls	r1, r1, #9
 80041a2:	430a      	orrs	r2, r1
 80041a4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041a6:	4b7b      	ldr	r3, [pc, #492]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041aa:	4b7a      	ldr	r3, [pc, #488]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041ac:	497c      	ldr	r1, [pc, #496]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80041ae:	400a      	ands	r2, r1
 80041b0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041b2:	4b78      	ldr	r3, [pc, #480]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2201      	movs	r2, #1
 80041bc:	4013      	ands	r3, r2
 80041be:	d016      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7fd fcf2 	bl	8001ba8 <HAL_GetTick>
 80041c4:	0003      	movs	r3, r0
 80041c6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041c8:	e00c      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ca:	f7fd fced 	bl	8001ba8 <HAL_GetTick>
 80041ce:	0002      	movs	r2, r0
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	4a73      	ldr	r2, [pc, #460]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d904      	bls.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80041da:	2313      	movs	r3, #19
 80041dc:	18fb      	adds	r3, r7, r3
 80041de:	2203      	movs	r2, #3
 80041e0:	701a      	strb	r2, [r3, #0]
            break;
 80041e2:	e004      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e4:	4b6b      	ldr	r3, [pc, #428]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e8:	2202      	movs	r2, #2
 80041ea:	4013      	ands	r3, r2
 80041ec:	d0ed      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80041ee:	2313      	movs	r3, #19
 80041f0:	18fb      	adds	r3, r7, r3
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041f8:	4b66      	ldr	r3, [pc, #408]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fc:	4a67      	ldr	r2, [pc, #412]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80041fe:	4013      	ands	r3, r2
 8004200:	0019      	movs	r1, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004206:	4b63      	ldr	r3, [pc, #396]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004208:	430a      	orrs	r2, r1
 800420a:	65da      	str	r2, [r3, #92]	; 0x5c
 800420c:	e00c      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800420e:	2312      	movs	r3, #18
 8004210:	18fb      	adds	r3, r7, r3
 8004212:	2213      	movs	r2, #19
 8004214:	18ba      	adds	r2, r7, r2
 8004216:	7812      	ldrb	r2, [r2, #0]
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	e005      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421c:	2312      	movs	r3, #18
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	2213      	movs	r2, #19
 8004222:	18ba      	adds	r2, r7, r2
 8004224:	7812      	ldrb	r2, [r2, #0]
 8004226:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004228:	2311      	movs	r3, #17
 800422a:	18fb      	adds	r3, r7, r3
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d105      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004232:	4b58      	ldr	r3, [pc, #352]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004234:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004236:	4b57      	ldr	r3, [pc, #348]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004238:	495b      	ldr	r1, [pc, #364]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800423a:	400a      	ands	r2, r1
 800423c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2201      	movs	r2, #1
 8004244:	4013      	ands	r3, r2
 8004246:	d009      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004248:	4b52      	ldr	r3, [pc, #328]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800424a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424c:	2203      	movs	r2, #3
 800424e:	4393      	bics	r3, r2
 8004250:	0019      	movs	r1, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	4b4f      	ldr	r3, [pc, #316]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004258:	430a      	orrs	r2, r1
 800425a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2210      	movs	r2, #16
 8004262:	4013      	ands	r3, r2
 8004264:	d009      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004266:	4b4b      	ldr	r3, [pc, #300]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	4a50      	ldr	r2, [pc, #320]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800426c:	4013      	ands	r3, r2
 800426e:	0019      	movs	r1, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	4b47      	ldr	r3, [pc, #284]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004276:	430a      	orrs	r2, r1
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	2380      	movs	r3, #128	; 0x80
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4013      	ands	r3, r2
 8004284:	d009      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004286:	4b43      	ldr	r3, [pc, #268]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	4a49      	ldr	r2, [pc, #292]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800428c:	4013      	ands	r3, r2
 800428e:	0019      	movs	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	4b3f      	ldr	r3, [pc, #252]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004296:	430a      	orrs	r2, r1
 8004298:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	2380      	movs	r3, #128	; 0x80
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	4013      	ands	r3, r2
 80042a4:	d009      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042a6:	4b3b      	ldr	r3, [pc, #236]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042aa:	4a42      	ldr	r2, [pc, #264]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	0019      	movs	r1, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699a      	ldr	r2, [r3, #24]
 80042b4:	4b37      	ldr	r3, [pc, #220]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042b6:	430a      	orrs	r2, r1
 80042b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2220      	movs	r2, #32
 80042c0:	4013      	ands	r3, r2
 80042c2:	d009      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042c4:	4b33      	ldr	r3, [pc, #204]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c8:	4a3b      	ldr	r2, [pc, #236]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	0019      	movs	r1, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	4b30      	ldr	r3, [pc, #192]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042d4:	430a      	orrs	r2, r1
 80042d6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	2380      	movs	r3, #128	; 0x80
 80042de:	01db      	lsls	r3, r3, #7
 80042e0:	4013      	ands	r3, r2
 80042e2:	d015      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042e4:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	0899      	lsrs	r1, r3, #2
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69da      	ldr	r2, [r3, #28]
 80042f0:	4b28      	ldr	r3, [pc, #160]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042f2:	430a      	orrs	r2, r1
 80042f4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69da      	ldr	r2, [r3, #28]
 80042fa:	2380      	movs	r3, #128	; 0x80
 80042fc:	05db      	lsls	r3, r3, #23
 80042fe:	429a      	cmp	r2, r3
 8004300:	d106      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004302:	4b24      	ldr	r3, [pc, #144]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	4b23      	ldr	r3, [pc, #140]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004308:	2180      	movs	r1, #128	; 0x80
 800430a:	0249      	lsls	r1, r1, #9
 800430c:	430a      	orrs	r2, r1
 800430e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	039b      	lsls	r3, r3, #14
 8004318:	4013      	ands	r3, r2
 800431a:	d016      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800431c:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800431e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004320:	4a26      	ldr	r2, [pc, #152]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004322:	4013      	ands	r3, r2
 8004324:	0019      	movs	r1, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1a      	ldr	r2, [r3, #32]
 800432a:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800432c:	430a      	orrs	r2, r1
 800432e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1a      	ldr	r2, [r3, #32]
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	03db      	lsls	r3, r3, #15
 8004338:	429a      	cmp	r2, r3
 800433a:	d106      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800433c:	4b15      	ldr	r3, [pc, #84]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	4b14      	ldr	r3, [pc, #80]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004342:	2180      	movs	r1, #128	; 0x80
 8004344:	0449      	lsls	r1, r1, #17
 8004346:	430a      	orrs	r2, r1
 8004348:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	2380      	movs	r3, #128	; 0x80
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	4013      	ands	r3, r2
 8004354:	d016      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004356:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	4a19      	ldr	r2, [pc, #100]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800435c:	4013      	ands	r3, r2
 800435e:	0019      	movs	r1, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004366:	430a      	orrs	r2, r1
 8004368:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	2380      	movs	r3, #128	; 0x80
 8004370:	01db      	lsls	r3, r3, #7
 8004372:	429a      	cmp	r2, r3
 8004374:	d106      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004376:	4b07      	ldr	r3, [pc, #28]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	4b06      	ldr	r3, [pc, #24]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800437c:	2180      	movs	r1, #128	; 0x80
 800437e:	0249      	lsls	r1, r1, #9
 8004380:	430a      	orrs	r2, r1
 8004382:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004384:	2312      	movs	r3, #18
 8004386:	18fb      	adds	r3, r7, r3
 8004388:	781b      	ldrb	r3, [r3, #0]
}
 800438a:	0018      	movs	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	b006      	add	sp, #24
 8004390:	bd80      	pop	{r7, pc}
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	40021000 	.word	0x40021000
 8004398:	40007000 	.word	0x40007000
 800439c:	fffffcff 	.word	0xfffffcff
 80043a0:	fffeffff 	.word	0xfffeffff
 80043a4:	00001388 	.word	0x00001388
 80043a8:	efffffff 	.word	0xefffffff
 80043ac:	fffff3ff 	.word	0xfffff3ff
 80043b0:	fff3ffff 	.word	0xfff3ffff
 80043b4:	ffcfffff 	.word	0xffcfffff
 80043b8:	ffffcfff 	.word	0xffffcfff
 80043bc:	ffbfffff 	.word	0xffbfffff
 80043c0:	ffff3fff 	.word	0xffff3fff

080043c4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043c4:	b5b0      	push	{r4, r5, r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043cc:	230f      	movs	r3, #15
 80043ce:	18fb      	adds	r3, r7, r3
 80043d0:	2201      	movs	r2, #1
 80043d2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d100      	bne.n	80043dc <HAL_RTC_Init+0x18>
 80043da:	e08c      	b.n	80044f6 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2229      	movs	r2, #41	; 0x29
 80043e0:	5c9b      	ldrb	r3, [r3, r2]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10b      	bne.n	8004400 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2228      	movs	r2, #40	; 0x28
 80043ec:	2100      	movs	r1, #0
 80043ee:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2288      	movs	r2, #136	; 0x88
 80043f4:	0212      	lsls	r2, r2, #8
 80043f6:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	0018      	movs	r0, r3
 80043fc:	f7fd f976 	bl	80016ec <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2229      	movs	r2, #41	; 0x29
 8004404:	2102      	movs	r1, #2
 8004406:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	2210      	movs	r2, #16
 8004410:	4013      	ands	r3, r2
 8004412:	2b10      	cmp	r3, #16
 8004414:	d062      	beq.n	80044dc <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	22ca      	movs	r2, #202	; 0xca
 800441c:	625a      	str	r2, [r3, #36]	; 0x24
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2253      	movs	r2, #83	; 0x53
 8004424:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004426:	250f      	movs	r5, #15
 8004428:	197c      	adds	r4, r7, r5
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	0018      	movs	r0, r3
 800442e:	f000 fe80 	bl	8005132 <RTC_EnterInitMode>
 8004432:	0003      	movs	r3, r0
 8004434:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004436:	0028      	movs	r0, r5
 8004438:	183b      	adds	r3, r7, r0
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d12c      	bne.n	800449a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	492e      	ldr	r1, [pc, #184]	; (8004504 <HAL_RTC_Init+0x140>)
 800444c:	400a      	ands	r2, r1
 800444e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6999      	ldr	r1, [r3, #24]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6912      	ldr	r2, [r2, #16]
 8004476:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6919      	ldr	r1, [r3, #16]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	041a      	lsls	r2, r3, #16
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800448c:	183c      	adds	r4, r7, r0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	0018      	movs	r0, r3
 8004492:	f000 fe91 	bl	80051b8 <RTC_ExitInitMode>
 8004496:	0003      	movs	r3, r0
 8004498:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800449a:	230f      	movs	r3, #15
 800449c:	18fb      	adds	r3, r7, r3
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d116      	bne.n	80044d2 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699a      	ldr	r2, [r3, #24]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	00d2      	lsls	r2, r2, #3
 80044b0:	08d2      	lsrs	r2, r2, #3
 80044b2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6999      	ldr	r1, [r3, #24]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	22ff      	movs	r2, #255	; 0xff
 80044d8:	625a      	str	r2, [r3, #36]	; 0x24
 80044da:	e003      	b.n	80044e4 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80044dc:	230f      	movs	r3, #15
 80044de:	18fb      	adds	r3, r7, r3
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80044e4:	230f      	movs	r3, #15
 80044e6:	18fb      	adds	r3, r7, r3
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d103      	bne.n	80044f6 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2229      	movs	r2, #41	; 0x29
 80044f2:	2101      	movs	r1, #1
 80044f4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80044f6:	230f      	movs	r3, #15
 80044f8:	18fb      	adds	r3, r7, r3
 80044fa:	781b      	ldrb	r3, [r3, #0]
}
 80044fc:	0018      	movs	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	b004      	add	sp, #16
 8004502:	bdb0      	pop	{r4, r5, r7, pc}
 8004504:	fb8fffbf 	.word	0xfb8fffbf

08004508 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004508:	b5b0      	push	{r4, r5, r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2228      	movs	r2, #40	; 0x28
 8004518:	5c9b      	ldrb	r3, [r3, r2]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <HAL_RTC_SetTime+0x1a>
 800451e:	2302      	movs	r3, #2
 8004520:	e092      	b.n	8004648 <HAL_RTC_SetTime+0x140>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2228      	movs	r2, #40	; 0x28
 8004526:	2101      	movs	r1, #1
 8004528:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2229      	movs	r2, #41	; 0x29
 800452e:	2102      	movs	r1, #2
 8004530:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	22ca      	movs	r2, #202	; 0xca
 8004538:	625a      	str	r2, [r3, #36]	; 0x24
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2253      	movs	r2, #83	; 0x53
 8004540:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004542:	2513      	movs	r5, #19
 8004544:	197c      	adds	r4, r7, r5
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	0018      	movs	r0, r3
 800454a:	f000 fdf2 	bl	8005132 <RTC_EnterInitMode>
 800454e:	0003      	movs	r3, r0
 8004550:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004552:	197b      	adds	r3, r7, r5
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d162      	bne.n	8004620 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d125      	bne.n	80045ac <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2240      	movs	r2, #64	; 0x40
 8004568:	4013      	ands	r3, r2
 800456a:	d102      	bne.n	8004572 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2200      	movs	r2, #0
 8004570:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	0018      	movs	r0, r3
 8004578:	f000 fe62 	bl	8005240 <RTC_ByteToBcd2>
 800457c:	0003      	movs	r3, r0
 800457e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	785b      	ldrb	r3, [r3, #1]
 8004584:	0018      	movs	r0, r3
 8004586:	f000 fe5b 	bl	8005240 <RTC_ByteToBcd2>
 800458a:	0003      	movs	r3, r0
 800458c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800458e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	789b      	ldrb	r3, [r3, #2]
 8004594:	0018      	movs	r0, r3
 8004596:	f000 fe53 	bl	8005240 <RTC_ByteToBcd2>
 800459a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800459c:	0022      	movs	r2, r4
 800459e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	78db      	ldrb	r3, [r3, #3]
 80045a4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	e017      	b.n	80045dc <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	2240      	movs	r2, #64	; 0x40
 80045b4:	4013      	ands	r3, r2
 80045b6:	d102      	bne.n	80045be <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2200      	movs	r2, #0
 80045bc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	785b      	ldrb	r3, [r3, #1]
 80045c8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045ca:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045d0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	78db      	ldrb	r3, [r3, #3]
 80045d6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	491b      	ldr	r1, [pc, #108]	; (8004650 <HAL_RTC_SetTime+0x148>)
 80045e4:	400a      	ands	r2, r1
 80045e6:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4918      	ldr	r1, [pc, #96]	; (8004654 <HAL_RTC_SetTime+0x14c>)
 80045f4:	400a      	ands	r2, r1
 80045f6:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6999      	ldr	r1, [r3, #24]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	431a      	orrs	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004610:	2313      	movs	r3, #19
 8004612:	18fc      	adds	r4, r7, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	0018      	movs	r0, r3
 8004618:	f000 fdce 	bl	80051b8 <RTC_ExitInitMode>
 800461c:	0003      	movs	r3, r0
 800461e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	22ff      	movs	r2, #255	; 0xff
 8004626:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004628:	2313      	movs	r3, #19
 800462a:	18fb      	adds	r3, r7, r3
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d103      	bne.n	800463a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2229      	movs	r2, #41	; 0x29
 8004636:	2101      	movs	r1, #1
 8004638:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2228      	movs	r2, #40	; 0x28
 800463e:	2100      	movs	r1, #0
 8004640:	5499      	strb	r1, [r3, r2]

  return status;
 8004642:	2313      	movs	r3, #19
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	781b      	ldrb	r3, [r3, #0]
}
 8004648:	0018      	movs	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	b006      	add	sp, #24
 800464e:	bdb0      	pop	{r4, r5, r7, pc}
 8004650:	007f7f7f 	.word	0x007f7f7f
 8004654:	fffbffff 	.word	0xfffbffff

08004658 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	045b      	lsls	r3, r3, #17
 8004676:	0c5a      	lsrs	r2, r3, #17
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a22      	ldr	r2, [pc, #136]	; (800470c <HAL_RTC_GetTime+0xb4>)
 8004684:	4013      	ands	r3, r2
 8004686:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	0c1b      	lsrs	r3, r3, #16
 800468c:	b2db      	uxtb	r3, r3
 800468e:	223f      	movs	r2, #63	; 0x3f
 8004690:	4013      	ands	r3, r2
 8004692:	b2da      	uxtb	r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	b2db      	uxtb	r3, r3
 800469e:	227f      	movs	r2, #127	; 0x7f
 80046a0:	4013      	ands	r3, r2
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	227f      	movs	r2, #127	; 0x7f
 80046ae:	4013      	ands	r3, r2
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	0d9b      	lsrs	r3, r3, #22
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2201      	movs	r2, #1
 80046be:	4013      	ands	r3, r2
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d11a      	bne.n	8004702 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	0018      	movs	r0, r3
 80046d2:	f000 fddd 	bl	8005290 <RTC_Bcd2ToByte>
 80046d6:	0003      	movs	r3, r0
 80046d8:	001a      	movs	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	785b      	ldrb	r3, [r3, #1]
 80046e2:	0018      	movs	r0, r3
 80046e4:	f000 fdd4 	bl	8005290 <RTC_Bcd2ToByte>
 80046e8:	0003      	movs	r3, r0
 80046ea:	001a      	movs	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	789b      	ldrb	r3, [r3, #2]
 80046f4:	0018      	movs	r0, r3
 80046f6:	f000 fdcb 	bl	8005290 <RTC_Bcd2ToByte>
 80046fa:	0003      	movs	r3, r0
 80046fc:	001a      	movs	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	0018      	movs	r0, r3
 8004706:	46bd      	mov	sp, r7
 8004708:	b006      	add	sp, #24
 800470a:	bd80      	pop	{r7, pc}
 800470c:	007f7f7f 	.word	0x007f7f7f

08004710 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004710:	b5b0      	push	{r4, r5, r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2228      	movs	r2, #40	; 0x28
 8004720:	5c9b      	ldrb	r3, [r3, r2]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_RTC_SetDate+0x1a>
 8004726:	2302      	movs	r3, #2
 8004728:	e07e      	b.n	8004828 <HAL_RTC_SetDate+0x118>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2228      	movs	r2, #40	; 0x28
 800472e:	2101      	movs	r1, #1
 8004730:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2229      	movs	r2, #41	; 0x29
 8004736:	2102      	movs	r1, #2
 8004738:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10e      	bne.n	800475e <HAL_RTC_SetDate+0x4e>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	001a      	movs	r2, r3
 8004746:	2310      	movs	r3, #16
 8004748:	4013      	ands	r3, r2
 800474a:	d008      	beq.n	800475e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	785b      	ldrb	r3, [r3, #1]
 8004750:	2210      	movs	r2, #16
 8004752:	4393      	bics	r3, r2
 8004754:	b2db      	uxtb	r3, r3
 8004756:	330a      	adds	r3, #10
 8004758:	b2da      	uxtb	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d11c      	bne.n	800479e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	78db      	ldrb	r3, [r3, #3]
 8004768:	0018      	movs	r0, r3
 800476a:	f000 fd69 	bl	8005240 <RTC_ByteToBcd2>
 800476e:	0003      	movs	r3, r0
 8004770:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	785b      	ldrb	r3, [r3, #1]
 8004776:	0018      	movs	r0, r3
 8004778:	f000 fd62 	bl	8005240 <RTC_ByteToBcd2>
 800477c:	0003      	movs	r3, r0
 800477e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004780:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	789b      	ldrb	r3, [r3, #2]
 8004786:	0018      	movs	r0, r3
 8004788:	f000 fd5a 	bl	8005240 <RTC_ByteToBcd2>
 800478c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800478e:	0022      	movs	r2, r4
 8004790:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	e00e      	b.n	80047bc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	78db      	ldrb	r3, [r3, #3]
 80047a2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	785b      	ldrb	r3, [r3, #1]
 80047a8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80047aa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80047b0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	22ca      	movs	r2, #202	; 0xca
 80047c2:	625a      	str	r2, [r3, #36]	; 0x24
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2253      	movs	r2, #83	; 0x53
 80047ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80047cc:	2513      	movs	r5, #19
 80047ce:	197c      	adds	r4, r7, r5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	0018      	movs	r0, r3
 80047d4:	f000 fcad 	bl	8005132 <RTC_EnterInitMode>
 80047d8:	0003      	movs	r3, r0
 80047da:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80047dc:	0028      	movs	r0, r5
 80047de:	183b      	adds	r3, r7, r0
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10c      	bne.n	8004800 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4910      	ldr	r1, [pc, #64]	; (8004830 <HAL_RTC_SetDate+0x120>)
 80047ee:	400a      	ands	r2, r1
 80047f0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80047f2:	183c      	adds	r4, r7, r0
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	0018      	movs	r0, r3
 80047f8:	f000 fcde 	bl	80051b8 <RTC_ExitInitMode>
 80047fc:	0003      	movs	r3, r0
 80047fe:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	22ff      	movs	r2, #255	; 0xff
 8004806:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004808:	2313      	movs	r3, #19
 800480a:	18fb      	adds	r3, r7, r3
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d103      	bne.n	800481a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2229      	movs	r2, #41	; 0x29
 8004816:	2101      	movs	r1, #1
 8004818:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2228      	movs	r2, #40	; 0x28
 800481e:	2100      	movs	r1, #0
 8004820:	5499      	strb	r1, [r3, r2]

  return status;
 8004822:	2313      	movs	r3, #19
 8004824:	18fb      	adds	r3, r7, r3
 8004826:	781b      	ldrb	r3, [r3, #0]
}
 8004828:	0018      	movs	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	b006      	add	sp, #24
 800482e:	bdb0      	pop	{r4, r5, r7, pc}
 8004830:	00ffff3f 	.word	0x00ffff3f

08004834 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4a21      	ldr	r2, [pc, #132]	; (80048cc <HAL_RTC_GetDate+0x98>)
 8004848:	4013      	ands	r3, r2
 800484a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	0c1b      	lsrs	r3, r3, #16
 8004850:	b2da      	uxtb	r2, r3
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	0a1b      	lsrs	r3, r3, #8
 800485a:	b2db      	uxtb	r3, r3
 800485c:	221f      	movs	r2, #31
 800485e:	4013      	ands	r3, r2
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	223f      	movs	r2, #63	; 0x3f
 800486c:	4013      	ands	r3, r2
 800486e:	b2da      	uxtb	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	0b5b      	lsrs	r3, r3, #13
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2207      	movs	r2, #7
 800487c:	4013      	ands	r3, r2
 800487e:	b2da      	uxtb	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d11a      	bne.n	80048c0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	78db      	ldrb	r3, [r3, #3]
 800488e:	0018      	movs	r0, r3
 8004890:	f000 fcfe 	bl	8005290 <RTC_Bcd2ToByte>
 8004894:	0003      	movs	r3, r0
 8004896:	001a      	movs	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	785b      	ldrb	r3, [r3, #1]
 80048a0:	0018      	movs	r0, r3
 80048a2:	f000 fcf5 	bl	8005290 <RTC_Bcd2ToByte>
 80048a6:	0003      	movs	r3, r0
 80048a8:	001a      	movs	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	789b      	ldrb	r3, [r3, #2]
 80048b2:	0018      	movs	r0, r3
 80048b4:	f000 fcec 	bl	8005290 <RTC_Bcd2ToByte>
 80048b8:	0003      	movs	r3, r0
 80048ba:	001a      	movs	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	0018      	movs	r0, r3
 80048c4:	46bd      	mov	sp, r7
 80048c6:	b006      	add	sp, #24
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	00ffff3f 	.word	0x00ffff3f

080048d0 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80048d0:	b590      	push	{r4, r7, lr}
 80048d2:	b089      	sub	sp, #36	; 0x24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2228      	movs	r2, #40	; 0x28
 80048e0:	5c9b      	ldrb	r3, [r3, r2]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_RTC_SetAlarm+0x1a>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e10c      	b.n	8004b04 <HAL_RTC_SetAlarm+0x234>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2228      	movs	r2, #40	; 0x28
 80048ee:	2101      	movs	r1, #1
 80048f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2229      	movs	r2, #41	; 0x29
 80048f6:	2102      	movs	r1, #2
 80048f8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d136      	bne.n	800496e <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2240      	movs	r2, #64	; 0x40
 8004908:	4013      	ands	r3, r2
 800490a:	d102      	bne.n	8004912 <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2200      	movs	r2, #0
 8004910:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	0018      	movs	r0, r3
 8004918:	f000 fc92 	bl	8005240 <RTC_ByteToBcd2>
 800491c:	0003      	movs	r3, r0
 800491e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	785b      	ldrb	r3, [r3, #1]
 8004924:	0018      	movs	r0, r3
 8004926:	f000 fc8b 	bl	8005240 <RTC_ByteToBcd2>
 800492a:	0003      	movs	r3, r0
 800492c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800492e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	789b      	ldrb	r3, [r3, #2]
 8004934:	0018      	movs	r0, r3
 8004936:	f000 fc83 	bl	8005240 <RTC_ByteToBcd2>
 800493a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800493c:	0022      	movs	r2, r4
 800493e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	78db      	ldrb	r3, [r3, #3]
 8004944:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004946:	431a      	orrs	r2, r3
 8004948:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2220      	movs	r2, #32
 800494e:	5c9b      	ldrb	r3, [r3, r2]
 8004950:	0018      	movs	r0, r3
 8004952:	f000 fc75 	bl	8005240 <RTC_ByteToBcd2>
 8004956:	0003      	movs	r3, r0
 8004958:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800495a:	0022      	movs	r2, r4
 800495c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004962:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004968:	4313      	orrs	r3, r2
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	e022      	b.n	80049b4 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	2240      	movs	r2, #64	; 0x40
 8004976:	4013      	ands	r3, r2
 8004978:	d102      	bne.n	8004980 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2200      	movs	r2, #0
 800497e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	785b      	ldrb	r3, [r3, #1]
 800498a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800498c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004992:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	78db      	ldrb	r3, [r3, #3]
 8004998:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800499a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2120      	movs	r1, #32
 80049a0:	5c5b      	ldrb	r3, [r3, r1]
 80049a2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80049a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80049aa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049b0:	4313      	orrs	r3, r2
 80049b2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	4313      	orrs	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	22ca      	movs	r2, #202	; 0xca
 80049c6:	625a      	str	r2, [r3, #36]	; 0x24
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2253      	movs	r2, #83	; 0x53
 80049ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d4:	2380      	movs	r3, #128	; 0x80
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	429a      	cmp	r2, r3
 80049da:	d143      	bne.n	8004a64 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4949      	ldr	r1, [pc, #292]	; (8004b0c <HAL_RTC_SetAlarm+0x23c>)
 80049e8:	400a      	ands	r2, r1
 80049ea:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699a      	ldr	r2, [r3, #24]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4946      	ldr	r1, [pc, #280]	; (8004b10 <HAL_RTC_SetAlarm+0x240>)
 80049f8:	400a      	ands	r2, r1
 80049fa:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 80049fc:	f7fd f8d4 	bl	8001ba8 <HAL_GetTick>
 8004a00:	0003      	movs	r3, r0
 8004a02:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004a04:	e016      	b.n	8004a34 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a06:	f7fd f8cf 	bl	8001ba8 <HAL_GetTick>
 8004a0a:	0002      	movs	r2, r0
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	1ad2      	subs	r2, r2, r3
 8004a10:	23fa      	movs	r3, #250	; 0xfa
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d90d      	bls.n	8004a34 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	22ff      	movs	r2, #255	; 0xff
 8004a1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2229      	movs	r2, #41	; 0x29
 8004a24:	2103      	movs	r1, #3
 8004a26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2228      	movs	r2, #40	; 0x28
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e067      	b.n	8004b04 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	d0e2      	beq.n	8004a06 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2180      	movs	r1, #128	; 0x80
 8004a5c:	0049      	lsls	r1, r1, #1
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	619a      	str	r2, [r3, #24]
 8004a62:	e042      	b.n	8004aea <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699a      	ldr	r2, [r3, #24]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4929      	ldr	r1, [pc, #164]	; (8004b14 <HAL_RTC_SetAlarm+0x244>)
 8004a70:	400a      	ands	r2, r1
 8004a72:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4926      	ldr	r1, [pc, #152]	; (8004b18 <HAL_RTC_SetAlarm+0x248>)
 8004a80:	400a      	ands	r2, r1
 8004a82:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004a84:	f7fd f890 	bl	8001ba8 <HAL_GetTick>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004a8c:	e016      	b.n	8004abc <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a8e:	f7fd f88b 	bl	8001ba8 <HAL_GetTick>
 8004a92:	0002      	movs	r2, r0
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	1ad2      	subs	r2, r2, r3
 8004a98:	23fa      	movs	r3, #250	; 0xfa
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d90d      	bls.n	8004abc <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	22ff      	movs	r2, #255	; 0xff
 8004aa6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2229      	movs	r2, #41	; 0x29
 8004aac:	2103      	movs	r1, #3
 8004aae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2228      	movs	r2, #40	; 0x28
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e023      	b.n	8004b04 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d0e2      	beq.n	8004a8e <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2180      	movs	r1, #128	; 0x80
 8004ae4:	0089      	lsls	r1, r1, #2
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	22ff      	movs	r2, #255	; 0xff
 8004af0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2229      	movs	r2, #41	; 0x29
 8004af6:	2101      	movs	r1, #1
 8004af8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2228      	movs	r2, #40	; 0x28
 8004afe:	2100      	movs	r1, #0
 8004b00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	0018      	movs	r0, r3
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b009      	add	sp, #36	; 0x24
 8004b0a:	bd90      	pop	{r4, r7, pc}
 8004b0c:	fffffeff 	.word	0xfffffeff
 8004b10:	ffffefff 	.word	0xffffefff
 8004b14:	fffffdff 	.word	0xfffffdff
 8004b18:	ffffdfff 	.word	0xffffdfff

08004b1c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004b1c:	b590      	push	{r4, r7, lr}
 8004b1e:	b089      	sub	sp, #36	; 0x24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2228      	movs	r2, #40	; 0x28
 8004b2c:	5c9b      	ldrb	r3, [r3, r2]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_RTC_SetAlarm_IT+0x1a>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e127      	b.n	8004d86 <HAL_RTC_SetAlarm_IT+0x26a>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2228      	movs	r2, #40	; 0x28
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2229      	movs	r2, #41	; 0x29
 8004b42:	2102      	movs	r1, #2
 8004b44:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d136      	bne.n	8004bba <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	2240      	movs	r2, #64	; 0x40
 8004b54:	4013      	ands	r3, r2
 8004b56:	d102      	bne.n	8004b5e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	0018      	movs	r0, r3
 8004b64:	f000 fb6c 	bl	8005240 <RTC_ByteToBcd2>
 8004b68:	0003      	movs	r3, r0
 8004b6a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	785b      	ldrb	r3, [r3, #1]
 8004b70:	0018      	movs	r0, r3
 8004b72:	f000 fb65 	bl	8005240 <RTC_ByteToBcd2>
 8004b76:	0003      	movs	r3, r0
 8004b78:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004b7a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	789b      	ldrb	r3, [r3, #2]
 8004b80:	0018      	movs	r0, r3
 8004b82:	f000 fb5d 	bl	8005240 <RTC_ByteToBcd2>
 8004b86:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004b88:	0022      	movs	r2, r4
 8004b8a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	78db      	ldrb	r3, [r3, #3]
 8004b90:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004b92:	431a      	orrs	r2, r3
 8004b94:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	5c9b      	ldrb	r3, [r3, r2]
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f000 fb4f 	bl	8005240 <RTC_ByteToBcd2>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ba6:	0022      	movs	r2, r4
 8004ba8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004bae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	61fb      	str	r3, [r7, #28]
 8004bb8:	e022      	b.n	8004c00 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	2240      	movs	r2, #64	; 0x40
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d102      	bne.n	8004bcc <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	785b      	ldrb	r3, [r3, #1]
 8004bd6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004bd8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004bde:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	78db      	ldrb	r3, [r3, #3]
 8004be4:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004be6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2120      	movs	r1, #32
 8004bec:	5c5b      	ldrb	r3, [r3, r1]
 8004bee:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004bf0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004bf6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	22ca      	movs	r2, #202	; 0xca
 8004c12:	625a      	str	r2, [r3, #36]	; 0x24
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2253      	movs	r2, #83	; 0x53
 8004c1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c20:	2380      	movs	r3, #128	; 0x80
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d14c      	bne.n	8004cc2 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4957      	ldr	r1, [pc, #348]	; (8004d90 <HAL_RTC_SetAlarm_IT+0x274>)
 8004c34:	400a      	ands	r2, r1
 8004c36:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2101      	movs	r1, #1
 8004c44:	430a      	orrs	r2, r1
 8004c46:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8004c48:	f7fc ffae 	bl	8001ba8 <HAL_GetTick>
 8004c4c:	0003      	movs	r3, r0
 8004c4e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004c50:	e016      	b.n	8004c80 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c52:	f7fc ffa9 	bl	8001ba8 <HAL_GetTick>
 8004c56:	0002      	movs	r2, r0
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	1ad2      	subs	r2, r2, r3
 8004c5c:	23fa      	movs	r3, #250	; 0xfa
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d90d      	bls.n	8004c80 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	22ff      	movs	r2, #255	; 0xff
 8004c6a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2229      	movs	r2, #41	; 0x29
 8004c70:	2103      	movs	r1, #3
 8004c72:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2228      	movs	r2, #40	; 0x28
 8004c78:	2100      	movs	r1, #0
 8004c7a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e082      	b.n	8004d86 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d0e2      	beq.n	8004c52 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2180      	movs	r1, #128	; 0x80
 8004ca8:	0049      	lsls	r1, r1, #1
 8004caa:	430a      	orrs	r2, r1
 8004cac:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699a      	ldr	r2, [r3, #24]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2180      	movs	r1, #128	; 0x80
 8004cba:	0149      	lsls	r1, r1, #5
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	619a      	str	r2, [r3, #24]
 8004cc0:	e04b      	b.n	8004d5a <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699a      	ldr	r2, [r3, #24]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4931      	ldr	r1, [pc, #196]	; (8004d94 <HAL_RTC_SetAlarm_IT+0x278>)
 8004cce:	400a      	ands	r2, r1
 8004cd0:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2102      	movs	r1, #2
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8004ce2:	f7fc ff61 	bl	8001ba8 <HAL_GetTick>
 8004ce6:	0003      	movs	r3, r0
 8004ce8:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004cea:	e016      	b.n	8004d1a <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004cec:	f7fc ff5c 	bl	8001ba8 <HAL_GetTick>
 8004cf0:	0002      	movs	r2, r0
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	1ad2      	subs	r2, r2, r3
 8004cf6:	23fa      	movs	r3, #250	; 0xfa
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d90d      	bls.n	8004d1a <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	22ff      	movs	r2, #255	; 0xff
 8004d04:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2229      	movs	r2, #41	; 0x29
 8004d0a:	2103      	movs	r1, #3
 8004d0c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2228      	movs	r2, #40	; 0x28
 8004d12:	2100      	movs	r1, #0
 8004d14:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e035      	b.n	8004d86 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	2202      	movs	r2, #2
 8004d22:	4013      	ands	r3, r2
 8004d24:	d0e2      	beq.n	8004cec <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699a      	ldr	r2, [r3, #24]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2180      	movs	r1, #128	; 0x80
 8004d42:	0089      	lsls	r1, r1, #2
 8004d44:	430a      	orrs	r2, r1
 8004d46:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2180      	movs	r1, #128	; 0x80
 8004d54:	0189      	lsls	r1, r1, #6
 8004d56:	430a      	orrs	r2, r1
 8004d58:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004d5a:	4a0f      	ldr	r2, [pc, #60]	; (8004d98 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004d5c:	2380      	movs	r3, #128	; 0x80
 8004d5e:	58d3      	ldr	r3, [r2, r3]
 8004d60:	490d      	ldr	r1, [pc, #52]	; (8004d98 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004d62:	2280      	movs	r2, #128	; 0x80
 8004d64:	0312      	lsls	r2, r2, #12
 8004d66:	4313      	orrs	r3, r2
 8004d68:	2280      	movs	r2, #128	; 0x80
 8004d6a:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	22ff      	movs	r2, #255	; 0xff
 8004d72:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2229      	movs	r2, #41	; 0x29
 8004d78:	2101      	movs	r1, #1
 8004d7a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2228      	movs	r2, #40	; 0x28
 8004d80:	2100      	movs	r1, #0
 8004d82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	0018      	movs	r0, r3
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b009      	add	sp, #36	; 0x24
 8004d8c:	bd90      	pop	{r4, r7, pc}
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	fffffeff 	.word	0xfffffeff
 8004d94:	fffffdff 	.word	0xfffffdff
 8004d98:	40021800 	.word	0x40021800

08004d9c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2228      	movs	r2, #40	; 0x28
 8004daa:	5c9b      	ldrb	r3, [r3, r2]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_RTC_DeactivateAlarm+0x18>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e086      	b.n	8004ec2 <HAL_RTC_DeactivateAlarm+0x126>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2228      	movs	r2, #40	; 0x28
 8004db8:	2101      	movs	r1, #1
 8004dba:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2229      	movs	r2, #41	; 0x29
 8004dc0:	2102      	movs	r1, #2
 8004dc2:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	22ca      	movs	r2, #202	; 0xca
 8004dca:	625a      	str	r2, [r3, #36]	; 0x24
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2253      	movs	r2, #83	; 0x53
 8004dd2:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	2380      	movs	r3, #128	; 0x80
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d132      	bne.n	8004e44 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	699a      	ldr	r2, [r3, #24]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4938      	ldr	r1, [pc, #224]	; (8004ecc <HAL_RTC_DeactivateAlarm+0x130>)
 8004dea:	400a      	ands	r2, r1
 8004dec:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	699a      	ldr	r2, [r3, #24]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4935      	ldr	r1, [pc, #212]	; (8004ed0 <HAL_RTC_DeactivateAlarm+0x134>)
 8004dfa:	400a      	ands	r2, r1
 8004dfc:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004dfe:	f7fc fed3 	bl	8001ba8 <HAL_GetTick>
 8004e02:	0003      	movs	r3, r0
 8004e04:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004e06:	e016      	b.n	8004e36 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if( (HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e08:	f7fc fece 	bl	8001ba8 <HAL_GetTick>
 8004e0c:	0002      	movs	r2, r0
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1ad2      	subs	r2, r2, r3
 8004e12:	23fa      	movs	r3, #250	; 0xfa
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d90d      	bls.n	8004e36 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	22ff      	movs	r2, #255	; 0xff
 8004e20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2229      	movs	r2, #41	; 0x29
 8004e26:	2103      	movs	r1, #3
 8004e28:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2228      	movs	r2, #40	; 0x28
 8004e2e:	2100      	movs	r1, #0
 8004e30:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e045      	b.n	8004ec2 <HAL_RTC_DeactivateAlarm+0x126>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	4013      	ands	r3, r2
 8004e40:	d0e2      	beq.n	8004e08 <HAL_RTC_DeactivateAlarm+0x6c>
 8004e42:	e031      	b.n	8004ea8 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4921      	ldr	r1, [pc, #132]	; (8004ed4 <HAL_RTC_DeactivateAlarm+0x138>)
 8004e50:	400a      	ands	r2, r1
 8004e52:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	491e      	ldr	r1, [pc, #120]	; (8004ed8 <HAL_RTC_DeactivateAlarm+0x13c>)
 8004e60:	400a      	ands	r2, r1
 8004e62:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004e64:	f7fc fea0 	bl	8001ba8 <HAL_GetTick>
 8004e68:	0003      	movs	r3, r0
 8004e6a:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004e6c:	e016      	b.n	8004e9c <HAL_RTC_DeactivateAlarm+0x100>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e6e:	f7fc fe9b 	bl	8001ba8 <HAL_GetTick>
 8004e72:	0002      	movs	r2, r0
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	1ad2      	subs	r2, r2, r3
 8004e78:	23fa      	movs	r3, #250	; 0xfa
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d90d      	bls.n	8004e9c <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	22ff      	movs	r2, #255	; 0xff
 8004e86:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2229      	movs	r2, #41	; 0x29
 8004e8c:	2103      	movs	r1, #3
 8004e8e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2228      	movs	r2, #40	; 0x28
 8004e94:	2100      	movs	r1, #0
 8004e96:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e012      	b.n	8004ec2 <HAL_RTC_DeactivateAlarm+0x126>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d0e2      	beq.n	8004e6e <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	22ff      	movs	r2, #255	; 0xff
 8004eae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2229      	movs	r2, #41	; 0x29
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2228      	movs	r2, #40	; 0x28
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b004      	add	sp, #16
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	fffffeff 	.word	0xfffffeff
 8004ed0:	ffffefff 	.word	0xffffefff
 8004ed4:	fffffdff 	.word	0xfffffdff
 8004ed8:	ffffdfff 	.word	0xffffdfff

08004edc <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	2380      	movs	r3, #128	; 0x80
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d144      	bne.n	8004f7e <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2280      	movs	r2, #128	; 0x80
 8004ef8:	0052      	lsls	r2, r2, #1
 8004efa:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	045b      	lsls	r3, r3, #17
 8004f0c:	0c5b      	lsrs	r3, r3, #17
 8004f0e:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	0c1b      	lsrs	r3, r3, #16
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	223f      	movs	r2, #63	; 0x3f
 8004f18:	4013      	ands	r3, r2
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	0a1b      	lsrs	r3, r3, #8
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	227f      	movs	r2, #127	; 0x7f
 8004f28:	4013      	ands	r3, r2
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	227f      	movs	r2, #127	; 0x7f
 8004f36:	4013      	ands	r3, r2
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	0d9b      	lsrs	r3, r3, #22
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2201      	movs	r2, #1
 8004f46:	4013      	ands	r3, r2
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	0e1b      	lsrs	r3, r3, #24
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	223f      	movs	r2, #63	; 0x3f
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	b2d9      	uxtb	r1, r3
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2220      	movs	r2, #32
 8004f64:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	2380      	movs	r3, #128	; 0x80
 8004f6a:	05db      	lsls	r3, r3, #23
 8004f6c:	401a      	ands	r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	4a3b      	ldr	r2, [pc, #236]	; (8005064 <HAL_RTC_GetAlarm+0x188>)
 8004f76:	401a      	ands	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	615a      	str	r2, [r3, #20]
 8004f7c:	e043      	b.n	8005006 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2280      	movs	r2, #128	; 0x80
 8004f82:	0092      	lsls	r2, r2, #2
 8004f84:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f94:	045b      	lsls	r3, r3, #17
 8004f96:	0c5b      	lsrs	r3, r3, #17
 8004f98:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	0c1b      	lsrs	r3, r3, #16
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	223f      	movs	r2, #63	; 0x3f
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	0a1b      	lsrs	r3, r3, #8
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	227f      	movs	r2, #127	; 0x7f
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	227f      	movs	r2, #127	; 0x7f
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	0d9b      	lsrs	r3, r3, #22
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2201      	movs	r2, #1
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	0e1b      	lsrs	r3, r3, #24
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	223f      	movs	r2, #63	; 0x3f
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	b2d9      	uxtb	r1, r3
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2220      	movs	r2, #32
 8004fee:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	2380      	movs	r3, #128	; 0x80
 8004ff4:	05db      	lsls	r3, r3, #23
 8004ff6:	401a      	ands	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	4a19      	ldr	r2, [pc, #100]	; (8005064 <HAL_RTC_GetAlarm+0x188>)
 8005000:	401a      	ands	r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d125      	bne.n	8005058 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	0018      	movs	r0, r3
 8005012:	f000 f93d 	bl	8005290 <RTC_Bcd2ToByte>
 8005016:	0003      	movs	r3, r0
 8005018:	001a      	movs	r2, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	785b      	ldrb	r3, [r3, #1]
 8005022:	0018      	movs	r0, r3
 8005024:	f000 f934 	bl	8005290 <RTC_Bcd2ToByte>
 8005028:	0003      	movs	r3, r0
 800502a:	001a      	movs	r2, r3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	789b      	ldrb	r3, [r3, #2]
 8005034:	0018      	movs	r0, r3
 8005036:	f000 f92b 	bl	8005290 <RTC_Bcd2ToByte>
 800503a:	0003      	movs	r3, r0
 800503c:	001a      	movs	r2, r3
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2220      	movs	r2, #32
 8005046:	5c9b      	ldrb	r3, [r3, r2]
 8005048:	0018      	movs	r0, r3
 800504a:	f000 f921 	bl	8005290 <RTC_Bcd2ToByte>
 800504e:	0003      	movs	r3, r0
 8005050:	0019      	movs	r1, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2220      	movs	r2, #32
 8005056:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	0018      	movs	r0, r3
 800505c:	46bd      	mov	sp, r7
 800505e:	b006      	add	sp, #24
 8005060:	bd80      	pop	{r7, pc}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	80808080 	.word	0x80808080

08005068 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699a      	ldr	r2, [r3, #24]
 8005076:	2380      	movs	r3, #128	; 0x80
 8005078:	015b      	lsls	r3, r3, #5
 800507a:	4013      	ands	r3, r2
 800507c:	d011      	beq.n	80050a2 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005084:	2201      	movs	r2, #1
 8005086:	4013      	ands	r3, r2
 8005088:	d00b      	beq.n	80050a2 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2101      	movs	r1, #1
 8005096:	430a      	orrs	r2, r1
 8005098:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	0018      	movs	r0, r3
 800509e:	f7fb fed5 	bl	8000e4c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	699a      	ldr	r2, [r3, #24]
 80050a8:	2380      	movs	r3, #128	; 0x80
 80050aa:	019b      	lsls	r3, r3, #6
 80050ac:	4013      	ands	r3, r2
 80050ae:	d011      	beq.n	80050d4 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b6:	2202      	movs	r2, #2
 80050b8:	4013      	ands	r3, r2
 80050ba:	d00b      	beq.n	80050d4 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2102      	movs	r1, #2
 80050c8:	430a      	orrs	r2, r1
 80050ca:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	0018      	movs	r0, r3
 80050d0:	f000 f8fb 	bl	80052ca <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2229      	movs	r2, #41	; 0x29
 80050d8:	2101      	movs	r1, #1
 80050da:	5499      	strb	r1, [r3, r2]
}
 80050dc:	46c0      	nop			; (mov r8, r8)
 80050de:	46bd      	mov	sp, r7
 80050e0:	b002      	add	sp, #8
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	21a0      	movs	r1, #160	; 0xa0
 80050f8:	438a      	bics	r2, r1
 80050fa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80050fc:	f7fc fd54 	bl	8001ba8 <HAL_GetTick>
 8005100:	0003      	movs	r3, r0
 8005102:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005104:	e00a      	b.n	800511c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005106:	f7fc fd4f 	bl	8001ba8 <HAL_GetTick>
 800510a:	0002      	movs	r2, r0
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	1ad2      	subs	r2, r2, r3
 8005110:	23fa      	movs	r3, #250	; 0xfa
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	429a      	cmp	r2, r3
 8005116:	d901      	bls.n	800511c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e006      	b.n	800512a <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	4013      	ands	r3, r2
 8005126:	d0ee      	beq.n	8005106 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	0018      	movs	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	b004      	add	sp, #16
 8005130:	bd80      	pop	{r7, pc}

08005132 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800513a:	230f      	movs	r3, #15
 800513c:	18fb      	adds	r3, r7, r3
 800513e:	2200      	movs	r2, #0
 8005140:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	2240      	movs	r2, #64	; 0x40
 800514a:	4013      	ands	r3, r2
 800514c:	d12c      	bne.n	80051a8 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2180      	movs	r1, #128	; 0x80
 800515a:	430a      	orrs	r2, r1
 800515c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800515e:	f7fc fd23 	bl	8001ba8 <HAL_GetTick>
 8005162:	0003      	movs	r3, r0
 8005164:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005166:	e014      	b.n	8005192 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005168:	f7fc fd1e 	bl	8001ba8 <HAL_GetTick>
 800516c:	0002      	movs	r2, r0
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	1ad2      	subs	r2, r2, r3
 8005172:	200f      	movs	r0, #15
 8005174:	183b      	adds	r3, r7, r0
 8005176:	1839      	adds	r1, r7, r0
 8005178:	7809      	ldrb	r1, [r1, #0]
 800517a:	7019      	strb	r1, [r3, #0]
 800517c:	23fa      	movs	r3, #250	; 0xfa
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	429a      	cmp	r2, r3
 8005182:	d906      	bls.n	8005192 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005184:	183b      	adds	r3, r7, r0
 8005186:	2203      	movs	r2, #3
 8005188:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2229      	movs	r2, #41	; 0x29
 800518e:	2103      	movs	r1, #3
 8005190:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	2240      	movs	r2, #64	; 0x40
 800519a:	4013      	ands	r3, r2
 800519c:	d104      	bne.n	80051a8 <RTC_EnterInitMode+0x76>
 800519e:	230f      	movs	r3, #15
 80051a0:	18fb      	adds	r3, r7, r3
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d1df      	bne.n	8005168 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80051a8:	230f      	movs	r3, #15
 80051aa:	18fb      	adds	r3, r7, r3
 80051ac:	781b      	ldrb	r3, [r3, #0]
}
 80051ae:	0018      	movs	r0, r3
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b004      	add	sp, #16
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80051b8:	b590      	push	{r4, r7, lr}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c0:	240f      	movs	r4, #15
 80051c2:	193b      	adds	r3, r7, r4
 80051c4:	2200      	movs	r2, #0
 80051c6:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80051c8:	4b1c      	ldr	r3, [pc, #112]	; (800523c <RTC_ExitInitMode+0x84>)
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	4b1b      	ldr	r3, [pc, #108]	; (800523c <RTC_ExitInitMode+0x84>)
 80051ce:	2180      	movs	r1, #128	; 0x80
 80051d0:	438a      	bics	r2, r1
 80051d2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80051d4:	4b19      	ldr	r3, [pc, #100]	; (800523c <RTC_ExitInitMode+0x84>)
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	2220      	movs	r2, #32
 80051da:	4013      	ands	r3, r2
 80051dc:	d10d      	bne.n	80051fa <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	0018      	movs	r0, r3
 80051e2:	f7ff ff7f 	bl	80050e4 <HAL_RTC_WaitForSynchro>
 80051e6:	1e03      	subs	r3, r0, #0
 80051e8:	d021      	beq.n	800522e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2229      	movs	r2, #41	; 0x29
 80051ee:	2103      	movs	r1, #3
 80051f0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80051f2:	193b      	adds	r3, r7, r4
 80051f4:	2203      	movs	r2, #3
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	e019      	b.n	800522e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80051fa:	4b10      	ldr	r3, [pc, #64]	; (800523c <RTC_ExitInitMode+0x84>)
 80051fc:	699a      	ldr	r2, [r3, #24]
 80051fe:	4b0f      	ldr	r3, [pc, #60]	; (800523c <RTC_ExitInitMode+0x84>)
 8005200:	2120      	movs	r1, #32
 8005202:	438a      	bics	r2, r1
 8005204:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	0018      	movs	r0, r3
 800520a:	f7ff ff6b 	bl	80050e4 <HAL_RTC_WaitForSynchro>
 800520e:	1e03      	subs	r3, r0, #0
 8005210:	d007      	beq.n	8005222 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2229      	movs	r2, #41	; 0x29
 8005216:	2103      	movs	r1, #3
 8005218:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800521a:	230f      	movs	r3, #15
 800521c:	18fb      	adds	r3, r7, r3
 800521e:	2203      	movs	r2, #3
 8005220:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005222:	4b06      	ldr	r3, [pc, #24]	; (800523c <RTC_ExitInitMode+0x84>)
 8005224:	699a      	ldr	r2, [r3, #24]
 8005226:	4b05      	ldr	r3, [pc, #20]	; (800523c <RTC_ExitInitMode+0x84>)
 8005228:	2120      	movs	r1, #32
 800522a:	430a      	orrs	r2, r1
 800522c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800522e:	230f      	movs	r3, #15
 8005230:	18fb      	adds	r3, r7, r3
 8005232:	781b      	ldrb	r3, [r3, #0]
}
 8005234:	0018      	movs	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	b005      	add	sp, #20
 800523a:	bd90      	pop	{r4, r7, pc}
 800523c:	40002800 	.word	0x40002800

08005240 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	0002      	movs	r2, r0
 8005248:	1dfb      	adds	r3, r7, #7
 800524a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005250:	230b      	movs	r3, #11
 8005252:	18fb      	adds	r3, r7, r3
 8005254:	1dfa      	adds	r2, r7, #7
 8005256:	7812      	ldrb	r2, [r2, #0]
 8005258:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800525a:	e008      	b.n	800526e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3301      	adds	r3, #1
 8005260:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005262:	220b      	movs	r2, #11
 8005264:	18bb      	adds	r3, r7, r2
 8005266:	18ba      	adds	r2, r7, r2
 8005268:	7812      	ldrb	r2, [r2, #0]
 800526a:	3a0a      	subs	r2, #10
 800526c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800526e:	210b      	movs	r1, #11
 8005270:	187b      	adds	r3, r7, r1
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b09      	cmp	r3, #9
 8005276:	d8f1      	bhi.n	800525c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	b2db      	uxtb	r3, r3
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	b2da      	uxtb	r2, r3
 8005280:	187b      	adds	r3, r7, r1
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	4313      	orrs	r3, r2
 8005286:	b2db      	uxtb	r3, r3
}
 8005288:	0018      	movs	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	b004      	add	sp, #16
 800528e:	bd80      	pop	{r7, pc}

08005290 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	0002      	movs	r2, r0
 8005298:	1dfb      	adds	r3, r7, #7
 800529a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800529c:	1dfb      	adds	r3, r7, #7
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	091b      	lsrs	r3, r3, #4
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	001a      	movs	r2, r3
 80052a6:	0013      	movs	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	189b      	adds	r3, r3, r2
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	1dfb      	adds	r3, r7, #7
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	210f      	movs	r1, #15
 80052ba:	400b      	ands	r3, r1
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	18d3      	adds	r3, r2, r3
 80052c0:	b2db      	uxtb	r3, r3
}
 80052c2:	0018      	movs	r0, r3
 80052c4:	46bd      	mov	sp, r7
 80052c6:	b004      	add	sp, #16
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b082      	sub	sp, #8
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	46bd      	mov	sp, r7
 80052d6:	b002      	add	sp, #8
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b082      	sub	sp, #8
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e04a      	b.n	8005382 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	223d      	movs	r2, #61	; 0x3d
 80052f0:	5c9b      	ldrb	r3, [r3, r2]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d107      	bne.n	8005308 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	223c      	movs	r2, #60	; 0x3c
 80052fc:	2100      	movs	r1, #0
 80052fe:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	0018      	movs	r0, r3
 8005304:	f7fc fa38 	bl	8001778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	223d      	movs	r2, #61	; 0x3d
 800530c:	2102      	movs	r1, #2
 800530e:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3304      	adds	r3, #4
 8005318:	0019      	movs	r1, r3
 800531a:	0010      	movs	r0, r2
 800531c:	f000 f882 	bl	8005424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2248      	movs	r2, #72	; 0x48
 8005324:	2101      	movs	r1, #1
 8005326:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	223e      	movs	r2, #62	; 0x3e
 800532c:	2101      	movs	r1, #1
 800532e:	5499      	strb	r1, [r3, r2]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	223f      	movs	r2, #63	; 0x3f
 8005334:	2101      	movs	r1, #1
 8005336:	5499      	strb	r1, [r3, r2]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2240      	movs	r2, #64	; 0x40
 800533c:	2101      	movs	r1, #1
 800533e:	5499      	strb	r1, [r3, r2]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2241      	movs	r2, #65	; 0x41
 8005344:	2101      	movs	r1, #1
 8005346:	5499      	strb	r1, [r3, r2]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2242      	movs	r2, #66	; 0x42
 800534c:	2101      	movs	r1, #1
 800534e:	5499      	strb	r1, [r3, r2]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2243      	movs	r2, #67	; 0x43
 8005354:	2101      	movs	r1, #1
 8005356:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2244      	movs	r2, #68	; 0x44
 800535c:	2101      	movs	r1, #1
 800535e:	5499      	strb	r1, [r3, r2]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2245      	movs	r2, #69	; 0x45
 8005364:	2101      	movs	r1, #1
 8005366:	5499      	strb	r1, [r3, r2]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2246      	movs	r2, #70	; 0x46
 800536c:	2101      	movs	r1, #1
 800536e:	5499      	strb	r1, [r3, r2]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2247      	movs	r2, #71	; 0x47
 8005374:	2101      	movs	r1, #1
 8005376:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	223d      	movs	r2, #61	; 0x3d
 800537c:	2101      	movs	r1, #1
 800537e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	0018      	movs	r0, r3
 8005384:	46bd      	mov	sp, r7
 8005386:	b002      	add	sp, #8
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	223d      	movs	r2, #61	; 0x3d
 8005398:	5c9b      	ldrb	r3, [r3, r2]
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b01      	cmp	r3, #1
 800539e:	d001      	beq.n	80053a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e035      	b.n	8005410 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	223d      	movs	r2, #61	; 0x3d
 80053a8:	2102      	movs	r1, #2
 80053aa:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a19      	ldr	r2, [pc, #100]	; (8005418 <HAL_TIM_Base_Start+0x8c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00a      	beq.n	80053cc <HAL_TIM_Base_Start+0x40>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	2380      	movs	r3, #128	; 0x80
 80053bc:	05db      	lsls	r3, r3, #23
 80053be:	429a      	cmp	r2, r3
 80053c0:	d004      	beq.n	80053cc <HAL_TIM_Base_Start+0x40>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a15      	ldr	r2, [pc, #84]	; (800541c <HAL_TIM_Base_Start+0x90>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d116      	bne.n	80053fa <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	4a13      	ldr	r2, [pc, #76]	; (8005420 <HAL_TIM_Base_Start+0x94>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b06      	cmp	r3, #6
 80053dc:	d016      	beq.n	800540c <HAL_TIM_Base_Start+0x80>
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	2380      	movs	r3, #128	; 0x80
 80053e2:	025b      	lsls	r3, r3, #9
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d011      	beq.n	800540c <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2101      	movs	r1, #1
 80053f4:	430a      	orrs	r2, r1
 80053f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f8:	e008      	b.n	800540c <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2101      	movs	r1, #1
 8005406:	430a      	orrs	r2, r1
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	e000      	b.n	800540e <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	0018      	movs	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	b004      	add	sp, #16
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40000400 	.word	0x40000400
 8005420:	00010007 	.word	0x00010007

08005424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a30      	ldr	r2, [pc, #192]	; (80054f8 <TIM_Base_SetConfig+0xd4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d008      	beq.n	800544e <TIM_Base_SetConfig+0x2a>
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	05db      	lsls	r3, r3, #23
 8005442:	429a      	cmp	r2, r3
 8005444:	d003      	beq.n	800544e <TIM_Base_SetConfig+0x2a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a2c      	ldr	r2, [pc, #176]	; (80054fc <TIM_Base_SetConfig+0xd8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d108      	bne.n	8005460 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2270      	movs	r2, #112	; 0x70
 8005452:	4393      	bics	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a25      	ldr	r2, [pc, #148]	; (80054f8 <TIM_Base_SetConfig+0xd4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d014      	beq.n	8005492 <TIM_Base_SetConfig+0x6e>
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	2380      	movs	r3, #128	; 0x80
 800546c:	05db      	lsls	r3, r3, #23
 800546e:	429a      	cmp	r2, r3
 8005470:	d00f      	beq.n	8005492 <TIM_Base_SetConfig+0x6e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a21      	ldr	r2, [pc, #132]	; (80054fc <TIM_Base_SetConfig+0xd8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00b      	beq.n	8005492 <TIM_Base_SetConfig+0x6e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a20      	ldr	r2, [pc, #128]	; (8005500 <TIM_Base_SetConfig+0xdc>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d007      	beq.n	8005492 <TIM_Base_SetConfig+0x6e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a1f      	ldr	r2, [pc, #124]	; (8005504 <TIM_Base_SetConfig+0xe0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_Base_SetConfig+0x6e>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a1e      	ldr	r2, [pc, #120]	; (8005508 <TIM_Base_SetConfig+0xe4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d108      	bne.n	80054a4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4a1d      	ldr	r2, [pc, #116]	; (800550c <TIM_Base_SetConfig+0xe8>)
 8005496:	4013      	ands	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2280      	movs	r2, #128	; 0x80
 80054a8:	4393      	bics	r3, r2
 80054aa:	001a      	movs	r2, r3
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a0a      	ldr	r2, [pc, #40]	; (80054f8 <TIM_Base_SetConfig+0xd4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d007      	beq.n	80054e2 <TIM_Base_SetConfig+0xbe>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a0b      	ldr	r2, [pc, #44]	; (8005504 <TIM_Base_SetConfig+0xe0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d003      	beq.n	80054e2 <TIM_Base_SetConfig+0xbe>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a0a      	ldr	r2, [pc, #40]	; (8005508 <TIM_Base_SetConfig+0xe4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d103      	bne.n	80054ea <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	615a      	str	r2, [r3, #20]
}
 80054f0:	46c0      	nop			; (mov r8, r8)
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b004      	add	sp, #16
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	40012c00 	.word	0x40012c00
 80054fc:	40000400 	.word	0x40000400
 8005500:	40002000 	.word	0x40002000
 8005504:	40014400 	.word	0x40014400
 8005508:	40014800 	.word	0x40014800
 800550c:	fffffcff 	.word	0xfffffcff

08005510 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e046      	b.n	80055b0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2288      	movs	r2, #136	; 0x88
 8005526:	589b      	ldr	r3, [r3, r2]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d107      	bne.n	800553c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2284      	movs	r2, #132	; 0x84
 8005530:	2100      	movs	r1, #0
 8005532:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	0018      	movs	r0, r3
 8005538:	f7fc f93e 	bl	80017b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2288      	movs	r2, #136	; 0x88
 8005540:	2124      	movs	r1, #36	; 0x24
 8005542:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2101      	movs	r1, #1
 8005550:	438a      	bics	r2, r1
 8005552:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	0018      	movs	r0, r3
 8005558:	f000 f8cc 	bl	80056f4 <UART_SetConfig>
 800555c:	0003      	movs	r3, r0
 800555e:	2b01      	cmp	r3, #1
 8005560:	d101      	bne.n	8005566 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e024      	b.n	80055b0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	0018      	movs	r0, r3
 8005572:	f000 fb37 	bl	8005be4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	490d      	ldr	r1, [pc, #52]	; (80055b8 <HAL_UART_Init+0xa8>)
 8005582:	400a      	ands	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	212a      	movs	r1, #42	; 0x2a
 8005592:	438a      	bics	r2, r1
 8005594:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2101      	movs	r1, #1
 80055a2:	430a      	orrs	r2, r1
 80055a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	0018      	movs	r0, r3
 80055aa:	f000 fbcf 	bl	8005d4c <UART_CheckIdleState>
 80055ae:	0003      	movs	r3, r0
}
 80055b0:	0018      	movs	r0, r3
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b002      	add	sp, #8
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	ffffb7ff 	.word	0xffffb7ff

080055bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08a      	sub	sp, #40	; 0x28
 80055c0:	af02      	add	r7, sp, #8
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	1dbb      	adds	r3, r7, #6
 80055ca:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2288      	movs	r2, #136	; 0x88
 80055d0:	589b      	ldr	r3, [r3, r2]
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	d000      	beq.n	80055d8 <HAL_UART_Transmit+0x1c>
 80055d6:	e088      	b.n	80056ea <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_UART_Transmit+0x2a>
 80055de:	1dbb      	adds	r3, r7, #6
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e080      	b.n	80056ec <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	689a      	ldr	r2, [r3, #8]
 80055ee:	2380      	movs	r3, #128	; 0x80
 80055f0:	015b      	lsls	r3, r3, #5
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d109      	bne.n	800560a <HAL_UART_Transmit+0x4e>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d105      	bne.n	800560a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2201      	movs	r2, #1
 8005602:	4013      	ands	r3, r2
 8005604:	d001      	beq.n	800560a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e070      	b.n	80056ec <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2290      	movs	r2, #144	; 0x90
 800560e:	2100      	movs	r1, #0
 8005610:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2288      	movs	r2, #136	; 0x88
 8005616:	2121      	movs	r1, #33	; 0x21
 8005618:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800561a:	f7fc fac5 	bl	8001ba8 <HAL_GetTick>
 800561e:	0003      	movs	r3, r0
 8005620:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	1dba      	adds	r2, r7, #6
 8005626:	2154      	movs	r1, #84	; 0x54
 8005628:	8812      	ldrh	r2, [r2, #0]
 800562a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	1dba      	adds	r2, r7, #6
 8005630:	2156      	movs	r1, #86	; 0x56
 8005632:	8812      	ldrh	r2, [r2, #0]
 8005634:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	2380      	movs	r3, #128	; 0x80
 800563c:	015b      	lsls	r3, r3, #5
 800563e:	429a      	cmp	r2, r3
 8005640:	d108      	bne.n	8005654 <HAL_UART_Transmit+0x98>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d104      	bne.n	8005654 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	e003      	b.n	800565c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005658:	2300      	movs	r3, #0
 800565a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800565c:	e02c      	b.n	80056b8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	0013      	movs	r3, r2
 8005668:	2200      	movs	r2, #0
 800566a:	2180      	movs	r1, #128	; 0x80
 800566c:	f000 fbbc 	bl	8005de8 <UART_WaitOnFlagUntilTimeout>
 8005670:	1e03      	subs	r3, r0, #0
 8005672:	d001      	beq.n	8005678 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e039      	b.n	80056ec <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10b      	bne.n	8005696 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	001a      	movs	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	05d2      	lsls	r2, r2, #23
 800568a:	0dd2      	lsrs	r2, r2, #23
 800568c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	3302      	adds	r3, #2
 8005692:	61bb      	str	r3, [r7, #24]
 8005694:	e007      	b.n	80056a6 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	781a      	ldrb	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	3301      	adds	r3, #1
 80056a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2256      	movs	r2, #86	; 0x56
 80056aa:	5a9b      	ldrh	r3, [r3, r2]
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b299      	uxth	r1, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2256      	movs	r2, #86	; 0x56
 80056b6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2256      	movs	r2, #86	; 0x56
 80056bc:	5a9b      	ldrh	r3, [r3, r2]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1cc      	bne.n	800565e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	0013      	movs	r3, r2
 80056ce:	2200      	movs	r2, #0
 80056d0:	2140      	movs	r1, #64	; 0x40
 80056d2:	f000 fb89 	bl	8005de8 <UART_WaitOnFlagUntilTimeout>
 80056d6:	1e03      	subs	r3, r0, #0
 80056d8:	d001      	beq.n	80056de <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e006      	b.n	80056ec <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2288      	movs	r2, #136	; 0x88
 80056e2:	2120      	movs	r1, #32
 80056e4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	e000      	b.n	80056ec <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80056ea:	2302      	movs	r3, #2
  }
}
 80056ec:	0018      	movs	r0, r3
 80056ee:	46bd      	mov	sp, r7
 80056f0:	b008      	add	sp, #32
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056f4:	b5b0      	push	{r4, r5, r7, lr}
 80056f6:	b090      	sub	sp, #64	; 0x40
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056fc:	231a      	movs	r3, #26
 80056fe:	2220      	movs	r2, #32
 8005700:	189b      	adds	r3, r3, r2
 8005702:	19db      	adds	r3, r3, r7
 8005704:	2200      	movs	r2, #0
 8005706:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	431a      	orrs	r2, r3
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	431a      	orrs	r2, r3
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	4313      	orrs	r3, r2
 800571e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4ac4      	ldr	r2, [pc, #784]	; (8005a38 <UART_SetConfig+0x344>)
 8005728:	4013      	ands	r3, r2
 800572a:	0019      	movs	r1, r3
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005732:	430b      	orrs	r3, r1
 8005734:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	4abf      	ldr	r2, [pc, #764]	; (8005a3c <UART_SetConfig+0x348>)
 800573e:	4013      	ands	r3, r2
 8005740:	0018      	movs	r0, r3
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	68d9      	ldr	r1, [r3, #12]
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	0003      	movs	r3, r0
 800574c:	430b      	orrs	r3, r1
 800574e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4ab9      	ldr	r2, [pc, #740]	; (8005a40 <UART_SetConfig+0x34c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d004      	beq.n	800576a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005766:	4313      	orrs	r3, r2
 8005768:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	4ab4      	ldr	r2, [pc, #720]	; (8005a44 <UART_SetConfig+0x350>)
 8005772:	4013      	ands	r3, r2
 8005774:	0019      	movs	r1, r3
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577c:	430b      	orrs	r3, r1
 800577e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005786:	220f      	movs	r2, #15
 8005788:	4393      	bics	r3, r2
 800578a:	0018      	movs	r0, r3
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	0003      	movs	r3, r0
 8005796:	430b      	orrs	r3, r1
 8005798:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4aaa      	ldr	r2, [pc, #680]	; (8005a48 <UART_SetConfig+0x354>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d131      	bne.n	8005808 <UART_SetConfig+0x114>
 80057a4:	4ba9      	ldr	r3, [pc, #676]	; (8005a4c <UART_SetConfig+0x358>)
 80057a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a8:	2203      	movs	r2, #3
 80057aa:	4013      	ands	r3, r2
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d01d      	beq.n	80057ec <UART_SetConfig+0xf8>
 80057b0:	d823      	bhi.n	80057fa <UART_SetConfig+0x106>
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d00c      	beq.n	80057d0 <UART_SetConfig+0xdc>
 80057b6:	d820      	bhi.n	80057fa <UART_SetConfig+0x106>
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <UART_SetConfig+0xce>
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d00e      	beq.n	80057de <UART_SetConfig+0xea>
 80057c0:	e01b      	b.n	80057fa <UART_SetConfig+0x106>
 80057c2:	231b      	movs	r3, #27
 80057c4:	2220      	movs	r2, #32
 80057c6:	189b      	adds	r3, r3, r2
 80057c8:	19db      	adds	r3, r3, r7
 80057ca:	2200      	movs	r2, #0
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	e071      	b.n	80058b4 <UART_SetConfig+0x1c0>
 80057d0:	231b      	movs	r3, #27
 80057d2:	2220      	movs	r2, #32
 80057d4:	189b      	adds	r3, r3, r2
 80057d6:	19db      	adds	r3, r3, r7
 80057d8:	2202      	movs	r2, #2
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	e06a      	b.n	80058b4 <UART_SetConfig+0x1c0>
 80057de:	231b      	movs	r3, #27
 80057e0:	2220      	movs	r2, #32
 80057e2:	189b      	adds	r3, r3, r2
 80057e4:	19db      	adds	r3, r3, r7
 80057e6:	2204      	movs	r2, #4
 80057e8:	701a      	strb	r2, [r3, #0]
 80057ea:	e063      	b.n	80058b4 <UART_SetConfig+0x1c0>
 80057ec:	231b      	movs	r3, #27
 80057ee:	2220      	movs	r2, #32
 80057f0:	189b      	adds	r3, r3, r2
 80057f2:	19db      	adds	r3, r3, r7
 80057f4:	2208      	movs	r2, #8
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	e05c      	b.n	80058b4 <UART_SetConfig+0x1c0>
 80057fa:	231b      	movs	r3, #27
 80057fc:	2220      	movs	r2, #32
 80057fe:	189b      	adds	r3, r3, r2
 8005800:	19db      	adds	r3, r3, r7
 8005802:	2210      	movs	r2, #16
 8005804:	701a      	strb	r2, [r3, #0]
 8005806:	e055      	b.n	80058b4 <UART_SetConfig+0x1c0>
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a90      	ldr	r2, [pc, #576]	; (8005a50 <UART_SetConfig+0x35c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d106      	bne.n	8005820 <UART_SetConfig+0x12c>
 8005812:	231b      	movs	r3, #27
 8005814:	2220      	movs	r2, #32
 8005816:	189b      	adds	r3, r3, r2
 8005818:	19db      	adds	r3, r3, r7
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	e049      	b.n	80058b4 <UART_SetConfig+0x1c0>
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a86      	ldr	r2, [pc, #536]	; (8005a40 <UART_SetConfig+0x34c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d13e      	bne.n	80058a8 <UART_SetConfig+0x1b4>
 800582a:	4b88      	ldr	r3, [pc, #544]	; (8005a4c <UART_SetConfig+0x358>)
 800582c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800582e:	23c0      	movs	r3, #192	; 0xc0
 8005830:	011b      	lsls	r3, r3, #4
 8005832:	4013      	ands	r3, r2
 8005834:	22c0      	movs	r2, #192	; 0xc0
 8005836:	0112      	lsls	r2, r2, #4
 8005838:	4293      	cmp	r3, r2
 800583a:	d027      	beq.n	800588c <UART_SetConfig+0x198>
 800583c:	22c0      	movs	r2, #192	; 0xc0
 800583e:	0112      	lsls	r2, r2, #4
 8005840:	4293      	cmp	r3, r2
 8005842:	d82a      	bhi.n	800589a <UART_SetConfig+0x1a6>
 8005844:	2280      	movs	r2, #128	; 0x80
 8005846:	0112      	lsls	r2, r2, #4
 8005848:	4293      	cmp	r3, r2
 800584a:	d011      	beq.n	8005870 <UART_SetConfig+0x17c>
 800584c:	2280      	movs	r2, #128	; 0x80
 800584e:	0112      	lsls	r2, r2, #4
 8005850:	4293      	cmp	r3, r2
 8005852:	d822      	bhi.n	800589a <UART_SetConfig+0x1a6>
 8005854:	2b00      	cmp	r3, #0
 8005856:	d004      	beq.n	8005862 <UART_SetConfig+0x16e>
 8005858:	2280      	movs	r2, #128	; 0x80
 800585a:	00d2      	lsls	r2, r2, #3
 800585c:	4293      	cmp	r3, r2
 800585e:	d00e      	beq.n	800587e <UART_SetConfig+0x18a>
 8005860:	e01b      	b.n	800589a <UART_SetConfig+0x1a6>
 8005862:	231b      	movs	r3, #27
 8005864:	2220      	movs	r2, #32
 8005866:	189b      	adds	r3, r3, r2
 8005868:	19db      	adds	r3, r3, r7
 800586a:	2200      	movs	r2, #0
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	e021      	b.n	80058b4 <UART_SetConfig+0x1c0>
 8005870:	231b      	movs	r3, #27
 8005872:	2220      	movs	r2, #32
 8005874:	189b      	adds	r3, r3, r2
 8005876:	19db      	adds	r3, r3, r7
 8005878:	2202      	movs	r2, #2
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	e01a      	b.n	80058b4 <UART_SetConfig+0x1c0>
 800587e:	231b      	movs	r3, #27
 8005880:	2220      	movs	r2, #32
 8005882:	189b      	adds	r3, r3, r2
 8005884:	19db      	adds	r3, r3, r7
 8005886:	2204      	movs	r2, #4
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	e013      	b.n	80058b4 <UART_SetConfig+0x1c0>
 800588c:	231b      	movs	r3, #27
 800588e:	2220      	movs	r2, #32
 8005890:	189b      	adds	r3, r3, r2
 8005892:	19db      	adds	r3, r3, r7
 8005894:	2208      	movs	r2, #8
 8005896:	701a      	strb	r2, [r3, #0]
 8005898:	e00c      	b.n	80058b4 <UART_SetConfig+0x1c0>
 800589a:	231b      	movs	r3, #27
 800589c:	2220      	movs	r2, #32
 800589e:	189b      	adds	r3, r3, r2
 80058a0:	19db      	adds	r3, r3, r7
 80058a2:	2210      	movs	r2, #16
 80058a4:	701a      	strb	r2, [r3, #0]
 80058a6:	e005      	b.n	80058b4 <UART_SetConfig+0x1c0>
 80058a8:	231b      	movs	r3, #27
 80058aa:	2220      	movs	r2, #32
 80058ac:	189b      	adds	r3, r3, r2
 80058ae:	19db      	adds	r3, r3, r7
 80058b0:	2210      	movs	r2, #16
 80058b2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a61      	ldr	r2, [pc, #388]	; (8005a40 <UART_SetConfig+0x34c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d000      	beq.n	80058c0 <UART_SetConfig+0x1cc>
 80058be:	e092      	b.n	80059e6 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058c0:	231b      	movs	r3, #27
 80058c2:	2220      	movs	r2, #32
 80058c4:	189b      	adds	r3, r3, r2
 80058c6:	19db      	adds	r3, r3, r7
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	2b08      	cmp	r3, #8
 80058cc:	d015      	beq.n	80058fa <UART_SetConfig+0x206>
 80058ce:	dc18      	bgt.n	8005902 <UART_SetConfig+0x20e>
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d00d      	beq.n	80058f0 <UART_SetConfig+0x1fc>
 80058d4:	dc15      	bgt.n	8005902 <UART_SetConfig+0x20e>
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <UART_SetConfig+0x1ec>
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d005      	beq.n	80058ea <UART_SetConfig+0x1f6>
 80058de:	e010      	b.n	8005902 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e0:	f7fe fbe0 	bl	80040a4 <HAL_RCC_GetPCLK1Freq>
 80058e4:	0003      	movs	r3, r0
 80058e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058e8:	e014      	b.n	8005914 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058ea:	4b5a      	ldr	r3, [pc, #360]	; (8005a54 <UART_SetConfig+0x360>)
 80058ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058ee:	e011      	b.n	8005914 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058f0:	f7fe fb4c 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 80058f4:	0003      	movs	r3, r0
 80058f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058f8:	e00c      	b.n	8005914 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fa:	2380      	movs	r3, #128	; 0x80
 80058fc:	021b      	lsls	r3, r3, #8
 80058fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005900:	e008      	b.n	8005914 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005906:	231a      	movs	r3, #26
 8005908:	2220      	movs	r2, #32
 800590a:	189b      	adds	r3, r3, r2
 800590c:	19db      	adds	r3, r3, r7
 800590e:	2201      	movs	r2, #1
 8005910:	701a      	strb	r2, [r3, #0]
        break;
 8005912:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005916:	2b00      	cmp	r3, #0
 8005918:	d100      	bne.n	800591c <UART_SetConfig+0x228>
 800591a:	e147      	b.n	8005bac <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005920:	4b4d      	ldr	r3, [pc, #308]	; (8005a58 <UART_SetConfig+0x364>)
 8005922:	0052      	lsls	r2, r2, #1
 8005924:	5ad3      	ldrh	r3, [r2, r3]
 8005926:	0019      	movs	r1, r3
 8005928:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800592a:	f7fa fbf5 	bl	8000118 <__udivsi3>
 800592e:	0003      	movs	r3, r0
 8005930:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	0013      	movs	r3, r2
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	189b      	adds	r3, r3, r2
 800593c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800593e:	429a      	cmp	r2, r3
 8005940:	d305      	bcc.n	800594e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800594a:	429a      	cmp	r2, r3
 800594c:	d906      	bls.n	800595c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800594e:	231a      	movs	r3, #26
 8005950:	2220      	movs	r2, #32
 8005952:	189b      	adds	r3, r3, r2
 8005954:	19db      	adds	r3, r3, r7
 8005956:	2201      	movs	r2, #1
 8005958:	701a      	strb	r2, [r3, #0]
 800595a:	e127      	b.n	8005bac <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800595c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595e:	61bb      	str	r3, [r7, #24]
 8005960:	2300      	movs	r3, #0
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005968:	4b3b      	ldr	r3, [pc, #236]	; (8005a58 <UART_SetConfig+0x364>)
 800596a:	0052      	lsls	r2, r2, #1
 800596c:	5ad3      	ldrh	r3, [r2, r3]
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	2300      	movs	r3, #0
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	69b8      	ldr	r0, [r7, #24]
 800597a:	69f9      	ldr	r1, [r7, #28]
 800597c:	f7fa fc58 	bl	8000230 <__aeabi_uldivmod>
 8005980:	0002      	movs	r2, r0
 8005982:	000b      	movs	r3, r1
 8005984:	0e11      	lsrs	r1, r2, #24
 8005986:	021d      	lsls	r5, r3, #8
 8005988:	430d      	orrs	r5, r1
 800598a:	0214      	lsls	r4, r2, #8
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	085b      	lsrs	r3, r3, #1
 8005992:	60bb      	str	r3, [r7, #8]
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	68b8      	ldr	r0, [r7, #8]
 800599a:	68f9      	ldr	r1, [r7, #12]
 800599c:	1900      	adds	r0, r0, r4
 800599e:	4169      	adcs	r1, r5
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	603b      	str	r3, [r7, #0]
 80059a6:	2300      	movs	r3, #0
 80059a8:	607b      	str	r3, [r7, #4]
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f7fa fc3f 	bl	8000230 <__aeabi_uldivmod>
 80059b2:	0002      	movs	r2, r0
 80059b4:	000b      	movs	r3, r1
 80059b6:	0013      	movs	r3, r2
 80059b8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059bc:	23c0      	movs	r3, #192	; 0xc0
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d309      	bcc.n	80059d8 <UART_SetConfig+0x2e4>
 80059c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059c6:	2380      	movs	r3, #128	; 0x80
 80059c8:	035b      	lsls	r3, r3, #13
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d204      	bcs.n	80059d8 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d4:	60da      	str	r2, [r3, #12]
 80059d6:	e0e9      	b.n	8005bac <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80059d8:	231a      	movs	r3, #26
 80059da:	2220      	movs	r2, #32
 80059dc:	189b      	adds	r3, r3, r2
 80059de:	19db      	adds	r3, r3, r7
 80059e0:	2201      	movs	r2, #1
 80059e2:	701a      	strb	r2, [r3, #0]
 80059e4:	e0e2      	b.n	8005bac <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	69da      	ldr	r2, [r3, #28]
 80059ea:	2380      	movs	r3, #128	; 0x80
 80059ec:	021b      	lsls	r3, r3, #8
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d000      	beq.n	80059f4 <UART_SetConfig+0x300>
 80059f2:	e083      	b.n	8005afc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80059f4:	231b      	movs	r3, #27
 80059f6:	2220      	movs	r2, #32
 80059f8:	189b      	adds	r3, r3, r2
 80059fa:	19db      	adds	r3, r3, r7
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d015      	beq.n	8005a2e <UART_SetConfig+0x33a>
 8005a02:	dc2b      	bgt.n	8005a5c <UART_SetConfig+0x368>
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d00d      	beq.n	8005a24 <UART_SetConfig+0x330>
 8005a08:	dc28      	bgt.n	8005a5c <UART_SetConfig+0x368>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <UART_SetConfig+0x320>
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d005      	beq.n	8005a1e <UART_SetConfig+0x32a>
 8005a12:	e023      	b.n	8005a5c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a14:	f7fe fb46 	bl	80040a4 <HAL_RCC_GetPCLK1Freq>
 8005a18:	0003      	movs	r3, r0
 8005a1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a1c:	e027      	b.n	8005a6e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a1e:	4b0d      	ldr	r3, [pc, #52]	; (8005a54 <UART_SetConfig+0x360>)
 8005a20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a22:	e024      	b.n	8005a6e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a24:	f7fe fab2 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8005a28:	0003      	movs	r3, r0
 8005a2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a2c:	e01f      	b.n	8005a6e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a2e:	2380      	movs	r3, #128	; 0x80
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a34:	e01b      	b.n	8005a6e <UART_SetConfig+0x37a>
 8005a36:	46c0      	nop			; (mov r8, r8)
 8005a38:	cfff69f3 	.word	0xcfff69f3
 8005a3c:	ffffcfff 	.word	0xffffcfff
 8005a40:	40008000 	.word	0x40008000
 8005a44:	11fff4ff 	.word	0x11fff4ff
 8005a48:	40013800 	.word	0x40013800
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	40004400 	.word	0x40004400
 8005a54:	00f42400 	.word	0x00f42400
 8005a58:	08007530 	.word	0x08007530
      default:
        pclk = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005a60:	231a      	movs	r3, #26
 8005a62:	2220      	movs	r2, #32
 8005a64:	189b      	adds	r3, r3, r2
 8005a66:	19db      	adds	r3, r3, r7
 8005a68:	2201      	movs	r2, #1
 8005a6a:	701a      	strb	r2, [r3, #0]
        break;
 8005a6c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d100      	bne.n	8005a76 <UART_SetConfig+0x382>
 8005a74:	e09a      	b.n	8005bac <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a7a:	4b58      	ldr	r3, [pc, #352]	; (8005bdc <UART_SetConfig+0x4e8>)
 8005a7c:	0052      	lsls	r2, r2, #1
 8005a7e:	5ad3      	ldrh	r3, [r2, r3]
 8005a80:	0019      	movs	r1, r3
 8005a82:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a84:	f7fa fb48 	bl	8000118 <__udivsi3>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	005a      	lsls	r2, r3, #1
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	085b      	lsrs	r3, r3, #1
 8005a92:	18d2      	adds	r2, r2, r3
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	0019      	movs	r1, r3
 8005a9a:	0010      	movs	r0, r2
 8005a9c:	f7fa fb3c 	bl	8000118 <__udivsi3>
 8005aa0:	0003      	movs	r3, r0
 8005aa2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	2b0f      	cmp	r3, #15
 8005aa8:	d921      	bls.n	8005aee <UART_SetConfig+0x3fa>
 8005aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aac:	2380      	movs	r3, #128	; 0x80
 8005aae:	025b      	lsls	r3, r3, #9
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d21c      	bcs.n	8005aee <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	200e      	movs	r0, #14
 8005aba:	2420      	movs	r4, #32
 8005abc:	1903      	adds	r3, r0, r4
 8005abe:	19db      	adds	r3, r3, r7
 8005ac0:	210f      	movs	r1, #15
 8005ac2:	438a      	bics	r2, r1
 8005ac4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	085b      	lsrs	r3, r3, #1
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2207      	movs	r2, #7
 8005ace:	4013      	ands	r3, r2
 8005ad0:	b299      	uxth	r1, r3
 8005ad2:	1903      	adds	r3, r0, r4
 8005ad4:	19db      	adds	r3, r3, r7
 8005ad6:	1902      	adds	r2, r0, r4
 8005ad8:	19d2      	adds	r2, r2, r7
 8005ada:	8812      	ldrh	r2, [r2, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	1902      	adds	r2, r0, r4
 8005ae6:	19d2      	adds	r2, r2, r7
 8005ae8:	8812      	ldrh	r2, [r2, #0]
 8005aea:	60da      	str	r2, [r3, #12]
 8005aec:	e05e      	b.n	8005bac <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005aee:	231a      	movs	r3, #26
 8005af0:	2220      	movs	r2, #32
 8005af2:	189b      	adds	r3, r3, r2
 8005af4:	19db      	adds	r3, r3, r7
 8005af6:	2201      	movs	r2, #1
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	e057      	b.n	8005bac <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005afc:	231b      	movs	r3, #27
 8005afe:	2220      	movs	r2, #32
 8005b00:	189b      	adds	r3, r3, r2
 8005b02:	19db      	adds	r3, r3, r7
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b08      	cmp	r3, #8
 8005b08:	d015      	beq.n	8005b36 <UART_SetConfig+0x442>
 8005b0a:	dc18      	bgt.n	8005b3e <UART_SetConfig+0x44a>
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	d00d      	beq.n	8005b2c <UART_SetConfig+0x438>
 8005b10:	dc15      	bgt.n	8005b3e <UART_SetConfig+0x44a>
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <UART_SetConfig+0x428>
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d005      	beq.n	8005b26 <UART_SetConfig+0x432>
 8005b1a:	e010      	b.n	8005b3e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b1c:	f7fe fac2 	bl	80040a4 <HAL_RCC_GetPCLK1Freq>
 8005b20:	0003      	movs	r3, r0
 8005b22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b24:	e014      	b.n	8005b50 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b26:	4b2e      	ldr	r3, [pc, #184]	; (8005be0 <UART_SetConfig+0x4ec>)
 8005b28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b2a:	e011      	b.n	8005b50 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b2c:	f7fe fa2e 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8005b30:	0003      	movs	r3, r0
 8005b32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b34:	e00c      	b.n	8005b50 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b36:	2380      	movs	r3, #128	; 0x80
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b3c:	e008      	b.n	8005b50 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005b42:	231a      	movs	r3, #26
 8005b44:	2220      	movs	r2, #32
 8005b46:	189b      	adds	r3, r3, r2
 8005b48:	19db      	adds	r3, r3, r7
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	701a      	strb	r2, [r3, #0]
        break;
 8005b4e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d02a      	beq.n	8005bac <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b5a:	4b20      	ldr	r3, [pc, #128]	; (8005bdc <UART_SetConfig+0x4e8>)
 8005b5c:	0052      	lsls	r2, r2, #1
 8005b5e:	5ad3      	ldrh	r3, [r2, r3]
 8005b60:	0019      	movs	r1, r3
 8005b62:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005b64:	f7fa fad8 	bl	8000118 <__udivsi3>
 8005b68:	0003      	movs	r3, r0
 8005b6a:	001a      	movs	r2, r3
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	085b      	lsrs	r3, r3, #1
 8005b72:	18d2      	adds	r2, r2, r3
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	0019      	movs	r1, r3
 8005b7a:	0010      	movs	r0, r2
 8005b7c:	f7fa facc 	bl	8000118 <__udivsi3>
 8005b80:	0003      	movs	r3, r0
 8005b82:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	2b0f      	cmp	r3, #15
 8005b88:	d90a      	bls.n	8005ba0 <UART_SetConfig+0x4ac>
 8005b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b8c:	2380      	movs	r3, #128	; 0x80
 8005b8e:	025b      	lsls	r3, r3, #9
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d205      	bcs.n	8005ba0 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	60da      	str	r2, [r3, #12]
 8005b9e:	e005      	b.n	8005bac <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005ba0:	231a      	movs	r3, #26
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	189b      	adds	r3, r3, r2
 8005ba6:	19db      	adds	r3, r3, r7
 8005ba8:	2201      	movs	r2, #1
 8005baa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	226a      	movs	r2, #106	; 0x6a
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	2268      	movs	r2, #104	; 0x68
 8005bb8:	2101      	movs	r1, #1
 8005bba:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005bc8:	231a      	movs	r3, #26
 8005bca:	2220      	movs	r2, #32
 8005bcc:	189b      	adds	r3, r3, r2
 8005bce:	19db      	adds	r3, r3, r7
 8005bd0:	781b      	ldrb	r3, [r3, #0]
}
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	b010      	add	sp, #64	; 0x40
 8005bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8005bda:	46c0      	nop			; (mov r8, r8)
 8005bdc:	08007530 	.word	0x08007530
 8005be0:	00f42400 	.word	0x00f42400

08005be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	d00b      	beq.n	8005c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	4a4a      	ldr	r2, [pc, #296]	; (8005d28 <UART_AdvFeatureConfig+0x144>)
 8005bfe:	4013      	ands	r3, r2
 8005c00:	0019      	movs	r1, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c12:	2202      	movs	r2, #2
 8005c14:	4013      	ands	r3, r2
 8005c16:	d00b      	beq.n	8005c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	4a43      	ldr	r2, [pc, #268]	; (8005d2c <UART_AdvFeatureConfig+0x148>)
 8005c20:	4013      	ands	r3, r2
 8005c22:	0019      	movs	r1, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c34:	2204      	movs	r2, #4
 8005c36:	4013      	ands	r3, r2
 8005c38:	d00b      	beq.n	8005c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	4a3b      	ldr	r2, [pc, #236]	; (8005d30 <UART_AdvFeatureConfig+0x14c>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	0019      	movs	r1, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	2208      	movs	r2, #8
 8005c58:	4013      	ands	r3, r2
 8005c5a:	d00b      	beq.n	8005c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	4a34      	ldr	r2, [pc, #208]	; (8005d34 <UART_AdvFeatureConfig+0x150>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	0019      	movs	r1, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	2210      	movs	r2, #16
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d00b      	beq.n	8005c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	4a2c      	ldr	r2, [pc, #176]	; (8005d38 <UART_AdvFeatureConfig+0x154>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	0019      	movs	r1, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d00b      	beq.n	8005cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	4a25      	ldr	r2, [pc, #148]	; (8005d3c <UART_AdvFeatureConfig+0x158>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	0019      	movs	r1, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	2240      	movs	r2, #64	; 0x40
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	d01d      	beq.n	8005cfe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	4a1d      	ldr	r2, [pc, #116]	; (8005d40 <UART_AdvFeatureConfig+0x15c>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	0019      	movs	r1, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cde:	2380      	movs	r3, #128	; 0x80
 8005ce0:	035b      	lsls	r3, r3, #13
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d10b      	bne.n	8005cfe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	4a15      	ldr	r2, [pc, #84]	; (8005d44 <UART_AdvFeatureConfig+0x160>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	0019      	movs	r1, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	2280      	movs	r2, #128	; 0x80
 8005d04:	4013      	ands	r3, r2
 8005d06:	d00b      	beq.n	8005d20 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	4a0e      	ldr	r2, [pc, #56]	; (8005d48 <UART_AdvFeatureConfig+0x164>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	0019      	movs	r1, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	605a      	str	r2, [r3, #4]
  }
}
 8005d20:	46c0      	nop			; (mov r8, r8)
 8005d22:	46bd      	mov	sp, r7
 8005d24:	b002      	add	sp, #8
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	fffdffff 	.word	0xfffdffff
 8005d2c:	fffeffff 	.word	0xfffeffff
 8005d30:	fffbffff 	.word	0xfffbffff
 8005d34:	ffff7fff 	.word	0xffff7fff
 8005d38:	ffffefff 	.word	0xffffefff
 8005d3c:	ffffdfff 	.word	0xffffdfff
 8005d40:	ffefffff 	.word	0xffefffff
 8005d44:	ff9fffff 	.word	0xff9fffff
 8005d48:	fff7ffff 	.word	0xfff7ffff

08005d4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2290      	movs	r2, #144	; 0x90
 8005d58:	2100      	movs	r1, #0
 8005d5a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d5c:	f7fb ff24 	bl	8001ba8 <HAL_GetTick>
 8005d60:	0003      	movs	r3, r0
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2208      	movs	r2, #8
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	2b08      	cmp	r3, #8
 8005d70:	d10c      	bne.n	8005d8c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2280      	movs	r2, #128	; 0x80
 8005d76:	0391      	lsls	r1, r2, #14
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	4a1a      	ldr	r2, [pc, #104]	; (8005de4 <UART_CheckIdleState+0x98>)
 8005d7c:	9200      	str	r2, [sp, #0]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f000 f832 	bl	8005de8 <UART_WaitOnFlagUntilTimeout>
 8005d84:	1e03      	subs	r3, r0, #0
 8005d86:	d001      	beq.n	8005d8c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e026      	b.n	8005dda <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2204      	movs	r2, #4
 8005d94:	4013      	ands	r3, r2
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d10c      	bne.n	8005db4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2280      	movs	r2, #128	; 0x80
 8005d9e:	03d1      	lsls	r1, r2, #15
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	4a10      	ldr	r2, [pc, #64]	; (8005de4 <UART_CheckIdleState+0x98>)
 8005da4:	9200      	str	r2, [sp, #0]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f000 f81e 	bl	8005de8 <UART_WaitOnFlagUntilTimeout>
 8005dac:	1e03      	subs	r3, r0, #0
 8005dae:	d001      	beq.n	8005db4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e012      	b.n	8005dda <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2288      	movs	r2, #136	; 0x88
 8005db8:	2120      	movs	r1, #32
 8005dba:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	228c      	movs	r2, #140	; 0x8c
 8005dc0:	2120      	movs	r1, #32
 8005dc2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2284      	movs	r2, #132	; 0x84
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	0018      	movs	r0, r3
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	b004      	add	sp, #16
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	01ffffff 	.word	0x01ffffff

08005de8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b094      	sub	sp, #80	; 0x50
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	1dfb      	adds	r3, r7, #7
 8005df6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df8:	e0a7      	b.n	8005f4a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	d100      	bne.n	8005e02 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005e00:	e0a3      	b.n	8005f4a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e02:	f7fb fed1 	bl	8001ba8 <HAL_GetTick>
 8005e06:	0002      	movs	r2, r0
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d302      	bcc.n	8005e18 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d13f      	bne.n	8005e98 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e18:	f3ef 8310 	mrs	r3, PRIMASK
 8005e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e20:	647b      	str	r3, [r7, #68]	; 0x44
 8005e22:	2301      	movs	r3, #1
 8005e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e28:	f383 8810 	msr	PRIMASK, r3
}
 8005e2c:	46c0      	nop			; (mov r8, r8)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	494e      	ldr	r1, [pc, #312]	; (8005f74 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005e3a:	400a      	ands	r2, r1
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e40:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	f383 8810 	msr	PRIMASK, r3
}
 8005e48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e4e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e52:	643b      	str	r3, [r7, #64]	; 0x40
 8005e54:	2301      	movs	r3, #1
 8005e56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5a:	f383 8810 	msr	PRIMASK, r3
}
 8005e5e:	46c0      	nop			; (mov r8, r8)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	438a      	bics	r2, r1
 8005e6e:	609a      	str	r2, [r3, #8]
 8005e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e76:	f383 8810 	msr	PRIMASK, r3
}
 8005e7a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2288      	movs	r2, #136	; 0x88
 8005e80:	2120      	movs	r1, #32
 8005e82:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	228c      	movs	r2, #140	; 0x8c
 8005e88:	2120      	movs	r1, #32
 8005e8a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2284      	movs	r2, #132	; 0x84
 8005e90:	2100      	movs	r1, #0
 8005e92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e069      	b.n	8005f6c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	d052      	beq.n	8005f4a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69da      	ldr	r2, [r3, #28]
 8005eaa:	2380      	movs	r3, #128	; 0x80
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	401a      	ands	r2, r3
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d148      	bne.n	8005f4a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2280      	movs	r2, #128	; 0x80
 8005ebe:	0112      	lsls	r2, r2, #4
 8005ec0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec6:	613b      	str	r3, [r7, #16]
  return(result);
 8005ec8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ecc:	2301      	movs	r3, #1
 8005ece:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f383 8810 	msr	PRIMASK, r3
}
 8005ed6:	46c0      	nop			; (mov r8, r8)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4924      	ldr	r1, [pc, #144]	; (8005f74 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005ee4:	400a      	ands	r2, r1
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	f383 8810 	msr	PRIMASK, r3
}
 8005ef2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ef8:	61fb      	str	r3, [r7, #28]
  return(result);
 8005efa:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005efe:	2301      	movs	r3, #1
 8005f00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	f383 8810 	msr	PRIMASK, r3
}
 8005f08:	46c0      	nop			; (mov r8, r8)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2101      	movs	r1, #1
 8005f16:	438a      	bics	r2, r1
 8005f18:	609a      	str	r2, [r3, #8]
 8005f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	f383 8810 	msr	PRIMASK, r3
}
 8005f24:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2288      	movs	r2, #136	; 0x88
 8005f2a:	2120      	movs	r1, #32
 8005f2c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	228c      	movs	r2, #140	; 0x8c
 8005f32:	2120      	movs	r1, #32
 8005f34:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2290      	movs	r2, #144	; 0x90
 8005f3a:	2120      	movs	r1, #32
 8005f3c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2284      	movs	r2, #132	; 0x84
 8005f42:	2100      	movs	r1, #0
 8005f44:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e010      	b.n	8005f6c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	4013      	ands	r3, r2
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	425a      	negs	r2, r3
 8005f5a:	4153      	adcs	r3, r2
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	001a      	movs	r2, r3
 8005f60:	1dfb      	adds	r3, r7, #7
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d100      	bne.n	8005f6a <UART_WaitOnFlagUntilTimeout+0x182>
 8005f68:	e747      	b.n	8005dfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	b014      	add	sp, #80	; 0x50
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	fffffe5f 	.word	0xfffffe5f

08005f78 <__errno>:
 8005f78:	4b01      	ldr	r3, [pc, #4]	; (8005f80 <__errno+0x8>)
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	4770      	bx	lr
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	2000003c 	.word	0x2000003c

08005f84 <__libc_init_array>:
 8005f84:	b570      	push	{r4, r5, r6, lr}
 8005f86:	2600      	movs	r6, #0
 8005f88:	4d0c      	ldr	r5, [pc, #48]	; (8005fbc <__libc_init_array+0x38>)
 8005f8a:	4c0d      	ldr	r4, [pc, #52]	; (8005fc0 <__libc_init_array+0x3c>)
 8005f8c:	1b64      	subs	r4, r4, r5
 8005f8e:	10a4      	asrs	r4, r4, #2
 8005f90:	42a6      	cmp	r6, r4
 8005f92:	d109      	bne.n	8005fa8 <__libc_init_array+0x24>
 8005f94:	2600      	movs	r6, #0
 8005f96:	f001 f803 	bl	8006fa0 <_init>
 8005f9a:	4d0a      	ldr	r5, [pc, #40]	; (8005fc4 <__libc_init_array+0x40>)
 8005f9c:	4c0a      	ldr	r4, [pc, #40]	; (8005fc8 <__libc_init_array+0x44>)
 8005f9e:	1b64      	subs	r4, r4, r5
 8005fa0:	10a4      	asrs	r4, r4, #2
 8005fa2:	42a6      	cmp	r6, r4
 8005fa4:	d105      	bne.n	8005fb2 <__libc_init_array+0x2e>
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}
 8005fa8:	00b3      	lsls	r3, r6, #2
 8005faa:	58eb      	ldr	r3, [r5, r3]
 8005fac:	4798      	blx	r3
 8005fae:	3601      	adds	r6, #1
 8005fb0:	e7ee      	b.n	8005f90 <__libc_init_array+0xc>
 8005fb2:	00b3      	lsls	r3, r6, #2
 8005fb4:	58eb      	ldr	r3, [r5, r3]
 8005fb6:	4798      	blx	r3
 8005fb8:	3601      	adds	r6, #1
 8005fba:	e7f2      	b.n	8005fa2 <__libc_init_array+0x1e>
 8005fbc:	080075e8 	.word	0x080075e8
 8005fc0:	080075e8 	.word	0x080075e8
 8005fc4:	080075e8 	.word	0x080075e8
 8005fc8:	080075ec 	.word	0x080075ec

08005fcc <memcpy>:
 8005fcc:	2300      	movs	r3, #0
 8005fce:	b510      	push	{r4, lr}
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d100      	bne.n	8005fd6 <memcpy+0xa>
 8005fd4:	bd10      	pop	{r4, pc}
 8005fd6:	5ccc      	ldrb	r4, [r1, r3]
 8005fd8:	54c4      	strb	r4, [r0, r3]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	e7f8      	b.n	8005fd0 <memcpy+0x4>

08005fde <memset>:
 8005fde:	0003      	movs	r3, r0
 8005fe0:	1882      	adds	r2, r0, r2
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d100      	bne.n	8005fe8 <memset+0xa>
 8005fe6:	4770      	bx	lr
 8005fe8:	7019      	strb	r1, [r3, #0]
 8005fea:	3301      	adds	r3, #1
 8005fec:	e7f9      	b.n	8005fe2 <memset+0x4>
	...

08005ff0 <iprintf>:
 8005ff0:	b40f      	push	{r0, r1, r2, r3}
 8005ff2:	4b0b      	ldr	r3, [pc, #44]	; (8006020 <iprintf+0x30>)
 8005ff4:	b513      	push	{r0, r1, r4, lr}
 8005ff6:	681c      	ldr	r4, [r3, #0]
 8005ff8:	2c00      	cmp	r4, #0
 8005ffa:	d005      	beq.n	8006008 <iprintf+0x18>
 8005ffc:	69a3      	ldr	r3, [r4, #24]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d102      	bne.n	8006008 <iprintf+0x18>
 8006002:	0020      	movs	r0, r4
 8006004:	f000 f870 	bl	80060e8 <__sinit>
 8006008:	ab05      	add	r3, sp, #20
 800600a:	0020      	movs	r0, r4
 800600c:	9a04      	ldr	r2, [sp, #16]
 800600e:	68a1      	ldr	r1, [r4, #8]
 8006010:	9301      	str	r3, [sp, #4]
 8006012:	f000 f9cd 	bl	80063b0 <_vfiprintf_r>
 8006016:	bc16      	pop	{r1, r2, r4}
 8006018:	bc08      	pop	{r3}
 800601a:	b004      	add	sp, #16
 800601c:	4718      	bx	r3
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	2000003c 	.word	0x2000003c

08006024 <std>:
 8006024:	2300      	movs	r3, #0
 8006026:	b510      	push	{r4, lr}
 8006028:	0004      	movs	r4, r0
 800602a:	6003      	str	r3, [r0, #0]
 800602c:	6043      	str	r3, [r0, #4]
 800602e:	6083      	str	r3, [r0, #8]
 8006030:	8181      	strh	r1, [r0, #12]
 8006032:	6643      	str	r3, [r0, #100]	; 0x64
 8006034:	0019      	movs	r1, r3
 8006036:	81c2      	strh	r2, [r0, #14]
 8006038:	6103      	str	r3, [r0, #16]
 800603a:	6143      	str	r3, [r0, #20]
 800603c:	6183      	str	r3, [r0, #24]
 800603e:	2208      	movs	r2, #8
 8006040:	305c      	adds	r0, #92	; 0x5c
 8006042:	f7ff ffcc 	bl	8005fde <memset>
 8006046:	4b05      	ldr	r3, [pc, #20]	; (800605c <std+0x38>)
 8006048:	6224      	str	r4, [r4, #32]
 800604a:	6263      	str	r3, [r4, #36]	; 0x24
 800604c:	4b04      	ldr	r3, [pc, #16]	; (8006060 <std+0x3c>)
 800604e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006050:	4b04      	ldr	r3, [pc, #16]	; (8006064 <std+0x40>)
 8006052:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006054:	4b04      	ldr	r3, [pc, #16]	; (8006068 <std+0x44>)
 8006056:	6323      	str	r3, [r4, #48]	; 0x30
 8006058:	bd10      	pop	{r4, pc}
 800605a:	46c0      	nop			; (mov r8, r8)
 800605c:	0800694d 	.word	0x0800694d
 8006060:	08006975 	.word	0x08006975
 8006064:	080069ad 	.word	0x080069ad
 8006068:	080069d9 	.word	0x080069d9

0800606c <_cleanup_r>:
 800606c:	b510      	push	{r4, lr}
 800606e:	4902      	ldr	r1, [pc, #8]	; (8006078 <_cleanup_r+0xc>)
 8006070:	f000 f8ba 	bl	80061e8 <_fwalk_reent>
 8006074:	bd10      	pop	{r4, pc}
 8006076:	46c0      	nop			; (mov r8, r8)
 8006078:	08006ce5 	.word	0x08006ce5

0800607c <__sfmoreglue>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	2568      	movs	r5, #104	; 0x68
 8006080:	1e4a      	subs	r2, r1, #1
 8006082:	4355      	muls	r5, r2
 8006084:	000e      	movs	r6, r1
 8006086:	0029      	movs	r1, r5
 8006088:	3174      	adds	r1, #116	; 0x74
 800608a:	f000 f8f3 	bl	8006274 <_malloc_r>
 800608e:	1e04      	subs	r4, r0, #0
 8006090:	d008      	beq.n	80060a4 <__sfmoreglue+0x28>
 8006092:	2100      	movs	r1, #0
 8006094:	002a      	movs	r2, r5
 8006096:	6001      	str	r1, [r0, #0]
 8006098:	6046      	str	r6, [r0, #4]
 800609a:	300c      	adds	r0, #12
 800609c:	60a0      	str	r0, [r4, #8]
 800609e:	3268      	adds	r2, #104	; 0x68
 80060a0:	f7ff ff9d 	bl	8005fde <memset>
 80060a4:	0020      	movs	r0, r4
 80060a6:	bd70      	pop	{r4, r5, r6, pc}

080060a8 <__sfp_lock_acquire>:
 80060a8:	b510      	push	{r4, lr}
 80060aa:	4802      	ldr	r0, [pc, #8]	; (80060b4 <__sfp_lock_acquire+0xc>)
 80060ac:	f000 f8bd 	bl	800622a <__retarget_lock_acquire_recursive>
 80060b0:	bd10      	pop	{r4, pc}
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	20000255 	.word	0x20000255

080060b8 <__sfp_lock_release>:
 80060b8:	b510      	push	{r4, lr}
 80060ba:	4802      	ldr	r0, [pc, #8]	; (80060c4 <__sfp_lock_release+0xc>)
 80060bc:	f000 f8b6 	bl	800622c <__retarget_lock_release_recursive>
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	46c0      	nop			; (mov r8, r8)
 80060c4:	20000255 	.word	0x20000255

080060c8 <__sinit_lock_acquire>:
 80060c8:	b510      	push	{r4, lr}
 80060ca:	4802      	ldr	r0, [pc, #8]	; (80060d4 <__sinit_lock_acquire+0xc>)
 80060cc:	f000 f8ad 	bl	800622a <__retarget_lock_acquire_recursive>
 80060d0:	bd10      	pop	{r4, pc}
 80060d2:	46c0      	nop			; (mov r8, r8)
 80060d4:	20000256 	.word	0x20000256

080060d8 <__sinit_lock_release>:
 80060d8:	b510      	push	{r4, lr}
 80060da:	4802      	ldr	r0, [pc, #8]	; (80060e4 <__sinit_lock_release+0xc>)
 80060dc:	f000 f8a6 	bl	800622c <__retarget_lock_release_recursive>
 80060e0:	bd10      	pop	{r4, pc}
 80060e2:	46c0      	nop			; (mov r8, r8)
 80060e4:	20000256 	.word	0x20000256

080060e8 <__sinit>:
 80060e8:	b513      	push	{r0, r1, r4, lr}
 80060ea:	0004      	movs	r4, r0
 80060ec:	f7ff ffec 	bl	80060c8 <__sinit_lock_acquire>
 80060f0:	69a3      	ldr	r3, [r4, #24]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <__sinit+0x14>
 80060f6:	f7ff ffef 	bl	80060d8 <__sinit_lock_release>
 80060fa:	bd13      	pop	{r0, r1, r4, pc}
 80060fc:	64a3      	str	r3, [r4, #72]	; 0x48
 80060fe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006100:	6523      	str	r3, [r4, #80]	; 0x50
 8006102:	4b13      	ldr	r3, [pc, #76]	; (8006150 <__sinit+0x68>)
 8006104:	4a13      	ldr	r2, [pc, #76]	; (8006154 <__sinit+0x6c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	62a2      	str	r2, [r4, #40]	; 0x28
 800610a:	9301      	str	r3, [sp, #4]
 800610c:	42a3      	cmp	r3, r4
 800610e:	d101      	bne.n	8006114 <__sinit+0x2c>
 8006110:	2301      	movs	r3, #1
 8006112:	61a3      	str	r3, [r4, #24]
 8006114:	0020      	movs	r0, r4
 8006116:	f000 f81f 	bl	8006158 <__sfp>
 800611a:	6060      	str	r0, [r4, #4]
 800611c:	0020      	movs	r0, r4
 800611e:	f000 f81b 	bl	8006158 <__sfp>
 8006122:	60a0      	str	r0, [r4, #8]
 8006124:	0020      	movs	r0, r4
 8006126:	f000 f817 	bl	8006158 <__sfp>
 800612a:	2200      	movs	r2, #0
 800612c:	2104      	movs	r1, #4
 800612e:	60e0      	str	r0, [r4, #12]
 8006130:	6860      	ldr	r0, [r4, #4]
 8006132:	f7ff ff77 	bl	8006024 <std>
 8006136:	2201      	movs	r2, #1
 8006138:	2109      	movs	r1, #9
 800613a:	68a0      	ldr	r0, [r4, #8]
 800613c:	f7ff ff72 	bl	8006024 <std>
 8006140:	2202      	movs	r2, #2
 8006142:	2112      	movs	r1, #18
 8006144:	68e0      	ldr	r0, [r4, #12]
 8006146:	f7ff ff6d 	bl	8006024 <std>
 800614a:	2301      	movs	r3, #1
 800614c:	61a3      	str	r3, [r4, #24]
 800614e:	e7d2      	b.n	80060f6 <__sinit+0xe>
 8006150:	08007548 	.word	0x08007548
 8006154:	0800606d 	.word	0x0800606d

08006158 <__sfp>:
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615a:	0007      	movs	r7, r0
 800615c:	f7ff ffa4 	bl	80060a8 <__sfp_lock_acquire>
 8006160:	4b1f      	ldr	r3, [pc, #124]	; (80061e0 <__sfp+0x88>)
 8006162:	681e      	ldr	r6, [r3, #0]
 8006164:	69b3      	ldr	r3, [r6, #24]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d102      	bne.n	8006170 <__sfp+0x18>
 800616a:	0030      	movs	r0, r6
 800616c:	f7ff ffbc 	bl	80060e8 <__sinit>
 8006170:	3648      	adds	r6, #72	; 0x48
 8006172:	68b4      	ldr	r4, [r6, #8]
 8006174:	6873      	ldr	r3, [r6, #4]
 8006176:	3b01      	subs	r3, #1
 8006178:	d504      	bpl.n	8006184 <__sfp+0x2c>
 800617a:	6833      	ldr	r3, [r6, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d022      	beq.n	80061c6 <__sfp+0x6e>
 8006180:	6836      	ldr	r6, [r6, #0]
 8006182:	e7f6      	b.n	8006172 <__sfp+0x1a>
 8006184:	220c      	movs	r2, #12
 8006186:	5ea5      	ldrsh	r5, [r4, r2]
 8006188:	2d00      	cmp	r5, #0
 800618a:	d11a      	bne.n	80061c2 <__sfp+0x6a>
 800618c:	0020      	movs	r0, r4
 800618e:	4b15      	ldr	r3, [pc, #84]	; (80061e4 <__sfp+0x8c>)
 8006190:	3058      	adds	r0, #88	; 0x58
 8006192:	60e3      	str	r3, [r4, #12]
 8006194:	6665      	str	r5, [r4, #100]	; 0x64
 8006196:	f000 f847 	bl	8006228 <__retarget_lock_init_recursive>
 800619a:	f7ff ff8d 	bl	80060b8 <__sfp_lock_release>
 800619e:	0020      	movs	r0, r4
 80061a0:	2208      	movs	r2, #8
 80061a2:	0029      	movs	r1, r5
 80061a4:	6025      	str	r5, [r4, #0]
 80061a6:	60a5      	str	r5, [r4, #8]
 80061a8:	6065      	str	r5, [r4, #4]
 80061aa:	6125      	str	r5, [r4, #16]
 80061ac:	6165      	str	r5, [r4, #20]
 80061ae:	61a5      	str	r5, [r4, #24]
 80061b0:	305c      	adds	r0, #92	; 0x5c
 80061b2:	f7ff ff14 	bl	8005fde <memset>
 80061b6:	6365      	str	r5, [r4, #52]	; 0x34
 80061b8:	63a5      	str	r5, [r4, #56]	; 0x38
 80061ba:	64a5      	str	r5, [r4, #72]	; 0x48
 80061bc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80061be:	0020      	movs	r0, r4
 80061c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061c2:	3468      	adds	r4, #104	; 0x68
 80061c4:	e7d7      	b.n	8006176 <__sfp+0x1e>
 80061c6:	2104      	movs	r1, #4
 80061c8:	0038      	movs	r0, r7
 80061ca:	f7ff ff57 	bl	800607c <__sfmoreglue>
 80061ce:	1e04      	subs	r4, r0, #0
 80061d0:	6030      	str	r0, [r6, #0]
 80061d2:	d1d5      	bne.n	8006180 <__sfp+0x28>
 80061d4:	f7ff ff70 	bl	80060b8 <__sfp_lock_release>
 80061d8:	230c      	movs	r3, #12
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	e7ef      	b.n	80061be <__sfp+0x66>
 80061de:	46c0      	nop			; (mov r8, r8)
 80061e0:	08007548 	.word	0x08007548
 80061e4:	ffff0001 	.word	0xffff0001

080061e8 <_fwalk_reent>:
 80061e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061ea:	0004      	movs	r4, r0
 80061ec:	0006      	movs	r6, r0
 80061ee:	2700      	movs	r7, #0
 80061f0:	9101      	str	r1, [sp, #4]
 80061f2:	3448      	adds	r4, #72	; 0x48
 80061f4:	6863      	ldr	r3, [r4, #4]
 80061f6:	68a5      	ldr	r5, [r4, #8]
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	9b00      	ldr	r3, [sp, #0]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	d504      	bpl.n	800620c <_fwalk_reent+0x24>
 8006202:	6824      	ldr	r4, [r4, #0]
 8006204:	2c00      	cmp	r4, #0
 8006206:	d1f5      	bne.n	80061f4 <_fwalk_reent+0xc>
 8006208:	0038      	movs	r0, r7
 800620a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800620c:	89ab      	ldrh	r3, [r5, #12]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d908      	bls.n	8006224 <_fwalk_reent+0x3c>
 8006212:	220e      	movs	r2, #14
 8006214:	5eab      	ldrsh	r3, [r5, r2]
 8006216:	3301      	adds	r3, #1
 8006218:	d004      	beq.n	8006224 <_fwalk_reent+0x3c>
 800621a:	0029      	movs	r1, r5
 800621c:	0030      	movs	r0, r6
 800621e:	9b01      	ldr	r3, [sp, #4]
 8006220:	4798      	blx	r3
 8006222:	4307      	orrs	r7, r0
 8006224:	3568      	adds	r5, #104	; 0x68
 8006226:	e7e8      	b.n	80061fa <_fwalk_reent+0x12>

08006228 <__retarget_lock_init_recursive>:
 8006228:	4770      	bx	lr

0800622a <__retarget_lock_acquire_recursive>:
 800622a:	4770      	bx	lr

0800622c <__retarget_lock_release_recursive>:
 800622c:	4770      	bx	lr
	...

08006230 <sbrk_aligned>:
 8006230:	b570      	push	{r4, r5, r6, lr}
 8006232:	4e0f      	ldr	r6, [pc, #60]	; (8006270 <sbrk_aligned+0x40>)
 8006234:	000d      	movs	r5, r1
 8006236:	6831      	ldr	r1, [r6, #0]
 8006238:	0004      	movs	r4, r0
 800623a:	2900      	cmp	r1, #0
 800623c:	d102      	bne.n	8006244 <sbrk_aligned+0x14>
 800623e:	f000 fb73 	bl	8006928 <_sbrk_r>
 8006242:	6030      	str	r0, [r6, #0]
 8006244:	0029      	movs	r1, r5
 8006246:	0020      	movs	r0, r4
 8006248:	f000 fb6e 	bl	8006928 <_sbrk_r>
 800624c:	1c43      	adds	r3, r0, #1
 800624e:	d00a      	beq.n	8006266 <sbrk_aligned+0x36>
 8006250:	2303      	movs	r3, #3
 8006252:	1cc5      	adds	r5, r0, #3
 8006254:	439d      	bics	r5, r3
 8006256:	42a8      	cmp	r0, r5
 8006258:	d007      	beq.n	800626a <sbrk_aligned+0x3a>
 800625a:	1a29      	subs	r1, r5, r0
 800625c:	0020      	movs	r0, r4
 800625e:	f000 fb63 	bl	8006928 <_sbrk_r>
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	d101      	bne.n	800626a <sbrk_aligned+0x3a>
 8006266:	2501      	movs	r5, #1
 8006268:	426d      	negs	r5, r5
 800626a:	0028      	movs	r0, r5
 800626c:	bd70      	pop	{r4, r5, r6, pc}
 800626e:	46c0      	nop			; (mov r8, r8)
 8006270:	2000025c 	.word	0x2000025c

08006274 <_malloc_r>:
 8006274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006276:	2203      	movs	r2, #3
 8006278:	1ccb      	adds	r3, r1, #3
 800627a:	4393      	bics	r3, r2
 800627c:	3308      	adds	r3, #8
 800627e:	0006      	movs	r6, r0
 8006280:	001f      	movs	r7, r3
 8006282:	2b0c      	cmp	r3, #12
 8006284:	d232      	bcs.n	80062ec <_malloc_r+0x78>
 8006286:	270c      	movs	r7, #12
 8006288:	42b9      	cmp	r1, r7
 800628a:	d831      	bhi.n	80062f0 <_malloc_r+0x7c>
 800628c:	0030      	movs	r0, r6
 800628e:	f000 fdf5 	bl	8006e7c <__malloc_lock>
 8006292:	4d32      	ldr	r5, [pc, #200]	; (800635c <_malloc_r+0xe8>)
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	001c      	movs	r4, r3
 8006298:	2c00      	cmp	r4, #0
 800629a:	d12e      	bne.n	80062fa <_malloc_r+0x86>
 800629c:	0039      	movs	r1, r7
 800629e:	0030      	movs	r0, r6
 80062a0:	f7ff ffc6 	bl	8006230 <sbrk_aligned>
 80062a4:	0004      	movs	r4, r0
 80062a6:	1c43      	adds	r3, r0, #1
 80062a8:	d11e      	bne.n	80062e8 <_malloc_r+0x74>
 80062aa:	682c      	ldr	r4, [r5, #0]
 80062ac:	0025      	movs	r5, r4
 80062ae:	2d00      	cmp	r5, #0
 80062b0:	d14a      	bne.n	8006348 <_malloc_r+0xd4>
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	0029      	movs	r1, r5
 80062b6:	18e3      	adds	r3, r4, r3
 80062b8:	0030      	movs	r0, r6
 80062ba:	9301      	str	r3, [sp, #4]
 80062bc:	f000 fb34 	bl	8006928 <_sbrk_r>
 80062c0:	9b01      	ldr	r3, [sp, #4]
 80062c2:	4283      	cmp	r3, r0
 80062c4:	d143      	bne.n	800634e <_malloc_r+0xda>
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	3703      	adds	r7, #3
 80062ca:	1aff      	subs	r7, r7, r3
 80062cc:	2303      	movs	r3, #3
 80062ce:	439f      	bics	r7, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	2f0c      	cmp	r7, #12
 80062d4:	d200      	bcs.n	80062d8 <_malloc_r+0x64>
 80062d6:	270c      	movs	r7, #12
 80062d8:	0039      	movs	r1, r7
 80062da:	0030      	movs	r0, r6
 80062dc:	f7ff ffa8 	bl	8006230 <sbrk_aligned>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d034      	beq.n	800634e <_malloc_r+0xda>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	19df      	adds	r7, r3, r7
 80062e8:	6027      	str	r7, [r4, #0]
 80062ea:	e013      	b.n	8006314 <_malloc_r+0xa0>
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	dacb      	bge.n	8006288 <_malloc_r+0x14>
 80062f0:	230c      	movs	r3, #12
 80062f2:	2500      	movs	r5, #0
 80062f4:	6033      	str	r3, [r6, #0]
 80062f6:	0028      	movs	r0, r5
 80062f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062fa:	6822      	ldr	r2, [r4, #0]
 80062fc:	1bd1      	subs	r1, r2, r7
 80062fe:	d420      	bmi.n	8006342 <_malloc_r+0xce>
 8006300:	290b      	cmp	r1, #11
 8006302:	d917      	bls.n	8006334 <_malloc_r+0xc0>
 8006304:	19e2      	adds	r2, r4, r7
 8006306:	6027      	str	r7, [r4, #0]
 8006308:	42a3      	cmp	r3, r4
 800630a:	d111      	bne.n	8006330 <_malloc_r+0xbc>
 800630c:	602a      	str	r2, [r5, #0]
 800630e:	6863      	ldr	r3, [r4, #4]
 8006310:	6011      	str	r1, [r2, #0]
 8006312:	6053      	str	r3, [r2, #4]
 8006314:	0030      	movs	r0, r6
 8006316:	0025      	movs	r5, r4
 8006318:	f000 fdb8 	bl	8006e8c <__malloc_unlock>
 800631c:	2207      	movs	r2, #7
 800631e:	350b      	adds	r5, #11
 8006320:	1d23      	adds	r3, r4, #4
 8006322:	4395      	bics	r5, r2
 8006324:	1aea      	subs	r2, r5, r3
 8006326:	429d      	cmp	r5, r3
 8006328:	d0e5      	beq.n	80062f6 <_malloc_r+0x82>
 800632a:	1b5b      	subs	r3, r3, r5
 800632c:	50a3      	str	r3, [r4, r2]
 800632e:	e7e2      	b.n	80062f6 <_malloc_r+0x82>
 8006330:	605a      	str	r2, [r3, #4]
 8006332:	e7ec      	b.n	800630e <_malloc_r+0x9a>
 8006334:	6862      	ldr	r2, [r4, #4]
 8006336:	42a3      	cmp	r3, r4
 8006338:	d101      	bne.n	800633e <_malloc_r+0xca>
 800633a:	602a      	str	r2, [r5, #0]
 800633c:	e7ea      	b.n	8006314 <_malloc_r+0xa0>
 800633e:	605a      	str	r2, [r3, #4]
 8006340:	e7e8      	b.n	8006314 <_malloc_r+0xa0>
 8006342:	0023      	movs	r3, r4
 8006344:	6864      	ldr	r4, [r4, #4]
 8006346:	e7a7      	b.n	8006298 <_malloc_r+0x24>
 8006348:	002c      	movs	r4, r5
 800634a:	686d      	ldr	r5, [r5, #4]
 800634c:	e7af      	b.n	80062ae <_malloc_r+0x3a>
 800634e:	230c      	movs	r3, #12
 8006350:	0030      	movs	r0, r6
 8006352:	6033      	str	r3, [r6, #0]
 8006354:	f000 fd9a 	bl	8006e8c <__malloc_unlock>
 8006358:	e7cd      	b.n	80062f6 <_malloc_r+0x82>
 800635a:	46c0      	nop			; (mov r8, r8)
 800635c:	20000258 	.word	0x20000258

08006360 <__sfputc_r>:
 8006360:	6893      	ldr	r3, [r2, #8]
 8006362:	b510      	push	{r4, lr}
 8006364:	3b01      	subs	r3, #1
 8006366:	6093      	str	r3, [r2, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	da04      	bge.n	8006376 <__sfputc_r+0x16>
 800636c:	6994      	ldr	r4, [r2, #24]
 800636e:	42a3      	cmp	r3, r4
 8006370:	db07      	blt.n	8006382 <__sfputc_r+0x22>
 8006372:	290a      	cmp	r1, #10
 8006374:	d005      	beq.n	8006382 <__sfputc_r+0x22>
 8006376:	6813      	ldr	r3, [r2, #0]
 8006378:	1c58      	adds	r0, r3, #1
 800637a:	6010      	str	r0, [r2, #0]
 800637c:	7019      	strb	r1, [r3, #0]
 800637e:	0008      	movs	r0, r1
 8006380:	bd10      	pop	{r4, pc}
 8006382:	f000 fb2f 	bl	80069e4 <__swbuf_r>
 8006386:	0001      	movs	r1, r0
 8006388:	e7f9      	b.n	800637e <__sfputc_r+0x1e>

0800638a <__sfputs_r>:
 800638a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638c:	0006      	movs	r6, r0
 800638e:	000f      	movs	r7, r1
 8006390:	0014      	movs	r4, r2
 8006392:	18d5      	adds	r5, r2, r3
 8006394:	42ac      	cmp	r4, r5
 8006396:	d101      	bne.n	800639c <__sfputs_r+0x12>
 8006398:	2000      	movs	r0, #0
 800639a:	e007      	b.n	80063ac <__sfputs_r+0x22>
 800639c:	7821      	ldrb	r1, [r4, #0]
 800639e:	003a      	movs	r2, r7
 80063a0:	0030      	movs	r0, r6
 80063a2:	f7ff ffdd 	bl	8006360 <__sfputc_r>
 80063a6:	3401      	adds	r4, #1
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d1f3      	bne.n	8006394 <__sfputs_r+0xa>
 80063ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063b0 <_vfiprintf_r>:
 80063b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063b2:	b0a1      	sub	sp, #132	; 0x84
 80063b4:	0006      	movs	r6, r0
 80063b6:	000c      	movs	r4, r1
 80063b8:	001f      	movs	r7, r3
 80063ba:	9203      	str	r2, [sp, #12]
 80063bc:	2800      	cmp	r0, #0
 80063be:	d004      	beq.n	80063ca <_vfiprintf_r+0x1a>
 80063c0:	6983      	ldr	r3, [r0, #24]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <_vfiprintf_r+0x1a>
 80063c6:	f7ff fe8f 	bl	80060e8 <__sinit>
 80063ca:	4b8e      	ldr	r3, [pc, #568]	; (8006604 <_vfiprintf_r+0x254>)
 80063cc:	429c      	cmp	r4, r3
 80063ce:	d11c      	bne.n	800640a <_vfiprintf_r+0x5a>
 80063d0:	6874      	ldr	r4, [r6, #4]
 80063d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063d4:	07db      	lsls	r3, r3, #31
 80063d6:	d405      	bmi.n	80063e4 <_vfiprintf_r+0x34>
 80063d8:	89a3      	ldrh	r3, [r4, #12]
 80063da:	059b      	lsls	r3, r3, #22
 80063dc:	d402      	bmi.n	80063e4 <_vfiprintf_r+0x34>
 80063de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063e0:	f7ff ff23 	bl	800622a <__retarget_lock_acquire_recursive>
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	071b      	lsls	r3, r3, #28
 80063e8:	d502      	bpl.n	80063f0 <_vfiprintf_r+0x40>
 80063ea:	6923      	ldr	r3, [r4, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d11d      	bne.n	800642c <_vfiprintf_r+0x7c>
 80063f0:	0021      	movs	r1, r4
 80063f2:	0030      	movs	r0, r6
 80063f4:	f000 fb60 	bl	8006ab8 <__swsetup_r>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d017      	beq.n	800642c <_vfiprintf_r+0x7c>
 80063fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063fe:	07db      	lsls	r3, r3, #31
 8006400:	d50d      	bpl.n	800641e <_vfiprintf_r+0x6e>
 8006402:	2001      	movs	r0, #1
 8006404:	4240      	negs	r0, r0
 8006406:	b021      	add	sp, #132	; 0x84
 8006408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800640a:	4b7f      	ldr	r3, [pc, #508]	; (8006608 <_vfiprintf_r+0x258>)
 800640c:	429c      	cmp	r4, r3
 800640e:	d101      	bne.n	8006414 <_vfiprintf_r+0x64>
 8006410:	68b4      	ldr	r4, [r6, #8]
 8006412:	e7de      	b.n	80063d2 <_vfiprintf_r+0x22>
 8006414:	4b7d      	ldr	r3, [pc, #500]	; (800660c <_vfiprintf_r+0x25c>)
 8006416:	429c      	cmp	r4, r3
 8006418:	d1db      	bne.n	80063d2 <_vfiprintf_r+0x22>
 800641a:	68f4      	ldr	r4, [r6, #12]
 800641c:	e7d9      	b.n	80063d2 <_vfiprintf_r+0x22>
 800641e:	89a3      	ldrh	r3, [r4, #12]
 8006420:	059b      	lsls	r3, r3, #22
 8006422:	d4ee      	bmi.n	8006402 <_vfiprintf_r+0x52>
 8006424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006426:	f7ff ff01 	bl	800622c <__retarget_lock_release_recursive>
 800642a:	e7ea      	b.n	8006402 <_vfiprintf_r+0x52>
 800642c:	2300      	movs	r3, #0
 800642e:	ad08      	add	r5, sp, #32
 8006430:	616b      	str	r3, [r5, #20]
 8006432:	3320      	adds	r3, #32
 8006434:	766b      	strb	r3, [r5, #25]
 8006436:	3310      	adds	r3, #16
 8006438:	76ab      	strb	r3, [r5, #26]
 800643a:	9707      	str	r7, [sp, #28]
 800643c:	9f03      	ldr	r7, [sp, #12]
 800643e:	783b      	ldrb	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <_vfiprintf_r+0x98>
 8006444:	2b25      	cmp	r3, #37	; 0x25
 8006446:	d14e      	bne.n	80064e6 <_vfiprintf_r+0x136>
 8006448:	9b03      	ldr	r3, [sp, #12]
 800644a:	1afb      	subs	r3, r7, r3
 800644c:	9305      	str	r3, [sp, #20]
 800644e:	9b03      	ldr	r3, [sp, #12]
 8006450:	429f      	cmp	r7, r3
 8006452:	d00d      	beq.n	8006470 <_vfiprintf_r+0xc0>
 8006454:	9b05      	ldr	r3, [sp, #20]
 8006456:	0021      	movs	r1, r4
 8006458:	0030      	movs	r0, r6
 800645a:	9a03      	ldr	r2, [sp, #12]
 800645c:	f7ff ff95 	bl	800638a <__sfputs_r>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d100      	bne.n	8006466 <_vfiprintf_r+0xb6>
 8006464:	e0b5      	b.n	80065d2 <_vfiprintf_r+0x222>
 8006466:	696a      	ldr	r2, [r5, #20]
 8006468:	9b05      	ldr	r3, [sp, #20]
 800646a:	4694      	mov	ip, r2
 800646c:	4463      	add	r3, ip
 800646e:	616b      	str	r3, [r5, #20]
 8006470:	783b      	ldrb	r3, [r7, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d100      	bne.n	8006478 <_vfiprintf_r+0xc8>
 8006476:	e0ac      	b.n	80065d2 <_vfiprintf_r+0x222>
 8006478:	2201      	movs	r2, #1
 800647a:	1c7b      	adds	r3, r7, #1
 800647c:	9303      	str	r3, [sp, #12]
 800647e:	2300      	movs	r3, #0
 8006480:	4252      	negs	r2, r2
 8006482:	606a      	str	r2, [r5, #4]
 8006484:	a904      	add	r1, sp, #16
 8006486:	3254      	adds	r2, #84	; 0x54
 8006488:	1852      	adds	r2, r2, r1
 800648a:	602b      	str	r3, [r5, #0]
 800648c:	60eb      	str	r3, [r5, #12]
 800648e:	60ab      	str	r3, [r5, #8]
 8006490:	7013      	strb	r3, [r2, #0]
 8006492:	65ab      	str	r3, [r5, #88]	; 0x58
 8006494:	9b03      	ldr	r3, [sp, #12]
 8006496:	2205      	movs	r2, #5
 8006498:	7819      	ldrb	r1, [r3, #0]
 800649a:	485d      	ldr	r0, [pc, #372]	; (8006610 <_vfiprintf_r+0x260>)
 800649c:	f000 fce2 	bl	8006e64 <memchr>
 80064a0:	9b03      	ldr	r3, [sp, #12]
 80064a2:	1c5f      	adds	r7, r3, #1
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d120      	bne.n	80064ea <_vfiprintf_r+0x13a>
 80064a8:	682a      	ldr	r2, [r5, #0]
 80064aa:	06d3      	lsls	r3, r2, #27
 80064ac:	d504      	bpl.n	80064b8 <_vfiprintf_r+0x108>
 80064ae:	2353      	movs	r3, #83	; 0x53
 80064b0:	a904      	add	r1, sp, #16
 80064b2:	185b      	adds	r3, r3, r1
 80064b4:	2120      	movs	r1, #32
 80064b6:	7019      	strb	r1, [r3, #0]
 80064b8:	0713      	lsls	r3, r2, #28
 80064ba:	d504      	bpl.n	80064c6 <_vfiprintf_r+0x116>
 80064bc:	2353      	movs	r3, #83	; 0x53
 80064be:	a904      	add	r1, sp, #16
 80064c0:	185b      	adds	r3, r3, r1
 80064c2:	212b      	movs	r1, #43	; 0x2b
 80064c4:	7019      	strb	r1, [r3, #0]
 80064c6:	9b03      	ldr	r3, [sp, #12]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b2a      	cmp	r3, #42	; 0x2a
 80064cc:	d016      	beq.n	80064fc <_vfiprintf_r+0x14c>
 80064ce:	2100      	movs	r1, #0
 80064d0:	68eb      	ldr	r3, [r5, #12]
 80064d2:	9f03      	ldr	r7, [sp, #12]
 80064d4:	783a      	ldrb	r2, [r7, #0]
 80064d6:	1c78      	adds	r0, r7, #1
 80064d8:	3a30      	subs	r2, #48	; 0x30
 80064da:	4684      	mov	ip, r0
 80064dc:	2a09      	cmp	r2, #9
 80064de:	d94f      	bls.n	8006580 <_vfiprintf_r+0x1d0>
 80064e0:	2900      	cmp	r1, #0
 80064e2:	d111      	bne.n	8006508 <_vfiprintf_r+0x158>
 80064e4:	e017      	b.n	8006516 <_vfiprintf_r+0x166>
 80064e6:	3701      	adds	r7, #1
 80064e8:	e7a9      	b.n	800643e <_vfiprintf_r+0x8e>
 80064ea:	4b49      	ldr	r3, [pc, #292]	; (8006610 <_vfiprintf_r+0x260>)
 80064ec:	682a      	ldr	r2, [r5, #0]
 80064ee:	1ac0      	subs	r0, r0, r3
 80064f0:	2301      	movs	r3, #1
 80064f2:	4083      	lsls	r3, r0
 80064f4:	4313      	orrs	r3, r2
 80064f6:	602b      	str	r3, [r5, #0]
 80064f8:	9703      	str	r7, [sp, #12]
 80064fa:	e7cb      	b.n	8006494 <_vfiprintf_r+0xe4>
 80064fc:	9b07      	ldr	r3, [sp, #28]
 80064fe:	1d19      	adds	r1, r3, #4
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	9107      	str	r1, [sp, #28]
 8006504:	2b00      	cmp	r3, #0
 8006506:	db01      	blt.n	800650c <_vfiprintf_r+0x15c>
 8006508:	930b      	str	r3, [sp, #44]	; 0x2c
 800650a:	e004      	b.n	8006516 <_vfiprintf_r+0x166>
 800650c:	425b      	negs	r3, r3
 800650e:	60eb      	str	r3, [r5, #12]
 8006510:	2302      	movs	r3, #2
 8006512:	4313      	orrs	r3, r2
 8006514:	602b      	str	r3, [r5, #0]
 8006516:	783b      	ldrb	r3, [r7, #0]
 8006518:	2b2e      	cmp	r3, #46	; 0x2e
 800651a:	d10a      	bne.n	8006532 <_vfiprintf_r+0x182>
 800651c:	787b      	ldrb	r3, [r7, #1]
 800651e:	2b2a      	cmp	r3, #42	; 0x2a
 8006520:	d137      	bne.n	8006592 <_vfiprintf_r+0x1e2>
 8006522:	9b07      	ldr	r3, [sp, #28]
 8006524:	3702      	adds	r7, #2
 8006526:	1d1a      	adds	r2, r3, #4
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	9207      	str	r2, [sp, #28]
 800652c:	2b00      	cmp	r3, #0
 800652e:	db2d      	blt.n	800658c <_vfiprintf_r+0x1dc>
 8006530:	9309      	str	r3, [sp, #36]	; 0x24
 8006532:	2203      	movs	r2, #3
 8006534:	7839      	ldrb	r1, [r7, #0]
 8006536:	4837      	ldr	r0, [pc, #220]	; (8006614 <_vfiprintf_r+0x264>)
 8006538:	f000 fc94 	bl	8006e64 <memchr>
 800653c:	2800      	cmp	r0, #0
 800653e:	d007      	beq.n	8006550 <_vfiprintf_r+0x1a0>
 8006540:	4b34      	ldr	r3, [pc, #208]	; (8006614 <_vfiprintf_r+0x264>)
 8006542:	682a      	ldr	r2, [r5, #0]
 8006544:	1ac0      	subs	r0, r0, r3
 8006546:	2340      	movs	r3, #64	; 0x40
 8006548:	4083      	lsls	r3, r0
 800654a:	4313      	orrs	r3, r2
 800654c:	3701      	adds	r7, #1
 800654e:	602b      	str	r3, [r5, #0]
 8006550:	7839      	ldrb	r1, [r7, #0]
 8006552:	1c7b      	adds	r3, r7, #1
 8006554:	2206      	movs	r2, #6
 8006556:	4830      	ldr	r0, [pc, #192]	; (8006618 <_vfiprintf_r+0x268>)
 8006558:	9303      	str	r3, [sp, #12]
 800655a:	7629      	strb	r1, [r5, #24]
 800655c:	f000 fc82 	bl	8006e64 <memchr>
 8006560:	2800      	cmp	r0, #0
 8006562:	d045      	beq.n	80065f0 <_vfiprintf_r+0x240>
 8006564:	4b2d      	ldr	r3, [pc, #180]	; (800661c <_vfiprintf_r+0x26c>)
 8006566:	2b00      	cmp	r3, #0
 8006568:	d127      	bne.n	80065ba <_vfiprintf_r+0x20a>
 800656a:	2207      	movs	r2, #7
 800656c:	9b07      	ldr	r3, [sp, #28]
 800656e:	3307      	adds	r3, #7
 8006570:	4393      	bics	r3, r2
 8006572:	3308      	adds	r3, #8
 8006574:	9307      	str	r3, [sp, #28]
 8006576:	696b      	ldr	r3, [r5, #20]
 8006578:	9a04      	ldr	r2, [sp, #16]
 800657a:	189b      	adds	r3, r3, r2
 800657c:	616b      	str	r3, [r5, #20]
 800657e:	e75d      	b.n	800643c <_vfiprintf_r+0x8c>
 8006580:	210a      	movs	r1, #10
 8006582:	434b      	muls	r3, r1
 8006584:	4667      	mov	r7, ip
 8006586:	189b      	adds	r3, r3, r2
 8006588:	3909      	subs	r1, #9
 800658a:	e7a3      	b.n	80064d4 <_vfiprintf_r+0x124>
 800658c:	2301      	movs	r3, #1
 800658e:	425b      	negs	r3, r3
 8006590:	e7ce      	b.n	8006530 <_vfiprintf_r+0x180>
 8006592:	2300      	movs	r3, #0
 8006594:	001a      	movs	r2, r3
 8006596:	3701      	adds	r7, #1
 8006598:	606b      	str	r3, [r5, #4]
 800659a:	7839      	ldrb	r1, [r7, #0]
 800659c:	1c78      	adds	r0, r7, #1
 800659e:	3930      	subs	r1, #48	; 0x30
 80065a0:	4684      	mov	ip, r0
 80065a2:	2909      	cmp	r1, #9
 80065a4:	d903      	bls.n	80065ae <_vfiprintf_r+0x1fe>
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0c3      	beq.n	8006532 <_vfiprintf_r+0x182>
 80065aa:	9209      	str	r2, [sp, #36]	; 0x24
 80065ac:	e7c1      	b.n	8006532 <_vfiprintf_r+0x182>
 80065ae:	230a      	movs	r3, #10
 80065b0:	435a      	muls	r2, r3
 80065b2:	4667      	mov	r7, ip
 80065b4:	1852      	adds	r2, r2, r1
 80065b6:	3b09      	subs	r3, #9
 80065b8:	e7ef      	b.n	800659a <_vfiprintf_r+0x1ea>
 80065ba:	ab07      	add	r3, sp, #28
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	0022      	movs	r2, r4
 80065c0:	0029      	movs	r1, r5
 80065c2:	0030      	movs	r0, r6
 80065c4:	4b16      	ldr	r3, [pc, #88]	; (8006620 <_vfiprintf_r+0x270>)
 80065c6:	e000      	b.n	80065ca <_vfiprintf_r+0x21a>
 80065c8:	bf00      	nop
 80065ca:	9004      	str	r0, [sp, #16]
 80065cc:	9b04      	ldr	r3, [sp, #16]
 80065ce:	3301      	adds	r3, #1
 80065d0:	d1d1      	bne.n	8006576 <_vfiprintf_r+0x1c6>
 80065d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065d4:	07db      	lsls	r3, r3, #31
 80065d6:	d405      	bmi.n	80065e4 <_vfiprintf_r+0x234>
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	059b      	lsls	r3, r3, #22
 80065dc:	d402      	bmi.n	80065e4 <_vfiprintf_r+0x234>
 80065de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065e0:	f7ff fe24 	bl	800622c <__retarget_lock_release_recursive>
 80065e4:	89a3      	ldrh	r3, [r4, #12]
 80065e6:	065b      	lsls	r3, r3, #25
 80065e8:	d500      	bpl.n	80065ec <_vfiprintf_r+0x23c>
 80065ea:	e70a      	b.n	8006402 <_vfiprintf_r+0x52>
 80065ec:	980d      	ldr	r0, [sp, #52]	; 0x34
 80065ee:	e70a      	b.n	8006406 <_vfiprintf_r+0x56>
 80065f0:	ab07      	add	r3, sp, #28
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	0022      	movs	r2, r4
 80065f6:	0029      	movs	r1, r5
 80065f8:	0030      	movs	r0, r6
 80065fa:	4b09      	ldr	r3, [pc, #36]	; (8006620 <_vfiprintf_r+0x270>)
 80065fc:	f000 f882 	bl	8006704 <_printf_i>
 8006600:	e7e3      	b.n	80065ca <_vfiprintf_r+0x21a>
 8006602:	46c0      	nop			; (mov r8, r8)
 8006604:	0800756c 	.word	0x0800756c
 8006608:	0800758c 	.word	0x0800758c
 800660c:	0800754c 	.word	0x0800754c
 8006610:	080075ac 	.word	0x080075ac
 8006614:	080075b2 	.word	0x080075b2
 8006618:	080075b6 	.word	0x080075b6
 800661c:	00000000 	.word	0x00000000
 8006620:	0800638b 	.word	0x0800638b

08006624 <_printf_common>:
 8006624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006626:	0015      	movs	r5, r2
 8006628:	9301      	str	r3, [sp, #4]
 800662a:	688a      	ldr	r2, [r1, #8]
 800662c:	690b      	ldr	r3, [r1, #16]
 800662e:	000c      	movs	r4, r1
 8006630:	9000      	str	r0, [sp, #0]
 8006632:	4293      	cmp	r3, r2
 8006634:	da00      	bge.n	8006638 <_printf_common+0x14>
 8006636:	0013      	movs	r3, r2
 8006638:	0022      	movs	r2, r4
 800663a:	602b      	str	r3, [r5, #0]
 800663c:	3243      	adds	r2, #67	; 0x43
 800663e:	7812      	ldrb	r2, [r2, #0]
 8006640:	2a00      	cmp	r2, #0
 8006642:	d001      	beq.n	8006648 <_printf_common+0x24>
 8006644:	3301      	adds	r3, #1
 8006646:	602b      	str	r3, [r5, #0]
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	069b      	lsls	r3, r3, #26
 800664c:	d502      	bpl.n	8006654 <_printf_common+0x30>
 800664e:	682b      	ldr	r3, [r5, #0]
 8006650:	3302      	adds	r3, #2
 8006652:	602b      	str	r3, [r5, #0]
 8006654:	6822      	ldr	r2, [r4, #0]
 8006656:	2306      	movs	r3, #6
 8006658:	0017      	movs	r7, r2
 800665a:	401f      	ands	r7, r3
 800665c:	421a      	tst	r2, r3
 800665e:	d027      	beq.n	80066b0 <_printf_common+0x8c>
 8006660:	0023      	movs	r3, r4
 8006662:	3343      	adds	r3, #67	; 0x43
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	1e5a      	subs	r2, r3, #1
 8006668:	4193      	sbcs	r3, r2
 800666a:	6822      	ldr	r2, [r4, #0]
 800666c:	0692      	lsls	r2, r2, #26
 800666e:	d430      	bmi.n	80066d2 <_printf_common+0xae>
 8006670:	0022      	movs	r2, r4
 8006672:	9901      	ldr	r1, [sp, #4]
 8006674:	9800      	ldr	r0, [sp, #0]
 8006676:	9e08      	ldr	r6, [sp, #32]
 8006678:	3243      	adds	r2, #67	; 0x43
 800667a:	47b0      	blx	r6
 800667c:	1c43      	adds	r3, r0, #1
 800667e:	d025      	beq.n	80066cc <_printf_common+0xa8>
 8006680:	2306      	movs	r3, #6
 8006682:	6820      	ldr	r0, [r4, #0]
 8006684:	682a      	ldr	r2, [r5, #0]
 8006686:	68e1      	ldr	r1, [r4, #12]
 8006688:	2500      	movs	r5, #0
 800668a:	4003      	ands	r3, r0
 800668c:	2b04      	cmp	r3, #4
 800668e:	d103      	bne.n	8006698 <_printf_common+0x74>
 8006690:	1a8d      	subs	r5, r1, r2
 8006692:	43eb      	mvns	r3, r5
 8006694:	17db      	asrs	r3, r3, #31
 8006696:	401d      	ands	r5, r3
 8006698:	68a3      	ldr	r3, [r4, #8]
 800669a:	6922      	ldr	r2, [r4, #16]
 800669c:	4293      	cmp	r3, r2
 800669e:	dd01      	ble.n	80066a4 <_printf_common+0x80>
 80066a0:	1a9b      	subs	r3, r3, r2
 80066a2:	18ed      	adds	r5, r5, r3
 80066a4:	2700      	movs	r7, #0
 80066a6:	42bd      	cmp	r5, r7
 80066a8:	d120      	bne.n	80066ec <_printf_common+0xc8>
 80066aa:	2000      	movs	r0, #0
 80066ac:	e010      	b.n	80066d0 <_printf_common+0xac>
 80066ae:	3701      	adds	r7, #1
 80066b0:	68e3      	ldr	r3, [r4, #12]
 80066b2:	682a      	ldr	r2, [r5, #0]
 80066b4:	1a9b      	subs	r3, r3, r2
 80066b6:	42bb      	cmp	r3, r7
 80066b8:	ddd2      	ble.n	8006660 <_printf_common+0x3c>
 80066ba:	0022      	movs	r2, r4
 80066bc:	2301      	movs	r3, #1
 80066be:	9901      	ldr	r1, [sp, #4]
 80066c0:	9800      	ldr	r0, [sp, #0]
 80066c2:	9e08      	ldr	r6, [sp, #32]
 80066c4:	3219      	adds	r2, #25
 80066c6:	47b0      	blx	r6
 80066c8:	1c43      	adds	r3, r0, #1
 80066ca:	d1f0      	bne.n	80066ae <_printf_common+0x8a>
 80066cc:	2001      	movs	r0, #1
 80066ce:	4240      	negs	r0, r0
 80066d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066d2:	2030      	movs	r0, #48	; 0x30
 80066d4:	18e1      	adds	r1, r4, r3
 80066d6:	3143      	adds	r1, #67	; 0x43
 80066d8:	7008      	strb	r0, [r1, #0]
 80066da:	0021      	movs	r1, r4
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	3145      	adds	r1, #69	; 0x45
 80066e0:	7809      	ldrb	r1, [r1, #0]
 80066e2:	18a2      	adds	r2, r4, r2
 80066e4:	3243      	adds	r2, #67	; 0x43
 80066e6:	3302      	adds	r3, #2
 80066e8:	7011      	strb	r1, [r2, #0]
 80066ea:	e7c1      	b.n	8006670 <_printf_common+0x4c>
 80066ec:	0022      	movs	r2, r4
 80066ee:	2301      	movs	r3, #1
 80066f0:	9901      	ldr	r1, [sp, #4]
 80066f2:	9800      	ldr	r0, [sp, #0]
 80066f4:	9e08      	ldr	r6, [sp, #32]
 80066f6:	321a      	adds	r2, #26
 80066f8:	47b0      	blx	r6
 80066fa:	1c43      	adds	r3, r0, #1
 80066fc:	d0e6      	beq.n	80066cc <_printf_common+0xa8>
 80066fe:	3701      	adds	r7, #1
 8006700:	e7d1      	b.n	80066a6 <_printf_common+0x82>
	...

08006704 <_printf_i>:
 8006704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006706:	b08b      	sub	sp, #44	; 0x2c
 8006708:	9206      	str	r2, [sp, #24]
 800670a:	000a      	movs	r2, r1
 800670c:	3243      	adds	r2, #67	; 0x43
 800670e:	9307      	str	r3, [sp, #28]
 8006710:	9005      	str	r0, [sp, #20]
 8006712:	9204      	str	r2, [sp, #16]
 8006714:	7e0a      	ldrb	r2, [r1, #24]
 8006716:	000c      	movs	r4, r1
 8006718:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800671a:	2a78      	cmp	r2, #120	; 0x78
 800671c:	d807      	bhi.n	800672e <_printf_i+0x2a>
 800671e:	2a62      	cmp	r2, #98	; 0x62
 8006720:	d809      	bhi.n	8006736 <_printf_i+0x32>
 8006722:	2a00      	cmp	r2, #0
 8006724:	d100      	bne.n	8006728 <_printf_i+0x24>
 8006726:	e0c1      	b.n	80068ac <_printf_i+0x1a8>
 8006728:	2a58      	cmp	r2, #88	; 0x58
 800672a:	d100      	bne.n	800672e <_printf_i+0x2a>
 800672c:	e08c      	b.n	8006848 <_printf_i+0x144>
 800672e:	0026      	movs	r6, r4
 8006730:	3642      	adds	r6, #66	; 0x42
 8006732:	7032      	strb	r2, [r6, #0]
 8006734:	e022      	b.n	800677c <_printf_i+0x78>
 8006736:	0010      	movs	r0, r2
 8006738:	3863      	subs	r0, #99	; 0x63
 800673a:	2815      	cmp	r0, #21
 800673c:	d8f7      	bhi.n	800672e <_printf_i+0x2a>
 800673e:	f7f9 fce1 	bl	8000104 <__gnu_thumb1_case_shi>
 8006742:	0016      	.short	0x0016
 8006744:	fff6001f 	.word	0xfff6001f
 8006748:	fff6fff6 	.word	0xfff6fff6
 800674c:	001ffff6 	.word	0x001ffff6
 8006750:	fff6fff6 	.word	0xfff6fff6
 8006754:	fff6fff6 	.word	0xfff6fff6
 8006758:	003600a8 	.word	0x003600a8
 800675c:	fff6009a 	.word	0xfff6009a
 8006760:	00b9fff6 	.word	0x00b9fff6
 8006764:	0036fff6 	.word	0x0036fff6
 8006768:	fff6fff6 	.word	0xfff6fff6
 800676c:	009e      	.short	0x009e
 800676e:	0026      	movs	r6, r4
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	3642      	adds	r6, #66	; 0x42
 8006774:	1d11      	adds	r1, r2, #4
 8006776:	6019      	str	r1, [r3, #0]
 8006778:	6813      	ldr	r3, [r2, #0]
 800677a:	7033      	strb	r3, [r6, #0]
 800677c:	2301      	movs	r3, #1
 800677e:	e0a7      	b.n	80068d0 <_printf_i+0x1cc>
 8006780:	6808      	ldr	r0, [r1, #0]
 8006782:	6819      	ldr	r1, [r3, #0]
 8006784:	1d0a      	adds	r2, r1, #4
 8006786:	0605      	lsls	r5, r0, #24
 8006788:	d50b      	bpl.n	80067a2 <_printf_i+0x9e>
 800678a:	680d      	ldr	r5, [r1, #0]
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	2d00      	cmp	r5, #0
 8006790:	da03      	bge.n	800679a <_printf_i+0x96>
 8006792:	232d      	movs	r3, #45	; 0x2d
 8006794:	9a04      	ldr	r2, [sp, #16]
 8006796:	426d      	negs	r5, r5
 8006798:	7013      	strb	r3, [r2, #0]
 800679a:	4b61      	ldr	r3, [pc, #388]	; (8006920 <_printf_i+0x21c>)
 800679c:	270a      	movs	r7, #10
 800679e:	9303      	str	r3, [sp, #12]
 80067a0:	e01b      	b.n	80067da <_printf_i+0xd6>
 80067a2:	680d      	ldr	r5, [r1, #0]
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	0641      	lsls	r1, r0, #25
 80067a8:	d5f1      	bpl.n	800678e <_printf_i+0x8a>
 80067aa:	b22d      	sxth	r5, r5
 80067ac:	e7ef      	b.n	800678e <_printf_i+0x8a>
 80067ae:	680d      	ldr	r5, [r1, #0]
 80067b0:	6819      	ldr	r1, [r3, #0]
 80067b2:	1d08      	adds	r0, r1, #4
 80067b4:	6018      	str	r0, [r3, #0]
 80067b6:	062e      	lsls	r6, r5, #24
 80067b8:	d501      	bpl.n	80067be <_printf_i+0xba>
 80067ba:	680d      	ldr	r5, [r1, #0]
 80067bc:	e003      	b.n	80067c6 <_printf_i+0xc2>
 80067be:	066d      	lsls	r5, r5, #25
 80067c0:	d5fb      	bpl.n	80067ba <_printf_i+0xb6>
 80067c2:	680d      	ldr	r5, [r1, #0]
 80067c4:	b2ad      	uxth	r5, r5
 80067c6:	4b56      	ldr	r3, [pc, #344]	; (8006920 <_printf_i+0x21c>)
 80067c8:	2708      	movs	r7, #8
 80067ca:	9303      	str	r3, [sp, #12]
 80067cc:	2a6f      	cmp	r2, #111	; 0x6f
 80067ce:	d000      	beq.n	80067d2 <_printf_i+0xce>
 80067d0:	3702      	adds	r7, #2
 80067d2:	0023      	movs	r3, r4
 80067d4:	2200      	movs	r2, #0
 80067d6:	3343      	adds	r3, #67	; 0x43
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	6863      	ldr	r3, [r4, #4]
 80067dc:	60a3      	str	r3, [r4, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	db03      	blt.n	80067ea <_printf_i+0xe6>
 80067e2:	2204      	movs	r2, #4
 80067e4:	6821      	ldr	r1, [r4, #0]
 80067e6:	4391      	bics	r1, r2
 80067e8:	6021      	str	r1, [r4, #0]
 80067ea:	2d00      	cmp	r5, #0
 80067ec:	d102      	bne.n	80067f4 <_printf_i+0xf0>
 80067ee:	9e04      	ldr	r6, [sp, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00c      	beq.n	800680e <_printf_i+0x10a>
 80067f4:	9e04      	ldr	r6, [sp, #16]
 80067f6:	0028      	movs	r0, r5
 80067f8:	0039      	movs	r1, r7
 80067fa:	f7f9 fd13 	bl	8000224 <__aeabi_uidivmod>
 80067fe:	9b03      	ldr	r3, [sp, #12]
 8006800:	3e01      	subs	r6, #1
 8006802:	5c5b      	ldrb	r3, [r3, r1]
 8006804:	7033      	strb	r3, [r6, #0]
 8006806:	002b      	movs	r3, r5
 8006808:	0005      	movs	r5, r0
 800680a:	429f      	cmp	r7, r3
 800680c:	d9f3      	bls.n	80067f6 <_printf_i+0xf2>
 800680e:	2f08      	cmp	r7, #8
 8006810:	d109      	bne.n	8006826 <_printf_i+0x122>
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	07db      	lsls	r3, r3, #31
 8006816:	d506      	bpl.n	8006826 <_printf_i+0x122>
 8006818:	6863      	ldr	r3, [r4, #4]
 800681a:	6922      	ldr	r2, [r4, #16]
 800681c:	4293      	cmp	r3, r2
 800681e:	dc02      	bgt.n	8006826 <_printf_i+0x122>
 8006820:	2330      	movs	r3, #48	; 0x30
 8006822:	3e01      	subs	r6, #1
 8006824:	7033      	strb	r3, [r6, #0]
 8006826:	9b04      	ldr	r3, [sp, #16]
 8006828:	1b9b      	subs	r3, r3, r6
 800682a:	6123      	str	r3, [r4, #16]
 800682c:	9b07      	ldr	r3, [sp, #28]
 800682e:	0021      	movs	r1, r4
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	9805      	ldr	r0, [sp, #20]
 8006834:	9b06      	ldr	r3, [sp, #24]
 8006836:	aa09      	add	r2, sp, #36	; 0x24
 8006838:	f7ff fef4 	bl	8006624 <_printf_common>
 800683c:	1c43      	adds	r3, r0, #1
 800683e:	d14c      	bne.n	80068da <_printf_i+0x1d6>
 8006840:	2001      	movs	r0, #1
 8006842:	4240      	negs	r0, r0
 8006844:	b00b      	add	sp, #44	; 0x2c
 8006846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006848:	3145      	adds	r1, #69	; 0x45
 800684a:	700a      	strb	r2, [r1, #0]
 800684c:	4a34      	ldr	r2, [pc, #208]	; (8006920 <_printf_i+0x21c>)
 800684e:	9203      	str	r2, [sp, #12]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	6821      	ldr	r1, [r4, #0]
 8006854:	ca20      	ldmia	r2!, {r5}
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	0608      	lsls	r0, r1, #24
 800685a:	d516      	bpl.n	800688a <_printf_i+0x186>
 800685c:	07cb      	lsls	r3, r1, #31
 800685e:	d502      	bpl.n	8006866 <_printf_i+0x162>
 8006860:	2320      	movs	r3, #32
 8006862:	4319      	orrs	r1, r3
 8006864:	6021      	str	r1, [r4, #0]
 8006866:	2710      	movs	r7, #16
 8006868:	2d00      	cmp	r5, #0
 800686a:	d1b2      	bne.n	80067d2 <_printf_i+0xce>
 800686c:	2320      	movs	r3, #32
 800686e:	6822      	ldr	r2, [r4, #0]
 8006870:	439a      	bics	r2, r3
 8006872:	6022      	str	r2, [r4, #0]
 8006874:	e7ad      	b.n	80067d2 <_printf_i+0xce>
 8006876:	2220      	movs	r2, #32
 8006878:	6809      	ldr	r1, [r1, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	6022      	str	r2, [r4, #0]
 800687e:	0022      	movs	r2, r4
 8006880:	2178      	movs	r1, #120	; 0x78
 8006882:	3245      	adds	r2, #69	; 0x45
 8006884:	7011      	strb	r1, [r2, #0]
 8006886:	4a27      	ldr	r2, [pc, #156]	; (8006924 <_printf_i+0x220>)
 8006888:	e7e1      	b.n	800684e <_printf_i+0x14a>
 800688a:	0648      	lsls	r0, r1, #25
 800688c:	d5e6      	bpl.n	800685c <_printf_i+0x158>
 800688e:	b2ad      	uxth	r5, r5
 8006890:	e7e4      	b.n	800685c <_printf_i+0x158>
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	680d      	ldr	r5, [r1, #0]
 8006896:	1d10      	adds	r0, r2, #4
 8006898:	6949      	ldr	r1, [r1, #20]
 800689a:	6018      	str	r0, [r3, #0]
 800689c:	6813      	ldr	r3, [r2, #0]
 800689e:	062e      	lsls	r6, r5, #24
 80068a0:	d501      	bpl.n	80068a6 <_printf_i+0x1a2>
 80068a2:	6019      	str	r1, [r3, #0]
 80068a4:	e002      	b.n	80068ac <_printf_i+0x1a8>
 80068a6:	066d      	lsls	r5, r5, #25
 80068a8:	d5fb      	bpl.n	80068a2 <_printf_i+0x19e>
 80068aa:	8019      	strh	r1, [r3, #0]
 80068ac:	2300      	movs	r3, #0
 80068ae:	9e04      	ldr	r6, [sp, #16]
 80068b0:	6123      	str	r3, [r4, #16]
 80068b2:	e7bb      	b.n	800682c <_printf_i+0x128>
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	1d11      	adds	r1, r2, #4
 80068b8:	6019      	str	r1, [r3, #0]
 80068ba:	6816      	ldr	r6, [r2, #0]
 80068bc:	2100      	movs	r1, #0
 80068be:	0030      	movs	r0, r6
 80068c0:	6862      	ldr	r2, [r4, #4]
 80068c2:	f000 facf 	bl	8006e64 <memchr>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d001      	beq.n	80068ce <_printf_i+0x1ca>
 80068ca:	1b80      	subs	r0, r0, r6
 80068cc:	6060      	str	r0, [r4, #4]
 80068ce:	6863      	ldr	r3, [r4, #4]
 80068d0:	6123      	str	r3, [r4, #16]
 80068d2:	2300      	movs	r3, #0
 80068d4:	9a04      	ldr	r2, [sp, #16]
 80068d6:	7013      	strb	r3, [r2, #0]
 80068d8:	e7a8      	b.n	800682c <_printf_i+0x128>
 80068da:	6923      	ldr	r3, [r4, #16]
 80068dc:	0032      	movs	r2, r6
 80068de:	9906      	ldr	r1, [sp, #24]
 80068e0:	9805      	ldr	r0, [sp, #20]
 80068e2:	9d07      	ldr	r5, [sp, #28]
 80068e4:	47a8      	blx	r5
 80068e6:	1c43      	adds	r3, r0, #1
 80068e8:	d0aa      	beq.n	8006840 <_printf_i+0x13c>
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	079b      	lsls	r3, r3, #30
 80068ee:	d415      	bmi.n	800691c <_printf_i+0x218>
 80068f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f2:	68e0      	ldr	r0, [r4, #12]
 80068f4:	4298      	cmp	r0, r3
 80068f6:	daa5      	bge.n	8006844 <_printf_i+0x140>
 80068f8:	0018      	movs	r0, r3
 80068fa:	e7a3      	b.n	8006844 <_printf_i+0x140>
 80068fc:	0022      	movs	r2, r4
 80068fe:	2301      	movs	r3, #1
 8006900:	9906      	ldr	r1, [sp, #24]
 8006902:	9805      	ldr	r0, [sp, #20]
 8006904:	9e07      	ldr	r6, [sp, #28]
 8006906:	3219      	adds	r2, #25
 8006908:	47b0      	blx	r6
 800690a:	1c43      	adds	r3, r0, #1
 800690c:	d098      	beq.n	8006840 <_printf_i+0x13c>
 800690e:	3501      	adds	r5, #1
 8006910:	68e3      	ldr	r3, [r4, #12]
 8006912:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006914:	1a9b      	subs	r3, r3, r2
 8006916:	42ab      	cmp	r3, r5
 8006918:	dcf0      	bgt.n	80068fc <_printf_i+0x1f8>
 800691a:	e7e9      	b.n	80068f0 <_printf_i+0x1ec>
 800691c:	2500      	movs	r5, #0
 800691e:	e7f7      	b.n	8006910 <_printf_i+0x20c>
 8006920:	080075bd 	.word	0x080075bd
 8006924:	080075ce 	.word	0x080075ce

08006928 <_sbrk_r>:
 8006928:	2300      	movs	r3, #0
 800692a:	b570      	push	{r4, r5, r6, lr}
 800692c:	4d06      	ldr	r5, [pc, #24]	; (8006948 <_sbrk_r+0x20>)
 800692e:	0004      	movs	r4, r0
 8006930:	0008      	movs	r0, r1
 8006932:	602b      	str	r3, [r5, #0]
 8006934:	f7fb f856 	bl	80019e4 <_sbrk>
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	d103      	bne.n	8006944 <_sbrk_r+0x1c>
 800693c:	682b      	ldr	r3, [r5, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d000      	beq.n	8006944 <_sbrk_r+0x1c>
 8006942:	6023      	str	r3, [r4, #0]
 8006944:	bd70      	pop	{r4, r5, r6, pc}
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	20000260 	.word	0x20000260

0800694c <__sread>:
 800694c:	b570      	push	{r4, r5, r6, lr}
 800694e:	000c      	movs	r4, r1
 8006950:	250e      	movs	r5, #14
 8006952:	5f49      	ldrsh	r1, [r1, r5]
 8006954:	f000 faec 	bl	8006f30 <_read_r>
 8006958:	2800      	cmp	r0, #0
 800695a:	db03      	blt.n	8006964 <__sread+0x18>
 800695c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800695e:	181b      	adds	r3, r3, r0
 8006960:	6563      	str	r3, [r4, #84]	; 0x54
 8006962:	bd70      	pop	{r4, r5, r6, pc}
 8006964:	89a3      	ldrh	r3, [r4, #12]
 8006966:	4a02      	ldr	r2, [pc, #8]	; (8006970 <__sread+0x24>)
 8006968:	4013      	ands	r3, r2
 800696a:	81a3      	strh	r3, [r4, #12]
 800696c:	e7f9      	b.n	8006962 <__sread+0x16>
 800696e:	46c0      	nop			; (mov r8, r8)
 8006970:	ffffefff 	.word	0xffffefff

08006974 <__swrite>:
 8006974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006976:	001f      	movs	r7, r3
 8006978:	898b      	ldrh	r3, [r1, #12]
 800697a:	0005      	movs	r5, r0
 800697c:	000c      	movs	r4, r1
 800697e:	0016      	movs	r6, r2
 8006980:	05db      	lsls	r3, r3, #23
 8006982:	d505      	bpl.n	8006990 <__swrite+0x1c>
 8006984:	230e      	movs	r3, #14
 8006986:	5ec9      	ldrsh	r1, [r1, r3]
 8006988:	2200      	movs	r2, #0
 800698a:	2302      	movs	r3, #2
 800698c:	f000 f9ea 	bl	8006d64 <_lseek_r>
 8006990:	89a3      	ldrh	r3, [r4, #12]
 8006992:	4a05      	ldr	r2, [pc, #20]	; (80069a8 <__swrite+0x34>)
 8006994:	0028      	movs	r0, r5
 8006996:	4013      	ands	r3, r2
 8006998:	81a3      	strh	r3, [r4, #12]
 800699a:	0032      	movs	r2, r6
 800699c:	230e      	movs	r3, #14
 800699e:	5ee1      	ldrsh	r1, [r4, r3]
 80069a0:	003b      	movs	r3, r7
 80069a2:	f000 f875 	bl	8006a90 <_write_r>
 80069a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069a8:	ffffefff 	.word	0xffffefff

080069ac <__sseek>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	000c      	movs	r4, r1
 80069b0:	250e      	movs	r5, #14
 80069b2:	5f49      	ldrsh	r1, [r1, r5]
 80069b4:	f000 f9d6 	bl	8006d64 <_lseek_r>
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	1c42      	adds	r2, r0, #1
 80069bc:	d103      	bne.n	80069c6 <__sseek+0x1a>
 80069be:	4a05      	ldr	r2, [pc, #20]	; (80069d4 <__sseek+0x28>)
 80069c0:	4013      	ands	r3, r2
 80069c2:	81a3      	strh	r3, [r4, #12]
 80069c4:	bd70      	pop	{r4, r5, r6, pc}
 80069c6:	2280      	movs	r2, #128	; 0x80
 80069c8:	0152      	lsls	r2, r2, #5
 80069ca:	4313      	orrs	r3, r2
 80069cc:	81a3      	strh	r3, [r4, #12]
 80069ce:	6560      	str	r0, [r4, #84]	; 0x54
 80069d0:	e7f8      	b.n	80069c4 <__sseek+0x18>
 80069d2:	46c0      	nop			; (mov r8, r8)
 80069d4:	ffffefff 	.word	0xffffefff

080069d8 <__sclose>:
 80069d8:	b510      	push	{r4, lr}
 80069da:	230e      	movs	r3, #14
 80069dc:	5ec9      	ldrsh	r1, [r1, r3]
 80069de:	f000 f8e3 	bl	8006ba8 <_close_r>
 80069e2:	bd10      	pop	{r4, pc}

080069e4 <__swbuf_r>:
 80069e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e6:	0005      	movs	r5, r0
 80069e8:	000e      	movs	r6, r1
 80069ea:	0014      	movs	r4, r2
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d004      	beq.n	80069fa <__swbuf_r+0x16>
 80069f0:	6983      	ldr	r3, [r0, #24]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <__swbuf_r+0x16>
 80069f6:	f7ff fb77 	bl	80060e8 <__sinit>
 80069fa:	4b22      	ldr	r3, [pc, #136]	; (8006a84 <__swbuf_r+0xa0>)
 80069fc:	429c      	cmp	r4, r3
 80069fe:	d12e      	bne.n	8006a5e <__swbuf_r+0x7a>
 8006a00:	686c      	ldr	r4, [r5, #4]
 8006a02:	69a3      	ldr	r3, [r4, #24]
 8006a04:	60a3      	str	r3, [r4, #8]
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	071b      	lsls	r3, r3, #28
 8006a0a:	d532      	bpl.n	8006a72 <__swbuf_r+0x8e>
 8006a0c:	6923      	ldr	r3, [r4, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d02f      	beq.n	8006a72 <__swbuf_r+0x8e>
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	6922      	ldr	r2, [r4, #16]
 8006a16:	b2f7      	uxtb	r7, r6
 8006a18:	1a98      	subs	r0, r3, r2
 8006a1a:	6963      	ldr	r3, [r4, #20]
 8006a1c:	b2f6      	uxtb	r6, r6
 8006a1e:	4283      	cmp	r3, r0
 8006a20:	dc05      	bgt.n	8006a2e <__swbuf_r+0x4a>
 8006a22:	0021      	movs	r1, r4
 8006a24:	0028      	movs	r0, r5
 8006a26:	f000 f95d 	bl	8006ce4 <_fflush_r>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	d127      	bne.n	8006a7e <__swbuf_r+0x9a>
 8006a2e:	68a3      	ldr	r3, [r4, #8]
 8006a30:	3001      	adds	r0, #1
 8006a32:	3b01      	subs	r3, #1
 8006a34:	60a3      	str	r3, [r4, #8]
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	1c5a      	adds	r2, r3, #1
 8006a3a:	6022      	str	r2, [r4, #0]
 8006a3c:	701f      	strb	r7, [r3, #0]
 8006a3e:	6963      	ldr	r3, [r4, #20]
 8006a40:	4283      	cmp	r3, r0
 8006a42:	d004      	beq.n	8006a4e <__swbuf_r+0x6a>
 8006a44:	89a3      	ldrh	r3, [r4, #12]
 8006a46:	07db      	lsls	r3, r3, #31
 8006a48:	d507      	bpl.n	8006a5a <__swbuf_r+0x76>
 8006a4a:	2e0a      	cmp	r6, #10
 8006a4c:	d105      	bne.n	8006a5a <__swbuf_r+0x76>
 8006a4e:	0021      	movs	r1, r4
 8006a50:	0028      	movs	r0, r5
 8006a52:	f000 f947 	bl	8006ce4 <_fflush_r>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d111      	bne.n	8006a7e <__swbuf_r+0x9a>
 8006a5a:	0030      	movs	r0, r6
 8006a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a5e:	4b0a      	ldr	r3, [pc, #40]	; (8006a88 <__swbuf_r+0xa4>)
 8006a60:	429c      	cmp	r4, r3
 8006a62:	d101      	bne.n	8006a68 <__swbuf_r+0x84>
 8006a64:	68ac      	ldr	r4, [r5, #8]
 8006a66:	e7cc      	b.n	8006a02 <__swbuf_r+0x1e>
 8006a68:	4b08      	ldr	r3, [pc, #32]	; (8006a8c <__swbuf_r+0xa8>)
 8006a6a:	429c      	cmp	r4, r3
 8006a6c:	d1c9      	bne.n	8006a02 <__swbuf_r+0x1e>
 8006a6e:	68ec      	ldr	r4, [r5, #12]
 8006a70:	e7c7      	b.n	8006a02 <__swbuf_r+0x1e>
 8006a72:	0021      	movs	r1, r4
 8006a74:	0028      	movs	r0, r5
 8006a76:	f000 f81f 	bl	8006ab8 <__swsetup_r>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d0c9      	beq.n	8006a12 <__swbuf_r+0x2e>
 8006a7e:	2601      	movs	r6, #1
 8006a80:	4276      	negs	r6, r6
 8006a82:	e7ea      	b.n	8006a5a <__swbuf_r+0x76>
 8006a84:	0800756c 	.word	0x0800756c
 8006a88:	0800758c 	.word	0x0800758c
 8006a8c:	0800754c 	.word	0x0800754c

08006a90 <_write_r>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	0004      	movs	r4, r0
 8006a94:	0008      	movs	r0, r1
 8006a96:	0011      	movs	r1, r2
 8006a98:	001a      	movs	r2, r3
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	4d05      	ldr	r5, [pc, #20]	; (8006ab4 <_write_r+0x24>)
 8006a9e:	602b      	str	r3, [r5, #0]
 8006aa0:	f7fa ff57 	bl	8001952 <_write>
 8006aa4:	1c43      	adds	r3, r0, #1
 8006aa6:	d103      	bne.n	8006ab0 <_write_r+0x20>
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d000      	beq.n	8006ab0 <_write_r+0x20>
 8006aae:	6023      	str	r3, [r4, #0]
 8006ab0:	bd70      	pop	{r4, r5, r6, pc}
 8006ab2:	46c0      	nop			; (mov r8, r8)
 8006ab4:	20000260 	.word	0x20000260

08006ab8 <__swsetup_r>:
 8006ab8:	4b37      	ldr	r3, [pc, #220]	; (8006b98 <__swsetup_r+0xe0>)
 8006aba:	b570      	push	{r4, r5, r6, lr}
 8006abc:	681d      	ldr	r5, [r3, #0]
 8006abe:	0006      	movs	r6, r0
 8006ac0:	000c      	movs	r4, r1
 8006ac2:	2d00      	cmp	r5, #0
 8006ac4:	d005      	beq.n	8006ad2 <__swsetup_r+0x1a>
 8006ac6:	69ab      	ldr	r3, [r5, #24]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d102      	bne.n	8006ad2 <__swsetup_r+0x1a>
 8006acc:	0028      	movs	r0, r5
 8006ace:	f7ff fb0b 	bl	80060e8 <__sinit>
 8006ad2:	4b32      	ldr	r3, [pc, #200]	; (8006b9c <__swsetup_r+0xe4>)
 8006ad4:	429c      	cmp	r4, r3
 8006ad6:	d10f      	bne.n	8006af8 <__swsetup_r+0x40>
 8006ad8:	686c      	ldr	r4, [r5, #4]
 8006ada:	230c      	movs	r3, #12
 8006adc:	5ee2      	ldrsh	r2, [r4, r3]
 8006ade:	b293      	uxth	r3, r2
 8006ae0:	0711      	lsls	r1, r2, #28
 8006ae2:	d42d      	bmi.n	8006b40 <__swsetup_r+0x88>
 8006ae4:	06d9      	lsls	r1, r3, #27
 8006ae6:	d411      	bmi.n	8006b0c <__swsetup_r+0x54>
 8006ae8:	2309      	movs	r3, #9
 8006aea:	2001      	movs	r0, #1
 8006aec:	6033      	str	r3, [r6, #0]
 8006aee:	3337      	adds	r3, #55	; 0x37
 8006af0:	4313      	orrs	r3, r2
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	4240      	negs	r0, r0
 8006af6:	bd70      	pop	{r4, r5, r6, pc}
 8006af8:	4b29      	ldr	r3, [pc, #164]	; (8006ba0 <__swsetup_r+0xe8>)
 8006afa:	429c      	cmp	r4, r3
 8006afc:	d101      	bne.n	8006b02 <__swsetup_r+0x4a>
 8006afe:	68ac      	ldr	r4, [r5, #8]
 8006b00:	e7eb      	b.n	8006ada <__swsetup_r+0x22>
 8006b02:	4b28      	ldr	r3, [pc, #160]	; (8006ba4 <__swsetup_r+0xec>)
 8006b04:	429c      	cmp	r4, r3
 8006b06:	d1e8      	bne.n	8006ada <__swsetup_r+0x22>
 8006b08:	68ec      	ldr	r4, [r5, #12]
 8006b0a:	e7e6      	b.n	8006ada <__swsetup_r+0x22>
 8006b0c:	075b      	lsls	r3, r3, #29
 8006b0e:	d513      	bpl.n	8006b38 <__swsetup_r+0x80>
 8006b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b12:	2900      	cmp	r1, #0
 8006b14:	d008      	beq.n	8006b28 <__swsetup_r+0x70>
 8006b16:	0023      	movs	r3, r4
 8006b18:	3344      	adds	r3, #68	; 0x44
 8006b1a:	4299      	cmp	r1, r3
 8006b1c:	d002      	beq.n	8006b24 <__swsetup_r+0x6c>
 8006b1e:	0030      	movs	r0, r6
 8006b20:	f000 f9bc 	bl	8006e9c <_free_r>
 8006b24:	2300      	movs	r3, #0
 8006b26:	6363      	str	r3, [r4, #52]	; 0x34
 8006b28:	2224      	movs	r2, #36	; 0x24
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	4393      	bics	r3, r2
 8006b2e:	81a3      	strh	r3, [r4, #12]
 8006b30:	2300      	movs	r3, #0
 8006b32:	6063      	str	r3, [r4, #4]
 8006b34:	6923      	ldr	r3, [r4, #16]
 8006b36:	6023      	str	r3, [r4, #0]
 8006b38:	2308      	movs	r3, #8
 8006b3a:	89a2      	ldrh	r2, [r4, #12]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	81a3      	strh	r3, [r4, #12]
 8006b40:	6923      	ldr	r3, [r4, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10b      	bne.n	8006b5e <__swsetup_r+0xa6>
 8006b46:	21a0      	movs	r1, #160	; 0xa0
 8006b48:	2280      	movs	r2, #128	; 0x80
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	0089      	lsls	r1, r1, #2
 8006b4e:	0092      	lsls	r2, r2, #2
 8006b50:	400b      	ands	r3, r1
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d003      	beq.n	8006b5e <__swsetup_r+0xa6>
 8006b56:	0021      	movs	r1, r4
 8006b58:	0030      	movs	r0, r6
 8006b5a:	f000 f93f 	bl	8006ddc <__smakebuf_r>
 8006b5e:	220c      	movs	r2, #12
 8006b60:	5ea3      	ldrsh	r3, [r4, r2]
 8006b62:	2001      	movs	r0, #1
 8006b64:	001a      	movs	r2, r3
 8006b66:	b299      	uxth	r1, r3
 8006b68:	4002      	ands	r2, r0
 8006b6a:	4203      	tst	r3, r0
 8006b6c:	d00f      	beq.n	8006b8e <__swsetup_r+0xd6>
 8006b6e:	2200      	movs	r2, #0
 8006b70:	60a2      	str	r2, [r4, #8]
 8006b72:	6962      	ldr	r2, [r4, #20]
 8006b74:	4252      	negs	r2, r2
 8006b76:	61a2      	str	r2, [r4, #24]
 8006b78:	2000      	movs	r0, #0
 8006b7a:	6922      	ldr	r2, [r4, #16]
 8006b7c:	4282      	cmp	r2, r0
 8006b7e:	d1ba      	bne.n	8006af6 <__swsetup_r+0x3e>
 8006b80:	060a      	lsls	r2, r1, #24
 8006b82:	d5b8      	bpl.n	8006af6 <__swsetup_r+0x3e>
 8006b84:	2240      	movs	r2, #64	; 0x40
 8006b86:	4313      	orrs	r3, r2
 8006b88:	81a3      	strh	r3, [r4, #12]
 8006b8a:	3801      	subs	r0, #1
 8006b8c:	e7b3      	b.n	8006af6 <__swsetup_r+0x3e>
 8006b8e:	0788      	lsls	r0, r1, #30
 8006b90:	d400      	bmi.n	8006b94 <__swsetup_r+0xdc>
 8006b92:	6962      	ldr	r2, [r4, #20]
 8006b94:	60a2      	str	r2, [r4, #8]
 8006b96:	e7ef      	b.n	8006b78 <__swsetup_r+0xc0>
 8006b98:	2000003c 	.word	0x2000003c
 8006b9c:	0800756c 	.word	0x0800756c
 8006ba0:	0800758c 	.word	0x0800758c
 8006ba4:	0800754c 	.word	0x0800754c

08006ba8 <_close_r>:
 8006ba8:	2300      	movs	r3, #0
 8006baa:	b570      	push	{r4, r5, r6, lr}
 8006bac:	4d06      	ldr	r5, [pc, #24]	; (8006bc8 <_close_r+0x20>)
 8006bae:	0004      	movs	r4, r0
 8006bb0:	0008      	movs	r0, r1
 8006bb2:	602b      	str	r3, [r5, #0]
 8006bb4:	f7fa fee9 	bl	800198a <_close>
 8006bb8:	1c43      	adds	r3, r0, #1
 8006bba:	d103      	bne.n	8006bc4 <_close_r+0x1c>
 8006bbc:	682b      	ldr	r3, [r5, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d000      	beq.n	8006bc4 <_close_r+0x1c>
 8006bc2:	6023      	str	r3, [r4, #0]
 8006bc4:	bd70      	pop	{r4, r5, r6, pc}
 8006bc6:	46c0      	nop			; (mov r8, r8)
 8006bc8:	20000260 	.word	0x20000260

08006bcc <__sflush_r>:
 8006bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bce:	898b      	ldrh	r3, [r1, #12]
 8006bd0:	0005      	movs	r5, r0
 8006bd2:	000c      	movs	r4, r1
 8006bd4:	071a      	lsls	r2, r3, #28
 8006bd6:	d45f      	bmi.n	8006c98 <__sflush_r+0xcc>
 8006bd8:	684a      	ldr	r2, [r1, #4]
 8006bda:	2a00      	cmp	r2, #0
 8006bdc:	dc04      	bgt.n	8006be8 <__sflush_r+0x1c>
 8006bde:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006be0:	2a00      	cmp	r2, #0
 8006be2:	dc01      	bgt.n	8006be8 <__sflush_r+0x1c>
 8006be4:	2000      	movs	r0, #0
 8006be6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006be8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006bea:	2f00      	cmp	r7, #0
 8006bec:	d0fa      	beq.n	8006be4 <__sflush_r+0x18>
 8006bee:	2200      	movs	r2, #0
 8006bf0:	2180      	movs	r1, #128	; 0x80
 8006bf2:	682e      	ldr	r6, [r5, #0]
 8006bf4:	602a      	str	r2, [r5, #0]
 8006bf6:	001a      	movs	r2, r3
 8006bf8:	0149      	lsls	r1, r1, #5
 8006bfa:	400a      	ands	r2, r1
 8006bfc:	420b      	tst	r3, r1
 8006bfe:	d034      	beq.n	8006c6a <__sflush_r+0x9e>
 8006c00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	075b      	lsls	r3, r3, #29
 8006c06:	d506      	bpl.n	8006c16 <__sflush_r+0x4a>
 8006c08:	6863      	ldr	r3, [r4, #4]
 8006c0a:	1ac0      	subs	r0, r0, r3
 8006c0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <__sflush_r+0x4a>
 8006c12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c14:	1ac0      	subs	r0, r0, r3
 8006c16:	0002      	movs	r2, r0
 8006c18:	6a21      	ldr	r1, [r4, #32]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	0028      	movs	r0, r5
 8006c1e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006c20:	47b8      	blx	r7
 8006c22:	89a1      	ldrh	r1, [r4, #12]
 8006c24:	1c43      	adds	r3, r0, #1
 8006c26:	d106      	bne.n	8006c36 <__sflush_r+0x6a>
 8006c28:	682b      	ldr	r3, [r5, #0]
 8006c2a:	2b1d      	cmp	r3, #29
 8006c2c:	d831      	bhi.n	8006c92 <__sflush_r+0xc6>
 8006c2e:	4a2c      	ldr	r2, [pc, #176]	; (8006ce0 <__sflush_r+0x114>)
 8006c30:	40da      	lsrs	r2, r3
 8006c32:	07d3      	lsls	r3, r2, #31
 8006c34:	d52d      	bpl.n	8006c92 <__sflush_r+0xc6>
 8006c36:	2300      	movs	r3, #0
 8006c38:	6063      	str	r3, [r4, #4]
 8006c3a:	6923      	ldr	r3, [r4, #16]
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	04cb      	lsls	r3, r1, #19
 8006c40:	d505      	bpl.n	8006c4e <__sflush_r+0x82>
 8006c42:	1c43      	adds	r3, r0, #1
 8006c44:	d102      	bne.n	8006c4c <__sflush_r+0x80>
 8006c46:	682b      	ldr	r3, [r5, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d100      	bne.n	8006c4e <__sflush_r+0x82>
 8006c4c:	6560      	str	r0, [r4, #84]	; 0x54
 8006c4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c50:	602e      	str	r6, [r5, #0]
 8006c52:	2900      	cmp	r1, #0
 8006c54:	d0c6      	beq.n	8006be4 <__sflush_r+0x18>
 8006c56:	0023      	movs	r3, r4
 8006c58:	3344      	adds	r3, #68	; 0x44
 8006c5a:	4299      	cmp	r1, r3
 8006c5c:	d002      	beq.n	8006c64 <__sflush_r+0x98>
 8006c5e:	0028      	movs	r0, r5
 8006c60:	f000 f91c 	bl	8006e9c <_free_r>
 8006c64:	2000      	movs	r0, #0
 8006c66:	6360      	str	r0, [r4, #52]	; 0x34
 8006c68:	e7bd      	b.n	8006be6 <__sflush_r+0x1a>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	0028      	movs	r0, r5
 8006c6e:	6a21      	ldr	r1, [r4, #32]
 8006c70:	47b8      	blx	r7
 8006c72:	1c43      	adds	r3, r0, #1
 8006c74:	d1c5      	bne.n	8006c02 <__sflush_r+0x36>
 8006c76:	682b      	ldr	r3, [r5, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d0c2      	beq.n	8006c02 <__sflush_r+0x36>
 8006c7c:	2b1d      	cmp	r3, #29
 8006c7e:	d001      	beq.n	8006c84 <__sflush_r+0xb8>
 8006c80:	2b16      	cmp	r3, #22
 8006c82:	d101      	bne.n	8006c88 <__sflush_r+0xbc>
 8006c84:	602e      	str	r6, [r5, #0]
 8006c86:	e7ad      	b.n	8006be4 <__sflush_r+0x18>
 8006c88:	2340      	movs	r3, #64	; 0x40
 8006c8a:	89a2      	ldrh	r2, [r4, #12]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	81a3      	strh	r3, [r4, #12]
 8006c90:	e7a9      	b.n	8006be6 <__sflush_r+0x1a>
 8006c92:	2340      	movs	r3, #64	; 0x40
 8006c94:	430b      	orrs	r3, r1
 8006c96:	e7fa      	b.n	8006c8e <__sflush_r+0xc2>
 8006c98:	690f      	ldr	r7, [r1, #16]
 8006c9a:	2f00      	cmp	r7, #0
 8006c9c:	d0a2      	beq.n	8006be4 <__sflush_r+0x18>
 8006c9e:	680a      	ldr	r2, [r1, #0]
 8006ca0:	600f      	str	r7, [r1, #0]
 8006ca2:	1bd2      	subs	r2, r2, r7
 8006ca4:	9201      	str	r2, [sp, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	079b      	lsls	r3, r3, #30
 8006caa:	d100      	bne.n	8006cae <__sflush_r+0xe2>
 8006cac:	694a      	ldr	r2, [r1, #20]
 8006cae:	60a2      	str	r2, [r4, #8]
 8006cb0:	9b01      	ldr	r3, [sp, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	dc00      	bgt.n	8006cb8 <__sflush_r+0xec>
 8006cb6:	e795      	b.n	8006be4 <__sflush_r+0x18>
 8006cb8:	003a      	movs	r2, r7
 8006cba:	0028      	movs	r0, r5
 8006cbc:	9b01      	ldr	r3, [sp, #4]
 8006cbe:	6a21      	ldr	r1, [r4, #32]
 8006cc0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006cc2:	47b0      	blx	r6
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	dc06      	bgt.n	8006cd6 <__sflush_r+0x10a>
 8006cc8:	2340      	movs	r3, #64	; 0x40
 8006cca:	2001      	movs	r0, #1
 8006ccc:	89a2      	ldrh	r2, [r4, #12]
 8006cce:	4240      	negs	r0, r0
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	81a3      	strh	r3, [r4, #12]
 8006cd4:	e787      	b.n	8006be6 <__sflush_r+0x1a>
 8006cd6:	9b01      	ldr	r3, [sp, #4]
 8006cd8:	183f      	adds	r7, r7, r0
 8006cda:	1a1b      	subs	r3, r3, r0
 8006cdc:	9301      	str	r3, [sp, #4]
 8006cde:	e7e7      	b.n	8006cb0 <__sflush_r+0xe4>
 8006ce0:	20400001 	.word	0x20400001

08006ce4 <_fflush_r>:
 8006ce4:	690b      	ldr	r3, [r1, #16]
 8006ce6:	b570      	push	{r4, r5, r6, lr}
 8006ce8:	0005      	movs	r5, r0
 8006cea:	000c      	movs	r4, r1
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d102      	bne.n	8006cf6 <_fflush_r+0x12>
 8006cf0:	2500      	movs	r5, #0
 8006cf2:	0028      	movs	r0, r5
 8006cf4:	bd70      	pop	{r4, r5, r6, pc}
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d004      	beq.n	8006d04 <_fflush_r+0x20>
 8006cfa:	6983      	ldr	r3, [r0, #24]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <_fflush_r+0x20>
 8006d00:	f7ff f9f2 	bl	80060e8 <__sinit>
 8006d04:	4b14      	ldr	r3, [pc, #80]	; (8006d58 <_fflush_r+0x74>)
 8006d06:	429c      	cmp	r4, r3
 8006d08:	d11b      	bne.n	8006d42 <_fflush_r+0x5e>
 8006d0a:	686c      	ldr	r4, [r5, #4]
 8006d0c:	220c      	movs	r2, #12
 8006d0e:	5ea3      	ldrsh	r3, [r4, r2]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0ed      	beq.n	8006cf0 <_fflush_r+0xc>
 8006d14:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d16:	07d2      	lsls	r2, r2, #31
 8006d18:	d404      	bmi.n	8006d24 <_fflush_r+0x40>
 8006d1a:	059b      	lsls	r3, r3, #22
 8006d1c:	d402      	bmi.n	8006d24 <_fflush_r+0x40>
 8006d1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d20:	f7ff fa83 	bl	800622a <__retarget_lock_acquire_recursive>
 8006d24:	0028      	movs	r0, r5
 8006d26:	0021      	movs	r1, r4
 8006d28:	f7ff ff50 	bl	8006bcc <__sflush_r>
 8006d2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d2e:	0005      	movs	r5, r0
 8006d30:	07db      	lsls	r3, r3, #31
 8006d32:	d4de      	bmi.n	8006cf2 <_fflush_r+0xe>
 8006d34:	89a3      	ldrh	r3, [r4, #12]
 8006d36:	059b      	lsls	r3, r3, #22
 8006d38:	d4db      	bmi.n	8006cf2 <_fflush_r+0xe>
 8006d3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d3c:	f7ff fa76 	bl	800622c <__retarget_lock_release_recursive>
 8006d40:	e7d7      	b.n	8006cf2 <_fflush_r+0xe>
 8006d42:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <_fflush_r+0x78>)
 8006d44:	429c      	cmp	r4, r3
 8006d46:	d101      	bne.n	8006d4c <_fflush_r+0x68>
 8006d48:	68ac      	ldr	r4, [r5, #8]
 8006d4a:	e7df      	b.n	8006d0c <_fflush_r+0x28>
 8006d4c:	4b04      	ldr	r3, [pc, #16]	; (8006d60 <_fflush_r+0x7c>)
 8006d4e:	429c      	cmp	r4, r3
 8006d50:	d1dc      	bne.n	8006d0c <_fflush_r+0x28>
 8006d52:	68ec      	ldr	r4, [r5, #12]
 8006d54:	e7da      	b.n	8006d0c <_fflush_r+0x28>
 8006d56:	46c0      	nop			; (mov r8, r8)
 8006d58:	0800756c 	.word	0x0800756c
 8006d5c:	0800758c 	.word	0x0800758c
 8006d60:	0800754c 	.word	0x0800754c

08006d64 <_lseek_r>:
 8006d64:	b570      	push	{r4, r5, r6, lr}
 8006d66:	0004      	movs	r4, r0
 8006d68:	0008      	movs	r0, r1
 8006d6a:	0011      	movs	r1, r2
 8006d6c:	001a      	movs	r2, r3
 8006d6e:	2300      	movs	r3, #0
 8006d70:	4d05      	ldr	r5, [pc, #20]	; (8006d88 <_lseek_r+0x24>)
 8006d72:	602b      	str	r3, [r5, #0]
 8006d74:	f7fa fe2a 	bl	80019cc <_lseek>
 8006d78:	1c43      	adds	r3, r0, #1
 8006d7a:	d103      	bne.n	8006d84 <_lseek_r+0x20>
 8006d7c:	682b      	ldr	r3, [r5, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d000      	beq.n	8006d84 <_lseek_r+0x20>
 8006d82:	6023      	str	r3, [r4, #0]
 8006d84:	bd70      	pop	{r4, r5, r6, pc}
 8006d86:	46c0      	nop			; (mov r8, r8)
 8006d88:	20000260 	.word	0x20000260

08006d8c <__swhatbuf_r>:
 8006d8c:	b570      	push	{r4, r5, r6, lr}
 8006d8e:	000e      	movs	r6, r1
 8006d90:	001d      	movs	r5, r3
 8006d92:	230e      	movs	r3, #14
 8006d94:	5ec9      	ldrsh	r1, [r1, r3]
 8006d96:	0014      	movs	r4, r2
 8006d98:	b096      	sub	sp, #88	; 0x58
 8006d9a:	2900      	cmp	r1, #0
 8006d9c:	da08      	bge.n	8006db0 <__swhatbuf_r+0x24>
 8006d9e:	220c      	movs	r2, #12
 8006da0:	5eb3      	ldrsh	r3, [r6, r2]
 8006da2:	2200      	movs	r2, #0
 8006da4:	602a      	str	r2, [r5, #0]
 8006da6:	061b      	lsls	r3, r3, #24
 8006da8:	d411      	bmi.n	8006dce <__swhatbuf_r+0x42>
 8006daa:	2380      	movs	r3, #128	; 0x80
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	e00f      	b.n	8006dd0 <__swhatbuf_r+0x44>
 8006db0:	466a      	mov	r2, sp
 8006db2:	f000 f8d1 	bl	8006f58 <_fstat_r>
 8006db6:	2800      	cmp	r0, #0
 8006db8:	dbf1      	blt.n	8006d9e <__swhatbuf_r+0x12>
 8006dba:	23f0      	movs	r3, #240	; 0xf0
 8006dbc:	9901      	ldr	r1, [sp, #4]
 8006dbe:	021b      	lsls	r3, r3, #8
 8006dc0:	4019      	ands	r1, r3
 8006dc2:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <__swhatbuf_r+0x4c>)
 8006dc4:	18c9      	adds	r1, r1, r3
 8006dc6:	424b      	negs	r3, r1
 8006dc8:	4159      	adcs	r1, r3
 8006dca:	6029      	str	r1, [r5, #0]
 8006dcc:	e7ed      	b.n	8006daa <__swhatbuf_r+0x1e>
 8006dce:	2340      	movs	r3, #64	; 0x40
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	6023      	str	r3, [r4, #0]
 8006dd4:	b016      	add	sp, #88	; 0x58
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}
 8006dd8:	ffffe000 	.word	0xffffe000

08006ddc <__smakebuf_r>:
 8006ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dde:	2602      	movs	r6, #2
 8006de0:	898b      	ldrh	r3, [r1, #12]
 8006de2:	0005      	movs	r5, r0
 8006de4:	000c      	movs	r4, r1
 8006de6:	4233      	tst	r3, r6
 8006de8:	d006      	beq.n	8006df8 <__smakebuf_r+0x1c>
 8006dea:	0023      	movs	r3, r4
 8006dec:	3347      	adds	r3, #71	; 0x47
 8006dee:	6023      	str	r3, [r4, #0]
 8006df0:	6123      	str	r3, [r4, #16]
 8006df2:	2301      	movs	r3, #1
 8006df4:	6163      	str	r3, [r4, #20]
 8006df6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006df8:	466a      	mov	r2, sp
 8006dfa:	ab01      	add	r3, sp, #4
 8006dfc:	f7ff ffc6 	bl	8006d8c <__swhatbuf_r>
 8006e00:	9900      	ldr	r1, [sp, #0]
 8006e02:	0007      	movs	r7, r0
 8006e04:	0028      	movs	r0, r5
 8006e06:	f7ff fa35 	bl	8006274 <_malloc_r>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d108      	bne.n	8006e20 <__smakebuf_r+0x44>
 8006e0e:	220c      	movs	r2, #12
 8006e10:	5ea3      	ldrsh	r3, [r4, r2]
 8006e12:	059a      	lsls	r2, r3, #22
 8006e14:	d4ef      	bmi.n	8006df6 <__smakebuf_r+0x1a>
 8006e16:	2203      	movs	r2, #3
 8006e18:	4393      	bics	r3, r2
 8006e1a:	431e      	orrs	r6, r3
 8006e1c:	81a6      	strh	r6, [r4, #12]
 8006e1e:	e7e4      	b.n	8006dea <__smakebuf_r+0xe>
 8006e20:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <__smakebuf_r+0x84>)
 8006e22:	62ab      	str	r3, [r5, #40]	; 0x28
 8006e24:	2380      	movs	r3, #128	; 0x80
 8006e26:	89a2      	ldrh	r2, [r4, #12]
 8006e28:	6020      	str	r0, [r4, #0]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	81a3      	strh	r3, [r4, #12]
 8006e2e:	9b00      	ldr	r3, [sp, #0]
 8006e30:	6120      	str	r0, [r4, #16]
 8006e32:	6163      	str	r3, [r4, #20]
 8006e34:	9b01      	ldr	r3, [sp, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00d      	beq.n	8006e56 <__smakebuf_r+0x7a>
 8006e3a:	0028      	movs	r0, r5
 8006e3c:	230e      	movs	r3, #14
 8006e3e:	5ee1      	ldrsh	r1, [r4, r3]
 8006e40:	f000 f89c 	bl	8006f7c <_isatty_r>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d006      	beq.n	8006e56 <__smakebuf_r+0x7a>
 8006e48:	2203      	movs	r2, #3
 8006e4a:	89a3      	ldrh	r3, [r4, #12]
 8006e4c:	4393      	bics	r3, r2
 8006e4e:	001a      	movs	r2, r3
 8006e50:	2301      	movs	r3, #1
 8006e52:	4313      	orrs	r3, r2
 8006e54:	81a3      	strh	r3, [r4, #12]
 8006e56:	89a0      	ldrh	r0, [r4, #12]
 8006e58:	4307      	orrs	r7, r0
 8006e5a:	81a7      	strh	r7, [r4, #12]
 8006e5c:	e7cb      	b.n	8006df6 <__smakebuf_r+0x1a>
 8006e5e:	46c0      	nop			; (mov r8, r8)
 8006e60:	0800606d 	.word	0x0800606d

08006e64 <memchr>:
 8006e64:	b2c9      	uxtb	r1, r1
 8006e66:	1882      	adds	r2, r0, r2
 8006e68:	4290      	cmp	r0, r2
 8006e6a:	d101      	bne.n	8006e70 <memchr+0xc>
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	4770      	bx	lr
 8006e70:	7803      	ldrb	r3, [r0, #0]
 8006e72:	428b      	cmp	r3, r1
 8006e74:	d0fb      	beq.n	8006e6e <memchr+0xa>
 8006e76:	3001      	adds	r0, #1
 8006e78:	e7f6      	b.n	8006e68 <memchr+0x4>
	...

08006e7c <__malloc_lock>:
 8006e7c:	b510      	push	{r4, lr}
 8006e7e:	4802      	ldr	r0, [pc, #8]	; (8006e88 <__malloc_lock+0xc>)
 8006e80:	f7ff f9d3 	bl	800622a <__retarget_lock_acquire_recursive>
 8006e84:	bd10      	pop	{r4, pc}
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	20000254 	.word	0x20000254

08006e8c <__malloc_unlock>:
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	4802      	ldr	r0, [pc, #8]	; (8006e98 <__malloc_unlock+0xc>)
 8006e90:	f7ff f9cc 	bl	800622c <__retarget_lock_release_recursive>
 8006e94:	bd10      	pop	{r4, pc}
 8006e96:	46c0      	nop			; (mov r8, r8)
 8006e98:	20000254 	.word	0x20000254

08006e9c <_free_r>:
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	0005      	movs	r5, r0
 8006ea0:	2900      	cmp	r1, #0
 8006ea2:	d010      	beq.n	8006ec6 <_free_r+0x2a>
 8006ea4:	1f0c      	subs	r4, r1, #4
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	da00      	bge.n	8006eae <_free_r+0x12>
 8006eac:	18e4      	adds	r4, r4, r3
 8006eae:	0028      	movs	r0, r5
 8006eb0:	f7ff ffe4 	bl	8006e7c <__malloc_lock>
 8006eb4:	4a1d      	ldr	r2, [pc, #116]	; (8006f2c <_free_r+0x90>)
 8006eb6:	6813      	ldr	r3, [r2, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d105      	bne.n	8006ec8 <_free_r+0x2c>
 8006ebc:	6063      	str	r3, [r4, #4]
 8006ebe:	6014      	str	r4, [r2, #0]
 8006ec0:	0028      	movs	r0, r5
 8006ec2:	f7ff ffe3 	bl	8006e8c <__malloc_unlock>
 8006ec6:	bd70      	pop	{r4, r5, r6, pc}
 8006ec8:	42a3      	cmp	r3, r4
 8006eca:	d908      	bls.n	8006ede <_free_r+0x42>
 8006ecc:	6821      	ldr	r1, [r4, #0]
 8006ece:	1860      	adds	r0, r4, r1
 8006ed0:	4283      	cmp	r3, r0
 8006ed2:	d1f3      	bne.n	8006ebc <_free_r+0x20>
 8006ed4:	6818      	ldr	r0, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	1841      	adds	r1, r0, r1
 8006eda:	6021      	str	r1, [r4, #0]
 8006edc:	e7ee      	b.n	8006ebc <_free_r+0x20>
 8006ede:	001a      	movs	r2, r3
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <_free_r+0x4e>
 8006ee6:	42a3      	cmp	r3, r4
 8006ee8:	d9f9      	bls.n	8006ede <_free_r+0x42>
 8006eea:	6811      	ldr	r1, [r2, #0]
 8006eec:	1850      	adds	r0, r2, r1
 8006eee:	42a0      	cmp	r0, r4
 8006ef0:	d10b      	bne.n	8006f0a <_free_r+0x6e>
 8006ef2:	6820      	ldr	r0, [r4, #0]
 8006ef4:	1809      	adds	r1, r1, r0
 8006ef6:	1850      	adds	r0, r2, r1
 8006ef8:	6011      	str	r1, [r2, #0]
 8006efa:	4283      	cmp	r3, r0
 8006efc:	d1e0      	bne.n	8006ec0 <_free_r+0x24>
 8006efe:	6818      	ldr	r0, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	1841      	adds	r1, r0, r1
 8006f04:	6011      	str	r1, [r2, #0]
 8006f06:	6053      	str	r3, [r2, #4]
 8006f08:	e7da      	b.n	8006ec0 <_free_r+0x24>
 8006f0a:	42a0      	cmp	r0, r4
 8006f0c:	d902      	bls.n	8006f14 <_free_r+0x78>
 8006f0e:	230c      	movs	r3, #12
 8006f10:	602b      	str	r3, [r5, #0]
 8006f12:	e7d5      	b.n	8006ec0 <_free_r+0x24>
 8006f14:	6821      	ldr	r1, [r4, #0]
 8006f16:	1860      	adds	r0, r4, r1
 8006f18:	4283      	cmp	r3, r0
 8006f1a:	d103      	bne.n	8006f24 <_free_r+0x88>
 8006f1c:	6818      	ldr	r0, [r3, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	1841      	adds	r1, r0, r1
 8006f22:	6021      	str	r1, [r4, #0]
 8006f24:	6063      	str	r3, [r4, #4]
 8006f26:	6054      	str	r4, [r2, #4]
 8006f28:	e7ca      	b.n	8006ec0 <_free_r+0x24>
 8006f2a:	46c0      	nop			; (mov r8, r8)
 8006f2c:	20000258 	.word	0x20000258

08006f30 <_read_r>:
 8006f30:	b570      	push	{r4, r5, r6, lr}
 8006f32:	0004      	movs	r4, r0
 8006f34:	0008      	movs	r0, r1
 8006f36:	0011      	movs	r1, r2
 8006f38:	001a      	movs	r2, r3
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	4d05      	ldr	r5, [pc, #20]	; (8006f54 <_read_r+0x24>)
 8006f3e:	602b      	str	r3, [r5, #0]
 8006f40:	f7fa fcea 	bl	8001918 <_read>
 8006f44:	1c43      	adds	r3, r0, #1
 8006f46:	d103      	bne.n	8006f50 <_read_r+0x20>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d000      	beq.n	8006f50 <_read_r+0x20>
 8006f4e:	6023      	str	r3, [r4, #0]
 8006f50:	bd70      	pop	{r4, r5, r6, pc}
 8006f52:	46c0      	nop			; (mov r8, r8)
 8006f54:	20000260 	.word	0x20000260

08006f58 <_fstat_r>:
 8006f58:	2300      	movs	r3, #0
 8006f5a:	b570      	push	{r4, r5, r6, lr}
 8006f5c:	4d06      	ldr	r5, [pc, #24]	; (8006f78 <_fstat_r+0x20>)
 8006f5e:	0004      	movs	r4, r0
 8006f60:	0008      	movs	r0, r1
 8006f62:	0011      	movs	r1, r2
 8006f64:	602b      	str	r3, [r5, #0]
 8006f66:	f7fa fd1a 	bl	800199e <_fstat>
 8006f6a:	1c43      	adds	r3, r0, #1
 8006f6c:	d103      	bne.n	8006f76 <_fstat_r+0x1e>
 8006f6e:	682b      	ldr	r3, [r5, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d000      	beq.n	8006f76 <_fstat_r+0x1e>
 8006f74:	6023      	str	r3, [r4, #0]
 8006f76:	bd70      	pop	{r4, r5, r6, pc}
 8006f78:	20000260 	.word	0x20000260

08006f7c <_isatty_r>:
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	b570      	push	{r4, r5, r6, lr}
 8006f80:	4d06      	ldr	r5, [pc, #24]	; (8006f9c <_isatty_r+0x20>)
 8006f82:	0004      	movs	r4, r0
 8006f84:	0008      	movs	r0, r1
 8006f86:	602b      	str	r3, [r5, #0]
 8006f88:	f7fa fd17 	bl	80019ba <_isatty>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d103      	bne.n	8006f98 <_isatty_r+0x1c>
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d000      	beq.n	8006f98 <_isatty_r+0x1c>
 8006f96:	6023      	str	r3, [r4, #0]
 8006f98:	bd70      	pop	{r4, r5, r6, pc}
 8006f9a:	46c0      	nop			; (mov r8, r8)
 8006f9c:	20000260 	.word	0x20000260

08006fa0 <_init>:
 8006fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa2:	46c0      	nop			; (mov r8, r8)
 8006fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa6:	bc08      	pop	{r3}
 8006fa8:	469e      	mov	lr, r3
 8006faa:	4770      	bx	lr

08006fac <_fini>:
 8006fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fae:	46c0      	nop			; (mov r8, r8)
 8006fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb2:	bc08      	pop	{r3}
 8006fb4:	469e      	mov	lr, r3
 8006fb6:	4770      	bx	lr
