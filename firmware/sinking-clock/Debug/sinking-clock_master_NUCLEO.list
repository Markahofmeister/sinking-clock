
sinking-clock_master_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053cc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08005488  08005488  00015488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005958  08005958  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08005958  08005958  00015958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005960  08005960  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005960  08005960  00015960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005964  08005964  00015964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08005968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  200000a8  08005a10  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08005a10  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121a7  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250c  00000000  00000000  00032277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00034788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  00035720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018886  00000000  00000000  000365c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012746  00000000  00000000  0004ee46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab33  00000000  00000000  0006158c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc0bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fec  00000000  00000000  000fc110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000a8 	.word	0x200000a8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005470 	.word	0x08005470

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000ac 	.word	0x200000ac
 8000100:	08005470 	.word	0x08005470

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	469b      	mov	fp, r3
 80002a6:	d433      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a8:	465a      	mov	r2, fp
 80002aa:	4653      	mov	r3, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83a      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e078      	b.n	80003b4 <__udivmoddi4+0x144>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e075      	b.n	80003ba <__udivmoddi4+0x14a>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e028      	b.n	800033a <__udivmoddi4+0xca>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	2320      	movs	r3, #32
 8000314:	1a9b      	subs	r3, r3, r2
 8000316:	4652      	mov	r2, sl
 8000318:	40da      	lsrs	r2, r3
 800031a:	4641      	mov	r1, r8
 800031c:	0013      	movs	r3, r2
 800031e:	464a      	mov	r2, r9
 8000320:	408a      	lsls	r2, r1
 8000322:	0017      	movs	r7, r2
 8000324:	4642      	mov	r2, r8
 8000326:	431f      	orrs	r7, r3
 8000328:	4653      	mov	r3, sl
 800032a:	4093      	lsls	r3, r2
 800032c:	001e      	movs	r6, r3
 800032e:	42af      	cmp	r7, r5
 8000330:	d9c4      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0d9      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000340:	07fb      	lsls	r3, r7, #31
 8000342:	0872      	lsrs	r2, r6, #1
 8000344:	431a      	orrs	r2, r3
 8000346:	4646      	mov	r6, r8
 8000348:	087b      	lsrs	r3, r7, #1
 800034a:	e00e      	b.n	800036a <__udivmoddi4+0xfa>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d101      	bne.n	8000354 <__udivmoddi4+0xe4>
 8000350:	42a2      	cmp	r2, r4
 8000352:	d80c      	bhi.n	800036e <__udivmoddi4+0xfe>
 8000354:	1aa4      	subs	r4, r4, r2
 8000356:	419d      	sbcs	r5, r3
 8000358:	2001      	movs	r0, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2100      	movs	r1, #0
 8000360:	3e01      	subs	r6, #1
 8000362:	1824      	adds	r4, r4, r0
 8000364:	414d      	adcs	r5, r1
 8000366:	2e00      	cmp	r6, #0
 8000368:	d006      	beq.n	8000378 <__udivmoddi4+0x108>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d9ee      	bls.n	800034c <__udivmoddi4+0xdc>
 800036e:	3e01      	subs	r6, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2e00      	cmp	r6, #0
 8000376:	d1f8      	bne.n	800036a <__udivmoddi4+0xfa>
 8000378:	9800      	ldr	r0, [sp, #0]
 800037a:	9901      	ldr	r1, [sp, #4]
 800037c:	465b      	mov	r3, fp
 800037e:	1900      	adds	r0, r0, r4
 8000380:	4169      	adcs	r1, r5
 8000382:	2b00      	cmp	r3, #0
 8000384:	db24      	blt.n	80003d0 <__udivmoddi4+0x160>
 8000386:	002b      	movs	r3, r5
 8000388:	465a      	mov	r2, fp
 800038a:	4644      	mov	r4, r8
 800038c:	40d3      	lsrs	r3, r2
 800038e:	002a      	movs	r2, r5
 8000390:	40e2      	lsrs	r2, r4
 8000392:	001c      	movs	r4, r3
 8000394:	465b      	mov	r3, fp
 8000396:	0015      	movs	r5, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	db2a      	blt.n	80003f2 <__udivmoddi4+0x182>
 800039c:	0026      	movs	r6, r4
 800039e:	409e      	lsls	r6, r3
 80003a0:	0033      	movs	r3, r6
 80003a2:	0026      	movs	r6, r4
 80003a4:	4647      	mov	r7, r8
 80003a6:	40be      	lsls	r6, r7
 80003a8:	0032      	movs	r2, r6
 80003aa:	1a80      	subs	r0, r0, r2
 80003ac:	4199      	sbcs	r1, r3
 80003ae:	9000      	str	r0, [sp, #0]
 80003b0:	9101      	str	r1, [sp, #4]
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b4:	42a3      	cmp	r3, r4
 80003b6:	d8bc      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80003b8:	e783      	b.n	80002c2 <__udivmoddi4+0x52>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	2100      	movs	r1, #0
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	2200      	movs	r2, #0
 80003c4:	9100      	str	r1, [sp, #0]
 80003c6:	9201      	str	r2, [sp, #4]
 80003c8:	2201      	movs	r2, #1
 80003ca:	40da      	lsrs	r2, r3
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	e786      	b.n	80002de <__udivmoddi4+0x6e>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	4646      	mov	r6, r8
 80003da:	409a      	lsls	r2, r3
 80003dc:	0023      	movs	r3, r4
 80003de:	40f3      	lsrs	r3, r6
 80003e0:	4644      	mov	r4, r8
 80003e2:	4313      	orrs	r3, r2
 80003e4:	002a      	movs	r2, r5
 80003e6:	40e2      	lsrs	r2, r4
 80003e8:	001c      	movs	r4, r3
 80003ea:	465b      	mov	r3, fp
 80003ec:	0015      	movs	r5, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dad4      	bge.n	800039c <__udivmoddi4+0x12c>
 80003f2:	4642      	mov	r2, r8
 80003f4:	002f      	movs	r7, r5
 80003f6:	2320      	movs	r3, #32
 80003f8:	0026      	movs	r6, r4
 80003fa:	4097      	lsls	r7, r2
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	40de      	lsrs	r6, r3
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7cd      	b.n	80003a2 <__udivmoddi4+0x132>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <getRTCTime>:
				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
	}

}

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000468:	68b9      	ldr	r1, [r7, #8]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	2200      	movs	r2, #0
 800046e:	0018      	movs	r0, r3
 8000470:	f002 fd04 	bl	8002e7c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000474:	6879      	ldr	r1, [r7, #4]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2200      	movs	r2, #0
 800047a:	0018      	movs	r0, r3
 800047c:	f002 fdec 	bl	8003058 <HAL_RTC_GetDate>

}
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b004      	add	sp, #16
 8000486:	bd80      	pop	{r7, pc}

08000488 <getUserAlarmTime>:

void getUserAlarmTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *userAlarmTime) {
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b08d      	sub	sp, #52	; 0x34
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]

	// Store alarm data in alarm object pointer and extract alarm time data from alarm object
	RTC_AlarmTypeDef userAlarmObj;
	HAL_RTC_GetAlarm(hrtc, &userAlarmObj, userAlarm, RTCTimeFormat);
 8000492:	2380      	movs	r3, #128	; 0x80
 8000494:	009a      	lsls	r2, r3, #2
 8000496:	2408      	movs	r4, #8
 8000498:	1939      	adds	r1, r7, r4
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	2300      	movs	r3, #0
 800049e:	f002 ff69 	bl	8003374 <HAL_RTC_GetAlarm>
	*userAlarmTime = userAlarmObj.AlarmTime;
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	193a      	adds	r2, r7, r4
 80004a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004a8:	c313      	stmia	r3!, {r0, r1, r4}
 80004aa:	ca03      	ldmia	r2!, {r0, r1}
 80004ac:	c303      	stmia	r3!, {r0, r1}

}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b00d      	add	sp, #52	; 0x34
 80004b4:	bd90      	pop	{r4, r7, pc}

080004b6 <getUserAlarmObj>:

void getUserAlarmObj(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *userAlarmObj) {
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	6039      	str	r1, [r7, #0]

	// Store alarm data in alarm object pointer
	HAL_RTC_GetAlarm(hrtc, userAlarmObj, internalAlarm, FORMAT_BIN);
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	005a      	lsls	r2, r3, #1
 80004c4:	6839      	ldr	r1, [r7, #0]
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	2300      	movs	r3, #0
 80004ca:	f002 ff53 	bl	8003374 <HAL_RTC_GetAlarm>

}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b002      	add	sp, #8
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80004e0:	2301      	movs	r3, #1
 80004e2:	425b      	negs	r3, r3
 80004e4:	1d39      	adds	r1, r7, #4
 80004e6:	4804      	ldr	r0, [pc, #16]	; (80004f8 <__io_putchar+0x20>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	f003 fad9 	bl	8003aa0 <HAL_UART_Transmit>
  return ch;
 80004ee:	687b      	ldr	r3, [r7, #4]
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000140 	.word	0x20000140

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f001 f987 	bl	8001814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f84b 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f9d5 	bl	80008b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050e:	f000 f99f 	bl	8000850 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000512:	f000 f891 	bl	8000638 <MX_RTC_Init>
  MX_TIM16_Init();
 8000516:	f000 f973 	bl	8000800 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  displayToggle = 2; 		// Display at 100% intensity for next display toggle
 800051a:	4b16      	ldr	r3, [pc, #88]	; (8000574 <main+0x78>)
 800051c:	2202      	movs	r2, #2
 800051e:	701a      	strb	r2, [r3, #0]

  // Initialize all GPIOs to be used with 7 segment display
  sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <main+0x7c>)
 8000522:	8818      	ldrh	r0, [r3, #0]
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <main+0x80>)
 8000526:	8819      	ldrh	r1, [r3, #0]
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <main+0x84>)
 800052a:	881c      	ldrh	r4, [r3, #0]
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <main+0x88>)
 800052e:	881d      	ldrh	r5, [r3, #0]
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <main+0x8c>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	4a15      	ldr	r2, [pc, #84]	; (800058c <main+0x90>)
 8000536:	9202      	str	r2, [sp, #8]
 8000538:	4a15      	ldr	r2, [pc, #84]	; (8000590 <main+0x94>)
 800053a:	9201      	str	r2, [sp, #4]
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	002b      	movs	r3, r5
 8000540:	0022      	movs	r2, r4
 8000542:	f000 fe63 	bl	800120c <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, &htim16);

  	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 8000546:	1dfc      	adds	r4, r7, #7
 8000548:	f000 fa9a 	bl	8000a80 <updateAndDisplayTime>
 800054c:	0003      	movs	r3, r0
 800054e:	7023      	strb	r3, [r4, #0]

  	if(halRet != HAL_OK) {		//check HAL
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d004      	beq.n	8000562 <main+0x66>
  		printf("HAL Error - TX current time\n\r");
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <main+0x98>)
 800055a:	0018      	movs	r0, r3
 800055c:	f003 ffb0 	bl	80044c0 <iprintf>
 8000560:	e003      	b.n	800056a <main+0x6e>
  	} else {
  		printf("Display Updated with current time\n\r");
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <main+0x9c>)
 8000564:	0018      	movs	r0, r3
 8000566:	f003 ffab 	bl	80044c0 <iprintf>
  	}

  userAlarmToggle = false;			//Default to off
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <main+0xa0>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000570:	e7fe      	b.n	8000570 <main+0x74>
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	200000c4 	.word	0x200000c4
 8000578:	20000000 	.word	0x20000000
 800057c:	20000002 	.word	0x20000002
 8000580:	20000004 	.word	0x20000004
 8000584:	20000006 	.word	0x20000006
 8000588:	20000008 	.word	0x20000008
 800058c:	200000f4 	.word	0x200000f4
 8000590:	2000000c 	.word	0x2000000c
 8000594:	08005488 	.word	0x08005488
 8000598:	080054a8 	.word	0x080054a8
 800059c:	200000c5 	.word	0x200000c5

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b093      	sub	sp, #76	; 0x4c
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	2410      	movs	r4, #16
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	0018      	movs	r0, r3
 80005ac:	2338      	movs	r3, #56	; 0x38
 80005ae:	001a      	movs	r2, r3
 80005b0:	2100      	movs	r1, #0
 80005b2:	f003 ff7d 	bl	80044b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b6:	003b      	movs	r3, r7
 80005b8:	0018      	movs	r0, r3
 80005ba:	2310      	movs	r3, #16
 80005bc:	001a      	movs	r2, r3
 80005be:	2100      	movs	r1, #0
 80005c0:	f003 ff76 	bl	80044b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 fc59 	bl	8001e80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005ce:	193b      	adds	r3, r7, r4
 80005d0:	220a      	movs	r2, #10
 80005d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	0052      	lsls	r2, r2, #1
 80005da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005dc:	0021      	movs	r1, r4
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2240      	movs	r2, #64	; 0x40
 80005e8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2201      	movs	r2, #1
 80005ee:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	0018      	movs	r0, r3
 80005fa:	f001 fcb7 	bl	8001f6c <HAL_RCC_OscConfig>
 80005fe:	1e03      	subs	r3, r0, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000602:	f000 fdfd 	bl	8001200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	003b      	movs	r3, r7
 8000608:	2207      	movs	r2, #7
 800060a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800060c:	003b      	movs	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	003b      	movs	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	003b      	movs	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061e:	003b      	movs	r3, r7
 8000620:	2100      	movs	r1, #0
 8000622:	0018      	movs	r0, r3
 8000624:	f001 ffbc 	bl	80025a0 <HAL_RCC_ClockConfig>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800062c:	f000 fde8 	bl	8001200 <Error_Handler>
  }
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b013      	add	sp, #76	; 0x4c
 8000636:	bd90      	pop	{r4, r7, pc}

08000638 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b091      	sub	sp, #68	; 0x44
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800063e:	232c      	movs	r3, #44	; 0x2c
 8000640:	18fb      	adds	r3, r7, r3
 8000642:	0018      	movs	r0, r3
 8000644:	2314      	movs	r3, #20
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f003 ff31 	bl	80044b0 <memset>
  RTC_DateTypeDef sDate = {0};
 800064e:	2328      	movs	r3, #40	; 0x28
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000656:	003b      	movs	r3, r7
 8000658:	0018      	movs	r0, r3
 800065a:	2328      	movs	r3, #40	; 0x28
 800065c:	001a      	movs	r2, r3
 800065e:	2100      	movs	r1, #0
 8000660:	f003 ff26 	bl	80044b0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000664:	4b5f      	ldr	r3, [pc, #380]	; (80007e4 <MX_RTC_Init+0x1ac>)
 8000666:	4a60      	ldr	r2, [pc, #384]	; (80007e8 <MX_RTC_Init+0x1b0>)
 8000668:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800066a:	4b5e      	ldr	r3, [pc, #376]	; (80007e4 <MX_RTC_Init+0x1ac>)
 800066c:	2240      	movs	r2, #64	; 0x40
 800066e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000670:	4b5c      	ldr	r3, [pc, #368]	; (80007e4 <MX_RTC_Init+0x1ac>)
 8000672:	227f      	movs	r2, #127	; 0x7f
 8000674:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000676:	4b5b      	ldr	r3, [pc, #364]	; (80007e4 <MX_RTC_Init+0x1ac>)
 8000678:	22ff      	movs	r2, #255	; 0xff
 800067a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800067c:	4b59      	ldr	r3, [pc, #356]	; (80007e4 <MX_RTC_Init+0x1ac>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000682:	4b58      	ldr	r3, [pc, #352]	; (80007e4 <MX_RTC_Init+0x1ac>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000688:	4b56      	ldr	r3, [pc, #344]	; (80007e4 <MX_RTC_Init+0x1ac>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800068e:	4b55      	ldr	r3, [pc, #340]	; (80007e4 <MX_RTC_Init+0x1ac>)
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	05d2      	lsls	r2, r2, #23
 8000694:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000696:	4b53      	ldr	r3, [pc, #332]	; (80007e4 <MX_RTC_Init+0x1ac>)
 8000698:	2200      	movs	r2, #0
 800069a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800069c:	4b51      	ldr	r3, [pc, #324]	; (80007e4 <MX_RTC_Init+0x1ac>)
 800069e:	0018      	movs	r0, r3
 80006a0:	f002 faa2 	bl	8002be8 <HAL_RTC_Init>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80006a8:	f000 fdaa 	bl	8001200 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 80006ac:	212c      	movs	r1, #44	; 0x2c
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2200      	movs	r2, #0
 80006be:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2200      	movs	r2, #0
 80006ca:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80006d8:	1879      	adds	r1, r7, r1
 80006da:	4b42      	ldr	r3, [pc, #264]	; (80007e4 <MX_RTC_Init+0x1ac>)
 80006dc:	2200      	movs	r2, #0
 80006de:	0018      	movs	r0, r3
 80006e0:	f002 fb24 	bl	8002d2c <HAL_RTC_SetTime>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 80006e8:	f000 fd8a 	bl	8001200 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006ec:	2128      	movs	r1, #40	; 0x28
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2201      	movs	r2, #1
 80006f8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2201      	movs	r2, #1
 80006fe:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2200      	movs	r2, #0
 8000704:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000706:	1879      	adds	r1, r7, r1
 8000708:	4b36      	ldr	r3, [pc, #216]	; (80007e4 <MX_RTC_Init+0x1ac>)
 800070a:	2200      	movs	r2, #0
 800070c:	0018      	movs	r0, r3
 800070e:	f002 fc11 	bl	8002f34 <HAL_RTC_SetDate>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 8000716:	f000 fd73 	bl	8001200 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 1;
 800071a:	003b      	movs	r3, r7
 800071c:	2201      	movs	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 1;
 8000720:	003b      	movs	r3, r7
 8000722:	2201      	movs	r2, #1
 8000724:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8000726:	003b      	movs	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800072c:	003b      	movs	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000732:	003b      	movs	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000738:	003b      	movs	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800073e:	003b      	movs	r3, r7
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000744:	003b      	movs	r3, r7
 8000746:	4a29      	ldr	r2, [pc, #164]	; (80007ec <MX_RTC_Init+0x1b4>)
 8000748:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800074a:	003b      	movs	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000750:	003b      	movs	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000756:	003b      	movs	r3, r7
 8000758:	2220      	movs	r2, #32
 800075a:	2101      	movs	r1, #1
 800075c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800075e:	003b      	movs	r3, r7
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	0052      	lsls	r2, r2, #1
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000766:	0039      	movs	r1, r7
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_RTC_Init+0x1ac>)
 800076a:	2200      	movs	r2, #0
 800076c:	0018      	movs	r0, r3
 800076e:	f002 fcc1 	bl	80030f4 <HAL_RTC_SetAlarm_IT>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_RTC_Init+0x142>
  {
    Error_Handler();
 8000776:	f000 fd43 	bl	8001200 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Seconds = 10;
 800077a:	003b      	movs	r3, r7
 800077c:	220a      	movs	r2, #10
 800077e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8000780:	003b      	movs	r3, r7
 8000782:	2280      	movs	r2, #128	; 0x80
 8000784:	0612      	lsls	r2, r2, #24
 8000786:	615a      	str	r2, [r3, #20]
  sAlarm.Alarm = RTC_ALARM_B;
 8000788:	003b      	movs	r3, r7
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	0092      	lsls	r2, r2, #2
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000790:	0039      	movs	r1, r7
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_RTC_Init+0x1ac>)
 8000794:	2200      	movs	r2, #0
 8000796:	0018      	movs	r0, r3
 8000798:	f002 fcac 	bl	80030f4 <HAL_RTC_SetAlarm_IT>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <MX_RTC_Init+0x16c>
  {
    Error_Handler();
 80007a0:	f000 fd2e 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  currTime = sTime;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_RTC_Init+0x1b8>)
 80007a6:	222c      	movs	r2, #44	; 0x2c
 80007a8:	18ba      	adds	r2, r7, r2
 80007aa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007ac:	c313      	stmia	r3!, {r0, r1, r4}
 80007ae:	ca03      	ldmia	r2!, {r0, r1}
 80007b0:	c303      	stmia	r3!, {r0, r1}
  currDate = sDate;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_RTC_Init+0x1bc>)
 80007b4:	2228      	movs	r2, #40	; 0x28
 80007b6:	18ba      	adds	r2, r7, r2
 80007b8:	6812      	ldr	r2, [r2, #0]
 80007ba:	601a      	str	r2, [r3, #0]
  userAlarmObj = sAlarm;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_RTC_Init+0x1c0>)
 80007be:	003a      	movs	r2, r7
 80007c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007c2:	c313      	stmia	r3!, {r0, r1, r4}
 80007c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007c6:	c313      	stmia	r3!, {r0, r1, r4}
 80007c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007ca:	c313      	stmia	r3!, {r0, r1, r4}
 80007cc:	6812      	ldr	r2, [r2, #0]
 80007ce:	601a      	str	r2, [r3, #0]
  userAlarmTime = userAlarmObj.AlarmTime;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_RTC_Init+0x1c4>)
 80007d2:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <MX_RTC_Init+0x1c0>)
 80007d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007d6:	c313      	stmia	r3!, {r0, r1, r4}
 80007d8:	ca03      	ldmia	r2!, {r0, r1}
 80007da:	c303      	stmia	r3!, {r0, r1}

  /* USER CODE END RTC_Init 2 */

}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b011      	add	sp, #68	; 0x44
 80007e2:	bd90      	pop	{r4, r7, pc}
 80007e4:	200000c8 	.word	0x200000c8
 80007e8:	40002800 	.word	0x40002800
 80007ec:	80800080 	.word	0x80800080
 80007f0:	200001d4 	.word	0x200001d4
 80007f4:	200001e8 	.word	0x200001e8
 80007f8:	20000200 	.word	0x20000200
 80007fc:	200001ec 	.word	0x200001ec

08000800 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_TIM16_Init+0x44>)
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <MX_TIM16_Init+0x48>)
 8000808:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 244;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_TIM16_Init+0x44>)
 800080c:	22f4      	movs	r2, #244	; 0xf4
 800080e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_TIM16_Init+0x44>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_TIM16_Init+0x44>)
 8000818:	4a0c      	ldr	r2, [pc, #48]	; (800084c <MX_TIM16_Init+0x4c>)
 800081a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_TIM16_Init+0x44>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_TIM16_Init+0x44>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_TIM16_Init+0x44>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <MX_TIM16_Init+0x44>)
 8000830:	0018      	movs	r0, r3
 8000832:	f002 ff9e 	bl	8003772 <HAL_TIM_Base_Init>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800083a:	f000 fce1 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000f4 	.word	0x200000f4
 8000848:	40014400 	.word	0x40014400
 800084c:	0000ffff 	.word	0x0000ffff

08000850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_USART2_UART_Init+0x60>)
 8000856:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <MX_USART2_UART_Init+0x64>)
 8000858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_USART2_UART_Init+0x60>)
 800085c:	22e1      	movs	r2, #225	; 0xe1
 800085e:	0252      	lsls	r2, r2, #9
 8000860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_USART2_UART_Init+0x60>)
 8000864:	2280      	movs	r2, #128	; 0x80
 8000866:	0152      	lsls	r2, r2, #5
 8000868:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART2_UART_Init+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_USART2_UART_Init+0x60>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART2_UART_Init+0x60>)
 8000878:	220c      	movs	r2, #12
 800087a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART2_UART_Init+0x60>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART2_UART_Init+0x60>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART2_UART_Init+0x60>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART2_UART_Init+0x60>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART2_UART_Init+0x60>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <MX_USART2_UART_Init+0x60>)
 800089c:	0018      	movs	r0, r3
 800089e:	f003 f8a9 	bl	80039f4 <HAL_UART_Init>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80008a6:	f000 fcab 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000140 	.word	0x20000140
 80008b4:	40004400 	.word	0x40004400

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b08b      	sub	sp, #44	; 0x2c
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	2414      	movs	r4, #20
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	0018      	movs	r0, r3
 80008c4:	2314      	movs	r3, #20
 80008c6:	001a      	movs	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	f003 fdf1 	bl	80044b0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b66      	ldr	r3, [pc, #408]	; (8000a68 <MX_GPIO_Init+0x1b0>)
 80008d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008d2:	4b65      	ldr	r3, [pc, #404]	; (8000a68 <MX_GPIO_Init+0x1b0>)
 80008d4:	2102      	movs	r1, #2
 80008d6:	430a      	orrs	r2, r1
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
 80008da:	4b63      	ldr	r3, [pc, #396]	; (8000a68 <MX_GPIO_Init+0x1b0>)
 80008dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008de:	2202      	movs	r2, #2
 80008e0:	4013      	ands	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4b60      	ldr	r3, [pc, #384]	; (8000a68 <MX_GPIO_Init+0x1b0>)
 80008e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ea:	4b5f      	ldr	r3, [pc, #380]	; (8000a68 <MX_GPIO_Init+0x1b0>)
 80008ec:	2104      	movs	r1, #4
 80008ee:	430a      	orrs	r2, r1
 80008f0:	635a      	str	r2, [r3, #52]	; 0x34
 80008f2:	4b5d      	ldr	r3, [pc, #372]	; (8000a68 <MX_GPIO_Init+0x1b0>)
 80008f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008f6:	2204      	movs	r2, #4
 80008f8:	4013      	ands	r3, r2
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fe:	4b5a      	ldr	r3, [pc, #360]	; (8000a68 <MX_GPIO_Init+0x1b0>)
 8000900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000902:	4b59      	ldr	r3, [pc, #356]	; (8000a68 <MX_GPIO_Init+0x1b0>)
 8000904:	2120      	movs	r1, #32
 8000906:	430a      	orrs	r2, r1
 8000908:	635a      	str	r2, [r3, #52]	; 0x34
 800090a:	4b57      	ldr	r3, [pc, #348]	; (8000a68 <MX_GPIO_Init+0x1b0>)
 800090c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090e:	2220      	movs	r2, #32
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b54      	ldr	r3, [pc, #336]	; (8000a68 <MX_GPIO_Init+0x1b0>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091a:	4b53      	ldr	r3, [pc, #332]	; (8000a68 <MX_GPIO_Init+0x1b0>)
 800091c:	2101      	movs	r1, #1
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
 8000922:	4b51      	ldr	r3, [pc, #324]	; (8000a68 <MX_GPIO_Init+0x1b0>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000926:	2201      	movs	r2, #1
 8000928:	4013      	ands	r3, r2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Shift_Data_In_ALTERNATE_Pin|Buzzer_Output_Pin|GPIO_PIN_3|Shift_Store_Clock_Pin
 800092e:	494f      	ldr	r1, [pc, #316]	; (8000a6c <MX_GPIO_Init+0x1b4>)
 8000930:	4b4f      	ldr	r3, [pc, #316]	; (8000a70 <MX_GPIO_Init+0x1b8>)
 8000932:	2200      	movs	r2, #0
 8000934:	0018      	movs	r0, r3
 8000936:	f001 fa52 	bl	8001dde <HAL_GPIO_WritePin>
                          |Shift_Data_Clock_Pin|Shift_Master_Clear_Pin|AM_PM_LED_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800093a:	4b4e      	ldr	r3, [pc, #312]	; (8000a74 <MX_GPIO_Init+0x1bc>)
 800093c:	2200      	movs	r2, #0
 800093e:	2140      	movs	r1, #64	; 0x40
 8000940:	0018      	movs	r0, r3
 8000942:	f001 fa4c 	bl	8001dde <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Shift_Data_In_GPIO_Port, Shift_Data_In_Pin, GPIO_PIN_RESET);
 8000946:	2380      	movs	r3, #128	; 0x80
 8000948:	0219      	lsls	r1, r3, #8
 800094a:	23a0      	movs	r3, #160	; 0xa0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	2200      	movs	r2, #0
 8000950:	0018      	movs	r0, r3
 8000952:	f001 fa44 	bl	8001dde <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Shift_Data_In_ALTERNATE_Pin Buzzer_Output_Pin PB3 Shift_Store_Clock_Pin
                           Shift_Data_Clock_Pin Shift_Master_Clear_Pin AM_PM_LED_Pin Alarm_LED_Pin */
  GPIO_InitStruct.Pin = Shift_Data_In_ALTERNATE_Pin|Buzzer_Output_Pin|GPIO_PIN_3|Shift_Store_Clock_Pin
 8000956:	193b      	adds	r3, r7, r4
 8000958:	4a44      	ldr	r2, [pc, #272]	; (8000a6c <MX_GPIO_Init+0x1b4>)
 800095a:	601a      	str	r2, [r3, #0]
                          |Shift_Data_Clock_Pin|Shift_Master_Clear_Pin|AM_PM_LED_Pin|Alarm_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2201      	movs	r2, #1
 8000960:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	193b      	adds	r3, r7, r4
 8000970:	4a3f      	ldr	r2, [pc, #252]	; (8000a70 <MX_GPIO_Init+0x1b8>)
 8000972:	0019      	movs	r1, r3
 8000974:	0010      	movs	r0, r2
 8000976:	f001 f8b1 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 800097a:	0021      	movs	r1, r4
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2204      	movs	r2, #4
 8000980:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2288      	movs	r2, #136	; 0x88
 8000986:	0352      	lsls	r2, r2, #13
 8000988:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	000c      	movs	r4, r1
 800098c:	193b      	adds	r3, r7, r4
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000992:	193b      	adds	r3, r7, r4
 8000994:	4a38      	ldr	r2, [pc, #224]	; (8000a78 <MX_GPIO_Init+0x1c0>)
 8000996:	0019      	movs	r1, r3
 8000998:	0010      	movs	r0, r2
 800099a:	f001 f89f 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_Button_Pin Alarm_Set_Button_Pin Hour_Set_Button_Pin Alarm_Enable_Button_Pin
                           Minute_Set_Button_Pin */
  GPIO_InitStruct.Pin = Display_Button_Pin|Alarm_Set_Button_Pin|Hour_Set_Button_Pin|Alarm_Enable_Button_Pin
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	4a36      	ldr	r2, [pc, #216]	; (8000a7c <MX_GPIO_Init+0x1c4>)
 80009a2:	601a      	str	r2, [r3, #0]
                          |Minute_Set_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2284      	movs	r2, #132	; 0x84
 80009a8:	0392      	lsls	r2, r2, #14
 80009aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	2201      	movs	r2, #1
 80009b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	193a      	adds	r2, r7, r4
 80009b4:	23a0      	movs	r3, #160	; 0xa0
 80009b6:	05db      	lsls	r3, r3, #23
 80009b8:	0011      	movs	r1, r2
 80009ba:	0018      	movs	r0, r3
 80009bc:	f001 f88e 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2240      	movs	r2, #64	; 0x40
 80009c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	2201      	movs	r2, #1
 80009ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <MX_GPIO_Init+0x1bc>)
 80009dc:	0019      	movs	r1, r3
 80009de:	0010      	movs	r0, r2
 80009e0:	f001 f87c 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : Snooze_Button_Pin */
  GPIO_InitStruct.Pin = Snooze_Button_Pin;
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	0112      	lsls	r2, r2, #4
 80009ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	2200      	movs	r2, #0
 80009f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	2201      	movs	r2, #1
 80009f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Snooze_Button_GPIO_Port, &GPIO_InitStruct);
 80009f8:	193a      	adds	r2, r7, r4
 80009fa:	23a0      	movs	r3, #160	; 0xa0
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	0011      	movs	r1, r2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f001 f86b 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : Shift_Data_In_Pin */
  GPIO_InitStruct.Pin = Shift_Data_In_Pin;
 8000a06:	0021      	movs	r1, r4
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	0212      	lsls	r2, r2, #8
 8000a0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2201      	movs	r2, #1
 8000a14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Shift_Data_In_GPIO_Port, &GPIO_InitStruct);
 8000a22:	187a      	adds	r2, r7, r1
 8000a24:	23a0      	movs	r3, #160	; 0xa0
 8000a26:	05db      	lsls	r3, r3, #23
 8000a28:	0011      	movs	r1, r2
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 f856 	bl	8001adc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2101      	movs	r1, #1
 8000a34:	2005      	movs	r0, #5
 8000a36:	f001 f81f 	bl	8001a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000a3a:	2005      	movs	r0, #5
 8000a3c:	f001 f831 	bl	8001aa2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	2006      	movs	r0, #6
 8000a46:	f001 f817 	bl	8001a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000a4a:	2006      	movs	r0, #6
 8000a4c:	f001 f829 	bl	8001aa2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	2007      	movs	r0, #7
 8000a56:	f001 f80f 	bl	8001a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a5a:	2007      	movs	r0, #7
 8000a5c:	f001 f821 	bl	8001aa2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b00b      	add	sp, #44	; 0x2c
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	000003fa 	.word	0x000003fa
 8000a70:	50000400 	.word	0x50000400
 8000a74:	50000800 	.word	0x50000800
 8000a78:	50001400 	.word	0x50001400
 8000a7c:	00001063 	.word	0x00001063

08000a80 <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8000a8c:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <updateAndDisplayTime+0x50>)
 8000a8e:	4911      	ldr	r1, [pc, #68]	; (8000ad4 <updateAndDisplayTime+0x54>)
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <updateAndDisplayTime+0x58>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f7ff fce2 	bl	800045c <getRTCTime>
	sevSeg_updateDigits(&currTime);
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <updateAndDisplayTime+0x54>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 fc30 	bl	8001300 <sevSeg_updateDigits>

	if(currTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <updateAndDisplayTime+0x54>)
 8000aa2:	78db      	ldrb	r3, [r3, #3]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d106      	bne.n	8000ab6 <updateAndDisplayTime+0x36>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000aa8:	2180      	movs	r1, #128	; 0x80
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <updateAndDisplayTime+0x5c>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f001 f995 	bl	8001dde <HAL_GPIO_WritePin>
 8000ab4:	e005      	b.n	8000ac2 <updateAndDisplayTime+0x42>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000ab6:	2180      	movs	r1, #128	; 0x80
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <updateAndDisplayTime+0x5c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	0018      	movs	r0, r3
 8000abe:	f001 f98e 	bl	8001dde <HAL_GPIO_WritePin>
	}

	return halRet;
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]

}
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b002      	add	sp, #8
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	200001e8 	.word	0x200001e8
 8000ad4:	200001d4 	.word	0x200001d4
 8000ad8:	200000c8 	.word	0x200000c8
 8000adc:	50000400 	.word	0x50000400

08000ae0 <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]

	getUserAlarmTime(&hrtc, &userAlarmTime);
 8000aec:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <updateAndDisplayAlarm+0x50>)
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <updateAndDisplayAlarm+0x54>)
 8000af0:	0011      	movs	r1, r2
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff fcc8 	bl	8000488 <getUserAlarmTime>
	sevSeg_updateDigits(&userAlarmTime);
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <updateAndDisplayAlarm+0x50>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 fc00 	bl	8001300 <sevSeg_updateDigits>

	if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <updateAndDisplayAlarm+0x50>)
 8000b02:	78db      	ldrb	r3, [r3, #3]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d106      	bne.n	8000b16 <updateAndDisplayAlarm+0x36>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000b08:	2180      	movs	r1, #128	; 0x80
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <updateAndDisplayAlarm+0x58>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f001 f965 	bl	8001dde <HAL_GPIO_WritePin>
 8000b14:	e005      	b.n	8000b22 <updateAndDisplayAlarm+0x42>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <updateAndDisplayAlarm+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f001 f95e 	bl	8001dde <HAL_GPIO_WritePin>
	}

	return halRet;
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]

}
 8000b26:	0018      	movs	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b002      	add	sp, #8
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	200001ec 	.word	0x200001ec
 8000b34:	200000c8 	.word	0x200000c8
 8000b38:	50000400 	.word	0x50000400

08000b3c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b08d      	sub	sp, #52	; 0x34
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

	  printf("Enter current time minute increment interrupt\n\r");
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f003 fcba 	bl	80044c0 <iprintf>

	  RTC_AlarmTypeDef sAlarm;
	  getUserAlarmObj(hrtc, &sAlarm);
 8000b4c:	2408      	movs	r4, #8
 8000b4e:	193a      	adds	r2, r7, r4
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	0011      	movs	r1, r2
 8000b54:	0018      	movs	r0, r3
 8000b56:	f7ff fcae 	bl	80004b6 <getUserAlarmObj>
	  getRTCTime(hrtc, &currTime, &currDate);
 8000b5a:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8000b5c:	491b      	ldr	r1, [pc, #108]	; (8000bcc <HAL_RTC_AlarmAEventCallback+0x90>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff fc7b 	bl	800045c <getRTCTime>

	  if(sAlarm.AlarmTime.Minutes>58) {
 8000b66:	0022      	movs	r2, r4
 8000b68:	18bb      	adds	r3, r7, r2
 8000b6a:	785b      	ldrb	r3, [r3, #1]
 8000b6c:	2b3a      	cmp	r3, #58	; 0x3a
 8000b6e:	d907      	bls.n	8000b80 <HAL_RTC_AlarmAEventCallback+0x44>
		sAlarm.AlarmTime.Minutes=0;
 8000b70:	18bb      	adds	r3, r7, r2
 8000b72:	2200      	movs	r2, #0
 8000b74:	705a      	strb	r2, [r3, #1]
		printf("Reset alarm time\n\r");
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_RTC_AlarmAEventCallback+0x94>)
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f003 fca1 	bl	80044c0 <iprintf>
 8000b7e:	e006      	b.n	8000b8e <HAL_RTC_AlarmAEventCallback+0x52>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8000b80:	2108      	movs	r1, #8
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	785b      	ldrb	r3, [r3, #1]
 8000b86:	3301      	adds	r3, #1
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	2308      	movs	r3, #8
 8000b92:	18f9      	adds	r1, r7, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f002 faab 	bl	80030f4 <HAL_RTC_SetAlarm_IT>
 8000b9e:	1e03      	subs	r3, r0, #0
 8000ba0:	d1f6      	bne.n	8000b90 <HAL_RTC_AlarmAEventCallback+0x54>

	  updateAndDisplayTime();
 8000ba2:	f7ff ff6d 	bl	8000a80 <updateAndDisplayTime>

	  printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_RTC_AlarmAEventCallback+0x90>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	0019      	movs	r1, r3
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <HAL_RTC_AlarmAEventCallback+0x90>)
 8000bae:	785b      	ldrb	r3, [r3, #1]
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_RTC_AlarmAEventCallback+0x90>)
 8000bb4:	789b      	ldrb	r3, [r3, #2]
 8000bb6:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <HAL_RTC_AlarmAEventCallback+0x98>)
 8000bb8:	f003 fc82 	bl	80044c0 <iprintf>

}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b00d      	add	sp, #52	; 0x34
 8000bc2:	bd90      	pop	{r4, r7, pc}
 8000bc4:	080054cc 	.word	0x080054cc
 8000bc8:	200001e8 	.word	0x200001e8
 8000bcc:	200001d4 	.word	0x200001d4
 8000bd0:	080054fc 	.word	0x080054fc
 8000bd4:	08005510 	.word	0x08005510

08000bd8 <HAL_GPIO_EXTI_Falling_Callback>:

	HAL_TIM_Base_Stop(&htim16);

}

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	0002      	movs	r2, r0
 8000be0:	1dbb      	adds	r3, r7, #6
 8000be2:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8000be4:	2201      	movs	r2, #1
 8000be6:	1dbb      	adds	r3, r7, #6
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d113      	bne.n	8000c16 <HAL_GPIO_EXTI_Falling_Callback+0x3e>
		halRet = displayButtonISR();
 8000bee:	250f      	movs	r5, #15
 8000bf0:	197c      	adds	r4, r7, r5
 8000bf2:	f000 f88f 	bl	8000d14 <displayButtonISR>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000bfa:	197b      	adds	r3, r7, r5
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d004      	beq.n	8000c0c <HAL_GPIO_EXTI_Falling_Callback+0x34>
			printf("Error toggling display.\n\r");
 8000c02:	4b3a      	ldr	r3, [pc, #232]	; (8000cec <HAL_GPIO_EXTI_Falling_Callback+0x114>)
 8000c04:	0018      	movs	r0, r3
 8000c06:	f003 fc5b 	bl	80044c0 <iprintf>
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8000c0a:	e06a      	b.n	8000ce2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Display intensity toggled.\n\r");
 8000c0c:	4b38      	ldr	r3, [pc, #224]	; (8000cf0 <HAL_GPIO_EXTI_Falling_Callback+0x118>)
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f003 fc56 	bl	80044c0 <iprintf>
}
 8000c14:	e065      	b.n	8000ce2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8000c16:	2240      	movs	r2, #64	; 0x40
 8000c18:	1dbb      	adds	r3, r7, #6
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d113      	bne.n	8000c48 <HAL_GPIO_EXTI_Falling_Callback+0x70>
		halRet = alarmEnableISR();
 8000c20:	250f      	movs	r5, #15
 8000c22:	197c      	adds	r4, r7, r5
 8000c24:	f000 f8a2 	bl	8000d6c <alarmEnableISR>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000c2c:	197b      	adds	r3, r7, r5
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d004      	beq.n	8000c3e <HAL_GPIO_EXTI_Falling_Callback+0x66>
			printf("Error toggling user alarm.\n\r");
 8000c34:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <HAL_GPIO_EXTI_Falling_Callback+0x11c>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f003 fc42 	bl	80044c0 <iprintf>
}
 8000c3c:	e051      	b.n	8000ce2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm toggled.\n\r");
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <HAL_GPIO_EXTI_Falling_Callback+0x120>)
 8000c40:	0018      	movs	r0, r3
 8000c42:	f003 fc3d 	bl	80044c0 <iprintf>
}
 8000c46:	e04c      	b.n	8000ce2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8000c48:	2202      	movs	r2, #2
 8000c4a:	1dbb      	adds	r3, r7, #6
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d113      	bne.n	8000c7a <HAL_GPIO_EXTI_Falling_Callback+0xa2>
		halRet = alarmSetISR();
 8000c52:	250f      	movs	r5, #15
 8000c54:	197c      	adds	r4, r7, r5
 8000c56:	f000 f8d7 	bl	8000e08 <alarmSetISR>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000c5e:	197b      	adds	r3, r7, r5
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d004      	beq.n	8000c70 <HAL_GPIO_EXTI_Falling_Callback+0x98>
			printf("Error setting user alarm.\n\r");
 8000c66:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <HAL_GPIO_EXTI_Falling_Callback+0x124>)
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f003 fc29 	bl	80044c0 <iprintf>
}
 8000c6e:	e038      	b.n	8000ce2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm set.\n\r");
 8000c70:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <HAL_GPIO_EXTI_Falling_Callback+0x128>)
 8000c72:	0018      	movs	r0, r3
 8000c74:	f003 fc24 	bl	80044c0 <iprintf>
}
 8000c78:	e033      	b.n	8000ce2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == hourSetButtonPin) {
 8000c7a:	2220      	movs	r2, #32
 8000c7c:	1dbb      	adds	r3, r7, #6
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d113      	bne.n	8000cac <HAL_GPIO_EXTI_Falling_Callback+0xd4>
		halRet = hourSetISR();
 8000c84:	250f      	movs	r5, #15
 8000c86:	197c      	adds	r4, r7, r5
 8000c88:	f000 f934 	bl	8000ef4 <hourSetISR>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000c90:	197b      	adds	r3, r7, r5
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d004      	beq.n	8000ca2 <HAL_GPIO_EXTI_Falling_Callback+0xca>
			printf("Error incrementing hour.\n\r");
 8000c98:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f003 fc10 	bl	80044c0 <iprintf>
}
 8000ca0:	e01f      	b.n	8000ce2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Hour increment ISR success.\n\r");
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <HAL_GPIO_EXTI_Falling_Callback+0x130>)
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f003 fc0b 	bl	80044c0 <iprintf>
}
 8000caa:	e01a      	b.n	8000ce2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	015b      	lsls	r3, r3, #5
 8000cb0:	1dba      	adds	r2, r7, #6
 8000cb2:	8812      	ldrh	r2, [r2, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d113      	bne.n	8000ce0 <HAL_GPIO_EXTI_Falling_Callback+0x108>
		halRet = minuteSetISR();
 8000cb8:	250f      	movs	r5, #15
 8000cba:	197c      	adds	r4, r7, r5
 8000cbc:	f000 f9c6 	bl	800104c <minuteSetISR>
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000cc4:	197b      	adds	r3, r7, r5
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d004      	beq.n	8000cd6 <HAL_GPIO_EXTI_Falling_Callback+0xfe>
			printf("Error incrementing minute.\n\r");
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_GPIO_EXTI_Falling_Callback+0x134>)
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f003 fbf6 	bl	80044c0 <iprintf>
}
 8000cd4:	e005      	b.n	8000ce2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Minute increment ISR success.\n\r");
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_GPIO_EXTI_Falling_Callback+0x138>)
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f003 fbf1 	bl	80044c0 <iprintf>
}
 8000cde:	e000      	b.n	8000ce2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
		__NOP();
 8000ce0:	46c0      	nop			; (mov r8, r8)
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b004      	add	sp, #16
 8000ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	08005550 	.word	0x08005550
 8000cf0:	0800556c 	.word	0x0800556c
 8000cf4:	0800558c 	.word	0x0800558c
 8000cf8:	080055ac 	.word	0x080055ac
 8000cfc:	080055c4 	.word	0x080055c4
 8000d00:	080055e0 	.word	0x080055e0
 8000d04:	080055f4 	.word	0x080055f4
 8000d08:	08005610 	.word	0x08005610
 8000d0c:	08005630 	.word	0x08005630
 8000d10:	08005650 	.word	0x08005650

08000d14 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0

	printf("Entered display toggle ISR\n\r");
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <displayButtonISR+0x4c>)
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f003 fbcf 	bl	80044c0 <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 8000d28:	f7ff feaa 	bl	8000a80 <updateAndDisplayTime>

	//sevSeg_setIntensity(&htim1, sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <displayButtonISR+0x50>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d909      	bls.n	8000d48 <displayButtonISR+0x34>
		displayToggle = 0;
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <displayButtonISR+0x50>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
 8000d3a:	2180      	movs	r1, #128	; 0x80
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <displayButtonISR+0x54>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	0018      	movs	r0, r3
 8000d42:	f001 f84c 	bl	8001dde <HAL_GPIO_WritePin>
 8000d46:	e005      	b.n	8000d54 <displayButtonISR+0x40>
	} else {
		displayToggle++;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <displayButtonISR+0x50>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <displayButtonISR+0x50>)
 8000d52:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8000d54:	1dfb      	adds	r3, r7, #7
 8000d56:	781b      	ldrb	r3, [r3, #0]

}
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b002      	add	sp, #8
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08005670 	.word	0x08005670
 8000d64:	200000c4 	.word	0x200000c4
 8000d68:	50000400 	.word	0x50000400

08000d6c <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0

	printf("Entered alarm toggle ISR\n\r");
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <alarmEnableISR+0x84>)
 8000d74:	0018      	movs	r0, r3
 8000d76:	f003 fba3 	bl	80044c0 <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8000d80:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <alarmEnableISR+0x88>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2201      	movs	r2, #1
 8000d86:	4053      	eors	r3, r2
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d015      	beq.n	8000dba <alarmEnableISR+0x4e>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_SET);			// Turn on alarm LED
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	4819      	ldr	r0, [pc, #100]	; (8000df8 <alarmEnableISR+0x8c>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	0019      	movs	r1, r3
 8000d98:	f001 f821 	bl	8001dde <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <alarmEnableISR+0x88>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]

		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <alarmEnableISR+0x90>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	0019      	movs	r1, r3
								userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <alarmEnableISR+0x90>)
 8000daa:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000dac:	001a      	movs	r2, r3
								userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <alarmEnableISR+0x90>)
 8000db0:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000db2:	4813      	ldr	r0, [pc, #76]	; (8000e00 <alarmEnableISR+0x94>)
 8000db4:	f003 fb84 	bl	80044c0 <iprintf>
 8000db8:	e013      	b.n	8000de2 <alarmEnableISR+0x76>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <alarmEnableISR+0x88>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d00e      	beq.n	8000de0 <alarmEnableISR+0x74>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_RESET);			// Turn off alarm LED
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	480c      	ldr	r0, [pc, #48]	; (8000df8 <alarmEnableISR+0x8c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	0019      	movs	r1, r3
 8000dcc:	f001 f807 	bl	8001dde <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <alarmEnableISR+0x88>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]

		printf("User alarm disabled.\n\r");
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <alarmEnableISR+0x98>)
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f003 fb71 	bl	80044c0 <iprintf>
 8000dde:	e000      	b.n	8000de2 <alarmEnableISR+0x76>
	}
	else {
		__NOP();							//Code should never reach here.
 8000de0:	46c0      	nop			; (mov r8, r8)
	}

	return halRet;
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]

}
 8000de6:	0018      	movs	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	08005690 	.word	0x08005690
 8000df4:	200000c5 	.word	0x200000c5
 8000df8:	50000400 	.word	0x50000400
 8000dfc:	200001ec 	.word	0x200001ec
 8000e00:	080056ac 	.word	0x080056ac
 8000e04:	080056cc 	.word	0x080056cc

08000e08 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0

	printf("Enter user alarm set ISR.\n\r");
 8000e0e:	4b32      	ldr	r3, [pc, #200]	; (8000ed8 <alarmSetISR+0xd0>)
 8000e10:	0018      	movs	r0, r3
 8000e12:	f003 fb55 	bl	80044c0 <iprintf>

	getUserAlarmTime(&hrtc, &userAlarmTime);
 8000e16:	4a31      	ldr	r2, [pc, #196]	; (8000edc <alarmSetISR+0xd4>)
 8000e18:	4b31      	ldr	r3, [pc, #196]	; (8000ee0 <alarmSetISR+0xd8>)
 8000e1a:	0011      	movs	r1, r2
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff fb33 	bl	8000488 <getUserAlarmTime>
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000e22:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <alarmSetISR+0xd4>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	0019      	movs	r1, r3
			userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000e28:	4b2c      	ldr	r3, [pc, #176]	; (8000edc <alarmSetISR+0xd4>)
 8000e2a:	785b      	ldrb	r3, [r3, #1]
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000e2c:	001a      	movs	r2, r3
			userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000e2e:	4b2b      	ldr	r3, [pc, #172]	; (8000edc <alarmSetISR+0xd4>)
 8000e30:	789b      	ldrb	r3, [r3, #2]
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000e32:	482c      	ldr	r0, [pc, #176]	; (8000ee4 <alarmSetISR+0xdc>)
 8000e34:	f003 fb44 	bl	80044c0 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim16);						// Begin timer 16 counting (to 500 ms)
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <alarmSetISR+0xe0>)
 8000e40:	0018      	movs	r0, r3
 8000e42:	f002 fcef 	bl	8003824 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(&htim16);	// Get initial timer value to compare to
 8000e46:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <alarmSetISR+0xe0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e4c:	1dbb      	adds	r3, r7, #6
 8000e4e:	801a      	strh	r2, [r3, #0]
	bool displayBlink = false;
 8000e50:	1d7b      	adds	r3, r7, #5
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]

	do {											// while the alarm set button is not held down, blink display.

		updateAndDisplayAlarm();
 8000e56:	f7ff fe43 	bl	8000ae0 <updateAndDisplayAlarm>

		if(__HAL_TIM_GET_COUNTER(&htim16) - timerVal >= (65536 / 2)) {
 8000e5a:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <alarmSetISR+0xe0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e60:	1dbb      	adds	r3, r7, #6
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	1ad2      	subs	r2, r2, r3
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d313      	bcc.n	8000e96 <alarmSetISR+0x8e>

			//sevSeg_setIntensity (&htim1, sevSeg_intensityDuty[displayBlink + 1]);		// Initialize to whatever duty cycle

			timerVal = __HAL_TIM_GET_COUNTER(&htim16);
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <alarmSetISR+0xe0>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e74:	1dbb      	adds	r3, r7, #6
 8000e76:	801a      	strh	r2, [r3, #0]
			displayBlink = !displayBlink;
 8000e78:	1d7b      	adds	r3, r7, #5
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	1e5a      	subs	r2, r3, #1
 8000e7e:	4193      	sbcs	r3, r2
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2201      	movs	r2, #1
 8000e84:	4053      	eors	r3, r2
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	001a      	movs	r2, r3
 8000e8a:	1d7b      	adds	r3, r7, #5
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	781a      	ldrb	r2, [r3, #0]
 8000e90:	2101      	movs	r1, #1
 8000e92:	400a      	ands	r2, r1
 8000e94:	701a      	strb	r2, [r3, #0]

		}

	}while(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == GPIO_PIN_RESET);
 8000e96:	2202      	movs	r2, #2
 8000e98:	23a0      	movs	r3, #160	; 0xa0
 8000e9a:	05db      	lsls	r3, r3, #23
 8000e9c:	0011      	movs	r1, r2
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f000 ff80 	bl	8001da4 <HAL_GPIO_ReadPin>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d0d6      	beq.n	8000e56 <alarmSetISR+0x4e>

	//sevSeg_setIntensity(&htim1, sevSeg_intensityDuty[0]);			// Turn display back to full intensity

	HAL_TIM_Base_Stop(&htim16);
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <alarmSetISR+0xe0>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f002 fd06 	bl	80038bc <HAL_TIM_Base_Stop>

	updateAndDisplayTime();
 8000eb0:	f7ff fde6 	bl	8000a80 <updateAndDisplayTime>
	printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <alarmSetISR+0xe4>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	0019      	movs	r1, r3
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <alarmSetISR+0xe4>)
 8000ebc:	785b      	ldrb	r3, [r3, #1]
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <alarmSetISR+0xe4>)
 8000ec2:	789b      	ldrb	r3, [r3, #2]
 8000ec4:	480a      	ldr	r0, [pc, #40]	; (8000ef0 <alarmSetISR+0xe8>)
 8000ec6:	f003 fafb 	bl	80044c0 <iprintf>

	return halRet;
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	781b      	ldrb	r3, [r3, #0]

}
 8000ece:	0018      	movs	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	080056e4 	.word	0x080056e4
 8000edc:	200001ec 	.word	0x200001ec
 8000ee0:	200000c8 	.word	0x200000c8
 8000ee4:	08005700 	.word	0x08005700
 8000ee8:	200000f4 	.word	0x200000f4
 8000eec:	200001d4 	.word	0x200001d4
 8000ef0:	08005728 	.word	0x08005728

08000ef4 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0

	printf("Entered hour set ISR.\n\r");
 8000efa:	4b4c      	ldr	r3, [pc, #304]	; (800102c <hourSetISR+0x138>)
 8000efc:	0018      	movs	r0, r3
 8000efe:	f003 fadf 	bl	80044c0 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) != GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 8000f08:	2202      	movs	r2, #2
 8000f0a:	23a0      	movs	r3, #160	; 0xa0
 8000f0c:	05db      	lsls	r3, r3, #23
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f000 ff47 	bl	8001da4 <HAL_GPIO_ReadPin>
 8000f16:	0003      	movs	r3, r0
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d042      	beq.n	8000fa2 <hourSetISR+0xae>

		getUserAlarmTime(&hrtc, &userAlarmTime);
 8000f1c:	4a44      	ldr	r2, [pc, #272]	; (8001030 <hourSetISR+0x13c>)
 8000f1e:	4b45      	ldr	r3, [pc, #276]	; (8001034 <hourSetISR+0x140>)
 8000f20:	0011      	movs	r1, r2
 8000f22:	0018      	movs	r0, r3
 8000f24:	f7ff fab0 	bl	8000488 <getUserAlarmTime>

		if(userAlarmTime.Hours >= 12) {
 8000f28:	4b41      	ldr	r3, [pc, #260]	; (8001030 <hourSetISR+0x13c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b0b      	cmp	r3, #11
 8000f2e:	d90e      	bls.n	8000f4e <hourSetISR+0x5a>
			userAlarmTime.Hours = 1;
 8000f30:	4b3f      	ldr	r3, [pc, #252]	; (8001030 <hourSetISR+0x13c>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8000f36:	4b3e      	ldr	r3, [pc, #248]	; (8001030 <hourSetISR+0x13c>)
 8000f38:	78db      	ldrb	r3, [r3, #3]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d103      	bne.n	8000f46 <hourSetISR+0x52>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8000f3e:	4b3c      	ldr	r3, [pc, #240]	; (8001030 <hourSetISR+0x13c>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	70da      	strb	r2, [r3, #3]
 8000f44:	e00f      	b.n	8000f66 <hourSetISR+0x72>
			} else {
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000f46:	4b3a      	ldr	r3, [pc, #232]	; (8001030 <hourSetISR+0x13c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	70da      	strb	r2, [r3, #3]
 8000f4c:	e00b      	b.n	8000f66 <hourSetISR+0x72>
			}
		}
		else if(userAlarmTime.Hours < 12) {
 8000f4e:	4b38      	ldr	r3, [pc, #224]	; (8001030 <hourSetISR+0x13c>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b0b      	cmp	r3, #11
 8000f54:	d806      	bhi.n	8000f64 <hourSetISR+0x70>
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8000f56:	4b36      	ldr	r3, [pc, #216]	; (8001030 <hourSetISR+0x13c>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b34      	ldr	r3, [pc, #208]	; (8001030 <hourSetISR+0x13c>)
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	e000      	b.n	8000f66 <hourSetISR+0x72>
		}
		else {
			__NOP();
 8000f64:	46c0      	nop			; (mov r8, r8)
		}

		userAlarmObj.AlarmTime = userAlarmTime;
 8000f66:	4b34      	ldr	r3, [pc, #208]	; (8001038 <hourSetISR+0x144>)
 8000f68:	4a31      	ldr	r2, [pc, #196]	; (8001030 <hourSetISR+0x13c>)
 8000f6a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f6c:	c313      	stmia	r3!, {r0, r1, r4}
 8000f6e:	ca03      	ldmia	r2!, {r0, r1}
 8000f70:	c303      	stmia	r3!, {r0, r1}

		HAL_RTC_SetAlarm_IT(&hrtc, &userAlarmObj, RTCTimeFormat);
 8000f72:	4931      	ldr	r1, [pc, #196]	; (8001038 <hourSetISR+0x144>)
 8000f74:	4b2f      	ldr	r3, [pc, #188]	; (8001034 <hourSetISR+0x140>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f002 f8bb 	bl	80030f4 <HAL_RTC_SetAlarm_IT>
		getUserAlarmTime(&hrtc, &userAlarmTime);
 8000f7e:	4a2c      	ldr	r2, [pc, #176]	; (8001030 <hourSetISR+0x13c>)
 8000f80:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <hourSetISR+0x140>)
 8000f82:	0011      	movs	r1, r2
 8000f84:	0018      	movs	r0, r3
 8000f86:	f7ff fa7f 	bl	8000488 <getUserAlarmTime>

		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 8000f8a:	4b29      	ldr	r3, [pc, #164]	; (8001030 <hourSetISR+0x13c>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	0019      	movs	r1, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <hourSetISR+0x13c>)
 8000f92:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 8000f94:	001a      	movs	r2, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000f96:	4b26      	ldr	r3, [pc, #152]	; (8001030 <hourSetISR+0x13c>)
 8000f98:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 8000f9a:	4828      	ldr	r0, [pc, #160]	; (800103c <hourSetISR+0x148>)
 8000f9c:	f003 fa90 	bl	80044c0 <iprintf>
 8000fa0:	e03d      	b.n	800101e <hourSetISR+0x12a>

	}
	else {									// Otherwise, change current time hour.

		getRTCTime(&hrtc, &currTime, &currDate);
 8000fa2:	4a27      	ldr	r2, [pc, #156]	; (8001040 <hourSetISR+0x14c>)
 8000fa4:	4927      	ldr	r1, [pc, #156]	; (8001044 <hourSetISR+0x150>)
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <hourSetISR+0x140>)
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff fa57 	bl	800045c <getRTCTime>
		if(currTime.Hours >= 12) {
 8000fae:	4b25      	ldr	r3, [pc, #148]	; (8001044 <hourSetISR+0x150>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b0b      	cmp	r3, #11
 8000fb4:	d90e      	bls.n	8000fd4 <hourSetISR+0xe0>
			currTime.Hours = 1;
 8000fb6:	4b23      	ldr	r3, [pc, #140]	; (8001044 <hourSetISR+0x150>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
			if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8000fbc:	4b21      	ldr	r3, [pc, #132]	; (8001044 <hourSetISR+0x150>)
 8000fbe:	78db      	ldrb	r3, [r3, #3]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d103      	bne.n	8000fcc <hourSetISR+0xd8>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <hourSetISR+0x150>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	70da      	strb	r2, [r3, #3]
 8000fca:	e00f      	b.n	8000fec <hourSetISR+0xf8>
			} else {
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <hourSetISR+0x150>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	70da      	strb	r2, [r3, #3]
 8000fd2:	e00b      	b.n	8000fec <hourSetISR+0xf8>
			}
		}
		else if(currTime.Hours < 12) {
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <hourSetISR+0x150>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b0b      	cmp	r3, #11
 8000fda:	d806      	bhi.n	8000fea <hourSetISR+0xf6>
			currTime.Hours = currTime.Hours + 1;
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <hourSetISR+0x150>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <hourSetISR+0x150>)
 8000fe6:	701a      	strb	r2, [r3, #0]
 8000fe8:	e000      	b.n	8000fec <hourSetISR+0xf8>
		}
		else {
			__NOP();
 8000fea:	46c0      	nop			; (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8000fec:	4915      	ldr	r1, [pc, #84]	; (8001044 <hourSetISR+0x150>)
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <hourSetISR+0x140>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f001 fe9a 	bl	8002d2c <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8000ff8:	f7ff fd42 	bl	8000a80 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8000ffc:	4a10      	ldr	r2, [pc, #64]	; (8001040 <hourSetISR+0x14c>)
 8000ffe:	4911      	ldr	r1, [pc, #68]	; (8001044 <hourSetISR+0x150>)
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <hourSetISR+0x140>)
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff fa2a 	bl	800045c <getRTCTime>

		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <hourSetISR+0x150>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <hourSetISR+0x150>)
 8001010:	785b      	ldrb	r3, [r3, #1]
		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001012:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <hourSetISR+0x150>)
 8001016:	789b      	ldrb	r3, [r3, #2]
		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001018:	480b      	ldr	r0, [pc, #44]	; (8001048 <hourSetISR+0x154>)
 800101a:	f003 fa51 	bl	80044c0 <iprintf>
	}

	return halRet;
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	781b      	ldrb	r3, [r3, #0]
}
 8001022:	0018      	movs	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	b003      	add	sp, #12
 8001028:	bd90      	pop	{r4, r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	0800574c 	.word	0x0800574c
 8001030:	200001ec 	.word	0x200001ec
 8001034:	200000c8 	.word	0x200000c8
 8001038:	20000200 	.word	0x20000200
 800103c:	08005764 	.word	0x08005764
 8001040:	200001e8 	.word	0x200001e8
 8001044:	200001d4 	.word	0x200001d4
 8001048:	08005790 	.word	0x08005790

0800104c <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0

	printf("Entered minute set ISR.\n\r");
 8001052:	4b63      	ldr	r3, [pc, #396]	; (80011e0 <minuteSetISR+0x194>)
 8001054:	0018      	movs	r0, r3
 8001056:	f003 fa33 	bl	80044c0 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == !GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 8001060:	2202      	movs	r2, #2
 8001062:	23a0      	movs	r3, #160	; 0xa0
 8001064:	05db      	lsls	r3, r3, #23
 8001066:	0011      	movs	r1, r2
 8001068:	0018      	movs	r0, r3
 800106a:	f000 fe9b 	bl	8001da4 <HAL_GPIO_ReadPin>
 800106e:	1e03      	subs	r3, r0, #0
 8001070:	d157      	bne.n	8001122 <minuteSetISR+0xd6>

		getUserAlarmTime(&hrtc, &userAlarmTime);
 8001072:	4a5c      	ldr	r2, [pc, #368]	; (80011e4 <minuteSetISR+0x198>)
 8001074:	4b5c      	ldr	r3, [pc, #368]	; (80011e8 <minuteSetISR+0x19c>)
 8001076:	0011      	movs	r1, r2
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff fa05 	bl	8000488 <getUserAlarmTime>

		if(userAlarmTime.Minutes >= 59) {
 800107e:	4b59      	ldr	r3, [pc, #356]	; (80011e4 <minuteSetISR+0x198>)
 8001080:	785b      	ldrb	r3, [r3, #1]
 8001082:	2b3a      	cmp	r3, #58	; 0x3a
 8001084:	d929      	bls.n	80010da <minuteSetISR+0x8e>
			userAlarmTime.Minutes = 0;
 8001086:	4b57      	ldr	r3, [pc, #348]	; (80011e4 <minuteSetISR+0x198>)
 8001088:	2200      	movs	r2, #0
 800108a:	705a      	strb	r2, [r3, #1]
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 800108c:	4b55      	ldr	r3, [pc, #340]	; (80011e4 <minuteSetISR+0x198>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	3301      	adds	r3, #1
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b53      	ldr	r3, [pc, #332]	; (80011e4 <minuteSetISR+0x198>)
 8001096:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.Hours > 12) {
 8001098:	4b52      	ldr	r3, [pc, #328]	; (80011e4 <minuteSetISR+0x198>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b0c      	cmp	r3, #12
 800109e:	d902      	bls.n	80010a6 <minuteSetISR+0x5a>
				userAlarmTime.Hours = 1;
 80010a0:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <minuteSetISR+0x198>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
			}
			if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80010a6:	4b4f      	ldr	r3, [pc, #316]	; (80011e4 <minuteSetISR+0x198>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b0c      	cmp	r3, #12
 80010ac:	d107      	bne.n	80010be <minuteSetISR+0x72>
 80010ae:	4b4d      	ldr	r3, [pc, #308]	; (80011e4 <minuteSetISR+0x198>)
 80010b0:	78db      	ldrb	r3, [r3, #3]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d103      	bne.n	80010be <minuteSetISR+0x72>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80010b6:	4b4b      	ldr	r3, [pc, #300]	; (80011e4 <minuteSetISR+0x198>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	70da      	strb	r2, [r3, #3]
 80010bc:	e019      	b.n	80010f2 <minuteSetISR+0xa6>
			} else if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 80010be:	4b49      	ldr	r3, [pc, #292]	; (80011e4 <minuteSetISR+0x198>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b0c      	cmp	r3, #12
 80010c4:	d107      	bne.n	80010d6 <minuteSetISR+0x8a>
 80010c6:	4b47      	ldr	r3, [pc, #284]	; (80011e4 <minuteSetISR+0x198>)
 80010c8:	78db      	ldrb	r3, [r3, #3]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d103      	bne.n	80010d6 <minuteSetISR+0x8a>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80010ce:	4b45      	ldr	r3, [pc, #276]	; (80011e4 <minuteSetISR+0x198>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	70da      	strb	r2, [r3, #3]
 80010d4:	e00d      	b.n	80010f2 <minuteSetISR+0xa6>
			}
			else {
				__NOP();
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	e00b      	b.n	80010f2 <minuteSetISR+0xa6>
			}
		}
		else if(userAlarmTime.Minutes < 59) {
 80010da:	4b42      	ldr	r3, [pc, #264]	; (80011e4 <minuteSetISR+0x198>)
 80010dc:	785b      	ldrb	r3, [r3, #1]
 80010de:	2b3a      	cmp	r3, #58	; 0x3a
 80010e0:	d806      	bhi.n	80010f0 <minuteSetISR+0xa4>
			userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 80010e2:	4b40      	ldr	r3, [pc, #256]	; (80011e4 <minuteSetISR+0x198>)
 80010e4:	785b      	ldrb	r3, [r3, #1]
 80010e6:	3301      	adds	r3, #1
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b3e      	ldr	r3, [pc, #248]	; (80011e4 <minuteSetISR+0x198>)
 80010ec:	705a      	strb	r2, [r3, #1]
 80010ee:	e000      	b.n	80010f2 <minuteSetISR+0xa6>
		}
		else {
			__NOP();
 80010f0:	46c0      	nop			; (mov r8, r8)
		}

		userAlarmObj.AlarmTime = userAlarmTime;
 80010f2:	4b3e      	ldr	r3, [pc, #248]	; (80011ec <minuteSetISR+0x1a0>)
 80010f4:	4a3b      	ldr	r2, [pc, #236]	; (80011e4 <minuteSetISR+0x198>)
 80010f6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80010f8:	c313      	stmia	r3!, {r0, r1, r4}
 80010fa:	ca03      	ldmia	r2!, {r0, r1}
 80010fc:	c303      	stmia	r3!, {r0, r1}

		HAL_RTC_SetAlarm_IT(&hrtc, &userAlarmObj, RTCTimeFormat);
 80010fe:	493b      	ldr	r1, [pc, #236]	; (80011ec <minuteSetISR+0x1a0>)
 8001100:	4b39      	ldr	r3, [pc, #228]	; (80011e8 <minuteSetISR+0x19c>)
 8001102:	2200      	movs	r2, #0
 8001104:	0018      	movs	r0, r3
 8001106:	f001 fff5 	bl	80030f4 <HAL_RTC_SetAlarm_IT>

		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmObj.AlarmTime.Hours,
 800110a:	4b38      	ldr	r3, [pc, #224]	; (80011ec <minuteSetISR+0x1a0>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	0019      	movs	r1, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 8001110:	4b36      	ldr	r3, [pc, #216]	; (80011ec <minuteSetISR+0x1a0>)
 8001112:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmObj.AlarmTime.Hours,
 8001114:	001a      	movs	r2, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 8001116:	4b35      	ldr	r3, [pc, #212]	; (80011ec <minuteSetISR+0x1a0>)
 8001118:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmObj.AlarmTime.Hours,
 800111a:	4835      	ldr	r0, [pc, #212]	; (80011f0 <minuteSetISR+0x1a4>)
 800111c:	f003 f9d0 	bl	80044c0 <iprintf>
 8001120:	e058      	b.n	80011d4 <minuteSetISR+0x188>

	}
	else {									// Otherwise, change current time hour.

		getRTCTime(&hrtc, &currTime, &currDate);
 8001122:	4a34      	ldr	r2, [pc, #208]	; (80011f4 <minuteSetISR+0x1a8>)
 8001124:	4934      	ldr	r1, [pc, #208]	; (80011f8 <minuteSetISR+0x1ac>)
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <minuteSetISR+0x19c>)
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff f997 	bl	800045c <getRTCTime>

		if(currTime.Minutes >= 59) {
 800112e:	4b32      	ldr	r3, [pc, #200]	; (80011f8 <minuteSetISR+0x1ac>)
 8001130:	785b      	ldrb	r3, [r3, #1]
 8001132:	2b3a      	cmp	r3, #58	; 0x3a
 8001134:	d929      	bls.n	800118a <minuteSetISR+0x13e>
			currTime.Minutes = 0;
 8001136:	4b30      	ldr	r3, [pc, #192]	; (80011f8 <minuteSetISR+0x1ac>)
 8001138:	2200      	movs	r2, #0
 800113a:	705a      	strb	r2, [r3, #1]
			currTime.Hours = currTime.Hours + 1;
 800113c:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <minuteSetISR+0x1ac>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	3301      	adds	r3, #1
 8001142:	b2da      	uxtb	r2, r3
 8001144:	4b2c      	ldr	r3, [pc, #176]	; (80011f8 <minuteSetISR+0x1ac>)
 8001146:	701a      	strb	r2, [r3, #0]
			if(currTime.Hours > 12) {
 8001148:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <minuteSetISR+0x1ac>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b0c      	cmp	r3, #12
 800114e:	d902      	bls.n	8001156 <minuteSetISR+0x10a>
				currTime.Hours = 1;
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <minuteSetISR+0x1ac>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
			}
			if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001156:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <minuteSetISR+0x1ac>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b0c      	cmp	r3, #12
 800115c:	d107      	bne.n	800116e <minuteSetISR+0x122>
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <minuteSetISR+0x1ac>)
 8001160:	78db      	ldrb	r3, [r3, #3]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d103      	bne.n	800116e <minuteSetISR+0x122>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001166:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <minuteSetISR+0x1ac>)
 8001168:	2201      	movs	r2, #1
 800116a:	70da      	strb	r2, [r3, #3]
 800116c:	e019      	b.n	80011a2 <minuteSetISR+0x156>
			} else if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <minuteSetISR+0x1ac>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b0c      	cmp	r3, #12
 8001174:	d107      	bne.n	8001186 <minuteSetISR+0x13a>
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <minuteSetISR+0x1ac>)
 8001178:	78db      	ldrb	r3, [r3, #3]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d103      	bne.n	8001186 <minuteSetISR+0x13a>
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <minuteSetISR+0x1ac>)
 8001180:	2200      	movs	r2, #0
 8001182:	70da      	strb	r2, [r3, #3]
 8001184:	e00d      	b.n	80011a2 <minuteSetISR+0x156>
			}
			else {
				__NOP();
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	e00b      	b.n	80011a2 <minuteSetISR+0x156>
			}
		}
		else if(currTime.Minutes < 59) {
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <minuteSetISR+0x1ac>)
 800118c:	785b      	ldrb	r3, [r3, #1]
 800118e:	2b3a      	cmp	r3, #58	; 0x3a
 8001190:	d806      	bhi.n	80011a0 <minuteSetISR+0x154>
			currTime.Minutes = currTime.Minutes + 1;
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <minuteSetISR+0x1ac>)
 8001194:	785b      	ldrb	r3, [r3, #1]
 8001196:	3301      	adds	r3, #1
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <minuteSetISR+0x1ac>)
 800119c:	705a      	strb	r2, [r3, #1]
 800119e:	e000      	b.n	80011a2 <minuteSetISR+0x156>
		}
		else {
			__NOP();
 80011a0:	46c0      	nop			; (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80011a2:	4915      	ldr	r1, [pc, #84]	; (80011f8 <minuteSetISR+0x1ac>)
 80011a4:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <minuteSetISR+0x19c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	0018      	movs	r0, r3
 80011aa:	f001 fdbf 	bl	8002d2c <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80011ae:	f7ff fc67 	bl	8000a80 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80011b2:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <minuteSetISR+0x1a8>)
 80011b4:	4910      	ldr	r1, [pc, #64]	; (80011f8 <minuteSetISR+0x1ac>)
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <minuteSetISR+0x19c>)
 80011b8:	0018      	movs	r0, r3
 80011ba:	f7ff f94f 	bl	800045c <getRTCTime>

		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <minuteSetISR+0x1ac>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <minuteSetISR+0x1ac>)
 80011c6:	785b      	ldrb	r3, [r3, #1]
		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 80011c8:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <minuteSetISR+0x1ac>)
 80011cc:	789b      	ldrb	r3, [r3, #2]
		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 80011ce:	480b      	ldr	r0, [pc, #44]	; (80011fc <minuteSetISR+0x1b0>)
 80011d0:	f003 f976 	bl	80044c0 <iprintf>
	}

	return halRet;
 80011d4:	1dfb      	adds	r3, r7, #7
 80011d6:	781b      	ldrb	r3, [r3, #0]
}
 80011d8:	0018      	movs	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	b003      	add	sp, #12
 80011de:	bd90      	pop	{r4, r7, pc}
 80011e0:	080057c0 	.word	0x080057c0
 80011e4:	200001ec 	.word	0x200001ec
 80011e8:	200000c8 	.word	0x200000c8
 80011ec:	20000200 	.word	0x20000200
 80011f0:	080057dc 	.word	0x080057dc
 80011f4:	200001e8 	.word	0x200001e8
 80011f8:	200001d4 	.word	0x200001d4
 80011fc:	08005808 	.word	0x08005808

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001208:	e7fe      	b.n	8001208 <Error_Handler+0x8>
	...

0800120c <sevSeg_Init>:
GPIO_PinState GPIOPinSet[2] = {GPIO_PIN_RESET, GPIO_PIN_SET};


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim) {
 800120c:	b5b0      	push	{r4, r5, r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	0005      	movs	r5, r0
 8001214:	000c      	movs	r4, r1
 8001216:	0010      	movs	r0, r2
 8001218:	0019      	movs	r1, r3
 800121a:	1dbb      	adds	r3, r7, #6
 800121c:	1c2a      	adds	r2, r5, #0
 800121e:	801a      	strh	r2, [r3, #0]
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	1c22      	adds	r2, r4, #0
 8001224:	801a      	strh	r2, [r3, #0]
 8001226:	1cbb      	adds	r3, r7, #2
 8001228:	1c02      	adds	r2, r0, #0
 800122a:	801a      	strh	r2, [r3, #0]
 800122c:	003b      	movs	r3, r7
 800122e:	1c0a      	adds	r2, r1, #0
 8001230:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <sevSeg_Init+0xd8>)
 8001234:	1dba      	adds	r2, r7, #6
 8001236:	8812      	ldrh	r2, [r2, #0]
 8001238:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 800123a:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <sevSeg_Init+0xdc>)
 800123c:	1d3a      	adds	r2, r7, #4
 800123e:	8812      	ldrh	r2, [r2, #0]
 8001240:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001242:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <sevSeg_Init+0xe0>)
 8001244:	1cba      	adds	r2, r7, #2
 8001246:	8812      	ldrh	r2, [r2, #0]
 8001248:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 800124a:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <sevSeg_Init+0xe4>)
 800124c:	003a      	movs	r2, r7
 800124e:	8812      	ldrh	r2, [r2, #0]
 8001250:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001252:	4a28      	ldr	r2, [pc, #160]	; (80012f4 <sevSeg_Init+0xe8>)
 8001254:	2320      	movs	r3, #32
 8001256:	18fb      	adds	r3, r7, r3
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	8013      	strh	r3, [r2, #0]

	for(int i = 0; i < 5; i++) {
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	e00b      	b.n	800127a <sevSeg_Init+0x6e>
		portArray[i] = GPIOPortArray[i];
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001268:	18d3      	adds	r3, r2, r3
 800126a:	6819      	ldr	r1, [r3, #0]
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <sevSeg_Init+0xec>)
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	0092      	lsls	r2, r2, #2
 8001272:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3301      	adds	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2b04      	cmp	r3, #4
 800127e:	ddf0      	ble.n	8001262 <sevSeg_Init+0x56>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <sevSeg_Init+0xec>)
 8001282:	6918      	ldr	r0, [r3, #16]
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <sevSeg_Init+0xe8>)
 8001286:	8819      	ldrh	r1, [r3, #0]
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <sevSeg_Init+0xf0>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	001a      	movs	r2, r3
 800128e:	f000 fda6 	bl	8001dde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <sevSeg_Init+0xec>)
 8001294:	6918      	ldr	r0, [r3, #16]
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <sevSeg_Init+0xe8>)
 8001298:	8819      	ldrh	r1, [r3, #0]
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <sevSeg_Init+0xf0>)
 800129c:	785b      	ldrb	r3, [r3, #1]
 800129e:	001a      	movs	r2, r3
 80012a0:	f000 fd9d 	bl	8001dde <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <sevSeg_Init+0xec>)
 80012a6:	6898      	ldr	r0, [r3, #8]
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <sevSeg_Init+0xe0>)
 80012aa:	8819      	ldrh	r1, [r3, #0]
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <sevSeg_Init+0xf0>)
 80012ae:	785b      	ldrb	r3, [r3, #1]
 80012b0:	001a      	movs	r2, r3
 80012b2:	f000 fd94 	bl	8001dde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <sevSeg_Init+0xec>)
 80012b8:	6898      	ldr	r0, [r3, #8]
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <sevSeg_Init+0xe0>)
 80012bc:	8819      	ldrh	r1, [r3, #0]
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <sevSeg_Init+0xf0>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	001a      	movs	r2, r3
 80012c4:	f000 fd8b 	bl	8001dde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <sevSeg_Init+0xec>)
 80012ca:	68d8      	ldr	r0, [r3, #12]
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <sevSeg_Init+0xe4>)
 80012ce:	8819      	ldrh	r1, [r3, #0]
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <sevSeg_Init+0xf0>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	001a      	movs	r2, r3
 80012d6:	f000 fd82 	bl	8001dde <HAL_GPIO_WritePin>

	//sevSeg_setIntensity(htim_PWM, 50);

	//Flash an initializing "Hof" symbol

}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	b004      	add	sp, #16
 80012e0:	bdb0      	pop	{r4, r5, r7, pc}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	20000228 	.word	0x20000228
 80012e8:	2000022a 	.word	0x2000022a
 80012ec:	2000022c 	.word	0x2000022c
 80012f0:	2000022e 	.word	0x2000022e
 80012f4:	20000230 	.word	0x20000230
 80012f8:	20000020 	.word	0x20000020
 80012fc:	20000034 	.word	0x20000034

08001300 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {dig3Seg[updateTime->Hours / 10], updateTime->Hours % 10,
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	210a      	movs	r1, #10
 800130e:	0018      	movs	r0, r3
 8001310:	f7fe ff02 	bl	8000118 <__udivsi3>
 8001314:	0003      	movs	r3, r0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	001a      	movs	r2, r3
 800131a:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <sevSeg_updateDigits+0x110>)
 800131c:	5c9a      	ldrb	r2, [r3, r2]
 800131e:	2408      	movs	r4, #8
 8001320:	193b      	adds	r3, r7, r4
 8001322:	701a      	strb	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	210a      	movs	r1, #10
 800132a:	0018      	movs	r0, r3
 800132c:	f7fe ff7a 	bl	8000224 <__aeabi_uidivmod>
 8001330:	000b      	movs	r3, r1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	193b      	adds	r3, r7, r4
 8001336:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {dig3Seg[updateTime->Hours / 10], updateTime->Hours % 10,
 800133c:	210a      	movs	r1, #10
 800133e:	0018      	movs	r0, r3
 8001340:	f7fe feea 	bl	8000118 <__udivsi3>
 8001344:	0003      	movs	r3, r0
 8001346:	b2da      	uxtb	r2, r3
 8001348:	193b      	adds	r3, r7, r4
 800134a:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {dig3Seg[updateTime->Hours / 10], updateTime->Hours % 10,
 8001350:	210a      	movs	r1, #10
 8001352:	0018      	movs	r0, r3
 8001354:	f7fe ff66 	bl	8000224 <__aeabi_uidivmod>
 8001358:	000b      	movs	r3, r1
 800135a:	b2da      	uxtb	r2, r3
 800135c:	193b      	adds	r3, r7, r4
 800135e:	70da      	strb	r2, [r3, #3]

	//uint8_t sendTime[4] = {8, 8, 8, 8};

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	e03b      	b.n	80013de <sevSeg_updateDigits+0xde>

		sendByte = dispDigits[sendTime[i]];
 8001366:	2308      	movs	r3, #8
 8001368:	18fa      	adds	r2, r7, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	18d3      	adds	r3, r2, r3
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	0019      	movs	r1, r3
 8001372:	2317      	movs	r3, #23
 8001374:	18fb      	adds	r3, r7, r3
 8001376:	4a27      	ldr	r2, [pc, #156]	; (8001414 <sevSeg_updateDigits+0x114>)
 8001378:	5c52      	ldrb	r2, [r2, r1]
 800137a:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	e027      	b.n	80013d2 <sevSeg_updateDigits+0xd2>

			// Write data pin with LSB of data
			//HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <sevSeg_updateDigits+0x118>)
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	4b25      	ldr	r3, [pc, #148]	; (800141c <sevSeg_updateDigits+0x11c>)
 8001388:	8819      	ldrh	r1, [r3, #0]
 800138a:	2417      	movs	r4, #23
 800138c:	193b      	adds	r3, r7, r4
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2201      	movs	r2, #1
 8001392:	4013      	ands	r3, r2
 8001394:	4a22      	ldr	r2, [pc, #136]	; (8001420 <sevSeg_updateDigits+0x120>)
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	001a      	movs	r2, r3
 800139a:	f000 fd20 	bl	8001dde <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <sevSeg_updateDigits+0x118>)
 80013a0:	6858      	ldr	r0, [r3, #4]
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <sevSeg_updateDigits+0x124>)
 80013a4:	8819      	ldrh	r1, [r3, #0]
 80013a6:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <sevSeg_updateDigits+0x120>)
 80013a8:	785b      	ldrb	r3, [r3, #1]
 80013aa:	001a      	movs	r2, r3
 80013ac:	f000 fd17 	bl	8001dde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <sevSeg_updateDigits+0x118>)
 80013b2:	6858      	ldr	r0, [r3, #4]
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <sevSeg_updateDigits+0x124>)
 80013b6:	8819      	ldrh	r1, [r3, #0]
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <sevSeg_updateDigits+0x120>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	001a      	movs	r2, r3
 80013be:	f000 fd0e 	bl	8001dde <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 80013c2:	193b      	adds	r3, r7, r4
 80013c4:	193a      	adds	r2, r7, r4
 80013c6:	7812      	ldrb	r2, [r2, #0]
 80013c8:	0852      	lsrs	r2, r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3301      	adds	r3, #1
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b07      	cmp	r3, #7
 80013d6:	ddd4      	ble.n	8001382 <sevSeg_updateDigits+0x82>
	for(int i = 0; i <= 3; i++) {
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	3301      	adds	r3, #1
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	ddc0      	ble.n	8001366 <sevSeg_updateDigits+0x66>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <sevSeg_updateDigits+0x118>)
 80013e6:	6898      	ldr	r0, [r3, #8]
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <sevSeg_updateDigits+0x128>)
 80013ea:	8819      	ldrh	r1, [r3, #0]
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <sevSeg_updateDigits+0x120>)
 80013ee:	785b      	ldrb	r3, [r3, #1]
 80013f0:	001a      	movs	r2, r3
 80013f2:	f000 fcf4 	bl	8001dde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <sevSeg_updateDigits+0x118>)
 80013f8:	6898      	ldr	r0, [r3, #8]
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <sevSeg_updateDigits+0x128>)
 80013fc:	8819      	ldrh	r1, [r3, #0]
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <sevSeg_updateDigits+0x120>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	001a      	movs	r2, r3
 8001404:	f000 fceb 	bl	8001dde <HAL_GPIO_WritePin>

	return;
 8001408:	46c0      	nop			; (mov r8, r8)

}
 800140a:	46bd      	mov	sp, r7
 800140c:	b007      	add	sp, #28
 800140e:	bd90      	pop	{r4, r7, pc}
 8001410:	08005844 	.word	0x08005844
 8001414:	08005838 	.word	0x08005838
 8001418:	20000020 	.word	0x20000020
 800141c:	20000228 	.word	0x20000228
 8001420:	20000034 	.word	0x20000034
 8001424:	2000022a 	.word	0x2000022a
 8001428:	2000022c 	.word	0x2000022c

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_MspInit+0x54>)
 8001434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_MspInit+0x54>)
 8001438:	2101      	movs	r1, #1
 800143a:	430a      	orrs	r2, r1
 800143c:	641a      	str	r2, [r3, #64]	; 0x40
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_MspInit+0x54>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	2201      	movs	r2, #1
 8001444:	4013      	ands	r3, r2
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_MspInit+0x54>)
 800144c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_MspInit+0x54>)
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	0549      	lsls	r1, r1, #21
 8001454:	430a      	orrs	r2, r1
 8001456:	63da      	str	r2, [r3, #60]	; 0x3c
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_MspInit+0x54>)
 800145a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	055b      	lsls	r3, r3, #21
 8001460:	4013      	ands	r3, r2
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	2001      	movs	r0, #1
 800146c:	f000 fb04 	bl	8001a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001470:	2001      	movs	r0, #1
 8001472:	f000 fb16 	bl	8001aa2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	b002      	add	sp, #8
 800147c:	bd80      	pop	{r7, pc}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b08f      	sub	sp, #60	; 0x3c
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800148c:	2410      	movs	r4, #16
 800148e:	193b      	adds	r3, r7, r4
 8001490:	0018      	movs	r0, r3
 8001492:	2328      	movs	r3, #40	; 0x28
 8001494:	001a      	movs	r2, r3
 8001496:	2100      	movs	r1, #0
 8001498:	f003 f80a 	bl	80044b0 <memset>
  if(hrtc->Instance==RTC)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a19      	ldr	r2, [pc, #100]	; (8001508 <HAL_RTC_MspInit+0x84>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d12c      	bne.n	8001500 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014a6:	193b      	adds	r3, r7, r4
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	0292      	lsls	r2, r2, #10
 80014ac:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014ae:	193b      	adds	r3, r7, r4
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	0092      	lsls	r2, r2, #2
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b6:	193b      	adds	r3, r7, r4
 80014b8:	0018      	movs	r0, r3
 80014ba:	f001 fa1b 	bl	80028f4 <HAL_RCCEx_PeriphCLKConfig>
 80014be:	1e03      	subs	r3, r0, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80014c2:	f7ff fe9d 	bl	8001200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_RTC_MspInit+0x88>)
 80014c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_RTC_MspInit+0x88>)
 80014cc:	2180      	movs	r1, #128	; 0x80
 80014ce:	0209      	lsls	r1, r1, #8
 80014d0:	430a      	orrs	r2, r1
 80014d2:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80014d4:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HAL_RTC_MspInit+0x88>)
 80014d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <HAL_RTC_MspInit+0x88>)
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	00c9      	lsls	r1, r1, #3
 80014de:	430a      	orrs	r2, r1
 80014e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_RTC_MspInit+0x88>)
 80014e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4013      	ands	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2100      	movs	r1, #0
 80014f4:	2002      	movs	r0, #2
 80014f6:	f000 fabf 	bl	8001a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80014fa:	2002      	movs	r0, #2
 80014fc:	f000 fad1 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001500:	46c0      	nop			; (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	b00f      	add	sp, #60	; 0x3c
 8001506:	bd90      	pop	{r4, r7, pc}
 8001508:	40002800 	.word	0x40002800
 800150c:	40021000 	.word	0x40021000

08001510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_TIM_Base_MspInit+0x38>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d10d      	bne.n	800153e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_TIM_Base_MspInit+0x3c>)
 8001524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_TIM_Base_MspInit+0x3c>)
 8001528:	2180      	movs	r1, #128	; 0x80
 800152a:	0289      	lsls	r1, r1, #10
 800152c:	430a      	orrs	r2, r1
 800152e:	641a      	str	r2, [r3, #64]	; 0x40
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_TIM_Base_MspInit+0x3c>)
 8001532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	029b      	lsls	r3, r3, #10
 8001538:	4013      	ands	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b004      	add	sp, #16
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	40014400 	.word	0x40014400
 800154c:	40021000 	.word	0x40021000

08001550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b08b      	sub	sp, #44	; 0x2c
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	2414      	movs	r4, #20
 800155a:	193b      	adds	r3, r7, r4
 800155c:	0018      	movs	r0, r3
 800155e:	2314      	movs	r3, #20
 8001560:	001a      	movs	r2, r3
 8001562:	2100      	movs	r1, #0
 8001564:	f002 ffa4 	bl	80044b0 <memset>
  if(huart->Instance==USART2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <HAL_UART_MspInit+0x8c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d130      	bne.n	80015d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001572:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <HAL_UART_MspInit+0x90>)
 8001574:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <HAL_UART_MspInit+0x90>)
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	0289      	lsls	r1, r1, #10
 800157c:	430a      	orrs	r2, r1
 800157e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <HAL_UART_MspInit+0x90>)
 8001582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	029b      	lsls	r3, r3, #10
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <HAL_UART_MspInit+0x90>)
 8001590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <HAL_UART_MspInit+0x90>)
 8001594:	2101      	movs	r1, #1
 8001596:	430a      	orrs	r2, r1
 8001598:	635a      	str	r2, [r3, #52]	; 0x34
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_UART_MspInit+0x90>)
 800159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159e:	2201      	movs	r2, #1
 80015a0:	4013      	ands	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 80015a6:	0021      	movs	r1, r4
 80015a8:	187b      	adds	r3, r7, r1
 80015aa:	220c      	movs	r2, #12
 80015ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	187b      	adds	r3, r7, r1
 80015b0:	2202      	movs	r2, #2
 80015b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	2201      	movs	r2, #1
 80015b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	187b      	adds	r3, r7, r1
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	2201      	movs	r2, #1
 80015c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	187a      	adds	r2, r7, r1
 80015c8:	23a0      	movs	r3, #160	; 0xa0
 80015ca:	05db      	lsls	r3, r3, #23
 80015cc:	0011      	movs	r1, r2
 80015ce:	0018      	movs	r0, r3
 80015d0:	f000 fa84 	bl	8001adc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b00b      	add	sp, #44	; 0x2c
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	40004400 	.word	0x40004400
 80015e0:	40021000 	.word	0x40021000

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <NMI_Handler+0x4>

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001608:	f000 f96e 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001616:	f000 fc73 	bl	8001f00 <HAL_PWREx_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <RTC_TAMP_IRQHandler+0x14>)
 8001626:	0018      	movs	r0, r3
 8001628:	f001 ff6a 	bl	8003500 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800162c:	46c0      	nop			; (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	200000c8 	.word	0x200000c8

08001638 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Display_Button_Pin);
 800163c:	2001      	movs	r0, #1
 800163e:	f000 fbeb 	bl	8001e18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Set_Button_Pin);
 8001642:	2002      	movs	r0, #2
 8001644:	f000 fbe8 	bl	8001e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001648:	46c0      	nop			; (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_NRST_Pin);
 8001652:	2004      	movs	r0, #4
 8001654:	f000 fbe0 	bl	8001e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Hour_Set_Button_Pin);
 8001662:	2020      	movs	r0, #32
 8001664:	f000 fbd8 	bl	8001e18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Enable_Button_Pin);
 8001668:	2040      	movs	r0, #64	; 0x40
 800166a:	f000 fbd5 	bl	8001e18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Minute_Set_Button_Pin);
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	015b      	lsls	r3, r3, #5
 8001672:	0018      	movs	r0, r3
 8001674:	f000 fbd0 	bl	8001e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001678:	46c0      	nop			; (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	e00a      	b.n	80016a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001690:	e000      	b.n	8001694 <_read+0x16>
 8001692:	bf00      	nop
 8001694:	0001      	movs	r1, r0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	60ba      	str	r2, [r7, #8]
 800169c:	b2ca      	uxtb	r2, r1
 800169e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	3301      	adds	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	dbf0      	blt.n	8001690 <_read+0x12>
  }

  return len;
 80016ae:	687b      	ldr	r3, [r7, #4]
}
 80016b0:	0018      	movs	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b006      	add	sp, #24
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	e009      	b.n	80016de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	60ba      	str	r2, [r7, #8]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7fe ff00 	bl	80004d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	3301      	adds	r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	dbf1      	blt.n	80016ca <_write+0x12>
  }
  return len;
 80016e6:	687b      	ldr	r3, [r7, #4]
}
 80016e8:	0018      	movs	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b006      	add	sp, #24
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_close>:

int _close(int file)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	425b      	negs	r3, r3
}
 80016fc:	0018      	movs	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	b002      	add	sp, #8
 8001702:	bd80      	pop	{r7, pc}

08001704 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	2280      	movs	r2, #128	; 0x80
 8001712:	0192      	lsls	r2, r2, #6
 8001714:	605a      	str	r2, [r3, #4]
  return 0;
 8001716:	2300      	movs	r3, #0
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bd80      	pop	{r7, pc}

08001720 <_isatty>:

int _isatty(int file)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001728:	2301      	movs	r3, #1
}
 800172a:	0018      	movs	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	b002      	add	sp, #8
 8001730:	bd80      	pop	{r7, pc}

08001732 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b084      	sub	sp, #16
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800173e:	2300      	movs	r3, #0
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b004      	add	sp, #16
 8001746:	bd80      	pop	{r7, pc}

08001748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001750:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <_sbrk+0x5c>)
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <_sbrk+0x60>)
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <_sbrk+0x64>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <_sbrk+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	18d3      	adds	r3, r2, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	429a      	cmp	r2, r3
 8001776:	d207      	bcs.n	8001788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001778:	f002 fe70 	bl	800445c <__errno>
 800177c:	0003      	movs	r3, r0
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001782:	2301      	movs	r3, #1
 8001784:	425b      	negs	r3, r3
 8001786:	e009      	b.n	800179c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	18d2      	adds	r2, r2, r3
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <_sbrk+0x64>)
 8001798:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	b006      	add	sp, #24
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20002000 	.word	0x20002000
 80017a8:	00000400 	.word	0x00000400
 80017ac:	20000234 	.word	0x20000234
 80017b0:	20000250 	.word	0x20000250

080017b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017c4:	f7ff fff6 	bl	80017b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <LoopForever+0x6>)
  ldr r1, =_edata
 80017ca:	490d      	ldr	r1, [pc, #52]	; (8001800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <LoopForever+0xe>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017e0:	4c0a      	ldr	r4, [pc, #40]	; (800180c <LoopForever+0x16>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017ee:	f002 fe3b 	bl	8004468 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80017f2:	f7fe fe83 	bl	80004fc <main>

080017f6 <LoopForever>:

LoopForever:
  b LoopForever
 80017f6:	e7fe      	b.n	80017f6 <LoopForever>
  ldr   r0, =_estack
 80017f8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001804:	08005968 	.word	0x08005968
  ldr r2, =_sbss
 8001808:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800180c:	2000024c 	.word	0x2000024c

08001810 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC1_IRQHandler>
	...

08001814 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800181a:	1dfb      	adds	r3, r7, #7
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_Init+0x3c>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_Init+0x3c>)
 8001826:	2180      	movs	r1, #128	; 0x80
 8001828:	0049      	lsls	r1, r1, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800182e:	2000      	movs	r0, #0
 8001830:	f000 f810 	bl	8001854 <HAL_InitTick>
 8001834:	1e03      	subs	r3, r0, #0
 8001836:	d003      	beq.n	8001840 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001838:	1dfb      	adds	r3, r7, #7
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	e001      	b.n	8001844 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001840:	f7ff fdf4 	bl	800142c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001844:	1dfb      	adds	r3, r7, #7
 8001846:	781b      	ldrb	r3, [r3, #0]
}
 8001848:	0018      	movs	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	b002      	add	sp, #8
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40022000 	.word	0x40022000

08001854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800185c:	230f      	movs	r3, #15
 800185e:	18fb      	adds	r3, r7, r3
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <HAL_InitTick+0x88>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d02b      	beq.n	80018c4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800186c:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <HAL_InitTick+0x8c>)
 800186e:	681c      	ldr	r4, [r3, #0]
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <HAL_InitTick+0x88>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	0019      	movs	r1, r3
 8001876:	23fa      	movs	r3, #250	; 0xfa
 8001878:	0098      	lsls	r0, r3, #2
 800187a:	f7fe fc4d 	bl	8000118 <__udivsi3>
 800187e:	0003      	movs	r3, r0
 8001880:	0019      	movs	r1, r3
 8001882:	0020      	movs	r0, r4
 8001884:	f7fe fc48 	bl	8000118 <__udivsi3>
 8001888:	0003      	movs	r3, r0
 800188a:	0018      	movs	r0, r3
 800188c:	f000 f919 	bl	8001ac2 <HAL_SYSTICK_Config>
 8001890:	1e03      	subs	r3, r0, #0
 8001892:	d112      	bne.n	80018ba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d80a      	bhi.n	80018b0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	2301      	movs	r3, #1
 800189e:	425b      	negs	r3, r3
 80018a0:	2200      	movs	r2, #0
 80018a2:	0018      	movs	r0, r3
 80018a4:	f000 f8e8 	bl	8001a78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018a8:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <HAL_InitTick+0x90>)
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	e00d      	b.n	80018cc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80018b0:	230f      	movs	r3, #15
 80018b2:	18fb      	adds	r3, r7, r3
 80018b4:	2201      	movs	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]
 80018b8:	e008      	b.n	80018cc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018ba:	230f      	movs	r3, #15
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
 80018c2:	e003      	b.n	80018cc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018c4:	230f      	movs	r3, #15
 80018c6:	18fb      	adds	r3, r7, r3
 80018c8:	2201      	movs	r2, #1
 80018ca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80018cc:	230f      	movs	r3, #15
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	781b      	ldrb	r3, [r3, #0]
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b005      	add	sp, #20
 80018d8:	bd90      	pop	{r4, r7, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	20000040 	.word	0x20000040
 80018e0:	20000038 	.word	0x20000038
 80018e4:	2000003c 	.word	0x2000003c

080018e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_IncTick+0x1c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	001a      	movs	r2, r3
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_IncTick+0x20>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	18d2      	adds	r2, r2, r3
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <HAL_IncTick+0x20>)
 80018fa:	601a      	str	r2, [r3, #0]
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	20000040 	.word	0x20000040
 8001908:	20000238 	.word	0x20000238

0800190c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b02      	ldr	r3, [pc, #8]	; (800191c <HAL_GetTick+0x10>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	0018      	movs	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	20000238 	.word	0x20000238

08001920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	0002      	movs	r2, r0
 8001928:	1dfb      	adds	r3, r7, #7
 800192a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800192c:	1dfb      	adds	r3, r7, #7
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b7f      	cmp	r3, #127	; 0x7f
 8001932:	d809      	bhi.n	8001948 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001934:	1dfb      	adds	r3, r7, #7
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	001a      	movs	r2, r3
 800193a:	231f      	movs	r3, #31
 800193c:	401a      	ands	r2, r3
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <__NVIC_EnableIRQ+0x30>)
 8001940:	2101      	movs	r1, #1
 8001942:	4091      	lsls	r1, r2
 8001944:	000a      	movs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	b002      	add	sp, #8
 800194e:	bd80      	pop	{r7, pc}
 8001950:	e000e100 	.word	0xe000e100

08001954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	0002      	movs	r2, r0
 800195c:	6039      	str	r1, [r7, #0]
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b7f      	cmp	r3, #127	; 0x7f
 8001968:	d828      	bhi.n	80019bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800196a:	4a2f      	ldr	r2, [pc, #188]	; (8001a28 <__NVIC_SetPriority+0xd4>)
 800196c:	1dfb      	adds	r3, r7, #7
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b25b      	sxtb	r3, r3
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	33c0      	adds	r3, #192	; 0xc0
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	589b      	ldr	r3, [r3, r2]
 800197a:	1dfa      	adds	r2, r7, #7
 800197c:	7812      	ldrb	r2, [r2, #0]
 800197e:	0011      	movs	r1, r2
 8001980:	2203      	movs	r2, #3
 8001982:	400a      	ands	r2, r1
 8001984:	00d2      	lsls	r2, r2, #3
 8001986:	21ff      	movs	r1, #255	; 0xff
 8001988:	4091      	lsls	r1, r2
 800198a:	000a      	movs	r2, r1
 800198c:	43d2      	mvns	r2, r2
 800198e:	401a      	ands	r2, r3
 8001990:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	019b      	lsls	r3, r3, #6
 8001996:	22ff      	movs	r2, #255	; 0xff
 8001998:	401a      	ands	r2, r3
 800199a:	1dfb      	adds	r3, r7, #7
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	0018      	movs	r0, r3
 80019a0:	2303      	movs	r3, #3
 80019a2:	4003      	ands	r3, r0
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019a8:	481f      	ldr	r0, [pc, #124]	; (8001a28 <__NVIC_SetPriority+0xd4>)
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	430a      	orrs	r2, r1
 80019b4:	33c0      	adds	r3, #192	; 0xc0
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019ba:	e031      	b.n	8001a20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019bc:	4a1b      	ldr	r2, [pc, #108]	; (8001a2c <__NVIC_SetPriority+0xd8>)
 80019be:	1dfb      	adds	r3, r7, #7
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	0019      	movs	r1, r3
 80019c4:	230f      	movs	r3, #15
 80019c6:	400b      	ands	r3, r1
 80019c8:	3b08      	subs	r3, #8
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	3306      	adds	r3, #6
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	18d3      	adds	r3, r2, r3
 80019d2:	3304      	adds	r3, #4
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	1dfa      	adds	r2, r7, #7
 80019d8:	7812      	ldrb	r2, [r2, #0]
 80019da:	0011      	movs	r1, r2
 80019dc:	2203      	movs	r2, #3
 80019de:	400a      	ands	r2, r1
 80019e0:	00d2      	lsls	r2, r2, #3
 80019e2:	21ff      	movs	r1, #255	; 0xff
 80019e4:	4091      	lsls	r1, r2
 80019e6:	000a      	movs	r2, r1
 80019e8:	43d2      	mvns	r2, r2
 80019ea:	401a      	ands	r2, r3
 80019ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	019b      	lsls	r3, r3, #6
 80019f2:	22ff      	movs	r2, #255	; 0xff
 80019f4:	401a      	ands	r2, r3
 80019f6:	1dfb      	adds	r3, r7, #7
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	0018      	movs	r0, r3
 80019fc:	2303      	movs	r3, #3
 80019fe:	4003      	ands	r3, r0
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a04:	4809      	ldr	r0, [pc, #36]	; (8001a2c <__NVIC_SetPriority+0xd8>)
 8001a06:	1dfb      	adds	r3, r7, #7
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	001c      	movs	r4, r3
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	4023      	ands	r3, r4
 8001a10:	3b08      	subs	r3, #8
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	430a      	orrs	r2, r1
 8001a16:	3306      	adds	r3, #6
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	18c3      	adds	r3, r0, r3
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	601a      	str	r2, [r3, #0]
}
 8001a20:	46c0      	nop			; (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b003      	add	sp, #12
 8001a26:	bd90      	pop	{r4, r7, pc}
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	1e5a      	subs	r2, r3, #1
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	045b      	lsls	r3, r3, #17
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d301      	bcc.n	8001a48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a44:	2301      	movs	r3, #1
 8001a46:	e010      	b.n	8001a6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <SysTick_Config+0x44>)
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	3a01      	subs	r2, #1
 8001a4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a50:	2301      	movs	r3, #1
 8001a52:	425b      	negs	r3, r3
 8001a54:	2103      	movs	r1, #3
 8001a56:	0018      	movs	r0, r3
 8001a58:	f7ff ff7c 	bl	8001954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <SysTick_Config+0x44>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <SysTick_Config+0x44>)
 8001a64:	2207      	movs	r2, #7
 8001a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b002      	add	sp, #8
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	e000e010 	.word	0xe000e010

08001a78 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	210f      	movs	r1, #15
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	1c02      	adds	r2, r0, #0
 8001a88:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	0011      	movs	r1, r2
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7ff ff5d 	bl	8001954 <__NVIC_SetPriority>
}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b004      	add	sp, #16
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	1dfb      	adds	r3, r7, #7
 8001aac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aae:	1dfb      	adds	r3, r7, #7
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b25b      	sxtb	r3, r3
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff ff33 	bl	8001920 <__NVIC_EnableIRQ>
}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b002      	add	sp, #8
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f7ff ffaf 	bl	8001a30 <SysTick_Config>
 8001ad2:	0003      	movs	r3, r0
}
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b002      	add	sp, #8
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aea:	e147      	b.n	8001d7c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2101      	movs	r1, #1
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4091      	lsls	r1, r2
 8001af6:	000a      	movs	r2, r1
 8001af8:	4013      	ands	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d100      	bne.n	8001b04 <HAL_GPIO_Init+0x28>
 8001b02:	e138      	b.n	8001d76 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2203      	movs	r2, #3
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d005      	beq.n	8001b1c <HAL_GPIO_Init+0x40>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2203      	movs	r2, #3
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d130      	bne.n	8001b7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	0013      	movs	r3, r2
 8001b2c:	43da      	mvns	r2, r3
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	0013      	movs	r3, r2
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b52:	2201      	movs	r2, #1
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	409a      	lsls	r2, r3
 8001b58:	0013      	movs	r3, r2
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	2201      	movs	r2, #1
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	0013      	movs	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2203      	movs	r2, #3
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d017      	beq.n	8001bba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2203      	movs	r2, #3
 8001b96:	409a      	lsls	r2, r3
 8001b98:	0013      	movs	r3, r2
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	409a      	lsls	r2, r3
 8001bac:	0013      	movs	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d123      	bne.n	8001c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	0092      	lsls	r2, r2, #2
 8001bd0:	58d3      	ldr	r3, [r2, r3]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	4013      	ands	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	409a      	lsls	r2, r3
 8001be0:	0013      	movs	r3, r2
 8001be2:	43da      	mvns	r2, r3
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2107      	movs	r1, #7
 8001bf2:	400b      	ands	r3, r1
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	08da      	lsrs	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3208      	adds	r2, #8
 8001c08:	0092      	lsls	r2, r2, #2
 8001c0a:	6939      	ldr	r1, [r7, #16]
 8001c0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	0013      	movs	r3, r2
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	401a      	ands	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	409a      	lsls	r2, r3
 8001c34:	0013      	movs	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	23c0      	movs	r3, #192	; 0xc0
 8001c48:	029b      	lsls	r3, r3, #10
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d100      	bne.n	8001c50 <HAL_GPIO_Init+0x174>
 8001c4e:	e092      	b.n	8001d76 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001c50:	4a50      	ldr	r2, [pc, #320]	; (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	3318      	adds	r3, #24
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	589b      	ldr	r3, [r3, r2]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2203      	movs	r2, #3
 8001c62:	4013      	ands	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	220f      	movs	r2, #15
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	0013      	movs	r3, r2
 8001c6c:	43da      	mvns	r2, r3
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	23a0      	movs	r3, #160	; 0xa0
 8001c78:	05db      	lsls	r3, r3, #23
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d013      	beq.n	8001ca6 <HAL_GPIO_Init+0x1ca>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a45      	ldr	r2, [pc, #276]	; (8001d98 <HAL_GPIO_Init+0x2bc>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00d      	beq.n	8001ca2 <HAL_GPIO_Init+0x1c6>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a44      	ldr	r2, [pc, #272]	; (8001d9c <HAL_GPIO_Init+0x2c0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d007      	beq.n	8001c9e <HAL_GPIO_Init+0x1c2>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a43      	ldr	r2, [pc, #268]	; (8001da0 <HAL_GPIO_Init+0x2c4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d101      	bne.n	8001c9a <HAL_GPIO_Init+0x1be>
 8001c96:	2303      	movs	r3, #3
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x1cc>
 8001c9a:	2305      	movs	r3, #5
 8001c9c:	e004      	b.n	8001ca8 <HAL_GPIO_Init+0x1cc>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e002      	b.n	8001ca8 <HAL_GPIO_Init+0x1cc>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x1cc>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	2103      	movs	r1, #3
 8001cac:	400a      	ands	r2, r1
 8001cae:	00d2      	lsls	r2, r2, #3
 8001cb0:	4093      	lsls	r3, r2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001cb8:	4936      	ldr	r1, [pc, #216]	; (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3318      	adds	r3, #24
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cc6:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	035b      	lsls	r3, r3, #13
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cea:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001cf0:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	43da      	mvns	r2, r3
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	039b      	lsls	r3, r3, #14
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d14:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d1a:	4a1e      	ldr	r2, [pc, #120]	; (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001d1c:	2384      	movs	r3, #132	; 0x84
 8001d1e:	58d3      	ldr	r3, [r2, r3]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	43da      	mvns	r2, r3
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	029b      	lsls	r3, r3, #10
 8001d34:	4013      	ands	r3, r2
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d40:	4914      	ldr	r1, [pc, #80]	; (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001d42:	2284      	movs	r2, #132	; 0x84
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001d48:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	58d3      	ldr	r3, [r2, r3]
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43da      	mvns	r2, r3
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	025b      	lsls	r3, r3, #9
 8001d62:	4013      	ands	r3, r2
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d6e:	4909      	ldr	r1, [pc, #36]	; (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001d70:	2280      	movs	r2, #128	; 0x80
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	40da      	lsrs	r2, r3
 8001d84:	1e13      	subs	r3, r2, #0
 8001d86:	d000      	beq.n	8001d8a <HAL_GPIO_Init+0x2ae>
 8001d88:	e6b0      	b.n	8001aec <HAL_GPIO_Init+0x10>
  }
}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	46c0      	nop			; (mov r8, r8)
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b006      	add	sp, #24
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021800 	.word	0x40021800
 8001d98:	50000400 	.word	0x50000400
 8001d9c:	50000800 	.word	0x50000800
 8001da0:	50000c00 	.word	0x50000c00

08001da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	000a      	movs	r2, r1
 8001dae:	1cbb      	adds	r3, r7, #2
 8001db0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	1cba      	adds	r2, r7, #2
 8001db8:	8812      	ldrh	r2, [r2, #0]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d004      	beq.n	8001dc8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001dbe:	230f      	movs	r3, #15
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	e003      	b.n	8001dd0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc8:	230f      	movs	r3, #15
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001dd0:	230f      	movs	r3, #15
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	781b      	ldrb	r3, [r3, #0]
}
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b004      	add	sp, #16
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	0008      	movs	r0, r1
 8001de8:	0011      	movs	r1, r2
 8001dea:	1cbb      	adds	r3, r7, #2
 8001dec:	1c02      	adds	r2, r0, #0
 8001dee:	801a      	strh	r2, [r3, #0]
 8001df0:	1c7b      	adds	r3, r7, #1
 8001df2:	1c0a      	adds	r2, r1, #0
 8001df4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001df6:	1c7b      	adds	r3, r7, #1
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d004      	beq.n	8001e08 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dfe:	1cbb      	adds	r3, r7, #2
 8001e00:	881a      	ldrh	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e06:	e003      	b.n	8001e10 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e08:	1cbb      	adds	r3, r7, #2
 8001e0a:	881a      	ldrh	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e10:	46c0      	nop			; (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b002      	add	sp, #8
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	0002      	movs	r2, r0
 8001e20:	1dbb      	adds	r3, r7, #6
 8001e22:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001e24:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	1dba      	adds	r2, r7, #6
 8001e2a:	8812      	ldrh	r2, [r2, #0]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d008      	beq.n	8001e42 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001e32:	1dba      	adds	r2, r7, #6
 8001e34:	8812      	ldrh	r2, [r2, #0]
 8001e36:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001e38:	1dbb      	adds	r3, r7, #6
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f000 f815 	bl	8001e6c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	1dba      	adds	r2, r7, #6
 8001e48:	8812      	ldrh	r2, [r2, #0]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d008      	beq.n	8001e60 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001e50:	1dba      	adds	r2, r7, #6
 8001e52:	8812      	ldrh	r2, [r2, #0]
 8001e54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001e56:	1dbb      	adds	r3, r7, #6
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f7fe febc 	bl	8000bd8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001e60:	46c0      	nop			; (mov r8, r8)
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b002      	add	sp, #8
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021800 	.word	0x40021800

08001e6c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	0002      	movs	r2, r0
 8001e74:	1dbb      	adds	r3, r7, #6
 8001e76:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001e78:	46c0      	nop			; (mov r8, r8)
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b002      	add	sp, #8
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d11f      	bne.n	8001ee4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	189b      	adds	r3, r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4912      	ldr	r1, [pc, #72]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f7fe f930 	bl	8000118 <__udivsi3>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	3301      	adds	r3, #1
 8001ebc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ebe:	e008      	b.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	e001      	b.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e009      	b.n	8001ee6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	401a      	ands	r2, r3
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d0ed      	beq.n	8001ec0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b004      	add	sp, #16
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	40007000 	.word	0x40007000
 8001ef4:	fffff9ff 	.word	0xfffff9ff
 8001ef8:	20000038 	.word	0x20000038
 8001efc:	000f4240 	.word	0x000f4240

08001f00 <HAL_PWREx_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Check PWR exti Rising flag */
  if (__HAL_PWR_PVD_EXTI_GET_RISING_FLAG() != 0x0U)
 8001f04:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	025b      	lsls	r3, r3, #9
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d005      	beq.n	8001f1c <HAL_PWREx_PVD_IRQHandler+0x1c>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_RISING_FLAG();
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8001f12:	2280      	movs	r2, #128	; 0x80
 8001f14:	0252      	lsls	r2, r2, #9
 8001f16:	60da      	str	r2, [r3, #12]

    /* PWR PVD interrupt rising user callback */
    HAL_PWREx_PVD_Rising_Callback();
 8001f18:	f000 f812 	bl	8001f40 <HAL_PWREx_PVD_Rising_Callback>
  }

  /* Check PWR exti fallling flag */
  if (__HAL_PWR_PVD_EXTI_GET_FALLING_FLAG() != 0x0U)
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	025b      	lsls	r3, r3, #9
 8001f24:	4013      	ands	r3, r2
 8001f26:	d005      	beq.n	8001f34 <HAL_PWREx_PVD_IRQHandler+0x34>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FALLING_FLAG();
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8001f2a:	2280      	movs	r2, #128	; 0x80
 8001f2c:	0252      	lsls	r2, r2, #9
 8001f2e:	611a      	str	r2, [r3, #16]

    /* PWR PVD interrupt falling user callback */
    HAL_PWREx_PVD_Falling_Callback();
 8001f30:	f000 f80b 	bl	8001f4a <HAL_PWREx_PVD_Falling_Callback>
  }
}
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	40021800 	.word	0x40021800

08001f40 <HAL_PWREx_PVD_Rising_Callback>:
/**
  * @brief  PWR PVD interrupt rising callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Rising_Callback(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Rising_Callback can be implemented in the user file
  */
}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_PWREx_PVD_Falling_Callback>:
/**
  * @brief  PWR PVD interrupt Falling callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Falling_Callback(void)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Falling_Callback can be implemented in the user file
  */
}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001f58:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	23e0      	movs	r3, #224	; 0xe0
 8001f5e:	01db      	lsls	r3, r3, #7
 8001f60:	4013      	ands	r3, r2
}
 8001f62:	0018      	movs	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000

08001f6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e2fe      	b.n	800257c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2201      	movs	r2, #1
 8001f84:	4013      	ands	r3, r2
 8001f86:	d100      	bne.n	8001f8a <HAL_RCC_OscConfig+0x1e>
 8001f88:	e07c      	b.n	8002084 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f8a:	4bc3      	ldr	r3, [pc, #780]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2238      	movs	r2, #56	; 0x38
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f94:	4bc0      	ldr	r3, [pc, #768]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2203      	movs	r2, #3
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b10      	cmp	r3, #16
 8001fa2:	d102      	bne.n	8001faa <HAL_RCC_OscConfig+0x3e>
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d002      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d10b      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	4bb9      	ldr	r3, [pc, #740]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	029b      	lsls	r3, r3, #10
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d062      	beq.n	8002082 <HAL_RCC_OscConfig+0x116>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d15e      	bne.n	8002082 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e2d9      	b.n	800257c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	025b      	lsls	r3, r3, #9
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x78>
 8001fd4:	4bb0      	ldr	r3, [pc, #704]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4baf      	ldr	r3, [pc, #700]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	0249      	lsls	r1, r1, #9
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e020      	b.n	8002026 <HAL_RCC_OscConfig+0xba>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	23a0      	movs	r3, #160	; 0xa0
 8001fea:	02db      	lsls	r3, r3, #11
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d10e      	bne.n	800200e <HAL_RCC_OscConfig+0xa2>
 8001ff0:	4ba9      	ldr	r3, [pc, #676]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4ba8      	ldr	r3, [pc, #672]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	02c9      	lsls	r1, r1, #11
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	4ba6      	ldr	r3, [pc, #664]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4ba5      	ldr	r3, [pc, #660]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8002004:	2180      	movs	r1, #128	; 0x80
 8002006:	0249      	lsls	r1, r1, #9
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	e00b      	b.n	8002026 <HAL_RCC_OscConfig+0xba>
 800200e:	4ba2      	ldr	r3, [pc, #648]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4ba1      	ldr	r3, [pc, #644]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8002014:	49a1      	ldr	r1, [pc, #644]	; (800229c <HAL_RCC_OscConfig+0x330>)
 8002016:	400a      	ands	r2, r1
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	4b9f      	ldr	r3, [pc, #636]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4b9e      	ldr	r3, [pc, #632]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8002020:	499f      	ldr	r1, [pc, #636]	; (80022a0 <HAL_RCC_OscConfig+0x334>)
 8002022:	400a      	ands	r2, r1
 8002024:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d014      	beq.n	8002058 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202e:	f7ff fc6d 	bl	800190c <HAL_GetTick>
 8002032:	0003      	movs	r3, r0
 8002034:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002038:	f7ff fc68 	bl	800190c <HAL_GetTick>
 800203c:	0002      	movs	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e298      	b.n	800257c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800204a:	4b93      	ldr	r3, [pc, #588]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	029b      	lsls	r3, r3, #10
 8002052:	4013      	ands	r3, r2
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0xcc>
 8002056:	e015      	b.n	8002084 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7ff fc58 	bl	800190c <HAL_GetTick>
 800205c:	0003      	movs	r3, r0
 800205e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002062:	f7ff fc53 	bl	800190c <HAL_GetTick>
 8002066:	0002      	movs	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b64      	cmp	r3, #100	; 0x64
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e283      	b.n	800257c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002074:	4b88      	ldr	r3, [pc, #544]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	029b      	lsls	r3, r3, #10
 800207c:	4013      	ands	r3, r2
 800207e:	d1f0      	bne.n	8002062 <HAL_RCC_OscConfig+0xf6>
 8002080:	e000      	b.n	8002084 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002082:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2202      	movs	r2, #2
 800208a:	4013      	ands	r3, r2
 800208c:	d100      	bne.n	8002090 <HAL_RCC_OscConfig+0x124>
 800208e:	e099      	b.n	80021c4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002090:	4b81      	ldr	r3, [pc, #516]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2238      	movs	r2, #56	; 0x38
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800209a:	4b7f      	ldr	r3, [pc, #508]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2203      	movs	r2, #3
 80020a0:	4013      	ands	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2b10      	cmp	r3, #16
 80020a8:	d102      	bne.n	80020b0 <HAL_RCC_OscConfig+0x144>
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d002      	beq.n	80020b6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d135      	bne.n	8002122 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020b6:	4b78      	ldr	r3, [pc, #480]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4013      	ands	r3, r2
 80020c0:	d005      	beq.n	80020ce <HAL_RCC_OscConfig+0x162>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e256      	b.n	800257c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ce:	4b72      	ldr	r3, [pc, #456]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4a74      	ldr	r2, [pc, #464]	; (80022a4 <HAL_RCC_OscConfig+0x338>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	021a      	lsls	r2, r3, #8
 80020de:	4b6e      	ldr	r3, [pc, #440]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 80020e0:	430a      	orrs	r2, r1
 80020e2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d112      	bne.n	8002110 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020ea:	4b6b      	ldr	r3, [pc, #428]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a6e      	ldr	r2, [pc, #440]	; (80022a8 <HAL_RCC_OscConfig+0x33c>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	0019      	movs	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	4b67      	ldr	r3, [pc, #412]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 80020fa:	430a      	orrs	r2, r1
 80020fc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80020fe:	4b66      	ldr	r3, [pc, #408]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	0adb      	lsrs	r3, r3, #11
 8002104:	2207      	movs	r2, #7
 8002106:	4013      	ands	r3, r2
 8002108:	4a68      	ldr	r2, [pc, #416]	; (80022ac <HAL_RCC_OscConfig+0x340>)
 800210a:	40da      	lsrs	r2, r3
 800210c:	4b68      	ldr	r3, [pc, #416]	; (80022b0 <HAL_RCC_OscConfig+0x344>)
 800210e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002110:	4b68      	ldr	r3, [pc, #416]	; (80022b4 <HAL_RCC_OscConfig+0x348>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	0018      	movs	r0, r3
 8002116:	f7ff fb9d 	bl	8001854 <HAL_InitTick>
 800211a:	1e03      	subs	r3, r0, #0
 800211c:	d051      	beq.n	80021c2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e22c      	b.n	800257c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d030      	beq.n	800218c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800212a:	4b5b      	ldr	r3, [pc, #364]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_RCC_OscConfig+0x33c>)
 8002130:	4013      	ands	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	4b57      	ldr	r3, [pc, #348]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800213e:	4b56      	ldr	r3, [pc, #344]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	4b55      	ldr	r3, [pc, #340]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8002144:	2180      	movs	r1, #128	; 0x80
 8002146:	0049      	lsls	r1, r1, #1
 8002148:	430a      	orrs	r2, r1
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7ff fbde 	bl	800190c <HAL_GetTick>
 8002150:	0003      	movs	r3, r0
 8002152:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002156:	f7ff fbd9 	bl	800190c <HAL_GetTick>
 800215a:	0002      	movs	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e209      	b.n	800257c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002168:	4b4b      	ldr	r3, [pc, #300]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4013      	ands	r3, r2
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002174:	4b48      	ldr	r3, [pc, #288]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4a4a      	ldr	r2, [pc, #296]	; (80022a4 <HAL_RCC_OscConfig+0x338>)
 800217a:	4013      	ands	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	021a      	lsls	r2, r3, #8
 8002184:	4b44      	ldr	r3, [pc, #272]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8002186:	430a      	orrs	r2, r1
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	e01b      	b.n	80021c4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800218c:	4b42      	ldr	r3, [pc, #264]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b41      	ldr	r3, [pc, #260]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8002192:	4949      	ldr	r1, [pc, #292]	; (80022b8 <HAL_RCC_OscConfig+0x34c>)
 8002194:	400a      	ands	r2, r1
 8002196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7ff fbb8 	bl	800190c <HAL_GetTick>
 800219c:	0003      	movs	r3, r0
 800219e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a2:	f7ff fbb3 	bl	800190c <HAL_GetTick>
 80021a6:	0002      	movs	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e1e3      	b.n	800257c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021b4:	4b38      	ldr	r3, [pc, #224]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4013      	ands	r3, r2
 80021be:	d1f0      	bne.n	80021a2 <HAL_RCC_OscConfig+0x236>
 80021c0:	e000      	b.n	80021c4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2208      	movs	r2, #8
 80021ca:	4013      	ands	r3, r2
 80021cc:	d047      	beq.n	800225e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80021ce:	4b32      	ldr	r3, [pc, #200]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2238      	movs	r2, #56	; 0x38
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b18      	cmp	r3, #24
 80021d8:	d10a      	bne.n	80021f0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80021da:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 80021dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021de:	2202      	movs	r2, #2
 80021e0:	4013      	ands	r3, r2
 80021e2:	d03c      	beq.n	800225e <HAL_RCC_OscConfig+0x2f2>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d138      	bne.n	800225e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e1c5      	b.n	800257c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d019      	beq.n	800222c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 80021fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021fc:	4b26      	ldr	r3, [pc, #152]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 80021fe:	2101      	movs	r1, #1
 8002200:	430a      	orrs	r2, r1
 8002202:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7ff fb82 	bl	800190c <HAL_GetTick>
 8002208:	0003      	movs	r3, r0
 800220a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220e:	f7ff fb7d 	bl	800190c <HAL_GetTick>
 8002212:	0002      	movs	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e1ad      	b.n	800257c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002220:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8002222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002224:	2202      	movs	r2, #2
 8002226:	4013      	ands	r3, r2
 8002228:	d0f1      	beq.n	800220e <HAL_RCC_OscConfig+0x2a2>
 800222a:	e018      	b.n	800225e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800222c:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 800222e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002230:	4b19      	ldr	r3, [pc, #100]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8002232:	2101      	movs	r1, #1
 8002234:	438a      	bics	r2, r1
 8002236:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7ff fb68 	bl	800190c <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002242:	f7ff fb63 	bl	800190c <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e193      	b.n	800257c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8002256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002258:	2202      	movs	r2, #2
 800225a:	4013      	ands	r3, r2
 800225c:	d1f1      	bne.n	8002242 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2204      	movs	r2, #4
 8002264:	4013      	ands	r3, r2
 8002266:	d100      	bne.n	800226a <HAL_RCC_OscConfig+0x2fe>
 8002268:	e0c6      	b.n	80023f8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226a:	231f      	movs	r3, #31
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2238      	movs	r2, #56	; 0x38
 8002278:	4013      	ands	r3, r2
 800227a:	2b20      	cmp	r3, #32
 800227c:	d11e      	bne.n	80022bc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_RCC_OscConfig+0x32c>)
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	2202      	movs	r2, #2
 8002284:	4013      	ands	r3, r2
 8002286:	d100      	bne.n	800228a <HAL_RCC_OscConfig+0x31e>
 8002288:	e0b6      	b.n	80023f8 <HAL_RCC_OscConfig+0x48c>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d000      	beq.n	8002294 <HAL_RCC_OscConfig+0x328>
 8002292:	e0b1      	b.n	80023f8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e171      	b.n	800257c <HAL_RCC_OscConfig+0x610>
 8002298:	40021000 	.word	0x40021000
 800229c:	fffeffff 	.word	0xfffeffff
 80022a0:	fffbffff 	.word	0xfffbffff
 80022a4:	ffff80ff 	.word	0xffff80ff
 80022a8:	ffffc7ff 	.word	0xffffc7ff
 80022ac:	00f42400 	.word	0x00f42400
 80022b0:	20000038 	.word	0x20000038
 80022b4:	2000003c 	.word	0x2000003c
 80022b8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022bc:	4bb1      	ldr	r3, [pc, #708]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 80022be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	055b      	lsls	r3, r3, #21
 80022c4:	4013      	ands	r3, r2
 80022c6:	d101      	bne.n	80022cc <HAL_RCC_OscConfig+0x360>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <HAL_RCC_OscConfig+0x362>
 80022cc:	2300      	movs	r3, #0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d011      	beq.n	80022f6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80022d2:	4bac      	ldr	r3, [pc, #688]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 80022d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022d6:	4bab      	ldr	r3, [pc, #684]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	0549      	lsls	r1, r1, #21
 80022dc:	430a      	orrs	r2, r1
 80022de:	63da      	str	r2, [r3, #60]	; 0x3c
 80022e0:	4ba8      	ldr	r3, [pc, #672]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 80022e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	055b      	lsls	r3, r3, #21
 80022e8:	4013      	ands	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80022ee:	231f      	movs	r3, #31
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f6:	4ba4      	ldr	r3, [pc, #656]	; (8002588 <HAL_RCC_OscConfig+0x61c>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4013      	ands	r3, r2
 8002300:	d11a      	bne.n	8002338 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002302:	4ba1      	ldr	r3, [pc, #644]	; (8002588 <HAL_RCC_OscConfig+0x61c>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4ba0      	ldr	r3, [pc, #640]	; (8002588 <HAL_RCC_OscConfig+0x61c>)
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	0049      	lsls	r1, r1, #1
 800230c:	430a      	orrs	r2, r1
 800230e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002310:	f7ff fafc 	bl	800190c <HAL_GetTick>
 8002314:	0003      	movs	r3, r0
 8002316:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231a:	f7ff faf7 	bl	800190c <HAL_GetTick>
 800231e:	0002      	movs	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e127      	b.n	800257c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800232c:	4b96      	ldr	r3, [pc, #600]	; (8002588 <HAL_RCC_OscConfig+0x61c>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4013      	ands	r3, r2
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x3e2>
 8002340:	4b90      	ldr	r3, [pc, #576]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 8002342:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002344:	4b8f      	ldr	r3, [pc, #572]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 8002346:	2101      	movs	r1, #1
 8002348:	430a      	orrs	r2, r1
 800234a:	65da      	str	r2, [r3, #92]	; 0x5c
 800234c:	e01c      	b.n	8002388 <HAL_RCC_OscConfig+0x41c>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b05      	cmp	r3, #5
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x404>
 8002356:	4b8b      	ldr	r3, [pc, #556]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 8002358:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800235a:	4b8a      	ldr	r3, [pc, #552]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 800235c:	2104      	movs	r1, #4
 800235e:	430a      	orrs	r2, r1
 8002360:	65da      	str	r2, [r3, #92]	; 0x5c
 8002362:	4b88      	ldr	r3, [pc, #544]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 8002364:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002366:	4b87      	ldr	r3, [pc, #540]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 8002368:	2101      	movs	r1, #1
 800236a:	430a      	orrs	r2, r1
 800236c:	65da      	str	r2, [r3, #92]	; 0x5c
 800236e:	e00b      	b.n	8002388 <HAL_RCC_OscConfig+0x41c>
 8002370:	4b84      	ldr	r3, [pc, #528]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 8002372:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002374:	4b83      	ldr	r3, [pc, #524]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 8002376:	2101      	movs	r1, #1
 8002378:	438a      	bics	r2, r1
 800237a:	65da      	str	r2, [r3, #92]	; 0x5c
 800237c:	4b81      	ldr	r3, [pc, #516]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 800237e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002380:	4b80      	ldr	r3, [pc, #512]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 8002382:	2104      	movs	r1, #4
 8002384:	438a      	bics	r2, r1
 8002386:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d014      	beq.n	80023ba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7ff fabc 	bl	800190c <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002398:	e009      	b.n	80023ae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7ff fab7 	bl	800190c <HAL_GetTick>
 800239e:	0002      	movs	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	4a79      	ldr	r2, [pc, #484]	; (800258c <HAL_RCC_OscConfig+0x620>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e0e6      	b.n	800257c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ae:	4b75      	ldr	r3, [pc, #468]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 80023b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b2:	2202      	movs	r2, #2
 80023b4:	4013      	ands	r3, r2
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x42e>
 80023b8:	e013      	b.n	80023e2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ba:	f7ff faa7 	bl	800190c <HAL_GetTick>
 80023be:	0003      	movs	r3, r0
 80023c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023c2:	e009      	b.n	80023d8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c4:	f7ff faa2 	bl	800190c <HAL_GetTick>
 80023c8:	0002      	movs	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	4a6f      	ldr	r2, [pc, #444]	; (800258c <HAL_RCC_OscConfig+0x620>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e0d1      	b.n	800257c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023d8:	4b6a      	ldr	r3, [pc, #424]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	2202      	movs	r2, #2
 80023de:	4013      	ands	r3, r2
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80023e2:	231f      	movs	r3, #31
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d105      	bne.n	80023f8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80023ec:	4b65      	ldr	r3, [pc, #404]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 80023ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023f0:	4b64      	ldr	r3, [pc, #400]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 80023f2:	4967      	ldr	r1, [pc, #412]	; (8002590 <HAL_RCC_OscConfig+0x624>)
 80023f4:	400a      	ands	r2, r1
 80023f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d100      	bne.n	8002402 <HAL_RCC_OscConfig+0x496>
 8002400:	e0bb      	b.n	800257a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002402:	4b60      	ldr	r3, [pc, #384]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2238      	movs	r2, #56	; 0x38
 8002408:	4013      	ands	r3, r2
 800240a:	2b10      	cmp	r3, #16
 800240c:	d100      	bne.n	8002410 <HAL_RCC_OscConfig+0x4a4>
 800240e:	e07b      	b.n	8002508 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d156      	bne.n	80024c6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002418:	4b5a      	ldr	r3, [pc, #360]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b59      	ldr	r3, [pc, #356]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 800241e:	495d      	ldr	r1, [pc, #372]	; (8002594 <HAL_RCC_OscConfig+0x628>)
 8002420:	400a      	ands	r2, r1
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7ff fa72 	bl	800190c <HAL_GetTick>
 8002428:	0003      	movs	r3, r0
 800242a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242e:	f7ff fa6d 	bl	800190c <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e09d      	b.n	800257c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002440:	4b50      	ldr	r3, [pc, #320]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	049b      	lsls	r3, r3, #18
 8002448:	4013      	ands	r3, r2
 800244a:	d1f0      	bne.n	800242e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800244c:	4b4d      	ldr	r3, [pc, #308]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4a51      	ldr	r2, [pc, #324]	; (8002598 <HAL_RCC_OscConfig+0x62c>)
 8002452:	4013      	ands	r3, r2
 8002454:	0019      	movs	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1a      	ldr	r2, [r3, #32]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002478:	431a      	orrs	r2, r3
 800247a:	4b42      	ldr	r3, [pc, #264]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 800247c:	430a      	orrs	r2, r1
 800247e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002480:	4b40      	ldr	r3, [pc, #256]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 8002486:	2180      	movs	r1, #128	; 0x80
 8002488:	0449      	lsls	r1, r1, #17
 800248a:	430a      	orrs	r2, r1
 800248c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800248e:	4b3d      	ldr	r3, [pc, #244]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	4b3c      	ldr	r3, [pc, #240]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 8002494:	2180      	movs	r1, #128	; 0x80
 8002496:	0549      	lsls	r1, r1, #21
 8002498:	430a      	orrs	r2, r1
 800249a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7ff fa36 	bl	800190c <HAL_GetTick>
 80024a0:	0003      	movs	r3, r0
 80024a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a6:	f7ff fa31 	bl	800190c <HAL_GetTick>
 80024aa:	0002      	movs	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e061      	b.n	800257c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b8:	4b32      	ldr	r3, [pc, #200]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	049b      	lsls	r3, r3, #18
 80024c0:	4013      	ands	r3, r2
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x53a>
 80024c4:	e059      	b.n	800257a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c6:	4b2f      	ldr	r3, [pc, #188]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 80024cc:	4931      	ldr	r1, [pc, #196]	; (8002594 <HAL_RCC_OscConfig+0x628>)
 80024ce:	400a      	ands	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7ff fa1b 	bl	800190c <HAL_GetTick>
 80024d6:	0003      	movs	r3, r0
 80024d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024dc:	f7ff fa16 	bl	800190c <HAL_GetTick>
 80024e0:	0002      	movs	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e046      	b.n	800257c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ee:	4b25      	ldr	r3, [pc, #148]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	049b      	lsls	r3, r3, #18
 80024f6:	4013      	ands	r3, r2
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80024fa:	4b22      	ldr	r3, [pc, #136]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	4b21      	ldr	r3, [pc, #132]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 8002500:	4926      	ldr	r1, [pc, #152]	; (800259c <HAL_RCC_OscConfig+0x630>)
 8002502:	400a      	ands	r2, r1
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	e038      	b.n	800257a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e033      	b.n	800257c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_RCC_OscConfig+0x618>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2203      	movs	r2, #3
 800251e:	401a      	ands	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	429a      	cmp	r2, r3
 8002526:	d126      	bne.n	8002576 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2270      	movs	r2, #112	; 0x70
 800252c:	401a      	ands	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d11f      	bne.n	8002576 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	23fe      	movs	r3, #254	; 0xfe
 800253a:	01db      	lsls	r3, r3, #7
 800253c:	401a      	ands	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d116      	bne.n	8002576 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	23f8      	movs	r3, #248	; 0xf8
 800254c:	039b      	lsls	r3, r3, #14
 800254e:	401a      	ands	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d10e      	bne.n	8002576 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	23e0      	movs	r3, #224	; 0xe0
 800255c:	051b      	lsls	r3, r3, #20
 800255e:	401a      	ands	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d106      	bne.n	8002576 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	0f5b      	lsrs	r3, r3, #29
 800256c:	075a      	lsls	r2, r3, #29
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d001      	beq.n	800257a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b008      	add	sp, #32
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000
 8002588:	40007000 	.word	0x40007000
 800258c:	00001388 	.word	0x00001388
 8002590:	efffffff 	.word	0xefffffff
 8002594:	feffffff 	.word	0xfeffffff
 8002598:	11c1808c 	.word	0x11c1808c
 800259c:	eefefffc 	.word	0xeefefffc

080025a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0e9      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b4:	4b76      	ldr	r3, [pc, #472]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2207      	movs	r2, #7
 80025ba:	4013      	ands	r3, r2
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d91e      	bls.n	8002600 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b73      	ldr	r3, [pc, #460]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2207      	movs	r2, #7
 80025c8:	4393      	bics	r3, r2
 80025ca:	0019      	movs	r1, r3
 80025cc:	4b70      	ldr	r3, [pc, #448]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025d4:	f7ff f99a 	bl	800190c <HAL_GetTick>
 80025d8:	0003      	movs	r3, r0
 80025da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025dc:	e009      	b.n	80025f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025de:	f7ff f995 	bl	800190c <HAL_GetTick>
 80025e2:	0002      	movs	r2, r0
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	4a6a      	ldr	r2, [pc, #424]	; (8002794 <HAL_RCC_ClockConfig+0x1f4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e0ca      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025f2:	4b67      	ldr	r3, [pc, #412]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2207      	movs	r2, #7
 80025f8:	4013      	ands	r3, r2
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d1ee      	bne.n	80025de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2202      	movs	r2, #2
 8002606:	4013      	ands	r3, r2
 8002608:	d015      	beq.n	8002636 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2204      	movs	r2, #4
 8002610:	4013      	ands	r3, r2
 8002612:	d006      	beq.n	8002622 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002614:	4b60      	ldr	r3, [pc, #384]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	4b5f      	ldr	r3, [pc, #380]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 800261a:	21e0      	movs	r1, #224	; 0xe0
 800261c:	01c9      	lsls	r1, r1, #7
 800261e:	430a      	orrs	r2, r1
 8002620:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002622:	4b5d      	ldr	r3, [pc, #372]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	4a5d      	ldr	r2, [pc, #372]	; (800279c <HAL_RCC_ClockConfig+0x1fc>)
 8002628:	4013      	ands	r3, r2
 800262a:	0019      	movs	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	4b59      	ldr	r3, [pc, #356]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002632:	430a      	orrs	r2, r1
 8002634:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2201      	movs	r2, #1
 800263c:	4013      	ands	r3, r2
 800263e:	d057      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d107      	bne.n	8002658 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002648:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	029b      	lsls	r3, r3, #10
 8002650:	4013      	ands	r3, r2
 8002652:	d12b      	bne.n	80026ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e097      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d107      	bne.n	8002670 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002660:	4b4d      	ldr	r3, [pc, #308]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	049b      	lsls	r3, r3, #18
 8002668:	4013      	ands	r3, r2
 800266a:	d11f      	bne.n	80026ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e08b      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d107      	bne.n	8002688 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002678:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4013      	ands	r3, r2
 8002682:	d113      	bne.n	80026ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e07f      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d106      	bne.n	800269e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002690:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002694:	2202      	movs	r2, #2
 8002696:	4013      	ands	r3, r2
 8002698:	d108      	bne.n	80026ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e074      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269e:	4b3e      	ldr	r3, [pc, #248]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 80026a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a2:	2202      	movs	r2, #2
 80026a4:	4013      	ands	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e06d      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026ac:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2207      	movs	r2, #7
 80026b2:	4393      	bics	r3, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	4b37      	ldr	r3, [pc, #220]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 80026bc:	430a      	orrs	r2, r1
 80026be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c0:	f7ff f924 	bl	800190c <HAL_GetTick>
 80026c4:	0003      	movs	r3, r0
 80026c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c8:	e009      	b.n	80026de <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ca:	f7ff f91f 	bl	800190c <HAL_GetTick>
 80026ce:	0002      	movs	r2, r0
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	4a2f      	ldr	r2, [pc, #188]	; (8002794 <HAL_RCC_ClockConfig+0x1f4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e054      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	4b2e      	ldr	r3, [pc, #184]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2238      	movs	r2, #56	; 0x38
 80026e4:	401a      	ands	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1ec      	bne.n	80026ca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2207      	movs	r2, #7
 80026f6:	4013      	ands	r3, r2
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d21e      	bcs.n	800273c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b24      	ldr	r3, [pc, #144]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2207      	movs	r2, #7
 8002704:	4393      	bics	r3, r2
 8002706:	0019      	movs	r1, r3
 8002708:	4b21      	ldr	r3, [pc, #132]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002710:	f7ff f8fc 	bl	800190c <HAL_GetTick>
 8002714:	0003      	movs	r3, r0
 8002716:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002718:	e009      	b.n	800272e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271a:	f7ff f8f7 	bl	800190c <HAL_GetTick>
 800271e:	0002      	movs	r2, r0
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <HAL_RCC_ClockConfig+0x1f4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e02c      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800272e:	4b18      	ldr	r3, [pc, #96]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2207      	movs	r2, #7
 8002734:	4013      	ands	r3, r2
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d1ee      	bne.n	800271a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2204      	movs	r2, #4
 8002742:	4013      	ands	r3, r2
 8002744:	d009      	beq.n	800275a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002746:	4b14      	ldr	r3, [pc, #80]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	4a15      	ldr	r2, [pc, #84]	; (80027a0 <HAL_RCC_ClockConfig+0x200>)
 800274c:	4013      	ands	r3, r2
 800274e:	0019      	movs	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002756:	430a      	orrs	r2, r1
 8002758:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800275a:	f000 f829 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 800275e:	0001      	movs	r1, r0
 8002760:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	220f      	movs	r2, #15
 8002768:	401a      	ands	r2, r3
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <HAL_RCC_ClockConfig+0x204>)
 800276c:	0092      	lsls	r2, r2, #2
 800276e:	58d3      	ldr	r3, [r2, r3]
 8002770:	221f      	movs	r2, #31
 8002772:	4013      	ands	r3, r2
 8002774:	000a      	movs	r2, r1
 8002776:	40da      	lsrs	r2, r3
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_ClockConfig+0x208>)
 800277a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_ClockConfig+0x20c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	0018      	movs	r0, r3
 8002782:	f7ff f867 	bl	8001854 <HAL_InitTick>
 8002786:	0003      	movs	r3, r0
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b004      	add	sp, #16
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40022000 	.word	0x40022000
 8002794:	00001388 	.word	0x00001388
 8002798:	40021000 	.word	0x40021000
 800279c:	fffff0ff 	.word	0xfffff0ff
 80027a0:	ffff8fff 	.word	0xffff8fff
 80027a4:	08005848 	.word	0x08005848
 80027a8:	20000038 	.word	0x20000038
 80027ac:	2000003c 	.word	0x2000003c

080027b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027b6:	4b3c      	ldr	r3, [pc, #240]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2238      	movs	r2, #56	; 0x38
 80027bc:	4013      	ands	r3, r2
 80027be:	d10f      	bne.n	80027e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80027c0:	4b39      	ldr	r3, [pc, #228]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0adb      	lsrs	r3, r3, #11
 80027c6:	2207      	movs	r2, #7
 80027c8:	4013      	ands	r3, r2
 80027ca:	2201      	movs	r2, #1
 80027cc:	409a      	lsls	r2, r3
 80027ce:	0013      	movs	r3, r2
 80027d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80027d2:	6839      	ldr	r1, [r7, #0]
 80027d4:	4835      	ldr	r0, [pc, #212]	; (80028ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80027d6:	f7fd fc9f 	bl	8000118 <__udivsi3>
 80027da:	0003      	movs	r3, r0
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	e05d      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027e0:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2238      	movs	r2, #56	; 0x38
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d102      	bne.n	80027f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027ec:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	e054      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f2:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2238      	movs	r2, #56	; 0x38
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d138      	bne.n	8002870 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80027fe:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2203      	movs	r2, #3
 8002804:	4013      	ands	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002808:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	2207      	movs	r2, #7
 8002810:	4013      	ands	r3, r2
 8002812:	3301      	adds	r3, #1
 8002814:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d10d      	bne.n	8002838 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	4824      	ldr	r0, [pc, #144]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002820:	f7fd fc7a 	bl	8000118 <__udivsi3>
 8002824:	0003      	movs	r3, r0
 8002826:	0019      	movs	r1, r3
 8002828:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	227f      	movs	r2, #127	; 0x7f
 8002830:	4013      	ands	r3, r2
 8002832:	434b      	muls	r3, r1
 8002834:	617b      	str	r3, [r7, #20]
        break;
 8002836:	e00d      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	481c      	ldr	r0, [pc, #112]	; (80028ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800283c:	f7fd fc6c 	bl	8000118 <__udivsi3>
 8002840:	0003      	movs	r3, r0
 8002842:	0019      	movs	r1, r3
 8002844:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	227f      	movs	r2, #127	; 0x7f
 800284c:	4013      	ands	r3, r2
 800284e:	434b      	muls	r3, r1
 8002850:	617b      	str	r3, [r7, #20]
        break;
 8002852:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002854:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	0f5b      	lsrs	r3, r3, #29
 800285a:	2207      	movs	r2, #7
 800285c:	4013      	ands	r3, r2
 800285e:	3301      	adds	r3, #1
 8002860:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	6978      	ldr	r0, [r7, #20]
 8002866:	f7fd fc57 	bl	8000118 <__udivsi3>
 800286a:	0003      	movs	r3, r0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	e015      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002870:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2238      	movs	r2, #56	; 0x38
 8002876:	4013      	ands	r3, r2
 8002878:	2b20      	cmp	r3, #32
 800287a:	d103      	bne.n	8002884 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	e00b      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2238      	movs	r2, #56	; 0x38
 800288a:	4013      	ands	r3, r2
 800288c:	2b18      	cmp	r3, #24
 800288e:	d103      	bne.n	8002898 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002890:	23fa      	movs	r3, #250	; 0xfa
 8002892:	01db      	lsls	r3, r3, #7
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	e001      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800289c:	693b      	ldr	r3, [r7, #16]
}
 800289e:	0018      	movs	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b006      	add	sp, #24
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	40021000 	.word	0x40021000
 80028ac:	00f42400 	.word	0x00f42400
 80028b0:	007a1200 	.word	0x007a1200

080028b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b8:	4b02      	ldr	r3, [pc, #8]	; (80028c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	0018      	movs	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	20000038 	.word	0x20000038

080028c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c8:	b5b0      	push	{r4, r5, r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80028cc:	f7ff fff2 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 80028d0:	0004      	movs	r4, r0
 80028d2:	f7ff fb3f 	bl	8001f54 <LL_RCC_GetAPB1Prescaler>
 80028d6:	0003      	movs	r3, r0
 80028d8:	0b1a      	lsrs	r2, r3, #12
 80028da:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028dc:	0092      	lsls	r2, r2, #2
 80028de:	58d3      	ldr	r3, [r2, r3]
 80028e0:	221f      	movs	r2, #31
 80028e2:	4013      	ands	r3, r2
 80028e4:	40dc      	lsrs	r4, r3
 80028e6:	0023      	movs	r3, r4
}
 80028e8:	0018      	movs	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bdb0      	pop	{r4, r5, r7, pc}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	08005888 	.word	0x08005888

080028f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80028fc:	2313      	movs	r3, #19
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002904:	2312      	movs	r3, #18
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	029b      	lsls	r3, r3, #10
 8002914:	4013      	ands	r3, r2
 8002916:	d100      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002918:	e0a3      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291a:	2011      	movs	r0, #17
 800291c:	183b      	adds	r3, r7, r0
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002922:	4ba5      	ldr	r3, [pc, #660]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	055b      	lsls	r3, r3, #21
 800292a:	4013      	ands	r3, r2
 800292c:	d110      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	4ba2      	ldr	r3, [pc, #648]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002930:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002932:	4ba1      	ldr	r3, [pc, #644]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002934:	2180      	movs	r1, #128	; 0x80
 8002936:	0549      	lsls	r1, r1, #21
 8002938:	430a      	orrs	r2, r1
 800293a:	63da      	str	r2, [r3, #60]	; 0x3c
 800293c:	4b9e      	ldr	r3, [pc, #632]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800293e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	055b      	lsls	r3, r3, #21
 8002944:	4013      	ands	r3, r2
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800294a:	183b      	adds	r3, r7, r0
 800294c:	2201      	movs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002950:	4b9a      	ldr	r3, [pc, #616]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4b99      	ldr	r3, [pc, #612]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002956:	2180      	movs	r1, #128	; 0x80
 8002958:	0049      	lsls	r1, r1, #1
 800295a:	430a      	orrs	r2, r1
 800295c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800295e:	f7fe ffd5 	bl	800190c <HAL_GetTick>
 8002962:	0003      	movs	r3, r0
 8002964:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002966:	e00b      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002968:	f7fe ffd0 	bl	800190c <HAL_GetTick>
 800296c:	0002      	movs	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d904      	bls.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002976:	2313      	movs	r3, #19
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	2203      	movs	r2, #3
 800297c:	701a      	strb	r2, [r3, #0]
        break;
 800297e:	e005      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002980:	4b8e      	ldr	r3, [pc, #568]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4013      	ands	r3, r2
 800298a:	d0ed      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800298c:	2313      	movs	r3, #19
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d154      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002996:	4b88      	ldr	r3, [pc, #544]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002998:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800299a:	23c0      	movs	r3, #192	; 0xc0
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4013      	ands	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d019      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d014      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029b2:	4b81      	ldr	r3, [pc, #516]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b6:	4a82      	ldr	r2, [pc, #520]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029bc:	4b7e      	ldr	r3, [pc, #504]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029c0:	4b7d      	ldr	r3, [pc, #500]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029c2:	2180      	movs	r1, #128	; 0x80
 80029c4:	0249      	lsls	r1, r1, #9
 80029c6:	430a      	orrs	r2, r1
 80029c8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029ca:	4b7b      	ldr	r3, [pc, #492]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029ce:	4b7a      	ldr	r3, [pc, #488]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029d0:	497c      	ldr	r1, [pc, #496]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80029d2:	400a      	ands	r2, r1
 80029d4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029d6:	4b78      	ldr	r3, [pc, #480]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2201      	movs	r2, #1
 80029e0:	4013      	ands	r3, r2
 80029e2:	d016      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe ff92 	bl	800190c <HAL_GetTick>
 80029e8:	0003      	movs	r3, r0
 80029ea:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ec:	e00c      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fe ff8d 	bl	800190c <HAL_GetTick>
 80029f2:	0002      	movs	r2, r0
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	4a73      	ldr	r2, [pc, #460]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d904      	bls.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80029fe:	2313      	movs	r3, #19
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	2203      	movs	r2, #3
 8002a04:	701a      	strb	r2, [r3, #0]
            break;
 8002a06:	e004      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a08:	4b6b      	ldr	r3, [pc, #428]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d0ed      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002a12:	2313      	movs	r3, #19
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a1c:	4b66      	ldr	r3, [pc, #408]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a20:	4a67      	ldr	r2, [pc, #412]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	0019      	movs	r1, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a2a:	4b63      	ldr	r3, [pc, #396]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a30:	e00c      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a32:	2312      	movs	r3, #18
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	2213      	movs	r2, #19
 8002a38:	18ba      	adds	r2, r7, r2
 8002a3a:	7812      	ldrb	r2, [r2, #0]
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	e005      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a40:	2312      	movs	r3, #18
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	2213      	movs	r2, #19
 8002a46:	18ba      	adds	r2, r7, r2
 8002a48:	7812      	ldrb	r2, [r2, #0]
 8002a4a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a4c:	2311      	movs	r3, #17
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d105      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a56:	4b58      	ldr	r3, [pc, #352]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a5a:	4b57      	ldr	r3, [pc, #348]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a5c:	495b      	ldr	r1, [pc, #364]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a5e:	400a      	ands	r2, r1
 8002a60:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2201      	movs	r2, #1
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d009      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a6c:	4b52      	ldr	r3, [pc, #328]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a70:	2203      	movs	r2, #3
 8002a72:	4393      	bics	r3, r2
 8002a74:	0019      	movs	r1, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	4b4f      	ldr	r3, [pc, #316]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2210      	movs	r2, #16
 8002a86:	4013      	ands	r3, r2
 8002a88:	d009      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a8a:	4b4b      	ldr	r3, [pc, #300]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	4a50      	ldr	r2, [pc, #320]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	0019      	movs	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	4b47      	ldr	r3, [pc, #284]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d009      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aaa:	4b43      	ldr	r3, [pc, #268]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aae:	4a49      	ldr	r2, [pc, #292]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	695a      	ldr	r2, [r3, #20]
 8002ab8:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aba:	430a      	orrs	r2, r1
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d009      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002aca:	4b3b      	ldr	r3, [pc, #236]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ace:	4a42      	ldr	r2, [pc, #264]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699a      	ldr	r2, [r3, #24]
 8002ad8:	4b37      	ldr	r3, [pc, #220]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ada:	430a      	orrs	r2, r1
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d009      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ae8:	4b33      	ldr	r3, [pc, #204]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aec:	4a3b      	ldr	r2, [pc, #236]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	0019      	movs	r1, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	4b30      	ldr	r3, [pc, #192]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002af8:	430a      	orrs	r2, r1
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	01db      	lsls	r3, r3, #7
 8002b04:	4013      	ands	r3, r2
 8002b06:	d015      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b08:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	0899      	lsrs	r1, r3, #2
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69da      	ldr	r2, [r3, #28]
 8002b14:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b16:	430a      	orrs	r2, r1
 8002b18:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69da      	ldr	r2, [r3, #28]
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	05db      	lsls	r3, r3, #23
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d106      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b26:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	4b23      	ldr	r3, [pc, #140]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b2c:	2180      	movs	r1, #128	; 0x80
 8002b2e:	0249      	lsls	r1, r1, #9
 8002b30:	430a      	orrs	r2, r1
 8002b32:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	039b      	lsls	r3, r3, #14
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d016      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b40:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	4a26      	ldr	r2, [pc, #152]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	0019      	movs	r1, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1a      	ldr	r2, [r3, #32]
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b50:	430a      	orrs	r2, r1
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1a      	ldr	r2, [r3, #32]
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	03db      	lsls	r3, r3, #15
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b60:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b66:	2180      	movs	r1, #128	; 0x80
 8002b68:	0449      	lsls	r1, r1, #17
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	4013      	ands	r3, r2
 8002b78:	d016      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002b7a:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7e:	4a19      	ldr	r2, [pc, #100]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	0019      	movs	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	01db      	lsls	r3, r3, #7
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d106      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ba0:	2180      	movs	r1, #128	; 0x80
 8002ba2:	0249      	lsls	r1, r1, #9
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002ba8:	2312      	movs	r3, #18
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	781b      	ldrb	r3, [r3, #0]
}
 8002bae:	0018      	movs	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b006      	add	sp, #24
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40007000 	.word	0x40007000
 8002bc0:	fffffcff 	.word	0xfffffcff
 8002bc4:	fffeffff 	.word	0xfffeffff
 8002bc8:	00001388 	.word	0x00001388
 8002bcc:	efffffff 	.word	0xefffffff
 8002bd0:	fffff3ff 	.word	0xfffff3ff
 8002bd4:	fff3ffff 	.word	0xfff3ffff
 8002bd8:	ffcfffff 	.word	0xffcfffff
 8002bdc:	ffffcfff 	.word	0xffffcfff
 8002be0:	ffbfffff 	.word	0xffbfffff
 8002be4:	ffff3fff 	.word	0xffff3fff

08002be8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002be8:	b5b0      	push	{r4, r5, r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002bf0:	230f      	movs	r3, #15
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d100      	bne.n	8002c00 <HAL_RTC_Init+0x18>
 8002bfe:	e08c      	b.n	8002d1a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2229      	movs	r2, #41	; 0x29
 8002c04:	5c9b      	ldrb	r3, [r3, r2]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10b      	bne.n	8002c24 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2228      	movs	r2, #40	; 0x28
 8002c10:	2100      	movs	r1, #0
 8002c12:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2288      	movs	r2, #136	; 0x88
 8002c18:	0212      	lsls	r2, r2, #8
 8002c1a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f7fe fc30 	bl	8001484 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2229      	movs	r2, #41	; 0x29
 8002c28:	2102      	movs	r1, #2
 8002c2a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2210      	movs	r2, #16
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	d062      	beq.n	8002d00 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	22ca      	movs	r2, #202	; 0xca
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2253      	movs	r2, #83	; 0x53
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002c4a:	250f      	movs	r5, #15
 8002c4c:	197c      	adds	r4, r7, r5
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	0018      	movs	r0, r3
 8002c52:	f000 fcba 	bl	80035ca <RTC_EnterInitMode>
 8002c56:	0003      	movs	r3, r0
 8002c58:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002c5a:	0028      	movs	r0, r5
 8002c5c:	183b      	adds	r3, r7, r0
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d12c      	bne.n	8002cbe <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	492e      	ldr	r1, [pc, #184]	; (8002d28 <HAL_RTC_Init+0x140>)
 8002c70:	400a      	ands	r2, r1
 8002c72:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6999      	ldr	r1, [r3, #24]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6912      	ldr	r2, [r2, #16]
 8002c9a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6919      	ldr	r1, [r3, #16]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	041a      	lsls	r2, r3, #16
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002cb0:	183c      	adds	r4, r7, r0
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 fccb 	bl	8003650 <RTC_ExitInitMode>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002cbe:	230f      	movs	r3, #15
 8002cc0:	18fb      	adds	r3, r7, r3
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d116      	bne.n	8002cf6 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	00d2      	lsls	r2, r2, #3
 8002cd4:	08d2      	lsrs	r2, r2, #3
 8002cd6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6999      	ldr	r1, [r3, #24]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	22ff      	movs	r2, #255	; 0xff
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24
 8002cfe:	e003      	b.n	8002d08 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002d00:	230f      	movs	r3, #15
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002d08:	230f      	movs	r3, #15
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d103      	bne.n	8002d1a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2229      	movs	r2, #41	; 0x29
 8002d16:	2101      	movs	r1, #1
 8002d18:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002d1a:	230f      	movs	r3, #15
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	781b      	ldrb	r3, [r3, #0]
}
 8002d20:	0018      	movs	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b004      	add	sp, #16
 8002d26:	bdb0      	pop	{r4, r5, r7, pc}
 8002d28:	fb8fffbf 	.word	0xfb8fffbf

08002d2c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d2c:	b5b0      	push	{r4, r5, r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2228      	movs	r2, #40	; 0x28
 8002d3c:	5c9b      	ldrb	r3, [r3, r2]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_RTC_SetTime+0x1a>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e092      	b.n	8002e6c <HAL_RTC_SetTime+0x140>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2228      	movs	r2, #40	; 0x28
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2229      	movs	r2, #41	; 0x29
 8002d52:	2102      	movs	r1, #2
 8002d54:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	22ca      	movs	r2, #202	; 0xca
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2253      	movs	r2, #83	; 0x53
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d66:	2513      	movs	r5, #19
 8002d68:	197c      	adds	r4, r7, r5
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f000 fc2c 	bl	80035ca <RTC_EnterInitMode>
 8002d72:	0003      	movs	r3, r0
 8002d74:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002d76:	197b      	adds	r3, r7, r5
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d162      	bne.n	8002e44 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d125      	bne.n	8002dd0 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	2240      	movs	r2, #64	; 0x40
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d102      	bne.n	8002d96 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2200      	movs	r2, #0
 8002d94:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f000 fc9c 	bl	80036d8 <RTC_ByteToBcd2>
 8002da0:	0003      	movs	r3, r0
 8002da2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	785b      	ldrb	r3, [r3, #1]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f000 fc95 	bl	80036d8 <RTC_ByteToBcd2>
 8002dae:	0003      	movs	r3, r0
 8002db0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002db2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	789b      	ldrb	r3, [r3, #2]
 8002db8:	0018      	movs	r0, r3
 8002dba:	f000 fc8d 	bl	80036d8 <RTC_ByteToBcd2>
 8002dbe:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002dc0:	0022      	movs	r2, r4
 8002dc2:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	78db      	ldrb	r3, [r3, #3]
 8002dc8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	e017      	b.n	8002e00 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2240      	movs	r2, #64	; 0x40
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d102      	bne.n	8002de2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2200      	movs	r2, #0
 8002de0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	785b      	ldrb	r3, [r3, #1]
 8002dec:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dee:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002df4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	78db      	ldrb	r3, [r3, #3]
 8002dfa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	491b      	ldr	r1, [pc, #108]	; (8002e74 <HAL_RTC_SetTime+0x148>)
 8002e08:	400a      	ands	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4918      	ldr	r1, [pc, #96]	; (8002e78 <HAL_RTC_SetTime+0x14c>)
 8002e18:	400a      	ands	r2, r1
 8002e1a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6999      	ldr	r1, [r3, #24]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e34:	2313      	movs	r3, #19
 8002e36:	18fc      	adds	r4, r7, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f000 fc08 	bl	8003650 <RTC_ExitInitMode>
 8002e40:	0003      	movs	r3, r0
 8002e42:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	22ff      	movs	r2, #255	; 0xff
 8002e4a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8002e4c:	2313      	movs	r3, #19
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d103      	bne.n	8002e5e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2229      	movs	r2, #41	; 0x29
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2228      	movs	r2, #40	; 0x28
 8002e62:	2100      	movs	r1, #0
 8002e64:	5499      	strb	r1, [r3, r2]

  return status;
 8002e66:	2313      	movs	r3, #19
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	781b      	ldrb	r3, [r3, #0]
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b006      	add	sp, #24
 8002e72:	bdb0      	pop	{r4, r5, r7, pc}
 8002e74:	007f7f7f 	.word	0x007f7f7f
 8002e78:	fffbffff 	.word	0xfffbffff

08002e7c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	045b      	lsls	r3, r3, #17
 8002e9a:	0c5a      	lsrs	r2, r3, #17
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <HAL_RTC_GetTime+0xb4>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	0c1b      	lsrs	r3, r3, #16
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	223f      	movs	r2, #63	; 0x3f
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	227f      	movs	r2, #127	; 0x7f
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	227f      	movs	r2, #127	; 0x7f
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	0d9b      	lsrs	r3, r3, #22
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d11a      	bne.n	8002f26 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f000 fc17 	bl	8003728 <RTC_Bcd2ToByte>
 8002efa:	0003      	movs	r3, r0
 8002efc:	001a      	movs	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	785b      	ldrb	r3, [r3, #1]
 8002f06:	0018      	movs	r0, r3
 8002f08:	f000 fc0e 	bl	8003728 <RTC_Bcd2ToByte>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	001a      	movs	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	789b      	ldrb	r3, [r3, #2]
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f000 fc05 	bl	8003728 <RTC_Bcd2ToByte>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	001a      	movs	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b006      	add	sp, #24
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	007f7f7f 	.word	0x007f7f7f

08002f34 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f34:	b5b0      	push	{r4, r5, r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2228      	movs	r2, #40	; 0x28
 8002f44:	5c9b      	ldrb	r3, [r3, r2]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_RTC_SetDate+0x1a>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e07e      	b.n	800304c <HAL_RTC_SetDate+0x118>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2228      	movs	r2, #40	; 0x28
 8002f52:	2101      	movs	r1, #1
 8002f54:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2229      	movs	r2, #41	; 0x29
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10e      	bne.n	8002f82 <HAL_RTC_SetDate+0x4e>
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	785b      	ldrb	r3, [r3, #1]
 8002f68:	001a      	movs	r2, r3
 8002f6a:	2310      	movs	r3, #16
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d008      	beq.n	8002f82 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	785b      	ldrb	r3, [r3, #1]
 8002f74:	2210      	movs	r2, #16
 8002f76:	4393      	bics	r3, r2
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	330a      	adds	r3, #10
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d11c      	bne.n	8002fc2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	78db      	ldrb	r3, [r3, #3]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 fba3 	bl	80036d8 <RTC_ByteToBcd2>
 8002f92:	0003      	movs	r3, r0
 8002f94:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	785b      	ldrb	r3, [r3, #1]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f000 fb9c 	bl	80036d8 <RTC_ByteToBcd2>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fa4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	789b      	ldrb	r3, [r3, #2]
 8002faa:	0018      	movs	r0, r3
 8002fac:	f000 fb94 	bl	80036d8 <RTC_ByteToBcd2>
 8002fb0:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fb2:	0022      	movs	r2, r4
 8002fb4:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	e00e      	b.n	8002fe0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	78db      	ldrb	r3, [r3, #3]
 8002fc6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	785b      	ldrb	r3, [r3, #1]
 8002fcc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002fce:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002fd4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	22ca      	movs	r2, #202	; 0xca
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2253      	movs	r2, #83	; 0x53
 8002fee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ff0:	2513      	movs	r5, #19
 8002ff2:	197c      	adds	r4, r7, r5
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f000 fae7 	bl	80035ca <RTC_EnterInitMode>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003000:	0028      	movs	r0, r5
 8003002:	183b      	adds	r3, r7, r0
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10c      	bne.n	8003024 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4910      	ldr	r1, [pc, #64]	; (8003054 <HAL_RTC_SetDate+0x120>)
 8003012:	400a      	ands	r2, r1
 8003014:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003016:	183c      	adds	r4, r7, r0
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	0018      	movs	r0, r3
 800301c:	f000 fb18 	bl	8003650 <RTC_ExitInitMode>
 8003020:	0003      	movs	r3, r0
 8003022:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	22ff      	movs	r2, #255	; 0xff
 800302a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800302c:	2313      	movs	r3, #19
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d103      	bne.n	800303e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2229      	movs	r2, #41	; 0x29
 800303a:	2101      	movs	r1, #1
 800303c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2228      	movs	r2, #40	; 0x28
 8003042:	2100      	movs	r1, #0
 8003044:	5499      	strb	r1, [r3, r2]

  return status;
 8003046:	2313      	movs	r3, #19
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	781b      	ldrb	r3, [r3, #0]
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b006      	add	sp, #24
 8003052:	bdb0      	pop	{r4, r5, r7, pc}
 8003054:	00ffff3f 	.word	0x00ffff3f

08003058 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4a21      	ldr	r2, [pc, #132]	; (80030f0 <HAL_RTC_GetDate+0x98>)
 800306c:	4013      	ands	r3, r2
 800306e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	0c1b      	lsrs	r3, r3, #16
 8003074:	b2da      	uxtb	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	b2db      	uxtb	r3, r3
 8003080:	221f      	movs	r2, #31
 8003082:	4013      	ands	r3, r2
 8003084:	b2da      	uxtb	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	223f      	movs	r2, #63	; 0x3f
 8003090:	4013      	ands	r3, r2
 8003092:	b2da      	uxtb	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	0b5b      	lsrs	r3, r3, #13
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2207      	movs	r2, #7
 80030a0:	4013      	ands	r3, r2
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d11a      	bne.n	80030e4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	78db      	ldrb	r3, [r3, #3]
 80030b2:	0018      	movs	r0, r3
 80030b4:	f000 fb38 	bl	8003728 <RTC_Bcd2ToByte>
 80030b8:	0003      	movs	r3, r0
 80030ba:	001a      	movs	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	785b      	ldrb	r3, [r3, #1]
 80030c4:	0018      	movs	r0, r3
 80030c6:	f000 fb2f 	bl	8003728 <RTC_Bcd2ToByte>
 80030ca:	0003      	movs	r3, r0
 80030cc:	001a      	movs	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	789b      	ldrb	r3, [r3, #2]
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 fb26 	bl	8003728 <RTC_Bcd2ToByte>
 80030dc:	0003      	movs	r3, r0
 80030de:	001a      	movs	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	0018      	movs	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b006      	add	sp, #24
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	00ffff3f 	.word	0x00ffff3f

080030f4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b089      	sub	sp, #36	; 0x24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2228      	movs	r2, #40	; 0x28
 8003104:	5c9b      	ldrb	r3, [r3, r2]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_RTC_SetAlarm_IT+0x1a>
 800310a:	2302      	movs	r3, #2
 800310c:	e127      	b.n	800335e <HAL_RTC_SetAlarm_IT+0x26a>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2228      	movs	r2, #40	; 0x28
 8003112:	2101      	movs	r1, #1
 8003114:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2229      	movs	r2, #41	; 0x29
 800311a:	2102      	movs	r1, #2
 800311c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d136      	bne.n	8003192 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2240      	movs	r2, #64	; 0x40
 800312c:	4013      	ands	r3, r2
 800312e:	d102      	bne.n	8003136 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2200      	movs	r2, #0
 8003134:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	0018      	movs	r0, r3
 800313c:	f000 facc 	bl	80036d8 <RTC_ByteToBcd2>
 8003140:	0003      	movs	r3, r0
 8003142:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	785b      	ldrb	r3, [r3, #1]
 8003148:	0018      	movs	r0, r3
 800314a:	f000 fac5 	bl	80036d8 <RTC_ByteToBcd2>
 800314e:	0003      	movs	r3, r0
 8003150:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003152:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	789b      	ldrb	r3, [r3, #2]
 8003158:	0018      	movs	r0, r3
 800315a:	f000 fabd 	bl	80036d8 <RTC_ByteToBcd2>
 800315e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003160:	0022      	movs	r2, r4
 8003162:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	78db      	ldrb	r3, [r3, #3]
 8003168:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800316a:	431a      	orrs	r2, r3
 800316c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2220      	movs	r2, #32
 8003172:	5c9b      	ldrb	r3, [r3, r2]
 8003174:	0018      	movs	r0, r3
 8003176:	f000 faaf 	bl	80036d8 <RTC_ByteToBcd2>
 800317a:	0003      	movs	r3, r0
 800317c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800317e:	0022      	movs	r2, r4
 8003180:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003186:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800318c:	4313      	orrs	r3, r2
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	e022      	b.n	80031d8 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	2240      	movs	r2, #64	; 0x40
 800319a:	4013      	ands	r3, r2
 800319c:	d102      	bne.n	80031a4 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2200      	movs	r2, #0
 80031a2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	785b      	ldrb	r3, [r3, #1]
 80031ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80031b0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80031b6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	78db      	ldrb	r3, [r3, #3]
 80031bc:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80031be:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2120      	movs	r1, #32
 80031c4:	5c5b      	ldrb	r3, [r3, r1]
 80031c6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80031c8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80031ce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	22ca      	movs	r2, #202	; 0xca
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2253      	movs	r2, #83	; 0x53
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d14c      	bne.n	800329a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4957      	ldr	r1, [pc, #348]	; (8003368 <HAL_RTC_SetAlarm_IT+0x274>)
 800320c:	400a      	ands	r2, r1
 800320e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2101      	movs	r1, #1
 800321c:	430a      	orrs	r2, r1
 800321e:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8003220:	f7fe fb74 	bl	800190c <HAL_GetTick>
 8003224:	0003      	movs	r3, r0
 8003226:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003228:	e016      	b.n	8003258 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800322a:	f7fe fb6f 	bl	800190c <HAL_GetTick>
 800322e:	0002      	movs	r2, r0
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	1ad2      	subs	r2, r2, r3
 8003234:	23fa      	movs	r3, #250	; 0xfa
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	429a      	cmp	r2, r3
 800323a:	d90d      	bls.n	8003258 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	22ff      	movs	r2, #255	; 0xff
 8003242:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2229      	movs	r2, #41	; 0x29
 8003248:	2103      	movs	r1, #3
 800324a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2228      	movs	r2, #40	; 0x28
 8003250:	2100      	movs	r1, #0
 8003252:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e082      	b.n	800335e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	4013      	ands	r3, r2
 8003262:	d0e2      	beq.n	800322a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2180      	movs	r1, #128	; 0x80
 8003280:	0049      	lsls	r1, r1, #1
 8003282:	430a      	orrs	r2, r1
 8003284:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699a      	ldr	r2, [r3, #24]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2180      	movs	r1, #128	; 0x80
 8003292:	0149      	lsls	r1, r1, #5
 8003294:	430a      	orrs	r2, r1
 8003296:	619a      	str	r2, [r3, #24]
 8003298:	e04b      	b.n	8003332 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699a      	ldr	r2, [r3, #24]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4931      	ldr	r1, [pc, #196]	; (800336c <HAL_RTC_SetAlarm_IT+0x278>)
 80032a6:	400a      	ands	r2, r1
 80032a8:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2102      	movs	r1, #2
 80032b6:	430a      	orrs	r2, r1
 80032b8:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80032ba:	f7fe fb27 	bl	800190c <HAL_GetTick>
 80032be:	0003      	movs	r3, r0
 80032c0:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80032c2:	e016      	b.n	80032f2 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80032c4:	f7fe fb22 	bl	800190c <HAL_GetTick>
 80032c8:	0002      	movs	r2, r0
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	1ad2      	subs	r2, r2, r3
 80032ce:	23fa      	movs	r3, #250	; 0xfa
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d90d      	bls.n	80032f2 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	22ff      	movs	r2, #255	; 0xff
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2229      	movs	r2, #41	; 0x29
 80032e2:	2103      	movs	r1, #3
 80032e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2228      	movs	r2, #40	; 0x28
 80032ea:	2100      	movs	r1, #0
 80032ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e035      	b.n	800335e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2202      	movs	r2, #2
 80032fa:	4013      	ands	r3, r2
 80032fc:	d0e2      	beq.n	80032c4 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699a      	ldr	r2, [r3, #24]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2180      	movs	r1, #128	; 0x80
 800331a:	0089      	lsls	r1, r1, #2
 800331c:	430a      	orrs	r2, r1
 800331e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699a      	ldr	r2, [r3, #24]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2180      	movs	r1, #128	; 0x80
 800332c:	0189      	lsls	r1, r1, #6
 800332e:	430a      	orrs	r2, r1
 8003330:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003332:	4a0f      	ldr	r2, [pc, #60]	; (8003370 <HAL_RTC_SetAlarm_IT+0x27c>)
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	58d3      	ldr	r3, [r2, r3]
 8003338:	490d      	ldr	r1, [pc, #52]	; (8003370 <HAL_RTC_SetAlarm_IT+0x27c>)
 800333a:	2280      	movs	r2, #128	; 0x80
 800333c:	0312      	lsls	r2, r2, #12
 800333e:	4313      	orrs	r3, r2
 8003340:	2280      	movs	r2, #128	; 0x80
 8003342:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	22ff      	movs	r2, #255	; 0xff
 800334a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2229      	movs	r2, #41	; 0x29
 8003350:	2101      	movs	r1, #1
 8003352:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2228      	movs	r2, #40	; 0x28
 8003358:	2100      	movs	r1, #0
 800335a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	0018      	movs	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	b009      	add	sp, #36	; 0x24
 8003364:	bd90      	pop	{r4, r7, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	fffffeff 	.word	0xfffffeff
 800336c:	fffffdff 	.word	0xfffffdff
 8003370:	40021800 	.word	0x40021800

08003374 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	429a      	cmp	r2, r3
 800338a:	d144      	bne.n	8003416 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2280      	movs	r2, #128	; 0x80
 8003390:	0052      	lsls	r2, r2, #1
 8003392:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	045b      	lsls	r3, r3, #17
 80033a4:	0c5b      	lsrs	r3, r3, #17
 80033a6:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	0c1b      	lsrs	r3, r3, #16
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	223f      	movs	r2, #63	; 0x3f
 80033b0:	4013      	ands	r3, r2
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	0a1b      	lsrs	r3, r3, #8
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	227f      	movs	r2, #127	; 0x7f
 80033c0:	4013      	ands	r3, r2
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	227f      	movs	r2, #127	; 0x7f
 80033ce:	4013      	ands	r3, r2
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	0d9b      	lsrs	r3, r3, #22
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2201      	movs	r2, #1
 80033de:	4013      	ands	r3, r2
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	0e1b      	lsrs	r3, r3, #24
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	223f      	movs	r2, #63	; 0x3f
 80033f4:	4013      	ands	r3, r2
 80033f6:	b2d9      	uxtb	r1, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2220      	movs	r2, #32
 80033fc:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	2380      	movs	r3, #128	; 0x80
 8003402:	05db      	lsls	r3, r3, #23
 8003404:	401a      	ands	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	4a3b      	ldr	r2, [pc, #236]	; (80034fc <HAL_RTC_GetAlarm+0x188>)
 800340e:	401a      	ands	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	615a      	str	r2, [r3, #20]
 8003414:	e043      	b.n	800349e <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2280      	movs	r2, #128	; 0x80
 800341a:	0092      	lsls	r2, r2, #2
 800341c:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003424:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342c:	045b      	lsls	r3, r3, #17
 800342e:	0c5b      	lsrs	r3, r3, #17
 8003430:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	0c1b      	lsrs	r3, r3, #16
 8003436:	b2db      	uxtb	r3, r3
 8003438:	223f      	movs	r2, #63	; 0x3f
 800343a:	4013      	ands	r3, r2
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	b2db      	uxtb	r3, r3
 8003448:	227f      	movs	r2, #127	; 0x7f
 800344a:	4013      	ands	r3, r2
 800344c:	b2da      	uxtb	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	227f      	movs	r2, #127	; 0x7f
 8003458:	4013      	ands	r3, r2
 800345a:	b2da      	uxtb	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	0d9b      	lsrs	r3, r3, #22
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2201      	movs	r2, #1
 8003468:	4013      	ands	r3, r2
 800346a:	b2da      	uxtb	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	0e1b      	lsrs	r3, r3, #24
 800347a:	b2db      	uxtb	r3, r3
 800347c:	223f      	movs	r2, #63	; 0x3f
 800347e:	4013      	ands	r3, r2
 8003480:	b2d9      	uxtb	r1, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2220      	movs	r2, #32
 8003486:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	05db      	lsls	r3, r3, #23
 800348e:	401a      	ands	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	4a19      	ldr	r2, [pc, #100]	; (80034fc <HAL_RTC_GetAlarm+0x188>)
 8003498:	401a      	ands	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d125      	bne.n	80034f0 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 f93d 	bl	8003728 <RTC_Bcd2ToByte>
 80034ae:	0003      	movs	r3, r0
 80034b0:	001a      	movs	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	785b      	ldrb	r3, [r3, #1]
 80034ba:	0018      	movs	r0, r3
 80034bc:	f000 f934 	bl	8003728 <RTC_Bcd2ToByte>
 80034c0:	0003      	movs	r3, r0
 80034c2:	001a      	movs	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	789b      	ldrb	r3, [r3, #2]
 80034cc:	0018      	movs	r0, r3
 80034ce:	f000 f92b 	bl	8003728 <RTC_Bcd2ToByte>
 80034d2:	0003      	movs	r3, r0
 80034d4:	001a      	movs	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2220      	movs	r2, #32
 80034de:	5c9b      	ldrb	r3, [r3, r2]
 80034e0:	0018      	movs	r0, r3
 80034e2:	f000 f921 	bl	8003728 <RTC_Bcd2ToByte>
 80034e6:	0003      	movs	r3, r0
 80034e8:	0019      	movs	r1, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2220      	movs	r2, #32
 80034ee:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	0018      	movs	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b006      	add	sp, #24
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	80808080 	.word	0x80808080

08003500 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	2380      	movs	r3, #128	; 0x80
 8003510:	015b      	lsls	r3, r3, #5
 8003512:	4013      	ands	r3, r2
 8003514:	d011      	beq.n	800353a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351c:	2201      	movs	r2, #1
 800351e:	4013      	ands	r3, r2
 8003520:	d00b      	beq.n	800353a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2101      	movs	r1, #1
 800352e:	430a      	orrs	r2, r1
 8003530:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	0018      	movs	r0, r3
 8003536:	f7fd fb01 	bl	8000b3c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699a      	ldr	r2, [r3, #24]
 8003540:	2380      	movs	r3, #128	; 0x80
 8003542:	019b      	lsls	r3, r3, #6
 8003544:	4013      	ands	r3, r2
 8003546:	d011      	beq.n	800356c <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354e:	2202      	movs	r2, #2
 8003550:	4013      	ands	r3, r2
 8003552:	d00b      	beq.n	800356c <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2102      	movs	r1, #2
 8003560:	430a      	orrs	r2, r1
 8003562:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	0018      	movs	r0, r3
 8003568:	f000 f8fb 	bl	8003762 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2229      	movs	r2, #41	; 0x29
 8003570:	2101      	movs	r1, #1
 8003572:	5499      	strb	r1, [r3, r2]
}
 8003574:	46c0      	nop			; (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	b002      	add	sp, #8
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	21a0      	movs	r1, #160	; 0xa0
 8003590:	438a      	bics	r2, r1
 8003592:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003594:	f7fe f9ba 	bl	800190c <HAL_GetTick>
 8003598:	0003      	movs	r3, r0
 800359a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800359c:	e00a      	b.n	80035b4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800359e:	f7fe f9b5 	bl	800190c <HAL_GetTick>
 80035a2:	0002      	movs	r2, r0
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1ad2      	subs	r2, r2, r3
 80035a8:	23fa      	movs	r3, #250	; 0xfa
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d901      	bls.n	80035b4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e006      	b.n	80035c2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	4013      	ands	r3, r2
 80035be:	d0ee      	beq.n	800359e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	0018      	movs	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b004      	add	sp, #16
 80035c8:	bd80      	pop	{r7, pc}

080035ca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80035d2:	230f      	movs	r3, #15
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2240      	movs	r2, #64	; 0x40
 80035e2:	4013      	ands	r3, r2
 80035e4:	d12c      	bne.n	8003640 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2180      	movs	r1, #128	; 0x80
 80035f2:	430a      	orrs	r2, r1
 80035f4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80035f6:	f7fe f989 	bl	800190c <HAL_GetTick>
 80035fa:	0003      	movs	r3, r0
 80035fc:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80035fe:	e014      	b.n	800362a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003600:	f7fe f984 	bl	800190c <HAL_GetTick>
 8003604:	0002      	movs	r2, r0
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	1ad2      	subs	r2, r2, r3
 800360a:	200f      	movs	r0, #15
 800360c:	183b      	adds	r3, r7, r0
 800360e:	1839      	adds	r1, r7, r0
 8003610:	7809      	ldrb	r1, [r1, #0]
 8003612:	7019      	strb	r1, [r3, #0]
 8003614:	23fa      	movs	r3, #250	; 0xfa
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	429a      	cmp	r2, r3
 800361a:	d906      	bls.n	800362a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800361c:	183b      	adds	r3, r7, r0
 800361e:	2203      	movs	r2, #3
 8003620:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2229      	movs	r2, #41	; 0x29
 8003626:	2103      	movs	r1, #3
 8003628:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2240      	movs	r2, #64	; 0x40
 8003632:	4013      	ands	r3, r2
 8003634:	d104      	bne.n	8003640 <RTC_EnterInitMode+0x76>
 8003636:	230f      	movs	r3, #15
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b03      	cmp	r3, #3
 800363e:	d1df      	bne.n	8003600 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003640:	230f      	movs	r3, #15
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	781b      	ldrb	r3, [r3, #0]
}
 8003646:	0018      	movs	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	b004      	add	sp, #16
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003658:	240f      	movs	r4, #15
 800365a:	193b      	adds	r3, r7, r4
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003660:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <RTC_ExitInitMode+0x84>)
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <RTC_ExitInitMode+0x84>)
 8003666:	2180      	movs	r1, #128	; 0x80
 8003668:	438a      	bics	r2, r1
 800366a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800366c:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <RTC_ExitInitMode+0x84>)
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2220      	movs	r2, #32
 8003672:	4013      	ands	r3, r2
 8003674:	d10d      	bne.n	8003692 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	0018      	movs	r0, r3
 800367a:	f7ff ff7f 	bl	800357c <HAL_RTC_WaitForSynchro>
 800367e:	1e03      	subs	r3, r0, #0
 8003680:	d021      	beq.n	80036c6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2229      	movs	r2, #41	; 0x29
 8003686:	2103      	movs	r1, #3
 8003688:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800368a:	193b      	adds	r3, r7, r4
 800368c:	2203      	movs	r2, #3
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	e019      	b.n	80036c6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003692:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <RTC_ExitInitMode+0x84>)
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <RTC_ExitInitMode+0x84>)
 8003698:	2120      	movs	r1, #32
 800369a:	438a      	bics	r2, r1
 800369c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7ff ff6b 	bl	800357c <HAL_RTC_WaitForSynchro>
 80036a6:	1e03      	subs	r3, r0, #0
 80036a8:	d007      	beq.n	80036ba <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2229      	movs	r2, #41	; 0x29
 80036ae:	2103      	movs	r1, #3
 80036b0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80036b2:	230f      	movs	r3, #15
 80036b4:	18fb      	adds	r3, r7, r3
 80036b6:	2203      	movs	r2, #3
 80036b8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <RTC_ExitInitMode+0x84>)
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <RTC_ExitInitMode+0x84>)
 80036c0:	2120      	movs	r1, #32
 80036c2:	430a      	orrs	r2, r1
 80036c4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80036c6:	230f      	movs	r3, #15
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	781b      	ldrb	r3, [r3, #0]
}
 80036cc:	0018      	movs	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b005      	add	sp, #20
 80036d2:	bd90      	pop	{r4, r7, pc}
 80036d4:	40002800 	.word	0x40002800

080036d8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	0002      	movs	r2, r0
 80036e0:	1dfb      	adds	r3, r7, #7
 80036e2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80036e8:	230b      	movs	r3, #11
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	1dfa      	adds	r2, r7, #7
 80036ee:	7812      	ldrb	r2, [r2, #0]
 80036f0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80036f2:	e008      	b.n	8003706 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	3301      	adds	r3, #1
 80036f8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80036fa:	220b      	movs	r2, #11
 80036fc:	18bb      	adds	r3, r7, r2
 80036fe:	18ba      	adds	r2, r7, r2
 8003700:	7812      	ldrb	r2, [r2, #0]
 8003702:	3a0a      	subs	r2, #10
 8003704:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003706:	210b      	movs	r1, #11
 8003708:	187b      	adds	r3, r7, r1
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b09      	cmp	r3, #9
 800370e:	d8f1      	bhi.n	80036f4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	b2da      	uxtb	r2, r3
 8003718:	187b      	adds	r3, r7, r1
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	4313      	orrs	r3, r2
 800371e:	b2db      	uxtb	r3, r3
}
 8003720:	0018      	movs	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	b004      	add	sp, #16
 8003726:	bd80      	pop	{r7, pc}

08003728 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	0002      	movs	r2, r0
 8003730:	1dfb      	adds	r3, r7, #7
 8003732:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003734:	1dfb      	adds	r3, r7, #7
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	b2db      	uxtb	r3, r3
 800373c:	001a      	movs	r2, r3
 800373e:	0013      	movs	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	189b      	adds	r3, r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	b2da      	uxtb	r2, r3
 800374c:	1dfb      	adds	r3, r7, #7
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	210f      	movs	r1, #15
 8003752:	400b      	ands	r3, r1
 8003754:	b2db      	uxtb	r3, r3
 8003756:	18d3      	adds	r3, r2, r3
 8003758:	b2db      	uxtb	r3, r3
}
 800375a:	0018      	movs	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	b004      	add	sp, #16
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	46bd      	mov	sp, r7
 800376e:	b002      	add	sp, #8
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e04a      	b.n	800381a <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	223d      	movs	r2, #61	; 0x3d
 8003788:	5c9b      	ldrb	r3, [r3, r2]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d107      	bne.n	80037a0 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	223c      	movs	r2, #60	; 0x3c
 8003794:	2100      	movs	r1, #0
 8003796:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	0018      	movs	r0, r3
 800379c:	f7fd feb8 	bl	8001510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	223d      	movs	r2, #61	; 0x3d
 80037a4:	2102      	movs	r1, #2
 80037a6:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3304      	adds	r3, #4
 80037b0:	0019      	movs	r1, r3
 80037b2:	0010      	movs	r0, r2
 80037b4:	f000 f8a8 	bl	8003908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2248      	movs	r2, #72	; 0x48
 80037bc:	2101      	movs	r1, #1
 80037be:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	223e      	movs	r2, #62	; 0x3e
 80037c4:	2101      	movs	r1, #1
 80037c6:	5499      	strb	r1, [r3, r2]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	223f      	movs	r2, #63	; 0x3f
 80037cc:	2101      	movs	r1, #1
 80037ce:	5499      	strb	r1, [r3, r2]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2240      	movs	r2, #64	; 0x40
 80037d4:	2101      	movs	r1, #1
 80037d6:	5499      	strb	r1, [r3, r2]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2241      	movs	r2, #65	; 0x41
 80037dc:	2101      	movs	r1, #1
 80037de:	5499      	strb	r1, [r3, r2]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2242      	movs	r2, #66	; 0x42
 80037e4:	2101      	movs	r1, #1
 80037e6:	5499      	strb	r1, [r3, r2]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2243      	movs	r2, #67	; 0x43
 80037ec:	2101      	movs	r1, #1
 80037ee:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2244      	movs	r2, #68	; 0x44
 80037f4:	2101      	movs	r1, #1
 80037f6:	5499      	strb	r1, [r3, r2]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2245      	movs	r2, #69	; 0x45
 80037fc:	2101      	movs	r1, #1
 80037fe:	5499      	strb	r1, [r3, r2]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2246      	movs	r2, #70	; 0x46
 8003804:	2101      	movs	r1, #1
 8003806:	5499      	strb	r1, [r3, r2]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2247      	movs	r2, #71	; 0x47
 800380c:	2101      	movs	r1, #1
 800380e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	223d      	movs	r2, #61	; 0x3d
 8003814:	2101      	movs	r1, #1
 8003816:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b002      	add	sp, #8
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	223d      	movs	r2, #61	; 0x3d
 8003830:	5c9b      	ldrb	r3, [r3, r2]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d001      	beq.n	800383c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e035      	b.n	80038a8 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	223d      	movs	r2, #61	; 0x3d
 8003840:	2102      	movs	r1, #2
 8003842:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a19      	ldr	r2, [pc, #100]	; (80038b0 <HAL_TIM_Base_Start+0x8c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00a      	beq.n	8003864 <HAL_TIM_Base_Start+0x40>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	2380      	movs	r3, #128	; 0x80
 8003854:	05db      	lsls	r3, r3, #23
 8003856:	429a      	cmp	r2, r3
 8003858:	d004      	beq.n	8003864 <HAL_TIM_Base_Start+0x40>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a15      	ldr	r2, [pc, #84]	; (80038b4 <HAL_TIM_Base_Start+0x90>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d116      	bne.n	8003892 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <HAL_TIM_Base_Start+0x94>)
 800386c:	4013      	ands	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b06      	cmp	r3, #6
 8003874:	d016      	beq.n	80038a4 <HAL_TIM_Base_Start+0x80>
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	025b      	lsls	r3, r3, #9
 800387c:	429a      	cmp	r2, r3
 800387e:	d011      	beq.n	80038a4 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2101      	movs	r1, #1
 800388c:	430a      	orrs	r2, r1
 800388e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003890:	e008      	b.n	80038a4 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2101      	movs	r1, #1
 800389e:	430a      	orrs	r2, r1
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	e000      	b.n	80038a6 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	0018      	movs	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b004      	add	sp, #16
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40012c00 	.word	0x40012c00
 80038b4:	40000400 	.word	0x40000400
 80038b8:	00010007 	.word	0x00010007

080038bc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	4a0d      	ldr	r2, [pc, #52]	; (8003900 <HAL_TIM_Base_Stop+0x44>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	d10d      	bne.n	80038ec <HAL_TIM_Base_Stop+0x30>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	4a0b      	ldr	r2, [pc, #44]	; (8003904 <HAL_TIM_Base_Stop+0x48>)
 80038d8:	4013      	ands	r3, r2
 80038da:	d107      	bne.n	80038ec <HAL_TIM_Base_Stop+0x30>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2101      	movs	r1, #1
 80038e8:	438a      	bics	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	223d      	movs	r2, #61	; 0x3d
 80038f0:	2101      	movs	r1, #1
 80038f2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	0018      	movs	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b002      	add	sp, #8
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	00001111 	.word	0x00001111
 8003904:	00000444 	.word	0x00000444

08003908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a30      	ldr	r2, [pc, #192]	; (80039dc <TIM_Base_SetConfig+0xd4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d008      	beq.n	8003932 <TIM_Base_SetConfig+0x2a>
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	2380      	movs	r3, #128	; 0x80
 8003924:	05db      	lsls	r3, r3, #23
 8003926:	429a      	cmp	r2, r3
 8003928:	d003      	beq.n	8003932 <TIM_Base_SetConfig+0x2a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a2c      	ldr	r2, [pc, #176]	; (80039e0 <TIM_Base_SetConfig+0xd8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d108      	bne.n	8003944 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2270      	movs	r2, #112	; 0x70
 8003936:	4393      	bics	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a25      	ldr	r2, [pc, #148]	; (80039dc <TIM_Base_SetConfig+0xd4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d014      	beq.n	8003976 <TIM_Base_SetConfig+0x6e>
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	2380      	movs	r3, #128	; 0x80
 8003950:	05db      	lsls	r3, r3, #23
 8003952:	429a      	cmp	r2, r3
 8003954:	d00f      	beq.n	8003976 <TIM_Base_SetConfig+0x6e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a21      	ldr	r2, [pc, #132]	; (80039e0 <TIM_Base_SetConfig+0xd8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d00b      	beq.n	8003976 <TIM_Base_SetConfig+0x6e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a20      	ldr	r2, [pc, #128]	; (80039e4 <TIM_Base_SetConfig+0xdc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d007      	beq.n	8003976 <TIM_Base_SetConfig+0x6e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a1f      	ldr	r2, [pc, #124]	; (80039e8 <TIM_Base_SetConfig+0xe0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d003      	beq.n	8003976 <TIM_Base_SetConfig+0x6e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1e      	ldr	r2, [pc, #120]	; (80039ec <TIM_Base_SetConfig+0xe4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d108      	bne.n	8003988 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4a1d      	ldr	r2, [pc, #116]	; (80039f0 <TIM_Base_SetConfig+0xe8>)
 800397a:	4013      	ands	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2280      	movs	r2, #128	; 0x80
 800398c:	4393      	bics	r3, r2
 800398e:	001a      	movs	r2, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <TIM_Base_SetConfig+0xd4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d007      	beq.n	80039c6 <TIM_Base_SetConfig+0xbe>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a0b      	ldr	r2, [pc, #44]	; (80039e8 <TIM_Base_SetConfig+0xe0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d003      	beq.n	80039c6 <TIM_Base_SetConfig+0xbe>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <TIM_Base_SetConfig+0xe4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d103      	bne.n	80039ce <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	615a      	str	r2, [r3, #20]
}
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b004      	add	sp, #16
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40012c00 	.word	0x40012c00
 80039e0:	40000400 	.word	0x40000400
 80039e4:	40002000 	.word	0x40002000
 80039e8:	40014400 	.word	0x40014400
 80039ec:	40014800 	.word	0x40014800
 80039f0:	fffffcff 	.word	0xfffffcff

080039f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e046      	b.n	8003a94 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2288      	movs	r2, #136	; 0x88
 8003a0a:	589b      	ldr	r3, [r3, r2]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d107      	bne.n	8003a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2284      	movs	r2, #132	; 0x84
 8003a14:	2100      	movs	r1, #0
 8003a16:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f7fd fd98 	bl	8001550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2288      	movs	r2, #136	; 0x88
 8003a24:	2124      	movs	r1, #36	; 0x24
 8003a26:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2101      	movs	r1, #1
 8003a34:	438a      	bics	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f000 f8cc 	bl	8003bd8 <UART_SetConfig>
 8003a40:	0003      	movs	r3, r0
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e024      	b.n	8003a94 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	0018      	movs	r0, r3
 8003a56:	f000 fb37 	bl	80040c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	490d      	ldr	r1, [pc, #52]	; (8003a9c <HAL_UART_Init+0xa8>)
 8003a66:	400a      	ands	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	212a      	movs	r1, #42	; 0x2a
 8003a76:	438a      	bics	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2101      	movs	r1, #1
 8003a86:	430a      	orrs	r2, r1
 8003a88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f000 fbcf 	bl	8004230 <UART_CheckIdleState>
 8003a92:	0003      	movs	r3, r0
}
 8003a94:	0018      	movs	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b002      	add	sp, #8
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	ffffb7ff 	.word	0xffffb7ff

08003aa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	; 0x28
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	1dbb      	adds	r3, r7, #6
 8003aae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2288      	movs	r2, #136	; 0x88
 8003ab4:	589b      	ldr	r3, [r3, r2]
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d000      	beq.n	8003abc <HAL_UART_Transmit+0x1c>
 8003aba:	e088      	b.n	8003bce <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_UART_Transmit+0x2a>
 8003ac2:	1dbb      	adds	r3, r7, #6
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e080      	b.n	8003bd0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	015b      	lsls	r3, r3, #5
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d109      	bne.n	8003aee <HAL_UART_Transmit+0x4e>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d105      	bne.n	8003aee <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d001      	beq.n	8003aee <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e070      	b.n	8003bd0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2290      	movs	r2, #144	; 0x90
 8003af2:	2100      	movs	r1, #0
 8003af4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2288      	movs	r2, #136	; 0x88
 8003afa:	2121      	movs	r1, #33	; 0x21
 8003afc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003afe:	f7fd ff05 	bl	800190c <HAL_GetTick>
 8003b02:	0003      	movs	r3, r0
 8003b04:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1dba      	adds	r2, r7, #6
 8003b0a:	2154      	movs	r1, #84	; 0x54
 8003b0c:	8812      	ldrh	r2, [r2, #0]
 8003b0e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1dba      	adds	r2, r7, #6
 8003b14:	2156      	movs	r1, #86	; 0x56
 8003b16:	8812      	ldrh	r2, [r2, #0]
 8003b18:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	2380      	movs	r3, #128	; 0x80
 8003b20:	015b      	lsls	r3, r3, #5
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d108      	bne.n	8003b38 <HAL_UART_Transmit+0x98>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d104      	bne.n	8003b38 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	e003      	b.n	8003b40 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b40:	e02c      	b.n	8003b9c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	0013      	movs	r3, r2
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2180      	movs	r1, #128	; 0x80
 8003b50:	f000 fbbc 	bl	80042cc <UART_WaitOnFlagUntilTimeout>
 8003b54:	1e03      	subs	r3, r0, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e039      	b.n	8003bd0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10b      	bne.n	8003b7a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	001a      	movs	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	05d2      	lsls	r2, r2, #23
 8003b6e:	0dd2      	lsrs	r2, r2, #23
 8003b70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	3302      	adds	r3, #2
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	e007      	b.n	8003b8a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	781a      	ldrb	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	3301      	adds	r3, #1
 8003b88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2256      	movs	r2, #86	; 0x56
 8003b8e:	5a9b      	ldrh	r3, [r3, r2]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b299      	uxth	r1, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2256      	movs	r2, #86	; 0x56
 8003b9a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2256      	movs	r2, #86	; 0x56
 8003ba0:	5a9b      	ldrh	r3, [r3, r2]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1cc      	bne.n	8003b42 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	0013      	movs	r3, r2
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2140      	movs	r1, #64	; 0x40
 8003bb6:	f000 fb89 	bl	80042cc <UART_WaitOnFlagUntilTimeout>
 8003bba:	1e03      	subs	r3, r0, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e006      	b.n	8003bd0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2288      	movs	r2, #136	; 0x88
 8003bc6:	2120      	movs	r1, #32
 8003bc8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e000      	b.n	8003bd0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
  }
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b008      	add	sp, #32
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd8:	b5b0      	push	{r4, r5, r7, lr}
 8003bda:	b090      	sub	sp, #64	; 0x40
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003be0:	231a      	movs	r3, #26
 8003be2:	2220      	movs	r2, #32
 8003be4:	189b      	adds	r3, r3, r2
 8003be6:	19db      	adds	r3, r3, r7
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4ac4      	ldr	r2, [pc, #784]	; (8003f1c <UART_SetConfig+0x344>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	0019      	movs	r1, r3
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c16:	430b      	orrs	r3, r1
 8003c18:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	4abf      	ldr	r2, [pc, #764]	; (8003f20 <UART_SetConfig+0x348>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	0018      	movs	r0, r3
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	68d9      	ldr	r1, [r3, #12]
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	0003      	movs	r3, r0
 8003c30:	430b      	orrs	r3, r1
 8003c32:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4ab9      	ldr	r2, [pc, #740]	; (8003f24 <UART_SetConfig+0x34c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d004      	beq.n	8003c4e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4ab4      	ldr	r2, [pc, #720]	; (8003f28 <UART_SetConfig+0x350>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	0019      	movs	r1, r3
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c60:	430b      	orrs	r3, r1
 8003c62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	220f      	movs	r2, #15
 8003c6c:	4393      	bics	r3, r2
 8003c6e:	0018      	movs	r0, r3
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	0003      	movs	r3, r0
 8003c7a:	430b      	orrs	r3, r1
 8003c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4aaa      	ldr	r2, [pc, #680]	; (8003f2c <UART_SetConfig+0x354>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d131      	bne.n	8003cec <UART_SetConfig+0x114>
 8003c88:	4ba9      	ldr	r3, [pc, #676]	; (8003f30 <UART_SetConfig+0x358>)
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d01d      	beq.n	8003cd0 <UART_SetConfig+0xf8>
 8003c94:	d823      	bhi.n	8003cde <UART_SetConfig+0x106>
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d00c      	beq.n	8003cb4 <UART_SetConfig+0xdc>
 8003c9a:	d820      	bhi.n	8003cde <UART_SetConfig+0x106>
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <UART_SetConfig+0xce>
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d00e      	beq.n	8003cc2 <UART_SetConfig+0xea>
 8003ca4:	e01b      	b.n	8003cde <UART_SetConfig+0x106>
 8003ca6:	231b      	movs	r3, #27
 8003ca8:	2220      	movs	r2, #32
 8003caa:	189b      	adds	r3, r3, r2
 8003cac:	19db      	adds	r3, r3, r7
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	e071      	b.n	8003d98 <UART_SetConfig+0x1c0>
 8003cb4:	231b      	movs	r3, #27
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	189b      	adds	r3, r3, r2
 8003cba:	19db      	adds	r3, r3, r7
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	e06a      	b.n	8003d98 <UART_SetConfig+0x1c0>
 8003cc2:	231b      	movs	r3, #27
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	189b      	adds	r3, r3, r2
 8003cc8:	19db      	adds	r3, r3, r7
 8003cca:	2204      	movs	r2, #4
 8003ccc:	701a      	strb	r2, [r3, #0]
 8003cce:	e063      	b.n	8003d98 <UART_SetConfig+0x1c0>
 8003cd0:	231b      	movs	r3, #27
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	189b      	adds	r3, r3, r2
 8003cd6:	19db      	adds	r3, r3, r7
 8003cd8:	2208      	movs	r2, #8
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	e05c      	b.n	8003d98 <UART_SetConfig+0x1c0>
 8003cde:	231b      	movs	r3, #27
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	189b      	adds	r3, r3, r2
 8003ce4:	19db      	adds	r3, r3, r7
 8003ce6:	2210      	movs	r2, #16
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	e055      	b.n	8003d98 <UART_SetConfig+0x1c0>
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a90      	ldr	r2, [pc, #576]	; (8003f34 <UART_SetConfig+0x35c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d106      	bne.n	8003d04 <UART_SetConfig+0x12c>
 8003cf6:	231b      	movs	r3, #27
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	189b      	adds	r3, r3, r2
 8003cfc:	19db      	adds	r3, r3, r7
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]
 8003d02:	e049      	b.n	8003d98 <UART_SetConfig+0x1c0>
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a86      	ldr	r2, [pc, #536]	; (8003f24 <UART_SetConfig+0x34c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d13e      	bne.n	8003d8c <UART_SetConfig+0x1b4>
 8003d0e:	4b88      	ldr	r3, [pc, #544]	; (8003f30 <UART_SetConfig+0x358>)
 8003d10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d12:	23c0      	movs	r3, #192	; 0xc0
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	4013      	ands	r3, r2
 8003d18:	22c0      	movs	r2, #192	; 0xc0
 8003d1a:	0112      	lsls	r2, r2, #4
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d027      	beq.n	8003d70 <UART_SetConfig+0x198>
 8003d20:	22c0      	movs	r2, #192	; 0xc0
 8003d22:	0112      	lsls	r2, r2, #4
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d82a      	bhi.n	8003d7e <UART_SetConfig+0x1a6>
 8003d28:	2280      	movs	r2, #128	; 0x80
 8003d2a:	0112      	lsls	r2, r2, #4
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d011      	beq.n	8003d54 <UART_SetConfig+0x17c>
 8003d30:	2280      	movs	r2, #128	; 0x80
 8003d32:	0112      	lsls	r2, r2, #4
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d822      	bhi.n	8003d7e <UART_SetConfig+0x1a6>
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d004      	beq.n	8003d46 <UART_SetConfig+0x16e>
 8003d3c:	2280      	movs	r2, #128	; 0x80
 8003d3e:	00d2      	lsls	r2, r2, #3
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00e      	beq.n	8003d62 <UART_SetConfig+0x18a>
 8003d44:	e01b      	b.n	8003d7e <UART_SetConfig+0x1a6>
 8003d46:	231b      	movs	r3, #27
 8003d48:	2220      	movs	r2, #32
 8003d4a:	189b      	adds	r3, r3, r2
 8003d4c:	19db      	adds	r3, r3, r7
 8003d4e:	2200      	movs	r2, #0
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	e021      	b.n	8003d98 <UART_SetConfig+0x1c0>
 8003d54:	231b      	movs	r3, #27
 8003d56:	2220      	movs	r2, #32
 8003d58:	189b      	adds	r3, r3, r2
 8003d5a:	19db      	adds	r3, r3, r7
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	e01a      	b.n	8003d98 <UART_SetConfig+0x1c0>
 8003d62:	231b      	movs	r3, #27
 8003d64:	2220      	movs	r2, #32
 8003d66:	189b      	adds	r3, r3, r2
 8003d68:	19db      	adds	r3, r3, r7
 8003d6a:	2204      	movs	r2, #4
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	e013      	b.n	8003d98 <UART_SetConfig+0x1c0>
 8003d70:	231b      	movs	r3, #27
 8003d72:	2220      	movs	r2, #32
 8003d74:	189b      	adds	r3, r3, r2
 8003d76:	19db      	adds	r3, r3, r7
 8003d78:	2208      	movs	r2, #8
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	e00c      	b.n	8003d98 <UART_SetConfig+0x1c0>
 8003d7e:	231b      	movs	r3, #27
 8003d80:	2220      	movs	r2, #32
 8003d82:	189b      	adds	r3, r3, r2
 8003d84:	19db      	adds	r3, r3, r7
 8003d86:	2210      	movs	r2, #16
 8003d88:	701a      	strb	r2, [r3, #0]
 8003d8a:	e005      	b.n	8003d98 <UART_SetConfig+0x1c0>
 8003d8c:	231b      	movs	r3, #27
 8003d8e:	2220      	movs	r2, #32
 8003d90:	189b      	adds	r3, r3, r2
 8003d92:	19db      	adds	r3, r3, r7
 8003d94:	2210      	movs	r2, #16
 8003d96:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a61      	ldr	r2, [pc, #388]	; (8003f24 <UART_SetConfig+0x34c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d000      	beq.n	8003da4 <UART_SetConfig+0x1cc>
 8003da2:	e092      	b.n	8003eca <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003da4:	231b      	movs	r3, #27
 8003da6:	2220      	movs	r2, #32
 8003da8:	189b      	adds	r3, r3, r2
 8003daa:	19db      	adds	r3, r3, r7
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d015      	beq.n	8003dde <UART_SetConfig+0x206>
 8003db2:	dc18      	bgt.n	8003de6 <UART_SetConfig+0x20e>
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d00d      	beq.n	8003dd4 <UART_SetConfig+0x1fc>
 8003db8:	dc15      	bgt.n	8003de6 <UART_SetConfig+0x20e>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <UART_SetConfig+0x1ec>
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d005      	beq.n	8003dce <UART_SetConfig+0x1f6>
 8003dc2:	e010      	b.n	8003de6 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc4:	f7fe fd80 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003dcc:	e014      	b.n	8003df8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dce:	4b5a      	ldr	r3, [pc, #360]	; (8003f38 <UART_SetConfig+0x360>)
 8003dd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003dd2:	e011      	b.n	8003df8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd4:	f7fe fcec 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ddc:	e00c      	b.n	8003df8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	021b      	lsls	r3, r3, #8
 8003de2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003de4:	e008      	b.n	8003df8 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003dea:	231a      	movs	r3, #26
 8003dec:	2220      	movs	r2, #32
 8003dee:	189b      	adds	r3, r3, r2
 8003df0:	19db      	adds	r3, r3, r7
 8003df2:	2201      	movs	r2, #1
 8003df4:	701a      	strb	r2, [r3, #0]
        break;
 8003df6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d100      	bne.n	8003e00 <UART_SetConfig+0x228>
 8003dfe:	e147      	b.n	8004090 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e04:	4b4d      	ldr	r3, [pc, #308]	; (8003f3c <UART_SetConfig+0x364>)
 8003e06:	0052      	lsls	r2, r2, #1
 8003e08:	5ad3      	ldrh	r3, [r2, r3]
 8003e0a:	0019      	movs	r1, r3
 8003e0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003e0e:	f7fc f983 	bl	8000118 <__udivsi3>
 8003e12:	0003      	movs	r3, r0
 8003e14:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	0013      	movs	r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	189b      	adds	r3, r3, r2
 8003e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d305      	bcc.n	8003e32 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d906      	bls.n	8003e40 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8003e32:	231a      	movs	r3, #26
 8003e34:	2220      	movs	r2, #32
 8003e36:	189b      	adds	r3, r3, r2
 8003e38:	19db      	adds	r3, r3, r7
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	e127      	b.n	8004090 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	2300      	movs	r3, #0
 8003e46:	61fb      	str	r3, [r7, #28]
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e4c:	4b3b      	ldr	r3, [pc, #236]	; (8003f3c <UART_SetConfig+0x364>)
 8003e4e:	0052      	lsls	r2, r2, #1
 8003e50:	5ad3      	ldrh	r3, [r2, r3]
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	69b8      	ldr	r0, [r7, #24]
 8003e5e:	69f9      	ldr	r1, [r7, #28]
 8003e60:	f7fc f9e6 	bl	8000230 <__aeabi_uldivmod>
 8003e64:	0002      	movs	r2, r0
 8003e66:	000b      	movs	r3, r1
 8003e68:	0e11      	lsrs	r1, r2, #24
 8003e6a:	021d      	lsls	r5, r3, #8
 8003e6c:	430d      	orrs	r5, r1
 8003e6e:	0214      	lsls	r4, r2, #8
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	085b      	lsrs	r3, r3, #1
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68b8      	ldr	r0, [r7, #8]
 8003e7e:	68f9      	ldr	r1, [r7, #12]
 8003e80:	1900      	adds	r0, r0, r4
 8003e82:	4169      	adcs	r1, r5
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	603b      	str	r3, [r7, #0]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	607b      	str	r3, [r7, #4]
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f7fc f9cd 	bl	8000230 <__aeabi_uldivmod>
 8003e96:	0002      	movs	r2, r0
 8003e98:	000b      	movs	r3, r1
 8003e9a:	0013      	movs	r3, r2
 8003e9c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea0:	23c0      	movs	r3, #192	; 0xc0
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d309      	bcc.n	8003ebc <UART_SetConfig+0x2e4>
 8003ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eaa:	2380      	movs	r3, #128	; 0x80
 8003eac:	035b      	lsls	r3, r3, #13
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d204      	bcs.n	8003ebc <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb8:	60da      	str	r2, [r3, #12]
 8003eba:	e0e9      	b.n	8004090 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8003ebc:	231a      	movs	r3, #26
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	189b      	adds	r3, r3, r2
 8003ec2:	19db      	adds	r3, r3, r7
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	e0e2      	b.n	8004090 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	69da      	ldr	r2, [r3, #28]
 8003ece:	2380      	movs	r3, #128	; 0x80
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d000      	beq.n	8003ed8 <UART_SetConfig+0x300>
 8003ed6:	e083      	b.n	8003fe0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003ed8:	231b      	movs	r3, #27
 8003eda:	2220      	movs	r2, #32
 8003edc:	189b      	adds	r3, r3, r2
 8003ede:	19db      	adds	r3, r3, r7
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d015      	beq.n	8003f12 <UART_SetConfig+0x33a>
 8003ee6:	dc2b      	bgt.n	8003f40 <UART_SetConfig+0x368>
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d00d      	beq.n	8003f08 <UART_SetConfig+0x330>
 8003eec:	dc28      	bgt.n	8003f40 <UART_SetConfig+0x368>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <UART_SetConfig+0x320>
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d005      	beq.n	8003f02 <UART_SetConfig+0x32a>
 8003ef6:	e023      	b.n	8003f40 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef8:	f7fe fce6 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 8003efc:	0003      	movs	r3, r0
 8003efe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f00:	e027      	b.n	8003f52 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f02:	4b0d      	ldr	r3, [pc, #52]	; (8003f38 <UART_SetConfig+0x360>)
 8003f04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f06:	e024      	b.n	8003f52 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f08:	f7fe fc52 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 8003f0c:	0003      	movs	r3, r0
 8003f0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f10:	e01f      	b.n	8003f52 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f12:	2380      	movs	r3, #128	; 0x80
 8003f14:	021b      	lsls	r3, r3, #8
 8003f16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f18:	e01b      	b.n	8003f52 <UART_SetConfig+0x37a>
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	cfff69f3 	.word	0xcfff69f3
 8003f20:	ffffcfff 	.word	0xffffcfff
 8003f24:	40008000 	.word	0x40008000
 8003f28:	11fff4ff 	.word	0x11fff4ff
 8003f2c:	40013800 	.word	0x40013800
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40004400 	.word	0x40004400
 8003f38:	00f42400 	.word	0x00f42400
 8003f3c:	080058a8 	.word	0x080058a8
      default:
        pclk = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003f44:	231a      	movs	r3, #26
 8003f46:	2220      	movs	r2, #32
 8003f48:	189b      	adds	r3, r3, r2
 8003f4a:	19db      	adds	r3, r3, r7
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	701a      	strb	r2, [r3, #0]
        break;
 8003f50:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d100      	bne.n	8003f5a <UART_SetConfig+0x382>
 8003f58:	e09a      	b.n	8004090 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f5e:	4b58      	ldr	r3, [pc, #352]	; (80040c0 <UART_SetConfig+0x4e8>)
 8003f60:	0052      	lsls	r2, r2, #1
 8003f62:	5ad3      	ldrh	r3, [r2, r3]
 8003f64:	0019      	movs	r1, r3
 8003f66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f68:	f7fc f8d6 	bl	8000118 <__udivsi3>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	005a      	lsls	r2, r3, #1
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	085b      	lsrs	r3, r3, #1
 8003f76:	18d2      	adds	r2, r2, r3
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	0010      	movs	r0, r2
 8003f80:	f7fc f8ca 	bl	8000118 <__udivsi3>
 8003f84:	0003      	movs	r3, r0
 8003f86:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	2b0f      	cmp	r3, #15
 8003f8c:	d921      	bls.n	8003fd2 <UART_SetConfig+0x3fa>
 8003f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	025b      	lsls	r3, r3, #9
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d21c      	bcs.n	8003fd2 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	200e      	movs	r0, #14
 8003f9e:	2420      	movs	r4, #32
 8003fa0:	1903      	adds	r3, r0, r4
 8003fa2:	19db      	adds	r3, r3, r7
 8003fa4:	210f      	movs	r1, #15
 8003fa6:	438a      	bics	r2, r1
 8003fa8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2207      	movs	r2, #7
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	b299      	uxth	r1, r3
 8003fb6:	1903      	adds	r3, r0, r4
 8003fb8:	19db      	adds	r3, r3, r7
 8003fba:	1902      	adds	r2, r0, r4
 8003fbc:	19d2      	adds	r2, r2, r7
 8003fbe:	8812      	ldrh	r2, [r2, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	1902      	adds	r2, r0, r4
 8003fca:	19d2      	adds	r2, r2, r7
 8003fcc:	8812      	ldrh	r2, [r2, #0]
 8003fce:	60da      	str	r2, [r3, #12]
 8003fd0:	e05e      	b.n	8004090 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003fd2:	231a      	movs	r3, #26
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	189b      	adds	r3, r3, r2
 8003fd8:	19db      	adds	r3, r3, r7
 8003fda:	2201      	movs	r2, #1
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	e057      	b.n	8004090 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fe0:	231b      	movs	r3, #27
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	189b      	adds	r3, r3, r2
 8003fe6:	19db      	adds	r3, r3, r7
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d015      	beq.n	800401a <UART_SetConfig+0x442>
 8003fee:	dc18      	bgt.n	8004022 <UART_SetConfig+0x44a>
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d00d      	beq.n	8004010 <UART_SetConfig+0x438>
 8003ff4:	dc15      	bgt.n	8004022 <UART_SetConfig+0x44a>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <UART_SetConfig+0x428>
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d005      	beq.n	800400a <UART_SetConfig+0x432>
 8003ffe:	e010      	b.n	8004022 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004000:	f7fe fc62 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 8004004:	0003      	movs	r3, r0
 8004006:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004008:	e014      	b.n	8004034 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800400a:	4b2e      	ldr	r3, [pc, #184]	; (80040c4 <UART_SetConfig+0x4ec>)
 800400c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800400e:	e011      	b.n	8004034 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004010:	f7fe fbce 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 8004014:	0003      	movs	r3, r0
 8004016:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004018:	e00c      	b.n	8004034 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004020:	e008      	b.n	8004034 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004026:	231a      	movs	r3, #26
 8004028:	2220      	movs	r2, #32
 800402a:	189b      	adds	r3, r3, r2
 800402c:	19db      	adds	r3, r3, r7
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]
        break;
 8004032:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004036:	2b00      	cmp	r3, #0
 8004038:	d02a      	beq.n	8004090 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800403e:	4b20      	ldr	r3, [pc, #128]	; (80040c0 <UART_SetConfig+0x4e8>)
 8004040:	0052      	lsls	r2, r2, #1
 8004042:	5ad3      	ldrh	r3, [r2, r3]
 8004044:	0019      	movs	r1, r3
 8004046:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004048:	f7fc f866 	bl	8000118 <__udivsi3>
 800404c:	0003      	movs	r3, r0
 800404e:	001a      	movs	r2, r3
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	085b      	lsrs	r3, r3, #1
 8004056:	18d2      	adds	r2, r2, r3
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	0019      	movs	r1, r3
 800405e:	0010      	movs	r0, r2
 8004060:	f7fc f85a 	bl	8000118 <__udivsi3>
 8004064:	0003      	movs	r3, r0
 8004066:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406a:	2b0f      	cmp	r3, #15
 800406c:	d90a      	bls.n	8004084 <UART_SetConfig+0x4ac>
 800406e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004070:	2380      	movs	r3, #128	; 0x80
 8004072:	025b      	lsls	r3, r3, #9
 8004074:	429a      	cmp	r2, r3
 8004076:	d205      	bcs.n	8004084 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	b29a      	uxth	r2, r3
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	e005      	b.n	8004090 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004084:	231a      	movs	r3, #26
 8004086:	2220      	movs	r2, #32
 8004088:	189b      	adds	r3, r3, r2
 800408a:	19db      	adds	r3, r3, r7
 800408c:	2201      	movs	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	226a      	movs	r2, #106	; 0x6a
 8004094:	2101      	movs	r1, #1
 8004096:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	2268      	movs	r2, #104	; 0x68
 800409c:	2101      	movs	r1, #1
 800409e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	2200      	movs	r2, #0
 80040a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	2200      	movs	r2, #0
 80040aa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80040ac:	231a      	movs	r3, #26
 80040ae:	2220      	movs	r2, #32
 80040b0:	189b      	adds	r3, r3, r2
 80040b2:	19db      	adds	r3, r3, r7
 80040b4:	781b      	ldrb	r3, [r3, #0]
}
 80040b6:	0018      	movs	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b010      	add	sp, #64	; 0x40
 80040bc:	bdb0      	pop	{r4, r5, r7, pc}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	080058a8 	.word	0x080058a8
 80040c4:	00f42400 	.word	0x00f42400

080040c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	2201      	movs	r2, #1
 80040d6:	4013      	ands	r3, r2
 80040d8:	d00b      	beq.n	80040f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4a4a      	ldr	r2, [pc, #296]	; (800420c <UART_AdvFeatureConfig+0x144>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	0019      	movs	r1, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f6:	2202      	movs	r2, #2
 80040f8:	4013      	ands	r3, r2
 80040fa:	d00b      	beq.n	8004114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4a43      	ldr	r2, [pc, #268]	; (8004210 <UART_AdvFeatureConfig+0x148>)
 8004104:	4013      	ands	r3, r2
 8004106:	0019      	movs	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004118:	2204      	movs	r2, #4
 800411a:	4013      	ands	r3, r2
 800411c:	d00b      	beq.n	8004136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4a3b      	ldr	r2, [pc, #236]	; (8004214 <UART_AdvFeatureConfig+0x14c>)
 8004126:	4013      	ands	r3, r2
 8004128:	0019      	movs	r1, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	2208      	movs	r2, #8
 800413c:	4013      	ands	r3, r2
 800413e:	d00b      	beq.n	8004158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4a34      	ldr	r2, [pc, #208]	; (8004218 <UART_AdvFeatureConfig+0x150>)
 8004148:	4013      	ands	r3, r2
 800414a:	0019      	movs	r1, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415c:	2210      	movs	r2, #16
 800415e:	4013      	ands	r3, r2
 8004160:	d00b      	beq.n	800417a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	4a2c      	ldr	r2, [pc, #176]	; (800421c <UART_AdvFeatureConfig+0x154>)
 800416a:	4013      	ands	r3, r2
 800416c:	0019      	movs	r1, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	2220      	movs	r2, #32
 8004180:	4013      	ands	r3, r2
 8004182:	d00b      	beq.n	800419c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	4a25      	ldr	r2, [pc, #148]	; (8004220 <UART_AdvFeatureConfig+0x158>)
 800418c:	4013      	ands	r3, r2
 800418e:	0019      	movs	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	2240      	movs	r2, #64	; 0x40
 80041a2:	4013      	ands	r3, r2
 80041a4:	d01d      	beq.n	80041e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <UART_AdvFeatureConfig+0x15c>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	0019      	movs	r1, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041c2:	2380      	movs	r3, #128	; 0x80
 80041c4:	035b      	lsls	r3, r3, #13
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d10b      	bne.n	80041e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4a15      	ldr	r2, [pc, #84]	; (8004228 <UART_AdvFeatureConfig+0x160>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	0019      	movs	r1, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	2280      	movs	r2, #128	; 0x80
 80041e8:	4013      	ands	r3, r2
 80041ea:	d00b      	beq.n	8004204 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	4a0e      	ldr	r2, [pc, #56]	; (800422c <UART_AdvFeatureConfig+0x164>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	0019      	movs	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	605a      	str	r2, [r3, #4]
  }
}
 8004204:	46c0      	nop			; (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	b002      	add	sp, #8
 800420a:	bd80      	pop	{r7, pc}
 800420c:	fffdffff 	.word	0xfffdffff
 8004210:	fffeffff 	.word	0xfffeffff
 8004214:	fffbffff 	.word	0xfffbffff
 8004218:	ffff7fff 	.word	0xffff7fff
 800421c:	ffffefff 	.word	0xffffefff
 8004220:	ffffdfff 	.word	0xffffdfff
 8004224:	ffefffff 	.word	0xffefffff
 8004228:	ff9fffff 	.word	0xff9fffff
 800422c:	fff7ffff 	.word	0xfff7ffff

08004230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af02      	add	r7, sp, #8
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2290      	movs	r2, #144	; 0x90
 800423c:	2100      	movs	r1, #0
 800423e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004240:	f7fd fb64 	bl	800190c <HAL_GetTick>
 8004244:	0003      	movs	r3, r0
 8004246:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2208      	movs	r2, #8
 8004250:	4013      	ands	r3, r2
 8004252:	2b08      	cmp	r3, #8
 8004254:	d10c      	bne.n	8004270 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2280      	movs	r2, #128	; 0x80
 800425a:	0391      	lsls	r1, r2, #14
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4a1a      	ldr	r2, [pc, #104]	; (80042c8 <UART_CheckIdleState+0x98>)
 8004260:	9200      	str	r2, [sp, #0]
 8004262:	2200      	movs	r2, #0
 8004264:	f000 f832 	bl	80042cc <UART_WaitOnFlagUntilTimeout>
 8004268:	1e03      	subs	r3, r0, #0
 800426a:	d001      	beq.n	8004270 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e026      	b.n	80042be <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2204      	movs	r2, #4
 8004278:	4013      	ands	r3, r2
 800427a:	2b04      	cmp	r3, #4
 800427c:	d10c      	bne.n	8004298 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2280      	movs	r2, #128	; 0x80
 8004282:	03d1      	lsls	r1, r2, #15
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4a10      	ldr	r2, [pc, #64]	; (80042c8 <UART_CheckIdleState+0x98>)
 8004288:	9200      	str	r2, [sp, #0]
 800428a:	2200      	movs	r2, #0
 800428c:	f000 f81e 	bl	80042cc <UART_WaitOnFlagUntilTimeout>
 8004290:	1e03      	subs	r3, r0, #0
 8004292:	d001      	beq.n	8004298 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e012      	b.n	80042be <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2288      	movs	r2, #136	; 0x88
 800429c:	2120      	movs	r1, #32
 800429e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	228c      	movs	r2, #140	; 0x8c
 80042a4:	2120      	movs	r1, #32
 80042a6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2284      	movs	r2, #132	; 0x84
 80042b8:	2100      	movs	r1, #0
 80042ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	0018      	movs	r0, r3
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b004      	add	sp, #16
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	01ffffff 	.word	0x01ffffff

080042cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b094      	sub	sp, #80	; 0x50
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	1dfb      	adds	r3, r7, #7
 80042da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042dc:	e0a7      	b.n	800442e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042e0:	3301      	adds	r3, #1
 80042e2:	d100      	bne.n	80042e6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80042e4:	e0a3      	b.n	800442e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e6:	f7fd fb11 	bl	800190c <HAL_GetTick>
 80042ea:	0002      	movs	r2, r0
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d302      	bcc.n	80042fc <UART_WaitOnFlagUntilTimeout+0x30>
 80042f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d13f      	bne.n	800437c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004304:	647b      	str	r3, [r7, #68]	; 0x44
 8004306:	2301      	movs	r3, #1
 8004308:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	f383 8810 	msr	PRIMASK, r3
}
 8004310:	46c0      	nop			; (mov r8, r8)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	494e      	ldr	r1, [pc, #312]	; (8004458 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800431e:	400a      	ands	r2, r1
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004324:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	f383 8810 	msr	PRIMASK, r3
}
 800432c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800432e:	f3ef 8310 	mrs	r3, PRIMASK
 8004332:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004336:	643b      	str	r3, [r7, #64]	; 0x40
 8004338:	2301      	movs	r3, #1
 800433a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433e:	f383 8810 	msr	PRIMASK, r3
}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2101      	movs	r1, #1
 8004350:	438a      	bics	r2, r1
 8004352:	609a      	str	r2, [r3, #8]
 8004354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004356:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800435a:	f383 8810 	msr	PRIMASK, r3
}
 800435e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2288      	movs	r2, #136	; 0x88
 8004364:	2120      	movs	r1, #32
 8004366:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	228c      	movs	r2, #140	; 0x8c
 800436c:	2120      	movs	r1, #32
 800436e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2284      	movs	r2, #132	; 0x84
 8004374:	2100      	movs	r1, #0
 8004376:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e069      	b.n	8004450 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2204      	movs	r2, #4
 8004384:	4013      	ands	r3, r2
 8004386:	d052      	beq.n	800442e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69da      	ldr	r2, [r3, #28]
 800438e:	2380      	movs	r3, #128	; 0x80
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	401a      	ands	r2, r3
 8004394:	2380      	movs	r3, #128	; 0x80
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	429a      	cmp	r2, r3
 800439a:	d148      	bne.n	800442e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2280      	movs	r2, #128	; 0x80
 80043a2:	0112      	lsls	r2, r2, #4
 80043a4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a6:	f3ef 8310 	mrs	r3, PRIMASK
 80043aa:	613b      	str	r3, [r7, #16]
  return(result);
 80043ac:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b0:	2301      	movs	r3, #1
 80043b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f383 8810 	msr	PRIMASK, r3
}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4924      	ldr	r1, [pc, #144]	; (8004458 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80043c8:	400a      	ands	r2, r1
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	f383 8810 	msr	PRIMASK, r3
}
 80043d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d8:	f3ef 8310 	mrs	r3, PRIMASK
 80043dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80043de:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80043e2:	2301      	movs	r3, #1
 80043e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	f383 8810 	msr	PRIMASK, r3
}
 80043ec:	46c0      	nop			; (mov r8, r8)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2101      	movs	r1, #1
 80043fa:	438a      	bics	r2, r1
 80043fc:	609a      	str	r2, [r3, #8]
 80043fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	f383 8810 	msr	PRIMASK, r3
}
 8004408:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2288      	movs	r2, #136	; 0x88
 800440e:	2120      	movs	r1, #32
 8004410:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	228c      	movs	r2, #140	; 0x8c
 8004416:	2120      	movs	r1, #32
 8004418:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2290      	movs	r2, #144	; 0x90
 800441e:	2120      	movs	r1, #32
 8004420:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2284      	movs	r2, #132	; 0x84
 8004426:	2100      	movs	r1, #0
 8004428:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e010      	b.n	8004450 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	4013      	ands	r3, r2
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	425a      	negs	r2, r3
 800443e:	4153      	adcs	r3, r2
 8004440:	b2db      	uxtb	r3, r3
 8004442:	001a      	movs	r2, r3
 8004444:	1dfb      	adds	r3, r7, #7
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d100      	bne.n	800444e <UART_WaitOnFlagUntilTimeout+0x182>
 800444c:	e747      	b.n	80042de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	0018      	movs	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	b014      	add	sp, #80	; 0x50
 8004456:	bd80      	pop	{r7, pc}
 8004458:	fffffe5f 	.word	0xfffffe5f

0800445c <__errno>:
 800445c:	4b01      	ldr	r3, [pc, #4]	; (8004464 <__errno+0x8>)
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	4770      	bx	lr
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	20000044 	.word	0x20000044

08004468 <__libc_init_array>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	2600      	movs	r6, #0
 800446c:	4d0c      	ldr	r5, [pc, #48]	; (80044a0 <__libc_init_array+0x38>)
 800446e:	4c0d      	ldr	r4, [pc, #52]	; (80044a4 <__libc_init_array+0x3c>)
 8004470:	1b64      	subs	r4, r4, r5
 8004472:	10a4      	asrs	r4, r4, #2
 8004474:	42a6      	cmp	r6, r4
 8004476:	d109      	bne.n	800448c <__libc_init_array+0x24>
 8004478:	2600      	movs	r6, #0
 800447a:	f000 fff9 	bl	8005470 <_init>
 800447e:	4d0a      	ldr	r5, [pc, #40]	; (80044a8 <__libc_init_array+0x40>)
 8004480:	4c0a      	ldr	r4, [pc, #40]	; (80044ac <__libc_init_array+0x44>)
 8004482:	1b64      	subs	r4, r4, r5
 8004484:	10a4      	asrs	r4, r4, #2
 8004486:	42a6      	cmp	r6, r4
 8004488:	d105      	bne.n	8004496 <__libc_init_array+0x2e>
 800448a:	bd70      	pop	{r4, r5, r6, pc}
 800448c:	00b3      	lsls	r3, r6, #2
 800448e:	58eb      	ldr	r3, [r5, r3]
 8004490:	4798      	blx	r3
 8004492:	3601      	adds	r6, #1
 8004494:	e7ee      	b.n	8004474 <__libc_init_array+0xc>
 8004496:	00b3      	lsls	r3, r6, #2
 8004498:	58eb      	ldr	r3, [r5, r3]
 800449a:	4798      	blx	r3
 800449c:	3601      	adds	r6, #1
 800449e:	e7f2      	b.n	8004486 <__libc_init_array+0x1e>
 80044a0:	08005960 	.word	0x08005960
 80044a4:	08005960 	.word	0x08005960
 80044a8:	08005960 	.word	0x08005960
 80044ac:	08005964 	.word	0x08005964

080044b0 <memset>:
 80044b0:	0003      	movs	r3, r0
 80044b2:	1882      	adds	r2, r0, r2
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d100      	bne.n	80044ba <memset+0xa>
 80044b8:	4770      	bx	lr
 80044ba:	7019      	strb	r1, [r3, #0]
 80044bc:	3301      	adds	r3, #1
 80044be:	e7f9      	b.n	80044b4 <memset+0x4>

080044c0 <iprintf>:
 80044c0:	b40f      	push	{r0, r1, r2, r3}
 80044c2:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <iprintf+0x30>)
 80044c4:	b513      	push	{r0, r1, r4, lr}
 80044c6:	681c      	ldr	r4, [r3, #0]
 80044c8:	2c00      	cmp	r4, #0
 80044ca:	d005      	beq.n	80044d8 <iprintf+0x18>
 80044cc:	69a3      	ldr	r3, [r4, #24]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d102      	bne.n	80044d8 <iprintf+0x18>
 80044d2:	0020      	movs	r0, r4
 80044d4:	f000 f870 	bl	80045b8 <__sinit>
 80044d8:	ab05      	add	r3, sp, #20
 80044da:	0020      	movs	r0, r4
 80044dc:	9a04      	ldr	r2, [sp, #16]
 80044de:	68a1      	ldr	r1, [r4, #8]
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	f000 f9cd 	bl	8004880 <_vfiprintf_r>
 80044e6:	bc16      	pop	{r1, r2, r4}
 80044e8:	bc08      	pop	{r3}
 80044ea:	b004      	add	sp, #16
 80044ec:	4718      	bx	r3
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	20000044 	.word	0x20000044

080044f4 <std>:
 80044f4:	2300      	movs	r3, #0
 80044f6:	b510      	push	{r4, lr}
 80044f8:	0004      	movs	r4, r0
 80044fa:	6003      	str	r3, [r0, #0]
 80044fc:	6043      	str	r3, [r0, #4]
 80044fe:	6083      	str	r3, [r0, #8]
 8004500:	8181      	strh	r1, [r0, #12]
 8004502:	6643      	str	r3, [r0, #100]	; 0x64
 8004504:	0019      	movs	r1, r3
 8004506:	81c2      	strh	r2, [r0, #14]
 8004508:	6103      	str	r3, [r0, #16]
 800450a:	6143      	str	r3, [r0, #20]
 800450c:	6183      	str	r3, [r0, #24]
 800450e:	2208      	movs	r2, #8
 8004510:	305c      	adds	r0, #92	; 0x5c
 8004512:	f7ff ffcd 	bl	80044b0 <memset>
 8004516:	4b05      	ldr	r3, [pc, #20]	; (800452c <std+0x38>)
 8004518:	6224      	str	r4, [r4, #32]
 800451a:	6263      	str	r3, [r4, #36]	; 0x24
 800451c:	4b04      	ldr	r3, [pc, #16]	; (8004530 <std+0x3c>)
 800451e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004520:	4b04      	ldr	r3, [pc, #16]	; (8004534 <std+0x40>)
 8004522:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004524:	4b04      	ldr	r3, [pc, #16]	; (8004538 <std+0x44>)
 8004526:	6323      	str	r3, [r4, #48]	; 0x30
 8004528:	bd10      	pop	{r4, pc}
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	08004e1d 	.word	0x08004e1d
 8004530:	08004e45 	.word	0x08004e45
 8004534:	08004e7d 	.word	0x08004e7d
 8004538:	08004ea9 	.word	0x08004ea9

0800453c <_cleanup_r>:
 800453c:	b510      	push	{r4, lr}
 800453e:	4902      	ldr	r1, [pc, #8]	; (8004548 <_cleanup_r+0xc>)
 8004540:	f000 f8ba 	bl	80046b8 <_fwalk_reent>
 8004544:	bd10      	pop	{r4, pc}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	080051b5 	.word	0x080051b5

0800454c <__sfmoreglue>:
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	2568      	movs	r5, #104	; 0x68
 8004550:	1e4a      	subs	r2, r1, #1
 8004552:	4355      	muls	r5, r2
 8004554:	000e      	movs	r6, r1
 8004556:	0029      	movs	r1, r5
 8004558:	3174      	adds	r1, #116	; 0x74
 800455a:	f000 f8f3 	bl	8004744 <_malloc_r>
 800455e:	1e04      	subs	r4, r0, #0
 8004560:	d008      	beq.n	8004574 <__sfmoreglue+0x28>
 8004562:	2100      	movs	r1, #0
 8004564:	002a      	movs	r2, r5
 8004566:	6001      	str	r1, [r0, #0]
 8004568:	6046      	str	r6, [r0, #4]
 800456a:	300c      	adds	r0, #12
 800456c:	60a0      	str	r0, [r4, #8]
 800456e:	3268      	adds	r2, #104	; 0x68
 8004570:	f7ff ff9e 	bl	80044b0 <memset>
 8004574:	0020      	movs	r0, r4
 8004576:	bd70      	pop	{r4, r5, r6, pc}

08004578 <__sfp_lock_acquire>:
 8004578:	b510      	push	{r4, lr}
 800457a:	4802      	ldr	r0, [pc, #8]	; (8004584 <__sfp_lock_acquire+0xc>)
 800457c:	f000 f8bd 	bl	80046fa <__retarget_lock_acquire_recursive>
 8004580:	bd10      	pop	{r4, pc}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	2000023d 	.word	0x2000023d

08004588 <__sfp_lock_release>:
 8004588:	b510      	push	{r4, lr}
 800458a:	4802      	ldr	r0, [pc, #8]	; (8004594 <__sfp_lock_release+0xc>)
 800458c:	f000 f8b6 	bl	80046fc <__retarget_lock_release_recursive>
 8004590:	bd10      	pop	{r4, pc}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	2000023d 	.word	0x2000023d

08004598 <__sinit_lock_acquire>:
 8004598:	b510      	push	{r4, lr}
 800459a:	4802      	ldr	r0, [pc, #8]	; (80045a4 <__sinit_lock_acquire+0xc>)
 800459c:	f000 f8ad 	bl	80046fa <__retarget_lock_acquire_recursive>
 80045a0:	bd10      	pop	{r4, pc}
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	2000023e 	.word	0x2000023e

080045a8 <__sinit_lock_release>:
 80045a8:	b510      	push	{r4, lr}
 80045aa:	4802      	ldr	r0, [pc, #8]	; (80045b4 <__sinit_lock_release+0xc>)
 80045ac:	f000 f8a6 	bl	80046fc <__retarget_lock_release_recursive>
 80045b0:	bd10      	pop	{r4, pc}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	2000023e 	.word	0x2000023e

080045b8 <__sinit>:
 80045b8:	b513      	push	{r0, r1, r4, lr}
 80045ba:	0004      	movs	r4, r0
 80045bc:	f7ff ffec 	bl	8004598 <__sinit_lock_acquire>
 80045c0:	69a3      	ldr	r3, [r4, #24]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <__sinit+0x14>
 80045c6:	f7ff ffef 	bl	80045a8 <__sinit_lock_release>
 80045ca:	bd13      	pop	{r0, r1, r4, pc}
 80045cc:	64a3      	str	r3, [r4, #72]	; 0x48
 80045ce:	64e3      	str	r3, [r4, #76]	; 0x4c
 80045d0:	6523      	str	r3, [r4, #80]	; 0x50
 80045d2:	4b13      	ldr	r3, [pc, #76]	; (8004620 <__sinit+0x68>)
 80045d4:	4a13      	ldr	r2, [pc, #76]	; (8004624 <__sinit+0x6c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	42a3      	cmp	r3, r4
 80045de:	d101      	bne.n	80045e4 <__sinit+0x2c>
 80045e0:	2301      	movs	r3, #1
 80045e2:	61a3      	str	r3, [r4, #24]
 80045e4:	0020      	movs	r0, r4
 80045e6:	f000 f81f 	bl	8004628 <__sfp>
 80045ea:	6060      	str	r0, [r4, #4]
 80045ec:	0020      	movs	r0, r4
 80045ee:	f000 f81b 	bl	8004628 <__sfp>
 80045f2:	60a0      	str	r0, [r4, #8]
 80045f4:	0020      	movs	r0, r4
 80045f6:	f000 f817 	bl	8004628 <__sfp>
 80045fa:	2200      	movs	r2, #0
 80045fc:	2104      	movs	r1, #4
 80045fe:	60e0      	str	r0, [r4, #12]
 8004600:	6860      	ldr	r0, [r4, #4]
 8004602:	f7ff ff77 	bl	80044f4 <std>
 8004606:	2201      	movs	r2, #1
 8004608:	2109      	movs	r1, #9
 800460a:	68a0      	ldr	r0, [r4, #8]
 800460c:	f7ff ff72 	bl	80044f4 <std>
 8004610:	2202      	movs	r2, #2
 8004612:	2112      	movs	r1, #18
 8004614:	68e0      	ldr	r0, [r4, #12]
 8004616:	f7ff ff6d 	bl	80044f4 <std>
 800461a:	2301      	movs	r3, #1
 800461c:	61a3      	str	r3, [r4, #24]
 800461e:	e7d2      	b.n	80045c6 <__sinit+0xe>
 8004620:	080058c0 	.word	0x080058c0
 8004624:	0800453d 	.word	0x0800453d

08004628 <__sfp>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	0007      	movs	r7, r0
 800462c:	f7ff ffa4 	bl	8004578 <__sfp_lock_acquire>
 8004630:	4b1f      	ldr	r3, [pc, #124]	; (80046b0 <__sfp+0x88>)
 8004632:	681e      	ldr	r6, [r3, #0]
 8004634:	69b3      	ldr	r3, [r6, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d102      	bne.n	8004640 <__sfp+0x18>
 800463a:	0030      	movs	r0, r6
 800463c:	f7ff ffbc 	bl	80045b8 <__sinit>
 8004640:	3648      	adds	r6, #72	; 0x48
 8004642:	68b4      	ldr	r4, [r6, #8]
 8004644:	6873      	ldr	r3, [r6, #4]
 8004646:	3b01      	subs	r3, #1
 8004648:	d504      	bpl.n	8004654 <__sfp+0x2c>
 800464a:	6833      	ldr	r3, [r6, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d022      	beq.n	8004696 <__sfp+0x6e>
 8004650:	6836      	ldr	r6, [r6, #0]
 8004652:	e7f6      	b.n	8004642 <__sfp+0x1a>
 8004654:	220c      	movs	r2, #12
 8004656:	5ea5      	ldrsh	r5, [r4, r2]
 8004658:	2d00      	cmp	r5, #0
 800465a:	d11a      	bne.n	8004692 <__sfp+0x6a>
 800465c:	0020      	movs	r0, r4
 800465e:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <__sfp+0x8c>)
 8004660:	3058      	adds	r0, #88	; 0x58
 8004662:	60e3      	str	r3, [r4, #12]
 8004664:	6665      	str	r5, [r4, #100]	; 0x64
 8004666:	f000 f847 	bl	80046f8 <__retarget_lock_init_recursive>
 800466a:	f7ff ff8d 	bl	8004588 <__sfp_lock_release>
 800466e:	0020      	movs	r0, r4
 8004670:	2208      	movs	r2, #8
 8004672:	0029      	movs	r1, r5
 8004674:	6025      	str	r5, [r4, #0]
 8004676:	60a5      	str	r5, [r4, #8]
 8004678:	6065      	str	r5, [r4, #4]
 800467a:	6125      	str	r5, [r4, #16]
 800467c:	6165      	str	r5, [r4, #20]
 800467e:	61a5      	str	r5, [r4, #24]
 8004680:	305c      	adds	r0, #92	; 0x5c
 8004682:	f7ff ff15 	bl	80044b0 <memset>
 8004686:	6365      	str	r5, [r4, #52]	; 0x34
 8004688:	63a5      	str	r5, [r4, #56]	; 0x38
 800468a:	64a5      	str	r5, [r4, #72]	; 0x48
 800468c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800468e:	0020      	movs	r0, r4
 8004690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004692:	3468      	adds	r4, #104	; 0x68
 8004694:	e7d7      	b.n	8004646 <__sfp+0x1e>
 8004696:	2104      	movs	r1, #4
 8004698:	0038      	movs	r0, r7
 800469a:	f7ff ff57 	bl	800454c <__sfmoreglue>
 800469e:	1e04      	subs	r4, r0, #0
 80046a0:	6030      	str	r0, [r6, #0]
 80046a2:	d1d5      	bne.n	8004650 <__sfp+0x28>
 80046a4:	f7ff ff70 	bl	8004588 <__sfp_lock_release>
 80046a8:	230c      	movs	r3, #12
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	e7ef      	b.n	800468e <__sfp+0x66>
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	080058c0 	.word	0x080058c0
 80046b4:	ffff0001 	.word	0xffff0001

080046b8 <_fwalk_reent>:
 80046b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ba:	0004      	movs	r4, r0
 80046bc:	0006      	movs	r6, r0
 80046be:	2700      	movs	r7, #0
 80046c0:	9101      	str	r1, [sp, #4]
 80046c2:	3448      	adds	r4, #72	; 0x48
 80046c4:	6863      	ldr	r3, [r4, #4]
 80046c6:	68a5      	ldr	r5, [r4, #8]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	9b00      	ldr	r3, [sp, #0]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	d504      	bpl.n	80046dc <_fwalk_reent+0x24>
 80046d2:	6824      	ldr	r4, [r4, #0]
 80046d4:	2c00      	cmp	r4, #0
 80046d6:	d1f5      	bne.n	80046c4 <_fwalk_reent+0xc>
 80046d8:	0038      	movs	r0, r7
 80046da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046dc:	89ab      	ldrh	r3, [r5, #12]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d908      	bls.n	80046f4 <_fwalk_reent+0x3c>
 80046e2:	220e      	movs	r2, #14
 80046e4:	5eab      	ldrsh	r3, [r5, r2]
 80046e6:	3301      	adds	r3, #1
 80046e8:	d004      	beq.n	80046f4 <_fwalk_reent+0x3c>
 80046ea:	0029      	movs	r1, r5
 80046ec:	0030      	movs	r0, r6
 80046ee:	9b01      	ldr	r3, [sp, #4]
 80046f0:	4798      	blx	r3
 80046f2:	4307      	orrs	r7, r0
 80046f4:	3568      	adds	r5, #104	; 0x68
 80046f6:	e7e8      	b.n	80046ca <_fwalk_reent+0x12>

080046f8 <__retarget_lock_init_recursive>:
 80046f8:	4770      	bx	lr

080046fa <__retarget_lock_acquire_recursive>:
 80046fa:	4770      	bx	lr

080046fc <__retarget_lock_release_recursive>:
 80046fc:	4770      	bx	lr
	...

08004700 <sbrk_aligned>:
 8004700:	b570      	push	{r4, r5, r6, lr}
 8004702:	4e0f      	ldr	r6, [pc, #60]	; (8004740 <sbrk_aligned+0x40>)
 8004704:	000d      	movs	r5, r1
 8004706:	6831      	ldr	r1, [r6, #0]
 8004708:	0004      	movs	r4, r0
 800470a:	2900      	cmp	r1, #0
 800470c:	d102      	bne.n	8004714 <sbrk_aligned+0x14>
 800470e:	f000 fb73 	bl	8004df8 <_sbrk_r>
 8004712:	6030      	str	r0, [r6, #0]
 8004714:	0029      	movs	r1, r5
 8004716:	0020      	movs	r0, r4
 8004718:	f000 fb6e 	bl	8004df8 <_sbrk_r>
 800471c:	1c43      	adds	r3, r0, #1
 800471e:	d00a      	beq.n	8004736 <sbrk_aligned+0x36>
 8004720:	2303      	movs	r3, #3
 8004722:	1cc5      	adds	r5, r0, #3
 8004724:	439d      	bics	r5, r3
 8004726:	42a8      	cmp	r0, r5
 8004728:	d007      	beq.n	800473a <sbrk_aligned+0x3a>
 800472a:	1a29      	subs	r1, r5, r0
 800472c:	0020      	movs	r0, r4
 800472e:	f000 fb63 	bl	8004df8 <_sbrk_r>
 8004732:	1c43      	adds	r3, r0, #1
 8004734:	d101      	bne.n	800473a <sbrk_aligned+0x3a>
 8004736:	2501      	movs	r5, #1
 8004738:	426d      	negs	r5, r5
 800473a:	0028      	movs	r0, r5
 800473c:	bd70      	pop	{r4, r5, r6, pc}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	20000244 	.word	0x20000244

08004744 <_malloc_r>:
 8004744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004746:	2203      	movs	r2, #3
 8004748:	1ccb      	adds	r3, r1, #3
 800474a:	4393      	bics	r3, r2
 800474c:	3308      	adds	r3, #8
 800474e:	0006      	movs	r6, r0
 8004750:	001f      	movs	r7, r3
 8004752:	2b0c      	cmp	r3, #12
 8004754:	d232      	bcs.n	80047bc <_malloc_r+0x78>
 8004756:	270c      	movs	r7, #12
 8004758:	42b9      	cmp	r1, r7
 800475a:	d831      	bhi.n	80047c0 <_malloc_r+0x7c>
 800475c:	0030      	movs	r0, r6
 800475e:	f000 fdf5 	bl	800534c <__malloc_lock>
 8004762:	4d32      	ldr	r5, [pc, #200]	; (800482c <_malloc_r+0xe8>)
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	001c      	movs	r4, r3
 8004768:	2c00      	cmp	r4, #0
 800476a:	d12e      	bne.n	80047ca <_malloc_r+0x86>
 800476c:	0039      	movs	r1, r7
 800476e:	0030      	movs	r0, r6
 8004770:	f7ff ffc6 	bl	8004700 <sbrk_aligned>
 8004774:	0004      	movs	r4, r0
 8004776:	1c43      	adds	r3, r0, #1
 8004778:	d11e      	bne.n	80047b8 <_malloc_r+0x74>
 800477a:	682c      	ldr	r4, [r5, #0]
 800477c:	0025      	movs	r5, r4
 800477e:	2d00      	cmp	r5, #0
 8004780:	d14a      	bne.n	8004818 <_malloc_r+0xd4>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	0029      	movs	r1, r5
 8004786:	18e3      	adds	r3, r4, r3
 8004788:	0030      	movs	r0, r6
 800478a:	9301      	str	r3, [sp, #4]
 800478c:	f000 fb34 	bl	8004df8 <_sbrk_r>
 8004790:	9b01      	ldr	r3, [sp, #4]
 8004792:	4283      	cmp	r3, r0
 8004794:	d143      	bne.n	800481e <_malloc_r+0xda>
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	3703      	adds	r7, #3
 800479a:	1aff      	subs	r7, r7, r3
 800479c:	2303      	movs	r3, #3
 800479e:	439f      	bics	r7, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	2f0c      	cmp	r7, #12
 80047a4:	d200      	bcs.n	80047a8 <_malloc_r+0x64>
 80047a6:	270c      	movs	r7, #12
 80047a8:	0039      	movs	r1, r7
 80047aa:	0030      	movs	r0, r6
 80047ac:	f7ff ffa8 	bl	8004700 <sbrk_aligned>
 80047b0:	1c43      	adds	r3, r0, #1
 80047b2:	d034      	beq.n	800481e <_malloc_r+0xda>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	19df      	adds	r7, r3, r7
 80047b8:	6027      	str	r7, [r4, #0]
 80047ba:	e013      	b.n	80047e4 <_malloc_r+0xa0>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	dacb      	bge.n	8004758 <_malloc_r+0x14>
 80047c0:	230c      	movs	r3, #12
 80047c2:	2500      	movs	r5, #0
 80047c4:	6033      	str	r3, [r6, #0]
 80047c6:	0028      	movs	r0, r5
 80047c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047ca:	6822      	ldr	r2, [r4, #0]
 80047cc:	1bd1      	subs	r1, r2, r7
 80047ce:	d420      	bmi.n	8004812 <_malloc_r+0xce>
 80047d0:	290b      	cmp	r1, #11
 80047d2:	d917      	bls.n	8004804 <_malloc_r+0xc0>
 80047d4:	19e2      	adds	r2, r4, r7
 80047d6:	6027      	str	r7, [r4, #0]
 80047d8:	42a3      	cmp	r3, r4
 80047da:	d111      	bne.n	8004800 <_malloc_r+0xbc>
 80047dc:	602a      	str	r2, [r5, #0]
 80047de:	6863      	ldr	r3, [r4, #4]
 80047e0:	6011      	str	r1, [r2, #0]
 80047e2:	6053      	str	r3, [r2, #4]
 80047e4:	0030      	movs	r0, r6
 80047e6:	0025      	movs	r5, r4
 80047e8:	f000 fdb8 	bl	800535c <__malloc_unlock>
 80047ec:	2207      	movs	r2, #7
 80047ee:	350b      	adds	r5, #11
 80047f0:	1d23      	adds	r3, r4, #4
 80047f2:	4395      	bics	r5, r2
 80047f4:	1aea      	subs	r2, r5, r3
 80047f6:	429d      	cmp	r5, r3
 80047f8:	d0e5      	beq.n	80047c6 <_malloc_r+0x82>
 80047fa:	1b5b      	subs	r3, r3, r5
 80047fc:	50a3      	str	r3, [r4, r2]
 80047fe:	e7e2      	b.n	80047c6 <_malloc_r+0x82>
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	e7ec      	b.n	80047de <_malloc_r+0x9a>
 8004804:	6862      	ldr	r2, [r4, #4]
 8004806:	42a3      	cmp	r3, r4
 8004808:	d101      	bne.n	800480e <_malloc_r+0xca>
 800480a:	602a      	str	r2, [r5, #0]
 800480c:	e7ea      	b.n	80047e4 <_malloc_r+0xa0>
 800480e:	605a      	str	r2, [r3, #4]
 8004810:	e7e8      	b.n	80047e4 <_malloc_r+0xa0>
 8004812:	0023      	movs	r3, r4
 8004814:	6864      	ldr	r4, [r4, #4]
 8004816:	e7a7      	b.n	8004768 <_malloc_r+0x24>
 8004818:	002c      	movs	r4, r5
 800481a:	686d      	ldr	r5, [r5, #4]
 800481c:	e7af      	b.n	800477e <_malloc_r+0x3a>
 800481e:	230c      	movs	r3, #12
 8004820:	0030      	movs	r0, r6
 8004822:	6033      	str	r3, [r6, #0]
 8004824:	f000 fd9a 	bl	800535c <__malloc_unlock>
 8004828:	e7cd      	b.n	80047c6 <_malloc_r+0x82>
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	20000240 	.word	0x20000240

08004830 <__sfputc_r>:
 8004830:	6893      	ldr	r3, [r2, #8]
 8004832:	b510      	push	{r4, lr}
 8004834:	3b01      	subs	r3, #1
 8004836:	6093      	str	r3, [r2, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	da04      	bge.n	8004846 <__sfputc_r+0x16>
 800483c:	6994      	ldr	r4, [r2, #24]
 800483e:	42a3      	cmp	r3, r4
 8004840:	db07      	blt.n	8004852 <__sfputc_r+0x22>
 8004842:	290a      	cmp	r1, #10
 8004844:	d005      	beq.n	8004852 <__sfputc_r+0x22>
 8004846:	6813      	ldr	r3, [r2, #0]
 8004848:	1c58      	adds	r0, r3, #1
 800484a:	6010      	str	r0, [r2, #0]
 800484c:	7019      	strb	r1, [r3, #0]
 800484e:	0008      	movs	r0, r1
 8004850:	bd10      	pop	{r4, pc}
 8004852:	f000 fb2f 	bl	8004eb4 <__swbuf_r>
 8004856:	0001      	movs	r1, r0
 8004858:	e7f9      	b.n	800484e <__sfputc_r+0x1e>

0800485a <__sfputs_r>:
 800485a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485c:	0006      	movs	r6, r0
 800485e:	000f      	movs	r7, r1
 8004860:	0014      	movs	r4, r2
 8004862:	18d5      	adds	r5, r2, r3
 8004864:	42ac      	cmp	r4, r5
 8004866:	d101      	bne.n	800486c <__sfputs_r+0x12>
 8004868:	2000      	movs	r0, #0
 800486a:	e007      	b.n	800487c <__sfputs_r+0x22>
 800486c:	7821      	ldrb	r1, [r4, #0]
 800486e:	003a      	movs	r2, r7
 8004870:	0030      	movs	r0, r6
 8004872:	f7ff ffdd 	bl	8004830 <__sfputc_r>
 8004876:	3401      	adds	r4, #1
 8004878:	1c43      	adds	r3, r0, #1
 800487a:	d1f3      	bne.n	8004864 <__sfputs_r+0xa>
 800487c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004880 <_vfiprintf_r>:
 8004880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004882:	b0a1      	sub	sp, #132	; 0x84
 8004884:	0006      	movs	r6, r0
 8004886:	000c      	movs	r4, r1
 8004888:	001f      	movs	r7, r3
 800488a:	9203      	str	r2, [sp, #12]
 800488c:	2800      	cmp	r0, #0
 800488e:	d004      	beq.n	800489a <_vfiprintf_r+0x1a>
 8004890:	6983      	ldr	r3, [r0, #24]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <_vfiprintf_r+0x1a>
 8004896:	f7ff fe8f 	bl	80045b8 <__sinit>
 800489a:	4b8e      	ldr	r3, [pc, #568]	; (8004ad4 <_vfiprintf_r+0x254>)
 800489c:	429c      	cmp	r4, r3
 800489e:	d11c      	bne.n	80048da <_vfiprintf_r+0x5a>
 80048a0:	6874      	ldr	r4, [r6, #4]
 80048a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048a4:	07db      	lsls	r3, r3, #31
 80048a6:	d405      	bmi.n	80048b4 <_vfiprintf_r+0x34>
 80048a8:	89a3      	ldrh	r3, [r4, #12]
 80048aa:	059b      	lsls	r3, r3, #22
 80048ac:	d402      	bmi.n	80048b4 <_vfiprintf_r+0x34>
 80048ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048b0:	f7ff ff23 	bl	80046fa <__retarget_lock_acquire_recursive>
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	071b      	lsls	r3, r3, #28
 80048b8:	d502      	bpl.n	80048c0 <_vfiprintf_r+0x40>
 80048ba:	6923      	ldr	r3, [r4, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d11d      	bne.n	80048fc <_vfiprintf_r+0x7c>
 80048c0:	0021      	movs	r1, r4
 80048c2:	0030      	movs	r0, r6
 80048c4:	f000 fb60 	bl	8004f88 <__swsetup_r>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d017      	beq.n	80048fc <_vfiprintf_r+0x7c>
 80048cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048ce:	07db      	lsls	r3, r3, #31
 80048d0:	d50d      	bpl.n	80048ee <_vfiprintf_r+0x6e>
 80048d2:	2001      	movs	r0, #1
 80048d4:	4240      	negs	r0, r0
 80048d6:	b021      	add	sp, #132	; 0x84
 80048d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048da:	4b7f      	ldr	r3, [pc, #508]	; (8004ad8 <_vfiprintf_r+0x258>)
 80048dc:	429c      	cmp	r4, r3
 80048de:	d101      	bne.n	80048e4 <_vfiprintf_r+0x64>
 80048e0:	68b4      	ldr	r4, [r6, #8]
 80048e2:	e7de      	b.n	80048a2 <_vfiprintf_r+0x22>
 80048e4:	4b7d      	ldr	r3, [pc, #500]	; (8004adc <_vfiprintf_r+0x25c>)
 80048e6:	429c      	cmp	r4, r3
 80048e8:	d1db      	bne.n	80048a2 <_vfiprintf_r+0x22>
 80048ea:	68f4      	ldr	r4, [r6, #12]
 80048ec:	e7d9      	b.n	80048a2 <_vfiprintf_r+0x22>
 80048ee:	89a3      	ldrh	r3, [r4, #12]
 80048f0:	059b      	lsls	r3, r3, #22
 80048f2:	d4ee      	bmi.n	80048d2 <_vfiprintf_r+0x52>
 80048f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048f6:	f7ff ff01 	bl	80046fc <__retarget_lock_release_recursive>
 80048fa:	e7ea      	b.n	80048d2 <_vfiprintf_r+0x52>
 80048fc:	2300      	movs	r3, #0
 80048fe:	ad08      	add	r5, sp, #32
 8004900:	616b      	str	r3, [r5, #20]
 8004902:	3320      	adds	r3, #32
 8004904:	766b      	strb	r3, [r5, #25]
 8004906:	3310      	adds	r3, #16
 8004908:	76ab      	strb	r3, [r5, #26]
 800490a:	9707      	str	r7, [sp, #28]
 800490c:	9f03      	ldr	r7, [sp, #12]
 800490e:	783b      	ldrb	r3, [r7, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <_vfiprintf_r+0x98>
 8004914:	2b25      	cmp	r3, #37	; 0x25
 8004916:	d14e      	bne.n	80049b6 <_vfiprintf_r+0x136>
 8004918:	9b03      	ldr	r3, [sp, #12]
 800491a:	1afb      	subs	r3, r7, r3
 800491c:	9305      	str	r3, [sp, #20]
 800491e:	9b03      	ldr	r3, [sp, #12]
 8004920:	429f      	cmp	r7, r3
 8004922:	d00d      	beq.n	8004940 <_vfiprintf_r+0xc0>
 8004924:	9b05      	ldr	r3, [sp, #20]
 8004926:	0021      	movs	r1, r4
 8004928:	0030      	movs	r0, r6
 800492a:	9a03      	ldr	r2, [sp, #12]
 800492c:	f7ff ff95 	bl	800485a <__sfputs_r>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d100      	bne.n	8004936 <_vfiprintf_r+0xb6>
 8004934:	e0b5      	b.n	8004aa2 <_vfiprintf_r+0x222>
 8004936:	696a      	ldr	r2, [r5, #20]
 8004938:	9b05      	ldr	r3, [sp, #20]
 800493a:	4694      	mov	ip, r2
 800493c:	4463      	add	r3, ip
 800493e:	616b      	str	r3, [r5, #20]
 8004940:	783b      	ldrb	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d100      	bne.n	8004948 <_vfiprintf_r+0xc8>
 8004946:	e0ac      	b.n	8004aa2 <_vfiprintf_r+0x222>
 8004948:	2201      	movs	r2, #1
 800494a:	1c7b      	adds	r3, r7, #1
 800494c:	9303      	str	r3, [sp, #12]
 800494e:	2300      	movs	r3, #0
 8004950:	4252      	negs	r2, r2
 8004952:	606a      	str	r2, [r5, #4]
 8004954:	a904      	add	r1, sp, #16
 8004956:	3254      	adds	r2, #84	; 0x54
 8004958:	1852      	adds	r2, r2, r1
 800495a:	602b      	str	r3, [r5, #0]
 800495c:	60eb      	str	r3, [r5, #12]
 800495e:	60ab      	str	r3, [r5, #8]
 8004960:	7013      	strb	r3, [r2, #0]
 8004962:	65ab      	str	r3, [r5, #88]	; 0x58
 8004964:	9b03      	ldr	r3, [sp, #12]
 8004966:	2205      	movs	r2, #5
 8004968:	7819      	ldrb	r1, [r3, #0]
 800496a:	485d      	ldr	r0, [pc, #372]	; (8004ae0 <_vfiprintf_r+0x260>)
 800496c:	f000 fce2 	bl	8005334 <memchr>
 8004970:	9b03      	ldr	r3, [sp, #12]
 8004972:	1c5f      	adds	r7, r3, #1
 8004974:	2800      	cmp	r0, #0
 8004976:	d120      	bne.n	80049ba <_vfiprintf_r+0x13a>
 8004978:	682a      	ldr	r2, [r5, #0]
 800497a:	06d3      	lsls	r3, r2, #27
 800497c:	d504      	bpl.n	8004988 <_vfiprintf_r+0x108>
 800497e:	2353      	movs	r3, #83	; 0x53
 8004980:	a904      	add	r1, sp, #16
 8004982:	185b      	adds	r3, r3, r1
 8004984:	2120      	movs	r1, #32
 8004986:	7019      	strb	r1, [r3, #0]
 8004988:	0713      	lsls	r3, r2, #28
 800498a:	d504      	bpl.n	8004996 <_vfiprintf_r+0x116>
 800498c:	2353      	movs	r3, #83	; 0x53
 800498e:	a904      	add	r1, sp, #16
 8004990:	185b      	adds	r3, r3, r1
 8004992:	212b      	movs	r1, #43	; 0x2b
 8004994:	7019      	strb	r1, [r3, #0]
 8004996:	9b03      	ldr	r3, [sp, #12]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	2b2a      	cmp	r3, #42	; 0x2a
 800499c:	d016      	beq.n	80049cc <_vfiprintf_r+0x14c>
 800499e:	2100      	movs	r1, #0
 80049a0:	68eb      	ldr	r3, [r5, #12]
 80049a2:	9f03      	ldr	r7, [sp, #12]
 80049a4:	783a      	ldrb	r2, [r7, #0]
 80049a6:	1c78      	adds	r0, r7, #1
 80049a8:	3a30      	subs	r2, #48	; 0x30
 80049aa:	4684      	mov	ip, r0
 80049ac:	2a09      	cmp	r2, #9
 80049ae:	d94f      	bls.n	8004a50 <_vfiprintf_r+0x1d0>
 80049b0:	2900      	cmp	r1, #0
 80049b2:	d111      	bne.n	80049d8 <_vfiprintf_r+0x158>
 80049b4:	e017      	b.n	80049e6 <_vfiprintf_r+0x166>
 80049b6:	3701      	adds	r7, #1
 80049b8:	e7a9      	b.n	800490e <_vfiprintf_r+0x8e>
 80049ba:	4b49      	ldr	r3, [pc, #292]	; (8004ae0 <_vfiprintf_r+0x260>)
 80049bc:	682a      	ldr	r2, [r5, #0]
 80049be:	1ac0      	subs	r0, r0, r3
 80049c0:	2301      	movs	r3, #1
 80049c2:	4083      	lsls	r3, r0
 80049c4:	4313      	orrs	r3, r2
 80049c6:	602b      	str	r3, [r5, #0]
 80049c8:	9703      	str	r7, [sp, #12]
 80049ca:	e7cb      	b.n	8004964 <_vfiprintf_r+0xe4>
 80049cc:	9b07      	ldr	r3, [sp, #28]
 80049ce:	1d19      	adds	r1, r3, #4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	9107      	str	r1, [sp, #28]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	db01      	blt.n	80049dc <_vfiprintf_r+0x15c>
 80049d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80049da:	e004      	b.n	80049e6 <_vfiprintf_r+0x166>
 80049dc:	425b      	negs	r3, r3
 80049de:	60eb      	str	r3, [r5, #12]
 80049e0:	2302      	movs	r3, #2
 80049e2:	4313      	orrs	r3, r2
 80049e4:	602b      	str	r3, [r5, #0]
 80049e6:	783b      	ldrb	r3, [r7, #0]
 80049e8:	2b2e      	cmp	r3, #46	; 0x2e
 80049ea:	d10a      	bne.n	8004a02 <_vfiprintf_r+0x182>
 80049ec:	787b      	ldrb	r3, [r7, #1]
 80049ee:	2b2a      	cmp	r3, #42	; 0x2a
 80049f0:	d137      	bne.n	8004a62 <_vfiprintf_r+0x1e2>
 80049f2:	9b07      	ldr	r3, [sp, #28]
 80049f4:	3702      	adds	r7, #2
 80049f6:	1d1a      	adds	r2, r3, #4
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	9207      	str	r2, [sp, #28]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	db2d      	blt.n	8004a5c <_vfiprintf_r+0x1dc>
 8004a00:	9309      	str	r3, [sp, #36]	; 0x24
 8004a02:	2203      	movs	r2, #3
 8004a04:	7839      	ldrb	r1, [r7, #0]
 8004a06:	4837      	ldr	r0, [pc, #220]	; (8004ae4 <_vfiprintf_r+0x264>)
 8004a08:	f000 fc94 	bl	8005334 <memchr>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d007      	beq.n	8004a20 <_vfiprintf_r+0x1a0>
 8004a10:	4b34      	ldr	r3, [pc, #208]	; (8004ae4 <_vfiprintf_r+0x264>)
 8004a12:	682a      	ldr	r2, [r5, #0]
 8004a14:	1ac0      	subs	r0, r0, r3
 8004a16:	2340      	movs	r3, #64	; 0x40
 8004a18:	4083      	lsls	r3, r0
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	3701      	adds	r7, #1
 8004a1e:	602b      	str	r3, [r5, #0]
 8004a20:	7839      	ldrb	r1, [r7, #0]
 8004a22:	1c7b      	adds	r3, r7, #1
 8004a24:	2206      	movs	r2, #6
 8004a26:	4830      	ldr	r0, [pc, #192]	; (8004ae8 <_vfiprintf_r+0x268>)
 8004a28:	9303      	str	r3, [sp, #12]
 8004a2a:	7629      	strb	r1, [r5, #24]
 8004a2c:	f000 fc82 	bl	8005334 <memchr>
 8004a30:	2800      	cmp	r0, #0
 8004a32:	d045      	beq.n	8004ac0 <_vfiprintf_r+0x240>
 8004a34:	4b2d      	ldr	r3, [pc, #180]	; (8004aec <_vfiprintf_r+0x26c>)
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d127      	bne.n	8004a8a <_vfiprintf_r+0x20a>
 8004a3a:	2207      	movs	r2, #7
 8004a3c:	9b07      	ldr	r3, [sp, #28]
 8004a3e:	3307      	adds	r3, #7
 8004a40:	4393      	bics	r3, r2
 8004a42:	3308      	adds	r3, #8
 8004a44:	9307      	str	r3, [sp, #28]
 8004a46:	696b      	ldr	r3, [r5, #20]
 8004a48:	9a04      	ldr	r2, [sp, #16]
 8004a4a:	189b      	adds	r3, r3, r2
 8004a4c:	616b      	str	r3, [r5, #20]
 8004a4e:	e75d      	b.n	800490c <_vfiprintf_r+0x8c>
 8004a50:	210a      	movs	r1, #10
 8004a52:	434b      	muls	r3, r1
 8004a54:	4667      	mov	r7, ip
 8004a56:	189b      	adds	r3, r3, r2
 8004a58:	3909      	subs	r1, #9
 8004a5a:	e7a3      	b.n	80049a4 <_vfiprintf_r+0x124>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	425b      	negs	r3, r3
 8004a60:	e7ce      	b.n	8004a00 <_vfiprintf_r+0x180>
 8004a62:	2300      	movs	r3, #0
 8004a64:	001a      	movs	r2, r3
 8004a66:	3701      	adds	r7, #1
 8004a68:	606b      	str	r3, [r5, #4]
 8004a6a:	7839      	ldrb	r1, [r7, #0]
 8004a6c:	1c78      	adds	r0, r7, #1
 8004a6e:	3930      	subs	r1, #48	; 0x30
 8004a70:	4684      	mov	ip, r0
 8004a72:	2909      	cmp	r1, #9
 8004a74:	d903      	bls.n	8004a7e <_vfiprintf_r+0x1fe>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0c3      	beq.n	8004a02 <_vfiprintf_r+0x182>
 8004a7a:	9209      	str	r2, [sp, #36]	; 0x24
 8004a7c:	e7c1      	b.n	8004a02 <_vfiprintf_r+0x182>
 8004a7e:	230a      	movs	r3, #10
 8004a80:	435a      	muls	r2, r3
 8004a82:	4667      	mov	r7, ip
 8004a84:	1852      	adds	r2, r2, r1
 8004a86:	3b09      	subs	r3, #9
 8004a88:	e7ef      	b.n	8004a6a <_vfiprintf_r+0x1ea>
 8004a8a:	ab07      	add	r3, sp, #28
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	0022      	movs	r2, r4
 8004a90:	0029      	movs	r1, r5
 8004a92:	0030      	movs	r0, r6
 8004a94:	4b16      	ldr	r3, [pc, #88]	; (8004af0 <_vfiprintf_r+0x270>)
 8004a96:	e000      	b.n	8004a9a <_vfiprintf_r+0x21a>
 8004a98:	bf00      	nop
 8004a9a:	9004      	str	r0, [sp, #16]
 8004a9c:	9b04      	ldr	r3, [sp, #16]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	d1d1      	bne.n	8004a46 <_vfiprintf_r+0x1c6>
 8004aa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aa4:	07db      	lsls	r3, r3, #31
 8004aa6:	d405      	bmi.n	8004ab4 <_vfiprintf_r+0x234>
 8004aa8:	89a3      	ldrh	r3, [r4, #12]
 8004aaa:	059b      	lsls	r3, r3, #22
 8004aac:	d402      	bmi.n	8004ab4 <_vfiprintf_r+0x234>
 8004aae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ab0:	f7ff fe24 	bl	80046fc <__retarget_lock_release_recursive>
 8004ab4:	89a3      	ldrh	r3, [r4, #12]
 8004ab6:	065b      	lsls	r3, r3, #25
 8004ab8:	d500      	bpl.n	8004abc <_vfiprintf_r+0x23c>
 8004aba:	e70a      	b.n	80048d2 <_vfiprintf_r+0x52>
 8004abc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004abe:	e70a      	b.n	80048d6 <_vfiprintf_r+0x56>
 8004ac0:	ab07      	add	r3, sp, #28
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	0022      	movs	r2, r4
 8004ac6:	0029      	movs	r1, r5
 8004ac8:	0030      	movs	r0, r6
 8004aca:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <_vfiprintf_r+0x270>)
 8004acc:	f000 f882 	bl	8004bd4 <_printf_i>
 8004ad0:	e7e3      	b.n	8004a9a <_vfiprintf_r+0x21a>
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	080058e4 	.word	0x080058e4
 8004ad8:	08005904 	.word	0x08005904
 8004adc:	080058c4 	.word	0x080058c4
 8004ae0:	08005924 	.word	0x08005924
 8004ae4:	0800592a 	.word	0x0800592a
 8004ae8:	0800592e 	.word	0x0800592e
 8004aec:	00000000 	.word	0x00000000
 8004af0:	0800485b 	.word	0x0800485b

08004af4 <_printf_common>:
 8004af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004af6:	0015      	movs	r5, r2
 8004af8:	9301      	str	r3, [sp, #4]
 8004afa:	688a      	ldr	r2, [r1, #8]
 8004afc:	690b      	ldr	r3, [r1, #16]
 8004afe:	000c      	movs	r4, r1
 8004b00:	9000      	str	r0, [sp, #0]
 8004b02:	4293      	cmp	r3, r2
 8004b04:	da00      	bge.n	8004b08 <_printf_common+0x14>
 8004b06:	0013      	movs	r3, r2
 8004b08:	0022      	movs	r2, r4
 8004b0a:	602b      	str	r3, [r5, #0]
 8004b0c:	3243      	adds	r2, #67	; 0x43
 8004b0e:	7812      	ldrb	r2, [r2, #0]
 8004b10:	2a00      	cmp	r2, #0
 8004b12:	d001      	beq.n	8004b18 <_printf_common+0x24>
 8004b14:	3301      	adds	r3, #1
 8004b16:	602b      	str	r3, [r5, #0]
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	069b      	lsls	r3, r3, #26
 8004b1c:	d502      	bpl.n	8004b24 <_printf_common+0x30>
 8004b1e:	682b      	ldr	r3, [r5, #0]
 8004b20:	3302      	adds	r3, #2
 8004b22:	602b      	str	r3, [r5, #0]
 8004b24:	6822      	ldr	r2, [r4, #0]
 8004b26:	2306      	movs	r3, #6
 8004b28:	0017      	movs	r7, r2
 8004b2a:	401f      	ands	r7, r3
 8004b2c:	421a      	tst	r2, r3
 8004b2e:	d027      	beq.n	8004b80 <_printf_common+0x8c>
 8004b30:	0023      	movs	r3, r4
 8004b32:	3343      	adds	r3, #67	; 0x43
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	1e5a      	subs	r2, r3, #1
 8004b38:	4193      	sbcs	r3, r2
 8004b3a:	6822      	ldr	r2, [r4, #0]
 8004b3c:	0692      	lsls	r2, r2, #26
 8004b3e:	d430      	bmi.n	8004ba2 <_printf_common+0xae>
 8004b40:	0022      	movs	r2, r4
 8004b42:	9901      	ldr	r1, [sp, #4]
 8004b44:	9800      	ldr	r0, [sp, #0]
 8004b46:	9e08      	ldr	r6, [sp, #32]
 8004b48:	3243      	adds	r2, #67	; 0x43
 8004b4a:	47b0      	blx	r6
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d025      	beq.n	8004b9c <_printf_common+0xa8>
 8004b50:	2306      	movs	r3, #6
 8004b52:	6820      	ldr	r0, [r4, #0]
 8004b54:	682a      	ldr	r2, [r5, #0]
 8004b56:	68e1      	ldr	r1, [r4, #12]
 8004b58:	2500      	movs	r5, #0
 8004b5a:	4003      	ands	r3, r0
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d103      	bne.n	8004b68 <_printf_common+0x74>
 8004b60:	1a8d      	subs	r5, r1, r2
 8004b62:	43eb      	mvns	r3, r5
 8004b64:	17db      	asrs	r3, r3, #31
 8004b66:	401d      	ands	r5, r3
 8004b68:	68a3      	ldr	r3, [r4, #8]
 8004b6a:	6922      	ldr	r2, [r4, #16]
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	dd01      	ble.n	8004b74 <_printf_common+0x80>
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	18ed      	adds	r5, r5, r3
 8004b74:	2700      	movs	r7, #0
 8004b76:	42bd      	cmp	r5, r7
 8004b78:	d120      	bne.n	8004bbc <_printf_common+0xc8>
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	e010      	b.n	8004ba0 <_printf_common+0xac>
 8004b7e:	3701      	adds	r7, #1
 8004b80:	68e3      	ldr	r3, [r4, #12]
 8004b82:	682a      	ldr	r2, [r5, #0]
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	42bb      	cmp	r3, r7
 8004b88:	ddd2      	ble.n	8004b30 <_printf_common+0x3c>
 8004b8a:	0022      	movs	r2, r4
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	9901      	ldr	r1, [sp, #4]
 8004b90:	9800      	ldr	r0, [sp, #0]
 8004b92:	9e08      	ldr	r6, [sp, #32]
 8004b94:	3219      	adds	r2, #25
 8004b96:	47b0      	blx	r6
 8004b98:	1c43      	adds	r3, r0, #1
 8004b9a:	d1f0      	bne.n	8004b7e <_printf_common+0x8a>
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	4240      	negs	r0, r0
 8004ba0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ba2:	2030      	movs	r0, #48	; 0x30
 8004ba4:	18e1      	adds	r1, r4, r3
 8004ba6:	3143      	adds	r1, #67	; 0x43
 8004ba8:	7008      	strb	r0, [r1, #0]
 8004baa:	0021      	movs	r1, r4
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	3145      	adds	r1, #69	; 0x45
 8004bb0:	7809      	ldrb	r1, [r1, #0]
 8004bb2:	18a2      	adds	r2, r4, r2
 8004bb4:	3243      	adds	r2, #67	; 0x43
 8004bb6:	3302      	adds	r3, #2
 8004bb8:	7011      	strb	r1, [r2, #0]
 8004bba:	e7c1      	b.n	8004b40 <_printf_common+0x4c>
 8004bbc:	0022      	movs	r2, r4
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	9901      	ldr	r1, [sp, #4]
 8004bc2:	9800      	ldr	r0, [sp, #0]
 8004bc4:	9e08      	ldr	r6, [sp, #32]
 8004bc6:	321a      	adds	r2, #26
 8004bc8:	47b0      	blx	r6
 8004bca:	1c43      	adds	r3, r0, #1
 8004bcc:	d0e6      	beq.n	8004b9c <_printf_common+0xa8>
 8004bce:	3701      	adds	r7, #1
 8004bd0:	e7d1      	b.n	8004b76 <_printf_common+0x82>
	...

08004bd4 <_printf_i>:
 8004bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bd6:	b08b      	sub	sp, #44	; 0x2c
 8004bd8:	9206      	str	r2, [sp, #24]
 8004bda:	000a      	movs	r2, r1
 8004bdc:	3243      	adds	r2, #67	; 0x43
 8004bde:	9307      	str	r3, [sp, #28]
 8004be0:	9005      	str	r0, [sp, #20]
 8004be2:	9204      	str	r2, [sp, #16]
 8004be4:	7e0a      	ldrb	r2, [r1, #24]
 8004be6:	000c      	movs	r4, r1
 8004be8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004bea:	2a78      	cmp	r2, #120	; 0x78
 8004bec:	d807      	bhi.n	8004bfe <_printf_i+0x2a>
 8004bee:	2a62      	cmp	r2, #98	; 0x62
 8004bf0:	d809      	bhi.n	8004c06 <_printf_i+0x32>
 8004bf2:	2a00      	cmp	r2, #0
 8004bf4:	d100      	bne.n	8004bf8 <_printf_i+0x24>
 8004bf6:	e0c1      	b.n	8004d7c <_printf_i+0x1a8>
 8004bf8:	2a58      	cmp	r2, #88	; 0x58
 8004bfa:	d100      	bne.n	8004bfe <_printf_i+0x2a>
 8004bfc:	e08c      	b.n	8004d18 <_printf_i+0x144>
 8004bfe:	0026      	movs	r6, r4
 8004c00:	3642      	adds	r6, #66	; 0x42
 8004c02:	7032      	strb	r2, [r6, #0]
 8004c04:	e022      	b.n	8004c4c <_printf_i+0x78>
 8004c06:	0010      	movs	r0, r2
 8004c08:	3863      	subs	r0, #99	; 0x63
 8004c0a:	2815      	cmp	r0, #21
 8004c0c:	d8f7      	bhi.n	8004bfe <_printf_i+0x2a>
 8004c0e:	f7fb fa79 	bl	8000104 <__gnu_thumb1_case_shi>
 8004c12:	0016      	.short	0x0016
 8004c14:	fff6001f 	.word	0xfff6001f
 8004c18:	fff6fff6 	.word	0xfff6fff6
 8004c1c:	001ffff6 	.word	0x001ffff6
 8004c20:	fff6fff6 	.word	0xfff6fff6
 8004c24:	fff6fff6 	.word	0xfff6fff6
 8004c28:	003600a8 	.word	0x003600a8
 8004c2c:	fff6009a 	.word	0xfff6009a
 8004c30:	00b9fff6 	.word	0x00b9fff6
 8004c34:	0036fff6 	.word	0x0036fff6
 8004c38:	fff6fff6 	.word	0xfff6fff6
 8004c3c:	009e      	.short	0x009e
 8004c3e:	0026      	movs	r6, r4
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	3642      	adds	r6, #66	; 0x42
 8004c44:	1d11      	adds	r1, r2, #4
 8004c46:	6019      	str	r1, [r3, #0]
 8004c48:	6813      	ldr	r3, [r2, #0]
 8004c4a:	7033      	strb	r3, [r6, #0]
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0a7      	b.n	8004da0 <_printf_i+0x1cc>
 8004c50:	6808      	ldr	r0, [r1, #0]
 8004c52:	6819      	ldr	r1, [r3, #0]
 8004c54:	1d0a      	adds	r2, r1, #4
 8004c56:	0605      	lsls	r5, r0, #24
 8004c58:	d50b      	bpl.n	8004c72 <_printf_i+0x9e>
 8004c5a:	680d      	ldr	r5, [r1, #0]
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	2d00      	cmp	r5, #0
 8004c60:	da03      	bge.n	8004c6a <_printf_i+0x96>
 8004c62:	232d      	movs	r3, #45	; 0x2d
 8004c64:	9a04      	ldr	r2, [sp, #16]
 8004c66:	426d      	negs	r5, r5
 8004c68:	7013      	strb	r3, [r2, #0]
 8004c6a:	4b61      	ldr	r3, [pc, #388]	; (8004df0 <_printf_i+0x21c>)
 8004c6c:	270a      	movs	r7, #10
 8004c6e:	9303      	str	r3, [sp, #12]
 8004c70:	e01b      	b.n	8004caa <_printf_i+0xd6>
 8004c72:	680d      	ldr	r5, [r1, #0]
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	0641      	lsls	r1, r0, #25
 8004c78:	d5f1      	bpl.n	8004c5e <_printf_i+0x8a>
 8004c7a:	b22d      	sxth	r5, r5
 8004c7c:	e7ef      	b.n	8004c5e <_printf_i+0x8a>
 8004c7e:	680d      	ldr	r5, [r1, #0]
 8004c80:	6819      	ldr	r1, [r3, #0]
 8004c82:	1d08      	adds	r0, r1, #4
 8004c84:	6018      	str	r0, [r3, #0]
 8004c86:	062e      	lsls	r6, r5, #24
 8004c88:	d501      	bpl.n	8004c8e <_printf_i+0xba>
 8004c8a:	680d      	ldr	r5, [r1, #0]
 8004c8c:	e003      	b.n	8004c96 <_printf_i+0xc2>
 8004c8e:	066d      	lsls	r5, r5, #25
 8004c90:	d5fb      	bpl.n	8004c8a <_printf_i+0xb6>
 8004c92:	680d      	ldr	r5, [r1, #0]
 8004c94:	b2ad      	uxth	r5, r5
 8004c96:	4b56      	ldr	r3, [pc, #344]	; (8004df0 <_printf_i+0x21c>)
 8004c98:	2708      	movs	r7, #8
 8004c9a:	9303      	str	r3, [sp, #12]
 8004c9c:	2a6f      	cmp	r2, #111	; 0x6f
 8004c9e:	d000      	beq.n	8004ca2 <_printf_i+0xce>
 8004ca0:	3702      	adds	r7, #2
 8004ca2:	0023      	movs	r3, r4
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	3343      	adds	r3, #67	; 0x43
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	6863      	ldr	r3, [r4, #4]
 8004cac:	60a3      	str	r3, [r4, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	db03      	blt.n	8004cba <_printf_i+0xe6>
 8004cb2:	2204      	movs	r2, #4
 8004cb4:	6821      	ldr	r1, [r4, #0]
 8004cb6:	4391      	bics	r1, r2
 8004cb8:	6021      	str	r1, [r4, #0]
 8004cba:	2d00      	cmp	r5, #0
 8004cbc:	d102      	bne.n	8004cc4 <_printf_i+0xf0>
 8004cbe:	9e04      	ldr	r6, [sp, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00c      	beq.n	8004cde <_printf_i+0x10a>
 8004cc4:	9e04      	ldr	r6, [sp, #16]
 8004cc6:	0028      	movs	r0, r5
 8004cc8:	0039      	movs	r1, r7
 8004cca:	f7fb faab 	bl	8000224 <__aeabi_uidivmod>
 8004cce:	9b03      	ldr	r3, [sp, #12]
 8004cd0:	3e01      	subs	r6, #1
 8004cd2:	5c5b      	ldrb	r3, [r3, r1]
 8004cd4:	7033      	strb	r3, [r6, #0]
 8004cd6:	002b      	movs	r3, r5
 8004cd8:	0005      	movs	r5, r0
 8004cda:	429f      	cmp	r7, r3
 8004cdc:	d9f3      	bls.n	8004cc6 <_printf_i+0xf2>
 8004cde:	2f08      	cmp	r7, #8
 8004ce0:	d109      	bne.n	8004cf6 <_printf_i+0x122>
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	07db      	lsls	r3, r3, #31
 8004ce6:	d506      	bpl.n	8004cf6 <_printf_i+0x122>
 8004ce8:	6863      	ldr	r3, [r4, #4]
 8004cea:	6922      	ldr	r2, [r4, #16]
 8004cec:	4293      	cmp	r3, r2
 8004cee:	dc02      	bgt.n	8004cf6 <_printf_i+0x122>
 8004cf0:	2330      	movs	r3, #48	; 0x30
 8004cf2:	3e01      	subs	r6, #1
 8004cf4:	7033      	strb	r3, [r6, #0]
 8004cf6:	9b04      	ldr	r3, [sp, #16]
 8004cf8:	1b9b      	subs	r3, r3, r6
 8004cfa:	6123      	str	r3, [r4, #16]
 8004cfc:	9b07      	ldr	r3, [sp, #28]
 8004cfe:	0021      	movs	r1, r4
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	9805      	ldr	r0, [sp, #20]
 8004d04:	9b06      	ldr	r3, [sp, #24]
 8004d06:	aa09      	add	r2, sp, #36	; 0x24
 8004d08:	f7ff fef4 	bl	8004af4 <_printf_common>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d14c      	bne.n	8004daa <_printf_i+0x1d6>
 8004d10:	2001      	movs	r0, #1
 8004d12:	4240      	negs	r0, r0
 8004d14:	b00b      	add	sp, #44	; 0x2c
 8004d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d18:	3145      	adds	r1, #69	; 0x45
 8004d1a:	700a      	strb	r2, [r1, #0]
 8004d1c:	4a34      	ldr	r2, [pc, #208]	; (8004df0 <_printf_i+0x21c>)
 8004d1e:	9203      	str	r2, [sp, #12]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	6821      	ldr	r1, [r4, #0]
 8004d24:	ca20      	ldmia	r2!, {r5}
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	0608      	lsls	r0, r1, #24
 8004d2a:	d516      	bpl.n	8004d5a <_printf_i+0x186>
 8004d2c:	07cb      	lsls	r3, r1, #31
 8004d2e:	d502      	bpl.n	8004d36 <_printf_i+0x162>
 8004d30:	2320      	movs	r3, #32
 8004d32:	4319      	orrs	r1, r3
 8004d34:	6021      	str	r1, [r4, #0]
 8004d36:	2710      	movs	r7, #16
 8004d38:	2d00      	cmp	r5, #0
 8004d3a:	d1b2      	bne.n	8004ca2 <_printf_i+0xce>
 8004d3c:	2320      	movs	r3, #32
 8004d3e:	6822      	ldr	r2, [r4, #0]
 8004d40:	439a      	bics	r2, r3
 8004d42:	6022      	str	r2, [r4, #0]
 8004d44:	e7ad      	b.n	8004ca2 <_printf_i+0xce>
 8004d46:	2220      	movs	r2, #32
 8004d48:	6809      	ldr	r1, [r1, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	6022      	str	r2, [r4, #0]
 8004d4e:	0022      	movs	r2, r4
 8004d50:	2178      	movs	r1, #120	; 0x78
 8004d52:	3245      	adds	r2, #69	; 0x45
 8004d54:	7011      	strb	r1, [r2, #0]
 8004d56:	4a27      	ldr	r2, [pc, #156]	; (8004df4 <_printf_i+0x220>)
 8004d58:	e7e1      	b.n	8004d1e <_printf_i+0x14a>
 8004d5a:	0648      	lsls	r0, r1, #25
 8004d5c:	d5e6      	bpl.n	8004d2c <_printf_i+0x158>
 8004d5e:	b2ad      	uxth	r5, r5
 8004d60:	e7e4      	b.n	8004d2c <_printf_i+0x158>
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	680d      	ldr	r5, [r1, #0]
 8004d66:	1d10      	adds	r0, r2, #4
 8004d68:	6949      	ldr	r1, [r1, #20]
 8004d6a:	6018      	str	r0, [r3, #0]
 8004d6c:	6813      	ldr	r3, [r2, #0]
 8004d6e:	062e      	lsls	r6, r5, #24
 8004d70:	d501      	bpl.n	8004d76 <_printf_i+0x1a2>
 8004d72:	6019      	str	r1, [r3, #0]
 8004d74:	e002      	b.n	8004d7c <_printf_i+0x1a8>
 8004d76:	066d      	lsls	r5, r5, #25
 8004d78:	d5fb      	bpl.n	8004d72 <_printf_i+0x19e>
 8004d7a:	8019      	strh	r1, [r3, #0]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	9e04      	ldr	r6, [sp, #16]
 8004d80:	6123      	str	r3, [r4, #16]
 8004d82:	e7bb      	b.n	8004cfc <_printf_i+0x128>
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	1d11      	adds	r1, r2, #4
 8004d88:	6019      	str	r1, [r3, #0]
 8004d8a:	6816      	ldr	r6, [r2, #0]
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	0030      	movs	r0, r6
 8004d90:	6862      	ldr	r2, [r4, #4]
 8004d92:	f000 facf 	bl	8005334 <memchr>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	d001      	beq.n	8004d9e <_printf_i+0x1ca>
 8004d9a:	1b80      	subs	r0, r0, r6
 8004d9c:	6060      	str	r0, [r4, #4]
 8004d9e:	6863      	ldr	r3, [r4, #4]
 8004da0:	6123      	str	r3, [r4, #16]
 8004da2:	2300      	movs	r3, #0
 8004da4:	9a04      	ldr	r2, [sp, #16]
 8004da6:	7013      	strb	r3, [r2, #0]
 8004da8:	e7a8      	b.n	8004cfc <_printf_i+0x128>
 8004daa:	6923      	ldr	r3, [r4, #16]
 8004dac:	0032      	movs	r2, r6
 8004dae:	9906      	ldr	r1, [sp, #24]
 8004db0:	9805      	ldr	r0, [sp, #20]
 8004db2:	9d07      	ldr	r5, [sp, #28]
 8004db4:	47a8      	blx	r5
 8004db6:	1c43      	adds	r3, r0, #1
 8004db8:	d0aa      	beq.n	8004d10 <_printf_i+0x13c>
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	079b      	lsls	r3, r3, #30
 8004dbe:	d415      	bmi.n	8004dec <_printf_i+0x218>
 8004dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dc2:	68e0      	ldr	r0, [r4, #12]
 8004dc4:	4298      	cmp	r0, r3
 8004dc6:	daa5      	bge.n	8004d14 <_printf_i+0x140>
 8004dc8:	0018      	movs	r0, r3
 8004dca:	e7a3      	b.n	8004d14 <_printf_i+0x140>
 8004dcc:	0022      	movs	r2, r4
 8004dce:	2301      	movs	r3, #1
 8004dd0:	9906      	ldr	r1, [sp, #24]
 8004dd2:	9805      	ldr	r0, [sp, #20]
 8004dd4:	9e07      	ldr	r6, [sp, #28]
 8004dd6:	3219      	adds	r2, #25
 8004dd8:	47b0      	blx	r6
 8004dda:	1c43      	adds	r3, r0, #1
 8004ddc:	d098      	beq.n	8004d10 <_printf_i+0x13c>
 8004dde:	3501      	adds	r5, #1
 8004de0:	68e3      	ldr	r3, [r4, #12]
 8004de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004de4:	1a9b      	subs	r3, r3, r2
 8004de6:	42ab      	cmp	r3, r5
 8004de8:	dcf0      	bgt.n	8004dcc <_printf_i+0x1f8>
 8004dea:	e7e9      	b.n	8004dc0 <_printf_i+0x1ec>
 8004dec:	2500      	movs	r5, #0
 8004dee:	e7f7      	b.n	8004de0 <_printf_i+0x20c>
 8004df0:	08005935 	.word	0x08005935
 8004df4:	08005946 	.word	0x08005946

08004df8 <_sbrk_r>:
 8004df8:	2300      	movs	r3, #0
 8004dfa:	b570      	push	{r4, r5, r6, lr}
 8004dfc:	4d06      	ldr	r5, [pc, #24]	; (8004e18 <_sbrk_r+0x20>)
 8004dfe:	0004      	movs	r4, r0
 8004e00:	0008      	movs	r0, r1
 8004e02:	602b      	str	r3, [r5, #0]
 8004e04:	f7fc fca0 	bl	8001748 <_sbrk>
 8004e08:	1c43      	adds	r3, r0, #1
 8004e0a:	d103      	bne.n	8004e14 <_sbrk_r+0x1c>
 8004e0c:	682b      	ldr	r3, [r5, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d000      	beq.n	8004e14 <_sbrk_r+0x1c>
 8004e12:	6023      	str	r3, [r4, #0]
 8004e14:	bd70      	pop	{r4, r5, r6, pc}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	20000248 	.word	0x20000248

08004e1c <__sread>:
 8004e1c:	b570      	push	{r4, r5, r6, lr}
 8004e1e:	000c      	movs	r4, r1
 8004e20:	250e      	movs	r5, #14
 8004e22:	5f49      	ldrsh	r1, [r1, r5]
 8004e24:	f000 faec 	bl	8005400 <_read_r>
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	db03      	blt.n	8004e34 <__sread+0x18>
 8004e2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e2e:	181b      	adds	r3, r3, r0
 8004e30:	6563      	str	r3, [r4, #84]	; 0x54
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
 8004e34:	89a3      	ldrh	r3, [r4, #12]
 8004e36:	4a02      	ldr	r2, [pc, #8]	; (8004e40 <__sread+0x24>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	81a3      	strh	r3, [r4, #12]
 8004e3c:	e7f9      	b.n	8004e32 <__sread+0x16>
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	ffffefff 	.word	0xffffefff

08004e44 <__swrite>:
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e46:	001f      	movs	r7, r3
 8004e48:	898b      	ldrh	r3, [r1, #12]
 8004e4a:	0005      	movs	r5, r0
 8004e4c:	000c      	movs	r4, r1
 8004e4e:	0016      	movs	r6, r2
 8004e50:	05db      	lsls	r3, r3, #23
 8004e52:	d505      	bpl.n	8004e60 <__swrite+0x1c>
 8004e54:	230e      	movs	r3, #14
 8004e56:	5ec9      	ldrsh	r1, [r1, r3]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	f000 f9ea 	bl	8005234 <_lseek_r>
 8004e60:	89a3      	ldrh	r3, [r4, #12]
 8004e62:	4a05      	ldr	r2, [pc, #20]	; (8004e78 <__swrite+0x34>)
 8004e64:	0028      	movs	r0, r5
 8004e66:	4013      	ands	r3, r2
 8004e68:	81a3      	strh	r3, [r4, #12]
 8004e6a:	0032      	movs	r2, r6
 8004e6c:	230e      	movs	r3, #14
 8004e6e:	5ee1      	ldrsh	r1, [r4, r3]
 8004e70:	003b      	movs	r3, r7
 8004e72:	f000 f875 	bl	8004f60 <_write_r>
 8004e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e78:	ffffefff 	.word	0xffffefff

08004e7c <__sseek>:
 8004e7c:	b570      	push	{r4, r5, r6, lr}
 8004e7e:	000c      	movs	r4, r1
 8004e80:	250e      	movs	r5, #14
 8004e82:	5f49      	ldrsh	r1, [r1, r5]
 8004e84:	f000 f9d6 	bl	8005234 <_lseek_r>
 8004e88:	89a3      	ldrh	r3, [r4, #12]
 8004e8a:	1c42      	adds	r2, r0, #1
 8004e8c:	d103      	bne.n	8004e96 <__sseek+0x1a>
 8004e8e:	4a05      	ldr	r2, [pc, #20]	; (8004ea4 <__sseek+0x28>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	81a3      	strh	r3, [r4, #12]
 8004e94:	bd70      	pop	{r4, r5, r6, pc}
 8004e96:	2280      	movs	r2, #128	; 0x80
 8004e98:	0152      	lsls	r2, r2, #5
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	81a3      	strh	r3, [r4, #12]
 8004e9e:	6560      	str	r0, [r4, #84]	; 0x54
 8004ea0:	e7f8      	b.n	8004e94 <__sseek+0x18>
 8004ea2:	46c0      	nop			; (mov r8, r8)
 8004ea4:	ffffefff 	.word	0xffffefff

08004ea8 <__sclose>:
 8004ea8:	b510      	push	{r4, lr}
 8004eaa:	230e      	movs	r3, #14
 8004eac:	5ec9      	ldrsh	r1, [r1, r3]
 8004eae:	f000 f8e3 	bl	8005078 <_close_r>
 8004eb2:	bd10      	pop	{r4, pc}

08004eb4 <__swbuf_r>:
 8004eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb6:	0005      	movs	r5, r0
 8004eb8:	000e      	movs	r6, r1
 8004eba:	0014      	movs	r4, r2
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	d004      	beq.n	8004eca <__swbuf_r+0x16>
 8004ec0:	6983      	ldr	r3, [r0, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <__swbuf_r+0x16>
 8004ec6:	f7ff fb77 	bl	80045b8 <__sinit>
 8004eca:	4b22      	ldr	r3, [pc, #136]	; (8004f54 <__swbuf_r+0xa0>)
 8004ecc:	429c      	cmp	r4, r3
 8004ece:	d12e      	bne.n	8004f2e <__swbuf_r+0x7a>
 8004ed0:	686c      	ldr	r4, [r5, #4]
 8004ed2:	69a3      	ldr	r3, [r4, #24]
 8004ed4:	60a3      	str	r3, [r4, #8]
 8004ed6:	89a3      	ldrh	r3, [r4, #12]
 8004ed8:	071b      	lsls	r3, r3, #28
 8004eda:	d532      	bpl.n	8004f42 <__swbuf_r+0x8e>
 8004edc:	6923      	ldr	r3, [r4, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d02f      	beq.n	8004f42 <__swbuf_r+0x8e>
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	6922      	ldr	r2, [r4, #16]
 8004ee6:	b2f7      	uxtb	r7, r6
 8004ee8:	1a98      	subs	r0, r3, r2
 8004eea:	6963      	ldr	r3, [r4, #20]
 8004eec:	b2f6      	uxtb	r6, r6
 8004eee:	4283      	cmp	r3, r0
 8004ef0:	dc05      	bgt.n	8004efe <__swbuf_r+0x4a>
 8004ef2:	0021      	movs	r1, r4
 8004ef4:	0028      	movs	r0, r5
 8004ef6:	f000 f95d 	bl	80051b4 <_fflush_r>
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d127      	bne.n	8004f4e <__swbuf_r+0x9a>
 8004efe:	68a3      	ldr	r3, [r4, #8]
 8004f00:	3001      	adds	r0, #1
 8004f02:	3b01      	subs	r3, #1
 8004f04:	60a3      	str	r3, [r4, #8]
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	6022      	str	r2, [r4, #0]
 8004f0c:	701f      	strb	r7, [r3, #0]
 8004f0e:	6963      	ldr	r3, [r4, #20]
 8004f10:	4283      	cmp	r3, r0
 8004f12:	d004      	beq.n	8004f1e <__swbuf_r+0x6a>
 8004f14:	89a3      	ldrh	r3, [r4, #12]
 8004f16:	07db      	lsls	r3, r3, #31
 8004f18:	d507      	bpl.n	8004f2a <__swbuf_r+0x76>
 8004f1a:	2e0a      	cmp	r6, #10
 8004f1c:	d105      	bne.n	8004f2a <__swbuf_r+0x76>
 8004f1e:	0021      	movs	r1, r4
 8004f20:	0028      	movs	r0, r5
 8004f22:	f000 f947 	bl	80051b4 <_fflush_r>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d111      	bne.n	8004f4e <__swbuf_r+0x9a>
 8004f2a:	0030      	movs	r0, r6
 8004f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f2e:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <__swbuf_r+0xa4>)
 8004f30:	429c      	cmp	r4, r3
 8004f32:	d101      	bne.n	8004f38 <__swbuf_r+0x84>
 8004f34:	68ac      	ldr	r4, [r5, #8]
 8004f36:	e7cc      	b.n	8004ed2 <__swbuf_r+0x1e>
 8004f38:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <__swbuf_r+0xa8>)
 8004f3a:	429c      	cmp	r4, r3
 8004f3c:	d1c9      	bne.n	8004ed2 <__swbuf_r+0x1e>
 8004f3e:	68ec      	ldr	r4, [r5, #12]
 8004f40:	e7c7      	b.n	8004ed2 <__swbuf_r+0x1e>
 8004f42:	0021      	movs	r1, r4
 8004f44:	0028      	movs	r0, r5
 8004f46:	f000 f81f 	bl	8004f88 <__swsetup_r>
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	d0c9      	beq.n	8004ee2 <__swbuf_r+0x2e>
 8004f4e:	2601      	movs	r6, #1
 8004f50:	4276      	negs	r6, r6
 8004f52:	e7ea      	b.n	8004f2a <__swbuf_r+0x76>
 8004f54:	080058e4 	.word	0x080058e4
 8004f58:	08005904 	.word	0x08005904
 8004f5c:	080058c4 	.word	0x080058c4

08004f60 <_write_r>:
 8004f60:	b570      	push	{r4, r5, r6, lr}
 8004f62:	0004      	movs	r4, r0
 8004f64:	0008      	movs	r0, r1
 8004f66:	0011      	movs	r1, r2
 8004f68:	001a      	movs	r2, r3
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	4d05      	ldr	r5, [pc, #20]	; (8004f84 <_write_r+0x24>)
 8004f6e:	602b      	str	r3, [r5, #0]
 8004f70:	f7fc fba2 	bl	80016b8 <_write>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d103      	bne.n	8004f80 <_write_r+0x20>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d000      	beq.n	8004f80 <_write_r+0x20>
 8004f7e:	6023      	str	r3, [r4, #0]
 8004f80:	bd70      	pop	{r4, r5, r6, pc}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	20000248 	.word	0x20000248

08004f88 <__swsetup_r>:
 8004f88:	4b37      	ldr	r3, [pc, #220]	; (8005068 <__swsetup_r+0xe0>)
 8004f8a:	b570      	push	{r4, r5, r6, lr}
 8004f8c:	681d      	ldr	r5, [r3, #0]
 8004f8e:	0006      	movs	r6, r0
 8004f90:	000c      	movs	r4, r1
 8004f92:	2d00      	cmp	r5, #0
 8004f94:	d005      	beq.n	8004fa2 <__swsetup_r+0x1a>
 8004f96:	69ab      	ldr	r3, [r5, #24]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d102      	bne.n	8004fa2 <__swsetup_r+0x1a>
 8004f9c:	0028      	movs	r0, r5
 8004f9e:	f7ff fb0b 	bl	80045b8 <__sinit>
 8004fa2:	4b32      	ldr	r3, [pc, #200]	; (800506c <__swsetup_r+0xe4>)
 8004fa4:	429c      	cmp	r4, r3
 8004fa6:	d10f      	bne.n	8004fc8 <__swsetup_r+0x40>
 8004fa8:	686c      	ldr	r4, [r5, #4]
 8004faa:	230c      	movs	r3, #12
 8004fac:	5ee2      	ldrsh	r2, [r4, r3]
 8004fae:	b293      	uxth	r3, r2
 8004fb0:	0711      	lsls	r1, r2, #28
 8004fb2:	d42d      	bmi.n	8005010 <__swsetup_r+0x88>
 8004fb4:	06d9      	lsls	r1, r3, #27
 8004fb6:	d411      	bmi.n	8004fdc <__swsetup_r+0x54>
 8004fb8:	2309      	movs	r3, #9
 8004fba:	2001      	movs	r0, #1
 8004fbc:	6033      	str	r3, [r6, #0]
 8004fbe:	3337      	adds	r3, #55	; 0x37
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	81a3      	strh	r3, [r4, #12]
 8004fc4:	4240      	negs	r0, r0
 8004fc6:	bd70      	pop	{r4, r5, r6, pc}
 8004fc8:	4b29      	ldr	r3, [pc, #164]	; (8005070 <__swsetup_r+0xe8>)
 8004fca:	429c      	cmp	r4, r3
 8004fcc:	d101      	bne.n	8004fd2 <__swsetup_r+0x4a>
 8004fce:	68ac      	ldr	r4, [r5, #8]
 8004fd0:	e7eb      	b.n	8004faa <__swsetup_r+0x22>
 8004fd2:	4b28      	ldr	r3, [pc, #160]	; (8005074 <__swsetup_r+0xec>)
 8004fd4:	429c      	cmp	r4, r3
 8004fd6:	d1e8      	bne.n	8004faa <__swsetup_r+0x22>
 8004fd8:	68ec      	ldr	r4, [r5, #12]
 8004fda:	e7e6      	b.n	8004faa <__swsetup_r+0x22>
 8004fdc:	075b      	lsls	r3, r3, #29
 8004fde:	d513      	bpl.n	8005008 <__swsetup_r+0x80>
 8004fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fe2:	2900      	cmp	r1, #0
 8004fe4:	d008      	beq.n	8004ff8 <__swsetup_r+0x70>
 8004fe6:	0023      	movs	r3, r4
 8004fe8:	3344      	adds	r3, #68	; 0x44
 8004fea:	4299      	cmp	r1, r3
 8004fec:	d002      	beq.n	8004ff4 <__swsetup_r+0x6c>
 8004fee:	0030      	movs	r0, r6
 8004ff0:	f000 f9bc 	bl	800536c <_free_r>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	6363      	str	r3, [r4, #52]	; 0x34
 8004ff8:	2224      	movs	r2, #36	; 0x24
 8004ffa:	89a3      	ldrh	r3, [r4, #12]
 8004ffc:	4393      	bics	r3, r2
 8004ffe:	81a3      	strh	r3, [r4, #12]
 8005000:	2300      	movs	r3, #0
 8005002:	6063      	str	r3, [r4, #4]
 8005004:	6923      	ldr	r3, [r4, #16]
 8005006:	6023      	str	r3, [r4, #0]
 8005008:	2308      	movs	r3, #8
 800500a:	89a2      	ldrh	r2, [r4, #12]
 800500c:	4313      	orrs	r3, r2
 800500e:	81a3      	strh	r3, [r4, #12]
 8005010:	6923      	ldr	r3, [r4, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10b      	bne.n	800502e <__swsetup_r+0xa6>
 8005016:	21a0      	movs	r1, #160	; 0xa0
 8005018:	2280      	movs	r2, #128	; 0x80
 800501a:	89a3      	ldrh	r3, [r4, #12]
 800501c:	0089      	lsls	r1, r1, #2
 800501e:	0092      	lsls	r2, r2, #2
 8005020:	400b      	ands	r3, r1
 8005022:	4293      	cmp	r3, r2
 8005024:	d003      	beq.n	800502e <__swsetup_r+0xa6>
 8005026:	0021      	movs	r1, r4
 8005028:	0030      	movs	r0, r6
 800502a:	f000 f93f 	bl	80052ac <__smakebuf_r>
 800502e:	220c      	movs	r2, #12
 8005030:	5ea3      	ldrsh	r3, [r4, r2]
 8005032:	2001      	movs	r0, #1
 8005034:	001a      	movs	r2, r3
 8005036:	b299      	uxth	r1, r3
 8005038:	4002      	ands	r2, r0
 800503a:	4203      	tst	r3, r0
 800503c:	d00f      	beq.n	800505e <__swsetup_r+0xd6>
 800503e:	2200      	movs	r2, #0
 8005040:	60a2      	str	r2, [r4, #8]
 8005042:	6962      	ldr	r2, [r4, #20]
 8005044:	4252      	negs	r2, r2
 8005046:	61a2      	str	r2, [r4, #24]
 8005048:	2000      	movs	r0, #0
 800504a:	6922      	ldr	r2, [r4, #16]
 800504c:	4282      	cmp	r2, r0
 800504e:	d1ba      	bne.n	8004fc6 <__swsetup_r+0x3e>
 8005050:	060a      	lsls	r2, r1, #24
 8005052:	d5b8      	bpl.n	8004fc6 <__swsetup_r+0x3e>
 8005054:	2240      	movs	r2, #64	; 0x40
 8005056:	4313      	orrs	r3, r2
 8005058:	81a3      	strh	r3, [r4, #12]
 800505a:	3801      	subs	r0, #1
 800505c:	e7b3      	b.n	8004fc6 <__swsetup_r+0x3e>
 800505e:	0788      	lsls	r0, r1, #30
 8005060:	d400      	bmi.n	8005064 <__swsetup_r+0xdc>
 8005062:	6962      	ldr	r2, [r4, #20]
 8005064:	60a2      	str	r2, [r4, #8]
 8005066:	e7ef      	b.n	8005048 <__swsetup_r+0xc0>
 8005068:	20000044 	.word	0x20000044
 800506c:	080058e4 	.word	0x080058e4
 8005070:	08005904 	.word	0x08005904
 8005074:	080058c4 	.word	0x080058c4

08005078 <_close_r>:
 8005078:	2300      	movs	r3, #0
 800507a:	b570      	push	{r4, r5, r6, lr}
 800507c:	4d06      	ldr	r5, [pc, #24]	; (8005098 <_close_r+0x20>)
 800507e:	0004      	movs	r4, r0
 8005080:	0008      	movs	r0, r1
 8005082:	602b      	str	r3, [r5, #0]
 8005084:	f7fc fb34 	bl	80016f0 <_close>
 8005088:	1c43      	adds	r3, r0, #1
 800508a:	d103      	bne.n	8005094 <_close_r+0x1c>
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d000      	beq.n	8005094 <_close_r+0x1c>
 8005092:	6023      	str	r3, [r4, #0]
 8005094:	bd70      	pop	{r4, r5, r6, pc}
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	20000248 	.word	0x20000248

0800509c <__sflush_r>:
 800509c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800509e:	898b      	ldrh	r3, [r1, #12]
 80050a0:	0005      	movs	r5, r0
 80050a2:	000c      	movs	r4, r1
 80050a4:	071a      	lsls	r2, r3, #28
 80050a6:	d45f      	bmi.n	8005168 <__sflush_r+0xcc>
 80050a8:	684a      	ldr	r2, [r1, #4]
 80050aa:	2a00      	cmp	r2, #0
 80050ac:	dc04      	bgt.n	80050b8 <__sflush_r+0x1c>
 80050ae:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80050b0:	2a00      	cmp	r2, #0
 80050b2:	dc01      	bgt.n	80050b8 <__sflush_r+0x1c>
 80050b4:	2000      	movs	r0, #0
 80050b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050b8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80050ba:	2f00      	cmp	r7, #0
 80050bc:	d0fa      	beq.n	80050b4 <__sflush_r+0x18>
 80050be:	2200      	movs	r2, #0
 80050c0:	2180      	movs	r1, #128	; 0x80
 80050c2:	682e      	ldr	r6, [r5, #0]
 80050c4:	602a      	str	r2, [r5, #0]
 80050c6:	001a      	movs	r2, r3
 80050c8:	0149      	lsls	r1, r1, #5
 80050ca:	400a      	ands	r2, r1
 80050cc:	420b      	tst	r3, r1
 80050ce:	d034      	beq.n	800513a <__sflush_r+0x9e>
 80050d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050d2:	89a3      	ldrh	r3, [r4, #12]
 80050d4:	075b      	lsls	r3, r3, #29
 80050d6:	d506      	bpl.n	80050e6 <__sflush_r+0x4a>
 80050d8:	6863      	ldr	r3, [r4, #4]
 80050da:	1ac0      	subs	r0, r0, r3
 80050dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <__sflush_r+0x4a>
 80050e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050e4:	1ac0      	subs	r0, r0, r3
 80050e6:	0002      	movs	r2, r0
 80050e8:	6a21      	ldr	r1, [r4, #32]
 80050ea:	2300      	movs	r3, #0
 80050ec:	0028      	movs	r0, r5
 80050ee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80050f0:	47b8      	blx	r7
 80050f2:	89a1      	ldrh	r1, [r4, #12]
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d106      	bne.n	8005106 <__sflush_r+0x6a>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	2b1d      	cmp	r3, #29
 80050fc:	d831      	bhi.n	8005162 <__sflush_r+0xc6>
 80050fe:	4a2c      	ldr	r2, [pc, #176]	; (80051b0 <__sflush_r+0x114>)
 8005100:	40da      	lsrs	r2, r3
 8005102:	07d3      	lsls	r3, r2, #31
 8005104:	d52d      	bpl.n	8005162 <__sflush_r+0xc6>
 8005106:	2300      	movs	r3, #0
 8005108:	6063      	str	r3, [r4, #4]
 800510a:	6923      	ldr	r3, [r4, #16]
 800510c:	6023      	str	r3, [r4, #0]
 800510e:	04cb      	lsls	r3, r1, #19
 8005110:	d505      	bpl.n	800511e <__sflush_r+0x82>
 8005112:	1c43      	adds	r3, r0, #1
 8005114:	d102      	bne.n	800511c <__sflush_r+0x80>
 8005116:	682b      	ldr	r3, [r5, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d100      	bne.n	800511e <__sflush_r+0x82>
 800511c:	6560      	str	r0, [r4, #84]	; 0x54
 800511e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005120:	602e      	str	r6, [r5, #0]
 8005122:	2900      	cmp	r1, #0
 8005124:	d0c6      	beq.n	80050b4 <__sflush_r+0x18>
 8005126:	0023      	movs	r3, r4
 8005128:	3344      	adds	r3, #68	; 0x44
 800512a:	4299      	cmp	r1, r3
 800512c:	d002      	beq.n	8005134 <__sflush_r+0x98>
 800512e:	0028      	movs	r0, r5
 8005130:	f000 f91c 	bl	800536c <_free_r>
 8005134:	2000      	movs	r0, #0
 8005136:	6360      	str	r0, [r4, #52]	; 0x34
 8005138:	e7bd      	b.n	80050b6 <__sflush_r+0x1a>
 800513a:	2301      	movs	r3, #1
 800513c:	0028      	movs	r0, r5
 800513e:	6a21      	ldr	r1, [r4, #32]
 8005140:	47b8      	blx	r7
 8005142:	1c43      	adds	r3, r0, #1
 8005144:	d1c5      	bne.n	80050d2 <__sflush_r+0x36>
 8005146:	682b      	ldr	r3, [r5, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0c2      	beq.n	80050d2 <__sflush_r+0x36>
 800514c:	2b1d      	cmp	r3, #29
 800514e:	d001      	beq.n	8005154 <__sflush_r+0xb8>
 8005150:	2b16      	cmp	r3, #22
 8005152:	d101      	bne.n	8005158 <__sflush_r+0xbc>
 8005154:	602e      	str	r6, [r5, #0]
 8005156:	e7ad      	b.n	80050b4 <__sflush_r+0x18>
 8005158:	2340      	movs	r3, #64	; 0x40
 800515a:	89a2      	ldrh	r2, [r4, #12]
 800515c:	4313      	orrs	r3, r2
 800515e:	81a3      	strh	r3, [r4, #12]
 8005160:	e7a9      	b.n	80050b6 <__sflush_r+0x1a>
 8005162:	2340      	movs	r3, #64	; 0x40
 8005164:	430b      	orrs	r3, r1
 8005166:	e7fa      	b.n	800515e <__sflush_r+0xc2>
 8005168:	690f      	ldr	r7, [r1, #16]
 800516a:	2f00      	cmp	r7, #0
 800516c:	d0a2      	beq.n	80050b4 <__sflush_r+0x18>
 800516e:	680a      	ldr	r2, [r1, #0]
 8005170:	600f      	str	r7, [r1, #0]
 8005172:	1bd2      	subs	r2, r2, r7
 8005174:	9201      	str	r2, [sp, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	079b      	lsls	r3, r3, #30
 800517a:	d100      	bne.n	800517e <__sflush_r+0xe2>
 800517c:	694a      	ldr	r2, [r1, #20]
 800517e:	60a2      	str	r2, [r4, #8]
 8005180:	9b01      	ldr	r3, [sp, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	dc00      	bgt.n	8005188 <__sflush_r+0xec>
 8005186:	e795      	b.n	80050b4 <__sflush_r+0x18>
 8005188:	003a      	movs	r2, r7
 800518a:	0028      	movs	r0, r5
 800518c:	9b01      	ldr	r3, [sp, #4]
 800518e:	6a21      	ldr	r1, [r4, #32]
 8005190:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005192:	47b0      	blx	r6
 8005194:	2800      	cmp	r0, #0
 8005196:	dc06      	bgt.n	80051a6 <__sflush_r+0x10a>
 8005198:	2340      	movs	r3, #64	; 0x40
 800519a:	2001      	movs	r0, #1
 800519c:	89a2      	ldrh	r2, [r4, #12]
 800519e:	4240      	negs	r0, r0
 80051a0:	4313      	orrs	r3, r2
 80051a2:	81a3      	strh	r3, [r4, #12]
 80051a4:	e787      	b.n	80050b6 <__sflush_r+0x1a>
 80051a6:	9b01      	ldr	r3, [sp, #4]
 80051a8:	183f      	adds	r7, r7, r0
 80051aa:	1a1b      	subs	r3, r3, r0
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	e7e7      	b.n	8005180 <__sflush_r+0xe4>
 80051b0:	20400001 	.word	0x20400001

080051b4 <_fflush_r>:
 80051b4:	690b      	ldr	r3, [r1, #16]
 80051b6:	b570      	push	{r4, r5, r6, lr}
 80051b8:	0005      	movs	r5, r0
 80051ba:	000c      	movs	r4, r1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d102      	bne.n	80051c6 <_fflush_r+0x12>
 80051c0:	2500      	movs	r5, #0
 80051c2:	0028      	movs	r0, r5
 80051c4:	bd70      	pop	{r4, r5, r6, pc}
 80051c6:	2800      	cmp	r0, #0
 80051c8:	d004      	beq.n	80051d4 <_fflush_r+0x20>
 80051ca:	6983      	ldr	r3, [r0, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <_fflush_r+0x20>
 80051d0:	f7ff f9f2 	bl	80045b8 <__sinit>
 80051d4:	4b14      	ldr	r3, [pc, #80]	; (8005228 <_fflush_r+0x74>)
 80051d6:	429c      	cmp	r4, r3
 80051d8:	d11b      	bne.n	8005212 <_fflush_r+0x5e>
 80051da:	686c      	ldr	r4, [r5, #4]
 80051dc:	220c      	movs	r2, #12
 80051de:	5ea3      	ldrsh	r3, [r4, r2]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d0ed      	beq.n	80051c0 <_fflush_r+0xc>
 80051e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051e6:	07d2      	lsls	r2, r2, #31
 80051e8:	d404      	bmi.n	80051f4 <_fflush_r+0x40>
 80051ea:	059b      	lsls	r3, r3, #22
 80051ec:	d402      	bmi.n	80051f4 <_fflush_r+0x40>
 80051ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051f0:	f7ff fa83 	bl	80046fa <__retarget_lock_acquire_recursive>
 80051f4:	0028      	movs	r0, r5
 80051f6:	0021      	movs	r1, r4
 80051f8:	f7ff ff50 	bl	800509c <__sflush_r>
 80051fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051fe:	0005      	movs	r5, r0
 8005200:	07db      	lsls	r3, r3, #31
 8005202:	d4de      	bmi.n	80051c2 <_fflush_r+0xe>
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	059b      	lsls	r3, r3, #22
 8005208:	d4db      	bmi.n	80051c2 <_fflush_r+0xe>
 800520a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800520c:	f7ff fa76 	bl	80046fc <__retarget_lock_release_recursive>
 8005210:	e7d7      	b.n	80051c2 <_fflush_r+0xe>
 8005212:	4b06      	ldr	r3, [pc, #24]	; (800522c <_fflush_r+0x78>)
 8005214:	429c      	cmp	r4, r3
 8005216:	d101      	bne.n	800521c <_fflush_r+0x68>
 8005218:	68ac      	ldr	r4, [r5, #8]
 800521a:	e7df      	b.n	80051dc <_fflush_r+0x28>
 800521c:	4b04      	ldr	r3, [pc, #16]	; (8005230 <_fflush_r+0x7c>)
 800521e:	429c      	cmp	r4, r3
 8005220:	d1dc      	bne.n	80051dc <_fflush_r+0x28>
 8005222:	68ec      	ldr	r4, [r5, #12]
 8005224:	e7da      	b.n	80051dc <_fflush_r+0x28>
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	080058e4 	.word	0x080058e4
 800522c:	08005904 	.word	0x08005904
 8005230:	080058c4 	.word	0x080058c4

08005234 <_lseek_r>:
 8005234:	b570      	push	{r4, r5, r6, lr}
 8005236:	0004      	movs	r4, r0
 8005238:	0008      	movs	r0, r1
 800523a:	0011      	movs	r1, r2
 800523c:	001a      	movs	r2, r3
 800523e:	2300      	movs	r3, #0
 8005240:	4d05      	ldr	r5, [pc, #20]	; (8005258 <_lseek_r+0x24>)
 8005242:	602b      	str	r3, [r5, #0]
 8005244:	f7fc fa75 	bl	8001732 <_lseek>
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	d103      	bne.n	8005254 <_lseek_r+0x20>
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d000      	beq.n	8005254 <_lseek_r+0x20>
 8005252:	6023      	str	r3, [r4, #0]
 8005254:	bd70      	pop	{r4, r5, r6, pc}
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	20000248 	.word	0x20000248

0800525c <__swhatbuf_r>:
 800525c:	b570      	push	{r4, r5, r6, lr}
 800525e:	000e      	movs	r6, r1
 8005260:	001d      	movs	r5, r3
 8005262:	230e      	movs	r3, #14
 8005264:	5ec9      	ldrsh	r1, [r1, r3]
 8005266:	0014      	movs	r4, r2
 8005268:	b096      	sub	sp, #88	; 0x58
 800526a:	2900      	cmp	r1, #0
 800526c:	da08      	bge.n	8005280 <__swhatbuf_r+0x24>
 800526e:	220c      	movs	r2, #12
 8005270:	5eb3      	ldrsh	r3, [r6, r2]
 8005272:	2200      	movs	r2, #0
 8005274:	602a      	str	r2, [r5, #0]
 8005276:	061b      	lsls	r3, r3, #24
 8005278:	d411      	bmi.n	800529e <__swhatbuf_r+0x42>
 800527a:	2380      	movs	r3, #128	; 0x80
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	e00f      	b.n	80052a0 <__swhatbuf_r+0x44>
 8005280:	466a      	mov	r2, sp
 8005282:	f000 f8d1 	bl	8005428 <_fstat_r>
 8005286:	2800      	cmp	r0, #0
 8005288:	dbf1      	blt.n	800526e <__swhatbuf_r+0x12>
 800528a:	23f0      	movs	r3, #240	; 0xf0
 800528c:	9901      	ldr	r1, [sp, #4]
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	4019      	ands	r1, r3
 8005292:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <__swhatbuf_r+0x4c>)
 8005294:	18c9      	adds	r1, r1, r3
 8005296:	424b      	negs	r3, r1
 8005298:	4159      	adcs	r1, r3
 800529a:	6029      	str	r1, [r5, #0]
 800529c:	e7ed      	b.n	800527a <__swhatbuf_r+0x1e>
 800529e:	2340      	movs	r3, #64	; 0x40
 80052a0:	2000      	movs	r0, #0
 80052a2:	6023      	str	r3, [r4, #0]
 80052a4:	b016      	add	sp, #88	; 0x58
 80052a6:	bd70      	pop	{r4, r5, r6, pc}
 80052a8:	ffffe000 	.word	0xffffe000

080052ac <__smakebuf_r>:
 80052ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052ae:	2602      	movs	r6, #2
 80052b0:	898b      	ldrh	r3, [r1, #12]
 80052b2:	0005      	movs	r5, r0
 80052b4:	000c      	movs	r4, r1
 80052b6:	4233      	tst	r3, r6
 80052b8:	d006      	beq.n	80052c8 <__smakebuf_r+0x1c>
 80052ba:	0023      	movs	r3, r4
 80052bc:	3347      	adds	r3, #71	; 0x47
 80052be:	6023      	str	r3, [r4, #0]
 80052c0:	6123      	str	r3, [r4, #16]
 80052c2:	2301      	movs	r3, #1
 80052c4:	6163      	str	r3, [r4, #20]
 80052c6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80052c8:	466a      	mov	r2, sp
 80052ca:	ab01      	add	r3, sp, #4
 80052cc:	f7ff ffc6 	bl	800525c <__swhatbuf_r>
 80052d0:	9900      	ldr	r1, [sp, #0]
 80052d2:	0007      	movs	r7, r0
 80052d4:	0028      	movs	r0, r5
 80052d6:	f7ff fa35 	bl	8004744 <_malloc_r>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d108      	bne.n	80052f0 <__smakebuf_r+0x44>
 80052de:	220c      	movs	r2, #12
 80052e0:	5ea3      	ldrsh	r3, [r4, r2]
 80052e2:	059a      	lsls	r2, r3, #22
 80052e4:	d4ef      	bmi.n	80052c6 <__smakebuf_r+0x1a>
 80052e6:	2203      	movs	r2, #3
 80052e8:	4393      	bics	r3, r2
 80052ea:	431e      	orrs	r6, r3
 80052ec:	81a6      	strh	r6, [r4, #12]
 80052ee:	e7e4      	b.n	80052ba <__smakebuf_r+0xe>
 80052f0:	4b0f      	ldr	r3, [pc, #60]	; (8005330 <__smakebuf_r+0x84>)
 80052f2:	62ab      	str	r3, [r5, #40]	; 0x28
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	89a2      	ldrh	r2, [r4, #12]
 80052f8:	6020      	str	r0, [r4, #0]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	81a3      	strh	r3, [r4, #12]
 80052fe:	9b00      	ldr	r3, [sp, #0]
 8005300:	6120      	str	r0, [r4, #16]
 8005302:	6163      	str	r3, [r4, #20]
 8005304:	9b01      	ldr	r3, [sp, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00d      	beq.n	8005326 <__smakebuf_r+0x7a>
 800530a:	0028      	movs	r0, r5
 800530c:	230e      	movs	r3, #14
 800530e:	5ee1      	ldrsh	r1, [r4, r3]
 8005310:	f000 f89c 	bl	800544c <_isatty_r>
 8005314:	2800      	cmp	r0, #0
 8005316:	d006      	beq.n	8005326 <__smakebuf_r+0x7a>
 8005318:	2203      	movs	r2, #3
 800531a:	89a3      	ldrh	r3, [r4, #12]
 800531c:	4393      	bics	r3, r2
 800531e:	001a      	movs	r2, r3
 8005320:	2301      	movs	r3, #1
 8005322:	4313      	orrs	r3, r2
 8005324:	81a3      	strh	r3, [r4, #12]
 8005326:	89a0      	ldrh	r0, [r4, #12]
 8005328:	4307      	orrs	r7, r0
 800532a:	81a7      	strh	r7, [r4, #12]
 800532c:	e7cb      	b.n	80052c6 <__smakebuf_r+0x1a>
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	0800453d 	.word	0x0800453d

08005334 <memchr>:
 8005334:	b2c9      	uxtb	r1, r1
 8005336:	1882      	adds	r2, r0, r2
 8005338:	4290      	cmp	r0, r2
 800533a:	d101      	bne.n	8005340 <memchr+0xc>
 800533c:	2000      	movs	r0, #0
 800533e:	4770      	bx	lr
 8005340:	7803      	ldrb	r3, [r0, #0]
 8005342:	428b      	cmp	r3, r1
 8005344:	d0fb      	beq.n	800533e <memchr+0xa>
 8005346:	3001      	adds	r0, #1
 8005348:	e7f6      	b.n	8005338 <memchr+0x4>
	...

0800534c <__malloc_lock>:
 800534c:	b510      	push	{r4, lr}
 800534e:	4802      	ldr	r0, [pc, #8]	; (8005358 <__malloc_lock+0xc>)
 8005350:	f7ff f9d3 	bl	80046fa <__retarget_lock_acquire_recursive>
 8005354:	bd10      	pop	{r4, pc}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	2000023c 	.word	0x2000023c

0800535c <__malloc_unlock>:
 800535c:	b510      	push	{r4, lr}
 800535e:	4802      	ldr	r0, [pc, #8]	; (8005368 <__malloc_unlock+0xc>)
 8005360:	f7ff f9cc 	bl	80046fc <__retarget_lock_release_recursive>
 8005364:	bd10      	pop	{r4, pc}
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	2000023c 	.word	0x2000023c

0800536c <_free_r>:
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	0005      	movs	r5, r0
 8005370:	2900      	cmp	r1, #0
 8005372:	d010      	beq.n	8005396 <_free_r+0x2a>
 8005374:	1f0c      	subs	r4, r1, #4
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	da00      	bge.n	800537e <_free_r+0x12>
 800537c:	18e4      	adds	r4, r4, r3
 800537e:	0028      	movs	r0, r5
 8005380:	f7ff ffe4 	bl	800534c <__malloc_lock>
 8005384:	4a1d      	ldr	r2, [pc, #116]	; (80053fc <_free_r+0x90>)
 8005386:	6813      	ldr	r3, [r2, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d105      	bne.n	8005398 <_free_r+0x2c>
 800538c:	6063      	str	r3, [r4, #4]
 800538e:	6014      	str	r4, [r2, #0]
 8005390:	0028      	movs	r0, r5
 8005392:	f7ff ffe3 	bl	800535c <__malloc_unlock>
 8005396:	bd70      	pop	{r4, r5, r6, pc}
 8005398:	42a3      	cmp	r3, r4
 800539a:	d908      	bls.n	80053ae <_free_r+0x42>
 800539c:	6821      	ldr	r1, [r4, #0]
 800539e:	1860      	adds	r0, r4, r1
 80053a0:	4283      	cmp	r3, r0
 80053a2:	d1f3      	bne.n	800538c <_free_r+0x20>
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	1841      	adds	r1, r0, r1
 80053aa:	6021      	str	r1, [r4, #0]
 80053ac:	e7ee      	b.n	800538c <_free_r+0x20>
 80053ae:	001a      	movs	r2, r3
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <_free_r+0x4e>
 80053b6:	42a3      	cmp	r3, r4
 80053b8:	d9f9      	bls.n	80053ae <_free_r+0x42>
 80053ba:	6811      	ldr	r1, [r2, #0]
 80053bc:	1850      	adds	r0, r2, r1
 80053be:	42a0      	cmp	r0, r4
 80053c0:	d10b      	bne.n	80053da <_free_r+0x6e>
 80053c2:	6820      	ldr	r0, [r4, #0]
 80053c4:	1809      	adds	r1, r1, r0
 80053c6:	1850      	adds	r0, r2, r1
 80053c8:	6011      	str	r1, [r2, #0]
 80053ca:	4283      	cmp	r3, r0
 80053cc:	d1e0      	bne.n	8005390 <_free_r+0x24>
 80053ce:	6818      	ldr	r0, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	1841      	adds	r1, r0, r1
 80053d4:	6011      	str	r1, [r2, #0]
 80053d6:	6053      	str	r3, [r2, #4]
 80053d8:	e7da      	b.n	8005390 <_free_r+0x24>
 80053da:	42a0      	cmp	r0, r4
 80053dc:	d902      	bls.n	80053e4 <_free_r+0x78>
 80053de:	230c      	movs	r3, #12
 80053e0:	602b      	str	r3, [r5, #0]
 80053e2:	e7d5      	b.n	8005390 <_free_r+0x24>
 80053e4:	6821      	ldr	r1, [r4, #0]
 80053e6:	1860      	adds	r0, r4, r1
 80053e8:	4283      	cmp	r3, r0
 80053ea:	d103      	bne.n	80053f4 <_free_r+0x88>
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	1841      	adds	r1, r0, r1
 80053f2:	6021      	str	r1, [r4, #0]
 80053f4:	6063      	str	r3, [r4, #4]
 80053f6:	6054      	str	r4, [r2, #4]
 80053f8:	e7ca      	b.n	8005390 <_free_r+0x24>
 80053fa:	46c0      	nop			; (mov r8, r8)
 80053fc:	20000240 	.word	0x20000240

08005400 <_read_r>:
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	0004      	movs	r4, r0
 8005404:	0008      	movs	r0, r1
 8005406:	0011      	movs	r1, r2
 8005408:	001a      	movs	r2, r3
 800540a:	2300      	movs	r3, #0
 800540c:	4d05      	ldr	r5, [pc, #20]	; (8005424 <_read_r+0x24>)
 800540e:	602b      	str	r3, [r5, #0]
 8005410:	f7fc f935 	bl	800167e <_read>
 8005414:	1c43      	adds	r3, r0, #1
 8005416:	d103      	bne.n	8005420 <_read_r+0x20>
 8005418:	682b      	ldr	r3, [r5, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d000      	beq.n	8005420 <_read_r+0x20>
 800541e:	6023      	str	r3, [r4, #0]
 8005420:	bd70      	pop	{r4, r5, r6, pc}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	20000248 	.word	0x20000248

08005428 <_fstat_r>:
 8005428:	2300      	movs	r3, #0
 800542a:	b570      	push	{r4, r5, r6, lr}
 800542c:	4d06      	ldr	r5, [pc, #24]	; (8005448 <_fstat_r+0x20>)
 800542e:	0004      	movs	r4, r0
 8005430:	0008      	movs	r0, r1
 8005432:	0011      	movs	r1, r2
 8005434:	602b      	str	r3, [r5, #0]
 8005436:	f7fc f965 	bl	8001704 <_fstat>
 800543a:	1c43      	adds	r3, r0, #1
 800543c:	d103      	bne.n	8005446 <_fstat_r+0x1e>
 800543e:	682b      	ldr	r3, [r5, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d000      	beq.n	8005446 <_fstat_r+0x1e>
 8005444:	6023      	str	r3, [r4, #0]
 8005446:	bd70      	pop	{r4, r5, r6, pc}
 8005448:	20000248 	.word	0x20000248

0800544c <_isatty_r>:
 800544c:	2300      	movs	r3, #0
 800544e:	b570      	push	{r4, r5, r6, lr}
 8005450:	4d06      	ldr	r5, [pc, #24]	; (800546c <_isatty_r+0x20>)
 8005452:	0004      	movs	r4, r0
 8005454:	0008      	movs	r0, r1
 8005456:	602b      	str	r3, [r5, #0]
 8005458:	f7fc f962 	bl	8001720 <_isatty>
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d103      	bne.n	8005468 <_isatty_r+0x1c>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d000      	beq.n	8005468 <_isatty_r+0x1c>
 8005466:	6023      	str	r3, [r4, #0]
 8005468:	bd70      	pop	{r4, r5, r6, pc}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	20000248 	.word	0x20000248

08005470 <_init>:
 8005470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005476:	bc08      	pop	{r3}
 8005478:	469e      	mov	lr, r3
 800547a:	4770      	bx	lr

0800547c <_fini>:
 800547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005482:	bc08      	pop	{r3}
 8005484:	469e      	mov	lr, r3
 8005486:	4770      	bx	lr
