
sinking-clock_master_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e54  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  08006f10  08006f10  00016f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007548  08007548  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08007548  08007548  00017548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007550  08007550  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007550  08007550  00017550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007554  08007554  00017554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08007558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200000a0  080075f8  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  080075f8  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154de  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002898  00000000  00000000  000355a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00037e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  00039108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d11  00000000  00000000  0003a2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165ef  00000000  00000000  00052fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009db4d  00000000  00000000  000695c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107115  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cac  00000000  00000000  00107168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000a0 	.word	0x200000a0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006ef8 	.word	0x08006ef8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a4 	.word	0x200000a4
 8000100:	08006ef8 	.word	0x08006ef8

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	469b      	mov	fp, r3
 80002a6:	d433      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a8:	465a      	mov	r2, fp
 80002aa:	4653      	mov	r3, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83a      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e078      	b.n	80003b4 <__udivmoddi4+0x144>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e075      	b.n	80003ba <__udivmoddi4+0x14a>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e028      	b.n	800033a <__udivmoddi4+0xca>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	2320      	movs	r3, #32
 8000314:	1a9b      	subs	r3, r3, r2
 8000316:	4652      	mov	r2, sl
 8000318:	40da      	lsrs	r2, r3
 800031a:	4641      	mov	r1, r8
 800031c:	0013      	movs	r3, r2
 800031e:	464a      	mov	r2, r9
 8000320:	408a      	lsls	r2, r1
 8000322:	0017      	movs	r7, r2
 8000324:	4642      	mov	r2, r8
 8000326:	431f      	orrs	r7, r3
 8000328:	4653      	mov	r3, sl
 800032a:	4093      	lsls	r3, r2
 800032c:	001e      	movs	r6, r3
 800032e:	42af      	cmp	r7, r5
 8000330:	d9c4      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0d9      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000340:	07fb      	lsls	r3, r7, #31
 8000342:	0872      	lsrs	r2, r6, #1
 8000344:	431a      	orrs	r2, r3
 8000346:	4646      	mov	r6, r8
 8000348:	087b      	lsrs	r3, r7, #1
 800034a:	e00e      	b.n	800036a <__udivmoddi4+0xfa>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d101      	bne.n	8000354 <__udivmoddi4+0xe4>
 8000350:	42a2      	cmp	r2, r4
 8000352:	d80c      	bhi.n	800036e <__udivmoddi4+0xfe>
 8000354:	1aa4      	subs	r4, r4, r2
 8000356:	419d      	sbcs	r5, r3
 8000358:	2001      	movs	r0, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2100      	movs	r1, #0
 8000360:	3e01      	subs	r6, #1
 8000362:	1824      	adds	r4, r4, r0
 8000364:	414d      	adcs	r5, r1
 8000366:	2e00      	cmp	r6, #0
 8000368:	d006      	beq.n	8000378 <__udivmoddi4+0x108>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d9ee      	bls.n	800034c <__udivmoddi4+0xdc>
 800036e:	3e01      	subs	r6, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2e00      	cmp	r6, #0
 8000376:	d1f8      	bne.n	800036a <__udivmoddi4+0xfa>
 8000378:	9800      	ldr	r0, [sp, #0]
 800037a:	9901      	ldr	r1, [sp, #4]
 800037c:	465b      	mov	r3, fp
 800037e:	1900      	adds	r0, r0, r4
 8000380:	4169      	adcs	r1, r5
 8000382:	2b00      	cmp	r3, #0
 8000384:	db24      	blt.n	80003d0 <__udivmoddi4+0x160>
 8000386:	002b      	movs	r3, r5
 8000388:	465a      	mov	r2, fp
 800038a:	4644      	mov	r4, r8
 800038c:	40d3      	lsrs	r3, r2
 800038e:	002a      	movs	r2, r5
 8000390:	40e2      	lsrs	r2, r4
 8000392:	001c      	movs	r4, r3
 8000394:	465b      	mov	r3, fp
 8000396:	0015      	movs	r5, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	db2a      	blt.n	80003f2 <__udivmoddi4+0x182>
 800039c:	0026      	movs	r6, r4
 800039e:	409e      	lsls	r6, r3
 80003a0:	0033      	movs	r3, r6
 80003a2:	0026      	movs	r6, r4
 80003a4:	4647      	mov	r7, r8
 80003a6:	40be      	lsls	r6, r7
 80003a8:	0032      	movs	r2, r6
 80003aa:	1a80      	subs	r0, r0, r2
 80003ac:	4199      	sbcs	r1, r3
 80003ae:	9000      	str	r0, [sp, #0]
 80003b0:	9101      	str	r1, [sp, #4]
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b4:	42a3      	cmp	r3, r4
 80003b6:	d8bc      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80003b8:	e783      	b.n	80002c2 <__udivmoddi4+0x52>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	2100      	movs	r1, #0
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	2200      	movs	r2, #0
 80003c4:	9100      	str	r1, [sp, #0]
 80003c6:	9201      	str	r2, [sp, #4]
 80003c8:	2201      	movs	r2, #1
 80003ca:	40da      	lsrs	r2, r3
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	e786      	b.n	80002de <__udivmoddi4+0x6e>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	4646      	mov	r6, r8
 80003da:	409a      	lsls	r2, r3
 80003dc:	0023      	movs	r3, r4
 80003de:	40f3      	lsrs	r3, r6
 80003e0:	4644      	mov	r4, r8
 80003e2:	4313      	orrs	r3, r2
 80003e4:	002a      	movs	r2, r5
 80003e6:	40e2      	lsrs	r2, r4
 80003e8:	001c      	movs	r4, r3
 80003ea:	465b      	mov	r3, fp
 80003ec:	0015      	movs	r5, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dad4      	bge.n	800039c <__udivmoddi4+0x12c>
 80003f2:	4642      	mov	r2, r8
 80003f4:	002f      	movs	r7, r5
 80003f6:	2320      	movs	r3, #32
 80003f8:	0026      	movs	r6, r4
 80003fa:	4097      	lsls	r7, r2
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	40de      	lsrs	r6, r3
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7cd      	b.n	80003a2 <__udivmoddi4+0x132>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000464:	2301      	movs	r3, #1
 8000466:	425b      	negs	r3, r3
 8000468:	1d39      	adds	r1, r7, #4
 800046a:	4804      	ldr	r0, [pc, #16]	; (800047c <__io_putchar+0x20>)
 800046c:	2201      	movs	r2, #1
 800046e:	f005 f851 	bl	8005514 <HAL_UART_Transmit>
  return ch;
 8000472:	687b      	ldr	r3, [r7, #4]
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000188 	.word	0x20000188

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000484:	f001 fb3a 	bl	8001afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000488:	f000 f824 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f000 f9ce 	bl	800082c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000490:	f000 f998 	bl	80007c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000494:	f000 f86a 	bl	800056c <MX_I2C1_Init>
  MX_RTC_Init();
 8000498:	f000 f8a8 	bl	80005ec <MX_RTC_Init>
  MX_TIM16_Init();
 800049c:	f000 f96a 	bl	8000774 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  displayToggle = 2; 		// Display at 100% intensity for next display toggle
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <main+0x44>)
 80004a2:	2202      	movs	r2, #2
 80004a4:	701a      	strb	r2, [r3, #0]
  sevSeg_I2C1_Init();		//Initialize 7-seg
 80004a6:	f000 fa85 	bl	80009b4 <sevSeg_I2C1_Init>

  userAlarmToggle = false;			//Default to off
 80004aa:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <main+0x48>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
  __HAL_RTC_ALARMB_DISABLE(&hrtc);				// Deactivate alarm
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <main+0x4c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	699a      	ldr	r2, [r3, #24]
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <main+0x4c>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4905      	ldr	r1, [pc, #20]	; (80004d0 <main+0x50>)
 80004bc:	400a      	ands	r2, r1
 80004be:	619a      	str	r2, [r3, #24]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <main+0x40>
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	20000248 	.word	0x20000248
 80004c8:	20000249 	.word	0x20000249
 80004cc:	20000110 	.word	0x20000110
 80004d0:	fffffdff 	.word	0xfffffdff

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b093      	sub	sp, #76	; 0x4c
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	2410      	movs	r4, #16
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	0018      	movs	r0, r3
 80004e0:	2338      	movs	r3, #56	; 0x38
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f005 fd26 	bl	8005f36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ea:	003b      	movs	r3, r7
 80004ec:	0018      	movs	r0, r3
 80004ee:	2310      	movs	r3, #16
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f005 fd1f 	bl	8005f36 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f003 f8d3 	bl	80036a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	220a      	movs	r2, #10
 8000506:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2280      	movs	r2, #128	; 0x80
 800050c:	0052      	lsls	r2, r2, #1
 800050e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000510:	0021      	movs	r1, r4
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2240      	movs	r2, #64	; 0x40
 800051c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2201      	movs	r2, #1
 8000522:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052a:	187b      	adds	r3, r7, r1
 800052c:	0018      	movs	r0, r3
 800052e:	f003 f931 	bl	8003794 <HAL_RCC_OscConfig>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000536:	f001 f863 	bl	8001600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053a:	003b      	movs	r3, r7
 800053c:	2207      	movs	r2, #7
 800053e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000540:	003b      	movs	r3, r7
 8000542:	2200      	movs	r2, #0
 8000544:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000546:	003b      	movs	r3, r7
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800054c:	003b      	movs	r3, r7
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000552:	003b      	movs	r3, r7
 8000554:	2100      	movs	r1, #0
 8000556:	0018      	movs	r0, r3
 8000558:	f003 fc36 	bl	8003dc8 <HAL_RCC_ClockConfig>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000560:	f001 f84e 	bl	8001600 <Error_Handler>
  }
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	b013      	add	sp, #76	; 0x4c
 800056a:	bd90      	pop	{r4, r7, pc}

0800056c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <MX_I2C1_Init+0x74>)
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <MX_I2C1_Init+0x78>)
 8000574:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8000576:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <MX_I2C1_Init+0x74>)
 8000578:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <MX_I2C1_Init+0x7c>)
 800057a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <MX_I2C1_Init+0x74>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000582:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <MX_I2C1_Init+0x74>)
 8000584:	2201      	movs	r2, #1
 8000586:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000588:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <MX_I2C1_Init+0x74>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800058e:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <MX_I2C1_Init+0x74>)
 8000590:	2200      	movs	r2, #0
 8000592:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <MX_I2C1_Init+0x74>)
 8000596:	2200      	movs	r2, #0
 8000598:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_I2C1_Init+0x74>)
 800059c:	2200      	movs	r2, #0
 800059e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_I2C1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <MX_I2C1_Init+0x74>)
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fe53 	bl	8002254 <HAL_I2C_Init>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005b2:	f001 f825 	bl	8001600 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <MX_I2C1_Init+0x74>)
 80005b8:	2100      	movs	r1, #0
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 ffdc 	bl	8003578 <HAL_I2CEx_ConfigAnalogFilter>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005c4:	f001 f81c 	bl	8001600 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <MX_I2C1_Init+0x74>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	0018      	movs	r0, r3
 80005ce:	f003 f81f 	bl	8003610 <HAL_I2CEx_ConfigDigitalFilter>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005d6:	f001 f813 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200000bc 	.word	0x200000bc
 80005e4:	40005400 	.word	0x40005400
 80005e8:	0010061a 	.word	0x0010061a

080005ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b090      	sub	sp, #64	; 0x40
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005f2:	232c      	movs	r3, #44	; 0x2c
 80005f4:	18fb      	adds	r3, r7, r3
 80005f6:	0018      	movs	r0, r3
 80005f8:	2314      	movs	r3, #20
 80005fa:	001a      	movs	r2, r3
 80005fc:	2100      	movs	r1, #0
 80005fe:	f005 fc9a 	bl	8005f36 <memset>
  RTC_DateTypeDef sDate = {0};
 8000602:	2328      	movs	r3, #40	; 0x28
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800060a:	003b      	movs	r3, r7
 800060c:	0018      	movs	r0, r3
 800060e:	2328      	movs	r3, #40	; 0x28
 8000610:	001a      	movs	r2, r3
 8000612:	2100      	movs	r1, #0
 8000614:	f005 fc8f 	bl	8005f36 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000618:	4b52      	ldr	r3, [pc, #328]	; (8000764 <MX_RTC_Init+0x178>)
 800061a:	4a53      	ldr	r2, [pc, #332]	; (8000768 <MX_RTC_Init+0x17c>)
 800061c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800061e:	4b51      	ldr	r3, [pc, #324]	; (8000764 <MX_RTC_Init+0x178>)
 8000620:	2240      	movs	r2, #64	; 0x40
 8000622:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000624:	4b4f      	ldr	r3, [pc, #316]	; (8000764 <MX_RTC_Init+0x178>)
 8000626:	227f      	movs	r2, #127	; 0x7f
 8000628:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800062a:	4b4e      	ldr	r3, [pc, #312]	; (8000764 <MX_RTC_Init+0x178>)
 800062c:	22ff      	movs	r2, #255	; 0xff
 800062e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000630:	4b4c      	ldr	r3, [pc, #304]	; (8000764 <MX_RTC_Init+0x178>)
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000636:	4b4b      	ldr	r3, [pc, #300]	; (8000764 <MX_RTC_Init+0x178>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800063c:	4b49      	ldr	r3, [pc, #292]	; (8000764 <MX_RTC_Init+0x178>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000642:	4b48      	ldr	r3, [pc, #288]	; (8000764 <MX_RTC_Init+0x178>)
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	05d2      	lsls	r2, r2, #23
 8000648:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800064a:	4b46      	ldr	r3, [pc, #280]	; (8000764 <MX_RTC_Init+0x178>)
 800064c:	2200      	movs	r2, #0
 800064e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000650:	4b44      	ldr	r3, [pc, #272]	; (8000764 <MX_RTC_Init+0x178>)
 8000652:	0018      	movs	r0, r3
 8000654:	f003 fedc 	bl	8004410 <HAL_RTC_Init>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 800065c:	f000 ffd0 	bl	8001600 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000660:	212c      	movs	r1, #44	; 0x2c
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2200      	movs	r2, #0
 800066c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2200      	movs	r2, #0
 8000672:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2200      	movs	r2, #0
 800067e:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800068c:	1879      	adds	r1, r7, r1
 800068e:	4b35      	ldr	r3, [pc, #212]	; (8000764 <MX_RTC_Init+0x178>)
 8000690:	2201      	movs	r2, #1
 8000692:	0018      	movs	r0, r3
 8000694:	f003 ff5e 	bl	8004554 <HAL_RTC_SetTime>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d001      	beq.n	80006a0 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 800069c:	f000 ffb0 	bl	8001600 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006a0:	2128      	movs	r1, #40	; 0x28
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2201      	movs	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2201      	movs	r2, #1
 80006ac:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2201      	movs	r2, #1
 80006b2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006ba:	1879      	adds	r1, r7, r1
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <MX_RTC_Init+0x178>)
 80006be:	2201      	movs	r2, #1
 80006c0:	0018      	movs	r0, r3
 80006c2:	f004 f84b 	bl	800475c <HAL_RTC_SetDate>
 80006c6:	1e03      	subs	r3, r0, #0
 80006c8:	d001      	beq.n	80006ce <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 80006ca:	f000 ff99 	bl	8001600 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 80006ce:	003b      	movs	r3, r7
 80006d0:	2201      	movs	r2, #1
 80006d2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 80006d4:	003b      	movs	r3, r7
 80006d6:	2201      	movs	r2, #1
 80006d8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80006da:	003b      	movs	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80006e0:	003b      	movs	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80006e6:	003b      	movs	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006ec:	003b      	movs	r3, r7
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006f2:	003b      	movs	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80006f8:	003b      	movs	r3, r7
 80006fa:	4a1c      	ldr	r2, [pc, #112]	; (800076c <MX_RTC_Init+0x180>)
 80006fc:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80006fe:	003b      	movs	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000704:	003b      	movs	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800070a:	003b      	movs	r3, r7
 800070c:	2220      	movs	r2, #32
 800070e:	2101      	movs	r1, #1
 8000710:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000712:	003b      	movs	r3, r7
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800071a:	0039      	movs	r1, r7
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_RTC_Init+0x178>)
 800071e:	2201      	movs	r2, #1
 8000720:	0018      	movs	r0, r3
 8000722:	f004 fa21 	bl	8004b68 <HAL_RTC_SetAlarm_IT>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <MX_RTC_Init+0x142>
  {
    Error_Handler();
 800072a:	f000 ff69 	bl	8001600 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Hours = 0x2;
 800072e:	003b      	movs	r3, r7
 8000730:	2202      	movs	r2, #2
 8000732:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000734:	003b      	movs	r3, r7
 8000736:	2200      	movs	r2, #0
 8000738:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 800073a:	003b      	movs	r3, r7
 800073c:	4a0c      	ldr	r2, [pc, #48]	; (8000770 <MX_RTC_Init+0x184>)
 800073e:	615a      	str	r2, [r3, #20]
  sAlarm.Alarm = RTC_ALARM_B;
 8000740:	003b      	movs	r3, r7
 8000742:	2280      	movs	r2, #128	; 0x80
 8000744:	0092      	lsls	r2, r2, #2
 8000746:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000748:	0039      	movs	r1, r7
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_RTC_Init+0x178>)
 800074c:	2201      	movs	r2, #1
 800074e:	0018      	movs	r0, r3
 8000750:	f004 fa0a 	bl	8004b68 <HAL_RTC_SetAlarm_IT>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_RTC_Init+0x170>
  {
    Error_Handler();
 8000758:	f000 ff52 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b010      	add	sp, #64	; 0x40
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000110 	.word	0x20000110
 8000768:	40002800 	.word	0x40002800
 800076c:	80800080 	.word	0x80800080
 8000770:	80808080 	.word	0x80808080

08000774 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_TIM16_Init+0x44>)
 800077a:	4a10      	ldr	r2, [pc, #64]	; (80007bc <MX_TIM16_Init+0x48>)
 800077c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 244;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_TIM16_Init+0x44>)
 8000780:	22f4      	movs	r2, #244	; 0xf4
 8000782:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_TIM16_Init+0x44>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_TIM16_Init+0x44>)
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <MX_TIM16_Init+0x4c>)
 800078e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_TIM16_Init+0x44>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_TIM16_Init+0x44>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_TIM16_Init+0x44>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <MX_TIM16_Init+0x44>)
 80007a4:	0018      	movs	r0, r3
 80007a6:	f004 fd1e 	bl	80051e6 <HAL_TIM_Base_Init>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80007ae:	f000 ff27 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	2000013c 	.word	0x2000013c
 80007bc:	40014400 	.word	0x40014400
 80007c0:	0000ffff 	.word	0x0000ffff

080007c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_USART2_UART_Init+0x60>)
 80007ca:	4a17      	ldr	r2, [pc, #92]	; (8000828 <MX_USART2_UART_Init+0x64>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_USART2_UART_Init+0x60>)
 80007d0:	22e1      	movs	r2, #225	; 0xe1
 80007d2:	0252      	lsls	r2, r2, #9
 80007d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_USART2_UART_Init+0x60>)
 80007d8:	2280      	movs	r2, #128	; 0x80
 80007da:	0152      	lsls	r2, r2, #5
 80007dc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_USART2_UART_Init+0x60>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_USART2_UART_Init+0x60>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_USART2_UART_Init+0x60>)
 80007ec:	220c      	movs	r2, #12
 80007ee:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_USART2_UART_Init+0x60>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_USART2_UART_Init+0x60>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_USART2_UART_Init+0x60>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_USART2_UART_Init+0x60>)
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_USART2_UART_Init+0x60>)
 800080a:	2200      	movs	r2, #0
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <MX_USART2_UART_Init+0x60>)
 8000810:	0018      	movs	r0, r3
 8000812:	f004 fe29 	bl	8005468 <HAL_UART_Init>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800081a:	f000 fef1 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000188 	.word	0x20000188
 8000828:	40004400 	.word	0x40004400

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b08b      	sub	sp, #44	; 0x2c
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	2414      	movs	r4, #20
 8000834:	193b      	adds	r3, r7, r4
 8000836:	0018      	movs	r0, r3
 8000838:	2314      	movs	r3, #20
 800083a:	001a      	movs	r2, r3
 800083c:	2100      	movs	r1, #0
 800083e:	f005 fb7a 	bl	8005f36 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b57      	ldr	r3, [pc, #348]	; (80009a0 <MX_GPIO_Init+0x174>)
 8000844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000846:	4b56      	ldr	r3, [pc, #344]	; (80009a0 <MX_GPIO_Init+0x174>)
 8000848:	2102      	movs	r1, #2
 800084a:	430a      	orrs	r2, r1
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
 800084e:	4b54      	ldr	r3, [pc, #336]	; (80009a0 <MX_GPIO_Init+0x174>)
 8000850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000852:	2202      	movs	r2, #2
 8000854:	4013      	ands	r3, r2
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b51      	ldr	r3, [pc, #324]	; (80009a0 <MX_GPIO_Init+0x174>)
 800085c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800085e:	4b50      	ldr	r3, [pc, #320]	; (80009a0 <MX_GPIO_Init+0x174>)
 8000860:	2104      	movs	r1, #4
 8000862:	430a      	orrs	r2, r1
 8000864:	635a      	str	r2, [r3, #52]	; 0x34
 8000866:	4b4e      	ldr	r3, [pc, #312]	; (80009a0 <MX_GPIO_Init+0x174>)
 8000868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800086a:	2204      	movs	r2, #4
 800086c:	4013      	ands	r3, r2
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000872:	4b4b      	ldr	r3, [pc, #300]	; (80009a0 <MX_GPIO_Init+0x174>)
 8000874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000876:	4b4a      	ldr	r3, [pc, #296]	; (80009a0 <MX_GPIO_Init+0x174>)
 8000878:	2120      	movs	r1, #32
 800087a:	430a      	orrs	r2, r1
 800087c:	635a      	str	r2, [r3, #52]	; 0x34
 800087e:	4b48      	ldr	r3, [pc, #288]	; (80009a0 <MX_GPIO_Init+0x174>)
 8000880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000882:	2220      	movs	r2, #32
 8000884:	4013      	ands	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b45      	ldr	r3, [pc, #276]	; (80009a0 <MX_GPIO_Init+0x174>)
 800088c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800088e:	4b44      	ldr	r3, [pc, #272]	; (80009a0 <MX_GPIO_Init+0x174>)
 8000890:	2101      	movs	r1, #1
 8000892:	430a      	orrs	r2, r1
 8000894:	635a      	str	r2, [r3, #52]	; 0x34
 8000896:	4b42      	ldr	r3, [pc, #264]	; (80009a0 <MX_GPIO_Init+0x174>)
 8000898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800089a:	2201      	movs	r2, #1
 800089c:	4013      	ands	r3, r2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Output_Pin|PM_LED_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);
 80008a2:	4b40      	ldr	r3, [pc, #256]	; (80009a4 <MX_GPIO_Init+0x178>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	21c2      	movs	r1, #194	; 0xc2
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 fc82 	bl	80021b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008ae:	4b3e      	ldr	r3, [pc, #248]	; (80009a8 <MX_GPIO_Init+0x17c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	2140      	movs	r1, #64	; 0x40
 80008b4:	0018      	movs	r0, r3
 80008b6:	f001 fc7c 	bl	80021b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	2204      	movs	r2, #4
 80008be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	2288      	movs	r2, #136	; 0x88
 80008c4:	0352      	lsls	r2, r2, #13
 80008c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	4a36      	ldr	r2, [pc, #216]	; (80009ac <MX_GPIO_Init+0x180>)
 80008d2:	0019      	movs	r1, r3
 80008d4:	0010      	movs	r0, r2
 80008d6:	f001 faeb 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_Button_Pin Alarm_Set_Button_Pin Alarm_Enable_Button_Pin Hour_Set_Button_Pin
                           Minute_Set_Button_Pin */
  GPIO_InitStruct.Pin = Display_Button_Pin|Alarm_Set_Button_Pin|Alarm_Enable_Button_Pin|Hour_Set_Button_Pin
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	4a34      	ldr	r2, [pc, #208]	; (80009b0 <MX_GPIO_Init+0x184>)
 80008de:	601a      	str	r2, [r3, #0]
                          |Minute_Set_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2284      	movs	r2, #132	; 0x84
 80008e4:	0392      	lsls	r2, r2, #14
 80008e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	2201      	movs	r2, #1
 80008ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	193a      	adds	r2, r7, r4
 80008f0:	23a0      	movs	r3, #160	; 0xa0
 80008f2:	05db      	lsls	r3, r3, #23
 80008f4:	0011      	movs	r1, r2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f001 fada 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Output_Pin PM_LED_Pin Alarm_LED_Pin */
  GPIO_InitStruct.Pin = Buzzer_Output_Pin|PM_LED_Pin|Alarm_LED_Pin;
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	22c2      	movs	r2, #194	; 0xc2
 8000900:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	193b      	adds	r3, r7, r4
 8000904:	2201      	movs	r2, #1
 8000906:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000914:	193b      	adds	r3, r7, r4
 8000916:	4a23      	ldr	r2, [pc, #140]	; (80009a4 <MX_GPIO_Init+0x178>)
 8000918:	0019      	movs	r1, r3
 800091a:	0010      	movs	r0, r2
 800091c:	f001 fac8 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000920:	193b      	adds	r3, r7, r4
 8000922:	2240      	movs	r2, #64	; 0x40
 8000924:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	193b      	adds	r3, r7, r4
 8000928:	2201      	movs	r2, #1
 800092a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000938:	193b      	adds	r3, r7, r4
 800093a:	4a1b      	ldr	r2, [pc, #108]	; (80009a8 <MX_GPIO_Init+0x17c>)
 800093c:	0019      	movs	r1, r3
 800093e:	0010      	movs	r0, r2
 8000940:	f001 fab6 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Snooze_Button_Pin */
  GPIO_InitStruct.Pin = Snooze_Button_Pin;
 8000944:	0021      	movs	r1, r4
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2280      	movs	r2, #128	; 0x80
 800094a:	0112      	lsls	r2, r2, #4
 800094c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2201      	movs	r2, #1
 8000958:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Snooze_Button_GPIO_Port, &GPIO_InitStruct);
 800095a:	187a      	adds	r2, r7, r1
 800095c:	23a0      	movs	r3, #160	; 0xa0
 800095e:	05db      	lsls	r3, r3, #23
 8000960:	0011      	movs	r1, r2
 8000962:	0018      	movs	r0, r3
 8000964:	f001 faa4 	bl	8001eb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2101      	movs	r1, #1
 800096c:	2005      	movs	r0, #5
 800096e:	f001 f9f7 	bl	8001d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000972:	2005      	movs	r0, #5
 8000974:	f001 fa09 	bl	8001d8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2006      	movs	r0, #6
 800097e:	f001 f9ef 	bl	8001d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000982:	2006      	movs	r0, #6
 8000984:	f001 fa01 	bl	8001d8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2007      	movs	r0, #7
 800098e:	f001 f9e7 	bl	8001d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000992:	2007      	movs	r0, #7
 8000994:	f001 f9f9 	bl	8001d8a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b00b      	add	sp, #44	; 0x2c
 800099e:	bd90      	pop	{r4, r7, pc}
 80009a0:	40021000 	.word	0x40021000
 80009a4:	50000400 	.word	0x50000400
 80009a8:	50000800 	.word	0x50000800
 80009ac:	50001400 	.word	0x50001400
 80009b0:	00001033 	.word	0x00001033

080009b4 <sevSeg_I2C1_Init>:

/* USER CODE BEGIN 4 */

void sevSeg_I2C1_Init(void) {
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af02      	add	r7, sp, #8
	 */

	HAL_StatusTypeDef halRet;

	//Set display to decode hex data inputs
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_decodeBuffer, 2, HAL_MAX_DELAY);
 80009ba:	4b66      	ldr	r3, [pc, #408]	; (8000b54 <sevSeg_I2C1_Init+0x1a0>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b299      	uxth	r1, r3
 80009c0:	1dfc      	adds	r4, r7, #7
 80009c2:	4a65      	ldr	r2, [pc, #404]	; (8000b58 <sevSeg_I2C1_Init+0x1a4>)
 80009c4:	4865      	ldr	r0, [pc, #404]	; (8000b5c <sevSeg_I2C1_Init+0x1a8>)
 80009c6:	2301      	movs	r3, #1
 80009c8:	425b      	negs	r3, r3
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2302      	movs	r3, #2
 80009ce:	f001 fcd7 	bl	8002380 <HAL_I2C_Master_Transmit>
 80009d2:	0003      	movs	r3, r0
 80009d4:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d004      	beq.n	80009e8 <sevSeg_I2C1_Init+0x34>
		printf("HAL Error - TX decode mode\n\r");
 80009de:	4b60      	ldr	r3, [pc, #384]	; (8000b60 <sevSeg_I2C1_Init+0x1ac>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f005 fab1 	bl	8005f48 <iprintf>
 80009e6:	e003      	b.n	80009f0 <sevSeg_I2C1_Init+0x3c>
	} else{
		printf("Display set to decode mode\n\r");
 80009e8:	4b5e      	ldr	r3, [pc, #376]	; (8000b64 <sevSeg_I2C1_Init+0x1b0>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f005 faac 	bl	8005f48 <iprintf>
	}

	//Disable shutdown mode
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_SD_ONBuff, 2, HAL_MAX_DELAY);
 80009f0:	4b58      	ldr	r3, [pc, #352]	; (8000b54 <sevSeg_I2C1_Init+0x1a0>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b299      	uxth	r1, r3
 80009f6:	1dfc      	adds	r4, r7, #7
 80009f8:	4a5b      	ldr	r2, [pc, #364]	; (8000b68 <sevSeg_I2C1_Init+0x1b4>)
 80009fa:	4858      	ldr	r0, [pc, #352]	; (8000b5c <sevSeg_I2C1_Init+0x1a8>)
 80009fc:	2301      	movs	r3, #1
 80009fe:	425b      	negs	r3, r3
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2302      	movs	r3, #2
 8000a04:	f001 fcbc 	bl	8002380 <HAL_I2C_Master_Transmit>
 8000a08:	0003      	movs	r3, r0
 8000a0a:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d004      	beq.n	8000a1e <sevSeg_I2C1_Init+0x6a>
		printf("HAL Error - TX disable shutdown mode\n\r");
 8000a14:	4b55      	ldr	r3, [pc, #340]	; (8000b6c <sevSeg_I2C1_Init+0x1b8>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f005 fa96 	bl	8005f48 <iprintf>
 8000a1c:	e003      	b.n	8000a26 <sevSeg_I2C1_Init+0x72>
	} else {
		printf("Display shutdown mode disabled\n\r");
 8000a1e:	4b54      	ldr	r3, [pc, #336]	; (8000b70 <sevSeg_I2C1_Init+0x1bc>)
 8000a20:	0018      	movs	r0, r3
 8000a22:	f005 fa91 	bl	8005f48 <iprintf>
	}

	//Set to test mode
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_testONBuff, 2, HAL_MAX_DELAY);
 8000a26:	4b4b      	ldr	r3, [pc, #300]	; (8000b54 <sevSeg_I2C1_Init+0x1a0>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b299      	uxth	r1, r3
 8000a2c:	1dfc      	adds	r4, r7, #7
 8000a2e:	4a51      	ldr	r2, [pc, #324]	; (8000b74 <sevSeg_I2C1_Init+0x1c0>)
 8000a30:	484a      	ldr	r0, [pc, #296]	; (8000b5c <sevSeg_I2C1_Init+0x1a8>)
 8000a32:	2301      	movs	r3, #1
 8000a34:	425b      	negs	r3, r3
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	2302      	movs	r3, #2
 8000a3a:	f001 fca1 	bl	8002380 <HAL_I2C_Master_Transmit>
 8000a3e:	0003      	movs	r3, r0
 8000a40:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d004      	beq.n	8000a54 <sevSeg_I2C1_Init+0xa0>
		printf("HAL Error - TX test mode ON data\n\r");
 8000a4a:	4b4b      	ldr	r3, [pc, #300]	; (8000b78 <sevSeg_I2C1_Init+0x1c4>)
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f005 fa7b 	bl	8005f48 <iprintf>
 8000a52:	e003      	b.n	8000a5c <sevSeg_I2C1_Init+0xa8>
	} else {
		printf("Test mode enabled - all LEDs on\n\r");
 8000a54:	4b49      	ldr	r3, [pc, #292]	; (8000b7c <sevSeg_I2C1_Init+0x1c8>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f005 fa76 	bl	8005f48 <iprintf>
	}

	// Disable test mode
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_testOFFBuff, 2, HAL_MAX_DELAY);
 8000a5c:	4b3d      	ldr	r3, [pc, #244]	; (8000b54 <sevSeg_I2C1_Init+0x1a0>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b299      	uxth	r1, r3
 8000a62:	1dfc      	adds	r4, r7, #7
 8000a64:	4a46      	ldr	r2, [pc, #280]	; (8000b80 <sevSeg_I2C1_Init+0x1cc>)
 8000a66:	483d      	ldr	r0, [pc, #244]	; (8000b5c <sevSeg_I2C1_Init+0x1a8>)
 8000a68:	2301      	movs	r3, #1
 8000a6a:	425b      	negs	r3, r3
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2302      	movs	r3, #2
 8000a70:	f001 fc86 	bl	8002380 <HAL_I2C_Master_Transmit>
 8000a74:	0003      	movs	r3, r0
 8000a76:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d004      	beq.n	8000a8a <sevSeg_I2C1_Init+0xd6>
		printf("HAL Error - TX test mode OFF data\n\r");
 8000a80:	4b40      	ldr	r3, [pc, #256]	; (8000b84 <sevSeg_I2C1_Init+0x1d0>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f005 fa60 	bl	8005f48 <iprintf>
 8000a88:	e003      	b.n	8000a92 <sevSeg_I2C1_Init+0xde>
	} else {
		printf("Test mode disabled - all LEDs off\n\r");
 8000a8a:	4b3f      	ldr	r3, [pc, #252]	; (8000b88 <sevSeg_I2C1_Init+0x1d4>)
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f005 fa5b 	bl	8005f48 <iprintf>
	}

	sevSeg_intensityBuff[1] = sevSeg_intensityDuty[1];		// Initialize to 50% duty cycle
 8000a92:	2231      	movs	r2, #49	; 0x31
 8000a94:	4b3d      	ldr	r3, [pc, #244]	; (8000b8c <sevSeg_I2C1_Init+0x1d8>)
 8000a96:	705a      	strb	r2, [r3, #1]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_intensityBuff, 2, HAL_MAX_DELAY);
 8000a98:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <sevSeg_I2C1_Init+0x1a0>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b299      	uxth	r1, r3
 8000a9e:	1dfc      	adds	r4, r7, #7
 8000aa0:	4a3a      	ldr	r2, [pc, #232]	; (8000b8c <sevSeg_I2C1_Init+0x1d8>)
 8000aa2:	482e      	ldr	r0, [pc, #184]	; (8000b5c <sevSeg_I2C1_Init+0x1a8>)
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	425b      	negs	r3, r3
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	2302      	movs	r3, #2
 8000aac:	f001 fc68 	bl	8002380 <HAL_I2C_Master_Transmit>
 8000ab0:	0003      	movs	r3, r0
 8000ab2:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d004      	beq.n	8000ac6 <sevSeg_I2C1_Init+0x112>
		printf("HAL Error - TX intensity level data\n\r");
 8000abc:	4b34      	ldr	r3, [pc, #208]	; (8000b90 <sevSeg_I2C1_Init+0x1dc>)
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f005 fa42 	bl	8005f48 <iprintf>
 8000ac4:	e003      	b.n	8000ace <sevSeg_I2C1_Init+0x11a>
	} else {
		printf("Intensity Set\n\r");
 8000ac6:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <sevSeg_I2C1_Init+0x1e0>)
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f005 fa3d 	bl	8005f48 <iprintf>
	}

	// Set and display current time (12:00 A.M.)

	currTime.Hours = 12;
 8000ace:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <sevSeg_I2C1_Init+0x1e4>)
 8000ad0:	220c      	movs	r2, #12
 8000ad2:	701a      	strb	r2, [r3, #0]
	currTime.Minutes = 58;
 8000ad4:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <sevSeg_I2C1_Init+0x1e4>)
 8000ad6:	223a      	movs	r2, #58	; 0x3a
 8000ad8:	705a      	strb	r2, [r3, #1]
	currTime.Seconds = 50;
 8000ada:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <sevSeg_I2C1_Init+0x1e4>)
 8000adc:	2232      	movs	r2, #50	; 0x32
 8000ade:	709a      	strb	r2, [r3, #2]
	currTime.TimeFormat = RTC_HOURFORMAT12_AM;			//This is initially in the A.M., so P.M. LED is off.
 8000ae0:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <sevSeg_I2C1_Init+0x1e4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	70da      	strb	r2, [r3, #3]

	currDate.Year = 0;
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <sevSeg_I2C1_Init+0x1e8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	70da      	strb	r2, [r3, #3]
	currDate.Month = RTC_MONTH_JANUARY;
 8000aec:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <sevSeg_I2C1_Init+0x1e8>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	705a      	strb	r2, [r3, #1]
	currDate.Date = 0;
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <sevSeg_I2C1_Init+0x1e8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8000af8:	4927      	ldr	r1, [pc, #156]	; (8000b98 <sevSeg_I2C1_Init+0x1e4>)
 8000afa:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <sevSeg_I2C1_Init+0x1ec>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	0018      	movs	r0, r3
 8000b00:	f003 fd28 	bl	8004554 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 8000b04:	4925      	ldr	r1, [pc, #148]	; (8000b9c <sevSeg_I2C1_Init+0x1e8>)
 8000b06:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <sevSeg_I2C1_Init+0x1ec>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f003 fe26 	bl	800475c <HAL_RTC_SetDate>

	printf("Current time defaulted to: %d:%d:%d\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <sevSeg_I2C1_Init+0x1e4>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	0019      	movs	r1, r3
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <sevSeg_I2C1_Init+0x1e4>)
 8000b18:	785b      	ldrb	r3, [r3, #1]
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <sevSeg_I2C1_Init+0x1e4>)
 8000b1e:	789b      	ldrb	r3, [r3, #2]
 8000b20:	4820      	ldr	r0, [pc, #128]	; (8000ba4 <sevSeg_I2C1_Init+0x1f0>)
 8000b22:	f005 fa11 	bl	8005f48 <iprintf>

	halRet = updateAndDisplayTime();
 8000b26:	1dfc      	adds	r4, r7, #7
 8000b28:	f000 f842 	bl	8000bb0 <updateAndDisplayTime>
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d004      	beq.n	8000b42 <sevSeg_I2C1_Init+0x18e>
		printf("HAL Error - TX current time\n\r");
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <sevSeg_I2C1_Init+0x1f4>)
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f005 fa04 	bl	8005f48 <iprintf>
	} else {
		printf("Display Updated with current time\n\r");
	}

	return;
 8000b40:	e004      	b.n	8000b4c <sevSeg_I2C1_Init+0x198>
		printf("Display Updated with current time\n\r");
 8000b42:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <sevSeg_I2C1_Init+0x1f8>)
 8000b44:	0018      	movs	r0, r3
 8000b46:	f005 f9ff 	bl	8005f48 <iprintf>
	return;
 8000b4a:	46c0      	nop			; (mov r8, r8)

}
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b003      	add	sp, #12
 8000b50:	bd90      	pop	{r4, r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000004 	.word	0x20000004
 8000b5c:	200000bc 	.word	0x200000bc
 8000b60:	08006f10 	.word	0x08006f10
 8000b64:	08006f30 	.word	0x08006f30
 8000b68:	2000000c 	.word	0x2000000c
 8000b6c:	08006f50 	.word	0x08006f50
 8000b70:	08006f78 	.word	0x08006f78
 8000b74:	2000001c 	.word	0x2000001c
 8000b78:	08006f9c 	.word	0x08006f9c
 8000b7c:	08006fc0 	.word	0x08006fc0
 8000b80:	20000018 	.word	0x20000018
 8000b84:	08006fe4 	.word	0x08006fe4
 8000b88:	08007008 	.word	0x08007008
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	0800702c 	.word	0x0800702c
 8000b94:	08007054 	.word	0x08007054
 8000b98:	2000021c 	.word	0x2000021c
 8000b9c:	20000230 	.word	0x20000230
 8000ba0:	20000110 	.word	0x20000110
 8000ba4:	08007064 	.word	0x08007064
 8000ba8:	0800708c 	.word	0x0800708c
 8000bac:	080070ac 	.word	0x080070ac

08000bb0 <updateAndDisplayTime>:

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af02      	add	r7, sp, #8

	HAL_StatusTypeDef halRet = HAL_OK;
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]

	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8000bbc:	4941      	ldr	r1, [pc, #260]	; (8000cc4 <updateAndDisplayTime+0x114>)
 8000bbe:	4b42      	ldr	r3, [pc, #264]	; (8000cc8 <updateAndDisplayTime+0x118>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f003 fd6e 	bl	80046a4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 8000bc8:	4940      	ldr	r1, [pc, #256]	; (8000ccc <updateAndDisplayTime+0x11c>)
 8000bca:	4b3f      	ldr	r3, [pc, #252]	; (8000cc8 <updateAndDisplayTime+0x118>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f003 fe56 	bl	8004880 <HAL_RTC_GetDate>

	sevSeg_digit0Buff[1] = currTime.Hours / 10;
 8000bd4:	4b3b      	ldr	r3, [pc, #236]	; (8000cc4 <updateAndDisplayTime+0x114>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	210a      	movs	r1, #10
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff fa9c 	bl	8000118 <__udivsi3>
 8000be0:	0003      	movs	r3, r0
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	4b3a      	ldr	r3, [pc, #232]	; (8000cd0 <updateAndDisplayTime+0x120>)
 8000be6:	705a      	strb	r2, [r3, #1]
	sevSeg_digit1Buff[1] = currTime.Hours % 10;
 8000be8:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <updateAndDisplayTime+0x114>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	210a      	movs	r1, #10
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff fb18 	bl	8000224 <__aeabi_uidivmod>
 8000bf4:	000b      	movs	r3, r1
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b36      	ldr	r3, [pc, #216]	; (8000cd4 <updateAndDisplayTime+0x124>)
 8000bfa:	705a      	strb	r2, [r3, #1]
	sevSeg_digit2Buff[1] = currTime.Minutes / 10;
 8000bfc:	4b31      	ldr	r3, [pc, #196]	; (8000cc4 <updateAndDisplayTime+0x114>)
 8000bfe:	785b      	ldrb	r3, [r3, #1]
 8000c00:	210a      	movs	r1, #10
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff fa88 	bl	8000118 <__udivsi3>
 8000c08:	0003      	movs	r3, r0
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <updateAndDisplayTime+0x128>)
 8000c0e:	705a      	strb	r2, [r3, #1]
	sevSeg_digit3Buff[1] = currTime.Minutes % 10;
 8000c10:	4b2c      	ldr	r3, [pc, #176]	; (8000cc4 <updateAndDisplayTime+0x114>)
 8000c12:	785b      	ldrb	r3, [r3, #1]
 8000c14:	210a      	movs	r1, #10
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff fb04 	bl	8000224 <__aeabi_uidivmod>
 8000c1c:	000b      	movs	r3, r1
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <updateAndDisplayTime+0x12c>)
 8000c22:	705a      	strb	r2, [r3, #1]

	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit0Buff, 2, HAL_MAX_DELAY);
 8000c24:	4b2e      	ldr	r3, [pc, #184]	; (8000ce0 <updateAndDisplayTime+0x130>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	b299      	uxth	r1, r3
 8000c2a:	1dfc      	adds	r4, r7, #7
 8000c2c:	4a28      	ldr	r2, [pc, #160]	; (8000cd0 <updateAndDisplayTime+0x120>)
 8000c2e:	482d      	ldr	r0, [pc, #180]	; (8000ce4 <updateAndDisplayTime+0x134>)
 8000c30:	2301      	movs	r3, #1
 8000c32:	425b      	negs	r3, r3
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	2302      	movs	r3, #2
 8000c38:	f001 fba2 	bl	8002380 <HAL_I2C_Master_Transmit>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit1Buff, 2, HAL_MAX_DELAY);
 8000c40:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <updateAndDisplayTime+0x130>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b299      	uxth	r1, r3
 8000c46:	1dfc      	adds	r4, r7, #7
 8000c48:	4a22      	ldr	r2, [pc, #136]	; (8000cd4 <updateAndDisplayTime+0x124>)
 8000c4a:	4826      	ldr	r0, [pc, #152]	; (8000ce4 <updateAndDisplayTime+0x134>)
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	425b      	negs	r3, r3
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	2302      	movs	r3, #2
 8000c54:	f001 fb94 	bl	8002380 <HAL_I2C_Master_Transmit>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit2Buff, 2, HAL_MAX_DELAY);
 8000c5c:	4b20      	ldr	r3, [pc, #128]	; (8000ce0 <updateAndDisplayTime+0x130>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b299      	uxth	r1, r3
 8000c62:	1dfc      	adds	r4, r7, #7
 8000c64:	4a1c      	ldr	r2, [pc, #112]	; (8000cd8 <updateAndDisplayTime+0x128>)
 8000c66:	481f      	ldr	r0, [pc, #124]	; (8000ce4 <updateAndDisplayTime+0x134>)
 8000c68:	2301      	movs	r3, #1
 8000c6a:	425b      	negs	r3, r3
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2302      	movs	r3, #2
 8000c70:	f001 fb86 	bl	8002380 <HAL_I2C_Master_Transmit>
 8000c74:	0003      	movs	r3, r0
 8000c76:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit3Buff, 2, HAL_MAX_DELAY);
 8000c78:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <updateAndDisplayTime+0x130>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b299      	uxth	r1, r3
 8000c7e:	1dfc      	adds	r4, r7, #7
 8000c80:	4a16      	ldr	r2, [pc, #88]	; (8000cdc <updateAndDisplayTime+0x12c>)
 8000c82:	4818      	ldr	r0, [pc, #96]	; (8000ce4 <updateAndDisplayTime+0x134>)
 8000c84:	2301      	movs	r3, #1
 8000c86:	425b      	negs	r3, r3
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	f001 fb78 	bl	8002380 <HAL_I2C_Master_Transmit>
 8000c90:	0003      	movs	r3, r0
 8000c92:	7023      	strb	r3, [r4, #0]

	if(currTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <updateAndDisplayTime+0x114>)
 8000c96:	78db      	ldrb	r3, [r3, #3]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d106      	bne.n	8000caa <updateAndDisplayTime+0xfa>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000c9c:	2140      	movs	r1, #64	; 0x40
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <updateAndDisplayTime+0x138>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f001 fa85 	bl	80021b2 <HAL_GPIO_WritePin>
 8000ca8:	e005      	b.n	8000cb6 <updateAndDisplayTime+0x106>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000caa:	2140      	movs	r1, #64	; 0x40
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <updateAndDisplayTime+0x138>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f001 fa7e 	bl	80021b2 <HAL_GPIO_WritePin>
	}

	return halRet;
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	781b      	ldrb	r3, [r3, #0]

}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b003      	add	sp, #12
 8000cc0:	bd90      	pop	{r4, r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	2000021c 	.word	0x2000021c
 8000cc8:	20000110 	.word	0x20000110
 8000ccc:	20000230 	.word	0x20000230
 8000cd0:	20000020 	.word	0x20000020
 8000cd4:	20000024 	.word	0x20000024
 8000cd8:	20000028 	.word	0x20000028
 8000cdc:	2000002c 	.word	0x2000002c
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	200000bc 	.word	0x200000bc
 8000ce8:	50000400 	.word	0x50000400

08000cec <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8000cec:	b5b0      	push	{r4, r5, r7, lr}
 8000cee:	b08e      	sub	sp, #56	; 0x38
 8000cf0:	af02      	add	r7, sp, #8

	HAL_StatusTypeDef halRet = HAL_OK;
 8000cf2:	242f      	movs	r4, #47	; 0x2f
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef userAlarmObj;
	HAL_RTC_GetAlarm(&hrtc, &userAlarmObj, userAlarm, RTC_FORMAT_BCD);
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	009a      	lsls	r2, r3, #2
 8000cfe:	1d39      	adds	r1, r7, #4
 8000d00:	4841      	ldr	r0, [pc, #260]	; (8000e08 <updateAndDisplayAlarm+0x11c>)
 8000d02:	2301      	movs	r3, #1
 8000d04:	f004 f870 	bl	8004de8 <HAL_RTC_GetAlarm>
	userAlarmTime = userAlarmObj.AlarmTime;
 8000d08:	4b40      	ldr	r3, [pc, #256]	; (8000e0c <updateAndDisplayAlarm+0x120>)
 8000d0a:	1d3a      	adds	r2, r7, #4
 8000d0c:	ca23      	ldmia	r2!, {r0, r1, r5}
 8000d0e:	c323      	stmia	r3!, {r0, r1, r5}
 8000d10:	ca03      	ldmia	r2!, {r0, r1}
 8000d12:	c303      	stmia	r3!, {r0, r1}

	sevSeg_digit0Buff[1] = userAlarmTime.Hours / 10;
 8000d14:	4b3d      	ldr	r3, [pc, #244]	; (8000e0c <updateAndDisplayAlarm+0x120>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	210a      	movs	r1, #10
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f7ff f9fc 	bl	8000118 <__udivsi3>
 8000d20:	0003      	movs	r3, r0
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	4b3a      	ldr	r3, [pc, #232]	; (8000e10 <updateAndDisplayAlarm+0x124>)
 8000d26:	705a      	strb	r2, [r3, #1]
	sevSeg_digit1Buff[1] = userAlarmTime.Hours % 10;
 8000d28:	4b38      	ldr	r3, [pc, #224]	; (8000e0c <updateAndDisplayAlarm+0x120>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	210a      	movs	r1, #10
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f7ff fa78 	bl	8000224 <__aeabi_uidivmod>
 8000d34:	000b      	movs	r3, r1
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	4b36      	ldr	r3, [pc, #216]	; (8000e14 <updateAndDisplayAlarm+0x128>)
 8000d3a:	705a      	strb	r2, [r3, #1]
	sevSeg_digit2Buff[1] = userAlarmTime.Minutes / 10;
 8000d3c:	4b33      	ldr	r3, [pc, #204]	; (8000e0c <updateAndDisplayAlarm+0x120>)
 8000d3e:	785b      	ldrb	r3, [r3, #1]
 8000d40:	210a      	movs	r1, #10
 8000d42:	0018      	movs	r0, r3
 8000d44:	f7ff f9e8 	bl	8000118 <__udivsi3>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <updateAndDisplayAlarm+0x12c>)
 8000d4e:	705a      	strb	r2, [r3, #1]
	sevSeg_digit3Buff[1] = userAlarmTime.Minutes % 10;
 8000d50:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <updateAndDisplayAlarm+0x120>)
 8000d52:	785b      	ldrb	r3, [r3, #1]
 8000d54:	210a      	movs	r1, #10
 8000d56:	0018      	movs	r0, r3
 8000d58:	f7ff fa64 	bl	8000224 <__aeabi_uidivmod>
 8000d5c:	000b      	movs	r3, r1
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <updateAndDisplayAlarm+0x130>)
 8000d62:	705a      	strb	r2, [r3, #1]

	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit0Buff, 2, HAL_MAX_DELAY);
 8000d64:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <updateAndDisplayAlarm+0x134>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b299      	uxth	r1, r3
 8000d6a:	0025      	movs	r5, r4
 8000d6c:	197c      	adds	r4, r7, r5
 8000d6e:	4a28      	ldr	r2, [pc, #160]	; (8000e10 <updateAndDisplayAlarm+0x124>)
 8000d70:	482c      	ldr	r0, [pc, #176]	; (8000e24 <updateAndDisplayAlarm+0x138>)
 8000d72:	2301      	movs	r3, #1
 8000d74:	425b      	negs	r3, r3
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2302      	movs	r3, #2
 8000d7a:	f001 fb01 	bl	8002380 <HAL_I2C_Master_Transmit>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit1Buff, 2, HAL_MAX_DELAY);
 8000d82:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <updateAndDisplayAlarm+0x134>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b299      	uxth	r1, r3
 8000d88:	197c      	adds	r4, r7, r5
 8000d8a:	4a22      	ldr	r2, [pc, #136]	; (8000e14 <updateAndDisplayAlarm+0x128>)
 8000d8c:	4825      	ldr	r0, [pc, #148]	; (8000e24 <updateAndDisplayAlarm+0x138>)
 8000d8e:	2301      	movs	r3, #1
 8000d90:	425b      	negs	r3, r3
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2302      	movs	r3, #2
 8000d96:	f001 faf3 	bl	8002380 <HAL_I2C_Master_Transmit>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit2Buff, 2, HAL_MAX_DELAY);
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <updateAndDisplayAlarm+0x134>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b299      	uxth	r1, r3
 8000da4:	197c      	adds	r4, r7, r5
 8000da6:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <updateAndDisplayAlarm+0x12c>)
 8000da8:	481e      	ldr	r0, [pc, #120]	; (8000e24 <updateAndDisplayAlarm+0x138>)
 8000daa:	2301      	movs	r3, #1
 8000dac:	425b      	negs	r3, r3
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2302      	movs	r3, #2
 8000db2:	f001 fae5 	bl	8002380 <HAL_I2C_Master_Transmit>
 8000db6:	0003      	movs	r3, r0
 8000db8:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit3Buff, 2, HAL_MAX_DELAY);
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <updateAndDisplayAlarm+0x134>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b299      	uxth	r1, r3
 8000dc0:	197c      	adds	r4, r7, r5
 8000dc2:	4a16      	ldr	r2, [pc, #88]	; (8000e1c <updateAndDisplayAlarm+0x130>)
 8000dc4:	4817      	ldr	r0, [pc, #92]	; (8000e24 <updateAndDisplayAlarm+0x138>)
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	425b      	negs	r3, r3
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2302      	movs	r3, #2
 8000dce:	f001 fad7 	bl	8002380 <HAL_I2C_Master_Transmit>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	7023      	strb	r3, [r4, #0]

	if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <updateAndDisplayAlarm+0x120>)
 8000dd8:	78db      	ldrb	r3, [r3, #3]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d106      	bne.n	8000dec <updateAndDisplayAlarm+0x100>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000dde:	2140      	movs	r1, #64	; 0x40
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <updateAndDisplayAlarm+0x13c>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	0018      	movs	r0, r3
 8000de6:	f001 f9e4 	bl	80021b2 <HAL_GPIO_WritePin>
 8000dea:	e005      	b.n	8000df8 <updateAndDisplayAlarm+0x10c>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000dec:	2140      	movs	r1, #64	; 0x40
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <updateAndDisplayAlarm+0x13c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	0018      	movs	r0, r3
 8000df4:	f001 f9dd 	bl	80021b2 <HAL_GPIO_WritePin>
	}

	return halRet;
 8000df8:	232f      	movs	r3, #47	; 0x2f
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	781b      	ldrb	r3, [r3, #0]

}
 8000dfe:	0018      	movs	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b00c      	add	sp, #48	; 0x30
 8000e04:	bdb0      	pop	{r4, r5, r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	20000110 	.word	0x20000110
 8000e0c:	20000234 	.word	0x20000234
 8000e10:	20000020 	.word	0x20000020
 8000e14:	20000024 	.word	0x20000024
 8000e18:	20000028 	.word	0x20000028
 8000e1c:	2000002c 	.word	0x2000002c
 8000e20:	20000000 	.word	0x20000000
 8000e24:	200000bc 	.word	0x200000bc
 8000e28:	50000400 	.word	0x50000400

08000e2c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b093      	sub	sp, #76	; 0x4c
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

	  printf("Enter current time minute increment interrupt\n\r");
 8000e34:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <HAL_RTC_AlarmAEventCallback+0x94>)
 8000e36:	0018      	movs	r0, r3
 8000e38:	f005 f886 	bl	8005f48 <iprintf>

	  RTC_AlarmTypeDef sAlarm;
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, FORMAT_BIN);
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	005a      	lsls	r2, r3, #1
 8000e40:	2420      	movs	r4, #32
 8000e42:	1939      	adds	r1, r7, r4
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	2300      	movs	r3, #0
 8000e48:	f003 ffce 	bl	8004de8 <HAL_RTC_GetAlarm>

	  RTC_TimeTypeDef currTime;
	  RTC_DateTypeDef currDate;
	  HAL_RTC_GetTime(hrtc, &currTime, RTC_FORMAT_BIN);
 8000e4c:	230c      	movs	r3, #12
 8000e4e:	18f9      	adds	r1, r7, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	0018      	movs	r0, r3
 8000e56:	f003 fc25 	bl	80046a4 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(hrtc, &currDate, RTC_FORMAT_BIN);		//get date is necessary, else RTC will not update time
 8000e5a:	2308      	movs	r3, #8
 8000e5c:	18f9      	adds	r1, r7, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	0018      	movs	r0, r3
 8000e64:	f003 fd0c 	bl	8004880 <HAL_RTC_GetDate>

	  if(sAlarm.AlarmTime.Minutes>58) {
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	785b      	ldrb	r3, [r3, #1]
 8000e6c:	2b3a      	cmp	r3, #58	; 0x3a
 8000e6e:	d903      	bls.n	8000e78 <HAL_RTC_AlarmAEventCallback+0x4c>
		sAlarm.AlarmTime.Minutes=0;
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	2200      	movs	r2, #0
 8000e74:	705a      	strb	r2, [r3, #1]
 8000e76:	e006      	b.n	8000e86 <HAL_RTC_AlarmAEventCallback+0x5a>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8000e78:	2120      	movs	r1, #32
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	785b      	ldrb	r3, [r3, #1]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	2320      	movs	r3, #32
 8000e8a:	18f9      	adds	r1, r7, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	0018      	movs	r0, r3
 8000e92:	f003 fe69 	bl	8004b68 <HAL_RTC_SetAlarm_IT>
 8000e96:	1e03      	subs	r3, r0, #0
 8000e98:	d1f6      	bne.n	8000e88 <HAL_RTC_AlarmAEventCallback+0x5c>

	  updateAndDisplayTime();
 8000e9a:	f7ff fe89 	bl	8000bb0 <updateAndDisplayTime>

	  printf("Current time: %d : %d : %d\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000e9e:	200c      	movs	r0, #12
 8000ea0:	183b      	adds	r3, r7, r0
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	183b      	adds	r3, r7, r0
 8000ea8:	785b      	ldrb	r3, [r3, #1]
 8000eaa:	001a      	movs	r2, r3
 8000eac:	183b      	adds	r3, r7, r0
 8000eae:	789b      	ldrb	r3, [r3, #2]
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <HAL_RTC_AlarmAEventCallback+0x98>)
 8000eb2:	f005 f849 	bl	8005f48 <iprintf>

}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b013      	add	sp, #76	; 0x4c
 8000ebc:	bd90      	pop	{r4, r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	080070d0 	.word	0x080070d0
 8000ec4:	08007100 	.word	0x08007100

08000ec8 <HAL_GPIO_EXTI_Falling_Callback>:
	HAL_TIM_Base_Stop(&htim16);

}


void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	0002      	movs	r2, r0
 8000ed0:	1dbb      	adds	r3, r7, #6
 8000ed2:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	1dbb      	adds	r3, r7, #6
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d113      	bne.n	8000f06 <HAL_GPIO_EXTI_Falling_Callback+0x3e>
		halRet = displayButtonISR();
 8000ede:	250f      	movs	r5, #15
 8000ee0:	197c      	adds	r4, r7, r5
 8000ee2:	f000 f88f 	bl	8001004 <displayButtonISR>
 8000ee6:	0003      	movs	r3, r0
 8000ee8:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000eea:	197b      	adds	r3, r7, r5
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d004      	beq.n	8000efc <HAL_GPIO_EXTI_Falling_Callback+0x34>
			printf("Error toggling display.\n\r");
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <HAL_GPIO_EXTI_Falling_Callback+0x114>)
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f005 f827 	bl	8005f48 <iprintf>
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8000efa:	e06a      	b.n	8000fd2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Display intensity toggled.\n\r");
 8000efc:	4b38      	ldr	r3, [pc, #224]	; (8000fe0 <HAL_GPIO_EXTI_Falling_Callback+0x118>)
 8000efe:	0018      	movs	r0, r3
 8000f00:	f005 f822 	bl	8005f48 <iprintf>
}
 8000f04:	e065      	b.n	8000fd2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8000f06:	2210      	movs	r2, #16
 8000f08:	1dbb      	adds	r3, r7, #6
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d113      	bne.n	8000f38 <HAL_GPIO_EXTI_Falling_Callback+0x70>
		halRet = alarmEnableISR();
 8000f10:	250f      	movs	r5, #15
 8000f12:	197c      	adds	r4, r7, r5
 8000f14:	f000 f8b6 	bl	8001084 <alarmEnableISR>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000f1c:	197b      	adds	r3, r7, r5
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d004      	beq.n	8000f2e <HAL_GPIO_EXTI_Falling_Callback+0x66>
			printf("Error toggling user alarm.\n\r");
 8000f24:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <HAL_GPIO_EXTI_Falling_Callback+0x11c>)
 8000f26:	0018      	movs	r0, r3
 8000f28:	f005 f80e 	bl	8005f48 <iprintf>
}
 8000f2c:	e051      	b.n	8000fd2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm toggled.\n\r");
 8000f2e:	4b2e      	ldr	r3, [pc, #184]	; (8000fe8 <HAL_GPIO_EXTI_Falling_Callback+0x120>)
 8000f30:	0018      	movs	r0, r3
 8000f32:	f005 f809 	bl	8005f48 <iprintf>
}
 8000f36:	e04c      	b.n	8000fd2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8000f38:	2202      	movs	r2, #2
 8000f3a:	1dbb      	adds	r3, r7, #6
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d113      	bne.n	8000f6a <HAL_GPIO_EXTI_Falling_Callback+0xa2>
		halRet = alarmSetISR();
 8000f42:	250f      	movs	r5, #15
 8000f44:	197c      	adds	r4, r7, r5
 8000f46:	f000 f913 	bl	8001170 <alarmSetISR>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000f4e:	197b      	adds	r3, r7, r5
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d004      	beq.n	8000f60 <HAL_GPIO_EXTI_Falling_Callback+0x98>
			printf("Error setting user alarm.\n\r");
 8000f56:	4b25      	ldr	r3, [pc, #148]	; (8000fec <HAL_GPIO_EXTI_Falling_Callback+0x124>)
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f004 fff5 	bl	8005f48 <iprintf>
}
 8000f5e:	e038      	b.n	8000fd2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm set.\n\r");
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <HAL_GPIO_EXTI_Falling_Callback+0x128>)
 8000f62:	0018      	movs	r0, r3
 8000f64:	f004 fff0 	bl	8005f48 <iprintf>
}
 8000f68:	e033      	b.n	8000fd2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == hourSetButtonPin) {
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	1dbb      	adds	r3, r7, #6
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d113      	bne.n	8000f9c <HAL_GPIO_EXTI_Falling_Callback+0xd4>
		halRet = hourSetISR();
 8000f74:	250f      	movs	r5, #15
 8000f76:	197c      	adds	r4, r7, r5
 8000f78:	f000 f99c 	bl	80012b4 <hourSetISR>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000f80:	197b      	adds	r3, r7, r5
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d004      	beq.n	8000f92 <HAL_GPIO_EXTI_Falling_Callback+0xca>
			printf("Error incrementing hour.\n\r");
 8000f88:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f004 ffdc 	bl	8005f48 <iprintf>
}
 8000f90:	e01f      	b.n	8000fd2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Hour increment ISR success.\n\r");
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <HAL_GPIO_EXTI_Falling_Callback+0x130>)
 8000f94:	0018      	movs	r0, r3
 8000f96:	f004 ffd7 	bl	8005f48 <iprintf>
}
 8000f9a:	e01a      	b.n	8000fd2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	015b      	lsls	r3, r3, #5
 8000fa0:	1dba      	adds	r2, r7, #6
 8000fa2:	8812      	ldrh	r2, [r2, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d113      	bne.n	8000fd0 <HAL_GPIO_EXTI_Falling_Callback+0x108>
		halRet = minuteSetISR();
 8000fa8:	250f      	movs	r5, #15
 8000faa:	197c      	adds	r4, r7, r5
 8000fac:	f000 fa3a 	bl	8001424 <minuteSetISR>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000fb4:	197b      	adds	r3, r7, r5
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d004      	beq.n	8000fc6 <HAL_GPIO_EXTI_Falling_Callback+0xfe>
			printf("Error incrementing minute.\n\r");
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_GPIO_EXTI_Falling_Callback+0x134>)
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f004 ffc2 	bl	8005f48 <iprintf>
}
 8000fc4:	e005      	b.n	8000fd2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Minute increment ISR success.\n\r");
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_GPIO_EXTI_Falling_Callback+0x138>)
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f004 ffbd 	bl	8005f48 <iprintf>
}
 8000fce:	e000      	b.n	8000fd2 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
		__NOP();
 8000fd0:	46c0      	nop			; (mov r8, r8)
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b004      	add	sp, #16
 8000fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	08007140 	.word	0x08007140
 8000fe0:	0800715c 	.word	0x0800715c
 8000fe4:	0800717c 	.word	0x0800717c
 8000fe8:	0800719c 	.word	0x0800719c
 8000fec:	080071b4 	.word	0x080071b4
 8000ff0:	080071d0 	.word	0x080071d0
 8000ff4:	080071e4 	.word	0x080071e4
 8000ff8:	08007200 	.word	0x08007200
 8000ffc:	08007220 	.word	0x08007220
 8001000:	08007240 	.word	0x08007240

08001004 <displayButtonISR>:


HAL_StatusTypeDef displayButtonISR(void) {
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b085      	sub	sp, #20
 8001008:	af02      	add	r7, sp, #8

	printf("Entered display toggle ISR\n\r");
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <displayButtonISR+0x68>)
 800100c:	0018      	movs	r0, r3
 800100e:	f004 ff9b 	bl	8005f48 <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]

	sevSeg_intensityBuff[1] = sevSeg_intensityDuty[displayToggle];			//Turn display to proper duty cycle
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <displayButtonISR+0x6c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	001a      	movs	r2, r3
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <displayButtonISR+0x70>)
 8001020:	5c9a      	ldrb	r2, [r3, r2]
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <displayButtonISR+0x74>)
 8001024:	705a      	strb	r2, [r3, #1]

	// TX new intensity to 7-seg driver
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_intensityBuff, 2, HAL_MAX_DELAY);
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <displayButtonISR+0x78>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b299      	uxth	r1, r3
 800102c:	1dfc      	adds	r4, r7, #7
 800102e:	4a12      	ldr	r2, [pc, #72]	; (8001078 <displayButtonISR+0x74>)
 8001030:	4813      	ldr	r0, [pc, #76]	; (8001080 <displayButtonISR+0x7c>)
 8001032:	2301      	movs	r3, #1
 8001034:	425b      	negs	r3, r3
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2302      	movs	r3, #2
 800103a:	f001 f9a1 	bl	8002380 <HAL_I2C_Master_Transmit>
 800103e:	0003      	movs	r3, r0
 8001040:	7023      	strb	r3, [r4, #0]

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <displayButtonISR+0x6c>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d903      	bls.n	8001052 <displayButtonISR+0x4e>
		displayToggle = 0;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <displayButtonISR+0x6c>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	e005      	b.n	800105e <displayButtonISR+0x5a>
	} else {
		displayToggle++;
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <displayButtonISR+0x6c>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	3301      	adds	r3, #1
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <displayButtonISR+0x6c>)
 800105c:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	781b      	ldrb	r3, [r3, #0]

}
 8001062:	0018      	movs	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	b003      	add	sp, #12
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	08007260 	.word	0x08007260
 8001070:	20000248 	.word	0x20000248
 8001074:	08007434 	.word	0x08007434
 8001078:	20000008 	.word	0x20000008
 800107c:	20000000 	.word	0x20000000
 8001080:	200000bc 	.word	0x200000bc

08001084 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b093      	sub	sp, #76	; 0x4c
 8001088:	af02      	add	r7, sp, #8

	printf("Entered alarm toggle ISR\n\r");
 800108a:	4b32      	ldr	r3, [pc, #200]	; (8001154 <alarmEnableISR+0xd0>)
 800108c:	0018      	movs	r0, r3
 800108e:	f004 ff5b 	bl	8005f48 <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8001092:	233f      	movs	r3, #63	; 0x3f
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 800109a:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <alarmEnableISR+0xd4>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2201      	movs	r2, #1
 80010a0:	4053      	eors	r3, r2
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d033      	beq.n	8001110 <alarmEnableISR+0x8c>

		// Use object to get current user alarm time and set/enable the user alarm to that time.
		RTC_AlarmTypeDef userAlarmObj;
		HAL_RTC_GetAlarm(&hrtc, &userAlarmObj, userAlarm, RTC_FORMAT_BCD);
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	009a      	lsls	r2, r3, #2
 80010ac:	0039      	movs	r1, r7
 80010ae:	482b      	ldr	r0, [pc, #172]	; (800115c <alarmEnableISR+0xd8>)
 80010b0:	2301      	movs	r3, #1
 80010b2:	f003 fe99 	bl	8004de8 <HAL_RTC_GetAlarm>
//		HAL_RTC_SetAlarm(&hrtc, &userAlarmObj, RTC_FORMAT_BCD);				//Does this actually set the alarm?

		__HAL_RTC_ALARMB_ENABLE(&hrtc);					//Enable alarm?
 80010b6:	4b29      	ldr	r3, [pc, #164]	; (800115c <alarmEnableISR+0xd8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	699a      	ldr	r2, [r3, #24]
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <alarmEnableISR+0xd8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	0089      	lsls	r1, r1, #2
 80010c4:	430a      	orrs	r2, r1
 80010c6:	619a      	str	r2, [r3, #24]

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_SET);			// Turn on alarm LED
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <alarmEnableISR+0xdc>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	0018      	movs	r0, r3
 80010d0:	f001 f86f 	bl	80021b2 <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 80010d4:	4b20      	ldr	r3, [pc, #128]	; (8001158 <alarmEnableISR+0xd4>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]

		RTC_TimeTypeDef alarmTime = userAlarmObj.AlarmTime;
 80010da:	2428      	movs	r4, #40	; 0x28
 80010dc:	193a      	adds	r2, r7, r4
 80010de:	003b      	movs	r3, r7
 80010e0:	0010      	movs	r0, r2
 80010e2:	0019      	movs	r1, r3
 80010e4:	2314      	movs	r3, #20
 80010e6:	001a      	movs	r2, r3
 80010e8:	f004 ff1c 	bl	8005f24 <memcpy>
		printf("User alarm set to: %d:%d:%d on alarm %d.\n\r", alarmTime.Hours,
 80010ec:	0020      	movs	r0, r4
 80010ee:	183b      	adds	r3, r7, r0
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	0019      	movs	r1, r3
								alarmTime.Minutes, alarmTime.Seconds, userAlarmObj.Alarm);
 80010f4:	183b      	adds	r3, r7, r0
 80010f6:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm set to: %d:%d:%d on alarm %d.\n\r", alarmTime.Hours,
 80010f8:	001a      	movs	r2, r3
								alarmTime.Minutes, alarmTime.Seconds, userAlarmObj.Alarm);
 80010fa:	183b      	adds	r3, r7, r0
 80010fc:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm set to: %d:%d:%d on alarm %d.\n\r", alarmTime.Hours,
 80010fe:	001c      	movs	r4, r3
 8001100:	003b      	movs	r3, r7
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	4817      	ldr	r0, [pc, #92]	; (8001164 <alarmEnableISR+0xe0>)
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	0023      	movs	r3, r4
 800110a:	f004 ff1d 	bl	8005f48 <iprintf>
 800110e:	e01a      	b.n	8001146 <alarmEnableISR+0xc2>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <alarmEnableISR+0xd4>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d015      	beq.n	8001144 <alarmEnableISR+0xc0>

		__HAL_RTC_ALARMB_DISABLE(&hrtc);				// Disable alarm
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <alarmEnableISR+0xd8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	699a      	ldr	r2, [r3, #24]
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <alarmEnableISR+0xd8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4911      	ldr	r1, [pc, #68]	; (8001168 <alarmEnableISR+0xe4>)
 8001124:	400a      	ands	r2, r1
 8001126:	619a      	str	r2, [r3, #24]

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_RESET);			// Turn off alarm LED
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <alarmEnableISR+0xdc>)
 800112c:	2200      	movs	r2, #0
 800112e:	0018      	movs	r0, r3
 8001130:	f001 f83f 	bl	80021b2 <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <alarmEnableISR+0xd4>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]

		printf("User alarm disabled.\n\r");
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <alarmEnableISR+0xe8>)
 800113c:	0018      	movs	r0, r3
 800113e:	f004 ff03 	bl	8005f48 <iprintf>
 8001142:	e000      	b.n	8001146 <alarmEnableISR+0xc2>
	}
	else {
		__NOP();							//Code should never reach here.
 8001144:	46c0      	nop			; (mov r8, r8)
	}

	return halRet;
 8001146:	233f      	movs	r3, #63	; 0x3f
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	781b      	ldrb	r3, [r3, #0]

}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b011      	add	sp, #68	; 0x44
 8001152:	bd90      	pop	{r4, r7, pc}
 8001154:	08007280 	.word	0x08007280
 8001158:	20000249 	.word	0x20000249
 800115c:	20000110 	.word	0x20000110
 8001160:	50000400 	.word	0x50000400
 8001164:	0800729c 	.word	0x0800729c
 8001168:	fffffdff 	.word	0xfffffdff
 800116c:	080072c8 	.word	0x080072c8

08001170 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 8001170:	b5b0      	push	{r4, r5, r7, lr}
 8001172:	b08e      	sub	sp, #56	; 0x38
 8001174:	af02      	add	r7, sp, #8

	printf("Enter user alarm set ISR.\n\r");
 8001176:	4b45      	ldr	r3, [pc, #276]	; (800128c <alarmSetISR+0x11c>)
 8001178:	0018      	movs	r0, r3
 800117a:	f004 fee5 	bl	8005f48 <iprintf>

	RTC_AlarmTypeDef userAlarmObj;
	HAL_RTC_GetAlarm(&hrtc, &userAlarmObj, userAlarm, RTC_FORMAT_BCD);
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	009a      	lsls	r2, r3, #2
 8001182:	1d39      	adds	r1, r7, #4
 8001184:	4842      	ldr	r0, [pc, #264]	; (8001290 <alarmSetISR+0x120>)
 8001186:	2301      	movs	r3, #1
 8001188:	f003 fe2e 	bl	8004de8 <HAL_RTC_GetAlarm>
	printf("User alarm currently set to %d:%d:%d.\n\r", userAlarmObj.AlarmTime.Hours,
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	0019      	movs	r1, r3
			userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	785b      	ldrb	r3, [r3, #1]
	printf("User alarm currently set to %d:%d:%d.\n\r", userAlarmObj.AlarmTime.Hours,
 8001196:	001a      	movs	r2, r3
			userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	789b      	ldrb	r3, [r3, #2]
	printf("User alarm currently set to %d:%d:%d.\n\r", userAlarmObj.AlarmTime.Hours,
 800119c:	483d      	ldr	r0, [pc, #244]	; (8001294 <alarmSetISR+0x124>)
 800119e:	f004 fed3 	bl	8005f48 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 80011a2:	232c      	movs	r3, #44	; 0x2c
 80011a4:	18fb      	adds	r3, r7, r3
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim16);						// Begin timer 16 counting (to 500 ms)
 80011aa:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <alarmSetISR+0x128>)
 80011ac:	0018      	movs	r0, r3
 80011ae:	f004 f873 	bl	8005298 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(&htim16);	// Get initial timer value to compare to
 80011b2:	4b39      	ldr	r3, [pc, #228]	; (8001298 <alarmSetISR+0x128>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011b8:	232e      	movs	r3, #46	; 0x2e
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	801a      	strh	r2, [r3, #0]
	bool displayBlink = false;
 80011be:	232d      	movs	r3, #45	; 0x2d
 80011c0:	18fb      	adds	r3, r7, r3
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]

	do {											// while the alarm set button is not held down, blink display.

		updateAndDisplayAlarm();
 80011c6:	f7ff fd91 	bl	8000cec <updateAndDisplayAlarm>

		if(__HAL_TIM_GET_COUNTER(&htim16) - timerVal >= (65536 / 2)) {
 80011ca:	4b33      	ldr	r3, [pc, #204]	; (8001298 <alarmSetISR+0x128>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011d0:	252e      	movs	r5, #46	; 0x2e
 80011d2:	197b      	adds	r3, r7, r5
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	1ad2      	subs	r2, r2, r3
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	429a      	cmp	r2, r3
 80011de:	d325      	bcc.n	800122c <alarmSetISR+0xbc>

			sevSeg_intensityBuff[1] = sevSeg_intensityDuty[displayBlink];		// Initialize to whatever duty cycle
 80011e0:	242d      	movs	r4, #45	; 0x2d
 80011e2:	193b      	adds	r3, r7, r4
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	4a2d      	ldr	r2, [pc, #180]	; (800129c <alarmSetISR+0x12c>)
 80011e8:	5cd2      	ldrb	r2, [r2, r3]
 80011ea:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <alarmSetISR+0x130>)
 80011ec:	705a      	strb	r2, [r3, #1]
			HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_intensityBuff, 2, HAL_MAX_DELAY);
 80011ee:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <alarmSetISR+0x134>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b299      	uxth	r1, r3
 80011f4:	4a2a      	ldr	r2, [pc, #168]	; (80012a0 <alarmSetISR+0x130>)
 80011f6:	482c      	ldr	r0, [pc, #176]	; (80012a8 <alarmSetISR+0x138>)
 80011f8:	2301      	movs	r3, #1
 80011fa:	425b      	negs	r3, r3
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2302      	movs	r3, #2
 8001200:	f001 f8be 	bl	8002380 <HAL_I2C_Master_Transmit>

			timerVal = __HAL_TIM_GET_COUNTER(&htim16);
 8001204:	4b24      	ldr	r3, [pc, #144]	; (8001298 <alarmSetISR+0x128>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800120a:	197b      	adds	r3, r7, r5
 800120c:	801a      	strh	r2, [r3, #0]
			displayBlink = !displayBlink;
 800120e:	193b      	adds	r3, r7, r4
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	1e5a      	subs	r2, r3, #1
 8001214:	4193      	sbcs	r3, r2
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2201      	movs	r2, #1
 800121a:	4053      	eors	r3, r2
 800121c:	b2db      	uxtb	r3, r3
 800121e:	001a      	movs	r2, r3
 8001220:	193b      	adds	r3, r7, r4
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	781a      	ldrb	r2, [r3, #0]
 8001226:	2101      	movs	r1, #1
 8001228:	400a      	ands	r2, r1
 800122a:	701a      	strb	r2, [r3, #0]

		}

	}while(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == GPIO_PIN_RESET);
 800122c:	2202      	movs	r2, #2
 800122e:	23a0      	movs	r3, #160	; 0xa0
 8001230:	05db      	lsls	r3, r3, #23
 8001232:	0011      	movs	r1, r2
 8001234:	0018      	movs	r0, r3
 8001236:	f000 ff9f 	bl	8002178 <HAL_GPIO_ReadPin>
 800123a:	1e03      	subs	r3, r0, #0
 800123c:	d0c3      	beq.n	80011c6 <alarmSetISR+0x56>

	sevSeg_intensityBuff[1] = sevSeg_intensityDuty[2];
 800123e:	2263      	movs	r2, #99	; 0x63
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <alarmSetISR+0x130>)
 8001242:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_intensityBuff, 2, HAL_MAX_DELAY);
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <alarmSetISR+0x134>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b299      	uxth	r1, r3
 800124a:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <alarmSetISR+0x130>)
 800124c:	4816      	ldr	r0, [pc, #88]	; (80012a8 <alarmSetISR+0x138>)
 800124e:	2301      	movs	r3, #1
 8001250:	425b      	negs	r3, r3
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2302      	movs	r3, #2
 8001256:	f001 f893 	bl	8002380 <HAL_I2C_Master_Transmit>

	HAL_TIM_Base_Stop(&htim16);
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <alarmSetISR+0x128>)
 800125c:	0018      	movs	r0, r3
 800125e:	f004 f867 	bl	8005330 <HAL_TIM_Base_Stop>

	updateAndDisplayTime();
 8001262:	f7ff fca5 	bl	8000bb0 <updateAndDisplayTime>
	printf("Current time back to %d:%d:%d.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <alarmSetISR+0x13c>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	0019      	movs	r1, r3
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <alarmSetISR+0x13c>)
 800126e:	785b      	ldrb	r3, [r3, #1]
 8001270:	001a      	movs	r2, r3
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <alarmSetISR+0x13c>)
 8001274:	789b      	ldrb	r3, [r3, #2]
 8001276:	480e      	ldr	r0, [pc, #56]	; (80012b0 <alarmSetISR+0x140>)
 8001278:	f004 fe66 	bl	8005f48 <iprintf>

	return halRet;
 800127c:	232c      	movs	r3, #44	; 0x2c
 800127e:	18fb      	adds	r3, r7, r3
 8001280:	781b      	ldrb	r3, [r3, #0]

}
 8001282:	0018      	movs	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	b00c      	add	sp, #48	; 0x30
 8001288:	bdb0      	pop	{r4, r5, r7, pc}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	080072e0 	.word	0x080072e0
 8001290:	20000110 	.word	0x20000110
 8001294:	080072fc 	.word	0x080072fc
 8001298:	2000013c 	.word	0x2000013c
 800129c:	08007434 	.word	0x08007434
 80012a0:	20000008 	.word	0x20000008
 80012a4:	20000000 	.word	0x20000000
 80012a8:	200000bc 	.word	0x200000bc
 80012ac:	2000021c 	.word	0x2000021c
 80012b0:	08007324 	.word	0x08007324

080012b4 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b08d      	sub	sp, #52	; 0x34
 80012b8:	af00      	add	r7, sp, #0

	printf("Entered hour set ISR.\n\r");
 80012ba:	4b53      	ldr	r3, [pc, #332]	; (8001408 <hourSetISR+0x154>)
 80012bc:	0018      	movs	r0, r3
 80012be:	f004 fe43 	bl	8005f48 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 80012c2:	232f      	movs	r3, #47	; 0x2f
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) != GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 80012ca:	2202      	movs	r2, #2
 80012cc:	23a0      	movs	r3, #160	; 0xa0
 80012ce:	05db      	lsls	r3, r3, #23
 80012d0:	0011      	movs	r1, r2
 80012d2:	0018      	movs	r0, r3
 80012d4:	f000 ff50 	bl	8002178 <HAL_GPIO_ReadPin>
 80012d8:	0003      	movs	r3, r0
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d043      	beq.n	8001366 <hourSetISR+0xb2>

		RTC_AlarmTypeDef userAlarmObj;
		HAL_RTC_GetAlarm(&hrtc, &userAlarmObj, userAlarm, RTC_FORMAT_BCD);
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	009a      	lsls	r2, r3, #2
 80012e2:	1d39      	adds	r1, r7, #4
 80012e4:	4849      	ldr	r0, [pc, #292]	; (800140c <hourSetISR+0x158>)
 80012e6:	2301      	movs	r3, #1
 80012e8:	f003 fd7e 	bl	8004de8 <HAL_RTC_GetAlarm>
		userAlarmTime = userAlarmObj.AlarmTime;
 80012ec:	4b48      	ldr	r3, [pc, #288]	; (8001410 <hourSetISR+0x15c>)
 80012ee:	1d3a      	adds	r2, r7, #4
 80012f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012f2:	c313      	stmia	r3!, {r0, r1, r4}
 80012f4:	ca03      	ldmia	r2!, {r0, r1}
 80012f6:	c303      	stmia	r3!, {r0, r1}

		if(userAlarmTime.Hours >= 12) {
 80012f8:	4b45      	ldr	r3, [pc, #276]	; (8001410 <hourSetISR+0x15c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b0b      	cmp	r3, #11
 80012fe:	d90e      	bls.n	800131e <hourSetISR+0x6a>
			userAlarmTime.Hours = 1;
 8001300:	4b43      	ldr	r3, [pc, #268]	; (8001410 <hourSetISR+0x15c>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001306:	4b42      	ldr	r3, [pc, #264]	; (8001410 <hourSetISR+0x15c>)
 8001308:	78db      	ldrb	r3, [r3, #3]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d103      	bne.n	8001316 <hourSetISR+0x62>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800130e:	4b40      	ldr	r3, [pc, #256]	; (8001410 <hourSetISR+0x15c>)
 8001310:	2201      	movs	r2, #1
 8001312:	70da      	strb	r2, [r3, #3]
 8001314:	e00f      	b.n	8001336 <hourSetISR+0x82>
			} else {
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001316:	4b3e      	ldr	r3, [pc, #248]	; (8001410 <hourSetISR+0x15c>)
 8001318:	2200      	movs	r2, #0
 800131a:	70da      	strb	r2, [r3, #3]
 800131c:	e00b      	b.n	8001336 <hourSetISR+0x82>
			}
		}
		else if(userAlarmTime.Hours < 12) {
 800131e:	4b3c      	ldr	r3, [pc, #240]	; (8001410 <hourSetISR+0x15c>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b0b      	cmp	r3, #11
 8001324:	d806      	bhi.n	8001334 <hourSetISR+0x80>
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001326:	4b3a      	ldr	r3, [pc, #232]	; (8001410 <hourSetISR+0x15c>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b38      	ldr	r3, [pc, #224]	; (8001410 <hourSetISR+0x15c>)
 8001330:	701a      	strb	r2, [r3, #0]
 8001332:	e000      	b.n	8001336 <hourSetISR+0x82>
		}
		else {
			__NOP();
 8001334:	46c0      	nop			; (mov r8, r8)
		}

		userAlarmObj.AlarmTime = userAlarmTime;
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4a35      	ldr	r2, [pc, #212]	; (8001410 <hourSetISR+0x15c>)
 800133a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800133c:	c313      	stmia	r3!, {r0, r1, r4}
 800133e:	ca03      	ldmia	r2!, {r0, r1}
 8001340:	c303      	stmia	r3!, {r0, r1}

		HAL_RTC_SetAlarm(&hrtc, &userAlarmObj, RTC_FORMAT_BCD);
 8001342:	1d39      	adds	r1, r7, #4
 8001344:	4b31      	ldr	r3, [pc, #196]	; (800140c <hourSetISR+0x158>)
 8001346:	2201      	movs	r2, #1
 8001348:	0018      	movs	r0, r3
 800134a:	f003 fae7 	bl	800491c <HAL_RTC_SetAlarm>

		printf("User alarm hour incremented to %d:%d:%d\n\r", userAlarmObj.AlarmTime.Hours,
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	0019      	movs	r1, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm hour incremented to %d:%d:%d\n\r", userAlarmObj.AlarmTime.Hours,
 8001358:	001a      	movs	r2, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm hour incremented to %d:%d:%d\n\r", userAlarmObj.AlarmTime.Hours,
 800135e:	482d      	ldr	r0, [pc, #180]	; (8001414 <hourSetISR+0x160>)
 8001360:	f004 fdf2 	bl	8005f48 <iprintf>
 8001364:	e049      	b.n	80013fa <hourSetISR+0x146>

	}
	else {									// Otherwise, change current time hour.

		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8001366:	492c      	ldr	r1, [pc, #176]	; (8001418 <hourSetISR+0x164>)
 8001368:	4b28      	ldr	r3, [pc, #160]	; (800140c <hourSetISR+0x158>)
 800136a:	2201      	movs	r2, #1
 800136c:	0018      	movs	r0, r3
 800136e:	f003 f999 	bl	80046a4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 8001372:	492a      	ldr	r1, [pc, #168]	; (800141c <hourSetISR+0x168>)
 8001374:	4b25      	ldr	r3, [pc, #148]	; (800140c <hourSetISR+0x158>)
 8001376:	2201      	movs	r2, #1
 8001378:	0018      	movs	r0, r3
 800137a:	f003 fa81 	bl	8004880 <HAL_RTC_GetDate>
		if(currTime.Hours >= 12) {
 800137e:	4b26      	ldr	r3, [pc, #152]	; (8001418 <hourSetISR+0x164>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b0b      	cmp	r3, #11
 8001384:	d90e      	bls.n	80013a4 <hourSetISR+0xf0>
			currTime.Hours = 1;
 8001386:	4b24      	ldr	r3, [pc, #144]	; (8001418 <hourSetISR+0x164>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
			if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <hourSetISR+0x164>)
 800138e:	78db      	ldrb	r3, [r3, #3]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d103      	bne.n	800139c <hourSetISR+0xe8>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <hourSetISR+0x164>)
 8001396:	2201      	movs	r2, #1
 8001398:	70da      	strb	r2, [r3, #3]
 800139a:	e00f      	b.n	80013bc <hourSetISR+0x108>
			} else {
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <hourSetISR+0x164>)
 800139e:	2200      	movs	r2, #0
 80013a0:	70da      	strb	r2, [r3, #3]
 80013a2:	e00b      	b.n	80013bc <hourSetISR+0x108>
			}
		}
		else if(currTime.Hours < 12) {
 80013a4:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <hourSetISR+0x164>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b0b      	cmp	r3, #11
 80013aa:	d806      	bhi.n	80013ba <hourSetISR+0x106>
			currTime.Hours = currTime.Hours + 1;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <hourSetISR+0x164>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <hourSetISR+0x164>)
 80013b6:	701a      	strb	r2, [r3, #0]
 80013b8:	e000      	b.n	80013bc <hourSetISR+0x108>
		}
		else {
			__NOP();
 80013ba:	46c0      	nop			; (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 80013bc:	4916      	ldr	r1, [pc, #88]	; (8001418 <hourSetISR+0x164>)
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <hourSetISR+0x158>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	0018      	movs	r0, r3
 80013c4:	f003 f8c6 	bl	8004554 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80013c8:	f7ff fbf2 	bl	8000bb0 <updateAndDisplayTime>

		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 80013cc:	4912      	ldr	r1, [pc, #72]	; (8001418 <hourSetISR+0x164>)
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <hourSetISR+0x158>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	0018      	movs	r0, r3
 80013d4:	f003 f966 	bl	80046a4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 80013d8:	4910      	ldr	r1, [pc, #64]	; (800141c <hourSetISR+0x168>)
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <hourSetISR+0x158>)
 80013dc:	2201      	movs	r2, #1
 80013de:	0018      	movs	r0, r3
 80013e0:	f003 fa4e 	bl	8004880 <HAL_RTC_GetDate>

		printf("Current time hour incremented to %d:%d:%d.\n\r", currTime.Hours,
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <hourSetISR+0x164>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <hourSetISR+0x164>)
 80013ec:	785b      	ldrb	r3, [r3, #1]
		printf("Current time hour incremented to %d:%d:%d.\n\r", currTime.Hours,
 80013ee:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <hourSetISR+0x164>)
 80013f2:	789b      	ldrb	r3, [r3, #2]
		printf("Current time hour incremented to %d:%d:%d.\n\r", currTime.Hours,
 80013f4:	480a      	ldr	r0, [pc, #40]	; (8001420 <hourSetISR+0x16c>)
 80013f6:	f004 fda7 	bl	8005f48 <iprintf>
	}

	return halRet;
 80013fa:	232f      	movs	r3, #47	; 0x2f
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	781b      	ldrb	r3, [r3, #0]
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b00d      	add	sp, #52	; 0x34
 8001406:	bd90      	pop	{r4, r7, pc}
 8001408:	08007348 	.word	0x08007348
 800140c:	20000110 	.word	0x20000110
 8001410:	20000234 	.word	0x20000234
 8001414:	08007360 	.word	0x08007360
 8001418:	2000021c 	.word	0x2000021c
 800141c:	20000230 	.word	0x20000230
 8001420:	0800738c 	.word	0x0800738c

08001424 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b08d      	sub	sp, #52	; 0x34
 8001428:	af00      	add	r7, sp, #0

	printf("Entered minute set ISR.\n\r");
 800142a:	4b6e      	ldr	r3, [pc, #440]	; (80015e4 <minuteSetISR+0x1c0>)
 800142c:	0018      	movs	r0, r3
 800142e:	f004 fd8b 	bl	8005f48 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 8001432:	232f      	movs	r3, #47	; 0x2f
 8001434:	18fb      	adds	r3, r7, r3
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == !GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 800143a:	2202      	movs	r2, #2
 800143c:	23a0      	movs	r3, #160	; 0xa0
 800143e:	05db      	lsls	r3, r3, #23
 8001440:	0011      	movs	r1, r2
 8001442:	0018      	movs	r0, r3
 8001444:	f000 fe98 	bl	8002178 <HAL_GPIO_ReadPin>
 8001448:	1e03      	subs	r3, r0, #0
 800144a:	d15e      	bne.n	800150a <minuteSetISR+0xe6>

		RTC_AlarmTypeDef userAlarmObj;
		HAL_RTC_GetAlarm(&hrtc, &userAlarmObj, userAlarm, RTC_FORMAT_BCD);
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	009a      	lsls	r2, r3, #2
 8001450:	1d39      	adds	r1, r7, #4
 8001452:	4865      	ldr	r0, [pc, #404]	; (80015e8 <minuteSetISR+0x1c4>)
 8001454:	2301      	movs	r3, #1
 8001456:	f003 fcc7 	bl	8004de8 <HAL_RTC_GetAlarm>
		userAlarmTime = userAlarmObj.AlarmTime;
 800145a:	4b64      	ldr	r3, [pc, #400]	; (80015ec <minuteSetISR+0x1c8>)
 800145c:	1d3a      	adds	r2, r7, #4
 800145e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001460:	c313      	stmia	r3!, {r0, r1, r4}
 8001462:	ca03      	ldmia	r2!, {r0, r1}
 8001464:	c303      	stmia	r3!, {r0, r1}

		if(userAlarmTime.Minutes >= 59) {
 8001466:	4b61      	ldr	r3, [pc, #388]	; (80015ec <minuteSetISR+0x1c8>)
 8001468:	785b      	ldrb	r3, [r3, #1]
 800146a:	2b3a      	cmp	r3, #58	; 0x3a
 800146c:	d929      	bls.n	80014c2 <minuteSetISR+0x9e>
			userAlarmTime.Minutes = 0;
 800146e:	4b5f      	ldr	r3, [pc, #380]	; (80015ec <minuteSetISR+0x1c8>)
 8001470:	2200      	movs	r2, #0
 8001472:	705a      	strb	r2, [r3, #1]
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001474:	4b5d      	ldr	r3, [pc, #372]	; (80015ec <minuteSetISR+0x1c8>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b5b      	ldr	r3, [pc, #364]	; (80015ec <minuteSetISR+0x1c8>)
 800147e:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.Hours > 12) {
 8001480:	4b5a      	ldr	r3, [pc, #360]	; (80015ec <minuteSetISR+0x1c8>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b0c      	cmp	r3, #12
 8001486:	d902      	bls.n	800148e <minuteSetISR+0x6a>
				userAlarmTime.Hours = 1;
 8001488:	4b58      	ldr	r3, [pc, #352]	; (80015ec <minuteSetISR+0x1c8>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
			}
			if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800148e:	4b57      	ldr	r3, [pc, #348]	; (80015ec <minuteSetISR+0x1c8>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b0c      	cmp	r3, #12
 8001494:	d107      	bne.n	80014a6 <minuteSetISR+0x82>
 8001496:	4b55      	ldr	r3, [pc, #340]	; (80015ec <minuteSetISR+0x1c8>)
 8001498:	78db      	ldrb	r3, [r3, #3]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d103      	bne.n	80014a6 <minuteSetISR+0x82>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800149e:	4b53      	ldr	r3, [pc, #332]	; (80015ec <minuteSetISR+0x1c8>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	70da      	strb	r2, [r3, #3]
 80014a4:	e019      	b.n	80014da <minuteSetISR+0xb6>
			} else if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 80014a6:	4b51      	ldr	r3, [pc, #324]	; (80015ec <minuteSetISR+0x1c8>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b0c      	cmp	r3, #12
 80014ac:	d107      	bne.n	80014be <minuteSetISR+0x9a>
 80014ae:	4b4f      	ldr	r3, [pc, #316]	; (80015ec <minuteSetISR+0x1c8>)
 80014b0:	78db      	ldrb	r3, [r3, #3]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d103      	bne.n	80014be <minuteSetISR+0x9a>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80014b6:	4b4d      	ldr	r3, [pc, #308]	; (80015ec <minuteSetISR+0x1c8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	70da      	strb	r2, [r3, #3]
 80014bc:	e00d      	b.n	80014da <minuteSetISR+0xb6>
			}
			else {
				__NOP();
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	e00b      	b.n	80014da <minuteSetISR+0xb6>
			}
		}
		else if(userAlarmTime.Minutes < 59) {
 80014c2:	4b4a      	ldr	r3, [pc, #296]	; (80015ec <minuteSetISR+0x1c8>)
 80014c4:	785b      	ldrb	r3, [r3, #1]
 80014c6:	2b3a      	cmp	r3, #58	; 0x3a
 80014c8:	d806      	bhi.n	80014d8 <minuteSetISR+0xb4>
			userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 80014ca:	4b48      	ldr	r3, [pc, #288]	; (80015ec <minuteSetISR+0x1c8>)
 80014cc:	785b      	ldrb	r3, [r3, #1]
 80014ce:	3301      	adds	r3, #1
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b46      	ldr	r3, [pc, #280]	; (80015ec <minuteSetISR+0x1c8>)
 80014d4:	705a      	strb	r2, [r3, #1]
 80014d6:	e000      	b.n	80014da <minuteSetISR+0xb6>
		}
		else {
			__NOP();
 80014d8:	46c0      	nop			; (mov r8, r8)
		}

		userAlarmObj.AlarmTime = userAlarmTime;
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4a43      	ldr	r2, [pc, #268]	; (80015ec <minuteSetISR+0x1c8>)
 80014de:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014e0:	c313      	stmia	r3!, {r0, r1, r4}
 80014e2:	ca03      	ldmia	r2!, {r0, r1}
 80014e4:	c303      	stmia	r3!, {r0, r1}

		HAL_RTC_SetAlarm(&hrtc, &userAlarmObj, RTC_FORMAT_BCD);
 80014e6:	1d39      	adds	r1, r7, #4
 80014e8:	4b3f      	ldr	r3, [pc, #252]	; (80015e8 <minuteSetISR+0x1c4>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	0018      	movs	r0, r3
 80014ee:	f003 fa15 	bl	800491c <HAL_RTC_SetAlarm>

		printf("User alarm minute incremented to %d:%d:%d\n\r", userAlarmObj.AlarmTime.Hours,
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	0019      	movs	r1, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm minute incremented to %d:%d:%d\n\r", userAlarmObj.AlarmTime.Hours,
 80014fc:	001a      	movs	r2, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm minute incremented to %d:%d:%d\n\r", userAlarmObj.AlarmTime.Hours,
 8001502:	483b      	ldr	r0, [pc, #236]	; (80015f0 <minuteSetISR+0x1cc>)
 8001504:	f004 fd20 	bl	8005f48 <iprintf>
 8001508:	e064      	b.n	80015d4 <minuteSetISR+0x1b0>

	}
	else {									// Otherwise, change current time hour.

		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 800150a:	493a      	ldr	r1, [pc, #232]	; (80015f4 <minuteSetISR+0x1d0>)
 800150c:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <minuteSetISR+0x1c4>)
 800150e:	2201      	movs	r2, #1
 8001510:	0018      	movs	r0, r3
 8001512:	f003 f8c7 	bl	80046a4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 8001516:	4938      	ldr	r1, [pc, #224]	; (80015f8 <minuteSetISR+0x1d4>)
 8001518:	4b33      	ldr	r3, [pc, #204]	; (80015e8 <minuteSetISR+0x1c4>)
 800151a:	2201      	movs	r2, #1
 800151c:	0018      	movs	r0, r3
 800151e:	f003 f9af 	bl	8004880 <HAL_RTC_GetDate>

		if(currTime.Minutes >= 59) {
 8001522:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <minuteSetISR+0x1d0>)
 8001524:	785b      	ldrb	r3, [r3, #1]
 8001526:	2b3a      	cmp	r3, #58	; 0x3a
 8001528:	d929      	bls.n	800157e <minuteSetISR+0x15a>
			currTime.Minutes = 0;
 800152a:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <minuteSetISR+0x1d0>)
 800152c:	2200      	movs	r2, #0
 800152e:	705a      	strb	r2, [r3, #1]
			currTime.Hours = currTime.Hours + 1;
 8001530:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <minuteSetISR+0x1d0>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	b2da      	uxtb	r2, r3
 8001538:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <minuteSetISR+0x1d0>)
 800153a:	701a      	strb	r2, [r3, #0]
			if(currTime.Hours > 12) {
 800153c:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <minuteSetISR+0x1d0>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b0c      	cmp	r3, #12
 8001542:	d902      	bls.n	800154a <minuteSetISR+0x126>
				currTime.Hours = 1;
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <minuteSetISR+0x1d0>)
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
			}
			if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800154a:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <minuteSetISR+0x1d0>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b0c      	cmp	r3, #12
 8001550:	d107      	bne.n	8001562 <minuteSetISR+0x13e>
 8001552:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <minuteSetISR+0x1d0>)
 8001554:	78db      	ldrb	r3, [r3, #3]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d103      	bne.n	8001562 <minuteSetISR+0x13e>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800155a:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <minuteSetISR+0x1d0>)
 800155c:	2201      	movs	r2, #1
 800155e:	70da      	strb	r2, [r3, #3]
 8001560:	e019      	b.n	8001596 <minuteSetISR+0x172>
			} else if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <minuteSetISR+0x1d0>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b0c      	cmp	r3, #12
 8001568:	d107      	bne.n	800157a <minuteSetISR+0x156>
 800156a:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <minuteSetISR+0x1d0>)
 800156c:	78db      	ldrb	r3, [r3, #3]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d103      	bne.n	800157a <minuteSetISR+0x156>
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <minuteSetISR+0x1d0>)
 8001574:	2200      	movs	r2, #0
 8001576:	70da      	strb	r2, [r3, #3]
 8001578:	e00d      	b.n	8001596 <minuteSetISR+0x172>
			}
			else {
				__NOP();
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	e00b      	b.n	8001596 <minuteSetISR+0x172>
			}
		}
		else if(currTime.Minutes < 59) {
 800157e:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <minuteSetISR+0x1d0>)
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	2b3a      	cmp	r3, #58	; 0x3a
 8001584:	d806      	bhi.n	8001594 <minuteSetISR+0x170>
			currTime.Minutes = currTime.Minutes + 1;
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <minuteSetISR+0x1d0>)
 8001588:	785b      	ldrb	r3, [r3, #1]
 800158a:	3301      	adds	r3, #1
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <minuteSetISR+0x1d0>)
 8001590:	705a      	strb	r2, [r3, #1]
 8001592:	e000      	b.n	8001596 <minuteSetISR+0x172>
		}
		else {
			__NOP();
 8001594:	46c0      	nop			; (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8001596:	4917      	ldr	r1, [pc, #92]	; (80015f4 <minuteSetISR+0x1d0>)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <minuteSetISR+0x1c4>)
 800159a:	2201      	movs	r2, #1
 800159c:	0018      	movs	r0, r3
 800159e:	f002 ffd9 	bl	8004554 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80015a2:	f7ff fb05 	bl	8000bb0 <updateAndDisplayTime>

		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 80015a6:	4913      	ldr	r1, [pc, #76]	; (80015f4 <minuteSetISR+0x1d0>)
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <minuteSetISR+0x1c4>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	0018      	movs	r0, r3
 80015ae:	f003 f879 	bl	80046a4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 80015b2:	4911      	ldr	r1, [pc, #68]	; (80015f8 <minuteSetISR+0x1d4>)
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <minuteSetISR+0x1c4>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	0018      	movs	r0, r3
 80015ba:	f003 f961 	bl	8004880 <HAL_RTC_GetDate>

		printf("Current time minute incremented to %d:%d:%d.\n\r", currTime.Hours,
 80015be:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <minuteSetISR+0x1d0>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <minuteSetISR+0x1d0>)
 80015c6:	785b      	ldrb	r3, [r3, #1]
		printf("Current time minute incremented to %d:%d:%d.\n\r", currTime.Hours,
 80015c8:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <minuteSetISR+0x1d0>)
 80015cc:	789b      	ldrb	r3, [r3, #2]
		printf("Current time minute incremented to %d:%d:%d.\n\r", currTime.Hours,
 80015ce:	480b      	ldr	r0, [pc, #44]	; (80015fc <minuteSetISR+0x1d8>)
 80015d0:	f004 fcba 	bl	8005f48 <iprintf>
	}

	return halRet;
 80015d4:	232f      	movs	r3, #47	; 0x2f
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	781b      	ldrb	r3, [r3, #0]
}
 80015da:	0018      	movs	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	b00d      	add	sp, #52	; 0x34
 80015e0:	bd90      	pop	{r4, r7, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	080073bc 	.word	0x080073bc
 80015e8:	20000110 	.word	0x20000110
 80015ec:	20000234 	.word	0x20000234
 80015f0:	080073d8 	.word	0x080073d8
 80015f4:	2000021c 	.word	0x2000021c
 80015f8:	20000230 	.word	0x20000230
 80015fc:	08007404 	.word	0x08007404

08001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001608:	e7fe      	b.n	8001608 <Error_Handler+0x8>
	...

0800160c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <HAL_MspInit+0x54>)
 8001614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_MspInit+0x54>)
 8001618:	2101      	movs	r1, #1
 800161a:	430a      	orrs	r2, r1
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_MspInit+0x54>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	2201      	movs	r2, #1
 8001624:	4013      	ands	r3, r2
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <HAL_MspInit+0x54>)
 800162c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_MspInit+0x54>)
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	0549      	lsls	r1, r1, #21
 8001634:	430a      	orrs	r2, r1
 8001636:	63da      	str	r2, [r3, #60]	; 0x3c
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_MspInit+0x54>)
 800163a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	055b      	lsls	r3, r3, #21
 8001640:	4013      	ands	r3, r2
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	2001      	movs	r0, #1
 800164c:	f000 fb88 	bl	8001d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001650:	2001      	movs	r0, #1
 8001652:	f000 fb9a 	bl	8001d8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	46bd      	mov	sp, r7
 800165a:	b002      	add	sp, #8
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	40021000 	.word	0x40021000

08001664 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b095      	sub	sp, #84	; 0x54
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	233c      	movs	r3, #60	; 0x3c
 800166e:	18fb      	adds	r3, r7, r3
 8001670:	0018      	movs	r0, r3
 8001672:	2314      	movs	r3, #20
 8001674:	001a      	movs	r2, r3
 8001676:	2100      	movs	r1, #0
 8001678:	f004 fc5d 	bl	8005f36 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800167c:	2414      	movs	r4, #20
 800167e:	193b      	adds	r3, r7, r4
 8001680:	0018      	movs	r0, r3
 8001682:	2328      	movs	r3, #40	; 0x28
 8001684:	001a      	movs	r2, r3
 8001686:	2100      	movs	r1, #0
 8001688:	f004 fc55 	bl	8005f36 <memset>
  if(hi2c->Instance==I2C1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a26      	ldr	r2, [pc, #152]	; (800172c <HAL_I2C_MspInit+0xc8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d146      	bne.n	8001724 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001696:	193b      	adds	r3, r7, r4
 8001698:	2220      	movs	r2, #32
 800169a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800169c:	193b      	adds	r3, r7, r4
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a2:	193b      	adds	r3, r7, r4
 80016a4:	0018      	movs	r0, r3
 80016a6:	f002 fd39 	bl	800411c <HAL_RCCEx_PeriphCLKConfig>
 80016aa:	1e03      	subs	r3, r0, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80016ae:	f7ff ffa7 	bl	8001600 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <HAL_I2C_MspInit+0xcc>)
 80016b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <HAL_I2C_MspInit+0xcc>)
 80016b8:	2102      	movs	r1, #2
 80016ba:	430a      	orrs	r2, r1
 80016bc:	635a      	str	r2, [r3, #52]	; 0x34
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_I2C_MspInit+0xcc>)
 80016c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c2:	2202      	movs	r2, #2
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80016ca:	213c      	movs	r1, #60	; 0x3c
 80016cc:	187b      	adds	r3, r7, r1
 80016ce:	22c0      	movs	r2, #192	; 0xc0
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	2212      	movs	r2, #18
 80016d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	2206      	movs	r2, #6
 80016ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_I2C_MspInit+0xd0>)
 80016f0:	0019      	movs	r1, r3
 80016f2:	0010      	movs	r0, r2
 80016f4:	f000 fbdc 	bl	8001eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_I2C_MspInit+0xcc>)
 80016fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <HAL_I2C_MspInit+0xcc>)
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	0389      	lsls	r1, r1, #14
 8001702:	430a      	orrs	r2, r1
 8001704:	63da      	str	r2, [r3, #60]	; 0x3c
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_I2C_MspInit+0xcc>)
 8001708:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	039b      	lsls	r3, r3, #14
 800170e:	4013      	ands	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2017      	movs	r0, #23
 800171a:	f000 fb21 	bl	8001d60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800171e:	2017      	movs	r0, #23
 8001720:	f000 fb33 	bl	8001d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	b015      	add	sp, #84	; 0x54
 800172a:	bd90      	pop	{r4, r7, pc}
 800172c:	40005400 	.word	0x40005400
 8001730:	40021000 	.word	0x40021000
 8001734:	50000400 	.word	0x50000400

08001738 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b08f      	sub	sp, #60	; 0x3c
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001740:	2410      	movs	r4, #16
 8001742:	193b      	adds	r3, r7, r4
 8001744:	0018      	movs	r0, r3
 8001746:	2328      	movs	r3, #40	; 0x28
 8001748:	001a      	movs	r2, r3
 800174a:	2100      	movs	r1, #0
 800174c:	f004 fbf3 	bl	8005f36 <memset>
  if(hrtc->Instance==RTC)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a19      	ldr	r2, [pc, #100]	; (80017bc <HAL_RTC_MspInit+0x84>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d12c      	bne.n	80017b4 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800175a:	193b      	adds	r3, r7, r4
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	0292      	lsls	r2, r2, #10
 8001760:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001762:	193b      	adds	r3, r7, r4
 8001764:	2280      	movs	r2, #128	; 0x80
 8001766:	0092      	lsls	r2, r2, #2
 8001768:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800176a:	193b      	adds	r3, r7, r4
 800176c:	0018      	movs	r0, r3
 800176e:	f002 fcd5 	bl	800411c <HAL_RCCEx_PeriphCLKConfig>
 8001772:	1e03      	subs	r3, r0, #0
 8001774:	d001      	beq.n	800177a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001776:	f7ff ff43 	bl	8001600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_RTC_MspInit+0x88>)
 800177c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <HAL_RTC_MspInit+0x88>)
 8001780:	2180      	movs	r1, #128	; 0x80
 8001782:	0209      	lsls	r1, r1, #8
 8001784:	430a      	orrs	r2, r1
 8001786:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001788:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <HAL_RTC_MspInit+0x88>)
 800178a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_RTC_MspInit+0x88>)
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	00c9      	lsls	r1, r1, #3
 8001792:	430a      	orrs	r2, r1
 8001794:	63da      	str	r2, [r3, #60]	; 0x3c
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_RTC_MspInit+0x88>)
 8001798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4013      	ands	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	2002      	movs	r0, #2
 80017aa:	f000 fad9 	bl	8001d60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80017ae:	2002      	movs	r0, #2
 80017b0:	f000 faeb 	bl	8001d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017b4:	46c0      	nop			; (mov r8, r8)
 80017b6:	46bd      	mov	sp, r7
 80017b8:	b00f      	add	sp, #60	; 0x3c
 80017ba:	bd90      	pop	{r4, r7, pc}
 80017bc:	40002800 	.word	0x40002800
 80017c0:	40021000 	.word	0x40021000

080017c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <HAL_TIM_Base_MspInit+0x38>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d10d      	bne.n	80017f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_TIM_Base_MspInit+0x3c>)
 80017d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_TIM_Base_MspInit+0x3c>)
 80017dc:	2180      	movs	r1, #128	; 0x80
 80017de:	0289      	lsls	r1, r1, #10
 80017e0:	430a      	orrs	r2, r1
 80017e2:	641a      	str	r2, [r3, #64]	; 0x40
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_TIM_Base_MspInit+0x3c>)
 80017e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	029b      	lsls	r3, r3, #10
 80017ec:	4013      	ands	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b004      	add	sp, #16
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	40014400 	.word	0x40014400
 8001800:	40021000 	.word	0x40021000

08001804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b08b      	sub	sp, #44	; 0x2c
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	2414      	movs	r4, #20
 800180e:	193b      	adds	r3, r7, r4
 8001810:	0018      	movs	r0, r3
 8001812:	2314      	movs	r3, #20
 8001814:	001a      	movs	r2, r3
 8001816:	2100      	movs	r1, #0
 8001818:	f004 fb8d 	bl	8005f36 <memset>
  if(huart->Instance==USART2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1b      	ldr	r2, [pc, #108]	; (8001890 <HAL_UART_MspInit+0x8c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d130      	bne.n	8001888 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_UART_MspInit+0x90>)
 8001828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <HAL_UART_MspInit+0x90>)
 800182c:	2180      	movs	r1, #128	; 0x80
 800182e:	0289      	lsls	r1, r1, #10
 8001830:	430a      	orrs	r2, r1
 8001832:	63da      	str	r2, [r3, #60]	; 0x3c
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_UART_MspInit+0x90>)
 8001836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	029b      	lsls	r3, r3, #10
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <HAL_UART_MspInit+0x90>)
 8001844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <HAL_UART_MspInit+0x90>)
 8001848:	2101      	movs	r1, #1
 800184a:	430a      	orrs	r2, r1
 800184c:	635a      	str	r2, [r3, #52]	; 0x34
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_UART_MspInit+0x90>)
 8001850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001852:	2201      	movs	r2, #1
 8001854:	4013      	ands	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800185a:	0021      	movs	r1, r4
 800185c:	187b      	adds	r3, r7, r1
 800185e:	220c      	movs	r2, #12
 8001860:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	187b      	adds	r3, r7, r1
 8001864:	2202      	movs	r2, #2
 8001866:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001868:	187b      	adds	r3, r7, r1
 800186a:	2201      	movs	r2, #1
 800186c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	187b      	adds	r3, r7, r1
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001874:	187b      	adds	r3, r7, r1
 8001876:	2201      	movs	r2, #1
 8001878:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	187a      	adds	r2, r7, r1
 800187c:	23a0      	movs	r3, #160	; 0xa0
 800187e:	05db      	lsls	r3, r3, #23
 8001880:	0011      	movs	r1, r2
 8001882:	0018      	movs	r0, r3
 8001884:	f000 fb14 	bl	8001eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001888:	46c0      	nop			; (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b00b      	add	sp, #44	; 0x2c
 800188e:	bd90      	pop	{r4, r7, pc}
 8001890:	40004400 	.word	0x40004400
 8001894:	40021000 	.word	0x40021000

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800189c:	e7fe      	b.n	800189c <NMI_Handler+0x4>

0800189e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <HardFault_Handler+0x4>

080018a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018a8:	46c0      	nop			; (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018bc:	f000 f988 	bl	8001bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c0:	46c0      	nop			; (mov r8, r8)
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80018ca:	f001 ff2d 	bl	8003728 <HAL_PWREx_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <RTC_TAMP_IRQHandler+0x14>)
 80018da:	0018      	movs	r0, r3
 80018dc:	f003 fb4a 	bl	8004f74 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	20000110 	.word	0x20000110

080018ec <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Display_Button_Pin);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f000 fc7b 	bl	80021ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Set_Button_Pin);
 80018f6:	2002      	movs	r0, #2
 80018f8:	f000 fc78 	bl	80021ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_NRST_Pin);
 8001906:	2004      	movs	r0, #4
 8001908:	f000 fc70 	bl	80021ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alarm_Enable_Button_Pin);
 8001916:	2010      	movs	r0, #16
 8001918:	f000 fc68 	bl	80021ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Hour_Set_Button_Pin);
 800191c:	2020      	movs	r0, #32
 800191e:	f000 fc65 	bl	80021ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Minute_Set_Button_Pin);
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	015b      	lsls	r3, r3, #5
 8001926:	0018      	movs	r0, r3
 8001928:	f000 fc60 	bl	80021ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <I2C1_IRQHandler+0x2c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	23e0      	movs	r3, #224	; 0xe0
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4013      	ands	r3, r2
 8001944:	d004      	beq.n	8001950 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <I2C1_IRQHandler+0x2c>)
 8001948:	0018      	movs	r0, r3
 800194a:	f000 fe3b 	bl	80025c4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800194e:	e003      	b.n	8001958 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <I2C1_IRQHandler+0x2c>)
 8001952:	0018      	movs	r0, r3
 8001954:	f000 fe1c 	bl	8002590 <HAL_I2C_EV_IRQHandler>
}
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	200000bc 	.word	0x200000bc

08001964 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	e00a      	b.n	800198c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001976:	e000      	b.n	800197a <_read+0x16>
 8001978:	bf00      	nop
 800197a:	0001      	movs	r1, r0
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	60ba      	str	r2, [r7, #8]
 8001982:	b2ca      	uxtb	r2, r1
 8001984:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	429a      	cmp	r2, r3
 8001992:	dbf0      	blt.n	8001976 <_read+0x12>
  }

  return len;
 8001994:	687b      	ldr	r3, [r7, #4]
}
 8001996:	0018      	movs	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	b006      	add	sp, #24
 800199c:	bd80      	pop	{r7, pc}

0800199e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e009      	b.n	80019c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	60ba      	str	r2, [r7, #8]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	0018      	movs	r0, r3
 80019ba:	f7fe fd4f 	bl	800045c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dbf1      	blt.n	80019b0 <_write+0x12>
  }
  return len;
 80019cc:	687b      	ldr	r3, [r7, #4]
}
 80019ce:	0018      	movs	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b006      	add	sp, #24
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_close>:

int _close(int file)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019de:	2301      	movs	r3, #1
 80019e0:	425b      	negs	r3, r3
}
 80019e2:	0018      	movs	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b002      	add	sp, #8
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	2280      	movs	r2, #128	; 0x80
 80019f8:	0192      	lsls	r2, r2, #6
 80019fa:	605a      	str	r2, [r3, #4]
  return 0;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	0018      	movs	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b002      	add	sp, #8
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_isatty>:

int _isatty(int file)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b002      	add	sp, #8
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b004      	add	sp, #16
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a38:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <_sbrk+0x5c>)
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <_sbrk+0x60>)
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <_sbrk+0x64>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <_sbrk+0x68>)
 8001a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	18d3      	adds	r3, r2, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d207      	bcs.n	8001a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a60:	f004 fa36 	bl	8005ed0 <__errno>
 8001a64:	0003      	movs	r3, r0
 8001a66:	220c      	movs	r2, #12
 8001a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	425b      	negs	r3, r3
 8001a6e:	e009      	b.n	8001a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	18d2      	adds	r2, r2, r3
 8001a7e:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <_sbrk+0x64>)
 8001a80:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	0018      	movs	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b006      	add	sp, #24
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20002000 	.word	0x20002000
 8001a90:	00000400 	.word	0x00000400
 8001a94:	2000024c 	.word	0x2000024c
 8001a98:	20000268 	.word	0x20000268

08001a9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa0:	46c0      	nop			; (mov r8, r8)
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001aa8:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aaa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aac:	f7ff fff6 	bl	8001a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab0:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ab2:	490d      	ldr	r1, [pc, #52]	; (8001ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <LoopForever+0xe>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab8:	e002      	b.n	8001ac0 <LoopCopyDataInit>

08001aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001abe:	3304      	adds	r3, #4

08001ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac4:	d3f9      	bcc.n	8001aba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac8:	4c0a      	ldr	r4, [pc, #40]	; (8001af4 <LoopForever+0x16>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001acc:	e001      	b.n	8001ad2 <LoopFillZerobss>

08001ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad0:	3204      	adds	r2, #4

08001ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad4:	d3fb      	bcc.n	8001ace <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ad6:	f004 fa01 	bl	8005edc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001ada:	f7fe fcd1 	bl	8000480 <main>

08001ade <LoopForever>:

LoopForever:
  b LoopForever
 8001ade:	e7fe      	b.n	8001ade <LoopForever>
  ldr   r0, =_estack
 8001ae0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001aec:	08007558 	.word	0x08007558
  ldr r2, =_sbss
 8001af0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001af4:	20000264 	.word	0x20000264

08001af8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC1_IRQHandler>
	...

08001afc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b02:	1dfb      	adds	r3, r7, #7
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_Init+0x3c>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_Init+0x3c>)
 8001b0e:	2180      	movs	r1, #128	; 0x80
 8001b10:	0049      	lsls	r1, r1, #1
 8001b12:	430a      	orrs	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b16:	2000      	movs	r0, #0
 8001b18:	f000 f810 	bl	8001b3c <HAL_InitTick>
 8001b1c:	1e03      	subs	r3, r0, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001b20:	1dfb      	adds	r3, r7, #7
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]
 8001b26:	e001      	b.n	8001b2c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001b28:	f7ff fd70 	bl	800160c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b2c:	1dfb      	adds	r3, r7, #7
 8001b2e:	781b      	ldrb	r3, [r3, #0]
}
 8001b30:	0018      	movs	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b002      	add	sp, #8
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40022000 	.word	0x40022000

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b44:	230f      	movs	r3, #15
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <HAL_InitTick+0x88>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d02b      	beq.n	8001bac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001b54:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <HAL_InitTick+0x8c>)
 8001b56:	681c      	ldr	r4, [r3, #0]
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <HAL_InitTick+0x88>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	23fa      	movs	r3, #250	; 0xfa
 8001b60:	0098      	lsls	r0, r3, #2
 8001b62:	f7fe fad9 	bl	8000118 <__udivsi3>
 8001b66:	0003      	movs	r3, r0
 8001b68:	0019      	movs	r1, r3
 8001b6a:	0020      	movs	r0, r4
 8001b6c:	f7fe fad4 	bl	8000118 <__udivsi3>
 8001b70:	0003      	movs	r3, r0
 8001b72:	0018      	movs	r0, r3
 8001b74:	f000 f919 	bl	8001daa <HAL_SYSTICK_Config>
 8001b78:	1e03      	subs	r3, r0, #0
 8001b7a:	d112      	bne.n	8001ba2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d80a      	bhi.n	8001b98 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	2301      	movs	r3, #1
 8001b86:	425b      	negs	r3, r3
 8001b88:	2200      	movs	r2, #0
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f000 f8e8 	bl	8001d60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b90:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_InitTick+0x90>)
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	e00d      	b.n	8001bb4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001b98:	230f      	movs	r3, #15
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	e008      	b.n	8001bb4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ba2:	230f      	movs	r3, #15
 8001ba4:	18fb      	adds	r3, r7, r3
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	e003      	b.n	8001bb4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bac:	230f      	movs	r3, #15
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	781b      	ldrb	r3, [r3, #0]
}
 8001bba:	0018      	movs	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b005      	add	sp, #20
 8001bc0:	bd90      	pop	{r4, r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	20000038 	.word	0x20000038
 8001bc8:	20000030 	.word	0x20000030
 8001bcc:	20000034 	.word	0x20000034

08001bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_IncTick+0x1c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	001a      	movs	r2, r3
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_IncTick+0x20>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	18d2      	adds	r2, r2, r3
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_IncTick+0x20>)
 8001be2:	601a      	str	r2, [r3, #0]
}
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	20000038 	.word	0x20000038
 8001bf0:	20000250 	.word	0x20000250

08001bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b02      	ldr	r3, [pc, #8]	; (8001c04 <HAL_GetTick+0x10>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	20000250 	.word	0x20000250

08001c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	0002      	movs	r2, r0
 8001c10:	1dfb      	adds	r3, r7, #7
 8001c12:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c14:	1dfb      	adds	r3, r7, #7
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b7f      	cmp	r3, #127	; 0x7f
 8001c1a:	d809      	bhi.n	8001c30 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1c:	1dfb      	adds	r3, r7, #7
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	001a      	movs	r2, r3
 8001c22:	231f      	movs	r3, #31
 8001c24:	401a      	ands	r2, r3
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <__NVIC_EnableIRQ+0x30>)
 8001c28:	2101      	movs	r1, #1
 8001c2a:	4091      	lsls	r1, r2
 8001c2c:	000a      	movs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001c30:	46c0      	nop			; (mov r8, r8)
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b002      	add	sp, #8
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	0002      	movs	r2, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	1dfb      	adds	r3, r7, #7
 8001c48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c4a:	1dfb      	adds	r3, r7, #7
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8001c50:	d828      	bhi.n	8001ca4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c52:	4a2f      	ldr	r2, [pc, #188]	; (8001d10 <__NVIC_SetPriority+0xd4>)
 8001c54:	1dfb      	adds	r3, r7, #7
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b25b      	sxtb	r3, r3
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	33c0      	adds	r3, #192	; 0xc0
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	589b      	ldr	r3, [r3, r2]
 8001c62:	1dfa      	adds	r2, r7, #7
 8001c64:	7812      	ldrb	r2, [r2, #0]
 8001c66:	0011      	movs	r1, r2
 8001c68:	2203      	movs	r2, #3
 8001c6a:	400a      	ands	r2, r1
 8001c6c:	00d2      	lsls	r2, r2, #3
 8001c6e:	21ff      	movs	r1, #255	; 0xff
 8001c70:	4091      	lsls	r1, r2
 8001c72:	000a      	movs	r2, r1
 8001c74:	43d2      	mvns	r2, r2
 8001c76:	401a      	ands	r2, r3
 8001c78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	019b      	lsls	r3, r3, #6
 8001c7e:	22ff      	movs	r2, #255	; 0xff
 8001c80:	401a      	ands	r2, r3
 8001c82:	1dfb      	adds	r3, r7, #7
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	0018      	movs	r0, r3
 8001c88:	2303      	movs	r3, #3
 8001c8a:	4003      	ands	r3, r0
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c90:	481f      	ldr	r0, [pc, #124]	; (8001d10 <__NVIC_SetPriority+0xd4>)
 8001c92:	1dfb      	adds	r3, r7, #7
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	b25b      	sxtb	r3, r3
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	33c0      	adds	r3, #192	; 0xc0
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ca2:	e031      	b.n	8001d08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ca4:	4a1b      	ldr	r2, [pc, #108]	; (8001d14 <__NVIC_SetPriority+0xd8>)
 8001ca6:	1dfb      	adds	r3, r7, #7
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	0019      	movs	r1, r3
 8001cac:	230f      	movs	r3, #15
 8001cae:	400b      	ands	r3, r1
 8001cb0:	3b08      	subs	r3, #8
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	3306      	adds	r3, #6
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	18d3      	adds	r3, r2, r3
 8001cba:	3304      	adds	r3, #4
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	1dfa      	adds	r2, r7, #7
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	0011      	movs	r1, r2
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	400a      	ands	r2, r1
 8001cc8:	00d2      	lsls	r2, r2, #3
 8001cca:	21ff      	movs	r1, #255	; 0xff
 8001ccc:	4091      	lsls	r1, r2
 8001cce:	000a      	movs	r2, r1
 8001cd0:	43d2      	mvns	r2, r2
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	019b      	lsls	r3, r3, #6
 8001cda:	22ff      	movs	r2, #255	; 0xff
 8001cdc:	401a      	ands	r2, r3
 8001cde:	1dfb      	adds	r3, r7, #7
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	4003      	ands	r3, r0
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cec:	4809      	ldr	r0, [pc, #36]	; (8001d14 <__NVIC_SetPriority+0xd8>)
 8001cee:	1dfb      	adds	r3, r7, #7
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	001c      	movs	r4, r3
 8001cf4:	230f      	movs	r3, #15
 8001cf6:	4023      	ands	r3, r4
 8001cf8:	3b08      	subs	r3, #8
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	3306      	adds	r3, #6
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	18c3      	adds	r3, r0, r3
 8001d04:	3304      	adds	r3, #4
 8001d06:	601a      	str	r2, [r3, #0]
}
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b003      	add	sp, #12
 8001d0e:	bd90      	pop	{r4, r7, pc}
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	1e5a      	subs	r2, r3, #1
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	045b      	lsls	r3, r3, #17
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d301      	bcc.n	8001d30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e010      	b.n	8001d52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <SysTick_Config+0x44>)
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	3a01      	subs	r2, #1
 8001d36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d38:	2301      	movs	r3, #1
 8001d3a:	425b      	negs	r3, r3
 8001d3c:	2103      	movs	r1, #3
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f7ff ff7c 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <SysTick_Config+0x44>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4a:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <SysTick_Config+0x44>)
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	0018      	movs	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b002      	add	sp, #8
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	e000e010 	.word	0xe000e010

08001d60 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	187b      	adds	r3, r7, r1
 8001d6e:	1c02      	adds	r2, r0, #0
 8001d70:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	187b      	adds	r3, r7, r1
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	b25b      	sxtb	r3, r3
 8001d7a:	0011      	movs	r1, r2
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f7ff ff5d 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b004      	add	sp, #16
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	0002      	movs	r2, r0
 8001d92:	1dfb      	adds	r3, r7, #7
 8001d94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b25b      	sxtb	r3, r3
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f7ff ff33 	bl	8001c08 <__NVIC_EnableIRQ>
}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b002      	add	sp, #8
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	0018      	movs	r0, r3
 8001db6:	f7ff ffaf 	bl	8001d18 <SysTick_Config>
 8001dba:	0003      	movs	r3, r0
}
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b002      	add	sp, #8
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dcc:	210f      	movs	r1, #15
 8001dce:	187b      	adds	r3, r7, r1
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2225      	movs	r2, #37	; 0x25
 8001dd8:	5c9b      	ldrb	r3, [r3, r2]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d006      	beq.n	8001dee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2204      	movs	r2, #4
 8001de4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e049      	b.n	8001e82 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	210e      	movs	r1, #14
 8001dfa:	438a      	bics	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2101      	movs	r1, #1
 8001e0a:	438a      	bics	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e18:	491d      	ldr	r1, [pc, #116]	; (8001e90 <HAL_DMA_Abort_IT+0xcc>)
 8001e1a:	400a      	ands	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_DMA_Abort_IT+0xd0>)
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	221c      	movs	r2, #28
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_DMA_Abort_IT+0xd0>)
 8001e30:	430a      	orrs	r2, r1
 8001e32:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e3c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00c      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e50:	490f      	ldr	r1, [pc, #60]	; (8001e90 <HAL_DMA_Abort_IT+0xcc>)
 8001e52:	400a      	ands	r2, r1
 8001e54:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001e5e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2225      	movs	r2, #37	; 0x25
 8001e64:	2101      	movs	r1, #1
 8001e66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2224      	movs	r2, #36	; 0x24
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d004      	beq.n	8001e82 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	0010      	movs	r0, r2
 8001e80:	4798      	blx	r3
    }
  }
  return status;
 8001e82:	230f      	movs	r3, #15
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	781b      	ldrb	r3, [r3, #0]
}
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b004      	add	sp, #16
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	fffffeff 	.word	0xfffffeff
 8001e94:	40020000 	.word	0x40020000

08001e98 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2225      	movs	r2, #37	; 0x25
 8001ea4:	5c9b      	ldrb	r3, [r3, r2]
 8001ea6:	b2db      	uxtb	r3, r3
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b002      	add	sp, #8
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ebe:	e147      	b.n	8002150 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4091      	lsls	r1, r2
 8001eca:	000a      	movs	r2, r1
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d100      	bne.n	8001ed8 <HAL_GPIO_Init+0x28>
 8001ed6:	e138      	b.n	800214a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2203      	movs	r2, #3
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d005      	beq.n	8001ef0 <HAL_GPIO_Init+0x40>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2203      	movs	r2, #3
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d130      	bne.n	8001f52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	2203      	movs	r2, #3
 8001efc:	409a      	lsls	r2, r3
 8001efe:	0013      	movs	r3, r2
 8001f00:	43da      	mvns	r2, r3
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	409a      	lsls	r2, r3
 8001f12:	0013      	movs	r3, r2
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f26:	2201      	movs	r2, #1
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	0013      	movs	r3, r2
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	091b      	lsrs	r3, r3, #4
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	401a      	ands	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	409a      	lsls	r2, r3
 8001f44:	0013      	movs	r3, r2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2203      	movs	r2, #3
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d017      	beq.n	8001f8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	0013      	movs	r3, r2
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	0013      	movs	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2203      	movs	r2, #3
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d123      	bne.n	8001fe2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	0092      	lsls	r2, r2, #2
 8001fa4:	58d3      	ldr	r3, [r2, r3]
 8001fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2207      	movs	r2, #7
 8001fac:	4013      	ands	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	0013      	movs	r3, r2
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2107      	movs	r1, #7
 8001fc6:	400b      	ands	r3, r1
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	0013      	movs	r3, r2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	08da      	lsrs	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3208      	adds	r2, #8
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	0013      	movs	r3, r2
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2203      	movs	r2, #3
 8002000:	401a      	ands	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	409a      	lsls	r2, r3
 8002008:	0013      	movs	r3, r2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	23c0      	movs	r3, #192	; 0xc0
 800201c:	029b      	lsls	r3, r3, #10
 800201e:	4013      	ands	r3, r2
 8002020:	d100      	bne.n	8002024 <HAL_GPIO_Init+0x174>
 8002022:	e092      	b.n	800214a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002024:	4a50      	ldr	r2, [pc, #320]	; (8002168 <HAL_GPIO_Init+0x2b8>)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	089b      	lsrs	r3, r3, #2
 800202a:	3318      	adds	r3, #24
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	589b      	ldr	r3, [r3, r2]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2203      	movs	r2, #3
 8002036:	4013      	ands	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	220f      	movs	r2, #15
 800203c:	409a      	lsls	r2, r3
 800203e:	0013      	movs	r3, r2
 8002040:	43da      	mvns	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	23a0      	movs	r3, #160	; 0xa0
 800204c:	05db      	lsls	r3, r3, #23
 800204e:	429a      	cmp	r2, r3
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0x1ca>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a45      	ldr	r2, [pc, #276]	; (800216c <HAL_GPIO_Init+0x2bc>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00d      	beq.n	8002076 <HAL_GPIO_Init+0x1c6>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a44      	ldr	r2, [pc, #272]	; (8002170 <HAL_GPIO_Init+0x2c0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d007      	beq.n	8002072 <HAL_GPIO_Init+0x1c2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a43      	ldr	r2, [pc, #268]	; (8002174 <HAL_GPIO_Init+0x2c4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_GPIO_Init+0x1be>
 800206a:	2303      	movs	r3, #3
 800206c:	e006      	b.n	800207c <HAL_GPIO_Init+0x1cc>
 800206e:	2305      	movs	r3, #5
 8002070:	e004      	b.n	800207c <HAL_GPIO_Init+0x1cc>
 8002072:	2302      	movs	r3, #2
 8002074:	e002      	b.n	800207c <HAL_GPIO_Init+0x1cc>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <HAL_GPIO_Init+0x1cc>
 800207a:	2300      	movs	r3, #0
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	2103      	movs	r1, #3
 8002080:	400a      	ands	r2, r1
 8002082:	00d2      	lsls	r2, r2, #3
 8002084:	4093      	lsls	r3, r2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800208c:	4936      	ldr	r1, [pc, #216]	; (8002168 <HAL_GPIO_Init+0x2b8>)
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	089b      	lsrs	r3, r3, #2
 8002092:	3318      	adds	r3, #24
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800209a:	4b33      	ldr	r3, [pc, #204]	; (8002168 <HAL_GPIO_Init+0x2b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	43da      	mvns	r2, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	035b      	lsls	r3, r3, #13
 80020b2:	4013      	ands	r3, r2
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020be:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <HAL_GPIO_Init+0x2b8>)
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80020c4:	4b28      	ldr	r3, [pc, #160]	; (8002168 <HAL_GPIO_Init+0x2b8>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	43da      	mvns	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	039b      	lsls	r3, r3, #14
 80020dc:	4013      	ands	r3, r2
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020e8:	4b1f      	ldr	r3, [pc, #124]	; (8002168 <HAL_GPIO_Init+0x2b8>)
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020ee:	4a1e      	ldr	r2, [pc, #120]	; (8002168 <HAL_GPIO_Init+0x2b8>)
 80020f0:	2384      	movs	r3, #132	; 0x84
 80020f2:	58d3      	ldr	r3, [r2, r3]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	43da      	mvns	r2, r3
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	029b      	lsls	r3, r3, #10
 8002108:	4013      	ands	r3, r2
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002114:	4914      	ldr	r1, [pc, #80]	; (8002168 <HAL_GPIO_Init+0x2b8>)
 8002116:	2284      	movs	r2, #132	; 0x84
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800211c:	4a12      	ldr	r2, [pc, #72]	; (8002168 <HAL_GPIO_Init+0x2b8>)
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	58d3      	ldr	r3, [r2, r3]
 8002122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	43da      	mvns	r2, r3
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	025b      	lsls	r3, r3, #9
 8002136:	4013      	ands	r3, r2
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002142:	4909      	ldr	r1, [pc, #36]	; (8002168 <HAL_GPIO_Init+0x2b8>)
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3301      	adds	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	40da      	lsrs	r2, r3
 8002158:	1e13      	subs	r3, r2, #0
 800215a:	d000      	beq.n	800215e <HAL_GPIO_Init+0x2ae>
 800215c:	e6b0      	b.n	8001ec0 <HAL_GPIO_Init+0x10>
  }
}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	46c0      	nop			; (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	b006      	add	sp, #24
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021800 	.word	0x40021800
 800216c:	50000400 	.word	0x50000400
 8002170:	50000800 	.word	0x50000800
 8002174:	50000c00 	.word	0x50000c00

08002178 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	000a      	movs	r2, r1
 8002182:	1cbb      	adds	r3, r7, #2
 8002184:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	1cba      	adds	r2, r7, #2
 800218c:	8812      	ldrh	r2, [r2, #0]
 800218e:	4013      	ands	r3, r2
 8002190:	d004      	beq.n	800219c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002192:	230f      	movs	r3, #15
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
 800219a:	e003      	b.n	80021a4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800219c:	230f      	movs	r3, #15
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80021a4:	230f      	movs	r3, #15
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	781b      	ldrb	r3, [r3, #0]
}
 80021aa:	0018      	movs	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b004      	add	sp, #16
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	0008      	movs	r0, r1
 80021bc:	0011      	movs	r1, r2
 80021be:	1cbb      	adds	r3, r7, #2
 80021c0:	1c02      	adds	r2, r0, #0
 80021c2:	801a      	strh	r2, [r3, #0]
 80021c4:	1c7b      	adds	r3, r7, #1
 80021c6:	1c0a      	adds	r2, r1, #0
 80021c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ca:	1c7b      	adds	r3, r7, #1
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d004      	beq.n	80021dc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021d2:	1cbb      	adds	r3, r7, #2
 80021d4:	881a      	ldrh	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021da:	e003      	b.n	80021e4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021dc:	1cbb      	adds	r3, r7, #2
 80021de:	881a      	ldrh	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021e4:	46c0      	nop			; (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b002      	add	sp, #8
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	0002      	movs	r2, r0
 80021f4:	1dbb      	adds	r3, r7, #6
 80021f6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	1dba      	adds	r2, r7, #6
 80021fe:	8812      	ldrh	r2, [r2, #0]
 8002200:	4013      	ands	r3, r2
 8002202:	d008      	beq.n	8002216 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002204:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002206:	1dba      	adds	r2, r7, #6
 8002208:	8812      	ldrh	r2, [r2, #0]
 800220a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800220c:	1dbb      	adds	r3, r7, #6
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	0018      	movs	r0, r3
 8002212:	f000 f815 	bl	8002240 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	1dba      	adds	r2, r7, #6
 800221c:	8812      	ldrh	r2, [r2, #0]
 800221e:	4013      	ands	r3, r2
 8002220:	d008      	beq.n	8002234 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002224:	1dba      	adds	r2, r7, #6
 8002226:	8812      	ldrh	r2, [r2, #0]
 8002228:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800222a:	1dbb      	adds	r3, r7, #6
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	0018      	movs	r0, r3
 8002230:	f7fe fe4a 	bl	8000ec8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002234:	46c0      	nop			; (mov r8, r8)
 8002236:	46bd      	mov	sp, r7
 8002238:	b002      	add	sp, #8
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021800 	.word	0x40021800

08002240 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	0002      	movs	r2, r0
 8002248:	1dbb      	adds	r3, r7, #6
 800224a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b002      	add	sp, #8
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e082      	b.n	800236c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2241      	movs	r2, #65	; 0x41
 800226a:	5c9b      	ldrb	r3, [r3, r2]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d107      	bne.n	8002282 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2240      	movs	r2, #64	; 0x40
 8002276:	2100      	movs	r1, #0
 8002278:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	0018      	movs	r0, r3
 800227e:	f7ff f9f1 	bl	8001664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2241      	movs	r2, #65	; 0x41
 8002286:	2124      	movs	r1, #36	; 0x24
 8002288:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2101      	movs	r1, #1
 8002296:	438a      	bics	r2, r1
 8002298:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4934      	ldr	r1, [pc, #208]	; (8002374 <HAL_I2C_Init+0x120>)
 80022a4:	400a      	ands	r2, r1
 80022a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4931      	ldr	r1, [pc, #196]	; (8002378 <HAL_I2C_Init+0x124>)
 80022b4:	400a      	ands	r2, r1
 80022b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d108      	bne.n	80022d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	0209      	lsls	r1, r1, #8
 80022cc:	430a      	orrs	r2, r1
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	e007      	b.n	80022e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2184      	movs	r1, #132	; 0x84
 80022dc:	0209      	lsls	r1, r1, #8
 80022de:	430a      	orrs	r2, r1
 80022e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d104      	bne.n	80022f4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2280      	movs	r2, #128	; 0x80
 80022f0:	0112      	lsls	r2, r2, #4
 80022f2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	491f      	ldr	r1, [pc, #124]	; (800237c <HAL_I2C_Init+0x128>)
 8002300:	430a      	orrs	r2, r1
 8002302:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	491a      	ldr	r1, [pc, #104]	; (8002378 <HAL_I2C_Init+0x124>)
 8002310:	400a      	ands	r2, r1
 8002312:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	431a      	orrs	r2, r3
 800231e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69d9      	ldr	r1, [r3, #28]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1a      	ldr	r2, [r3, #32]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2101      	movs	r1, #1
 800234a:	430a      	orrs	r2, r1
 800234c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2241      	movs	r2, #65	; 0x41
 8002358:	2120      	movs	r1, #32
 800235a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2242      	movs	r2, #66	; 0x42
 8002366:	2100      	movs	r1, #0
 8002368:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b002      	add	sp, #8
 8002372:	bd80      	pop	{r7, pc}
 8002374:	f0ffffff 	.word	0xf0ffffff
 8002378:	ffff7fff 	.word	0xffff7fff
 800237c:	02008000 	.word	0x02008000

08002380 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b089      	sub	sp, #36	; 0x24
 8002384:	af02      	add	r7, sp, #8
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	0008      	movs	r0, r1
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	0019      	movs	r1, r3
 800238e:	230a      	movs	r3, #10
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	1c02      	adds	r2, r0, #0
 8002394:	801a      	strh	r2, [r3, #0]
 8002396:	2308      	movs	r3, #8
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	1c0a      	adds	r2, r1, #0
 800239c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2241      	movs	r2, #65	; 0x41
 80023a2:	5c9b      	ldrb	r3, [r3, r2]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b20      	cmp	r3, #32
 80023a8:	d000      	beq.n	80023ac <HAL_I2C_Master_Transmit+0x2c>
 80023aa:	e0e7      	b.n	800257c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2240      	movs	r2, #64	; 0x40
 80023b0:	5c9b      	ldrb	r3, [r3, r2]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_I2C_Master_Transmit+0x3a>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e0e1      	b.n	800257e <HAL_I2C_Master_Transmit+0x1fe>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2240      	movs	r2, #64	; 0x40
 80023be:	2101      	movs	r1, #1
 80023c0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023c2:	f7ff fc17 	bl	8001bf4 <HAL_GetTick>
 80023c6:	0003      	movs	r3, r0
 80023c8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	0219      	lsls	r1, r3, #8
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	2319      	movs	r3, #25
 80023d6:	2201      	movs	r2, #1
 80023d8:	f000 fe76 	bl	80030c8 <I2C_WaitOnFlagUntilTimeout>
 80023dc:	1e03      	subs	r3, r0, #0
 80023de:	d001      	beq.n	80023e4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0cc      	b.n	800257e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2241      	movs	r2, #65	; 0x41
 80023e8:	2121      	movs	r1, #33	; 0x21
 80023ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2242      	movs	r2, #66	; 0x42
 80023f0:	2110      	movs	r1, #16
 80023f2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2208      	movs	r2, #8
 8002404:	18ba      	adds	r2, r7, r2
 8002406:	8812      	ldrh	r2, [r2, #0]
 8002408:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002414:	b29b      	uxth	r3, r3
 8002416:	2bff      	cmp	r3, #255	; 0xff
 8002418:	d911      	bls.n	800243e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	22ff      	movs	r2, #255	; 0xff
 800241e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	b2da      	uxtb	r2, r3
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	045c      	lsls	r4, r3, #17
 800242a:	230a      	movs	r3, #10
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	8819      	ldrh	r1, [r3, #0]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	4b55      	ldr	r3, [pc, #340]	; (8002588 <HAL_I2C_Master_Transmit+0x208>)
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	0023      	movs	r3, r4
 8002438:	f001 f800 	bl	800343c <I2C_TransferConfig>
 800243c:	e075      	b.n	800252a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244c:	b2da      	uxtb	r2, r3
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	049c      	lsls	r4, r3, #18
 8002452:	230a      	movs	r3, #10
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	8819      	ldrh	r1, [r3, #0]
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	4b4b      	ldr	r3, [pc, #300]	; (8002588 <HAL_I2C_Master_Transmit+0x208>)
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	0023      	movs	r3, r4
 8002460:	f000 ffec 	bl	800343c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002464:	e061      	b.n	800252a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	0018      	movs	r0, r3
 800246e:	f000 fe6a 	bl	8003146 <I2C_WaitOnTXISFlagUntilTimeout>
 8002472:	1e03      	subs	r3, r0, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e081      	b.n	800257e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	781a      	ldrb	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d03a      	beq.n	800252a <HAL_I2C_Master_Transmit+0x1aa>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d136      	bne.n	800252a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	0013      	movs	r3, r2
 80024c6:	2200      	movs	r2, #0
 80024c8:	2180      	movs	r1, #128	; 0x80
 80024ca:	f000 fdfd 	bl	80030c8 <I2C_WaitOnFlagUntilTimeout>
 80024ce:	1e03      	subs	r3, r0, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e053      	b.n	800257e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2bff      	cmp	r3, #255	; 0xff
 80024de:	d911      	bls.n	8002504 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	22ff      	movs	r2, #255	; 0xff
 80024e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	045c      	lsls	r4, r3, #17
 80024f0:	230a      	movs	r3, #10
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	8819      	ldrh	r1, [r3, #0]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	2300      	movs	r3, #0
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	0023      	movs	r3, r4
 80024fe:	f000 ff9d 	bl	800343c <I2C_TransferConfig>
 8002502:	e012      	b.n	800252a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002512:	b2da      	uxtb	r2, r3
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	049c      	lsls	r4, r3, #18
 8002518:	230a      	movs	r3, #10
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	8819      	ldrh	r1, [r3, #0]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	2300      	movs	r3, #0
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	0023      	movs	r3, r4
 8002526:	f000 ff89 	bl	800343c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d198      	bne.n	8002466 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	0018      	movs	r0, r3
 800253c:	f000 fe42 	bl	80031c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002540:	1e03      	subs	r3, r0, #0
 8002542:	d001      	beq.n	8002548 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e01a      	b.n	800257e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2220      	movs	r2, #32
 800254e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	490c      	ldr	r1, [pc, #48]	; (800258c <HAL_I2C_Master_Transmit+0x20c>)
 800255c:	400a      	ands	r2, r1
 800255e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2241      	movs	r2, #65	; 0x41
 8002564:	2120      	movs	r1, #32
 8002566:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2242      	movs	r2, #66	; 0x42
 800256c:	2100      	movs	r1, #0
 800256e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2240      	movs	r2, #64	; 0x40
 8002574:	2100      	movs	r1, #0
 8002576:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
  }
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b007      	add	sp, #28
 8002584:	bd90      	pop	{r4, r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	80002000 	.word	0x80002000
 800258c:	fe00e800 	.word	0xfe00e800

08002590 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	68f9      	ldr	r1, [r7, #12]
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
  }
}
 80025bc:	46c0      	nop			; (mov r8, r8)
 80025be:	46bd      	mov	sp, r7
 80025c0:	b004      	add	sp, #16
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	001a      	movs	r2, r3
 80025e2:	2301      	movs	r3, #1
 80025e4:	4013      	ands	r3, r2
 80025e6:	d010      	beq.n	800260a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	09db      	lsrs	r3, r3, #7
 80025ec:	001a      	movs	r2, r3
 80025ee:	2301      	movs	r3, #1
 80025f0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80025f2:	d00a      	beq.n	800260a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	2201      	movs	r2, #1
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2280      	movs	r2, #128	; 0x80
 8002606:	0052      	lsls	r2, r2, #1
 8002608:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	0a9b      	lsrs	r3, r3, #10
 800260e:	001a      	movs	r2, r3
 8002610:	2301      	movs	r3, #1
 8002612:	4013      	ands	r3, r2
 8002614:	d010      	beq.n	8002638 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	09db      	lsrs	r3, r3, #7
 800261a:	001a      	movs	r2, r3
 800261c:	2301      	movs	r3, #1
 800261e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002620:	d00a      	beq.n	8002638 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	2208      	movs	r2, #8
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2280      	movs	r2, #128	; 0x80
 8002634:	00d2      	lsls	r2, r2, #3
 8002636:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	0a5b      	lsrs	r3, r3, #9
 800263c:	001a      	movs	r2, r3
 800263e:	2301      	movs	r3, #1
 8002640:	4013      	ands	r3, r2
 8002642:	d010      	beq.n	8002666 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	09db      	lsrs	r3, r3, #7
 8002648:	001a      	movs	r2, r3
 800264a:	2301      	movs	r3, #1
 800264c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800264e:	d00a      	beq.n	8002666 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	2202      	movs	r2, #2
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2280      	movs	r2, #128	; 0x80
 8002662:	0092      	lsls	r2, r2, #2
 8002664:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	220b      	movs	r2, #11
 8002670:	4013      	ands	r3, r2
 8002672:	d005      	beq.n	8002680 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	0011      	movs	r1, r2
 800267a:	0018      	movs	r0, r3
 800267c:	f000 fbd8 	bl	8002e30 <I2C_ITError>
  }
}
 8002680:	46c0      	nop			; (mov r8, r8)
 8002682:	46bd      	mov	sp, r7
 8002684:	b006      	add	sp, #24
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	b002      	add	sp, #8
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80026a0:	46c0      	nop			; (mov r8, r8)
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b002      	add	sp, #8
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	0008      	movs	r0, r1
 80026b2:	0011      	movs	r1, r2
 80026b4:	1cfb      	adds	r3, r7, #3
 80026b6:	1c02      	adds	r2, r0, #0
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	003b      	movs	r3, r7
 80026bc:	1c0a      	adds	r2, r1, #0
 80026be:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80026c0:	46c0      	nop			; (mov r8, r8)
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b002      	add	sp, #8
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80026d0:	46c0      	nop			; (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b002      	add	sp, #8
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b002      	add	sp, #8
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2240      	movs	r2, #64	; 0x40
 8002712:	5c9b      	ldrb	r3, [r3, r2]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <I2C_Slave_ISR_IT+0x24>
 8002718:	2302      	movs	r3, #2
 800271a:	e0fa      	b.n	8002912 <I2C_Slave_ISR_IT+0x21a>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2240      	movs	r2, #64	; 0x40
 8002720:	2101      	movs	r1, #1
 8002722:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	001a      	movs	r2, r3
 800272a:	2301      	movs	r3, #1
 800272c:	4013      	ands	r3, r2
 800272e:	d00b      	beq.n	8002748 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	001a      	movs	r2, r3
 8002736:	2301      	movs	r3, #1
 8002738:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800273a:	d005      	beq.n	8002748 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	0011      	movs	r1, r2
 8002742:	0018      	movs	r0, r3
 8002744:	f000 f9f6 	bl	8002b34 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	001a      	movs	r2, r3
 800274e:	2301      	movs	r3, #1
 8002750:	4013      	ands	r3, r2
 8002752:	d054      	beq.n	80027fe <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	001a      	movs	r2, r3
 800275a:	2301      	movs	r3, #1
 800275c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800275e:	d04e      	beq.n	80027fe <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d12d      	bne.n	80027c6 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2241      	movs	r2, #65	; 0x41
 800276e:	5c9b      	ldrb	r3, [r3, r2]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b28      	cmp	r3, #40	; 0x28
 8002774:	d10b      	bne.n	800278e <I2C_Slave_ISR_IT+0x96>
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	049b      	lsls	r3, r3, #18
 800277c:	429a      	cmp	r2, r3
 800277e:	d106      	bne.n	800278e <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	0011      	movs	r1, r2
 8002786:	0018      	movs	r0, r3
 8002788:	f000 faf8 	bl	8002d7c <I2C_ITListenCplt>
 800278c:	e036      	b.n	80027fc <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2241      	movs	r2, #65	; 0x41
 8002792:	5c9b      	ldrb	r3, [r3, r2]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b29      	cmp	r3, #41	; 0x29
 8002798:	d110      	bne.n	80027bc <I2C_Slave_ISR_IT+0xc4>
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	4a5f      	ldr	r2, [pc, #380]	; (800291c <I2C_Slave_ISR_IT+0x224>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00c      	beq.n	80027bc <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2210      	movs	r2, #16
 80027a8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	0018      	movs	r0, r3
 80027ae:	f000 fc4a 	bl	8003046 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	0018      	movs	r0, r3
 80027b6:	f000 f957 	bl	8002a68 <I2C_ITSlaveSeqCplt>
 80027ba:	e01f      	b.n	80027fc <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2210      	movs	r2, #16
 80027c2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80027c4:	e09d      	b.n	8002902 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2210      	movs	r2, #16
 80027cc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	2204      	movs	r2, #4
 80027d4:	431a      	orrs	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <I2C_Slave_ISR_IT+0xf4>
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	2380      	movs	r3, #128	; 0x80
 80027e4:	045b      	lsls	r3, r3, #17
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d000      	beq.n	80027ec <I2C_Slave_ISR_IT+0xf4>
 80027ea:	e08a      	b.n	8002902 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	0011      	movs	r1, r2
 80027f4:	0018      	movs	r0, r3
 80027f6:	f000 fb1b 	bl	8002e30 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80027fa:	e082      	b.n	8002902 <I2C_Slave_ISR_IT+0x20a>
 80027fc:	e081      	b.n	8002902 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	089b      	lsrs	r3, r3, #2
 8002802:	001a      	movs	r2, r3
 8002804:	2301      	movs	r3, #1
 8002806:	4013      	ands	r3, r2
 8002808:	d031      	beq.n	800286e <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	001a      	movs	r2, r3
 8002810:	2301      	movs	r3, #1
 8002812:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002814:	d02b      	beq.n	800286e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d018      	beq.n	8002852 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d154      	bne.n	8002906 <I2C_Slave_ISR_IT+0x20e>
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	4a2f      	ldr	r2, [pc, #188]	; (800291c <I2C_Slave_ISR_IT+0x224>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d050      	beq.n	8002906 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	0018      	movs	r0, r3
 8002868:	f000 f8fe 	bl	8002a68 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800286c:	e04b      	b.n	8002906 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	08db      	lsrs	r3, r3, #3
 8002872:	001a      	movs	r2, r3
 8002874:	2301      	movs	r3, #1
 8002876:	4013      	ands	r3, r2
 8002878:	d00c      	beq.n	8002894 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	08db      	lsrs	r3, r3, #3
 800287e:	001a      	movs	r2, r3
 8002880:	2301      	movs	r3, #1
 8002882:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002884:	d006      	beq.n	8002894 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	0011      	movs	r1, r2
 800288c:	0018      	movs	r0, r3
 800288e:	f000 f847 	bl	8002920 <I2C_ITAddrCplt>
 8002892:	e039      	b.n	8002908 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	085b      	lsrs	r3, r3, #1
 8002898:	001a      	movs	r2, r3
 800289a:	2301      	movs	r3, #1
 800289c:	4013      	ands	r3, r2
 800289e:	d033      	beq.n	8002908 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	085b      	lsrs	r3, r3, #1
 80028a4:	001a      	movs	r2, r3
 80028a6:	2301      	movs	r3, #1
 80028a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80028aa:	d02d      	beq.n	8002908 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d018      	beq.n	80028e8 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	781a      	ldrb	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	; 0x28
 80028e6:	e00f      	b.n	8002908 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	045b      	lsls	r3, r3, #17
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d002      	beq.n	80028f8 <I2C_Slave_ISR_IT+0x200>
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d107      	bne.n	8002908 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	0018      	movs	r0, r3
 80028fc:	f000 f8b4 	bl	8002a68 <I2C_ITSlaveSeqCplt>
 8002900:	e002      	b.n	8002908 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	e000      	b.n	8002908 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8002906:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2240      	movs	r2, #64	; 0x40
 800290c:	2100      	movs	r1, #0
 800290e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	0018      	movs	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	b006      	add	sp, #24
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	ffff0000 	.word	0xffff0000

08002920 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2241      	movs	r2, #65	; 0x41
 800292e:	5c9b      	ldrb	r3, [r3, r2]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	001a      	movs	r2, r3
 8002934:	2328      	movs	r3, #40	; 0x28
 8002936:	4013      	ands	r3, r2
 8002938:	2b28      	cmp	r3, #40	; 0x28
 800293a:	d000      	beq.n	800293e <I2C_ITAddrCplt+0x1e>
 800293c:	e088      	b.n	8002a50 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	0c1b      	lsrs	r3, r3, #16
 8002946:	b2da      	uxtb	r2, r3
 8002948:	250f      	movs	r5, #15
 800294a:	197b      	adds	r3, r7, r5
 800294c:	2101      	movs	r1, #1
 800294e:	400a      	ands	r2, r1
 8002950:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	b29a      	uxth	r2, r3
 800295c:	200c      	movs	r0, #12
 800295e:	183b      	adds	r3, r7, r0
 8002960:	21fe      	movs	r1, #254	; 0xfe
 8002962:	400a      	ands	r2, r1
 8002964:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	b29a      	uxth	r2, r3
 800296e:	240a      	movs	r4, #10
 8002970:	193b      	adds	r3, r7, r4
 8002972:	0592      	lsls	r2, r2, #22
 8002974:	0d92      	lsrs	r2, r2, #22
 8002976:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	b29a      	uxth	r2, r3
 8002980:	2308      	movs	r3, #8
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	21fe      	movs	r1, #254	; 0xfe
 8002986:	400a      	ands	r2, r1
 8002988:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d148      	bne.n	8002a24 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002992:	0021      	movs	r1, r4
 8002994:	187b      	adds	r3, r7, r1
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	09db      	lsrs	r3, r3, #7
 800299a:	b29a      	uxth	r2, r3
 800299c:	183b      	adds	r3, r7, r0
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	4053      	eors	r3, r2
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	001a      	movs	r2, r3
 80029a6:	2306      	movs	r3, #6
 80029a8:	4013      	ands	r3, r2
 80029aa:	d120      	bne.n	80029ee <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80029ac:	183b      	adds	r3, r7, r0
 80029ae:	187a      	adds	r2, r7, r1
 80029b0:	8812      	ldrh	r2, [r2, #0]
 80029b2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d14c      	bne.n	8002a60 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2208      	movs	r2, #8
 80029d2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2240      	movs	r2, #64	; 0x40
 80029d8:	2100      	movs	r1, #0
 80029da:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029dc:	183b      	adds	r3, r7, r0
 80029de:	881a      	ldrh	r2, [r3, #0]
 80029e0:	197b      	adds	r3, r7, r5
 80029e2:	7819      	ldrb	r1, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	0018      	movs	r0, r3
 80029e8:	f7ff fe5e 	bl	80026a8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80029ec:	e038      	b.n	8002a60 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80029ee:	240c      	movs	r4, #12
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	2208      	movs	r2, #8
 80029f4:	18ba      	adds	r2, r7, r2
 80029f6:	8812      	ldrh	r2, [r2, #0]
 80029f8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	021a      	lsls	r2, r3, #8
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	0011      	movs	r1, r2
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 fd54 	bl	80034b0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2240      	movs	r2, #64	; 0x40
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a10:	193b      	adds	r3, r7, r4
 8002a12:	881a      	ldrh	r2, [r3, #0]
 8002a14:	230f      	movs	r3, #15
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	7819      	ldrb	r1, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7ff fe43 	bl	80026a8 <HAL_I2C_AddrCallback>
}
 8002a22:	e01d      	b.n	8002a60 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	021a      	lsls	r2, r3, #8
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	0011      	movs	r1, r2
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f000 fd3f 	bl	80034b0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2240      	movs	r2, #64	; 0x40
 8002a36:	2100      	movs	r1, #0
 8002a38:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a3a:	230c      	movs	r3, #12
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	881a      	ldrh	r2, [r3, #0]
 8002a40:	230f      	movs	r3, #15
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	7819      	ldrb	r1, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f7ff fe2d 	bl	80026a8 <HAL_I2C_AddrCallback>
}
 8002a4e:	e007      	b.n	8002a60 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2208      	movs	r2, #8
 8002a56:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2240      	movs	r2, #64	; 0x40
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	5499      	strb	r1, [r3, r2]
}
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b004      	add	sp, #16
 8002a66:	bdb0      	pop	{r4, r5, r7, pc}

08002a68 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2242      	movs	r2, #66	; 0x42
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	0b9b      	lsrs	r3, r3, #14
 8002a84:	001a      	movs	r2, r3
 8002a86:	2301      	movs	r3, #1
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d008      	beq.n	8002a9e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4925      	ldr	r1, [pc, #148]	; (8002b2c <I2C_ITSlaveSeqCplt+0xc4>)
 8002a98:	400a      	ands	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e00d      	b.n	8002aba <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	0bdb      	lsrs	r3, r3, #15
 8002aa2:	001a      	movs	r2, r3
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d007      	beq.n	8002aba <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	491e      	ldr	r1, [pc, #120]	; (8002b30 <I2C_ITSlaveSeqCplt+0xc8>)
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2241      	movs	r2, #65	; 0x41
 8002abe:	5c9b      	ldrb	r3, [r3, r2]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b29      	cmp	r3, #41	; 0x29
 8002ac4:	d114      	bne.n	8002af0 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2241      	movs	r2, #65	; 0x41
 8002aca:	2128      	movs	r1, #40	; 0x28
 8002acc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2221      	movs	r2, #33	; 0x21
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f000 fce9 	bl	80034b0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2240      	movs	r2, #64	; 0x40
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7ff fdcd 	bl	8002688 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002aee:	e019      	b.n	8002b24 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2241      	movs	r2, #65	; 0x41
 8002af4:	5c9b      	ldrb	r3, [r3, r2]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b2a      	cmp	r3, #42	; 0x2a
 8002afa:	d113      	bne.n	8002b24 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2241      	movs	r2, #65	; 0x41
 8002b00:	2128      	movs	r1, #40	; 0x28
 8002b02:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2222      	movs	r2, #34	; 0x22
 8002b08:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f000 fcce 	bl	80034b0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2240      	movs	r2, #64	; 0x40
 8002b18:	2100      	movs	r1, #0
 8002b1a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f7ff fdba 	bl	8002698 <HAL_I2C_SlaveRxCpltCallback>
}
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b004      	add	sp, #16
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	ffffbfff 	.word	0xffffbfff
 8002b30:	ffff7fff 	.word	0xffff7fff

08002b34 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002b4a:	200f      	movs	r0, #15
 8002b4c:	183b      	adds	r3, r7, r0
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	2141      	movs	r1, #65	; 0x41
 8002b52:	5c52      	ldrb	r2, [r2, r1]
 8002b54:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b5e:	183b      	adds	r3, r7, r0
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b21      	cmp	r3, #33	; 0x21
 8002b64:	d003      	beq.n	8002b6e <I2C_ITSlaveCplt+0x3a>
 8002b66:	183b      	adds	r3, r7, r0
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b29      	cmp	r3, #41	; 0x29
 8002b6c:	d109      	bne.n	8002b82 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002b6e:	4a7d      	ldr	r2, [pc, #500]	; (8002d64 <I2C_ITSlaveCplt+0x230>)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	0011      	movs	r1, r2
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 fc9b 	bl	80034b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2221      	movs	r2, #33	; 0x21
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b80:	e011      	b.n	8002ba6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b82:	220f      	movs	r2, #15
 8002b84:	18bb      	adds	r3, r7, r2
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b22      	cmp	r3, #34	; 0x22
 8002b8a:	d003      	beq.n	8002b94 <I2C_ITSlaveCplt+0x60>
 8002b8c:	18bb      	adds	r3, r7, r2
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b2a      	cmp	r3, #42	; 0x2a
 8002b92:	d108      	bne.n	8002ba6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002b94:	4a74      	ldr	r2, [pc, #464]	; (8002d68 <I2C_ITSlaveCplt+0x234>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	0011      	movs	r1, r2
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f000 fc88 	bl	80034b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2222      	movs	r2, #34	; 0x22
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2180      	movs	r1, #128	; 0x80
 8002bb2:	0209      	lsls	r1, r1, #8
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	496a      	ldr	r1, [pc, #424]	; (8002d6c <I2C_ITSlaveCplt+0x238>)
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f000 fa3b 	bl	8003046 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	0b9b      	lsrs	r3, r3, #14
 8002bd4:	001a      	movs	r2, r3
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d013      	beq.n	8002c04 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4962      	ldr	r1, [pc, #392]	; (8002d70 <I2C_ITSlaveCplt+0x23c>)
 8002be8:	400a      	ands	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d020      	beq.n	8002c36 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c02:	e018      	b.n	8002c36 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	0bdb      	lsrs	r3, r3, #15
 8002c08:	001a      	movs	r2, r3
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d012      	beq.n	8002c36 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4956      	ldr	r1, [pc, #344]	; (8002d74 <I2C_ITSlaveCplt+0x240>)
 8002c1c:	400a      	ands	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d006      	beq.n	8002c36 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	001a      	movs	r2, r3
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d020      	beq.n	8002c84 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2204      	movs	r2, #4
 8002c46:	4393      	bics	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00c      	beq.n	8002c84 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	2204      	movs	r2, #4
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2242      	movs	r2, #66	; 0x42
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	0011      	movs	r1, r2
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f000 f8b9 	bl	8002e30 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2241      	movs	r2, #65	; 0x41
 8002cc2:	5c9b      	ldrb	r3, [r3, r2]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b28      	cmp	r3, #40	; 0x28
 8002cc8:	d147      	bne.n	8002d5a <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	0011      	movs	r1, r2
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f000 f853 	bl	8002d7c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cd6:	e040      	b.n	8002d5a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	4a26      	ldr	r2, [pc, #152]	; (8002d78 <I2C_ITSlaveCplt+0x244>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d016      	beq.n	8002d10 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7ff febf 	bl	8002a68 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a22      	ldr	r2, [pc, #136]	; (8002d78 <I2C_ITSlaveCplt+0x244>)
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2241      	movs	r2, #65	; 0x41
 8002cf4:	2120      	movs	r1, #32
 8002cf6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2240      	movs	r2, #64	; 0x40
 8002d02:	2100      	movs	r1, #0
 8002d04:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f7ff fcdd 	bl	80026c8 <HAL_I2C_ListenCpltCallback>
}
 8002d0e:	e024      	b.n	8002d5a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2241      	movs	r2, #65	; 0x41
 8002d14:	5c9b      	ldrb	r3, [r3, r2]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b22      	cmp	r3, #34	; 0x22
 8002d1a:	d10f      	bne.n	8002d3c <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2241      	movs	r2, #65	; 0x41
 8002d20:	2120      	movs	r1, #32
 8002d22:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2240      	movs	r2, #64	; 0x40
 8002d2e:	2100      	movs	r1, #0
 8002d30:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	0018      	movs	r0, r3
 8002d36:	f7ff fcaf 	bl	8002698 <HAL_I2C_SlaveRxCpltCallback>
}
 8002d3a:	e00e      	b.n	8002d5a <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2241      	movs	r2, #65	; 0x41
 8002d40:	2120      	movs	r1, #32
 8002d42:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2240      	movs	r2, #64	; 0x40
 8002d4e:	2100      	movs	r1, #0
 8002d50:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7ff fc97 	bl	8002688 <HAL_I2C_SlaveTxCpltCallback>
}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b006      	add	sp, #24
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	00008001 	.word	0x00008001
 8002d68:	00008002 	.word	0x00008002
 8002d6c:	fe00e800 	.word	0xfe00e800
 8002d70:	ffffbfff 	.word	0xffffbfff
 8002d74:	ffff7fff 	.word	0xffff7fff
 8002d78:	ffff0000 	.word	0xffff0000

08002d7c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a27      	ldr	r2, [pc, #156]	; (8002e28 <I2C_ITListenCplt+0xac>)
 8002d8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2241      	movs	r2, #65	; 0x41
 8002d96:	2120      	movs	r1, #32
 8002d98:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2242      	movs	r2, #66	; 0x42
 8002d9e:	2100      	movs	r1, #0
 8002da0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	089b      	lsrs	r3, r3, #2
 8002dac:	001a      	movs	r2, r3
 8002dae:	2301      	movs	r3, #1
 8002db0:	4013      	ands	r3, r2
 8002db2:	d022      	beq.n	8002dfa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d012      	beq.n	8002dfa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	2204      	movs	r2, #4
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002dfa:	4a0c      	ldr	r2, [pc, #48]	; (8002e2c <I2C_ITListenCplt+0xb0>)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	0011      	movs	r1, r2
 8002e00:	0018      	movs	r0, r3
 8002e02:	f000 fb55 	bl	80034b0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2240      	movs	r2, #64	; 0x40
 8002e12:	2100      	movs	r1, #0
 8002e14:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f7ff fc55 	bl	80026c8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b002      	add	sp, #8
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	ffff0000 	.word	0xffff0000
 8002e2c:	00008003 	.word	0x00008003

08002e30 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e3a:	200f      	movs	r0, #15
 8002e3c:	183b      	adds	r3, r7, r0
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	2141      	movs	r1, #65	; 0x41
 8002e42:	5c52      	ldrb	r2, [r2, r1]
 8002e44:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2242      	movs	r2, #66	; 0x42
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a62      	ldr	r2, [pc, #392]	; (8002fdc <I2C_ITError+0x1ac>)
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002e66:	183b      	adds	r3, r7, r0
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b28      	cmp	r3, #40	; 0x28
 8002e6c:	d007      	beq.n	8002e7e <I2C_ITError+0x4e>
 8002e6e:	183b      	adds	r3, r7, r0
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b29      	cmp	r3, #41	; 0x29
 8002e74:	d003      	beq.n	8002e7e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002e76:	183b      	adds	r3, r7, r0
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e7c:	d10c      	bne.n	8002e98 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2103      	movs	r1, #3
 8002e82:	0018      	movs	r0, r3
 8002e84:	f000 fb14 	bl	80034b0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2241      	movs	r2, #65	; 0x41
 8002e8c:	2128      	movs	r1, #40	; 0x28
 8002e8e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a53      	ldr	r2, [pc, #332]	; (8002fe0 <I2C_ITError+0x1b0>)
 8002e94:	635a      	str	r2, [r3, #52]	; 0x34
 8002e96:	e012      	b.n	8002ebe <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e98:	4a52      	ldr	r2, [pc, #328]	; (8002fe4 <I2C_ITError+0x1b4>)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	0011      	movs	r1, r2
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f000 fb06 	bl	80034b0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2241      	movs	r2, #65	; 0x41
 8002ea8:	5c9b      	ldrb	r3, [r3, r2]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b60      	cmp	r3, #96	; 0x60
 8002eae:	d003      	beq.n	8002eb8 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2241      	movs	r2, #65	; 0x41
 8002eb4:	2120      	movs	r1, #32
 8002eb6:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d03b      	beq.n	8002f44 <I2C_ITError+0x114>
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b11      	cmp	r3, #17
 8002ed0:	d002      	beq.n	8002ed8 <I2C_ITError+0xa8>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b21      	cmp	r3, #33	; 0x21
 8002ed6:	d135      	bne.n	8002f44 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	2380      	movs	r3, #128	; 0x80
 8002ee0:	01db      	lsls	r3, r3, #7
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	01db      	lsls	r3, r3, #7
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d107      	bne.n	8002efc <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	493c      	ldr	r1, [pc, #240]	; (8002fe8 <I2C_ITError+0x1b8>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f00:	0018      	movs	r0, r3
 8002f02:	f7fe ffc9 	bl	8001e98 <HAL_DMA_GetState>
 8002f06:	0003      	movs	r3, r0
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d016      	beq.n	8002f3a <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	4a36      	ldr	r2, [pc, #216]	; (8002fec <I2C_ITError+0x1bc>)
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2240      	movs	r2, #64	; 0x40
 8002f18:	2100      	movs	r1, #0
 8002f1a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7fe ff4f 	bl	8001dc4 <HAL_DMA_Abort_IT>
 8002f26:	1e03      	subs	r3, r0, #0
 8002f28:	d051      	beq.n	8002fce <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	0018      	movs	r0, r3
 8002f36:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f38:	e049      	b.n	8002fce <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f000 f859 	bl	8002ff4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f42:	e044      	b.n	8002fce <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d03b      	beq.n	8002fc4 <I2C_ITError+0x194>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b12      	cmp	r3, #18
 8002f50:	d002      	beq.n	8002f58 <I2C_ITError+0x128>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b22      	cmp	r3, #34	; 0x22
 8002f56:	d135      	bne.n	8002fc4 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	401a      	ands	r2, r3
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d107      	bne.n	8002f7c <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	491e      	ldr	r1, [pc, #120]	; (8002ff0 <I2C_ITError+0x1c0>)
 8002f78:	400a      	ands	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7fe ff89 	bl	8001e98 <HAL_DMA_GetState>
 8002f86:	0003      	movs	r3, r0
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d016      	beq.n	8002fba <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	4a16      	ldr	r2, [pc, #88]	; (8002fec <I2C_ITError+0x1bc>)
 8002f92:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2240      	movs	r2, #64	; 0x40
 8002f98:	2100      	movs	r1, #0
 8002f9a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f7fe ff0f 	bl	8001dc4 <HAL_DMA_Abort_IT>
 8002fa6:	1e03      	subs	r3, r0, #0
 8002fa8:	d013      	beq.n	8002fd2 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fb8:	e00b      	b.n	8002fd2 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f000 f819 	bl	8002ff4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fc2:	e006      	b.n	8002fd2 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f000 f814 	bl	8002ff4 <I2C_TreatErrorCallback>
  }
}
 8002fcc:	e002      	b.n	8002fd4 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	e000      	b.n	8002fd4 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fd2:	46c0      	nop			; (mov r8, r8)
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b004      	add	sp, #16
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	ffff0000 	.word	0xffff0000
 8002fe0:	080026f9 	.word	0x080026f9
 8002fe4:	00008003 	.word	0x00008003
 8002fe8:	ffffbfff 	.word	0xffffbfff
 8002fec:	0800308b 	.word	0x0800308b
 8002ff0:	ffff7fff 	.word	0xffff7fff

08002ff4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2241      	movs	r2, #65	; 0x41
 8003000:	5c9b      	ldrb	r3, [r3, r2]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b60      	cmp	r3, #96	; 0x60
 8003006:	d10f      	bne.n	8003028 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2241      	movs	r2, #65	; 0x41
 800300c:	2120      	movs	r1, #32
 800300e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2240      	movs	r2, #64	; 0x40
 800301a:	2100      	movs	r1, #0
 800301c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	0018      	movs	r0, r3
 8003022:	f7ff fb61 	bl	80026e8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003026:	e00a      	b.n	800303e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2240      	movs	r2, #64	; 0x40
 8003032:	2100      	movs	r1, #0
 8003034:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	0018      	movs	r0, r3
 800303a:	f7ff fb4d 	bl	80026d8 <HAL_I2C_ErrorCallback>
}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	46bd      	mov	sp, r7
 8003042:	b002      	add	sp, #8
 8003044:	bd80      	pop	{r7, pc}

08003046 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2202      	movs	r2, #2
 8003056:	4013      	ands	r3, r2
 8003058:	2b02      	cmp	r3, #2
 800305a:	d103      	bne.n	8003064 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2200      	movs	r2, #0
 8003062:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	2201      	movs	r2, #1
 800306c:	4013      	ands	r3, r2
 800306e:	2b01      	cmp	r3, #1
 8003070:	d007      	beq.n	8003082 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699a      	ldr	r2, [r3, #24]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2101      	movs	r1, #1
 800307e:	430a      	orrs	r2, r1
 8003080:	619a      	str	r2, [r3, #24]
  }
}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	46bd      	mov	sp, r7
 8003086:	b002      	add	sp, #8
 8003088:	bd80      	pop	{r7, pc}

0800308a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	2200      	movs	r2, #0
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b4:	2200      	movs	r2, #0
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	0018      	movs	r0, r3
 80030bc:	f7ff ff9a 	bl	8002ff4 <I2C_TreatErrorCallback>
}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b004      	add	sp, #16
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	1dfb      	adds	r3, r7, #7
 80030d6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d8:	e021      	b.n	800311e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	d01e      	beq.n	800311e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e0:	f7fe fd88 	bl	8001bf4 <HAL_GetTick>
 80030e4:	0002      	movs	r2, r0
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d302      	bcc.n	80030f6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d113      	bne.n	800311e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	2220      	movs	r2, #32
 80030fc:	431a      	orrs	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2241      	movs	r2, #65	; 0x41
 8003106:	2120      	movs	r1, #32
 8003108:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2242      	movs	r2, #66	; 0x42
 800310e:	2100      	movs	r1, #0
 8003110:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2240      	movs	r2, #64	; 0x40
 8003116:	2100      	movs	r1, #0
 8003118:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e00f      	b.n	800313e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	4013      	ands	r3, r2
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	425a      	negs	r2, r3
 800312e:	4153      	adcs	r3, r2
 8003130:	b2db      	uxtb	r3, r3
 8003132:	001a      	movs	r2, r3
 8003134:	1dfb      	adds	r3, r7, #7
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d0ce      	beq.n	80030da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	0018      	movs	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	b004      	add	sp, #16
 8003144:	bd80      	pop	{r7, pc}

08003146 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003152:	e02b      	b.n	80031ac <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	0018      	movs	r0, r3
 800315c:	f000 f86e 	bl	800323c <I2C_IsErrorOccurred>
 8003160:	1e03      	subs	r3, r0, #0
 8003162:	d001      	beq.n	8003168 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e029      	b.n	80031bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	3301      	adds	r3, #1
 800316c:	d01e      	beq.n	80031ac <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316e:	f7fe fd41 	bl	8001bf4 <HAL_GetTick>
 8003172:	0002      	movs	r2, r0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	429a      	cmp	r2, r3
 800317c:	d302      	bcc.n	8003184 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d113      	bne.n	80031ac <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	2220      	movs	r2, #32
 800318a:	431a      	orrs	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2241      	movs	r2, #65	; 0x41
 8003194:	2120      	movs	r1, #32
 8003196:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2242      	movs	r2, #66	; 0x42
 800319c:	2100      	movs	r1, #0
 800319e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2240      	movs	r2, #64	; 0x40
 80031a4:	2100      	movs	r1, #0
 80031a6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e007      	b.n	80031bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2202      	movs	r2, #2
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d1cc      	bne.n	8003154 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	0018      	movs	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	b004      	add	sp, #16
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031d0:	e028      	b.n	8003224 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	0018      	movs	r0, r3
 80031da:	f000 f82f 	bl	800323c <I2C_IsErrorOccurred>
 80031de:	1e03      	subs	r3, r0, #0
 80031e0:	d001      	beq.n	80031e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e026      	b.n	8003234 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e6:	f7fe fd05 	bl	8001bf4 <HAL_GetTick>
 80031ea:	0002      	movs	r2, r0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d302      	bcc.n	80031fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d113      	bne.n	8003224 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003200:	2220      	movs	r2, #32
 8003202:	431a      	orrs	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2241      	movs	r2, #65	; 0x41
 800320c:	2120      	movs	r1, #32
 800320e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2242      	movs	r2, #66	; 0x42
 8003214:	2100      	movs	r1, #0
 8003216:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2240      	movs	r2, #64	; 0x40
 800321c:	2100      	movs	r1, #0
 800321e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e007      	b.n	8003234 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2220      	movs	r2, #32
 800322c:	4013      	ands	r3, r2
 800322e:	2b20      	cmp	r3, #32
 8003230:	d1cf      	bne.n	80031d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b004      	add	sp, #16
 800323a:	bd80      	pop	{r7, pc}

0800323c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b08b      	sub	sp, #44	; 0x2c
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003248:	2327      	movs	r3, #39	; 0x27
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2210      	movs	r2, #16
 8003264:	4013      	ands	r3, r2
 8003266:	d100      	bne.n	800326a <I2C_IsErrorOccurred+0x2e>
 8003268:	e082      	b.n	8003370 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2210      	movs	r2, #16
 8003270:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003272:	e060      	b.n	8003336 <I2C_IsErrorOccurred+0xfa>
 8003274:	2427      	movs	r4, #39	; 0x27
 8003276:	193b      	adds	r3, r7, r4
 8003278:	193a      	adds	r2, r7, r4
 800327a:	7812      	ldrb	r2, [r2, #0]
 800327c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	3301      	adds	r3, #1
 8003282:	d058      	beq.n	8003336 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003284:	f7fe fcb6 	bl	8001bf4 <HAL_GetTick>
 8003288:	0002      	movs	r2, r0
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	429a      	cmp	r2, r3
 8003292:	d306      	bcc.n	80032a2 <I2C_IsErrorOccurred+0x66>
 8003294:	193b      	adds	r3, r7, r4
 8003296:	193a      	adds	r2, r7, r4
 8003298:	7812      	ldrb	r2, [r2, #0]
 800329a:	701a      	strb	r2, [r3, #0]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d149      	bne.n	8003336 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	2380      	movs	r3, #128	; 0x80
 80032aa:	01db      	lsls	r3, r3, #7
 80032ac:	4013      	ands	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80032b0:	2013      	movs	r0, #19
 80032b2:	183b      	adds	r3, r7, r0
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	2142      	movs	r1, #66	; 0x42
 80032b8:	5c52      	ldrb	r2, [r2, r1]
 80032ba:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	021b      	lsls	r3, r3, #8
 80032c6:	401a      	ands	r2, r3
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	021b      	lsls	r3, r3, #8
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d126      	bne.n	800331e <I2C_IsErrorOccurred+0xe2>
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	01db      	lsls	r3, r3, #7
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d021      	beq.n	800331e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80032da:	183b      	adds	r3, r7, r0
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d01d      	beq.n	800331e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2180      	movs	r1, #128	; 0x80
 80032ee:	01c9      	lsls	r1, r1, #7
 80032f0:	430a      	orrs	r2, r1
 80032f2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80032f4:	f7fe fc7e 	bl	8001bf4 <HAL_GetTick>
 80032f8:	0003      	movs	r3, r0
 80032fa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032fc:	e00f      	b.n	800331e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032fe:	f7fe fc79 	bl	8001bf4 <HAL_GetTick>
 8003302:	0002      	movs	r2, r0
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b19      	cmp	r3, #25
 800330a:	d908      	bls.n	800331e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	2220      	movs	r2, #32
 8003310:	4313      	orrs	r3, r2
 8003312:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003314:	2327      	movs	r3, #39	; 0x27
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	2201      	movs	r2, #1
 800331a:	701a      	strb	r2, [r3, #0]

              break;
 800331c:	e00b      	b.n	8003336 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2220      	movs	r2, #32
 8003326:	4013      	ands	r3, r2
 8003328:	2127      	movs	r1, #39	; 0x27
 800332a:	187a      	adds	r2, r7, r1
 800332c:	1879      	adds	r1, r7, r1
 800332e:	7809      	ldrb	r1, [r1, #0]
 8003330:	7011      	strb	r1, [r2, #0]
 8003332:	2b20      	cmp	r3, #32
 8003334:	d1e3      	bne.n	80032fe <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	2220      	movs	r2, #32
 800333e:	4013      	ands	r3, r2
 8003340:	2b20      	cmp	r3, #32
 8003342:	d004      	beq.n	800334e <I2C_IsErrorOccurred+0x112>
 8003344:	2327      	movs	r3, #39	; 0x27
 8003346:	18fb      	adds	r3, r7, r3
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d092      	beq.n	8003274 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800334e:	2327      	movs	r3, #39	; 0x27
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d103      	bne.n	8003360 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2220      	movs	r2, #32
 800335e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	2204      	movs	r2, #4
 8003364:	4313      	orrs	r3, r2
 8003366:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003368:	2327      	movs	r3, #39	; 0x27
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4013      	ands	r3, r2
 8003380:	d00c      	beq.n	800339c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	2201      	movs	r2, #1
 8003386:	4313      	orrs	r3, r2
 8003388:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2280      	movs	r2, #128	; 0x80
 8003390:	0052      	lsls	r2, r2, #1
 8003392:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003394:	2327      	movs	r3, #39	; 0x27
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4013      	ands	r3, r2
 80033a4:	d00c      	beq.n	80033c0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	2208      	movs	r2, #8
 80033aa:	4313      	orrs	r3, r2
 80033ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2280      	movs	r2, #128	; 0x80
 80033b4:	00d2      	lsls	r2, r2, #3
 80033b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033b8:	2327      	movs	r3, #39	; 0x27
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4013      	ands	r3, r2
 80033c8:	d00c      	beq.n	80033e4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	2202      	movs	r2, #2
 80033ce:	4313      	orrs	r3, r2
 80033d0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2280      	movs	r2, #128	; 0x80
 80033d8:	0092      	lsls	r2, r2, #2
 80033da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033dc:	2327      	movs	r3, #39	; 0x27
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	2201      	movs	r2, #1
 80033e2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80033e4:	2327      	movs	r3, #39	; 0x27
 80033e6:	18fb      	adds	r3, r7, r3
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d01d      	beq.n	800342a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7ff fe28 	bl	8003046 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	490d      	ldr	r1, [pc, #52]	; (8003438 <I2C_IsErrorOccurred+0x1fc>)
 8003402:	400a      	ands	r2, r1
 8003404:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	431a      	orrs	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2241      	movs	r2, #65	; 0x41
 8003416:	2120      	movs	r1, #32
 8003418:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2242      	movs	r2, #66	; 0x42
 800341e:	2100      	movs	r1, #0
 8003420:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2240      	movs	r2, #64	; 0x40
 8003426:	2100      	movs	r1, #0
 8003428:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800342a:	2327      	movs	r3, #39	; 0x27
 800342c:	18fb      	adds	r3, r7, r3
 800342e:	781b      	ldrb	r3, [r3, #0]
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b00b      	add	sp, #44	; 0x2c
 8003436:	bd90      	pop	{r4, r7, pc}
 8003438:	fe00e800 	.word	0xfe00e800

0800343c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800343c:	b590      	push	{r4, r7, lr}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	0008      	movs	r0, r1
 8003446:	0011      	movs	r1, r2
 8003448:	607b      	str	r3, [r7, #4]
 800344a:	240a      	movs	r4, #10
 800344c:	193b      	adds	r3, r7, r4
 800344e:	1c02      	adds	r2, r0, #0
 8003450:	801a      	strh	r2, [r3, #0]
 8003452:	2009      	movs	r0, #9
 8003454:	183b      	adds	r3, r7, r0
 8003456:	1c0a      	adds	r2, r1, #0
 8003458:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800345a:	193b      	adds	r3, r7, r4
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	059b      	lsls	r3, r3, #22
 8003460:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003462:	183b      	adds	r3, r7, r0
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	0419      	lsls	r1, r3, #16
 8003468:	23ff      	movs	r3, #255	; 0xff
 800346a:	041b      	lsls	r3, r3, #16
 800346c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800346e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003476:	4313      	orrs	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	085b      	lsrs	r3, r3, #1
 800347c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003486:	0d51      	lsrs	r1, r2, #21
 8003488:	2280      	movs	r2, #128	; 0x80
 800348a:	00d2      	lsls	r2, r2, #3
 800348c:	400a      	ands	r2, r1
 800348e:	4907      	ldr	r1, [pc, #28]	; (80034ac <I2C_TransferConfig+0x70>)
 8003490:	430a      	orrs	r2, r1
 8003492:	43d2      	mvns	r2, r2
 8003494:	401a      	ands	r2, r3
 8003496:	0011      	movs	r1, r2
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	430a      	orrs	r2, r1
 80034a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	46bd      	mov	sp, r7
 80034a6:	b007      	add	sp, #28
 80034a8:	bd90      	pop	{r4, r7, pc}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	03ff63ff 	.word	0x03ff63ff

080034b0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	000a      	movs	r2, r1
 80034ba:	1cbb      	adds	r3, r7, #2
 80034bc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80034c2:	1cbb      	adds	r3, r7, #2
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	2201      	movs	r2, #1
 80034c8:	4013      	ands	r3, r2
 80034ca:	d010      	beq.n	80034ee <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2242      	movs	r2, #66	; 0x42
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2241      	movs	r2, #65	; 0x41
 80034d8:	5c9b      	ldrb	r3, [r3, r2]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	001a      	movs	r2, r3
 80034de:	2328      	movs	r3, #40	; 0x28
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b28      	cmp	r3, #40	; 0x28
 80034e4:	d003      	beq.n	80034ee <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	22b0      	movs	r2, #176	; 0xb0
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80034ee:	1cbb      	adds	r3, r7, #2
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	2202      	movs	r2, #2
 80034f4:	4013      	ands	r3, r2
 80034f6:	d010      	beq.n	800351a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2244      	movs	r2, #68	; 0x44
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2241      	movs	r2, #65	; 0x41
 8003504:	5c9b      	ldrb	r3, [r3, r2]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	001a      	movs	r2, r3
 800350a:	2328      	movs	r3, #40	; 0x28
 800350c:	4013      	ands	r3, r2
 800350e:	2b28      	cmp	r3, #40	; 0x28
 8003510:	d003      	beq.n	800351a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	22b0      	movs	r2, #176	; 0xb0
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800351a:	1cbb      	adds	r3, r7, #2
 800351c:	2200      	movs	r2, #0
 800351e:	5e9b      	ldrsh	r3, [r3, r2]
 8003520:	2b00      	cmp	r3, #0
 8003522:	da03      	bge.n	800352c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	22b8      	movs	r2, #184	; 0xb8
 8003528:	4313      	orrs	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800352c:	1cbb      	adds	r3, r7, #2
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	2b10      	cmp	r3, #16
 8003532:	d103      	bne.n	800353c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2290      	movs	r2, #144	; 0x90
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800353c:	1cbb      	adds	r3, r7, #2
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	2b20      	cmp	r3, #32
 8003542:	d103      	bne.n	800354c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800354c:	1cbb      	adds	r3, r7, #2
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	2b40      	cmp	r3, #64	; 0x40
 8003552:	d103      	bne.n	800355c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2240      	movs	r2, #64	; 0x40
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	43d9      	mvns	r1, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	400a      	ands	r2, r1
 800356c:	601a      	str	r2, [r3, #0]
}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	46bd      	mov	sp, r7
 8003572:	b004      	add	sp, #16
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2241      	movs	r2, #65	; 0x41
 8003586:	5c9b      	ldrb	r3, [r3, r2]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b20      	cmp	r3, #32
 800358c:	d138      	bne.n	8003600 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2240      	movs	r2, #64	; 0x40
 8003592:	5c9b      	ldrb	r3, [r3, r2]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003598:	2302      	movs	r3, #2
 800359a:	e032      	b.n	8003602 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2240      	movs	r2, #64	; 0x40
 80035a0:	2101      	movs	r1, #1
 80035a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2241      	movs	r2, #65	; 0x41
 80035a8:	2124      	movs	r1, #36	; 0x24
 80035aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2101      	movs	r1, #1
 80035b8:	438a      	bics	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4911      	ldr	r1, [pc, #68]	; (800360c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80035c8:	400a      	ands	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6819      	ldr	r1, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2101      	movs	r1, #1
 80035e8:	430a      	orrs	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2241      	movs	r2, #65	; 0x41
 80035f0:	2120      	movs	r1, #32
 80035f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2240      	movs	r2, #64	; 0x40
 80035f8:	2100      	movs	r1, #0
 80035fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	e000      	b.n	8003602 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003600:	2302      	movs	r3, #2
  }
}
 8003602:	0018      	movs	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	b002      	add	sp, #8
 8003608:	bd80      	pop	{r7, pc}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	ffffefff 	.word	0xffffefff

08003610 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2241      	movs	r2, #65	; 0x41
 800361e:	5c9b      	ldrb	r3, [r3, r2]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b20      	cmp	r3, #32
 8003624:	d139      	bne.n	800369a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2240      	movs	r2, #64	; 0x40
 800362a:	5c9b      	ldrb	r3, [r3, r2]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003630:	2302      	movs	r3, #2
 8003632:	e033      	b.n	800369c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2240      	movs	r2, #64	; 0x40
 8003638:	2101      	movs	r1, #1
 800363a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2241      	movs	r2, #65	; 0x41
 8003640:	2124      	movs	r1, #36	; 0x24
 8003642:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2101      	movs	r1, #1
 8003650:	438a      	bics	r2, r1
 8003652:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4a11      	ldr	r2, [pc, #68]	; (80036a4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003660:	4013      	ands	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	021b      	lsls	r3, r3, #8
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2101      	movs	r1, #1
 8003682:	430a      	orrs	r2, r1
 8003684:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2241      	movs	r2, #65	; 0x41
 800368a:	2120      	movs	r1, #32
 800368c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2240      	movs	r2, #64	; 0x40
 8003692:	2100      	movs	r1, #0
 8003694:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	e000      	b.n	800369c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800369a:	2302      	movs	r3, #2
  }
}
 800369c:	0018      	movs	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	b004      	add	sp, #16
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	fffff0ff 	.word	0xfffff0ff

080036a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80036b0:	4b19      	ldr	r3, [pc, #100]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a19      	ldr	r2, [pc, #100]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	0019      	movs	r1, r3
 80036ba:	4b17      	ldr	r3, [pc, #92]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	430a      	orrs	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	2380      	movs	r3, #128	; 0x80
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d11f      	bne.n	800370c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80036cc:	4b14      	ldr	r3, [pc, #80]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	0013      	movs	r3, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	189b      	adds	r3, r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4912      	ldr	r1, [pc, #72]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80036da:	0018      	movs	r0, r3
 80036dc:	f7fc fd1c 	bl	8000118 <__udivsi3>
 80036e0:	0003      	movs	r3, r0
 80036e2:	3301      	adds	r3, #1
 80036e4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036e6:	e008      	b.n	80036fa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	e001      	b.n	80036fa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e009      	b.n	800370e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036fa:	4b07      	ldr	r3, [pc, #28]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	401a      	ands	r2, r3
 8003704:	2380      	movs	r3, #128	; 0x80
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	429a      	cmp	r2, r3
 800370a:	d0ed      	beq.n	80036e8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	0018      	movs	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	b004      	add	sp, #16
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	40007000 	.word	0x40007000
 800371c:	fffff9ff 	.word	0xfffff9ff
 8003720:	20000030 	.word	0x20000030
 8003724:	000f4240 	.word	0x000f4240

08003728 <HAL_PWREx_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_IRQHandler(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* Check PWR exti Rising flag */
  if (__HAL_PWR_PVD_EXTI_GET_RISING_FLAG() != 0x0U)
 800372c:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	025b      	lsls	r3, r3, #9
 8003734:	4013      	ands	r3, r2
 8003736:	d005      	beq.n	8003744 <HAL_PWREx_PVD_IRQHandler+0x1c>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_RISING_FLAG();
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 800373a:	2280      	movs	r2, #128	; 0x80
 800373c:	0252      	lsls	r2, r2, #9
 800373e:	60da      	str	r2, [r3, #12]

    /* PWR PVD interrupt rising user callback */
    HAL_PWREx_PVD_Rising_Callback();
 8003740:	f000 f812 	bl	8003768 <HAL_PWREx_PVD_Rising_Callback>
  }

  /* Check PWR exti fallling flag */
  if (__HAL_PWR_PVD_EXTI_GET_FALLING_FLAG() != 0x0U)
 8003744:	4b07      	ldr	r3, [pc, #28]	; (8003764 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	025b      	lsls	r3, r3, #9
 800374c:	4013      	ands	r3, r2
 800374e:	d005      	beq.n	800375c <HAL_PWREx_PVD_IRQHandler+0x34>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FALLING_FLAG();
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8003752:	2280      	movs	r2, #128	; 0x80
 8003754:	0252      	lsls	r2, r2, #9
 8003756:	611a      	str	r2, [r3, #16]

    /* PWR PVD interrupt falling user callback */
    HAL_PWREx_PVD_Falling_Callback();
 8003758:	f000 f80b 	bl	8003772 <HAL_PWREx_PVD_Falling_Callback>
  }
}
 800375c:	46c0      	nop			; (mov r8, r8)
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	40021800 	.word	0x40021800

08003768 <HAL_PWREx_PVD_Rising_Callback>:
/**
  * @brief  PWR PVD interrupt rising callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Rising_Callback(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Rising_Callback can be implemented in the user file
  */
}
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_PWREx_PVD_Falling_Callback>:
/**
  * @brief  PWR PVD interrupt Falling callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Falling_Callback(void)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Falling_Callback can be implemented in the user file
  */
}
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	23e0      	movs	r3, #224	; 0xe0
 8003786:	01db      	lsls	r3, r3, #7
 8003788:	4013      	ands	r3, r2
}
 800378a:	0018      	movs	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021000 	.word	0x40021000

08003794 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e2fe      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2201      	movs	r2, #1
 80037ac:	4013      	ands	r3, r2
 80037ae:	d100      	bne.n	80037b2 <HAL_RCC_OscConfig+0x1e>
 80037b0:	e07c      	b.n	80038ac <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b2:	4bc3      	ldr	r3, [pc, #780]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2238      	movs	r2, #56	; 0x38
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037bc:	4bc0      	ldr	r3, [pc, #768]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2203      	movs	r2, #3
 80037c2:	4013      	ands	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	2b10      	cmp	r3, #16
 80037ca:	d102      	bne.n	80037d2 <HAL_RCC_OscConfig+0x3e>
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d002      	beq.n	80037d8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d10b      	bne.n	80037f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d8:	4bb9      	ldr	r3, [pc, #740]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	029b      	lsls	r3, r3, #10
 80037e0:	4013      	ands	r3, r2
 80037e2:	d062      	beq.n	80038aa <HAL_RCC_OscConfig+0x116>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d15e      	bne.n	80038aa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e2d9      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	025b      	lsls	r3, r3, #9
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d107      	bne.n	800380c <HAL_RCC_OscConfig+0x78>
 80037fc:	4bb0      	ldr	r3, [pc, #704]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	4baf      	ldr	r3, [pc, #700]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003802:	2180      	movs	r1, #128	; 0x80
 8003804:	0249      	lsls	r1, r1, #9
 8003806:	430a      	orrs	r2, r1
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e020      	b.n	800384e <HAL_RCC_OscConfig+0xba>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	23a0      	movs	r3, #160	; 0xa0
 8003812:	02db      	lsls	r3, r3, #11
 8003814:	429a      	cmp	r2, r3
 8003816:	d10e      	bne.n	8003836 <HAL_RCC_OscConfig+0xa2>
 8003818:	4ba9      	ldr	r3, [pc, #676]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4ba8      	ldr	r3, [pc, #672]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 800381e:	2180      	movs	r1, #128	; 0x80
 8003820:	02c9      	lsls	r1, r1, #11
 8003822:	430a      	orrs	r2, r1
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	4ba6      	ldr	r3, [pc, #664]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4ba5      	ldr	r3, [pc, #660]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 800382c:	2180      	movs	r1, #128	; 0x80
 800382e:	0249      	lsls	r1, r1, #9
 8003830:	430a      	orrs	r2, r1
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	e00b      	b.n	800384e <HAL_RCC_OscConfig+0xba>
 8003836:	4ba2      	ldr	r3, [pc, #648]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4ba1      	ldr	r3, [pc, #644]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 800383c:	49a1      	ldr	r1, [pc, #644]	; (8003ac4 <HAL_RCC_OscConfig+0x330>)
 800383e:	400a      	ands	r2, r1
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	4b9f      	ldr	r3, [pc, #636]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	4b9e      	ldr	r3, [pc, #632]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003848:	499f      	ldr	r1, [pc, #636]	; (8003ac8 <HAL_RCC_OscConfig+0x334>)
 800384a:	400a      	ands	r2, r1
 800384c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d014      	beq.n	8003880 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003856:	f7fe f9cd 	bl	8001bf4 <HAL_GetTick>
 800385a:	0003      	movs	r3, r0
 800385c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003860:	f7fe f9c8 	bl	8001bf4 <HAL_GetTick>
 8003864:	0002      	movs	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b64      	cmp	r3, #100	; 0x64
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e298      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003872:	4b93      	ldr	r3, [pc, #588]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	2380      	movs	r3, #128	; 0x80
 8003878:	029b      	lsls	r3, r3, #10
 800387a:	4013      	ands	r3, r2
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0xcc>
 800387e:	e015      	b.n	80038ac <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7fe f9b8 	bl	8001bf4 <HAL_GetTick>
 8003884:	0003      	movs	r3, r0
 8003886:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800388a:	f7fe f9b3 	bl	8001bf4 <HAL_GetTick>
 800388e:	0002      	movs	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b64      	cmp	r3, #100	; 0x64
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e283      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800389c:	4b88      	ldr	r3, [pc, #544]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	029b      	lsls	r3, r3, #10
 80038a4:	4013      	ands	r3, r2
 80038a6:	d1f0      	bne.n	800388a <HAL_RCC_OscConfig+0xf6>
 80038a8:	e000      	b.n	80038ac <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2202      	movs	r2, #2
 80038b2:	4013      	ands	r3, r2
 80038b4:	d100      	bne.n	80038b8 <HAL_RCC_OscConfig+0x124>
 80038b6:	e099      	b.n	80039ec <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038b8:	4b81      	ldr	r3, [pc, #516]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2238      	movs	r2, #56	; 0x38
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038c2:	4b7f      	ldr	r3, [pc, #508]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2203      	movs	r2, #3
 80038c8:	4013      	ands	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b10      	cmp	r3, #16
 80038d0:	d102      	bne.n	80038d8 <HAL_RCC_OscConfig+0x144>
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d002      	beq.n	80038de <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d135      	bne.n	800394a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038de:	4b78      	ldr	r3, [pc, #480]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4013      	ands	r3, r2
 80038e8:	d005      	beq.n	80038f6 <HAL_RCC_OscConfig+0x162>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e256      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f6:	4b72      	ldr	r3, [pc, #456]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4a74      	ldr	r2, [pc, #464]	; (8003acc <HAL_RCC_OscConfig+0x338>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	0019      	movs	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	021a      	lsls	r2, r3, #8
 8003906:	4b6e      	ldr	r3, [pc, #440]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003908:	430a      	orrs	r2, r1
 800390a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d112      	bne.n	8003938 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003912:	4b6b      	ldr	r3, [pc, #428]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a6e      	ldr	r2, [pc, #440]	; (8003ad0 <HAL_RCC_OscConfig+0x33c>)
 8003918:	4013      	ands	r3, r2
 800391a:	0019      	movs	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	4b67      	ldr	r3, [pc, #412]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003922:	430a      	orrs	r2, r1
 8003924:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003926:	4b66      	ldr	r3, [pc, #408]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	0adb      	lsrs	r3, r3, #11
 800392c:	2207      	movs	r2, #7
 800392e:	4013      	ands	r3, r2
 8003930:	4a68      	ldr	r2, [pc, #416]	; (8003ad4 <HAL_RCC_OscConfig+0x340>)
 8003932:	40da      	lsrs	r2, r3
 8003934:	4b68      	ldr	r3, [pc, #416]	; (8003ad8 <HAL_RCC_OscConfig+0x344>)
 8003936:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003938:	4b68      	ldr	r3, [pc, #416]	; (8003adc <HAL_RCC_OscConfig+0x348>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	0018      	movs	r0, r3
 800393e:	f7fe f8fd 	bl	8001b3c <HAL_InitTick>
 8003942:	1e03      	subs	r3, r0, #0
 8003944:	d051      	beq.n	80039ea <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e22c      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d030      	beq.n	80039b4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003952:	4b5b      	ldr	r3, [pc, #364]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a5e      	ldr	r2, [pc, #376]	; (8003ad0 <HAL_RCC_OscConfig+0x33c>)
 8003958:	4013      	ands	r3, r2
 800395a:	0019      	movs	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	4b57      	ldr	r3, [pc, #348]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003962:	430a      	orrs	r2, r1
 8003964:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003966:	4b56      	ldr	r3, [pc, #344]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4b55      	ldr	r3, [pc, #340]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 800396c:	2180      	movs	r1, #128	; 0x80
 800396e:	0049      	lsls	r1, r1, #1
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003974:	f7fe f93e 	bl	8001bf4 <HAL_GetTick>
 8003978:	0003      	movs	r3, r0
 800397a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800397e:	f7fe f939 	bl	8001bf4 <HAL_GetTick>
 8003982:	0002      	movs	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e209      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003990:	4b4b      	ldr	r3, [pc, #300]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4013      	ands	r3, r2
 800399a:	d0f0      	beq.n	800397e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800399c:	4b48      	ldr	r3, [pc, #288]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4a4a      	ldr	r2, [pc, #296]	; (8003acc <HAL_RCC_OscConfig+0x338>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	0019      	movs	r1, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	021a      	lsls	r2, r3, #8
 80039ac:	4b44      	ldr	r3, [pc, #272]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	e01b      	b.n	80039ec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80039b4:	4b42      	ldr	r3, [pc, #264]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b41      	ldr	r3, [pc, #260]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 80039ba:	4949      	ldr	r1, [pc, #292]	; (8003ae0 <HAL_RCC_OscConfig+0x34c>)
 80039bc:	400a      	ands	r2, r1
 80039be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fe f918 	bl	8001bf4 <HAL_GetTick>
 80039c4:	0003      	movs	r3, r0
 80039c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ca:	f7fe f913 	bl	8001bf4 <HAL_GetTick>
 80039ce:	0002      	movs	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e1e3      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039dc:	4b38      	ldr	r3, [pc, #224]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4013      	ands	r3, r2
 80039e6:	d1f0      	bne.n	80039ca <HAL_RCC_OscConfig+0x236>
 80039e8:	e000      	b.n	80039ec <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039ea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2208      	movs	r2, #8
 80039f2:	4013      	ands	r3, r2
 80039f4:	d047      	beq.n	8003a86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80039f6:	4b32      	ldr	r3, [pc, #200]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2238      	movs	r2, #56	; 0x38
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b18      	cmp	r3, #24
 8003a00:	d10a      	bne.n	8003a18 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003a02:	4b2f      	ldr	r3, [pc, #188]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a06:	2202      	movs	r2, #2
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d03c      	beq.n	8003a86 <HAL_RCC_OscConfig+0x2f2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d138      	bne.n	8003a86 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e1c5      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d019      	beq.n	8003a54 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003a20:	4b27      	ldr	r3, [pc, #156]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003a22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a24:	4b26      	ldr	r3, [pc, #152]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003a26:	2101      	movs	r1, #1
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fe f8e2 	bl	8001bf4 <HAL_GetTick>
 8003a30:	0003      	movs	r3, r0
 8003a32:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a36:	f7fe f8dd 	bl	8001bf4 <HAL_GetTick>
 8003a3a:	0002      	movs	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e1ad      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a48:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d0f1      	beq.n	8003a36 <HAL_RCC_OscConfig+0x2a2>
 8003a52:	e018      	b.n	8003a86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003a54:	4b1a      	ldr	r3, [pc, #104]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003a56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a58:	4b19      	ldr	r3, [pc, #100]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	438a      	bics	r2, r1
 8003a5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fe f8c8 	bl	8001bf4 <HAL_GetTick>
 8003a64:	0003      	movs	r3, r0
 8003a66:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a6a:	f7fe f8c3 	bl	8001bf4 <HAL_GetTick>
 8003a6e:	0002      	movs	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e193      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a7c:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a80:	2202      	movs	r2, #2
 8003a82:	4013      	ands	r3, r2
 8003a84:	d1f1      	bne.n	8003a6a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d100      	bne.n	8003a92 <HAL_RCC_OscConfig+0x2fe>
 8003a90:	e0c6      	b.n	8003c20 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a92:	231f      	movs	r3, #31
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	2200      	movs	r2, #0
 8003a98:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003a9a:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2238      	movs	r2, #56	; 0x38
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	d11e      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003aa6:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <HAL_RCC_OscConfig+0x32c>)
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aaa:	2202      	movs	r2, #2
 8003aac:	4013      	ands	r3, r2
 8003aae:	d100      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x31e>
 8003ab0:	e0b6      	b.n	8003c20 <HAL_RCC_OscConfig+0x48c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d000      	beq.n	8003abc <HAL_RCC_OscConfig+0x328>
 8003aba:	e0b1      	b.n	8003c20 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e171      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	fffeffff 	.word	0xfffeffff
 8003ac8:	fffbffff 	.word	0xfffbffff
 8003acc:	ffff80ff 	.word	0xffff80ff
 8003ad0:	ffffc7ff 	.word	0xffffc7ff
 8003ad4:	00f42400 	.word	0x00f42400
 8003ad8:	20000030 	.word	0x20000030
 8003adc:	20000034 	.word	0x20000034
 8003ae0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ae4:	4bb1      	ldr	r3, [pc, #708]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	055b      	lsls	r3, r3, #21
 8003aec:	4013      	ands	r3, r2
 8003aee:	d101      	bne.n	8003af4 <HAL_RCC_OscConfig+0x360>
 8003af0:	2301      	movs	r3, #1
 8003af2:	e000      	b.n	8003af6 <HAL_RCC_OscConfig+0x362>
 8003af4:	2300      	movs	r3, #0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d011      	beq.n	8003b1e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003afa:	4bac      	ldr	r3, [pc, #688]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003afc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003afe:	4bab      	ldr	r3, [pc, #684]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003b00:	2180      	movs	r1, #128	; 0x80
 8003b02:	0549      	lsls	r1, r1, #21
 8003b04:	430a      	orrs	r2, r1
 8003b06:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b08:	4ba8      	ldr	r3, [pc, #672]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	055b      	lsls	r3, r3, #21
 8003b10:	4013      	ands	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003b16:	231f      	movs	r3, #31
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b1e:	4ba4      	ldr	r3, [pc, #656]	; (8003db0 <HAL_RCC_OscConfig+0x61c>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	4013      	ands	r3, r2
 8003b28:	d11a      	bne.n	8003b60 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b2a:	4ba1      	ldr	r3, [pc, #644]	; (8003db0 <HAL_RCC_OscConfig+0x61c>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4ba0      	ldr	r3, [pc, #640]	; (8003db0 <HAL_RCC_OscConfig+0x61c>)
 8003b30:	2180      	movs	r1, #128	; 0x80
 8003b32:	0049      	lsls	r1, r1, #1
 8003b34:	430a      	orrs	r2, r1
 8003b36:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003b38:	f7fe f85c 	bl	8001bf4 <HAL_GetTick>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b42:	f7fe f857 	bl	8001bf4 <HAL_GetTick>
 8003b46:	0002      	movs	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e127      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b54:	4b96      	ldr	r3, [pc, #600]	; (8003db0 <HAL_RCC_OscConfig+0x61c>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	2380      	movs	r3, #128	; 0x80
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d0f0      	beq.n	8003b42 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d106      	bne.n	8003b76 <HAL_RCC_OscConfig+0x3e2>
 8003b68:	4b90      	ldr	r3, [pc, #576]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003b6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b6c:	4b8f      	ldr	r3, [pc, #572]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003b6e:	2101      	movs	r1, #1
 8003b70:	430a      	orrs	r2, r1
 8003b72:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b74:	e01c      	b.n	8003bb0 <HAL_RCC_OscConfig+0x41c>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b05      	cmp	r3, #5
 8003b7c:	d10c      	bne.n	8003b98 <HAL_RCC_OscConfig+0x404>
 8003b7e:	4b8b      	ldr	r3, [pc, #556]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003b80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b82:	4b8a      	ldr	r3, [pc, #552]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003b84:	2104      	movs	r1, #4
 8003b86:	430a      	orrs	r2, r1
 8003b88:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b8a:	4b88      	ldr	r3, [pc, #544]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003b8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b8e:	4b87      	ldr	r3, [pc, #540]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003b90:	2101      	movs	r1, #1
 8003b92:	430a      	orrs	r2, r1
 8003b94:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b96:	e00b      	b.n	8003bb0 <HAL_RCC_OscConfig+0x41c>
 8003b98:	4b84      	ldr	r3, [pc, #528]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003b9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b9c:	4b83      	ldr	r3, [pc, #524]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	438a      	bics	r2, r1
 8003ba2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ba4:	4b81      	ldr	r3, [pc, #516]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003ba6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ba8:	4b80      	ldr	r3, [pc, #512]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003baa:	2104      	movs	r1, #4
 8003bac:	438a      	bics	r2, r1
 8003bae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d014      	beq.n	8003be2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7fe f81c 	bl	8001bf4 <HAL_GetTick>
 8003bbc:	0003      	movs	r3, r0
 8003bbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc0:	e009      	b.n	8003bd6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc2:	f7fe f817 	bl	8001bf4 <HAL_GetTick>
 8003bc6:	0002      	movs	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	4a79      	ldr	r2, [pc, #484]	; (8003db4 <HAL_RCC_OscConfig+0x620>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e0e6      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd6:	4b75      	ldr	r3, [pc, #468]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bda:	2202      	movs	r2, #2
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x42e>
 8003be0:	e013      	b.n	8003c0a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be2:	f7fe f807 	bl	8001bf4 <HAL_GetTick>
 8003be6:	0003      	movs	r3, r0
 8003be8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bea:	e009      	b.n	8003c00 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bec:	f7fe f802 	bl	8001bf4 <HAL_GetTick>
 8003bf0:	0002      	movs	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	4a6f      	ldr	r2, [pc, #444]	; (8003db4 <HAL_RCC_OscConfig+0x620>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e0d1      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c00:	4b6a      	ldr	r3, [pc, #424]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	2202      	movs	r2, #2
 8003c06:	4013      	ands	r3, r2
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003c0a:	231f      	movs	r3, #31
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d105      	bne.n	8003c20 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003c14:	4b65      	ldr	r3, [pc, #404]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c18:	4b64      	ldr	r3, [pc, #400]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003c1a:	4967      	ldr	r1, [pc, #412]	; (8003db8 <HAL_RCC_OscConfig+0x624>)
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d100      	bne.n	8003c2a <HAL_RCC_OscConfig+0x496>
 8003c28:	e0bb      	b.n	8003da2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c2a:	4b60      	ldr	r3, [pc, #384]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2238      	movs	r2, #56	; 0x38
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b10      	cmp	r3, #16
 8003c34:	d100      	bne.n	8003c38 <HAL_RCC_OscConfig+0x4a4>
 8003c36:	e07b      	b.n	8003d30 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d156      	bne.n	8003cee <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c40:	4b5a      	ldr	r3, [pc, #360]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b59      	ldr	r3, [pc, #356]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003c46:	495d      	ldr	r1, [pc, #372]	; (8003dbc <HAL_RCC_OscConfig+0x628>)
 8003c48:	400a      	ands	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7fd ffd2 	bl	8001bf4 <HAL_GetTick>
 8003c50:	0003      	movs	r3, r0
 8003c52:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c56:	f7fd ffcd 	bl	8001bf4 <HAL_GetTick>
 8003c5a:	0002      	movs	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e09d      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c68:	4b50      	ldr	r3, [pc, #320]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	2380      	movs	r3, #128	; 0x80
 8003c6e:	049b      	lsls	r3, r3, #18
 8003c70:	4013      	ands	r3, r2
 8003c72:	d1f0      	bne.n	8003c56 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c74:	4b4d      	ldr	r3, [pc, #308]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4a51      	ldr	r2, [pc, #324]	; (8003dc0 <HAL_RCC_OscConfig+0x62c>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	0019      	movs	r1, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1a      	ldr	r2, [r3, #32]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8c:	021b      	lsls	r3, r3, #8
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	4b42      	ldr	r3, [pc, #264]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca8:	4b40      	ldr	r3, [pc, #256]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b3f      	ldr	r3, [pc, #252]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003cae:	2180      	movs	r1, #128	; 0x80
 8003cb0:	0449      	lsls	r1, r1, #17
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003cb6:	4b3d      	ldr	r3, [pc, #244]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	4b3c      	ldr	r3, [pc, #240]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003cbc:	2180      	movs	r1, #128	; 0x80
 8003cbe:	0549      	lsls	r1, r1, #21
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc4:	f7fd ff96 	bl	8001bf4 <HAL_GetTick>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cce:	f7fd ff91 	bl	8001bf4 <HAL_GetTick>
 8003cd2:	0002      	movs	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e061      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce0:	4b32      	ldr	r3, [pc, #200]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	049b      	lsls	r3, r3, #18
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d0f0      	beq.n	8003cce <HAL_RCC_OscConfig+0x53a>
 8003cec:	e059      	b.n	8003da2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cee:	4b2f      	ldr	r3, [pc, #188]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b2e      	ldr	r3, [pc, #184]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003cf4:	4931      	ldr	r1, [pc, #196]	; (8003dbc <HAL_RCC_OscConfig+0x628>)
 8003cf6:	400a      	ands	r2, r1
 8003cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfa:	f7fd ff7b 	bl	8001bf4 <HAL_GetTick>
 8003cfe:	0003      	movs	r3, r0
 8003d00:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d04:	f7fd ff76 	bl	8001bf4 <HAL_GetTick>
 8003d08:	0002      	movs	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e046      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d16:	4b25      	ldr	r3, [pc, #148]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	049b      	lsls	r3, r3, #18
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d1f0      	bne.n	8003d04 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003d22:	4b22      	ldr	r3, [pc, #136]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	4b21      	ldr	r3, [pc, #132]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003d28:	4926      	ldr	r1, [pc, #152]	; (8003dc4 <HAL_RCC_OscConfig+0x630>)
 8003d2a:	400a      	ands	r2, r1
 8003d2c:	60da      	str	r2, [r3, #12]
 8003d2e:	e038      	b.n	8003da2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e033      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003d3c:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2203      	movs	r2, #3
 8003d46:	401a      	ands	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d126      	bne.n	8003d9e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2270      	movs	r2, #112	; 0x70
 8003d54:	401a      	ands	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d11f      	bne.n	8003d9e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	23fe      	movs	r3, #254	; 0xfe
 8003d62:	01db      	lsls	r3, r3, #7
 8003d64:	401a      	ands	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d116      	bne.n	8003d9e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	23f8      	movs	r3, #248	; 0xf8
 8003d74:	039b      	lsls	r3, r3, #14
 8003d76:	401a      	ands	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d10e      	bne.n	8003d9e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	23e0      	movs	r3, #224	; 0xe0
 8003d84:	051b      	lsls	r3, r3, #20
 8003d86:	401a      	ands	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d106      	bne.n	8003d9e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	0f5b      	lsrs	r3, r3, #29
 8003d94:	075a      	lsls	r2, r3, #29
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d001      	beq.n	8003da2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	0018      	movs	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b008      	add	sp, #32
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40007000 	.word	0x40007000
 8003db4:	00001388 	.word	0x00001388
 8003db8:	efffffff 	.word	0xefffffff
 8003dbc:	feffffff 	.word	0xfeffffff
 8003dc0:	11c1808c 	.word	0x11c1808c
 8003dc4:	eefefffc 	.word	0xeefefffc

08003dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0e9      	b.n	8003fb0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ddc:	4b76      	ldr	r3, [pc, #472]	; (8003fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2207      	movs	r2, #7
 8003de2:	4013      	ands	r3, r2
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d91e      	bls.n	8003e28 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dea:	4b73      	ldr	r3, [pc, #460]	; (8003fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2207      	movs	r2, #7
 8003df0:	4393      	bics	r3, r2
 8003df2:	0019      	movs	r1, r3
 8003df4:	4b70      	ldr	r3, [pc, #448]	; (8003fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003dfc:	f7fd fefa 	bl	8001bf4 <HAL_GetTick>
 8003e00:	0003      	movs	r3, r0
 8003e02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e04:	e009      	b.n	8003e1a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e06:	f7fd fef5 	bl	8001bf4 <HAL_GetTick>
 8003e0a:	0002      	movs	r2, r0
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	4a6a      	ldr	r2, [pc, #424]	; (8003fbc <HAL_RCC_ClockConfig+0x1f4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e0ca      	b.n	8003fb0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e1a:	4b67      	ldr	r3, [pc, #412]	; (8003fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2207      	movs	r2, #7
 8003e20:	4013      	ands	r3, r2
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d1ee      	bne.n	8003e06 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d015      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2204      	movs	r2, #4
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d006      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e3c:	4b60      	ldr	r3, [pc, #384]	; (8003fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	4b5f      	ldr	r3, [pc, #380]	; (8003fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e42:	21e0      	movs	r1, #224	; 0xe0
 8003e44:	01c9      	lsls	r1, r1, #7
 8003e46:	430a      	orrs	r2, r1
 8003e48:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e4a:	4b5d      	ldr	r3, [pc, #372]	; (8003fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	4a5d      	ldr	r2, [pc, #372]	; (8003fc4 <HAL_RCC_ClockConfig+0x1fc>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	0019      	movs	r1, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	4b59      	ldr	r3, [pc, #356]	; (8003fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2201      	movs	r2, #1
 8003e64:	4013      	ands	r3, r2
 8003e66:	d057      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d107      	bne.n	8003e80 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e70:	4b53      	ldr	r3, [pc, #332]	; (8003fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	2380      	movs	r3, #128	; 0x80
 8003e76:	029b      	lsls	r3, r3, #10
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d12b      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e097      	b.n	8003fb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d107      	bne.n	8003e98 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e88:	4b4d      	ldr	r3, [pc, #308]	; (8003fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	049b      	lsls	r3, r3, #18
 8003e90:	4013      	ands	r3, r2
 8003e92:	d11f      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e08b      	b.n	8003fb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ea0:	4b47      	ldr	r3, [pc, #284]	; (8003fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d113      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e07f      	b.n	8003fb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d106      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eb8:	4b41      	ldr	r3, [pc, #260]	; (8003fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d108      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e074      	b.n	8003fb0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec6:	4b3e      	ldr	r3, [pc, #248]	; (8003fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eca:	2202      	movs	r2, #2
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d101      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e06d      	b.n	8003fb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ed4:	4b3a      	ldr	r3, [pc, #232]	; (8003fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2207      	movs	r2, #7
 8003eda:	4393      	bics	r3, r2
 8003edc:	0019      	movs	r1, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee8:	f7fd fe84 	bl	8001bf4 <HAL_GetTick>
 8003eec:	0003      	movs	r3, r0
 8003eee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef0:	e009      	b.n	8003f06 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef2:	f7fd fe7f 	bl	8001bf4 <HAL_GetTick>
 8003ef6:	0002      	movs	r2, r0
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	4a2f      	ldr	r2, [pc, #188]	; (8003fbc <HAL_RCC_ClockConfig+0x1f4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e054      	b.n	8003fb0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f06:	4b2e      	ldr	r3, [pc, #184]	; (8003fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2238      	movs	r2, #56	; 0x38
 8003f0c:	401a      	ands	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d1ec      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f18:	4b27      	ldr	r3, [pc, #156]	; (8003fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2207      	movs	r2, #7
 8003f1e:	4013      	ands	r3, r2
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d21e      	bcs.n	8003f64 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f26:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2207      	movs	r2, #7
 8003f2c:	4393      	bics	r3, r2
 8003f2e:	0019      	movs	r1, r3
 8003f30:	4b21      	ldr	r3, [pc, #132]	; (8003fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f38:	f7fd fe5c 	bl	8001bf4 <HAL_GetTick>
 8003f3c:	0003      	movs	r3, r0
 8003f3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f40:	e009      	b.n	8003f56 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f42:	f7fd fe57 	bl	8001bf4 <HAL_GetTick>
 8003f46:	0002      	movs	r2, r0
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	4a1b      	ldr	r2, [pc, #108]	; (8003fbc <HAL_RCC_ClockConfig+0x1f4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e02c      	b.n	8003fb0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f56:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2207      	movs	r2, #7
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d1ee      	bne.n	8003f42 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2204      	movs	r2, #4
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d009      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003f6e:	4b14      	ldr	r3, [pc, #80]	; (8003fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	4a15      	ldr	r2, [pc, #84]	; (8003fc8 <HAL_RCC_ClockConfig+0x200>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	0019      	movs	r1, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003f82:	f000 f829 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8003f86:	0001      	movs	r1, r0
 8003f88:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	0a1b      	lsrs	r3, r3, #8
 8003f8e:	220f      	movs	r2, #15
 8003f90:	401a      	ands	r2, r3
 8003f92:	4b0e      	ldr	r3, [pc, #56]	; (8003fcc <HAL_RCC_ClockConfig+0x204>)
 8003f94:	0092      	lsls	r2, r2, #2
 8003f96:	58d3      	ldr	r3, [r2, r3]
 8003f98:	221f      	movs	r2, #31
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	000a      	movs	r2, r1
 8003f9e:	40da      	lsrs	r2, r3
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <HAL_RCC_ClockConfig+0x208>)
 8003fa2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <HAL_RCC_ClockConfig+0x20c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f7fd fdc7 	bl	8001b3c <HAL_InitTick>
 8003fae:	0003      	movs	r3, r0
}
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b004      	add	sp, #16
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40022000 	.word	0x40022000
 8003fbc:	00001388 	.word	0x00001388
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	fffff0ff 	.word	0xfffff0ff
 8003fc8:	ffff8fff 	.word	0xffff8fff
 8003fcc:	08007438 	.word	0x08007438
 8003fd0:	20000030 	.word	0x20000030
 8003fd4:	20000034 	.word	0x20000034

08003fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fde:	4b3c      	ldr	r3, [pc, #240]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2238      	movs	r2, #56	; 0x38
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d10f      	bne.n	8004008 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003fe8:	4b39      	ldr	r3, [pc, #228]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	0adb      	lsrs	r3, r3, #11
 8003fee:	2207      	movs	r2, #7
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	409a      	lsls	r2, r3
 8003ff6:	0013      	movs	r3, r2
 8003ff8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003ffa:	6839      	ldr	r1, [r7, #0]
 8003ffc:	4835      	ldr	r0, [pc, #212]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ffe:	f7fc f88b 	bl	8000118 <__udivsi3>
 8004002:	0003      	movs	r3, r0
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	e05d      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004008:	4b31      	ldr	r3, [pc, #196]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2238      	movs	r2, #56	; 0x38
 800400e:	4013      	ands	r3, r2
 8004010:	2b08      	cmp	r3, #8
 8004012:	d102      	bne.n	800401a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004014:	4b30      	ldr	r3, [pc, #192]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	e054      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800401a:	4b2d      	ldr	r3, [pc, #180]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2238      	movs	r2, #56	; 0x38
 8004020:	4013      	ands	r3, r2
 8004022:	2b10      	cmp	r3, #16
 8004024:	d138      	bne.n	8004098 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004026:	4b2a      	ldr	r3, [pc, #168]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	2203      	movs	r2, #3
 800402c:	4013      	ands	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004030:	4b27      	ldr	r3, [pc, #156]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	2207      	movs	r2, #7
 8004038:	4013      	ands	r3, r2
 800403a:	3301      	adds	r3, #1
 800403c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b03      	cmp	r3, #3
 8004042:	d10d      	bne.n	8004060 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	4824      	ldr	r0, [pc, #144]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004048:	f7fc f866 	bl	8000118 <__udivsi3>
 800404c:	0003      	movs	r3, r0
 800404e:	0019      	movs	r1, r3
 8004050:	4b1f      	ldr	r3, [pc, #124]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	0a1b      	lsrs	r3, r3, #8
 8004056:	227f      	movs	r2, #127	; 0x7f
 8004058:	4013      	ands	r3, r2
 800405a:	434b      	muls	r3, r1
 800405c:	617b      	str	r3, [r7, #20]
        break;
 800405e:	e00d      	b.n	800407c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	481c      	ldr	r0, [pc, #112]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004064:	f7fc f858 	bl	8000118 <__udivsi3>
 8004068:	0003      	movs	r3, r0
 800406a:	0019      	movs	r1, r3
 800406c:	4b18      	ldr	r3, [pc, #96]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	0a1b      	lsrs	r3, r3, #8
 8004072:	227f      	movs	r2, #127	; 0x7f
 8004074:	4013      	ands	r3, r2
 8004076:	434b      	muls	r3, r1
 8004078:	617b      	str	r3, [r7, #20]
        break;
 800407a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800407c:	4b14      	ldr	r3, [pc, #80]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	0f5b      	lsrs	r3, r3, #29
 8004082:	2207      	movs	r2, #7
 8004084:	4013      	ands	r3, r2
 8004086:	3301      	adds	r3, #1
 8004088:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	6978      	ldr	r0, [r7, #20]
 800408e:	f7fc f843 	bl	8000118 <__udivsi3>
 8004092:	0003      	movs	r3, r0
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	e015      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004098:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2238      	movs	r2, #56	; 0x38
 800409e:	4013      	ands	r3, r2
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d103      	bne.n	80040ac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	e00b      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80040ac:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	2238      	movs	r2, #56	; 0x38
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b18      	cmp	r3, #24
 80040b6:	d103      	bne.n	80040c0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80040b8:	23fa      	movs	r3, #250	; 0xfa
 80040ba:	01db      	lsls	r3, r3, #7
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	e001      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040c4:	693b      	ldr	r3, [r7, #16]
}
 80040c6:	0018      	movs	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b006      	add	sp, #24
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	40021000 	.word	0x40021000
 80040d4:	00f42400 	.word	0x00f42400
 80040d8:	007a1200 	.word	0x007a1200

080040dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e0:	4b02      	ldr	r3, [pc, #8]	; (80040ec <HAL_RCC_GetHCLKFreq+0x10>)
 80040e2:	681b      	ldr	r3, [r3, #0]
}
 80040e4:	0018      	movs	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	20000030 	.word	0x20000030

080040f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f0:	b5b0      	push	{r4, r5, r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80040f4:	f7ff fff2 	bl	80040dc <HAL_RCC_GetHCLKFreq>
 80040f8:	0004      	movs	r4, r0
 80040fa:	f7ff fb3f 	bl	800377c <LL_RCC_GetAPB1Prescaler>
 80040fe:	0003      	movs	r3, r0
 8004100:	0b1a      	lsrs	r2, r3, #12
 8004102:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004104:	0092      	lsls	r2, r2, #2
 8004106:	58d3      	ldr	r3, [r2, r3]
 8004108:	221f      	movs	r2, #31
 800410a:	4013      	ands	r3, r2
 800410c:	40dc      	lsrs	r4, r3
 800410e:	0023      	movs	r3, r4
}
 8004110:	0018      	movs	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	bdb0      	pop	{r4, r5, r7, pc}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	08007478 	.word	0x08007478

0800411c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004124:	2313      	movs	r3, #19
 8004126:	18fb      	adds	r3, r7, r3
 8004128:	2200      	movs	r2, #0
 800412a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800412c:	2312      	movs	r3, #18
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	2200      	movs	r2, #0
 8004132:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	029b      	lsls	r3, r3, #10
 800413c:	4013      	ands	r3, r2
 800413e:	d100      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004140:	e0a3      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004142:	2011      	movs	r0, #17
 8004144:	183b      	adds	r3, r7, r0
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414a:	4ba5      	ldr	r3, [pc, #660]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800414c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800414e:	2380      	movs	r3, #128	; 0x80
 8004150:	055b      	lsls	r3, r3, #21
 8004152:	4013      	ands	r3, r2
 8004154:	d110      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004156:	4ba2      	ldr	r3, [pc, #648]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004158:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800415a:	4ba1      	ldr	r3, [pc, #644]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800415c:	2180      	movs	r1, #128	; 0x80
 800415e:	0549      	lsls	r1, r1, #21
 8004160:	430a      	orrs	r2, r1
 8004162:	63da      	str	r2, [r3, #60]	; 0x3c
 8004164:	4b9e      	ldr	r3, [pc, #632]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	055b      	lsls	r3, r3, #21
 800416c:	4013      	ands	r3, r2
 800416e:	60bb      	str	r3, [r7, #8]
 8004170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004172:	183b      	adds	r3, r7, r0
 8004174:	2201      	movs	r2, #1
 8004176:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004178:	4b9a      	ldr	r3, [pc, #616]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b99      	ldr	r3, [pc, #612]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800417e:	2180      	movs	r1, #128	; 0x80
 8004180:	0049      	lsls	r1, r1, #1
 8004182:	430a      	orrs	r2, r1
 8004184:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004186:	f7fd fd35 	bl	8001bf4 <HAL_GetTick>
 800418a:	0003      	movs	r3, r0
 800418c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800418e:	e00b      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004190:	f7fd fd30 	bl	8001bf4 <HAL_GetTick>
 8004194:	0002      	movs	r2, r0
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d904      	bls.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800419e:	2313      	movs	r3, #19
 80041a0:	18fb      	adds	r3, r7, r3
 80041a2:	2203      	movs	r2, #3
 80041a4:	701a      	strb	r2, [r3, #0]
        break;
 80041a6:	e005      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041a8:	4b8e      	ldr	r3, [pc, #568]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	2380      	movs	r3, #128	; 0x80
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	4013      	ands	r3, r2
 80041b2:	d0ed      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80041b4:	2313      	movs	r3, #19
 80041b6:	18fb      	adds	r3, r7, r3
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d154      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041be:	4b88      	ldr	r3, [pc, #544]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041c2:	23c0      	movs	r3, #192	; 0xc0
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4013      	ands	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d019      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d014      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041da:	4b81      	ldr	r3, [pc, #516]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041de:	4a82      	ldr	r2, [pc, #520]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041e4:	4b7e      	ldr	r3, [pc, #504]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041e8:	4b7d      	ldr	r3, [pc, #500]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041ea:	2180      	movs	r1, #128	; 0x80
 80041ec:	0249      	lsls	r1, r1, #9
 80041ee:	430a      	orrs	r2, r1
 80041f0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041f2:	4b7b      	ldr	r3, [pc, #492]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041f6:	4b7a      	ldr	r3, [pc, #488]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041f8:	497c      	ldr	r1, [pc, #496]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80041fa:	400a      	ands	r2, r1
 80041fc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041fe:	4b78      	ldr	r3, [pc, #480]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2201      	movs	r2, #1
 8004208:	4013      	ands	r3, r2
 800420a:	d016      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420c:	f7fd fcf2 	bl	8001bf4 <HAL_GetTick>
 8004210:	0003      	movs	r3, r0
 8004212:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004214:	e00c      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004216:	f7fd fced 	bl	8001bf4 <HAL_GetTick>
 800421a:	0002      	movs	r2, r0
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	4a73      	ldr	r2, [pc, #460]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d904      	bls.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004226:	2313      	movs	r3, #19
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	2203      	movs	r2, #3
 800422c:	701a      	strb	r2, [r3, #0]
            break;
 800422e:	e004      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004230:	4b6b      	ldr	r3, [pc, #428]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004234:	2202      	movs	r2, #2
 8004236:	4013      	ands	r3, r2
 8004238:	d0ed      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800423a:	2313      	movs	r3, #19
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10a      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004244:	4b66      	ldr	r3, [pc, #408]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004248:	4a67      	ldr	r2, [pc, #412]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800424a:	4013      	ands	r3, r2
 800424c:	0019      	movs	r1, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004252:	4b63      	ldr	r3, [pc, #396]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004254:	430a      	orrs	r2, r1
 8004256:	65da      	str	r2, [r3, #92]	; 0x5c
 8004258:	e00c      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800425a:	2312      	movs	r3, #18
 800425c:	18fb      	adds	r3, r7, r3
 800425e:	2213      	movs	r2, #19
 8004260:	18ba      	adds	r2, r7, r2
 8004262:	7812      	ldrb	r2, [r2, #0]
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	e005      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004268:	2312      	movs	r3, #18
 800426a:	18fb      	adds	r3, r7, r3
 800426c:	2213      	movs	r2, #19
 800426e:	18ba      	adds	r2, r7, r2
 8004270:	7812      	ldrb	r2, [r2, #0]
 8004272:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004274:	2311      	movs	r3, #17
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d105      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427e:	4b58      	ldr	r3, [pc, #352]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004282:	4b57      	ldr	r3, [pc, #348]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004284:	495b      	ldr	r1, [pc, #364]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004286:	400a      	ands	r2, r1
 8004288:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2201      	movs	r2, #1
 8004290:	4013      	ands	r3, r2
 8004292:	d009      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004294:	4b52      	ldr	r3, [pc, #328]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004298:	2203      	movs	r2, #3
 800429a:	4393      	bics	r3, r2
 800429c:	0019      	movs	r1, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	4b4f      	ldr	r3, [pc, #316]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042a4:	430a      	orrs	r2, r1
 80042a6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2210      	movs	r2, #16
 80042ae:	4013      	ands	r3, r2
 80042b0:	d009      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042b2:	4b4b      	ldr	r3, [pc, #300]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b6:	4a50      	ldr	r2, [pc, #320]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	0019      	movs	r1, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	4b47      	ldr	r3, [pc, #284]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042c2:	430a      	orrs	r2, r1
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	2380      	movs	r3, #128	; 0x80
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4013      	ands	r3, r2
 80042d0:	d009      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042d2:	4b43      	ldr	r3, [pc, #268]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d6:	4a49      	ldr	r2, [pc, #292]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80042d8:	4013      	ands	r3, r2
 80042da:	0019      	movs	r1, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	695a      	ldr	r2, [r3, #20]
 80042e0:	4b3f      	ldr	r3, [pc, #252]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042e2:	430a      	orrs	r2, r1
 80042e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	4013      	ands	r3, r2
 80042f0:	d009      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042f2:	4b3b      	ldr	r3, [pc, #236]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f6:	4a42      	ldr	r2, [pc, #264]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	0019      	movs	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699a      	ldr	r2, [r3, #24]
 8004300:	4b37      	ldr	r3, [pc, #220]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004302:	430a      	orrs	r2, r1
 8004304:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2220      	movs	r2, #32
 800430c:	4013      	ands	r3, r2
 800430e:	d009      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004310:	4b33      	ldr	r3, [pc, #204]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004314:	4a3b      	ldr	r2, [pc, #236]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004316:	4013      	ands	r3, r2
 8004318:	0019      	movs	r1, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	4b30      	ldr	r3, [pc, #192]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004320:	430a      	orrs	r2, r1
 8004322:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	01db      	lsls	r3, r3, #7
 800432c:	4013      	ands	r3, r2
 800432e:	d015      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004330:	4b2b      	ldr	r3, [pc, #172]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	0899      	lsrs	r1, r3, #2
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	69da      	ldr	r2, [r3, #28]
 800433c:	4b28      	ldr	r3, [pc, #160]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800433e:	430a      	orrs	r2, r1
 8004340:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69da      	ldr	r2, [r3, #28]
 8004346:	2380      	movs	r3, #128	; 0x80
 8004348:	05db      	lsls	r3, r3, #23
 800434a:	429a      	cmp	r2, r3
 800434c:	d106      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800434e:	4b24      	ldr	r3, [pc, #144]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	4b23      	ldr	r3, [pc, #140]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004354:	2180      	movs	r1, #128	; 0x80
 8004356:	0249      	lsls	r1, r1, #9
 8004358:	430a      	orrs	r2, r1
 800435a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	039b      	lsls	r3, r3, #14
 8004364:	4013      	ands	r3, r2
 8004366:	d016      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004368:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800436a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436c:	4a26      	ldr	r2, [pc, #152]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800436e:	4013      	ands	r3, r2
 8004370:	0019      	movs	r1, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1a      	ldr	r2, [r3, #32]
 8004376:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004378:	430a      	orrs	r2, r1
 800437a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1a      	ldr	r2, [r3, #32]
 8004380:	2380      	movs	r3, #128	; 0x80
 8004382:	03db      	lsls	r3, r3, #15
 8004384:	429a      	cmp	r2, r3
 8004386:	d106      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004388:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800438e:	2180      	movs	r1, #128	; 0x80
 8004390:	0449      	lsls	r1, r1, #17
 8004392:	430a      	orrs	r2, r1
 8004394:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	4013      	ands	r3, r2
 80043a0:	d016      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80043a2:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a6:	4a19      	ldr	r2, [pc, #100]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	0019      	movs	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043b2:	430a      	orrs	r2, r1
 80043b4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	2380      	movs	r3, #128	; 0x80
 80043bc:	01db      	lsls	r3, r3, #7
 80043be:	429a      	cmp	r2, r3
 80043c0:	d106      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80043c2:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043c8:	2180      	movs	r1, #128	; 0x80
 80043ca:	0249      	lsls	r1, r1, #9
 80043cc:	430a      	orrs	r2, r1
 80043ce:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80043d0:	2312      	movs	r3, #18
 80043d2:	18fb      	adds	r3, r7, r3
 80043d4:	781b      	ldrb	r3, [r3, #0]
}
 80043d6:	0018      	movs	r0, r3
 80043d8:	46bd      	mov	sp, r7
 80043da:	b006      	add	sp, #24
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40007000 	.word	0x40007000
 80043e8:	fffffcff 	.word	0xfffffcff
 80043ec:	fffeffff 	.word	0xfffeffff
 80043f0:	00001388 	.word	0x00001388
 80043f4:	efffffff 	.word	0xefffffff
 80043f8:	fffff3ff 	.word	0xfffff3ff
 80043fc:	fff3ffff 	.word	0xfff3ffff
 8004400:	ffcfffff 	.word	0xffcfffff
 8004404:	ffffcfff 	.word	0xffffcfff
 8004408:	ffbfffff 	.word	0xffbfffff
 800440c:	ffff3fff 	.word	0xffff3fff

08004410 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004410:	b5b0      	push	{r4, r5, r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004418:	230f      	movs	r3, #15
 800441a:	18fb      	adds	r3, r7, r3
 800441c:	2201      	movs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d100      	bne.n	8004428 <HAL_RTC_Init+0x18>
 8004426:	e08c      	b.n	8004542 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2229      	movs	r2, #41	; 0x29
 800442c:	5c9b      	ldrb	r3, [r3, r2]
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10b      	bne.n	800444c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2228      	movs	r2, #40	; 0x28
 8004438:	2100      	movs	r1, #0
 800443a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2288      	movs	r2, #136	; 0x88
 8004440:	0212      	lsls	r2, r2, #8
 8004442:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	0018      	movs	r0, r3
 8004448:	f7fd f976 	bl	8001738 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2229      	movs	r2, #41	; 0x29
 8004450:	2102      	movs	r1, #2
 8004452:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	2210      	movs	r2, #16
 800445c:	4013      	ands	r3, r2
 800445e:	2b10      	cmp	r3, #16
 8004460:	d062      	beq.n	8004528 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	22ca      	movs	r2, #202	; 0xca
 8004468:	625a      	str	r2, [r3, #36]	; 0x24
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2253      	movs	r2, #83	; 0x53
 8004470:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004472:	250f      	movs	r5, #15
 8004474:	197c      	adds	r4, r7, r5
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	0018      	movs	r0, r3
 800447a:	f000 fde0 	bl	800503e <RTC_EnterInitMode>
 800447e:	0003      	movs	r3, r0
 8004480:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004482:	0028      	movs	r0, r5
 8004484:	183b      	adds	r3, r7, r0
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d12c      	bne.n	80044e6 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	492e      	ldr	r1, [pc, #184]	; (8004550 <HAL_RTC_Init+0x140>)
 8004498:	400a      	ands	r2, r1
 800449a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6999      	ldr	r1, [r3, #24]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6912      	ldr	r2, [r2, #16]
 80044c2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6919      	ldr	r1, [r3, #16]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	041a      	lsls	r2, r3, #16
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80044d8:	183c      	adds	r4, r7, r0
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	0018      	movs	r0, r3
 80044de:	f000 fdf1 	bl	80050c4 <RTC_ExitInitMode>
 80044e2:	0003      	movs	r3, r0
 80044e4:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80044e6:	230f      	movs	r3, #15
 80044e8:	18fb      	adds	r3, r7, r3
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d116      	bne.n	800451e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699a      	ldr	r2, [r3, #24]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	00d2      	lsls	r2, r2, #3
 80044fc:	08d2      	lsrs	r2, r2, #3
 80044fe:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6999      	ldr	r1, [r3, #24]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	22ff      	movs	r2, #255	; 0xff
 8004524:	625a      	str	r2, [r3, #36]	; 0x24
 8004526:	e003      	b.n	8004530 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004528:	230f      	movs	r3, #15
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004530:	230f      	movs	r3, #15
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d103      	bne.n	8004542 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2229      	movs	r2, #41	; 0x29
 800453e:	2101      	movs	r1, #1
 8004540:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004542:	230f      	movs	r3, #15
 8004544:	18fb      	adds	r3, r7, r3
 8004546:	781b      	ldrb	r3, [r3, #0]
}
 8004548:	0018      	movs	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	b004      	add	sp, #16
 800454e:	bdb0      	pop	{r4, r5, r7, pc}
 8004550:	fb8fffbf 	.word	0xfb8fffbf

08004554 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004554:	b5b0      	push	{r4, r5, r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2228      	movs	r2, #40	; 0x28
 8004564:	5c9b      	ldrb	r3, [r3, r2]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <HAL_RTC_SetTime+0x1a>
 800456a:	2302      	movs	r3, #2
 800456c:	e092      	b.n	8004694 <HAL_RTC_SetTime+0x140>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2228      	movs	r2, #40	; 0x28
 8004572:	2101      	movs	r1, #1
 8004574:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2229      	movs	r2, #41	; 0x29
 800457a:	2102      	movs	r1, #2
 800457c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	22ca      	movs	r2, #202	; 0xca
 8004584:	625a      	str	r2, [r3, #36]	; 0x24
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2253      	movs	r2, #83	; 0x53
 800458c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800458e:	2513      	movs	r5, #19
 8004590:	197c      	adds	r4, r7, r5
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	0018      	movs	r0, r3
 8004596:	f000 fd52 	bl	800503e <RTC_EnterInitMode>
 800459a:	0003      	movs	r3, r0
 800459c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800459e:	197b      	adds	r3, r7, r5
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d162      	bne.n	800466c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d125      	bne.n	80045f8 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	2240      	movs	r2, #64	; 0x40
 80045b4:	4013      	ands	r3, r2
 80045b6:	d102      	bne.n	80045be <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2200      	movs	r2, #0
 80045bc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	0018      	movs	r0, r3
 80045c4:	f000 fdc2 	bl	800514c <RTC_ByteToBcd2>
 80045c8:	0003      	movs	r3, r0
 80045ca:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	785b      	ldrb	r3, [r3, #1]
 80045d0:	0018      	movs	r0, r3
 80045d2:	f000 fdbb 	bl	800514c <RTC_ByteToBcd2>
 80045d6:	0003      	movs	r3, r0
 80045d8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045da:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	789b      	ldrb	r3, [r3, #2]
 80045e0:	0018      	movs	r0, r3
 80045e2:	f000 fdb3 	bl	800514c <RTC_ByteToBcd2>
 80045e6:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045e8:	0022      	movs	r2, r4
 80045ea:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	78db      	ldrb	r3, [r3, #3]
 80045f0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	e017      	b.n	8004628 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2240      	movs	r2, #64	; 0x40
 8004600:	4013      	ands	r3, r2
 8004602:	d102      	bne.n	800460a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2200      	movs	r2, #0
 8004608:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	785b      	ldrb	r3, [r3, #1]
 8004614:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004616:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800461c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	78db      	ldrb	r3, [r3, #3]
 8004622:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	491b      	ldr	r1, [pc, #108]	; (800469c <HAL_RTC_SetTime+0x148>)
 8004630:	400a      	ands	r2, r1
 8004632:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4918      	ldr	r1, [pc, #96]	; (80046a0 <HAL_RTC_SetTime+0x14c>)
 8004640:	400a      	ands	r2, r1
 8004642:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6999      	ldr	r1, [r3, #24]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	431a      	orrs	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800465c:	2313      	movs	r3, #19
 800465e:	18fc      	adds	r4, r7, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	0018      	movs	r0, r3
 8004664:	f000 fd2e 	bl	80050c4 <RTC_ExitInitMode>
 8004668:	0003      	movs	r3, r0
 800466a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	22ff      	movs	r2, #255	; 0xff
 8004672:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004674:	2313      	movs	r3, #19
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d103      	bne.n	8004686 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2229      	movs	r2, #41	; 0x29
 8004682:	2101      	movs	r1, #1
 8004684:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2228      	movs	r2, #40	; 0x28
 800468a:	2100      	movs	r1, #0
 800468c:	5499      	strb	r1, [r3, r2]

  return status;
 800468e:	2313      	movs	r3, #19
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	781b      	ldrb	r3, [r3, #0]
}
 8004694:	0018      	movs	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	b006      	add	sp, #24
 800469a:	bdb0      	pop	{r4, r5, r7, pc}
 800469c:	007f7f7f 	.word	0x007f7f7f
 80046a0:	fffbffff 	.word	0xfffbffff

080046a4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	045b      	lsls	r3, r3, #17
 80046c2:	0c5a      	lsrs	r2, r3, #17
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a22      	ldr	r2, [pc, #136]	; (8004758 <HAL_RTC_GetTime+0xb4>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	0c1b      	lsrs	r3, r3, #16
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	223f      	movs	r2, #63	; 0x3f
 80046dc:	4013      	ands	r3, r2
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	0a1b      	lsrs	r3, r3, #8
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	227f      	movs	r2, #127	; 0x7f
 80046ec:	4013      	ands	r3, r2
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	227f      	movs	r2, #127	; 0x7f
 80046fa:	4013      	ands	r3, r2
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	0d9b      	lsrs	r3, r3, #22
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2201      	movs	r2, #1
 800470a:	4013      	ands	r3, r2
 800470c:	b2da      	uxtb	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d11a      	bne.n	800474e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	0018      	movs	r0, r3
 800471e:	f000 fd3d 	bl	800519c <RTC_Bcd2ToByte>
 8004722:	0003      	movs	r3, r0
 8004724:	001a      	movs	r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	785b      	ldrb	r3, [r3, #1]
 800472e:	0018      	movs	r0, r3
 8004730:	f000 fd34 	bl	800519c <RTC_Bcd2ToByte>
 8004734:	0003      	movs	r3, r0
 8004736:	001a      	movs	r2, r3
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	789b      	ldrb	r3, [r3, #2]
 8004740:	0018      	movs	r0, r3
 8004742:	f000 fd2b 	bl	800519c <RTC_Bcd2ToByte>
 8004746:	0003      	movs	r3, r0
 8004748:	001a      	movs	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	0018      	movs	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	b006      	add	sp, #24
 8004756:	bd80      	pop	{r7, pc}
 8004758:	007f7f7f 	.word	0x007f7f7f

0800475c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800475c:	b5b0      	push	{r4, r5, r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2228      	movs	r2, #40	; 0x28
 800476c:	5c9b      	ldrb	r3, [r3, r2]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_RTC_SetDate+0x1a>
 8004772:	2302      	movs	r3, #2
 8004774:	e07e      	b.n	8004874 <HAL_RTC_SetDate+0x118>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2228      	movs	r2, #40	; 0x28
 800477a:	2101      	movs	r1, #1
 800477c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2229      	movs	r2, #41	; 0x29
 8004782:	2102      	movs	r1, #2
 8004784:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10e      	bne.n	80047aa <HAL_RTC_SetDate+0x4e>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	785b      	ldrb	r3, [r3, #1]
 8004790:	001a      	movs	r2, r3
 8004792:	2310      	movs	r3, #16
 8004794:	4013      	ands	r3, r2
 8004796:	d008      	beq.n	80047aa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	785b      	ldrb	r3, [r3, #1]
 800479c:	2210      	movs	r2, #16
 800479e:	4393      	bics	r3, r2
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	330a      	adds	r3, #10
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d11c      	bne.n	80047ea <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	78db      	ldrb	r3, [r3, #3]
 80047b4:	0018      	movs	r0, r3
 80047b6:	f000 fcc9 	bl	800514c <RTC_ByteToBcd2>
 80047ba:	0003      	movs	r3, r0
 80047bc:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	785b      	ldrb	r3, [r3, #1]
 80047c2:	0018      	movs	r0, r3
 80047c4:	f000 fcc2 	bl	800514c <RTC_ByteToBcd2>
 80047c8:	0003      	movs	r3, r0
 80047ca:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80047cc:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	789b      	ldrb	r3, [r3, #2]
 80047d2:	0018      	movs	r0, r3
 80047d4:	f000 fcba 	bl	800514c <RTC_ByteToBcd2>
 80047d8:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80047da:	0022      	movs	r2, r4
 80047dc:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	e00e      	b.n	8004808 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	78db      	ldrb	r3, [r3, #3]
 80047ee:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80047f6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80047fc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004804:	4313      	orrs	r3, r2
 8004806:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	22ca      	movs	r2, #202	; 0xca
 800480e:	625a      	str	r2, [r3, #36]	; 0x24
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2253      	movs	r2, #83	; 0x53
 8004816:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004818:	2513      	movs	r5, #19
 800481a:	197c      	adds	r4, r7, r5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	0018      	movs	r0, r3
 8004820:	f000 fc0d 	bl	800503e <RTC_EnterInitMode>
 8004824:	0003      	movs	r3, r0
 8004826:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004828:	0028      	movs	r0, r5
 800482a:	183b      	adds	r3, r7, r0
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10c      	bne.n	800484c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	4910      	ldr	r1, [pc, #64]	; (800487c <HAL_RTC_SetDate+0x120>)
 800483a:	400a      	ands	r2, r1
 800483c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800483e:	183c      	adds	r4, r7, r0
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	0018      	movs	r0, r3
 8004844:	f000 fc3e 	bl	80050c4 <RTC_ExitInitMode>
 8004848:	0003      	movs	r3, r0
 800484a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	22ff      	movs	r2, #255	; 0xff
 8004852:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004854:	2313      	movs	r3, #19
 8004856:	18fb      	adds	r3, r7, r3
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d103      	bne.n	8004866 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2229      	movs	r2, #41	; 0x29
 8004862:	2101      	movs	r1, #1
 8004864:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2228      	movs	r2, #40	; 0x28
 800486a:	2100      	movs	r1, #0
 800486c:	5499      	strb	r1, [r3, r2]

  return status;
 800486e:	2313      	movs	r3, #19
 8004870:	18fb      	adds	r3, r7, r3
 8004872:	781b      	ldrb	r3, [r3, #0]
}
 8004874:	0018      	movs	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	b006      	add	sp, #24
 800487a:	bdb0      	pop	{r4, r5, r7, pc}
 800487c:	00ffff3f 	.word	0x00ffff3f

08004880 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	4a21      	ldr	r2, [pc, #132]	; (8004918 <HAL_RTC_GetDate+0x98>)
 8004894:	4013      	ands	r3, r2
 8004896:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	0c1b      	lsrs	r3, r3, #16
 800489c:	b2da      	uxtb	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	0a1b      	lsrs	r3, r3, #8
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	221f      	movs	r2, #31
 80048aa:	4013      	ands	r3, r2
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	223f      	movs	r2, #63	; 0x3f
 80048b8:	4013      	ands	r3, r2
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	0b5b      	lsrs	r3, r3, #13
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2207      	movs	r2, #7
 80048c8:	4013      	ands	r3, r2
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d11a      	bne.n	800490c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	78db      	ldrb	r3, [r3, #3]
 80048da:	0018      	movs	r0, r3
 80048dc:	f000 fc5e 	bl	800519c <RTC_Bcd2ToByte>
 80048e0:	0003      	movs	r3, r0
 80048e2:	001a      	movs	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	785b      	ldrb	r3, [r3, #1]
 80048ec:	0018      	movs	r0, r3
 80048ee:	f000 fc55 	bl	800519c <RTC_Bcd2ToByte>
 80048f2:	0003      	movs	r3, r0
 80048f4:	001a      	movs	r2, r3
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	789b      	ldrb	r3, [r3, #2]
 80048fe:	0018      	movs	r0, r3
 8004900:	f000 fc4c 	bl	800519c <RTC_Bcd2ToByte>
 8004904:	0003      	movs	r3, r0
 8004906:	001a      	movs	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	0018      	movs	r0, r3
 8004910:	46bd      	mov	sp, r7
 8004912:	b006      	add	sp, #24
 8004914:	bd80      	pop	{r7, pc}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	00ffff3f 	.word	0x00ffff3f

0800491c <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800491c:	b590      	push	{r4, r7, lr}
 800491e:	b089      	sub	sp, #36	; 0x24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2228      	movs	r2, #40	; 0x28
 800492c:	5c9b      	ldrb	r3, [r3, r2]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_RTC_SetAlarm+0x1a>
 8004932:	2302      	movs	r3, #2
 8004934:	e10c      	b.n	8004b50 <HAL_RTC_SetAlarm+0x234>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2228      	movs	r2, #40	; 0x28
 800493a:	2101      	movs	r1, #1
 800493c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2229      	movs	r2, #41	; 0x29
 8004942:	2102      	movs	r1, #2
 8004944:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d136      	bne.n	80049ba <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	2240      	movs	r2, #64	; 0x40
 8004954:	4013      	ands	r3, r2
 8004956:	d102      	bne.n	800495e <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2200      	movs	r2, #0
 800495c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	0018      	movs	r0, r3
 8004964:	f000 fbf2 	bl	800514c <RTC_ByteToBcd2>
 8004968:	0003      	movs	r3, r0
 800496a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	785b      	ldrb	r3, [r3, #1]
 8004970:	0018      	movs	r0, r3
 8004972:	f000 fbeb 	bl	800514c <RTC_ByteToBcd2>
 8004976:	0003      	movs	r3, r0
 8004978:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800497a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	789b      	ldrb	r3, [r3, #2]
 8004980:	0018      	movs	r0, r3
 8004982:	f000 fbe3 	bl	800514c <RTC_ByteToBcd2>
 8004986:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004988:	0022      	movs	r2, r4
 800498a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	78db      	ldrb	r3, [r3, #3]
 8004990:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004992:	431a      	orrs	r2, r3
 8004994:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2220      	movs	r2, #32
 800499a:	5c9b      	ldrb	r3, [r3, r2]
 800499c:	0018      	movs	r0, r3
 800499e:	f000 fbd5 	bl	800514c <RTC_ByteToBcd2>
 80049a2:	0003      	movs	r3, r0
 80049a4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80049a6:	0022      	movs	r2, r4
 80049a8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80049ae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049b4:	4313      	orrs	r3, r2
 80049b6:	61fb      	str	r3, [r7, #28]
 80049b8:	e022      	b.n	8004a00 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	2240      	movs	r2, #64	; 0x40
 80049c2:	4013      	ands	r3, r2
 80049c4:	d102      	bne.n	80049cc <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2200      	movs	r2, #0
 80049ca:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	785b      	ldrb	r3, [r3, #1]
 80049d6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049d8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80049de:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	78db      	ldrb	r3, [r3, #3]
 80049e4:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80049e6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2120      	movs	r1, #32
 80049ec:	5c5b      	ldrb	r3, [r3, r1]
 80049ee:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80049f0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80049f6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	22ca      	movs	r2, #202	; 0xca
 8004a12:	625a      	str	r2, [r3, #36]	; 0x24
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2253      	movs	r2, #83	; 0x53
 8004a1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a20:	2380      	movs	r3, #128	; 0x80
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d143      	bne.n	8004ab0 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699a      	ldr	r2, [r3, #24]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4949      	ldr	r1, [pc, #292]	; (8004b58 <HAL_RTC_SetAlarm+0x23c>)
 8004a34:	400a      	ands	r2, r1
 8004a36:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4946      	ldr	r1, [pc, #280]	; (8004b5c <HAL_RTC_SetAlarm+0x240>)
 8004a44:	400a      	ands	r2, r1
 8004a46:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004a48:	f7fd f8d4 	bl	8001bf4 <HAL_GetTick>
 8004a4c:	0003      	movs	r3, r0
 8004a4e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004a50:	e016      	b.n	8004a80 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a52:	f7fd f8cf 	bl	8001bf4 <HAL_GetTick>
 8004a56:	0002      	movs	r2, r0
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	1ad2      	subs	r2, r2, r3
 8004a5c:	23fa      	movs	r3, #250	; 0xfa
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d90d      	bls.n	8004a80 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	22ff      	movs	r2, #255	; 0xff
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2229      	movs	r2, #41	; 0x29
 8004a70:	2103      	movs	r1, #3
 8004a72:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2228      	movs	r2, #40	; 0x28
 8004a78:	2100      	movs	r1, #0
 8004a7a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e067      	b.n	8004b50 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2201      	movs	r2, #1
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d0e2      	beq.n	8004a52 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2180      	movs	r1, #128	; 0x80
 8004aa8:	0049      	lsls	r1, r1, #1
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	619a      	str	r2, [r3, #24]
 8004aae:	e042      	b.n	8004b36 <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4929      	ldr	r1, [pc, #164]	; (8004b60 <HAL_RTC_SetAlarm+0x244>)
 8004abc:	400a      	ands	r2, r1
 8004abe:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4926      	ldr	r1, [pc, #152]	; (8004b64 <HAL_RTC_SetAlarm+0x248>)
 8004acc:	400a      	ands	r2, r1
 8004ace:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004ad0:	f7fd f890 	bl	8001bf4 <HAL_GetTick>
 8004ad4:	0003      	movs	r3, r0
 8004ad6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004ad8:	e016      	b.n	8004b08 <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ada:	f7fd f88b 	bl	8001bf4 <HAL_GetTick>
 8004ade:	0002      	movs	r2, r0
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	1ad2      	subs	r2, r2, r3
 8004ae4:	23fa      	movs	r3, #250	; 0xfa
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d90d      	bls.n	8004b08 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	22ff      	movs	r2, #255	; 0xff
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2229      	movs	r2, #41	; 0x29
 8004af8:	2103      	movs	r1, #3
 8004afa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2228      	movs	r2, #40	; 0x28
 8004b00:	2100      	movs	r1, #0
 8004b02:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e023      	b.n	8004b50 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	4013      	ands	r3, r2
 8004b12:	d0e2      	beq.n	8004ada <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69fa      	ldr	r2, [r7, #28]
 8004b1a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2180      	movs	r1, #128	; 0x80
 8004b30:	0089      	lsls	r1, r1, #2
 8004b32:	430a      	orrs	r2, r1
 8004b34:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	22ff      	movs	r2, #255	; 0xff
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2229      	movs	r2, #41	; 0x29
 8004b42:	2101      	movs	r1, #1
 8004b44:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2228      	movs	r2, #40	; 0x28
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	0018      	movs	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	b009      	add	sp, #36	; 0x24
 8004b56:	bd90      	pop	{r4, r7, pc}
 8004b58:	fffffeff 	.word	0xfffffeff
 8004b5c:	ffffefff 	.word	0xffffefff
 8004b60:	fffffdff 	.word	0xfffffdff
 8004b64:	ffffdfff 	.word	0xffffdfff

08004b68 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004b68:	b590      	push	{r4, r7, lr}
 8004b6a:	b089      	sub	sp, #36	; 0x24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2228      	movs	r2, #40	; 0x28
 8004b78:	5c9b      	ldrb	r3, [r3, r2]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_RTC_SetAlarm_IT+0x1a>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e127      	b.n	8004dd2 <HAL_RTC_SetAlarm_IT+0x26a>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2228      	movs	r2, #40	; 0x28
 8004b86:	2101      	movs	r1, #1
 8004b88:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2229      	movs	r2, #41	; 0x29
 8004b8e:	2102      	movs	r1, #2
 8004b90:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d136      	bne.n	8004c06 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	2240      	movs	r2, #64	; 0x40
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d102      	bne.n	8004baa <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f000 facc 	bl	800514c <RTC_ByteToBcd2>
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	785b      	ldrb	r3, [r3, #1]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f000 fac5 	bl	800514c <RTC_ByteToBcd2>
 8004bc2:	0003      	movs	r3, r0
 8004bc4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004bc6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	789b      	ldrb	r3, [r3, #2]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f000 fabd 	bl	800514c <RTC_ByteToBcd2>
 8004bd2:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004bd4:	0022      	movs	r2, r4
 8004bd6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	78db      	ldrb	r3, [r3, #3]
 8004bdc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004bde:	431a      	orrs	r2, r3
 8004be0:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2220      	movs	r2, #32
 8004be6:	5c9b      	ldrb	r3, [r3, r2]
 8004be8:	0018      	movs	r0, r3
 8004bea:	f000 faaf 	bl	800514c <RTC_ByteToBcd2>
 8004bee:	0003      	movs	r3, r0
 8004bf0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004bf2:	0022      	movs	r2, r4
 8004bf4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004bfa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c00:	4313      	orrs	r3, r2
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	e022      	b.n	8004c4c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	2240      	movs	r2, #64	; 0x40
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d102      	bne.n	8004c18 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2200      	movs	r2, #0
 8004c16:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	785b      	ldrb	r3, [r3, #1]
 8004c22:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c24:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004c2a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	78db      	ldrb	r3, [r3, #3]
 8004c30:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c32:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2120      	movs	r1, #32
 8004c38:	5c5b      	ldrb	r3, [r3, r1]
 8004c3a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004c3c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004c42:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	22ca      	movs	r2, #202	; 0xca
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2253      	movs	r2, #83	; 0x53
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d14c      	bne.n	8004d0e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4957      	ldr	r1, [pc, #348]	; (8004ddc <HAL_RTC_SetAlarm_IT+0x274>)
 8004c80:	400a      	ands	r2, r1
 8004c82:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2101      	movs	r1, #1
 8004c90:	430a      	orrs	r2, r1
 8004c92:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8004c94:	f7fc ffae 	bl	8001bf4 <HAL_GetTick>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004c9c:	e016      	b.n	8004ccc <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c9e:	f7fc ffa9 	bl	8001bf4 <HAL_GetTick>
 8004ca2:	0002      	movs	r2, r0
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1ad2      	subs	r2, r2, r3
 8004ca8:	23fa      	movs	r3, #250	; 0xfa
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d90d      	bls.n	8004ccc <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	22ff      	movs	r2, #255	; 0xff
 8004cb6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2229      	movs	r2, #41	; 0x29
 8004cbc:	2103      	movs	r1, #3
 8004cbe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2228      	movs	r2, #40	; 0x28
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e082      	b.n	8004dd2 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d0e2      	beq.n	8004c9e <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699a      	ldr	r2, [r3, #24]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2180      	movs	r1, #128	; 0x80
 8004cf4:	0049      	lsls	r1, r1, #1
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699a      	ldr	r2, [r3, #24]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2180      	movs	r1, #128	; 0x80
 8004d06:	0149      	lsls	r1, r1, #5
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	619a      	str	r2, [r3, #24]
 8004d0c:	e04b      	b.n	8004da6 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699a      	ldr	r2, [r3, #24]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4931      	ldr	r1, [pc, #196]	; (8004de0 <HAL_RTC_SetAlarm_IT+0x278>)
 8004d1a:	400a      	ands	r2, r1
 8004d1c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2102      	movs	r1, #2
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8004d2e:	f7fc ff61 	bl	8001bf4 <HAL_GetTick>
 8004d32:	0003      	movs	r3, r0
 8004d34:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004d36:	e016      	b.n	8004d66 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d38:	f7fc ff5c 	bl	8001bf4 <HAL_GetTick>
 8004d3c:	0002      	movs	r2, r0
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	1ad2      	subs	r2, r2, r3
 8004d42:	23fa      	movs	r3, #250	; 0xfa
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d90d      	bls.n	8004d66 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	22ff      	movs	r2, #255	; 0xff
 8004d50:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2229      	movs	r2, #41	; 0x29
 8004d56:	2103      	movs	r1, #3
 8004d58:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2228      	movs	r2, #40	; 0x28
 8004d5e:	2100      	movs	r1, #0
 8004d60:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e035      	b.n	8004dd2 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d0e2      	beq.n	8004d38 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699a      	ldr	r2, [r3, #24]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2180      	movs	r1, #128	; 0x80
 8004d8e:	0089      	lsls	r1, r1, #2
 8004d90:	430a      	orrs	r2, r1
 8004d92:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2180      	movs	r1, #128	; 0x80
 8004da0:	0189      	lsls	r1, r1, #6
 8004da2:	430a      	orrs	r2, r1
 8004da4:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004da6:	4a0f      	ldr	r2, [pc, #60]	; (8004de4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	58d3      	ldr	r3, [r2, r3]
 8004dac:	490d      	ldr	r1, [pc, #52]	; (8004de4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004dae:	2280      	movs	r2, #128	; 0x80
 8004db0:	0312      	lsls	r2, r2, #12
 8004db2:	4313      	orrs	r3, r2
 8004db4:	2280      	movs	r2, #128	; 0x80
 8004db6:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	22ff      	movs	r2, #255	; 0xff
 8004dbe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2229      	movs	r2, #41	; 0x29
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2228      	movs	r2, #40	; 0x28
 8004dcc:	2100      	movs	r1, #0
 8004dce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b009      	add	sp, #36	; 0x24
 8004dd8:	bd90      	pop	{r4, r7, pc}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	fffffeff 	.word	0xfffffeff
 8004de0:	fffffdff 	.word	0xfffffdff
 8004de4:	40021800 	.word	0x40021800

08004de8 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	2380      	movs	r3, #128	; 0x80
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d144      	bne.n	8004e8a <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2280      	movs	r2, #128	; 0x80
 8004e04:	0052      	lsls	r2, r2, #1
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e16:	045b      	lsls	r3, r3, #17
 8004e18:	0c5b      	lsrs	r3, r3, #17
 8004e1a:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	0c1b      	lsrs	r3, r3, #16
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	223f      	movs	r2, #63	; 0x3f
 8004e24:	4013      	ands	r3, r2
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	0a1b      	lsrs	r3, r3, #8
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	227f      	movs	r2, #127	; 0x7f
 8004e34:	4013      	ands	r3, r2
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	227f      	movs	r2, #127	; 0x7f
 8004e42:	4013      	ands	r3, r2
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	0d9b      	lsrs	r3, r3, #22
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2201      	movs	r2, #1
 8004e52:	4013      	ands	r3, r2
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	0e1b      	lsrs	r3, r3, #24
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	223f      	movs	r2, #63	; 0x3f
 8004e68:	4013      	ands	r3, r2
 8004e6a:	b2d9      	uxtb	r1, r3
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	2380      	movs	r3, #128	; 0x80
 8004e76:	05db      	lsls	r3, r3, #23
 8004e78:	401a      	ands	r2, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	4a3b      	ldr	r2, [pc, #236]	; (8004f70 <HAL_RTC_GetAlarm+0x188>)
 8004e82:	401a      	ands	r2, r3
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	615a      	str	r2, [r3, #20]
 8004e88:	e043      	b.n	8004f12 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2280      	movs	r2, #128	; 0x80
 8004e8e:	0092      	lsls	r2, r2, #2
 8004e90:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e98:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea0:	045b      	lsls	r3, r3, #17
 8004ea2:	0c5b      	lsrs	r3, r3, #17
 8004ea4:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	0c1b      	lsrs	r3, r3, #16
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	223f      	movs	r2, #63	; 0x3f
 8004eae:	4013      	ands	r3, r2
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	0a1b      	lsrs	r3, r3, #8
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	227f      	movs	r2, #127	; 0x7f
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	227f      	movs	r2, #127	; 0x7f
 8004ecc:	4013      	ands	r3, r2
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	0d9b      	lsrs	r3, r3, #22
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2201      	movs	r2, #1
 8004edc:	4013      	ands	r3, r2
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	0e1b      	lsrs	r3, r3, #24
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	223f      	movs	r2, #63	; 0x3f
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	b2d9      	uxtb	r1, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	2380      	movs	r3, #128	; 0x80
 8004f00:	05db      	lsls	r3, r3, #23
 8004f02:	401a      	ands	r2, r3
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	4a19      	ldr	r2, [pc, #100]	; (8004f70 <HAL_RTC_GetAlarm+0x188>)
 8004f0c:	401a      	ands	r2, r3
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d125      	bne.n	8004f64 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f000 f93d 	bl	800519c <RTC_Bcd2ToByte>
 8004f22:	0003      	movs	r3, r0
 8004f24:	001a      	movs	r2, r3
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	785b      	ldrb	r3, [r3, #1]
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f000 f934 	bl	800519c <RTC_Bcd2ToByte>
 8004f34:	0003      	movs	r3, r0
 8004f36:	001a      	movs	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	789b      	ldrb	r3, [r3, #2]
 8004f40:	0018      	movs	r0, r3
 8004f42:	f000 f92b 	bl	800519c <RTC_Bcd2ToByte>
 8004f46:	0003      	movs	r3, r0
 8004f48:	001a      	movs	r2, r3
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2220      	movs	r2, #32
 8004f52:	5c9b      	ldrb	r3, [r3, r2]
 8004f54:	0018      	movs	r0, r3
 8004f56:	f000 f921 	bl	800519c <RTC_Bcd2ToByte>
 8004f5a:	0003      	movs	r3, r0
 8004f5c:	0019      	movs	r1, r3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2220      	movs	r2, #32
 8004f62:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	0018      	movs	r0, r3
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	b006      	add	sp, #24
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	80808080 	.word	0x80808080

08004f74 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699a      	ldr	r2, [r3, #24]
 8004f82:	2380      	movs	r3, #128	; 0x80
 8004f84:	015b      	lsls	r3, r3, #5
 8004f86:	4013      	ands	r3, r2
 8004f88:	d011      	beq.n	8004fae <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f90:	2201      	movs	r2, #1
 8004f92:	4013      	ands	r3, r2
 8004f94:	d00b      	beq.n	8004fae <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f7fb ff3f 	bl	8000e2c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699a      	ldr	r2, [r3, #24]
 8004fb4:	2380      	movs	r3, #128	; 0x80
 8004fb6:	019b      	lsls	r3, r3, #6
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d011      	beq.n	8004fe0 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d00b      	beq.n	8004fe0 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2102      	movs	r1, #2
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	0018      	movs	r0, r3
 8004fdc:	f000 f8fb 	bl	80051d6 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2229      	movs	r2, #41	; 0x29
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	5499      	strb	r1, [r3, r2]
}
 8004fe8:	46c0      	nop			; (mov r8, r8)
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b002      	add	sp, #8
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	21a0      	movs	r1, #160	; 0xa0
 8005004:	438a      	bics	r2, r1
 8005006:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005008:	f7fc fdf4 	bl	8001bf4 <HAL_GetTick>
 800500c:	0003      	movs	r3, r0
 800500e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005010:	e00a      	b.n	8005028 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005012:	f7fc fdef 	bl	8001bf4 <HAL_GetTick>
 8005016:	0002      	movs	r2, r0
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	1ad2      	subs	r2, r2, r3
 800501c:	23fa      	movs	r3, #250	; 0xfa
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	429a      	cmp	r2, r3
 8005022:	d901      	bls.n	8005028 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e006      	b.n	8005036 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	4013      	ands	r3, r2
 8005032:	d0ee      	beq.n	8005012 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	0018      	movs	r0, r3
 8005038:	46bd      	mov	sp, r7
 800503a:	b004      	add	sp, #16
 800503c:	bd80      	pop	{r7, pc}

0800503e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005046:	230f      	movs	r3, #15
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	2240      	movs	r2, #64	; 0x40
 8005056:	4013      	ands	r3, r2
 8005058:	d12c      	bne.n	80050b4 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2180      	movs	r1, #128	; 0x80
 8005066:	430a      	orrs	r2, r1
 8005068:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800506a:	f7fc fdc3 	bl	8001bf4 <HAL_GetTick>
 800506e:	0003      	movs	r3, r0
 8005070:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005072:	e014      	b.n	800509e <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005074:	f7fc fdbe 	bl	8001bf4 <HAL_GetTick>
 8005078:	0002      	movs	r2, r0
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	1ad2      	subs	r2, r2, r3
 800507e:	200f      	movs	r0, #15
 8005080:	183b      	adds	r3, r7, r0
 8005082:	1839      	adds	r1, r7, r0
 8005084:	7809      	ldrb	r1, [r1, #0]
 8005086:	7019      	strb	r1, [r3, #0]
 8005088:	23fa      	movs	r3, #250	; 0xfa
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	429a      	cmp	r2, r3
 800508e:	d906      	bls.n	800509e <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005090:	183b      	adds	r3, r7, r0
 8005092:	2203      	movs	r2, #3
 8005094:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2229      	movs	r2, #41	; 0x29
 800509a:	2103      	movs	r1, #3
 800509c:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	2240      	movs	r2, #64	; 0x40
 80050a6:	4013      	ands	r3, r2
 80050a8:	d104      	bne.n	80050b4 <RTC_EnterInitMode+0x76>
 80050aa:	230f      	movs	r3, #15
 80050ac:	18fb      	adds	r3, r7, r3
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d1df      	bne.n	8005074 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80050b4:	230f      	movs	r3, #15
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	781b      	ldrb	r3, [r3, #0]
}
 80050ba:	0018      	movs	r0, r3
 80050bc:	46bd      	mov	sp, r7
 80050be:	b004      	add	sp, #16
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80050c4:	b590      	push	{r4, r7, lr}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050cc:	240f      	movs	r4, #15
 80050ce:	193b      	adds	r3, r7, r4
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80050d4:	4b1c      	ldr	r3, [pc, #112]	; (8005148 <RTC_ExitInitMode+0x84>)
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <RTC_ExitInitMode+0x84>)
 80050da:	2180      	movs	r1, #128	; 0x80
 80050dc:	438a      	bics	r2, r1
 80050de:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80050e0:	4b19      	ldr	r3, [pc, #100]	; (8005148 <RTC_ExitInitMode+0x84>)
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	2220      	movs	r2, #32
 80050e6:	4013      	ands	r3, r2
 80050e8:	d10d      	bne.n	8005106 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	0018      	movs	r0, r3
 80050ee:	f7ff ff7f 	bl	8004ff0 <HAL_RTC_WaitForSynchro>
 80050f2:	1e03      	subs	r3, r0, #0
 80050f4:	d021      	beq.n	800513a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2229      	movs	r2, #41	; 0x29
 80050fa:	2103      	movs	r1, #3
 80050fc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80050fe:	193b      	adds	r3, r7, r4
 8005100:	2203      	movs	r2, #3
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	e019      	b.n	800513a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005106:	4b10      	ldr	r3, [pc, #64]	; (8005148 <RTC_ExitInitMode+0x84>)
 8005108:	699a      	ldr	r2, [r3, #24]
 800510a:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <RTC_ExitInitMode+0x84>)
 800510c:	2120      	movs	r1, #32
 800510e:	438a      	bics	r2, r1
 8005110:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	0018      	movs	r0, r3
 8005116:	f7ff ff6b 	bl	8004ff0 <HAL_RTC_WaitForSynchro>
 800511a:	1e03      	subs	r3, r0, #0
 800511c:	d007      	beq.n	800512e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2229      	movs	r2, #41	; 0x29
 8005122:	2103      	movs	r1, #3
 8005124:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005126:	230f      	movs	r3, #15
 8005128:	18fb      	adds	r3, r7, r3
 800512a:	2203      	movs	r2, #3
 800512c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800512e:	4b06      	ldr	r3, [pc, #24]	; (8005148 <RTC_ExitInitMode+0x84>)
 8005130:	699a      	ldr	r2, [r3, #24]
 8005132:	4b05      	ldr	r3, [pc, #20]	; (8005148 <RTC_ExitInitMode+0x84>)
 8005134:	2120      	movs	r1, #32
 8005136:	430a      	orrs	r2, r1
 8005138:	619a      	str	r2, [r3, #24]
  }

  return status;
 800513a:	230f      	movs	r3, #15
 800513c:	18fb      	adds	r3, r7, r3
 800513e:	781b      	ldrb	r3, [r3, #0]
}
 8005140:	0018      	movs	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	b005      	add	sp, #20
 8005146:	bd90      	pop	{r4, r7, pc}
 8005148:	40002800 	.word	0x40002800

0800514c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	0002      	movs	r2, r0
 8005154:	1dfb      	adds	r3, r7, #7
 8005156:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800515c:	230b      	movs	r3, #11
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	1dfa      	adds	r2, r7, #7
 8005162:	7812      	ldrb	r2, [r2, #0]
 8005164:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005166:	e008      	b.n	800517a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3301      	adds	r3, #1
 800516c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800516e:	220b      	movs	r2, #11
 8005170:	18bb      	adds	r3, r7, r2
 8005172:	18ba      	adds	r2, r7, r2
 8005174:	7812      	ldrb	r2, [r2, #0]
 8005176:	3a0a      	subs	r2, #10
 8005178:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800517a:	210b      	movs	r1, #11
 800517c:	187b      	adds	r3, r7, r1
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b09      	cmp	r3, #9
 8005182:	d8f1      	bhi.n	8005168 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	b2db      	uxtb	r3, r3
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	b2da      	uxtb	r2, r3
 800518c:	187b      	adds	r3, r7, r1
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	4313      	orrs	r3, r2
 8005192:	b2db      	uxtb	r3, r3
}
 8005194:	0018      	movs	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	b004      	add	sp, #16
 800519a:	bd80      	pop	{r7, pc}

0800519c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	0002      	movs	r2, r0
 80051a4:	1dfb      	adds	r3, r7, #7
 80051a6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80051a8:	1dfb      	adds	r3, r7, #7
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	001a      	movs	r2, r3
 80051b2:	0013      	movs	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	189b      	adds	r3, r3, r2
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	1dfb      	adds	r3, r7, #7
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	210f      	movs	r1, #15
 80051c6:	400b      	ands	r3, r1
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	18d3      	adds	r3, r2, r3
 80051cc:	b2db      	uxtb	r3, r3
}
 80051ce:	0018      	movs	r0, r3
 80051d0:	46bd      	mov	sp, r7
 80051d2:	b004      	add	sp, #16
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	46bd      	mov	sp, r7
 80051e2:	b002      	add	sp, #8
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e04a      	b.n	800528e <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	223d      	movs	r2, #61	; 0x3d
 80051fc:	5c9b      	ldrb	r3, [r3, r2]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d107      	bne.n	8005214 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	223c      	movs	r2, #60	; 0x3c
 8005208:	2100      	movs	r1, #0
 800520a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	0018      	movs	r0, r3
 8005210:	f7fc fad8 	bl	80017c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	223d      	movs	r2, #61	; 0x3d
 8005218:	2102      	movs	r1, #2
 800521a:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3304      	adds	r3, #4
 8005224:	0019      	movs	r1, r3
 8005226:	0010      	movs	r0, r2
 8005228:	f000 f8a8 	bl	800537c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2248      	movs	r2, #72	; 0x48
 8005230:	2101      	movs	r1, #1
 8005232:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	223e      	movs	r2, #62	; 0x3e
 8005238:	2101      	movs	r1, #1
 800523a:	5499      	strb	r1, [r3, r2]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	223f      	movs	r2, #63	; 0x3f
 8005240:	2101      	movs	r1, #1
 8005242:	5499      	strb	r1, [r3, r2]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2240      	movs	r2, #64	; 0x40
 8005248:	2101      	movs	r1, #1
 800524a:	5499      	strb	r1, [r3, r2]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2241      	movs	r2, #65	; 0x41
 8005250:	2101      	movs	r1, #1
 8005252:	5499      	strb	r1, [r3, r2]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2242      	movs	r2, #66	; 0x42
 8005258:	2101      	movs	r1, #1
 800525a:	5499      	strb	r1, [r3, r2]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2243      	movs	r2, #67	; 0x43
 8005260:	2101      	movs	r1, #1
 8005262:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2244      	movs	r2, #68	; 0x44
 8005268:	2101      	movs	r1, #1
 800526a:	5499      	strb	r1, [r3, r2]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2245      	movs	r2, #69	; 0x45
 8005270:	2101      	movs	r1, #1
 8005272:	5499      	strb	r1, [r3, r2]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2246      	movs	r2, #70	; 0x46
 8005278:	2101      	movs	r1, #1
 800527a:	5499      	strb	r1, [r3, r2]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2247      	movs	r2, #71	; 0x47
 8005280:	2101      	movs	r1, #1
 8005282:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	223d      	movs	r2, #61	; 0x3d
 8005288:	2101      	movs	r1, #1
 800528a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	0018      	movs	r0, r3
 8005290:	46bd      	mov	sp, r7
 8005292:	b002      	add	sp, #8
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	223d      	movs	r2, #61	; 0x3d
 80052a4:	5c9b      	ldrb	r3, [r3, r2]
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d001      	beq.n	80052b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e035      	b.n	800531c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	223d      	movs	r2, #61	; 0x3d
 80052b4:	2102      	movs	r1, #2
 80052b6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a19      	ldr	r2, [pc, #100]	; (8005324 <HAL_TIM_Base_Start+0x8c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00a      	beq.n	80052d8 <HAL_TIM_Base_Start+0x40>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	2380      	movs	r3, #128	; 0x80
 80052c8:	05db      	lsls	r3, r3, #23
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d004      	beq.n	80052d8 <HAL_TIM_Base_Start+0x40>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a15      	ldr	r2, [pc, #84]	; (8005328 <HAL_TIM_Base_Start+0x90>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d116      	bne.n	8005306 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	4a13      	ldr	r2, [pc, #76]	; (800532c <HAL_TIM_Base_Start+0x94>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b06      	cmp	r3, #6
 80052e8:	d016      	beq.n	8005318 <HAL_TIM_Base_Start+0x80>
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	2380      	movs	r3, #128	; 0x80
 80052ee:	025b      	lsls	r3, r3, #9
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d011      	beq.n	8005318 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2101      	movs	r1, #1
 8005300:	430a      	orrs	r2, r1
 8005302:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005304:	e008      	b.n	8005318 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2101      	movs	r1, #1
 8005312:	430a      	orrs	r2, r1
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	e000      	b.n	800531a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005318:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	0018      	movs	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	b004      	add	sp, #16
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40012c00 	.word	0x40012c00
 8005328:	40000400 	.word	0x40000400
 800532c:	00010007 	.word	0x00010007

08005330 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	4a0d      	ldr	r2, [pc, #52]	; (8005374 <HAL_TIM_Base_Stop+0x44>)
 8005340:	4013      	ands	r3, r2
 8005342:	d10d      	bne.n	8005360 <HAL_TIM_Base_Stop+0x30>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	4a0b      	ldr	r2, [pc, #44]	; (8005378 <HAL_TIM_Base_Stop+0x48>)
 800534c:	4013      	ands	r3, r2
 800534e:	d107      	bne.n	8005360 <HAL_TIM_Base_Stop+0x30>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2101      	movs	r1, #1
 800535c:	438a      	bics	r2, r1
 800535e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	223d      	movs	r2, #61	; 0x3d
 8005364:	2101      	movs	r1, #1
 8005366:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	0018      	movs	r0, r3
 800536c:	46bd      	mov	sp, r7
 800536e:	b002      	add	sp, #8
 8005370:	bd80      	pop	{r7, pc}
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	00001111 	.word	0x00001111
 8005378:	00000444 	.word	0x00000444

0800537c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a30      	ldr	r2, [pc, #192]	; (8005450 <TIM_Base_SetConfig+0xd4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d008      	beq.n	80053a6 <TIM_Base_SetConfig+0x2a>
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	2380      	movs	r3, #128	; 0x80
 8005398:	05db      	lsls	r3, r3, #23
 800539a:	429a      	cmp	r2, r3
 800539c:	d003      	beq.n	80053a6 <TIM_Base_SetConfig+0x2a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2c      	ldr	r2, [pc, #176]	; (8005454 <TIM_Base_SetConfig+0xd8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d108      	bne.n	80053b8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2270      	movs	r2, #112	; 0x70
 80053aa:	4393      	bics	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a25      	ldr	r2, [pc, #148]	; (8005450 <TIM_Base_SetConfig+0xd4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d014      	beq.n	80053ea <TIM_Base_SetConfig+0x6e>
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	2380      	movs	r3, #128	; 0x80
 80053c4:	05db      	lsls	r3, r3, #23
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d00f      	beq.n	80053ea <TIM_Base_SetConfig+0x6e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a21      	ldr	r2, [pc, #132]	; (8005454 <TIM_Base_SetConfig+0xd8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00b      	beq.n	80053ea <TIM_Base_SetConfig+0x6e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a20      	ldr	r2, [pc, #128]	; (8005458 <TIM_Base_SetConfig+0xdc>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d007      	beq.n	80053ea <TIM_Base_SetConfig+0x6e>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a1f      	ldr	r2, [pc, #124]	; (800545c <TIM_Base_SetConfig+0xe0>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d003      	beq.n	80053ea <TIM_Base_SetConfig+0x6e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a1e      	ldr	r2, [pc, #120]	; (8005460 <TIM_Base_SetConfig+0xe4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d108      	bne.n	80053fc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4a1d      	ldr	r2, [pc, #116]	; (8005464 <TIM_Base_SetConfig+0xe8>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2280      	movs	r2, #128	; 0x80
 8005400:	4393      	bics	r3, r2
 8005402:	001a      	movs	r2, r3
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a0a      	ldr	r2, [pc, #40]	; (8005450 <TIM_Base_SetConfig+0xd4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d007      	beq.n	800543a <TIM_Base_SetConfig+0xbe>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a0b      	ldr	r2, [pc, #44]	; (800545c <TIM_Base_SetConfig+0xe0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d003      	beq.n	800543a <TIM_Base_SetConfig+0xbe>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a0a      	ldr	r2, [pc, #40]	; (8005460 <TIM_Base_SetConfig+0xe4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d103      	bne.n	8005442 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	615a      	str	r2, [r3, #20]
}
 8005448:	46c0      	nop			; (mov r8, r8)
 800544a:	46bd      	mov	sp, r7
 800544c:	b004      	add	sp, #16
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40012c00 	.word	0x40012c00
 8005454:	40000400 	.word	0x40000400
 8005458:	40002000 	.word	0x40002000
 800545c:	40014400 	.word	0x40014400
 8005460:	40014800 	.word	0x40014800
 8005464:	fffffcff 	.word	0xfffffcff

08005468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e046      	b.n	8005508 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2288      	movs	r2, #136	; 0x88
 800547e:	589b      	ldr	r3, [r3, r2]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d107      	bne.n	8005494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2284      	movs	r2, #132	; 0x84
 8005488:	2100      	movs	r1, #0
 800548a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	0018      	movs	r0, r3
 8005490:	f7fc f9b8 	bl	8001804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2288      	movs	r2, #136	; 0x88
 8005498:	2124      	movs	r1, #36	; 0x24
 800549a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2101      	movs	r1, #1
 80054a8:	438a      	bics	r2, r1
 80054aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	0018      	movs	r0, r3
 80054b0:	f000 f8cc 	bl	800564c <UART_SetConfig>
 80054b4:	0003      	movs	r3, r0
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d101      	bne.n	80054be <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e024      	b.n	8005508 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	0018      	movs	r0, r3
 80054ca:	f000 fb37 	bl	8005b3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	490d      	ldr	r1, [pc, #52]	; (8005510 <HAL_UART_Init+0xa8>)
 80054da:	400a      	ands	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	212a      	movs	r1, #42	; 0x2a
 80054ea:	438a      	bics	r2, r1
 80054ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2101      	movs	r1, #1
 80054fa:	430a      	orrs	r2, r1
 80054fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	0018      	movs	r0, r3
 8005502:	f000 fbcf 	bl	8005ca4 <UART_CheckIdleState>
 8005506:	0003      	movs	r3, r0
}
 8005508:	0018      	movs	r0, r3
 800550a:	46bd      	mov	sp, r7
 800550c:	b002      	add	sp, #8
 800550e:	bd80      	pop	{r7, pc}
 8005510:	ffffb7ff 	.word	0xffffb7ff

08005514 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08a      	sub	sp, #40	; 0x28
 8005518:	af02      	add	r7, sp, #8
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	603b      	str	r3, [r7, #0]
 8005520:	1dbb      	adds	r3, r7, #6
 8005522:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2288      	movs	r2, #136	; 0x88
 8005528:	589b      	ldr	r3, [r3, r2]
 800552a:	2b20      	cmp	r3, #32
 800552c:	d000      	beq.n	8005530 <HAL_UART_Transmit+0x1c>
 800552e:	e088      	b.n	8005642 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_UART_Transmit+0x2a>
 8005536:	1dbb      	adds	r3, r7, #6
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e080      	b.n	8005644 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	2380      	movs	r3, #128	; 0x80
 8005548:	015b      	lsls	r3, r3, #5
 800554a:	429a      	cmp	r2, r3
 800554c:	d109      	bne.n	8005562 <HAL_UART_Transmit+0x4e>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d105      	bne.n	8005562 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2201      	movs	r2, #1
 800555a:	4013      	ands	r3, r2
 800555c:	d001      	beq.n	8005562 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e070      	b.n	8005644 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2290      	movs	r2, #144	; 0x90
 8005566:	2100      	movs	r1, #0
 8005568:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2288      	movs	r2, #136	; 0x88
 800556e:	2121      	movs	r1, #33	; 0x21
 8005570:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005572:	f7fc fb3f 	bl	8001bf4 <HAL_GetTick>
 8005576:	0003      	movs	r3, r0
 8005578:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	1dba      	adds	r2, r7, #6
 800557e:	2154      	movs	r1, #84	; 0x54
 8005580:	8812      	ldrh	r2, [r2, #0]
 8005582:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	1dba      	adds	r2, r7, #6
 8005588:	2156      	movs	r1, #86	; 0x56
 800558a:	8812      	ldrh	r2, [r2, #0]
 800558c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689a      	ldr	r2, [r3, #8]
 8005592:	2380      	movs	r3, #128	; 0x80
 8005594:	015b      	lsls	r3, r3, #5
 8005596:	429a      	cmp	r2, r3
 8005598:	d108      	bne.n	80055ac <HAL_UART_Transmit+0x98>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d104      	bne.n	80055ac <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	e003      	b.n	80055b4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055b4:	e02c      	b.n	8005610 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	0013      	movs	r3, r2
 80055c0:	2200      	movs	r2, #0
 80055c2:	2180      	movs	r1, #128	; 0x80
 80055c4:	f000 fbbc 	bl	8005d40 <UART_WaitOnFlagUntilTimeout>
 80055c8:	1e03      	subs	r3, r0, #0
 80055ca:	d001      	beq.n	80055d0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e039      	b.n	8005644 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10b      	bne.n	80055ee <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	001a      	movs	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	05d2      	lsls	r2, r2, #23
 80055e2:	0dd2      	lsrs	r2, r2, #23
 80055e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	3302      	adds	r3, #2
 80055ea:	61bb      	str	r3, [r7, #24]
 80055ec:	e007      	b.n	80055fe <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	781a      	ldrb	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	3301      	adds	r3, #1
 80055fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2256      	movs	r2, #86	; 0x56
 8005602:	5a9b      	ldrh	r3, [r3, r2]
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b299      	uxth	r1, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2256      	movs	r2, #86	; 0x56
 800560e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2256      	movs	r2, #86	; 0x56
 8005614:	5a9b      	ldrh	r3, [r3, r2]
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1cc      	bne.n	80055b6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	0013      	movs	r3, r2
 8005626:	2200      	movs	r2, #0
 8005628:	2140      	movs	r1, #64	; 0x40
 800562a:	f000 fb89 	bl	8005d40 <UART_WaitOnFlagUntilTimeout>
 800562e:	1e03      	subs	r3, r0, #0
 8005630:	d001      	beq.n	8005636 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e006      	b.n	8005644 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2288      	movs	r2, #136	; 0x88
 800563a:	2120      	movs	r1, #32
 800563c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	e000      	b.n	8005644 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8005642:	2302      	movs	r3, #2
  }
}
 8005644:	0018      	movs	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	b008      	add	sp, #32
 800564a:	bd80      	pop	{r7, pc}

0800564c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800564c:	b5b0      	push	{r4, r5, r7, lr}
 800564e:	b090      	sub	sp, #64	; 0x40
 8005650:	af00      	add	r7, sp, #0
 8005652:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005654:	231a      	movs	r3, #26
 8005656:	2220      	movs	r2, #32
 8005658:	189b      	adds	r3, r3, r2
 800565a:	19db      	adds	r3, r3, r7
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	431a      	orrs	r2, r3
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	431a      	orrs	r2, r3
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	4313      	orrs	r3, r2
 8005676:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4ac4      	ldr	r2, [pc, #784]	; (8005990 <UART_SetConfig+0x344>)
 8005680:	4013      	ands	r3, r2
 8005682:	0019      	movs	r1, r3
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568a:	430b      	orrs	r3, r1
 800568c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4abf      	ldr	r2, [pc, #764]	; (8005994 <UART_SetConfig+0x348>)
 8005696:	4013      	ands	r3, r2
 8005698:	0018      	movs	r0, r3
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	68d9      	ldr	r1, [r3, #12]
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	0003      	movs	r3, r0
 80056a4:	430b      	orrs	r3, r1
 80056a6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4ab9      	ldr	r2, [pc, #740]	; (8005998 <UART_SetConfig+0x34c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d004      	beq.n	80056c2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056be:	4313      	orrs	r3, r2
 80056c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	4ab4      	ldr	r2, [pc, #720]	; (800599c <UART_SetConfig+0x350>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	0019      	movs	r1, r3
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d4:	430b      	orrs	r3, r1
 80056d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056de:	220f      	movs	r2, #15
 80056e0:	4393      	bics	r3, r2
 80056e2:	0018      	movs	r0, r3
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	0003      	movs	r3, r0
 80056ee:	430b      	orrs	r3, r1
 80056f0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4aaa      	ldr	r2, [pc, #680]	; (80059a0 <UART_SetConfig+0x354>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d131      	bne.n	8005760 <UART_SetConfig+0x114>
 80056fc:	4ba9      	ldr	r3, [pc, #676]	; (80059a4 <UART_SetConfig+0x358>)
 80056fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005700:	2203      	movs	r2, #3
 8005702:	4013      	ands	r3, r2
 8005704:	2b03      	cmp	r3, #3
 8005706:	d01d      	beq.n	8005744 <UART_SetConfig+0xf8>
 8005708:	d823      	bhi.n	8005752 <UART_SetConfig+0x106>
 800570a:	2b02      	cmp	r3, #2
 800570c:	d00c      	beq.n	8005728 <UART_SetConfig+0xdc>
 800570e:	d820      	bhi.n	8005752 <UART_SetConfig+0x106>
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <UART_SetConfig+0xce>
 8005714:	2b01      	cmp	r3, #1
 8005716:	d00e      	beq.n	8005736 <UART_SetConfig+0xea>
 8005718:	e01b      	b.n	8005752 <UART_SetConfig+0x106>
 800571a:	231b      	movs	r3, #27
 800571c:	2220      	movs	r2, #32
 800571e:	189b      	adds	r3, r3, r2
 8005720:	19db      	adds	r3, r3, r7
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	e071      	b.n	800580c <UART_SetConfig+0x1c0>
 8005728:	231b      	movs	r3, #27
 800572a:	2220      	movs	r2, #32
 800572c:	189b      	adds	r3, r3, r2
 800572e:	19db      	adds	r3, r3, r7
 8005730:	2202      	movs	r2, #2
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	e06a      	b.n	800580c <UART_SetConfig+0x1c0>
 8005736:	231b      	movs	r3, #27
 8005738:	2220      	movs	r2, #32
 800573a:	189b      	adds	r3, r3, r2
 800573c:	19db      	adds	r3, r3, r7
 800573e:	2204      	movs	r2, #4
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	e063      	b.n	800580c <UART_SetConfig+0x1c0>
 8005744:	231b      	movs	r3, #27
 8005746:	2220      	movs	r2, #32
 8005748:	189b      	adds	r3, r3, r2
 800574a:	19db      	adds	r3, r3, r7
 800574c:	2208      	movs	r2, #8
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	e05c      	b.n	800580c <UART_SetConfig+0x1c0>
 8005752:	231b      	movs	r3, #27
 8005754:	2220      	movs	r2, #32
 8005756:	189b      	adds	r3, r3, r2
 8005758:	19db      	adds	r3, r3, r7
 800575a:	2210      	movs	r2, #16
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	e055      	b.n	800580c <UART_SetConfig+0x1c0>
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a90      	ldr	r2, [pc, #576]	; (80059a8 <UART_SetConfig+0x35c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d106      	bne.n	8005778 <UART_SetConfig+0x12c>
 800576a:	231b      	movs	r3, #27
 800576c:	2220      	movs	r2, #32
 800576e:	189b      	adds	r3, r3, r2
 8005770:	19db      	adds	r3, r3, r7
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]
 8005776:	e049      	b.n	800580c <UART_SetConfig+0x1c0>
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a86      	ldr	r2, [pc, #536]	; (8005998 <UART_SetConfig+0x34c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d13e      	bne.n	8005800 <UART_SetConfig+0x1b4>
 8005782:	4b88      	ldr	r3, [pc, #544]	; (80059a4 <UART_SetConfig+0x358>)
 8005784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005786:	23c0      	movs	r3, #192	; 0xc0
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	4013      	ands	r3, r2
 800578c:	22c0      	movs	r2, #192	; 0xc0
 800578e:	0112      	lsls	r2, r2, #4
 8005790:	4293      	cmp	r3, r2
 8005792:	d027      	beq.n	80057e4 <UART_SetConfig+0x198>
 8005794:	22c0      	movs	r2, #192	; 0xc0
 8005796:	0112      	lsls	r2, r2, #4
 8005798:	4293      	cmp	r3, r2
 800579a:	d82a      	bhi.n	80057f2 <UART_SetConfig+0x1a6>
 800579c:	2280      	movs	r2, #128	; 0x80
 800579e:	0112      	lsls	r2, r2, #4
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d011      	beq.n	80057c8 <UART_SetConfig+0x17c>
 80057a4:	2280      	movs	r2, #128	; 0x80
 80057a6:	0112      	lsls	r2, r2, #4
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d822      	bhi.n	80057f2 <UART_SetConfig+0x1a6>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d004      	beq.n	80057ba <UART_SetConfig+0x16e>
 80057b0:	2280      	movs	r2, #128	; 0x80
 80057b2:	00d2      	lsls	r2, r2, #3
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00e      	beq.n	80057d6 <UART_SetConfig+0x18a>
 80057b8:	e01b      	b.n	80057f2 <UART_SetConfig+0x1a6>
 80057ba:	231b      	movs	r3, #27
 80057bc:	2220      	movs	r2, #32
 80057be:	189b      	adds	r3, r3, r2
 80057c0:	19db      	adds	r3, r3, r7
 80057c2:	2200      	movs	r2, #0
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	e021      	b.n	800580c <UART_SetConfig+0x1c0>
 80057c8:	231b      	movs	r3, #27
 80057ca:	2220      	movs	r2, #32
 80057cc:	189b      	adds	r3, r3, r2
 80057ce:	19db      	adds	r3, r3, r7
 80057d0:	2202      	movs	r2, #2
 80057d2:	701a      	strb	r2, [r3, #0]
 80057d4:	e01a      	b.n	800580c <UART_SetConfig+0x1c0>
 80057d6:	231b      	movs	r3, #27
 80057d8:	2220      	movs	r2, #32
 80057da:	189b      	adds	r3, r3, r2
 80057dc:	19db      	adds	r3, r3, r7
 80057de:	2204      	movs	r2, #4
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	e013      	b.n	800580c <UART_SetConfig+0x1c0>
 80057e4:	231b      	movs	r3, #27
 80057e6:	2220      	movs	r2, #32
 80057e8:	189b      	adds	r3, r3, r2
 80057ea:	19db      	adds	r3, r3, r7
 80057ec:	2208      	movs	r2, #8
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	e00c      	b.n	800580c <UART_SetConfig+0x1c0>
 80057f2:	231b      	movs	r3, #27
 80057f4:	2220      	movs	r2, #32
 80057f6:	189b      	adds	r3, r3, r2
 80057f8:	19db      	adds	r3, r3, r7
 80057fa:	2210      	movs	r2, #16
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	e005      	b.n	800580c <UART_SetConfig+0x1c0>
 8005800:	231b      	movs	r3, #27
 8005802:	2220      	movs	r2, #32
 8005804:	189b      	adds	r3, r3, r2
 8005806:	19db      	adds	r3, r3, r7
 8005808:	2210      	movs	r2, #16
 800580a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a61      	ldr	r2, [pc, #388]	; (8005998 <UART_SetConfig+0x34c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d000      	beq.n	8005818 <UART_SetConfig+0x1cc>
 8005816:	e092      	b.n	800593e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005818:	231b      	movs	r3, #27
 800581a:	2220      	movs	r2, #32
 800581c:	189b      	adds	r3, r3, r2
 800581e:	19db      	adds	r3, r3, r7
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b08      	cmp	r3, #8
 8005824:	d015      	beq.n	8005852 <UART_SetConfig+0x206>
 8005826:	dc18      	bgt.n	800585a <UART_SetConfig+0x20e>
 8005828:	2b04      	cmp	r3, #4
 800582a:	d00d      	beq.n	8005848 <UART_SetConfig+0x1fc>
 800582c:	dc15      	bgt.n	800585a <UART_SetConfig+0x20e>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <UART_SetConfig+0x1ec>
 8005832:	2b02      	cmp	r3, #2
 8005834:	d005      	beq.n	8005842 <UART_SetConfig+0x1f6>
 8005836:	e010      	b.n	800585a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005838:	f7fe fc5a 	bl	80040f0 <HAL_RCC_GetPCLK1Freq>
 800583c:	0003      	movs	r3, r0
 800583e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005840:	e014      	b.n	800586c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005842:	4b5a      	ldr	r3, [pc, #360]	; (80059ac <UART_SetConfig+0x360>)
 8005844:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005846:	e011      	b.n	800586c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005848:	f7fe fbc6 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 800584c:	0003      	movs	r3, r0
 800584e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005850:	e00c      	b.n	800586c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005852:	2380      	movs	r3, #128	; 0x80
 8005854:	021b      	lsls	r3, r3, #8
 8005856:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005858:	e008      	b.n	800586c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800585e:	231a      	movs	r3, #26
 8005860:	2220      	movs	r2, #32
 8005862:	189b      	adds	r3, r3, r2
 8005864:	19db      	adds	r3, r3, r7
 8005866:	2201      	movs	r2, #1
 8005868:	701a      	strb	r2, [r3, #0]
        break;
 800586a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800586c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586e:	2b00      	cmp	r3, #0
 8005870:	d100      	bne.n	8005874 <UART_SetConfig+0x228>
 8005872:	e147      	b.n	8005b04 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005878:	4b4d      	ldr	r3, [pc, #308]	; (80059b0 <UART_SetConfig+0x364>)
 800587a:	0052      	lsls	r2, r2, #1
 800587c:	5ad3      	ldrh	r3, [r2, r3]
 800587e:	0019      	movs	r1, r3
 8005880:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005882:	f7fa fc49 	bl	8000118 <__udivsi3>
 8005886:	0003      	movs	r3, r0
 8005888:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	0013      	movs	r3, r2
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	189b      	adds	r3, r3, r2
 8005894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005896:	429a      	cmp	r2, r3
 8005898:	d305      	bcc.n	80058a6 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d906      	bls.n	80058b4 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80058a6:	231a      	movs	r3, #26
 80058a8:	2220      	movs	r2, #32
 80058aa:	189b      	adds	r3, r3, r2
 80058ac:	19db      	adds	r3, r3, r7
 80058ae:	2201      	movs	r2, #1
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	e127      	b.n	8005b04 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b6:	61bb      	str	r3, [r7, #24]
 80058b8:	2300      	movs	r3, #0
 80058ba:	61fb      	str	r3, [r7, #28]
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058c0:	4b3b      	ldr	r3, [pc, #236]	; (80059b0 <UART_SetConfig+0x364>)
 80058c2:	0052      	lsls	r2, r2, #1
 80058c4:	5ad3      	ldrh	r3, [r2, r3]
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	69b8      	ldr	r0, [r7, #24]
 80058d2:	69f9      	ldr	r1, [r7, #28]
 80058d4:	f7fa fcac 	bl	8000230 <__aeabi_uldivmod>
 80058d8:	0002      	movs	r2, r0
 80058da:	000b      	movs	r3, r1
 80058dc:	0e11      	lsrs	r1, r2, #24
 80058de:	021d      	lsls	r5, r3, #8
 80058e0:	430d      	orrs	r5, r1
 80058e2:	0214      	lsls	r4, r2, #8
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	085b      	lsrs	r3, r3, #1
 80058ea:	60bb      	str	r3, [r7, #8]
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	68b8      	ldr	r0, [r7, #8]
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	1900      	adds	r0, r0, r4
 80058f6:	4169      	adcs	r1, r5
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	603b      	str	r3, [r7, #0]
 80058fe:	2300      	movs	r3, #0
 8005900:	607b      	str	r3, [r7, #4]
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f7fa fc93 	bl	8000230 <__aeabi_uldivmod>
 800590a:	0002      	movs	r2, r0
 800590c:	000b      	movs	r3, r1
 800590e:	0013      	movs	r3, r2
 8005910:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005914:	23c0      	movs	r3, #192	; 0xc0
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	429a      	cmp	r2, r3
 800591a:	d309      	bcc.n	8005930 <UART_SetConfig+0x2e4>
 800591c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800591e:	2380      	movs	r3, #128	; 0x80
 8005920:	035b      	lsls	r3, r3, #13
 8005922:	429a      	cmp	r2, r3
 8005924:	d204      	bcs.n	8005930 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	e0e9      	b.n	8005b04 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8005930:	231a      	movs	r3, #26
 8005932:	2220      	movs	r2, #32
 8005934:	189b      	adds	r3, r3, r2
 8005936:	19db      	adds	r3, r3, r7
 8005938:	2201      	movs	r2, #1
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	e0e2      	b.n	8005b04 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	69da      	ldr	r2, [r3, #28]
 8005942:	2380      	movs	r3, #128	; 0x80
 8005944:	021b      	lsls	r3, r3, #8
 8005946:	429a      	cmp	r2, r3
 8005948:	d000      	beq.n	800594c <UART_SetConfig+0x300>
 800594a:	e083      	b.n	8005a54 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800594c:	231b      	movs	r3, #27
 800594e:	2220      	movs	r2, #32
 8005950:	189b      	adds	r3, r3, r2
 8005952:	19db      	adds	r3, r3, r7
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	2b08      	cmp	r3, #8
 8005958:	d015      	beq.n	8005986 <UART_SetConfig+0x33a>
 800595a:	dc2b      	bgt.n	80059b4 <UART_SetConfig+0x368>
 800595c:	2b04      	cmp	r3, #4
 800595e:	d00d      	beq.n	800597c <UART_SetConfig+0x330>
 8005960:	dc28      	bgt.n	80059b4 <UART_SetConfig+0x368>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <UART_SetConfig+0x320>
 8005966:	2b02      	cmp	r3, #2
 8005968:	d005      	beq.n	8005976 <UART_SetConfig+0x32a>
 800596a:	e023      	b.n	80059b4 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800596c:	f7fe fbc0 	bl	80040f0 <HAL_RCC_GetPCLK1Freq>
 8005970:	0003      	movs	r3, r0
 8005972:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005974:	e027      	b.n	80059c6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005976:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <UART_SetConfig+0x360>)
 8005978:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800597a:	e024      	b.n	80059c6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800597c:	f7fe fb2c 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8005980:	0003      	movs	r3, r0
 8005982:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005984:	e01f      	b.n	80059c6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005986:	2380      	movs	r3, #128	; 0x80
 8005988:	021b      	lsls	r3, r3, #8
 800598a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800598c:	e01b      	b.n	80059c6 <UART_SetConfig+0x37a>
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	cfff69f3 	.word	0xcfff69f3
 8005994:	ffffcfff 	.word	0xffffcfff
 8005998:	40008000 	.word	0x40008000
 800599c:	11fff4ff 	.word	0x11fff4ff
 80059a0:	40013800 	.word	0x40013800
 80059a4:	40021000 	.word	0x40021000
 80059a8:	40004400 	.word	0x40004400
 80059ac:	00f42400 	.word	0x00f42400
 80059b0:	08007498 	.word	0x08007498
      default:
        pclk = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80059b8:	231a      	movs	r3, #26
 80059ba:	2220      	movs	r2, #32
 80059bc:	189b      	adds	r3, r3, r2
 80059be:	19db      	adds	r3, r3, r7
 80059c0:	2201      	movs	r2, #1
 80059c2:	701a      	strb	r2, [r3, #0]
        break;
 80059c4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d100      	bne.n	80059ce <UART_SetConfig+0x382>
 80059cc:	e09a      	b.n	8005b04 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059d2:	4b58      	ldr	r3, [pc, #352]	; (8005b34 <UART_SetConfig+0x4e8>)
 80059d4:	0052      	lsls	r2, r2, #1
 80059d6:	5ad3      	ldrh	r3, [r2, r3]
 80059d8:	0019      	movs	r1, r3
 80059da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80059dc:	f7fa fb9c 	bl	8000118 <__udivsi3>
 80059e0:	0003      	movs	r3, r0
 80059e2:	005a      	lsls	r2, r3, #1
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	18d2      	adds	r2, r2, r3
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	0019      	movs	r1, r3
 80059f2:	0010      	movs	r0, r2
 80059f4:	f7fa fb90 	bl	8000118 <__udivsi3>
 80059f8:	0003      	movs	r3, r0
 80059fa:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	2b0f      	cmp	r3, #15
 8005a00:	d921      	bls.n	8005a46 <UART_SetConfig+0x3fa>
 8005a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a04:	2380      	movs	r3, #128	; 0x80
 8005a06:	025b      	lsls	r3, r3, #9
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d21c      	bcs.n	8005a46 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	200e      	movs	r0, #14
 8005a12:	2420      	movs	r4, #32
 8005a14:	1903      	adds	r3, r0, r4
 8005a16:	19db      	adds	r3, r3, r7
 8005a18:	210f      	movs	r1, #15
 8005a1a:	438a      	bics	r2, r1
 8005a1c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	085b      	lsrs	r3, r3, #1
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2207      	movs	r2, #7
 8005a26:	4013      	ands	r3, r2
 8005a28:	b299      	uxth	r1, r3
 8005a2a:	1903      	adds	r3, r0, r4
 8005a2c:	19db      	adds	r3, r3, r7
 8005a2e:	1902      	adds	r2, r0, r4
 8005a30:	19d2      	adds	r2, r2, r7
 8005a32:	8812      	ldrh	r2, [r2, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	1902      	adds	r2, r0, r4
 8005a3e:	19d2      	adds	r2, r2, r7
 8005a40:	8812      	ldrh	r2, [r2, #0]
 8005a42:	60da      	str	r2, [r3, #12]
 8005a44:	e05e      	b.n	8005b04 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005a46:	231a      	movs	r3, #26
 8005a48:	2220      	movs	r2, #32
 8005a4a:	189b      	adds	r3, r3, r2
 8005a4c:	19db      	adds	r3, r3, r7
 8005a4e:	2201      	movs	r2, #1
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	e057      	b.n	8005b04 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a54:	231b      	movs	r3, #27
 8005a56:	2220      	movs	r2, #32
 8005a58:	189b      	adds	r3, r3, r2
 8005a5a:	19db      	adds	r3, r3, r7
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	d015      	beq.n	8005a8e <UART_SetConfig+0x442>
 8005a62:	dc18      	bgt.n	8005a96 <UART_SetConfig+0x44a>
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d00d      	beq.n	8005a84 <UART_SetConfig+0x438>
 8005a68:	dc15      	bgt.n	8005a96 <UART_SetConfig+0x44a>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <UART_SetConfig+0x428>
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d005      	beq.n	8005a7e <UART_SetConfig+0x432>
 8005a72:	e010      	b.n	8005a96 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a74:	f7fe fb3c 	bl	80040f0 <HAL_RCC_GetPCLK1Freq>
 8005a78:	0003      	movs	r3, r0
 8005a7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a7c:	e014      	b.n	8005aa8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a7e:	4b2e      	ldr	r3, [pc, #184]	; (8005b38 <UART_SetConfig+0x4ec>)
 8005a80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a82:	e011      	b.n	8005aa8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a84:	f7fe faa8 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a8c:	e00c      	b.n	8005aa8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a8e:	2380      	movs	r3, #128	; 0x80
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a94:	e008      	b.n	8005aa8 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005a9a:	231a      	movs	r3, #26
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	189b      	adds	r3, r3, r2
 8005aa0:	19db      	adds	r3, r3, r7
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	701a      	strb	r2, [r3, #0]
        break;
 8005aa6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d02a      	beq.n	8005b04 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ab2:	4b20      	ldr	r3, [pc, #128]	; (8005b34 <UART_SetConfig+0x4e8>)
 8005ab4:	0052      	lsls	r2, r2, #1
 8005ab6:	5ad3      	ldrh	r3, [r2, r3]
 8005ab8:	0019      	movs	r1, r3
 8005aba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005abc:	f7fa fb2c 	bl	8000118 <__udivsi3>
 8005ac0:	0003      	movs	r3, r0
 8005ac2:	001a      	movs	r2, r3
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	085b      	lsrs	r3, r3, #1
 8005aca:	18d2      	adds	r2, r2, r3
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	0019      	movs	r1, r3
 8005ad2:	0010      	movs	r0, r2
 8005ad4:	f7fa fb20 	bl	8000118 <__udivsi3>
 8005ad8:	0003      	movs	r3, r0
 8005ada:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	2b0f      	cmp	r3, #15
 8005ae0:	d90a      	bls.n	8005af8 <UART_SetConfig+0x4ac>
 8005ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae4:	2380      	movs	r3, #128	; 0x80
 8005ae6:	025b      	lsls	r3, r3, #9
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d205      	bcs.n	8005af8 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60da      	str	r2, [r3, #12]
 8005af6:	e005      	b.n	8005b04 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005af8:	231a      	movs	r3, #26
 8005afa:	2220      	movs	r2, #32
 8005afc:	189b      	adds	r3, r3, r2
 8005afe:	19db      	adds	r3, r3, r7
 8005b00:	2201      	movs	r2, #1
 8005b02:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	226a      	movs	r2, #106	; 0x6a
 8005b08:	2101      	movs	r1, #1
 8005b0a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	2268      	movs	r2, #104	; 0x68
 8005b10:	2101      	movs	r1, #1
 8005b12:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	2200      	movs	r2, #0
 8005b18:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005b20:	231a      	movs	r3, #26
 8005b22:	2220      	movs	r2, #32
 8005b24:	189b      	adds	r3, r3, r2
 8005b26:	19db      	adds	r3, r3, r7
 8005b28:	781b      	ldrb	r3, [r3, #0]
}
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	b010      	add	sp, #64	; 0x40
 8005b30:	bdb0      	pop	{r4, r5, r7, pc}
 8005b32:	46c0      	nop			; (mov r8, r8)
 8005b34:	08007498 	.word	0x08007498
 8005b38:	00f42400 	.word	0x00f42400

08005b3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b48:	2201      	movs	r2, #1
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	d00b      	beq.n	8005b66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	4a4a      	ldr	r2, [pc, #296]	; (8005c80 <UART_AdvFeatureConfig+0x144>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	0019      	movs	r1, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	d00b      	beq.n	8005b88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	4a43      	ldr	r2, [pc, #268]	; (8005c84 <UART_AdvFeatureConfig+0x148>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	0019      	movs	r1, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d00b      	beq.n	8005baa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	4a3b      	ldr	r2, [pc, #236]	; (8005c88 <UART_AdvFeatureConfig+0x14c>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	0019      	movs	r1, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bae:	2208      	movs	r2, #8
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	d00b      	beq.n	8005bcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	4a34      	ldr	r2, [pc, #208]	; (8005c8c <UART_AdvFeatureConfig+0x150>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	0019      	movs	r1, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd0:	2210      	movs	r2, #16
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	d00b      	beq.n	8005bee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	4a2c      	ldr	r2, [pc, #176]	; (8005c90 <UART_AdvFeatureConfig+0x154>)
 8005bde:	4013      	ands	r3, r2
 8005be0:	0019      	movs	r1, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	d00b      	beq.n	8005c10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	4a25      	ldr	r2, [pc, #148]	; (8005c94 <UART_AdvFeatureConfig+0x158>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	0019      	movs	r1, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c14:	2240      	movs	r2, #64	; 0x40
 8005c16:	4013      	ands	r3, r2
 8005c18:	d01d      	beq.n	8005c56 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	4a1d      	ldr	r2, [pc, #116]	; (8005c98 <UART_AdvFeatureConfig+0x15c>)
 8005c22:	4013      	ands	r3, r2
 8005c24:	0019      	movs	r1, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c36:	2380      	movs	r3, #128	; 0x80
 8005c38:	035b      	lsls	r3, r3, #13
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d10b      	bne.n	8005c56 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <UART_AdvFeatureConfig+0x160>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	0019      	movs	r1, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5a:	2280      	movs	r2, #128	; 0x80
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	d00b      	beq.n	8005c78 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	4a0e      	ldr	r2, [pc, #56]	; (8005ca0 <UART_AdvFeatureConfig+0x164>)
 8005c68:	4013      	ands	r3, r2
 8005c6a:	0019      	movs	r1, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	605a      	str	r2, [r3, #4]
  }
}
 8005c78:	46c0      	nop			; (mov r8, r8)
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	b002      	add	sp, #8
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	fffdffff 	.word	0xfffdffff
 8005c84:	fffeffff 	.word	0xfffeffff
 8005c88:	fffbffff 	.word	0xfffbffff
 8005c8c:	ffff7fff 	.word	0xffff7fff
 8005c90:	ffffefff 	.word	0xffffefff
 8005c94:	ffffdfff 	.word	0xffffdfff
 8005c98:	ffefffff 	.word	0xffefffff
 8005c9c:	ff9fffff 	.word	0xff9fffff
 8005ca0:	fff7ffff 	.word	0xfff7ffff

08005ca4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2290      	movs	r2, #144	; 0x90
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cb4:	f7fb ff9e 	bl	8001bf4 <HAL_GetTick>
 8005cb8:	0003      	movs	r3, r0
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2208      	movs	r2, #8
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d10c      	bne.n	8005ce4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2280      	movs	r2, #128	; 0x80
 8005cce:	0391      	lsls	r1, r2, #14
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	4a1a      	ldr	r2, [pc, #104]	; (8005d3c <UART_CheckIdleState+0x98>)
 8005cd4:	9200      	str	r2, [sp, #0]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f000 f832 	bl	8005d40 <UART_WaitOnFlagUntilTimeout>
 8005cdc:	1e03      	subs	r3, r0, #0
 8005cde:	d001      	beq.n	8005ce4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e026      	b.n	8005d32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2204      	movs	r2, #4
 8005cec:	4013      	ands	r3, r2
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d10c      	bne.n	8005d0c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2280      	movs	r2, #128	; 0x80
 8005cf6:	03d1      	lsls	r1, r2, #15
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	4a10      	ldr	r2, [pc, #64]	; (8005d3c <UART_CheckIdleState+0x98>)
 8005cfc:	9200      	str	r2, [sp, #0]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f000 f81e 	bl	8005d40 <UART_WaitOnFlagUntilTimeout>
 8005d04:	1e03      	subs	r3, r0, #0
 8005d06:	d001      	beq.n	8005d0c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e012      	b.n	8005d32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2288      	movs	r2, #136	; 0x88
 8005d10:	2120      	movs	r1, #32
 8005d12:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	228c      	movs	r2, #140	; 0x8c
 8005d18:	2120      	movs	r1, #32
 8005d1a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2284      	movs	r2, #132	; 0x84
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	0018      	movs	r0, r3
 8005d34:	46bd      	mov	sp, r7
 8005d36:	b004      	add	sp, #16
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	46c0      	nop			; (mov r8, r8)
 8005d3c:	01ffffff 	.word	0x01ffffff

08005d40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b094      	sub	sp, #80	; 0x50
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	603b      	str	r3, [r7, #0]
 8005d4c:	1dfb      	adds	r3, r7, #7
 8005d4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d50:	e0a7      	b.n	8005ea2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d54:	3301      	adds	r3, #1
 8005d56:	d100      	bne.n	8005d5a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005d58:	e0a3      	b.n	8005ea2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d5a:	f7fb ff4b 	bl	8001bf4 <HAL_GetTick>
 8005d5e:	0002      	movs	r2, r0
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d302      	bcc.n	8005d70 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d13f      	bne.n	8005df0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d70:	f3ef 8310 	mrs	r3, PRIMASK
 8005d74:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d78:	647b      	str	r3, [r7, #68]	; 0x44
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d80:	f383 8810 	msr	PRIMASK, r3
}
 8005d84:	46c0      	nop			; (mov r8, r8)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	494e      	ldr	r1, [pc, #312]	; (8005ecc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005d92:	400a      	ands	r2, r1
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d98:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	f383 8810 	msr	PRIMASK, r3
}
 8005da0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005da2:	f3ef 8310 	mrs	r3, PRIMASK
 8005da6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005daa:	643b      	str	r3, [r7, #64]	; 0x40
 8005dac:	2301      	movs	r3, #1
 8005dae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db2:	f383 8810 	msr	PRIMASK, r3
}
 8005db6:	46c0      	nop			; (mov r8, r8)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	438a      	bics	r2, r1
 8005dc6:	609a      	str	r2, [r3, #8]
 8005dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dce:	f383 8810 	msr	PRIMASK, r3
}
 8005dd2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2288      	movs	r2, #136	; 0x88
 8005dd8:	2120      	movs	r1, #32
 8005dda:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	228c      	movs	r2, #140	; 0x8c
 8005de0:	2120      	movs	r1, #32
 8005de2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2284      	movs	r2, #132	; 0x84
 8005de8:	2100      	movs	r1, #0
 8005dea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e069      	b.n	8005ec4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2204      	movs	r2, #4
 8005df8:	4013      	ands	r3, r2
 8005dfa:	d052      	beq.n	8005ea2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69da      	ldr	r2, [r3, #28]
 8005e02:	2380      	movs	r3, #128	; 0x80
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	401a      	ands	r2, r3
 8005e08:	2380      	movs	r3, #128	; 0x80
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d148      	bne.n	8005ea2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2280      	movs	r2, #128	; 0x80
 8005e16:	0112      	lsls	r2, r2, #4
 8005e18:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e1e:	613b      	str	r3, [r7, #16]
  return(result);
 8005e20:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e24:	2301      	movs	r3, #1
 8005e26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f383 8810 	msr	PRIMASK, r3
}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4924      	ldr	r1, [pc, #144]	; (8005ecc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005e3c:	400a      	ands	r2, r1
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e42:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	f383 8810 	msr	PRIMASK, r3
}
 8005e4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e50:	61fb      	str	r3, [r7, #28]
  return(result);
 8005e52:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e54:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e56:	2301      	movs	r3, #1
 8005e58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	f383 8810 	msr	PRIMASK, r3
}
 8005e60:	46c0      	nop			; (mov r8, r8)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	438a      	bics	r2, r1
 8005e70:	609a      	str	r2, [r3, #8]
 8005e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	f383 8810 	msr	PRIMASK, r3
}
 8005e7c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2288      	movs	r2, #136	; 0x88
 8005e82:	2120      	movs	r1, #32
 8005e84:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	228c      	movs	r2, #140	; 0x8c
 8005e8a:	2120      	movs	r1, #32
 8005e8c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2290      	movs	r2, #144	; 0x90
 8005e92:	2120      	movs	r1, #32
 8005e94:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2284      	movs	r2, #132	; 0x84
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e010      	b.n	8005ec4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	425a      	negs	r2, r3
 8005eb2:	4153      	adcs	r3, r2
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	001a      	movs	r2, r3
 8005eb8:	1dfb      	adds	r3, r7, #7
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d100      	bne.n	8005ec2 <UART_WaitOnFlagUntilTimeout+0x182>
 8005ec0:	e747      	b.n	8005d52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b014      	add	sp, #80	; 0x50
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	fffffe5f 	.word	0xfffffe5f

08005ed0 <__errno>:
 8005ed0:	4b01      	ldr	r3, [pc, #4]	; (8005ed8 <__errno+0x8>)
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	4770      	bx	lr
 8005ed6:	46c0      	nop			; (mov r8, r8)
 8005ed8:	2000003c 	.word	0x2000003c

08005edc <__libc_init_array>:
 8005edc:	b570      	push	{r4, r5, r6, lr}
 8005ede:	2600      	movs	r6, #0
 8005ee0:	4d0c      	ldr	r5, [pc, #48]	; (8005f14 <__libc_init_array+0x38>)
 8005ee2:	4c0d      	ldr	r4, [pc, #52]	; (8005f18 <__libc_init_array+0x3c>)
 8005ee4:	1b64      	subs	r4, r4, r5
 8005ee6:	10a4      	asrs	r4, r4, #2
 8005ee8:	42a6      	cmp	r6, r4
 8005eea:	d109      	bne.n	8005f00 <__libc_init_array+0x24>
 8005eec:	2600      	movs	r6, #0
 8005eee:	f001 f803 	bl	8006ef8 <_init>
 8005ef2:	4d0a      	ldr	r5, [pc, #40]	; (8005f1c <__libc_init_array+0x40>)
 8005ef4:	4c0a      	ldr	r4, [pc, #40]	; (8005f20 <__libc_init_array+0x44>)
 8005ef6:	1b64      	subs	r4, r4, r5
 8005ef8:	10a4      	asrs	r4, r4, #2
 8005efa:	42a6      	cmp	r6, r4
 8005efc:	d105      	bne.n	8005f0a <__libc_init_array+0x2e>
 8005efe:	bd70      	pop	{r4, r5, r6, pc}
 8005f00:	00b3      	lsls	r3, r6, #2
 8005f02:	58eb      	ldr	r3, [r5, r3]
 8005f04:	4798      	blx	r3
 8005f06:	3601      	adds	r6, #1
 8005f08:	e7ee      	b.n	8005ee8 <__libc_init_array+0xc>
 8005f0a:	00b3      	lsls	r3, r6, #2
 8005f0c:	58eb      	ldr	r3, [r5, r3]
 8005f0e:	4798      	blx	r3
 8005f10:	3601      	adds	r6, #1
 8005f12:	e7f2      	b.n	8005efa <__libc_init_array+0x1e>
 8005f14:	08007550 	.word	0x08007550
 8005f18:	08007550 	.word	0x08007550
 8005f1c:	08007550 	.word	0x08007550
 8005f20:	08007554 	.word	0x08007554

08005f24 <memcpy>:
 8005f24:	2300      	movs	r3, #0
 8005f26:	b510      	push	{r4, lr}
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d100      	bne.n	8005f2e <memcpy+0xa>
 8005f2c:	bd10      	pop	{r4, pc}
 8005f2e:	5ccc      	ldrb	r4, [r1, r3]
 8005f30:	54c4      	strb	r4, [r0, r3]
 8005f32:	3301      	adds	r3, #1
 8005f34:	e7f8      	b.n	8005f28 <memcpy+0x4>

08005f36 <memset>:
 8005f36:	0003      	movs	r3, r0
 8005f38:	1882      	adds	r2, r0, r2
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d100      	bne.n	8005f40 <memset+0xa>
 8005f3e:	4770      	bx	lr
 8005f40:	7019      	strb	r1, [r3, #0]
 8005f42:	3301      	adds	r3, #1
 8005f44:	e7f9      	b.n	8005f3a <memset+0x4>
	...

08005f48 <iprintf>:
 8005f48:	b40f      	push	{r0, r1, r2, r3}
 8005f4a:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <iprintf+0x30>)
 8005f4c:	b513      	push	{r0, r1, r4, lr}
 8005f4e:	681c      	ldr	r4, [r3, #0]
 8005f50:	2c00      	cmp	r4, #0
 8005f52:	d005      	beq.n	8005f60 <iprintf+0x18>
 8005f54:	69a3      	ldr	r3, [r4, #24]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d102      	bne.n	8005f60 <iprintf+0x18>
 8005f5a:	0020      	movs	r0, r4
 8005f5c:	f000 f870 	bl	8006040 <__sinit>
 8005f60:	ab05      	add	r3, sp, #20
 8005f62:	0020      	movs	r0, r4
 8005f64:	9a04      	ldr	r2, [sp, #16]
 8005f66:	68a1      	ldr	r1, [r4, #8]
 8005f68:	9301      	str	r3, [sp, #4]
 8005f6a:	f000 f9cd 	bl	8006308 <_vfiprintf_r>
 8005f6e:	bc16      	pop	{r1, r2, r4}
 8005f70:	bc08      	pop	{r3}
 8005f72:	b004      	add	sp, #16
 8005f74:	4718      	bx	r3
 8005f76:	46c0      	nop			; (mov r8, r8)
 8005f78:	2000003c 	.word	0x2000003c

08005f7c <std>:
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	b510      	push	{r4, lr}
 8005f80:	0004      	movs	r4, r0
 8005f82:	6003      	str	r3, [r0, #0]
 8005f84:	6043      	str	r3, [r0, #4]
 8005f86:	6083      	str	r3, [r0, #8]
 8005f88:	8181      	strh	r1, [r0, #12]
 8005f8a:	6643      	str	r3, [r0, #100]	; 0x64
 8005f8c:	0019      	movs	r1, r3
 8005f8e:	81c2      	strh	r2, [r0, #14]
 8005f90:	6103      	str	r3, [r0, #16]
 8005f92:	6143      	str	r3, [r0, #20]
 8005f94:	6183      	str	r3, [r0, #24]
 8005f96:	2208      	movs	r2, #8
 8005f98:	305c      	adds	r0, #92	; 0x5c
 8005f9a:	f7ff ffcc 	bl	8005f36 <memset>
 8005f9e:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <std+0x38>)
 8005fa0:	6224      	str	r4, [r4, #32]
 8005fa2:	6263      	str	r3, [r4, #36]	; 0x24
 8005fa4:	4b04      	ldr	r3, [pc, #16]	; (8005fb8 <std+0x3c>)
 8005fa6:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fa8:	4b04      	ldr	r3, [pc, #16]	; (8005fbc <std+0x40>)
 8005faa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005fac:	4b04      	ldr	r3, [pc, #16]	; (8005fc0 <std+0x44>)
 8005fae:	6323      	str	r3, [r4, #48]	; 0x30
 8005fb0:	bd10      	pop	{r4, pc}
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	080068a5 	.word	0x080068a5
 8005fb8:	080068cd 	.word	0x080068cd
 8005fbc:	08006905 	.word	0x08006905
 8005fc0:	08006931 	.word	0x08006931

08005fc4 <_cleanup_r>:
 8005fc4:	b510      	push	{r4, lr}
 8005fc6:	4902      	ldr	r1, [pc, #8]	; (8005fd0 <_cleanup_r+0xc>)
 8005fc8:	f000 f8ba 	bl	8006140 <_fwalk_reent>
 8005fcc:	bd10      	pop	{r4, pc}
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	08006c3d 	.word	0x08006c3d

08005fd4 <__sfmoreglue>:
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	2568      	movs	r5, #104	; 0x68
 8005fd8:	1e4a      	subs	r2, r1, #1
 8005fda:	4355      	muls	r5, r2
 8005fdc:	000e      	movs	r6, r1
 8005fde:	0029      	movs	r1, r5
 8005fe0:	3174      	adds	r1, #116	; 0x74
 8005fe2:	f000 f8f3 	bl	80061cc <_malloc_r>
 8005fe6:	1e04      	subs	r4, r0, #0
 8005fe8:	d008      	beq.n	8005ffc <__sfmoreglue+0x28>
 8005fea:	2100      	movs	r1, #0
 8005fec:	002a      	movs	r2, r5
 8005fee:	6001      	str	r1, [r0, #0]
 8005ff0:	6046      	str	r6, [r0, #4]
 8005ff2:	300c      	adds	r0, #12
 8005ff4:	60a0      	str	r0, [r4, #8]
 8005ff6:	3268      	adds	r2, #104	; 0x68
 8005ff8:	f7ff ff9d 	bl	8005f36 <memset>
 8005ffc:	0020      	movs	r0, r4
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}

08006000 <__sfp_lock_acquire>:
 8006000:	b510      	push	{r4, lr}
 8006002:	4802      	ldr	r0, [pc, #8]	; (800600c <__sfp_lock_acquire+0xc>)
 8006004:	f000 f8bd 	bl	8006182 <__retarget_lock_acquire_recursive>
 8006008:	bd10      	pop	{r4, pc}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	20000255 	.word	0x20000255

08006010 <__sfp_lock_release>:
 8006010:	b510      	push	{r4, lr}
 8006012:	4802      	ldr	r0, [pc, #8]	; (800601c <__sfp_lock_release+0xc>)
 8006014:	f000 f8b6 	bl	8006184 <__retarget_lock_release_recursive>
 8006018:	bd10      	pop	{r4, pc}
 800601a:	46c0      	nop			; (mov r8, r8)
 800601c:	20000255 	.word	0x20000255

08006020 <__sinit_lock_acquire>:
 8006020:	b510      	push	{r4, lr}
 8006022:	4802      	ldr	r0, [pc, #8]	; (800602c <__sinit_lock_acquire+0xc>)
 8006024:	f000 f8ad 	bl	8006182 <__retarget_lock_acquire_recursive>
 8006028:	bd10      	pop	{r4, pc}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	20000256 	.word	0x20000256

08006030 <__sinit_lock_release>:
 8006030:	b510      	push	{r4, lr}
 8006032:	4802      	ldr	r0, [pc, #8]	; (800603c <__sinit_lock_release+0xc>)
 8006034:	f000 f8a6 	bl	8006184 <__retarget_lock_release_recursive>
 8006038:	bd10      	pop	{r4, pc}
 800603a:	46c0      	nop			; (mov r8, r8)
 800603c:	20000256 	.word	0x20000256

08006040 <__sinit>:
 8006040:	b513      	push	{r0, r1, r4, lr}
 8006042:	0004      	movs	r4, r0
 8006044:	f7ff ffec 	bl	8006020 <__sinit_lock_acquire>
 8006048:	69a3      	ldr	r3, [r4, #24]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <__sinit+0x14>
 800604e:	f7ff ffef 	bl	8006030 <__sinit_lock_release>
 8006052:	bd13      	pop	{r0, r1, r4, pc}
 8006054:	64a3      	str	r3, [r4, #72]	; 0x48
 8006056:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006058:	6523      	str	r3, [r4, #80]	; 0x50
 800605a:	4b13      	ldr	r3, [pc, #76]	; (80060a8 <__sinit+0x68>)
 800605c:	4a13      	ldr	r2, [pc, #76]	; (80060ac <__sinit+0x6c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	62a2      	str	r2, [r4, #40]	; 0x28
 8006062:	9301      	str	r3, [sp, #4]
 8006064:	42a3      	cmp	r3, r4
 8006066:	d101      	bne.n	800606c <__sinit+0x2c>
 8006068:	2301      	movs	r3, #1
 800606a:	61a3      	str	r3, [r4, #24]
 800606c:	0020      	movs	r0, r4
 800606e:	f000 f81f 	bl	80060b0 <__sfp>
 8006072:	6060      	str	r0, [r4, #4]
 8006074:	0020      	movs	r0, r4
 8006076:	f000 f81b 	bl	80060b0 <__sfp>
 800607a:	60a0      	str	r0, [r4, #8]
 800607c:	0020      	movs	r0, r4
 800607e:	f000 f817 	bl	80060b0 <__sfp>
 8006082:	2200      	movs	r2, #0
 8006084:	2104      	movs	r1, #4
 8006086:	60e0      	str	r0, [r4, #12]
 8006088:	6860      	ldr	r0, [r4, #4]
 800608a:	f7ff ff77 	bl	8005f7c <std>
 800608e:	2201      	movs	r2, #1
 8006090:	2109      	movs	r1, #9
 8006092:	68a0      	ldr	r0, [r4, #8]
 8006094:	f7ff ff72 	bl	8005f7c <std>
 8006098:	2202      	movs	r2, #2
 800609a:	2112      	movs	r1, #18
 800609c:	68e0      	ldr	r0, [r4, #12]
 800609e:	f7ff ff6d 	bl	8005f7c <std>
 80060a2:	2301      	movs	r3, #1
 80060a4:	61a3      	str	r3, [r4, #24]
 80060a6:	e7d2      	b.n	800604e <__sinit+0xe>
 80060a8:	080074b0 	.word	0x080074b0
 80060ac:	08005fc5 	.word	0x08005fc5

080060b0 <__sfp>:
 80060b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b2:	0007      	movs	r7, r0
 80060b4:	f7ff ffa4 	bl	8006000 <__sfp_lock_acquire>
 80060b8:	4b1f      	ldr	r3, [pc, #124]	; (8006138 <__sfp+0x88>)
 80060ba:	681e      	ldr	r6, [r3, #0]
 80060bc:	69b3      	ldr	r3, [r6, #24]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d102      	bne.n	80060c8 <__sfp+0x18>
 80060c2:	0030      	movs	r0, r6
 80060c4:	f7ff ffbc 	bl	8006040 <__sinit>
 80060c8:	3648      	adds	r6, #72	; 0x48
 80060ca:	68b4      	ldr	r4, [r6, #8]
 80060cc:	6873      	ldr	r3, [r6, #4]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	d504      	bpl.n	80060dc <__sfp+0x2c>
 80060d2:	6833      	ldr	r3, [r6, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d022      	beq.n	800611e <__sfp+0x6e>
 80060d8:	6836      	ldr	r6, [r6, #0]
 80060da:	e7f6      	b.n	80060ca <__sfp+0x1a>
 80060dc:	220c      	movs	r2, #12
 80060de:	5ea5      	ldrsh	r5, [r4, r2]
 80060e0:	2d00      	cmp	r5, #0
 80060e2:	d11a      	bne.n	800611a <__sfp+0x6a>
 80060e4:	0020      	movs	r0, r4
 80060e6:	4b15      	ldr	r3, [pc, #84]	; (800613c <__sfp+0x8c>)
 80060e8:	3058      	adds	r0, #88	; 0x58
 80060ea:	60e3      	str	r3, [r4, #12]
 80060ec:	6665      	str	r5, [r4, #100]	; 0x64
 80060ee:	f000 f847 	bl	8006180 <__retarget_lock_init_recursive>
 80060f2:	f7ff ff8d 	bl	8006010 <__sfp_lock_release>
 80060f6:	0020      	movs	r0, r4
 80060f8:	2208      	movs	r2, #8
 80060fa:	0029      	movs	r1, r5
 80060fc:	6025      	str	r5, [r4, #0]
 80060fe:	60a5      	str	r5, [r4, #8]
 8006100:	6065      	str	r5, [r4, #4]
 8006102:	6125      	str	r5, [r4, #16]
 8006104:	6165      	str	r5, [r4, #20]
 8006106:	61a5      	str	r5, [r4, #24]
 8006108:	305c      	adds	r0, #92	; 0x5c
 800610a:	f7ff ff14 	bl	8005f36 <memset>
 800610e:	6365      	str	r5, [r4, #52]	; 0x34
 8006110:	63a5      	str	r5, [r4, #56]	; 0x38
 8006112:	64a5      	str	r5, [r4, #72]	; 0x48
 8006114:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006116:	0020      	movs	r0, r4
 8006118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800611a:	3468      	adds	r4, #104	; 0x68
 800611c:	e7d7      	b.n	80060ce <__sfp+0x1e>
 800611e:	2104      	movs	r1, #4
 8006120:	0038      	movs	r0, r7
 8006122:	f7ff ff57 	bl	8005fd4 <__sfmoreglue>
 8006126:	1e04      	subs	r4, r0, #0
 8006128:	6030      	str	r0, [r6, #0]
 800612a:	d1d5      	bne.n	80060d8 <__sfp+0x28>
 800612c:	f7ff ff70 	bl	8006010 <__sfp_lock_release>
 8006130:	230c      	movs	r3, #12
 8006132:	603b      	str	r3, [r7, #0]
 8006134:	e7ef      	b.n	8006116 <__sfp+0x66>
 8006136:	46c0      	nop			; (mov r8, r8)
 8006138:	080074b0 	.word	0x080074b0
 800613c:	ffff0001 	.word	0xffff0001

08006140 <_fwalk_reent>:
 8006140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006142:	0004      	movs	r4, r0
 8006144:	0006      	movs	r6, r0
 8006146:	2700      	movs	r7, #0
 8006148:	9101      	str	r1, [sp, #4]
 800614a:	3448      	adds	r4, #72	; 0x48
 800614c:	6863      	ldr	r3, [r4, #4]
 800614e:	68a5      	ldr	r5, [r4, #8]
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	9b00      	ldr	r3, [sp, #0]
 8006154:	3b01      	subs	r3, #1
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	d504      	bpl.n	8006164 <_fwalk_reent+0x24>
 800615a:	6824      	ldr	r4, [r4, #0]
 800615c:	2c00      	cmp	r4, #0
 800615e:	d1f5      	bne.n	800614c <_fwalk_reent+0xc>
 8006160:	0038      	movs	r0, r7
 8006162:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006164:	89ab      	ldrh	r3, [r5, #12]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d908      	bls.n	800617c <_fwalk_reent+0x3c>
 800616a:	220e      	movs	r2, #14
 800616c:	5eab      	ldrsh	r3, [r5, r2]
 800616e:	3301      	adds	r3, #1
 8006170:	d004      	beq.n	800617c <_fwalk_reent+0x3c>
 8006172:	0029      	movs	r1, r5
 8006174:	0030      	movs	r0, r6
 8006176:	9b01      	ldr	r3, [sp, #4]
 8006178:	4798      	blx	r3
 800617a:	4307      	orrs	r7, r0
 800617c:	3568      	adds	r5, #104	; 0x68
 800617e:	e7e8      	b.n	8006152 <_fwalk_reent+0x12>

08006180 <__retarget_lock_init_recursive>:
 8006180:	4770      	bx	lr

08006182 <__retarget_lock_acquire_recursive>:
 8006182:	4770      	bx	lr

08006184 <__retarget_lock_release_recursive>:
 8006184:	4770      	bx	lr
	...

08006188 <sbrk_aligned>:
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	4e0f      	ldr	r6, [pc, #60]	; (80061c8 <sbrk_aligned+0x40>)
 800618c:	000d      	movs	r5, r1
 800618e:	6831      	ldr	r1, [r6, #0]
 8006190:	0004      	movs	r4, r0
 8006192:	2900      	cmp	r1, #0
 8006194:	d102      	bne.n	800619c <sbrk_aligned+0x14>
 8006196:	f000 fb73 	bl	8006880 <_sbrk_r>
 800619a:	6030      	str	r0, [r6, #0]
 800619c:	0029      	movs	r1, r5
 800619e:	0020      	movs	r0, r4
 80061a0:	f000 fb6e 	bl	8006880 <_sbrk_r>
 80061a4:	1c43      	adds	r3, r0, #1
 80061a6:	d00a      	beq.n	80061be <sbrk_aligned+0x36>
 80061a8:	2303      	movs	r3, #3
 80061aa:	1cc5      	adds	r5, r0, #3
 80061ac:	439d      	bics	r5, r3
 80061ae:	42a8      	cmp	r0, r5
 80061b0:	d007      	beq.n	80061c2 <sbrk_aligned+0x3a>
 80061b2:	1a29      	subs	r1, r5, r0
 80061b4:	0020      	movs	r0, r4
 80061b6:	f000 fb63 	bl	8006880 <_sbrk_r>
 80061ba:	1c43      	adds	r3, r0, #1
 80061bc:	d101      	bne.n	80061c2 <sbrk_aligned+0x3a>
 80061be:	2501      	movs	r5, #1
 80061c0:	426d      	negs	r5, r5
 80061c2:	0028      	movs	r0, r5
 80061c4:	bd70      	pop	{r4, r5, r6, pc}
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	2000025c 	.word	0x2000025c

080061cc <_malloc_r>:
 80061cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061ce:	2203      	movs	r2, #3
 80061d0:	1ccb      	adds	r3, r1, #3
 80061d2:	4393      	bics	r3, r2
 80061d4:	3308      	adds	r3, #8
 80061d6:	0006      	movs	r6, r0
 80061d8:	001f      	movs	r7, r3
 80061da:	2b0c      	cmp	r3, #12
 80061dc:	d232      	bcs.n	8006244 <_malloc_r+0x78>
 80061de:	270c      	movs	r7, #12
 80061e0:	42b9      	cmp	r1, r7
 80061e2:	d831      	bhi.n	8006248 <_malloc_r+0x7c>
 80061e4:	0030      	movs	r0, r6
 80061e6:	f000 fdf5 	bl	8006dd4 <__malloc_lock>
 80061ea:	4d32      	ldr	r5, [pc, #200]	; (80062b4 <_malloc_r+0xe8>)
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	001c      	movs	r4, r3
 80061f0:	2c00      	cmp	r4, #0
 80061f2:	d12e      	bne.n	8006252 <_malloc_r+0x86>
 80061f4:	0039      	movs	r1, r7
 80061f6:	0030      	movs	r0, r6
 80061f8:	f7ff ffc6 	bl	8006188 <sbrk_aligned>
 80061fc:	0004      	movs	r4, r0
 80061fe:	1c43      	adds	r3, r0, #1
 8006200:	d11e      	bne.n	8006240 <_malloc_r+0x74>
 8006202:	682c      	ldr	r4, [r5, #0]
 8006204:	0025      	movs	r5, r4
 8006206:	2d00      	cmp	r5, #0
 8006208:	d14a      	bne.n	80062a0 <_malloc_r+0xd4>
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	0029      	movs	r1, r5
 800620e:	18e3      	adds	r3, r4, r3
 8006210:	0030      	movs	r0, r6
 8006212:	9301      	str	r3, [sp, #4]
 8006214:	f000 fb34 	bl	8006880 <_sbrk_r>
 8006218:	9b01      	ldr	r3, [sp, #4]
 800621a:	4283      	cmp	r3, r0
 800621c:	d143      	bne.n	80062a6 <_malloc_r+0xda>
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	3703      	adds	r7, #3
 8006222:	1aff      	subs	r7, r7, r3
 8006224:	2303      	movs	r3, #3
 8006226:	439f      	bics	r7, r3
 8006228:	3708      	adds	r7, #8
 800622a:	2f0c      	cmp	r7, #12
 800622c:	d200      	bcs.n	8006230 <_malloc_r+0x64>
 800622e:	270c      	movs	r7, #12
 8006230:	0039      	movs	r1, r7
 8006232:	0030      	movs	r0, r6
 8006234:	f7ff ffa8 	bl	8006188 <sbrk_aligned>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d034      	beq.n	80062a6 <_malloc_r+0xda>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	19df      	adds	r7, r3, r7
 8006240:	6027      	str	r7, [r4, #0]
 8006242:	e013      	b.n	800626c <_malloc_r+0xa0>
 8006244:	2b00      	cmp	r3, #0
 8006246:	dacb      	bge.n	80061e0 <_malloc_r+0x14>
 8006248:	230c      	movs	r3, #12
 800624a:	2500      	movs	r5, #0
 800624c:	6033      	str	r3, [r6, #0]
 800624e:	0028      	movs	r0, r5
 8006250:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006252:	6822      	ldr	r2, [r4, #0]
 8006254:	1bd1      	subs	r1, r2, r7
 8006256:	d420      	bmi.n	800629a <_malloc_r+0xce>
 8006258:	290b      	cmp	r1, #11
 800625a:	d917      	bls.n	800628c <_malloc_r+0xc0>
 800625c:	19e2      	adds	r2, r4, r7
 800625e:	6027      	str	r7, [r4, #0]
 8006260:	42a3      	cmp	r3, r4
 8006262:	d111      	bne.n	8006288 <_malloc_r+0xbc>
 8006264:	602a      	str	r2, [r5, #0]
 8006266:	6863      	ldr	r3, [r4, #4]
 8006268:	6011      	str	r1, [r2, #0]
 800626a:	6053      	str	r3, [r2, #4]
 800626c:	0030      	movs	r0, r6
 800626e:	0025      	movs	r5, r4
 8006270:	f000 fdb8 	bl	8006de4 <__malloc_unlock>
 8006274:	2207      	movs	r2, #7
 8006276:	350b      	adds	r5, #11
 8006278:	1d23      	adds	r3, r4, #4
 800627a:	4395      	bics	r5, r2
 800627c:	1aea      	subs	r2, r5, r3
 800627e:	429d      	cmp	r5, r3
 8006280:	d0e5      	beq.n	800624e <_malloc_r+0x82>
 8006282:	1b5b      	subs	r3, r3, r5
 8006284:	50a3      	str	r3, [r4, r2]
 8006286:	e7e2      	b.n	800624e <_malloc_r+0x82>
 8006288:	605a      	str	r2, [r3, #4]
 800628a:	e7ec      	b.n	8006266 <_malloc_r+0x9a>
 800628c:	6862      	ldr	r2, [r4, #4]
 800628e:	42a3      	cmp	r3, r4
 8006290:	d101      	bne.n	8006296 <_malloc_r+0xca>
 8006292:	602a      	str	r2, [r5, #0]
 8006294:	e7ea      	b.n	800626c <_malloc_r+0xa0>
 8006296:	605a      	str	r2, [r3, #4]
 8006298:	e7e8      	b.n	800626c <_malloc_r+0xa0>
 800629a:	0023      	movs	r3, r4
 800629c:	6864      	ldr	r4, [r4, #4]
 800629e:	e7a7      	b.n	80061f0 <_malloc_r+0x24>
 80062a0:	002c      	movs	r4, r5
 80062a2:	686d      	ldr	r5, [r5, #4]
 80062a4:	e7af      	b.n	8006206 <_malloc_r+0x3a>
 80062a6:	230c      	movs	r3, #12
 80062a8:	0030      	movs	r0, r6
 80062aa:	6033      	str	r3, [r6, #0]
 80062ac:	f000 fd9a 	bl	8006de4 <__malloc_unlock>
 80062b0:	e7cd      	b.n	800624e <_malloc_r+0x82>
 80062b2:	46c0      	nop			; (mov r8, r8)
 80062b4:	20000258 	.word	0x20000258

080062b8 <__sfputc_r>:
 80062b8:	6893      	ldr	r3, [r2, #8]
 80062ba:	b510      	push	{r4, lr}
 80062bc:	3b01      	subs	r3, #1
 80062be:	6093      	str	r3, [r2, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	da04      	bge.n	80062ce <__sfputc_r+0x16>
 80062c4:	6994      	ldr	r4, [r2, #24]
 80062c6:	42a3      	cmp	r3, r4
 80062c8:	db07      	blt.n	80062da <__sfputc_r+0x22>
 80062ca:	290a      	cmp	r1, #10
 80062cc:	d005      	beq.n	80062da <__sfputc_r+0x22>
 80062ce:	6813      	ldr	r3, [r2, #0]
 80062d0:	1c58      	adds	r0, r3, #1
 80062d2:	6010      	str	r0, [r2, #0]
 80062d4:	7019      	strb	r1, [r3, #0]
 80062d6:	0008      	movs	r0, r1
 80062d8:	bd10      	pop	{r4, pc}
 80062da:	f000 fb2f 	bl	800693c <__swbuf_r>
 80062de:	0001      	movs	r1, r0
 80062e0:	e7f9      	b.n	80062d6 <__sfputc_r+0x1e>

080062e2 <__sfputs_r>:
 80062e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e4:	0006      	movs	r6, r0
 80062e6:	000f      	movs	r7, r1
 80062e8:	0014      	movs	r4, r2
 80062ea:	18d5      	adds	r5, r2, r3
 80062ec:	42ac      	cmp	r4, r5
 80062ee:	d101      	bne.n	80062f4 <__sfputs_r+0x12>
 80062f0:	2000      	movs	r0, #0
 80062f2:	e007      	b.n	8006304 <__sfputs_r+0x22>
 80062f4:	7821      	ldrb	r1, [r4, #0]
 80062f6:	003a      	movs	r2, r7
 80062f8:	0030      	movs	r0, r6
 80062fa:	f7ff ffdd 	bl	80062b8 <__sfputc_r>
 80062fe:	3401      	adds	r4, #1
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d1f3      	bne.n	80062ec <__sfputs_r+0xa>
 8006304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006308 <_vfiprintf_r>:
 8006308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800630a:	b0a1      	sub	sp, #132	; 0x84
 800630c:	0006      	movs	r6, r0
 800630e:	000c      	movs	r4, r1
 8006310:	001f      	movs	r7, r3
 8006312:	9203      	str	r2, [sp, #12]
 8006314:	2800      	cmp	r0, #0
 8006316:	d004      	beq.n	8006322 <_vfiprintf_r+0x1a>
 8006318:	6983      	ldr	r3, [r0, #24]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <_vfiprintf_r+0x1a>
 800631e:	f7ff fe8f 	bl	8006040 <__sinit>
 8006322:	4b8e      	ldr	r3, [pc, #568]	; (800655c <_vfiprintf_r+0x254>)
 8006324:	429c      	cmp	r4, r3
 8006326:	d11c      	bne.n	8006362 <_vfiprintf_r+0x5a>
 8006328:	6874      	ldr	r4, [r6, #4]
 800632a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800632c:	07db      	lsls	r3, r3, #31
 800632e:	d405      	bmi.n	800633c <_vfiprintf_r+0x34>
 8006330:	89a3      	ldrh	r3, [r4, #12]
 8006332:	059b      	lsls	r3, r3, #22
 8006334:	d402      	bmi.n	800633c <_vfiprintf_r+0x34>
 8006336:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006338:	f7ff ff23 	bl	8006182 <__retarget_lock_acquire_recursive>
 800633c:	89a3      	ldrh	r3, [r4, #12]
 800633e:	071b      	lsls	r3, r3, #28
 8006340:	d502      	bpl.n	8006348 <_vfiprintf_r+0x40>
 8006342:	6923      	ldr	r3, [r4, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d11d      	bne.n	8006384 <_vfiprintf_r+0x7c>
 8006348:	0021      	movs	r1, r4
 800634a:	0030      	movs	r0, r6
 800634c:	f000 fb60 	bl	8006a10 <__swsetup_r>
 8006350:	2800      	cmp	r0, #0
 8006352:	d017      	beq.n	8006384 <_vfiprintf_r+0x7c>
 8006354:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006356:	07db      	lsls	r3, r3, #31
 8006358:	d50d      	bpl.n	8006376 <_vfiprintf_r+0x6e>
 800635a:	2001      	movs	r0, #1
 800635c:	4240      	negs	r0, r0
 800635e:	b021      	add	sp, #132	; 0x84
 8006360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006362:	4b7f      	ldr	r3, [pc, #508]	; (8006560 <_vfiprintf_r+0x258>)
 8006364:	429c      	cmp	r4, r3
 8006366:	d101      	bne.n	800636c <_vfiprintf_r+0x64>
 8006368:	68b4      	ldr	r4, [r6, #8]
 800636a:	e7de      	b.n	800632a <_vfiprintf_r+0x22>
 800636c:	4b7d      	ldr	r3, [pc, #500]	; (8006564 <_vfiprintf_r+0x25c>)
 800636e:	429c      	cmp	r4, r3
 8006370:	d1db      	bne.n	800632a <_vfiprintf_r+0x22>
 8006372:	68f4      	ldr	r4, [r6, #12]
 8006374:	e7d9      	b.n	800632a <_vfiprintf_r+0x22>
 8006376:	89a3      	ldrh	r3, [r4, #12]
 8006378:	059b      	lsls	r3, r3, #22
 800637a:	d4ee      	bmi.n	800635a <_vfiprintf_r+0x52>
 800637c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800637e:	f7ff ff01 	bl	8006184 <__retarget_lock_release_recursive>
 8006382:	e7ea      	b.n	800635a <_vfiprintf_r+0x52>
 8006384:	2300      	movs	r3, #0
 8006386:	ad08      	add	r5, sp, #32
 8006388:	616b      	str	r3, [r5, #20]
 800638a:	3320      	adds	r3, #32
 800638c:	766b      	strb	r3, [r5, #25]
 800638e:	3310      	adds	r3, #16
 8006390:	76ab      	strb	r3, [r5, #26]
 8006392:	9707      	str	r7, [sp, #28]
 8006394:	9f03      	ldr	r7, [sp, #12]
 8006396:	783b      	ldrb	r3, [r7, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <_vfiprintf_r+0x98>
 800639c:	2b25      	cmp	r3, #37	; 0x25
 800639e:	d14e      	bne.n	800643e <_vfiprintf_r+0x136>
 80063a0:	9b03      	ldr	r3, [sp, #12]
 80063a2:	1afb      	subs	r3, r7, r3
 80063a4:	9305      	str	r3, [sp, #20]
 80063a6:	9b03      	ldr	r3, [sp, #12]
 80063a8:	429f      	cmp	r7, r3
 80063aa:	d00d      	beq.n	80063c8 <_vfiprintf_r+0xc0>
 80063ac:	9b05      	ldr	r3, [sp, #20]
 80063ae:	0021      	movs	r1, r4
 80063b0:	0030      	movs	r0, r6
 80063b2:	9a03      	ldr	r2, [sp, #12]
 80063b4:	f7ff ff95 	bl	80062e2 <__sfputs_r>
 80063b8:	1c43      	adds	r3, r0, #1
 80063ba:	d100      	bne.n	80063be <_vfiprintf_r+0xb6>
 80063bc:	e0b5      	b.n	800652a <_vfiprintf_r+0x222>
 80063be:	696a      	ldr	r2, [r5, #20]
 80063c0:	9b05      	ldr	r3, [sp, #20]
 80063c2:	4694      	mov	ip, r2
 80063c4:	4463      	add	r3, ip
 80063c6:	616b      	str	r3, [r5, #20]
 80063c8:	783b      	ldrb	r3, [r7, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d100      	bne.n	80063d0 <_vfiprintf_r+0xc8>
 80063ce:	e0ac      	b.n	800652a <_vfiprintf_r+0x222>
 80063d0:	2201      	movs	r2, #1
 80063d2:	1c7b      	adds	r3, r7, #1
 80063d4:	9303      	str	r3, [sp, #12]
 80063d6:	2300      	movs	r3, #0
 80063d8:	4252      	negs	r2, r2
 80063da:	606a      	str	r2, [r5, #4]
 80063dc:	a904      	add	r1, sp, #16
 80063de:	3254      	adds	r2, #84	; 0x54
 80063e0:	1852      	adds	r2, r2, r1
 80063e2:	602b      	str	r3, [r5, #0]
 80063e4:	60eb      	str	r3, [r5, #12]
 80063e6:	60ab      	str	r3, [r5, #8]
 80063e8:	7013      	strb	r3, [r2, #0]
 80063ea:	65ab      	str	r3, [r5, #88]	; 0x58
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	2205      	movs	r2, #5
 80063f0:	7819      	ldrb	r1, [r3, #0]
 80063f2:	485d      	ldr	r0, [pc, #372]	; (8006568 <_vfiprintf_r+0x260>)
 80063f4:	f000 fce2 	bl	8006dbc <memchr>
 80063f8:	9b03      	ldr	r3, [sp, #12]
 80063fa:	1c5f      	adds	r7, r3, #1
 80063fc:	2800      	cmp	r0, #0
 80063fe:	d120      	bne.n	8006442 <_vfiprintf_r+0x13a>
 8006400:	682a      	ldr	r2, [r5, #0]
 8006402:	06d3      	lsls	r3, r2, #27
 8006404:	d504      	bpl.n	8006410 <_vfiprintf_r+0x108>
 8006406:	2353      	movs	r3, #83	; 0x53
 8006408:	a904      	add	r1, sp, #16
 800640a:	185b      	adds	r3, r3, r1
 800640c:	2120      	movs	r1, #32
 800640e:	7019      	strb	r1, [r3, #0]
 8006410:	0713      	lsls	r3, r2, #28
 8006412:	d504      	bpl.n	800641e <_vfiprintf_r+0x116>
 8006414:	2353      	movs	r3, #83	; 0x53
 8006416:	a904      	add	r1, sp, #16
 8006418:	185b      	adds	r3, r3, r1
 800641a:	212b      	movs	r1, #43	; 0x2b
 800641c:	7019      	strb	r1, [r3, #0]
 800641e:	9b03      	ldr	r3, [sp, #12]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	2b2a      	cmp	r3, #42	; 0x2a
 8006424:	d016      	beq.n	8006454 <_vfiprintf_r+0x14c>
 8006426:	2100      	movs	r1, #0
 8006428:	68eb      	ldr	r3, [r5, #12]
 800642a:	9f03      	ldr	r7, [sp, #12]
 800642c:	783a      	ldrb	r2, [r7, #0]
 800642e:	1c78      	adds	r0, r7, #1
 8006430:	3a30      	subs	r2, #48	; 0x30
 8006432:	4684      	mov	ip, r0
 8006434:	2a09      	cmp	r2, #9
 8006436:	d94f      	bls.n	80064d8 <_vfiprintf_r+0x1d0>
 8006438:	2900      	cmp	r1, #0
 800643a:	d111      	bne.n	8006460 <_vfiprintf_r+0x158>
 800643c:	e017      	b.n	800646e <_vfiprintf_r+0x166>
 800643e:	3701      	adds	r7, #1
 8006440:	e7a9      	b.n	8006396 <_vfiprintf_r+0x8e>
 8006442:	4b49      	ldr	r3, [pc, #292]	; (8006568 <_vfiprintf_r+0x260>)
 8006444:	682a      	ldr	r2, [r5, #0]
 8006446:	1ac0      	subs	r0, r0, r3
 8006448:	2301      	movs	r3, #1
 800644a:	4083      	lsls	r3, r0
 800644c:	4313      	orrs	r3, r2
 800644e:	602b      	str	r3, [r5, #0]
 8006450:	9703      	str	r7, [sp, #12]
 8006452:	e7cb      	b.n	80063ec <_vfiprintf_r+0xe4>
 8006454:	9b07      	ldr	r3, [sp, #28]
 8006456:	1d19      	adds	r1, r3, #4
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	9107      	str	r1, [sp, #28]
 800645c:	2b00      	cmp	r3, #0
 800645e:	db01      	blt.n	8006464 <_vfiprintf_r+0x15c>
 8006460:	930b      	str	r3, [sp, #44]	; 0x2c
 8006462:	e004      	b.n	800646e <_vfiprintf_r+0x166>
 8006464:	425b      	negs	r3, r3
 8006466:	60eb      	str	r3, [r5, #12]
 8006468:	2302      	movs	r3, #2
 800646a:	4313      	orrs	r3, r2
 800646c:	602b      	str	r3, [r5, #0]
 800646e:	783b      	ldrb	r3, [r7, #0]
 8006470:	2b2e      	cmp	r3, #46	; 0x2e
 8006472:	d10a      	bne.n	800648a <_vfiprintf_r+0x182>
 8006474:	787b      	ldrb	r3, [r7, #1]
 8006476:	2b2a      	cmp	r3, #42	; 0x2a
 8006478:	d137      	bne.n	80064ea <_vfiprintf_r+0x1e2>
 800647a:	9b07      	ldr	r3, [sp, #28]
 800647c:	3702      	adds	r7, #2
 800647e:	1d1a      	adds	r2, r3, #4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	9207      	str	r2, [sp, #28]
 8006484:	2b00      	cmp	r3, #0
 8006486:	db2d      	blt.n	80064e4 <_vfiprintf_r+0x1dc>
 8006488:	9309      	str	r3, [sp, #36]	; 0x24
 800648a:	2203      	movs	r2, #3
 800648c:	7839      	ldrb	r1, [r7, #0]
 800648e:	4837      	ldr	r0, [pc, #220]	; (800656c <_vfiprintf_r+0x264>)
 8006490:	f000 fc94 	bl	8006dbc <memchr>
 8006494:	2800      	cmp	r0, #0
 8006496:	d007      	beq.n	80064a8 <_vfiprintf_r+0x1a0>
 8006498:	4b34      	ldr	r3, [pc, #208]	; (800656c <_vfiprintf_r+0x264>)
 800649a:	682a      	ldr	r2, [r5, #0]
 800649c:	1ac0      	subs	r0, r0, r3
 800649e:	2340      	movs	r3, #64	; 0x40
 80064a0:	4083      	lsls	r3, r0
 80064a2:	4313      	orrs	r3, r2
 80064a4:	3701      	adds	r7, #1
 80064a6:	602b      	str	r3, [r5, #0]
 80064a8:	7839      	ldrb	r1, [r7, #0]
 80064aa:	1c7b      	adds	r3, r7, #1
 80064ac:	2206      	movs	r2, #6
 80064ae:	4830      	ldr	r0, [pc, #192]	; (8006570 <_vfiprintf_r+0x268>)
 80064b0:	9303      	str	r3, [sp, #12]
 80064b2:	7629      	strb	r1, [r5, #24]
 80064b4:	f000 fc82 	bl	8006dbc <memchr>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d045      	beq.n	8006548 <_vfiprintf_r+0x240>
 80064bc:	4b2d      	ldr	r3, [pc, #180]	; (8006574 <_vfiprintf_r+0x26c>)
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d127      	bne.n	8006512 <_vfiprintf_r+0x20a>
 80064c2:	2207      	movs	r2, #7
 80064c4:	9b07      	ldr	r3, [sp, #28]
 80064c6:	3307      	adds	r3, #7
 80064c8:	4393      	bics	r3, r2
 80064ca:	3308      	adds	r3, #8
 80064cc:	9307      	str	r3, [sp, #28]
 80064ce:	696b      	ldr	r3, [r5, #20]
 80064d0:	9a04      	ldr	r2, [sp, #16]
 80064d2:	189b      	adds	r3, r3, r2
 80064d4:	616b      	str	r3, [r5, #20]
 80064d6:	e75d      	b.n	8006394 <_vfiprintf_r+0x8c>
 80064d8:	210a      	movs	r1, #10
 80064da:	434b      	muls	r3, r1
 80064dc:	4667      	mov	r7, ip
 80064de:	189b      	adds	r3, r3, r2
 80064e0:	3909      	subs	r1, #9
 80064e2:	e7a3      	b.n	800642c <_vfiprintf_r+0x124>
 80064e4:	2301      	movs	r3, #1
 80064e6:	425b      	negs	r3, r3
 80064e8:	e7ce      	b.n	8006488 <_vfiprintf_r+0x180>
 80064ea:	2300      	movs	r3, #0
 80064ec:	001a      	movs	r2, r3
 80064ee:	3701      	adds	r7, #1
 80064f0:	606b      	str	r3, [r5, #4]
 80064f2:	7839      	ldrb	r1, [r7, #0]
 80064f4:	1c78      	adds	r0, r7, #1
 80064f6:	3930      	subs	r1, #48	; 0x30
 80064f8:	4684      	mov	ip, r0
 80064fa:	2909      	cmp	r1, #9
 80064fc:	d903      	bls.n	8006506 <_vfiprintf_r+0x1fe>
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0c3      	beq.n	800648a <_vfiprintf_r+0x182>
 8006502:	9209      	str	r2, [sp, #36]	; 0x24
 8006504:	e7c1      	b.n	800648a <_vfiprintf_r+0x182>
 8006506:	230a      	movs	r3, #10
 8006508:	435a      	muls	r2, r3
 800650a:	4667      	mov	r7, ip
 800650c:	1852      	adds	r2, r2, r1
 800650e:	3b09      	subs	r3, #9
 8006510:	e7ef      	b.n	80064f2 <_vfiprintf_r+0x1ea>
 8006512:	ab07      	add	r3, sp, #28
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	0022      	movs	r2, r4
 8006518:	0029      	movs	r1, r5
 800651a:	0030      	movs	r0, r6
 800651c:	4b16      	ldr	r3, [pc, #88]	; (8006578 <_vfiprintf_r+0x270>)
 800651e:	e000      	b.n	8006522 <_vfiprintf_r+0x21a>
 8006520:	bf00      	nop
 8006522:	9004      	str	r0, [sp, #16]
 8006524:	9b04      	ldr	r3, [sp, #16]
 8006526:	3301      	adds	r3, #1
 8006528:	d1d1      	bne.n	80064ce <_vfiprintf_r+0x1c6>
 800652a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800652c:	07db      	lsls	r3, r3, #31
 800652e:	d405      	bmi.n	800653c <_vfiprintf_r+0x234>
 8006530:	89a3      	ldrh	r3, [r4, #12]
 8006532:	059b      	lsls	r3, r3, #22
 8006534:	d402      	bmi.n	800653c <_vfiprintf_r+0x234>
 8006536:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006538:	f7ff fe24 	bl	8006184 <__retarget_lock_release_recursive>
 800653c:	89a3      	ldrh	r3, [r4, #12]
 800653e:	065b      	lsls	r3, r3, #25
 8006540:	d500      	bpl.n	8006544 <_vfiprintf_r+0x23c>
 8006542:	e70a      	b.n	800635a <_vfiprintf_r+0x52>
 8006544:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006546:	e70a      	b.n	800635e <_vfiprintf_r+0x56>
 8006548:	ab07      	add	r3, sp, #28
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	0022      	movs	r2, r4
 800654e:	0029      	movs	r1, r5
 8006550:	0030      	movs	r0, r6
 8006552:	4b09      	ldr	r3, [pc, #36]	; (8006578 <_vfiprintf_r+0x270>)
 8006554:	f000 f882 	bl	800665c <_printf_i>
 8006558:	e7e3      	b.n	8006522 <_vfiprintf_r+0x21a>
 800655a:	46c0      	nop			; (mov r8, r8)
 800655c:	080074d4 	.word	0x080074d4
 8006560:	080074f4 	.word	0x080074f4
 8006564:	080074b4 	.word	0x080074b4
 8006568:	08007514 	.word	0x08007514
 800656c:	0800751a 	.word	0x0800751a
 8006570:	0800751e 	.word	0x0800751e
 8006574:	00000000 	.word	0x00000000
 8006578:	080062e3 	.word	0x080062e3

0800657c <_printf_common>:
 800657c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800657e:	0015      	movs	r5, r2
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	688a      	ldr	r2, [r1, #8]
 8006584:	690b      	ldr	r3, [r1, #16]
 8006586:	000c      	movs	r4, r1
 8006588:	9000      	str	r0, [sp, #0]
 800658a:	4293      	cmp	r3, r2
 800658c:	da00      	bge.n	8006590 <_printf_common+0x14>
 800658e:	0013      	movs	r3, r2
 8006590:	0022      	movs	r2, r4
 8006592:	602b      	str	r3, [r5, #0]
 8006594:	3243      	adds	r2, #67	; 0x43
 8006596:	7812      	ldrb	r2, [r2, #0]
 8006598:	2a00      	cmp	r2, #0
 800659a:	d001      	beq.n	80065a0 <_printf_common+0x24>
 800659c:	3301      	adds	r3, #1
 800659e:	602b      	str	r3, [r5, #0]
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	069b      	lsls	r3, r3, #26
 80065a4:	d502      	bpl.n	80065ac <_printf_common+0x30>
 80065a6:	682b      	ldr	r3, [r5, #0]
 80065a8:	3302      	adds	r3, #2
 80065aa:	602b      	str	r3, [r5, #0]
 80065ac:	6822      	ldr	r2, [r4, #0]
 80065ae:	2306      	movs	r3, #6
 80065b0:	0017      	movs	r7, r2
 80065b2:	401f      	ands	r7, r3
 80065b4:	421a      	tst	r2, r3
 80065b6:	d027      	beq.n	8006608 <_printf_common+0x8c>
 80065b8:	0023      	movs	r3, r4
 80065ba:	3343      	adds	r3, #67	; 0x43
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	1e5a      	subs	r2, r3, #1
 80065c0:	4193      	sbcs	r3, r2
 80065c2:	6822      	ldr	r2, [r4, #0]
 80065c4:	0692      	lsls	r2, r2, #26
 80065c6:	d430      	bmi.n	800662a <_printf_common+0xae>
 80065c8:	0022      	movs	r2, r4
 80065ca:	9901      	ldr	r1, [sp, #4]
 80065cc:	9800      	ldr	r0, [sp, #0]
 80065ce:	9e08      	ldr	r6, [sp, #32]
 80065d0:	3243      	adds	r2, #67	; 0x43
 80065d2:	47b0      	blx	r6
 80065d4:	1c43      	adds	r3, r0, #1
 80065d6:	d025      	beq.n	8006624 <_printf_common+0xa8>
 80065d8:	2306      	movs	r3, #6
 80065da:	6820      	ldr	r0, [r4, #0]
 80065dc:	682a      	ldr	r2, [r5, #0]
 80065de:	68e1      	ldr	r1, [r4, #12]
 80065e0:	2500      	movs	r5, #0
 80065e2:	4003      	ands	r3, r0
 80065e4:	2b04      	cmp	r3, #4
 80065e6:	d103      	bne.n	80065f0 <_printf_common+0x74>
 80065e8:	1a8d      	subs	r5, r1, r2
 80065ea:	43eb      	mvns	r3, r5
 80065ec:	17db      	asrs	r3, r3, #31
 80065ee:	401d      	ands	r5, r3
 80065f0:	68a3      	ldr	r3, [r4, #8]
 80065f2:	6922      	ldr	r2, [r4, #16]
 80065f4:	4293      	cmp	r3, r2
 80065f6:	dd01      	ble.n	80065fc <_printf_common+0x80>
 80065f8:	1a9b      	subs	r3, r3, r2
 80065fa:	18ed      	adds	r5, r5, r3
 80065fc:	2700      	movs	r7, #0
 80065fe:	42bd      	cmp	r5, r7
 8006600:	d120      	bne.n	8006644 <_printf_common+0xc8>
 8006602:	2000      	movs	r0, #0
 8006604:	e010      	b.n	8006628 <_printf_common+0xac>
 8006606:	3701      	adds	r7, #1
 8006608:	68e3      	ldr	r3, [r4, #12]
 800660a:	682a      	ldr	r2, [r5, #0]
 800660c:	1a9b      	subs	r3, r3, r2
 800660e:	42bb      	cmp	r3, r7
 8006610:	ddd2      	ble.n	80065b8 <_printf_common+0x3c>
 8006612:	0022      	movs	r2, r4
 8006614:	2301      	movs	r3, #1
 8006616:	9901      	ldr	r1, [sp, #4]
 8006618:	9800      	ldr	r0, [sp, #0]
 800661a:	9e08      	ldr	r6, [sp, #32]
 800661c:	3219      	adds	r2, #25
 800661e:	47b0      	blx	r6
 8006620:	1c43      	adds	r3, r0, #1
 8006622:	d1f0      	bne.n	8006606 <_printf_common+0x8a>
 8006624:	2001      	movs	r0, #1
 8006626:	4240      	negs	r0, r0
 8006628:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800662a:	2030      	movs	r0, #48	; 0x30
 800662c:	18e1      	adds	r1, r4, r3
 800662e:	3143      	adds	r1, #67	; 0x43
 8006630:	7008      	strb	r0, [r1, #0]
 8006632:	0021      	movs	r1, r4
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	3145      	adds	r1, #69	; 0x45
 8006638:	7809      	ldrb	r1, [r1, #0]
 800663a:	18a2      	adds	r2, r4, r2
 800663c:	3243      	adds	r2, #67	; 0x43
 800663e:	3302      	adds	r3, #2
 8006640:	7011      	strb	r1, [r2, #0]
 8006642:	e7c1      	b.n	80065c8 <_printf_common+0x4c>
 8006644:	0022      	movs	r2, r4
 8006646:	2301      	movs	r3, #1
 8006648:	9901      	ldr	r1, [sp, #4]
 800664a:	9800      	ldr	r0, [sp, #0]
 800664c:	9e08      	ldr	r6, [sp, #32]
 800664e:	321a      	adds	r2, #26
 8006650:	47b0      	blx	r6
 8006652:	1c43      	adds	r3, r0, #1
 8006654:	d0e6      	beq.n	8006624 <_printf_common+0xa8>
 8006656:	3701      	adds	r7, #1
 8006658:	e7d1      	b.n	80065fe <_printf_common+0x82>
	...

0800665c <_printf_i>:
 800665c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800665e:	b08b      	sub	sp, #44	; 0x2c
 8006660:	9206      	str	r2, [sp, #24]
 8006662:	000a      	movs	r2, r1
 8006664:	3243      	adds	r2, #67	; 0x43
 8006666:	9307      	str	r3, [sp, #28]
 8006668:	9005      	str	r0, [sp, #20]
 800666a:	9204      	str	r2, [sp, #16]
 800666c:	7e0a      	ldrb	r2, [r1, #24]
 800666e:	000c      	movs	r4, r1
 8006670:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006672:	2a78      	cmp	r2, #120	; 0x78
 8006674:	d807      	bhi.n	8006686 <_printf_i+0x2a>
 8006676:	2a62      	cmp	r2, #98	; 0x62
 8006678:	d809      	bhi.n	800668e <_printf_i+0x32>
 800667a:	2a00      	cmp	r2, #0
 800667c:	d100      	bne.n	8006680 <_printf_i+0x24>
 800667e:	e0c1      	b.n	8006804 <_printf_i+0x1a8>
 8006680:	2a58      	cmp	r2, #88	; 0x58
 8006682:	d100      	bne.n	8006686 <_printf_i+0x2a>
 8006684:	e08c      	b.n	80067a0 <_printf_i+0x144>
 8006686:	0026      	movs	r6, r4
 8006688:	3642      	adds	r6, #66	; 0x42
 800668a:	7032      	strb	r2, [r6, #0]
 800668c:	e022      	b.n	80066d4 <_printf_i+0x78>
 800668e:	0010      	movs	r0, r2
 8006690:	3863      	subs	r0, #99	; 0x63
 8006692:	2815      	cmp	r0, #21
 8006694:	d8f7      	bhi.n	8006686 <_printf_i+0x2a>
 8006696:	f7f9 fd35 	bl	8000104 <__gnu_thumb1_case_shi>
 800669a:	0016      	.short	0x0016
 800669c:	fff6001f 	.word	0xfff6001f
 80066a0:	fff6fff6 	.word	0xfff6fff6
 80066a4:	001ffff6 	.word	0x001ffff6
 80066a8:	fff6fff6 	.word	0xfff6fff6
 80066ac:	fff6fff6 	.word	0xfff6fff6
 80066b0:	003600a8 	.word	0x003600a8
 80066b4:	fff6009a 	.word	0xfff6009a
 80066b8:	00b9fff6 	.word	0x00b9fff6
 80066bc:	0036fff6 	.word	0x0036fff6
 80066c0:	fff6fff6 	.word	0xfff6fff6
 80066c4:	009e      	.short	0x009e
 80066c6:	0026      	movs	r6, r4
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	3642      	adds	r6, #66	; 0x42
 80066cc:	1d11      	adds	r1, r2, #4
 80066ce:	6019      	str	r1, [r3, #0]
 80066d0:	6813      	ldr	r3, [r2, #0]
 80066d2:	7033      	strb	r3, [r6, #0]
 80066d4:	2301      	movs	r3, #1
 80066d6:	e0a7      	b.n	8006828 <_printf_i+0x1cc>
 80066d8:	6808      	ldr	r0, [r1, #0]
 80066da:	6819      	ldr	r1, [r3, #0]
 80066dc:	1d0a      	adds	r2, r1, #4
 80066de:	0605      	lsls	r5, r0, #24
 80066e0:	d50b      	bpl.n	80066fa <_printf_i+0x9e>
 80066e2:	680d      	ldr	r5, [r1, #0]
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	2d00      	cmp	r5, #0
 80066e8:	da03      	bge.n	80066f2 <_printf_i+0x96>
 80066ea:	232d      	movs	r3, #45	; 0x2d
 80066ec:	9a04      	ldr	r2, [sp, #16]
 80066ee:	426d      	negs	r5, r5
 80066f0:	7013      	strb	r3, [r2, #0]
 80066f2:	4b61      	ldr	r3, [pc, #388]	; (8006878 <_printf_i+0x21c>)
 80066f4:	270a      	movs	r7, #10
 80066f6:	9303      	str	r3, [sp, #12]
 80066f8:	e01b      	b.n	8006732 <_printf_i+0xd6>
 80066fa:	680d      	ldr	r5, [r1, #0]
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	0641      	lsls	r1, r0, #25
 8006700:	d5f1      	bpl.n	80066e6 <_printf_i+0x8a>
 8006702:	b22d      	sxth	r5, r5
 8006704:	e7ef      	b.n	80066e6 <_printf_i+0x8a>
 8006706:	680d      	ldr	r5, [r1, #0]
 8006708:	6819      	ldr	r1, [r3, #0]
 800670a:	1d08      	adds	r0, r1, #4
 800670c:	6018      	str	r0, [r3, #0]
 800670e:	062e      	lsls	r6, r5, #24
 8006710:	d501      	bpl.n	8006716 <_printf_i+0xba>
 8006712:	680d      	ldr	r5, [r1, #0]
 8006714:	e003      	b.n	800671e <_printf_i+0xc2>
 8006716:	066d      	lsls	r5, r5, #25
 8006718:	d5fb      	bpl.n	8006712 <_printf_i+0xb6>
 800671a:	680d      	ldr	r5, [r1, #0]
 800671c:	b2ad      	uxth	r5, r5
 800671e:	4b56      	ldr	r3, [pc, #344]	; (8006878 <_printf_i+0x21c>)
 8006720:	2708      	movs	r7, #8
 8006722:	9303      	str	r3, [sp, #12]
 8006724:	2a6f      	cmp	r2, #111	; 0x6f
 8006726:	d000      	beq.n	800672a <_printf_i+0xce>
 8006728:	3702      	adds	r7, #2
 800672a:	0023      	movs	r3, r4
 800672c:	2200      	movs	r2, #0
 800672e:	3343      	adds	r3, #67	; 0x43
 8006730:	701a      	strb	r2, [r3, #0]
 8006732:	6863      	ldr	r3, [r4, #4]
 8006734:	60a3      	str	r3, [r4, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	db03      	blt.n	8006742 <_printf_i+0xe6>
 800673a:	2204      	movs	r2, #4
 800673c:	6821      	ldr	r1, [r4, #0]
 800673e:	4391      	bics	r1, r2
 8006740:	6021      	str	r1, [r4, #0]
 8006742:	2d00      	cmp	r5, #0
 8006744:	d102      	bne.n	800674c <_printf_i+0xf0>
 8006746:	9e04      	ldr	r6, [sp, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00c      	beq.n	8006766 <_printf_i+0x10a>
 800674c:	9e04      	ldr	r6, [sp, #16]
 800674e:	0028      	movs	r0, r5
 8006750:	0039      	movs	r1, r7
 8006752:	f7f9 fd67 	bl	8000224 <__aeabi_uidivmod>
 8006756:	9b03      	ldr	r3, [sp, #12]
 8006758:	3e01      	subs	r6, #1
 800675a:	5c5b      	ldrb	r3, [r3, r1]
 800675c:	7033      	strb	r3, [r6, #0]
 800675e:	002b      	movs	r3, r5
 8006760:	0005      	movs	r5, r0
 8006762:	429f      	cmp	r7, r3
 8006764:	d9f3      	bls.n	800674e <_printf_i+0xf2>
 8006766:	2f08      	cmp	r7, #8
 8006768:	d109      	bne.n	800677e <_printf_i+0x122>
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	07db      	lsls	r3, r3, #31
 800676e:	d506      	bpl.n	800677e <_printf_i+0x122>
 8006770:	6863      	ldr	r3, [r4, #4]
 8006772:	6922      	ldr	r2, [r4, #16]
 8006774:	4293      	cmp	r3, r2
 8006776:	dc02      	bgt.n	800677e <_printf_i+0x122>
 8006778:	2330      	movs	r3, #48	; 0x30
 800677a:	3e01      	subs	r6, #1
 800677c:	7033      	strb	r3, [r6, #0]
 800677e:	9b04      	ldr	r3, [sp, #16]
 8006780:	1b9b      	subs	r3, r3, r6
 8006782:	6123      	str	r3, [r4, #16]
 8006784:	9b07      	ldr	r3, [sp, #28]
 8006786:	0021      	movs	r1, r4
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	9805      	ldr	r0, [sp, #20]
 800678c:	9b06      	ldr	r3, [sp, #24]
 800678e:	aa09      	add	r2, sp, #36	; 0x24
 8006790:	f7ff fef4 	bl	800657c <_printf_common>
 8006794:	1c43      	adds	r3, r0, #1
 8006796:	d14c      	bne.n	8006832 <_printf_i+0x1d6>
 8006798:	2001      	movs	r0, #1
 800679a:	4240      	negs	r0, r0
 800679c:	b00b      	add	sp, #44	; 0x2c
 800679e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067a0:	3145      	adds	r1, #69	; 0x45
 80067a2:	700a      	strb	r2, [r1, #0]
 80067a4:	4a34      	ldr	r2, [pc, #208]	; (8006878 <_printf_i+0x21c>)
 80067a6:	9203      	str	r2, [sp, #12]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	6821      	ldr	r1, [r4, #0]
 80067ac:	ca20      	ldmia	r2!, {r5}
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	0608      	lsls	r0, r1, #24
 80067b2:	d516      	bpl.n	80067e2 <_printf_i+0x186>
 80067b4:	07cb      	lsls	r3, r1, #31
 80067b6:	d502      	bpl.n	80067be <_printf_i+0x162>
 80067b8:	2320      	movs	r3, #32
 80067ba:	4319      	orrs	r1, r3
 80067bc:	6021      	str	r1, [r4, #0]
 80067be:	2710      	movs	r7, #16
 80067c0:	2d00      	cmp	r5, #0
 80067c2:	d1b2      	bne.n	800672a <_printf_i+0xce>
 80067c4:	2320      	movs	r3, #32
 80067c6:	6822      	ldr	r2, [r4, #0]
 80067c8:	439a      	bics	r2, r3
 80067ca:	6022      	str	r2, [r4, #0]
 80067cc:	e7ad      	b.n	800672a <_printf_i+0xce>
 80067ce:	2220      	movs	r2, #32
 80067d0:	6809      	ldr	r1, [r1, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	6022      	str	r2, [r4, #0]
 80067d6:	0022      	movs	r2, r4
 80067d8:	2178      	movs	r1, #120	; 0x78
 80067da:	3245      	adds	r2, #69	; 0x45
 80067dc:	7011      	strb	r1, [r2, #0]
 80067de:	4a27      	ldr	r2, [pc, #156]	; (800687c <_printf_i+0x220>)
 80067e0:	e7e1      	b.n	80067a6 <_printf_i+0x14a>
 80067e2:	0648      	lsls	r0, r1, #25
 80067e4:	d5e6      	bpl.n	80067b4 <_printf_i+0x158>
 80067e6:	b2ad      	uxth	r5, r5
 80067e8:	e7e4      	b.n	80067b4 <_printf_i+0x158>
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	680d      	ldr	r5, [r1, #0]
 80067ee:	1d10      	adds	r0, r2, #4
 80067f0:	6949      	ldr	r1, [r1, #20]
 80067f2:	6018      	str	r0, [r3, #0]
 80067f4:	6813      	ldr	r3, [r2, #0]
 80067f6:	062e      	lsls	r6, r5, #24
 80067f8:	d501      	bpl.n	80067fe <_printf_i+0x1a2>
 80067fa:	6019      	str	r1, [r3, #0]
 80067fc:	e002      	b.n	8006804 <_printf_i+0x1a8>
 80067fe:	066d      	lsls	r5, r5, #25
 8006800:	d5fb      	bpl.n	80067fa <_printf_i+0x19e>
 8006802:	8019      	strh	r1, [r3, #0]
 8006804:	2300      	movs	r3, #0
 8006806:	9e04      	ldr	r6, [sp, #16]
 8006808:	6123      	str	r3, [r4, #16]
 800680a:	e7bb      	b.n	8006784 <_printf_i+0x128>
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	1d11      	adds	r1, r2, #4
 8006810:	6019      	str	r1, [r3, #0]
 8006812:	6816      	ldr	r6, [r2, #0]
 8006814:	2100      	movs	r1, #0
 8006816:	0030      	movs	r0, r6
 8006818:	6862      	ldr	r2, [r4, #4]
 800681a:	f000 facf 	bl	8006dbc <memchr>
 800681e:	2800      	cmp	r0, #0
 8006820:	d001      	beq.n	8006826 <_printf_i+0x1ca>
 8006822:	1b80      	subs	r0, r0, r6
 8006824:	6060      	str	r0, [r4, #4]
 8006826:	6863      	ldr	r3, [r4, #4]
 8006828:	6123      	str	r3, [r4, #16]
 800682a:	2300      	movs	r3, #0
 800682c:	9a04      	ldr	r2, [sp, #16]
 800682e:	7013      	strb	r3, [r2, #0]
 8006830:	e7a8      	b.n	8006784 <_printf_i+0x128>
 8006832:	6923      	ldr	r3, [r4, #16]
 8006834:	0032      	movs	r2, r6
 8006836:	9906      	ldr	r1, [sp, #24]
 8006838:	9805      	ldr	r0, [sp, #20]
 800683a:	9d07      	ldr	r5, [sp, #28]
 800683c:	47a8      	blx	r5
 800683e:	1c43      	adds	r3, r0, #1
 8006840:	d0aa      	beq.n	8006798 <_printf_i+0x13c>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	079b      	lsls	r3, r3, #30
 8006846:	d415      	bmi.n	8006874 <_printf_i+0x218>
 8006848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800684a:	68e0      	ldr	r0, [r4, #12]
 800684c:	4298      	cmp	r0, r3
 800684e:	daa5      	bge.n	800679c <_printf_i+0x140>
 8006850:	0018      	movs	r0, r3
 8006852:	e7a3      	b.n	800679c <_printf_i+0x140>
 8006854:	0022      	movs	r2, r4
 8006856:	2301      	movs	r3, #1
 8006858:	9906      	ldr	r1, [sp, #24]
 800685a:	9805      	ldr	r0, [sp, #20]
 800685c:	9e07      	ldr	r6, [sp, #28]
 800685e:	3219      	adds	r2, #25
 8006860:	47b0      	blx	r6
 8006862:	1c43      	adds	r3, r0, #1
 8006864:	d098      	beq.n	8006798 <_printf_i+0x13c>
 8006866:	3501      	adds	r5, #1
 8006868:	68e3      	ldr	r3, [r4, #12]
 800686a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800686c:	1a9b      	subs	r3, r3, r2
 800686e:	42ab      	cmp	r3, r5
 8006870:	dcf0      	bgt.n	8006854 <_printf_i+0x1f8>
 8006872:	e7e9      	b.n	8006848 <_printf_i+0x1ec>
 8006874:	2500      	movs	r5, #0
 8006876:	e7f7      	b.n	8006868 <_printf_i+0x20c>
 8006878:	08007525 	.word	0x08007525
 800687c:	08007536 	.word	0x08007536

08006880 <_sbrk_r>:
 8006880:	2300      	movs	r3, #0
 8006882:	b570      	push	{r4, r5, r6, lr}
 8006884:	4d06      	ldr	r5, [pc, #24]	; (80068a0 <_sbrk_r+0x20>)
 8006886:	0004      	movs	r4, r0
 8006888:	0008      	movs	r0, r1
 800688a:	602b      	str	r3, [r5, #0]
 800688c:	f7fb f8d0 	bl	8001a30 <_sbrk>
 8006890:	1c43      	adds	r3, r0, #1
 8006892:	d103      	bne.n	800689c <_sbrk_r+0x1c>
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d000      	beq.n	800689c <_sbrk_r+0x1c>
 800689a:	6023      	str	r3, [r4, #0]
 800689c:	bd70      	pop	{r4, r5, r6, pc}
 800689e:	46c0      	nop			; (mov r8, r8)
 80068a0:	20000260 	.word	0x20000260

080068a4 <__sread>:
 80068a4:	b570      	push	{r4, r5, r6, lr}
 80068a6:	000c      	movs	r4, r1
 80068a8:	250e      	movs	r5, #14
 80068aa:	5f49      	ldrsh	r1, [r1, r5]
 80068ac:	f000 faec 	bl	8006e88 <_read_r>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	db03      	blt.n	80068bc <__sread+0x18>
 80068b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80068b6:	181b      	adds	r3, r3, r0
 80068b8:	6563      	str	r3, [r4, #84]	; 0x54
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	89a3      	ldrh	r3, [r4, #12]
 80068be:	4a02      	ldr	r2, [pc, #8]	; (80068c8 <__sread+0x24>)
 80068c0:	4013      	ands	r3, r2
 80068c2:	81a3      	strh	r3, [r4, #12]
 80068c4:	e7f9      	b.n	80068ba <__sread+0x16>
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	ffffefff 	.word	0xffffefff

080068cc <__swrite>:
 80068cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ce:	001f      	movs	r7, r3
 80068d0:	898b      	ldrh	r3, [r1, #12]
 80068d2:	0005      	movs	r5, r0
 80068d4:	000c      	movs	r4, r1
 80068d6:	0016      	movs	r6, r2
 80068d8:	05db      	lsls	r3, r3, #23
 80068da:	d505      	bpl.n	80068e8 <__swrite+0x1c>
 80068dc:	230e      	movs	r3, #14
 80068de:	5ec9      	ldrsh	r1, [r1, r3]
 80068e0:	2200      	movs	r2, #0
 80068e2:	2302      	movs	r3, #2
 80068e4:	f000 f9ea 	bl	8006cbc <_lseek_r>
 80068e8:	89a3      	ldrh	r3, [r4, #12]
 80068ea:	4a05      	ldr	r2, [pc, #20]	; (8006900 <__swrite+0x34>)
 80068ec:	0028      	movs	r0, r5
 80068ee:	4013      	ands	r3, r2
 80068f0:	81a3      	strh	r3, [r4, #12]
 80068f2:	0032      	movs	r2, r6
 80068f4:	230e      	movs	r3, #14
 80068f6:	5ee1      	ldrsh	r1, [r4, r3]
 80068f8:	003b      	movs	r3, r7
 80068fa:	f000 f875 	bl	80069e8 <_write_r>
 80068fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006900:	ffffefff 	.word	0xffffefff

08006904 <__sseek>:
 8006904:	b570      	push	{r4, r5, r6, lr}
 8006906:	000c      	movs	r4, r1
 8006908:	250e      	movs	r5, #14
 800690a:	5f49      	ldrsh	r1, [r1, r5]
 800690c:	f000 f9d6 	bl	8006cbc <_lseek_r>
 8006910:	89a3      	ldrh	r3, [r4, #12]
 8006912:	1c42      	adds	r2, r0, #1
 8006914:	d103      	bne.n	800691e <__sseek+0x1a>
 8006916:	4a05      	ldr	r2, [pc, #20]	; (800692c <__sseek+0x28>)
 8006918:	4013      	ands	r3, r2
 800691a:	81a3      	strh	r3, [r4, #12]
 800691c:	bd70      	pop	{r4, r5, r6, pc}
 800691e:	2280      	movs	r2, #128	; 0x80
 8006920:	0152      	lsls	r2, r2, #5
 8006922:	4313      	orrs	r3, r2
 8006924:	81a3      	strh	r3, [r4, #12]
 8006926:	6560      	str	r0, [r4, #84]	; 0x54
 8006928:	e7f8      	b.n	800691c <__sseek+0x18>
 800692a:	46c0      	nop			; (mov r8, r8)
 800692c:	ffffefff 	.word	0xffffefff

08006930 <__sclose>:
 8006930:	b510      	push	{r4, lr}
 8006932:	230e      	movs	r3, #14
 8006934:	5ec9      	ldrsh	r1, [r1, r3]
 8006936:	f000 f8e3 	bl	8006b00 <_close_r>
 800693a:	bd10      	pop	{r4, pc}

0800693c <__swbuf_r>:
 800693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693e:	0005      	movs	r5, r0
 8006940:	000e      	movs	r6, r1
 8006942:	0014      	movs	r4, r2
 8006944:	2800      	cmp	r0, #0
 8006946:	d004      	beq.n	8006952 <__swbuf_r+0x16>
 8006948:	6983      	ldr	r3, [r0, #24]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <__swbuf_r+0x16>
 800694e:	f7ff fb77 	bl	8006040 <__sinit>
 8006952:	4b22      	ldr	r3, [pc, #136]	; (80069dc <__swbuf_r+0xa0>)
 8006954:	429c      	cmp	r4, r3
 8006956:	d12e      	bne.n	80069b6 <__swbuf_r+0x7a>
 8006958:	686c      	ldr	r4, [r5, #4]
 800695a:	69a3      	ldr	r3, [r4, #24]
 800695c:	60a3      	str	r3, [r4, #8]
 800695e:	89a3      	ldrh	r3, [r4, #12]
 8006960:	071b      	lsls	r3, r3, #28
 8006962:	d532      	bpl.n	80069ca <__swbuf_r+0x8e>
 8006964:	6923      	ldr	r3, [r4, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d02f      	beq.n	80069ca <__swbuf_r+0x8e>
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	6922      	ldr	r2, [r4, #16]
 800696e:	b2f7      	uxtb	r7, r6
 8006970:	1a98      	subs	r0, r3, r2
 8006972:	6963      	ldr	r3, [r4, #20]
 8006974:	b2f6      	uxtb	r6, r6
 8006976:	4283      	cmp	r3, r0
 8006978:	dc05      	bgt.n	8006986 <__swbuf_r+0x4a>
 800697a:	0021      	movs	r1, r4
 800697c:	0028      	movs	r0, r5
 800697e:	f000 f95d 	bl	8006c3c <_fflush_r>
 8006982:	2800      	cmp	r0, #0
 8006984:	d127      	bne.n	80069d6 <__swbuf_r+0x9a>
 8006986:	68a3      	ldr	r3, [r4, #8]
 8006988:	3001      	adds	r0, #1
 800698a:	3b01      	subs	r3, #1
 800698c:	60a3      	str	r3, [r4, #8]
 800698e:	6823      	ldr	r3, [r4, #0]
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	6022      	str	r2, [r4, #0]
 8006994:	701f      	strb	r7, [r3, #0]
 8006996:	6963      	ldr	r3, [r4, #20]
 8006998:	4283      	cmp	r3, r0
 800699a:	d004      	beq.n	80069a6 <__swbuf_r+0x6a>
 800699c:	89a3      	ldrh	r3, [r4, #12]
 800699e:	07db      	lsls	r3, r3, #31
 80069a0:	d507      	bpl.n	80069b2 <__swbuf_r+0x76>
 80069a2:	2e0a      	cmp	r6, #10
 80069a4:	d105      	bne.n	80069b2 <__swbuf_r+0x76>
 80069a6:	0021      	movs	r1, r4
 80069a8:	0028      	movs	r0, r5
 80069aa:	f000 f947 	bl	8006c3c <_fflush_r>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d111      	bne.n	80069d6 <__swbuf_r+0x9a>
 80069b2:	0030      	movs	r0, r6
 80069b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069b6:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <__swbuf_r+0xa4>)
 80069b8:	429c      	cmp	r4, r3
 80069ba:	d101      	bne.n	80069c0 <__swbuf_r+0x84>
 80069bc:	68ac      	ldr	r4, [r5, #8]
 80069be:	e7cc      	b.n	800695a <__swbuf_r+0x1e>
 80069c0:	4b08      	ldr	r3, [pc, #32]	; (80069e4 <__swbuf_r+0xa8>)
 80069c2:	429c      	cmp	r4, r3
 80069c4:	d1c9      	bne.n	800695a <__swbuf_r+0x1e>
 80069c6:	68ec      	ldr	r4, [r5, #12]
 80069c8:	e7c7      	b.n	800695a <__swbuf_r+0x1e>
 80069ca:	0021      	movs	r1, r4
 80069cc:	0028      	movs	r0, r5
 80069ce:	f000 f81f 	bl	8006a10 <__swsetup_r>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d0c9      	beq.n	800696a <__swbuf_r+0x2e>
 80069d6:	2601      	movs	r6, #1
 80069d8:	4276      	negs	r6, r6
 80069da:	e7ea      	b.n	80069b2 <__swbuf_r+0x76>
 80069dc:	080074d4 	.word	0x080074d4
 80069e0:	080074f4 	.word	0x080074f4
 80069e4:	080074b4 	.word	0x080074b4

080069e8 <_write_r>:
 80069e8:	b570      	push	{r4, r5, r6, lr}
 80069ea:	0004      	movs	r4, r0
 80069ec:	0008      	movs	r0, r1
 80069ee:	0011      	movs	r1, r2
 80069f0:	001a      	movs	r2, r3
 80069f2:	2300      	movs	r3, #0
 80069f4:	4d05      	ldr	r5, [pc, #20]	; (8006a0c <_write_r+0x24>)
 80069f6:	602b      	str	r3, [r5, #0]
 80069f8:	f7fa ffd1 	bl	800199e <_write>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	d103      	bne.n	8006a08 <_write_r+0x20>
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d000      	beq.n	8006a08 <_write_r+0x20>
 8006a06:	6023      	str	r3, [r4, #0]
 8006a08:	bd70      	pop	{r4, r5, r6, pc}
 8006a0a:	46c0      	nop			; (mov r8, r8)
 8006a0c:	20000260 	.word	0x20000260

08006a10 <__swsetup_r>:
 8006a10:	4b37      	ldr	r3, [pc, #220]	; (8006af0 <__swsetup_r+0xe0>)
 8006a12:	b570      	push	{r4, r5, r6, lr}
 8006a14:	681d      	ldr	r5, [r3, #0]
 8006a16:	0006      	movs	r6, r0
 8006a18:	000c      	movs	r4, r1
 8006a1a:	2d00      	cmp	r5, #0
 8006a1c:	d005      	beq.n	8006a2a <__swsetup_r+0x1a>
 8006a1e:	69ab      	ldr	r3, [r5, #24]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d102      	bne.n	8006a2a <__swsetup_r+0x1a>
 8006a24:	0028      	movs	r0, r5
 8006a26:	f7ff fb0b 	bl	8006040 <__sinit>
 8006a2a:	4b32      	ldr	r3, [pc, #200]	; (8006af4 <__swsetup_r+0xe4>)
 8006a2c:	429c      	cmp	r4, r3
 8006a2e:	d10f      	bne.n	8006a50 <__swsetup_r+0x40>
 8006a30:	686c      	ldr	r4, [r5, #4]
 8006a32:	230c      	movs	r3, #12
 8006a34:	5ee2      	ldrsh	r2, [r4, r3]
 8006a36:	b293      	uxth	r3, r2
 8006a38:	0711      	lsls	r1, r2, #28
 8006a3a:	d42d      	bmi.n	8006a98 <__swsetup_r+0x88>
 8006a3c:	06d9      	lsls	r1, r3, #27
 8006a3e:	d411      	bmi.n	8006a64 <__swsetup_r+0x54>
 8006a40:	2309      	movs	r3, #9
 8006a42:	2001      	movs	r0, #1
 8006a44:	6033      	str	r3, [r6, #0]
 8006a46:	3337      	adds	r3, #55	; 0x37
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	81a3      	strh	r3, [r4, #12]
 8006a4c:	4240      	negs	r0, r0
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
 8006a50:	4b29      	ldr	r3, [pc, #164]	; (8006af8 <__swsetup_r+0xe8>)
 8006a52:	429c      	cmp	r4, r3
 8006a54:	d101      	bne.n	8006a5a <__swsetup_r+0x4a>
 8006a56:	68ac      	ldr	r4, [r5, #8]
 8006a58:	e7eb      	b.n	8006a32 <__swsetup_r+0x22>
 8006a5a:	4b28      	ldr	r3, [pc, #160]	; (8006afc <__swsetup_r+0xec>)
 8006a5c:	429c      	cmp	r4, r3
 8006a5e:	d1e8      	bne.n	8006a32 <__swsetup_r+0x22>
 8006a60:	68ec      	ldr	r4, [r5, #12]
 8006a62:	e7e6      	b.n	8006a32 <__swsetup_r+0x22>
 8006a64:	075b      	lsls	r3, r3, #29
 8006a66:	d513      	bpl.n	8006a90 <__swsetup_r+0x80>
 8006a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a6a:	2900      	cmp	r1, #0
 8006a6c:	d008      	beq.n	8006a80 <__swsetup_r+0x70>
 8006a6e:	0023      	movs	r3, r4
 8006a70:	3344      	adds	r3, #68	; 0x44
 8006a72:	4299      	cmp	r1, r3
 8006a74:	d002      	beq.n	8006a7c <__swsetup_r+0x6c>
 8006a76:	0030      	movs	r0, r6
 8006a78:	f000 f9bc 	bl	8006df4 <_free_r>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	6363      	str	r3, [r4, #52]	; 0x34
 8006a80:	2224      	movs	r2, #36	; 0x24
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	4393      	bics	r3, r2
 8006a86:	81a3      	strh	r3, [r4, #12]
 8006a88:	2300      	movs	r3, #0
 8006a8a:	6063      	str	r3, [r4, #4]
 8006a8c:	6923      	ldr	r3, [r4, #16]
 8006a8e:	6023      	str	r3, [r4, #0]
 8006a90:	2308      	movs	r3, #8
 8006a92:	89a2      	ldrh	r2, [r4, #12]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	81a3      	strh	r3, [r4, #12]
 8006a98:	6923      	ldr	r3, [r4, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10b      	bne.n	8006ab6 <__swsetup_r+0xa6>
 8006a9e:	21a0      	movs	r1, #160	; 0xa0
 8006aa0:	2280      	movs	r2, #128	; 0x80
 8006aa2:	89a3      	ldrh	r3, [r4, #12]
 8006aa4:	0089      	lsls	r1, r1, #2
 8006aa6:	0092      	lsls	r2, r2, #2
 8006aa8:	400b      	ands	r3, r1
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d003      	beq.n	8006ab6 <__swsetup_r+0xa6>
 8006aae:	0021      	movs	r1, r4
 8006ab0:	0030      	movs	r0, r6
 8006ab2:	f000 f93f 	bl	8006d34 <__smakebuf_r>
 8006ab6:	220c      	movs	r2, #12
 8006ab8:	5ea3      	ldrsh	r3, [r4, r2]
 8006aba:	2001      	movs	r0, #1
 8006abc:	001a      	movs	r2, r3
 8006abe:	b299      	uxth	r1, r3
 8006ac0:	4002      	ands	r2, r0
 8006ac2:	4203      	tst	r3, r0
 8006ac4:	d00f      	beq.n	8006ae6 <__swsetup_r+0xd6>
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	60a2      	str	r2, [r4, #8]
 8006aca:	6962      	ldr	r2, [r4, #20]
 8006acc:	4252      	negs	r2, r2
 8006ace:	61a2      	str	r2, [r4, #24]
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	6922      	ldr	r2, [r4, #16]
 8006ad4:	4282      	cmp	r2, r0
 8006ad6:	d1ba      	bne.n	8006a4e <__swsetup_r+0x3e>
 8006ad8:	060a      	lsls	r2, r1, #24
 8006ada:	d5b8      	bpl.n	8006a4e <__swsetup_r+0x3e>
 8006adc:	2240      	movs	r2, #64	; 0x40
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	81a3      	strh	r3, [r4, #12]
 8006ae2:	3801      	subs	r0, #1
 8006ae4:	e7b3      	b.n	8006a4e <__swsetup_r+0x3e>
 8006ae6:	0788      	lsls	r0, r1, #30
 8006ae8:	d400      	bmi.n	8006aec <__swsetup_r+0xdc>
 8006aea:	6962      	ldr	r2, [r4, #20]
 8006aec:	60a2      	str	r2, [r4, #8]
 8006aee:	e7ef      	b.n	8006ad0 <__swsetup_r+0xc0>
 8006af0:	2000003c 	.word	0x2000003c
 8006af4:	080074d4 	.word	0x080074d4
 8006af8:	080074f4 	.word	0x080074f4
 8006afc:	080074b4 	.word	0x080074b4

08006b00 <_close_r>:
 8006b00:	2300      	movs	r3, #0
 8006b02:	b570      	push	{r4, r5, r6, lr}
 8006b04:	4d06      	ldr	r5, [pc, #24]	; (8006b20 <_close_r+0x20>)
 8006b06:	0004      	movs	r4, r0
 8006b08:	0008      	movs	r0, r1
 8006b0a:	602b      	str	r3, [r5, #0]
 8006b0c:	f7fa ff63 	bl	80019d6 <_close>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d103      	bne.n	8006b1c <_close_r+0x1c>
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d000      	beq.n	8006b1c <_close_r+0x1c>
 8006b1a:	6023      	str	r3, [r4, #0]
 8006b1c:	bd70      	pop	{r4, r5, r6, pc}
 8006b1e:	46c0      	nop			; (mov r8, r8)
 8006b20:	20000260 	.word	0x20000260

08006b24 <__sflush_r>:
 8006b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b26:	898b      	ldrh	r3, [r1, #12]
 8006b28:	0005      	movs	r5, r0
 8006b2a:	000c      	movs	r4, r1
 8006b2c:	071a      	lsls	r2, r3, #28
 8006b2e:	d45f      	bmi.n	8006bf0 <__sflush_r+0xcc>
 8006b30:	684a      	ldr	r2, [r1, #4]
 8006b32:	2a00      	cmp	r2, #0
 8006b34:	dc04      	bgt.n	8006b40 <__sflush_r+0x1c>
 8006b36:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006b38:	2a00      	cmp	r2, #0
 8006b3a:	dc01      	bgt.n	8006b40 <__sflush_r+0x1c>
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b40:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006b42:	2f00      	cmp	r7, #0
 8006b44:	d0fa      	beq.n	8006b3c <__sflush_r+0x18>
 8006b46:	2200      	movs	r2, #0
 8006b48:	2180      	movs	r1, #128	; 0x80
 8006b4a:	682e      	ldr	r6, [r5, #0]
 8006b4c:	602a      	str	r2, [r5, #0]
 8006b4e:	001a      	movs	r2, r3
 8006b50:	0149      	lsls	r1, r1, #5
 8006b52:	400a      	ands	r2, r1
 8006b54:	420b      	tst	r3, r1
 8006b56:	d034      	beq.n	8006bc2 <__sflush_r+0x9e>
 8006b58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	075b      	lsls	r3, r3, #29
 8006b5e:	d506      	bpl.n	8006b6e <__sflush_r+0x4a>
 8006b60:	6863      	ldr	r3, [r4, #4]
 8006b62:	1ac0      	subs	r0, r0, r3
 8006b64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <__sflush_r+0x4a>
 8006b6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b6c:	1ac0      	subs	r0, r0, r3
 8006b6e:	0002      	movs	r2, r0
 8006b70:	6a21      	ldr	r1, [r4, #32]
 8006b72:	2300      	movs	r3, #0
 8006b74:	0028      	movs	r0, r5
 8006b76:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006b78:	47b8      	blx	r7
 8006b7a:	89a1      	ldrh	r1, [r4, #12]
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	d106      	bne.n	8006b8e <__sflush_r+0x6a>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	2b1d      	cmp	r3, #29
 8006b84:	d831      	bhi.n	8006bea <__sflush_r+0xc6>
 8006b86:	4a2c      	ldr	r2, [pc, #176]	; (8006c38 <__sflush_r+0x114>)
 8006b88:	40da      	lsrs	r2, r3
 8006b8a:	07d3      	lsls	r3, r2, #31
 8006b8c:	d52d      	bpl.n	8006bea <__sflush_r+0xc6>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	6063      	str	r3, [r4, #4]
 8006b92:	6923      	ldr	r3, [r4, #16]
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	04cb      	lsls	r3, r1, #19
 8006b98:	d505      	bpl.n	8006ba6 <__sflush_r+0x82>
 8006b9a:	1c43      	adds	r3, r0, #1
 8006b9c:	d102      	bne.n	8006ba4 <__sflush_r+0x80>
 8006b9e:	682b      	ldr	r3, [r5, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d100      	bne.n	8006ba6 <__sflush_r+0x82>
 8006ba4:	6560      	str	r0, [r4, #84]	; 0x54
 8006ba6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ba8:	602e      	str	r6, [r5, #0]
 8006baa:	2900      	cmp	r1, #0
 8006bac:	d0c6      	beq.n	8006b3c <__sflush_r+0x18>
 8006bae:	0023      	movs	r3, r4
 8006bb0:	3344      	adds	r3, #68	; 0x44
 8006bb2:	4299      	cmp	r1, r3
 8006bb4:	d002      	beq.n	8006bbc <__sflush_r+0x98>
 8006bb6:	0028      	movs	r0, r5
 8006bb8:	f000 f91c 	bl	8006df4 <_free_r>
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	6360      	str	r0, [r4, #52]	; 0x34
 8006bc0:	e7bd      	b.n	8006b3e <__sflush_r+0x1a>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	0028      	movs	r0, r5
 8006bc6:	6a21      	ldr	r1, [r4, #32]
 8006bc8:	47b8      	blx	r7
 8006bca:	1c43      	adds	r3, r0, #1
 8006bcc:	d1c5      	bne.n	8006b5a <__sflush_r+0x36>
 8006bce:	682b      	ldr	r3, [r5, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d0c2      	beq.n	8006b5a <__sflush_r+0x36>
 8006bd4:	2b1d      	cmp	r3, #29
 8006bd6:	d001      	beq.n	8006bdc <__sflush_r+0xb8>
 8006bd8:	2b16      	cmp	r3, #22
 8006bda:	d101      	bne.n	8006be0 <__sflush_r+0xbc>
 8006bdc:	602e      	str	r6, [r5, #0]
 8006bde:	e7ad      	b.n	8006b3c <__sflush_r+0x18>
 8006be0:	2340      	movs	r3, #64	; 0x40
 8006be2:	89a2      	ldrh	r2, [r4, #12]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	e7a9      	b.n	8006b3e <__sflush_r+0x1a>
 8006bea:	2340      	movs	r3, #64	; 0x40
 8006bec:	430b      	orrs	r3, r1
 8006bee:	e7fa      	b.n	8006be6 <__sflush_r+0xc2>
 8006bf0:	690f      	ldr	r7, [r1, #16]
 8006bf2:	2f00      	cmp	r7, #0
 8006bf4:	d0a2      	beq.n	8006b3c <__sflush_r+0x18>
 8006bf6:	680a      	ldr	r2, [r1, #0]
 8006bf8:	600f      	str	r7, [r1, #0]
 8006bfa:	1bd2      	subs	r2, r2, r7
 8006bfc:	9201      	str	r2, [sp, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	079b      	lsls	r3, r3, #30
 8006c02:	d100      	bne.n	8006c06 <__sflush_r+0xe2>
 8006c04:	694a      	ldr	r2, [r1, #20]
 8006c06:	60a2      	str	r2, [r4, #8]
 8006c08:	9b01      	ldr	r3, [sp, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	dc00      	bgt.n	8006c10 <__sflush_r+0xec>
 8006c0e:	e795      	b.n	8006b3c <__sflush_r+0x18>
 8006c10:	003a      	movs	r2, r7
 8006c12:	0028      	movs	r0, r5
 8006c14:	9b01      	ldr	r3, [sp, #4]
 8006c16:	6a21      	ldr	r1, [r4, #32]
 8006c18:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c1a:	47b0      	blx	r6
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	dc06      	bgt.n	8006c2e <__sflush_r+0x10a>
 8006c20:	2340      	movs	r3, #64	; 0x40
 8006c22:	2001      	movs	r0, #1
 8006c24:	89a2      	ldrh	r2, [r4, #12]
 8006c26:	4240      	negs	r0, r0
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	81a3      	strh	r3, [r4, #12]
 8006c2c:	e787      	b.n	8006b3e <__sflush_r+0x1a>
 8006c2e:	9b01      	ldr	r3, [sp, #4]
 8006c30:	183f      	adds	r7, r7, r0
 8006c32:	1a1b      	subs	r3, r3, r0
 8006c34:	9301      	str	r3, [sp, #4]
 8006c36:	e7e7      	b.n	8006c08 <__sflush_r+0xe4>
 8006c38:	20400001 	.word	0x20400001

08006c3c <_fflush_r>:
 8006c3c:	690b      	ldr	r3, [r1, #16]
 8006c3e:	b570      	push	{r4, r5, r6, lr}
 8006c40:	0005      	movs	r5, r0
 8006c42:	000c      	movs	r4, r1
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d102      	bne.n	8006c4e <_fflush_r+0x12>
 8006c48:	2500      	movs	r5, #0
 8006c4a:	0028      	movs	r0, r5
 8006c4c:	bd70      	pop	{r4, r5, r6, pc}
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d004      	beq.n	8006c5c <_fflush_r+0x20>
 8006c52:	6983      	ldr	r3, [r0, #24]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <_fflush_r+0x20>
 8006c58:	f7ff f9f2 	bl	8006040 <__sinit>
 8006c5c:	4b14      	ldr	r3, [pc, #80]	; (8006cb0 <_fflush_r+0x74>)
 8006c5e:	429c      	cmp	r4, r3
 8006c60:	d11b      	bne.n	8006c9a <_fflush_r+0x5e>
 8006c62:	686c      	ldr	r4, [r5, #4]
 8006c64:	220c      	movs	r2, #12
 8006c66:	5ea3      	ldrsh	r3, [r4, r2]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0ed      	beq.n	8006c48 <_fflush_r+0xc>
 8006c6c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c6e:	07d2      	lsls	r2, r2, #31
 8006c70:	d404      	bmi.n	8006c7c <_fflush_r+0x40>
 8006c72:	059b      	lsls	r3, r3, #22
 8006c74:	d402      	bmi.n	8006c7c <_fflush_r+0x40>
 8006c76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c78:	f7ff fa83 	bl	8006182 <__retarget_lock_acquire_recursive>
 8006c7c:	0028      	movs	r0, r5
 8006c7e:	0021      	movs	r1, r4
 8006c80:	f7ff ff50 	bl	8006b24 <__sflush_r>
 8006c84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c86:	0005      	movs	r5, r0
 8006c88:	07db      	lsls	r3, r3, #31
 8006c8a:	d4de      	bmi.n	8006c4a <_fflush_r+0xe>
 8006c8c:	89a3      	ldrh	r3, [r4, #12]
 8006c8e:	059b      	lsls	r3, r3, #22
 8006c90:	d4db      	bmi.n	8006c4a <_fflush_r+0xe>
 8006c92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c94:	f7ff fa76 	bl	8006184 <__retarget_lock_release_recursive>
 8006c98:	e7d7      	b.n	8006c4a <_fflush_r+0xe>
 8006c9a:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <_fflush_r+0x78>)
 8006c9c:	429c      	cmp	r4, r3
 8006c9e:	d101      	bne.n	8006ca4 <_fflush_r+0x68>
 8006ca0:	68ac      	ldr	r4, [r5, #8]
 8006ca2:	e7df      	b.n	8006c64 <_fflush_r+0x28>
 8006ca4:	4b04      	ldr	r3, [pc, #16]	; (8006cb8 <_fflush_r+0x7c>)
 8006ca6:	429c      	cmp	r4, r3
 8006ca8:	d1dc      	bne.n	8006c64 <_fflush_r+0x28>
 8006caa:	68ec      	ldr	r4, [r5, #12]
 8006cac:	e7da      	b.n	8006c64 <_fflush_r+0x28>
 8006cae:	46c0      	nop			; (mov r8, r8)
 8006cb0:	080074d4 	.word	0x080074d4
 8006cb4:	080074f4 	.word	0x080074f4
 8006cb8:	080074b4 	.word	0x080074b4

08006cbc <_lseek_r>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	0004      	movs	r4, r0
 8006cc0:	0008      	movs	r0, r1
 8006cc2:	0011      	movs	r1, r2
 8006cc4:	001a      	movs	r2, r3
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	4d05      	ldr	r5, [pc, #20]	; (8006ce0 <_lseek_r+0x24>)
 8006cca:	602b      	str	r3, [r5, #0]
 8006ccc:	f7fa fea4 	bl	8001a18 <_lseek>
 8006cd0:	1c43      	adds	r3, r0, #1
 8006cd2:	d103      	bne.n	8006cdc <_lseek_r+0x20>
 8006cd4:	682b      	ldr	r3, [r5, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d000      	beq.n	8006cdc <_lseek_r+0x20>
 8006cda:	6023      	str	r3, [r4, #0]
 8006cdc:	bd70      	pop	{r4, r5, r6, pc}
 8006cde:	46c0      	nop			; (mov r8, r8)
 8006ce0:	20000260 	.word	0x20000260

08006ce4 <__swhatbuf_r>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	000e      	movs	r6, r1
 8006ce8:	001d      	movs	r5, r3
 8006cea:	230e      	movs	r3, #14
 8006cec:	5ec9      	ldrsh	r1, [r1, r3]
 8006cee:	0014      	movs	r4, r2
 8006cf0:	b096      	sub	sp, #88	; 0x58
 8006cf2:	2900      	cmp	r1, #0
 8006cf4:	da08      	bge.n	8006d08 <__swhatbuf_r+0x24>
 8006cf6:	220c      	movs	r2, #12
 8006cf8:	5eb3      	ldrsh	r3, [r6, r2]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	602a      	str	r2, [r5, #0]
 8006cfe:	061b      	lsls	r3, r3, #24
 8006d00:	d411      	bmi.n	8006d26 <__swhatbuf_r+0x42>
 8006d02:	2380      	movs	r3, #128	; 0x80
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	e00f      	b.n	8006d28 <__swhatbuf_r+0x44>
 8006d08:	466a      	mov	r2, sp
 8006d0a:	f000 f8d1 	bl	8006eb0 <_fstat_r>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	dbf1      	blt.n	8006cf6 <__swhatbuf_r+0x12>
 8006d12:	23f0      	movs	r3, #240	; 0xf0
 8006d14:	9901      	ldr	r1, [sp, #4]
 8006d16:	021b      	lsls	r3, r3, #8
 8006d18:	4019      	ands	r1, r3
 8006d1a:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <__swhatbuf_r+0x4c>)
 8006d1c:	18c9      	adds	r1, r1, r3
 8006d1e:	424b      	negs	r3, r1
 8006d20:	4159      	adcs	r1, r3
 8006d22:	6029      	str	r1, [r5, #0]
 8006d24:	e7ed      	b.n	8006d02 <__swhatbuf_r+0x1e>
 8006d26:	2340      	movs	r3, #64	; 0x40
 8006d28:	2000      	movs	r0, #0
 8006d2a:	6023      	str	r3, [r4, #0]
 8006d2c:	b016      	add	sp, #88	; 0x58
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}
 8006d30:	ffffe000 	.word	0xffffe000

08006d34 <__smakebuf_r>:
 8006d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d36:	2602      	movs	r6, #2
 8006d38:	898b      	ldrh	r3, [r1, #12]
 8006d3a:	0005      	movs	r5, r0
 8006d3c:	000c      	movs	r4, r1
 8006d3e:	4233      	tst	r3, r6
 8006d40:	d006      	beq.n	8006d50 <__smakebuf_r+0x1c>
 8006d42:	0023      	movs	r3, r4
 8006d44:	3347      	adds	r3, #71	; 0x47
 8006d46:	6023      	str	r3, [r4, #0]
 8006d48:	6123      	str	r3, [r4, #16]
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	6163      	str	r3, [r4, #20]
 8006d4e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006d50:	466a      	mov	r2, sp
 8006d52:	ab01      	add	r3, sp, #4
 8006d54:	f7ff ffc6 	bl	8006ce4 <__swhatbuf_r>
 8006d58:	9900      	ldr	r1, [sp, #0]
 8006d5a:	0007      	movs	r7, r0
 8006d5c:	0028      	movs	r0, r5
 8006d5e:	f7ff fa35 	bl	80061cc <_malloc_r>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	d108      	bne.n	8006d78 <__smakebuf_r+0x44>
 8006d66:	220c      	movs	r2, #12
 8006d68:	5ea3      	ldrsh	r3, [r4, r2]
 8006d6a:	059a      	lsls	r2, r3, #22
 8006d6c:	d4ef      	bmi.n	8006d4e <__smakebuf_r+0x1a>
 8006d6e:	2203      	movs	r2, #3
 8006d70:	4393      	bics	r3, r2
 8006d72:	431e      	orrs	r6, r3
 8006d74:	81a6      	strh	r6, [r4, #12]
 8006d76:	e7e4      	b.n	8006d42 <__smakebuf_r+0xe>
 8006d78:	4b0f      	ldr	r3, [pc, #60]	; (8006db8 <__smakebuf_r+0x84>)
 8006d7a:	62ab      	str	r3, [r5, #40]	; 0x28
 8006d7c:	2380      	movs	r3, #128	; 0x80
 8006d7e:	89a2      	ldrh	r2, [r4, #12]
 8006d80:	6020      	str	r0, [r4, #0]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	81a3      	strh	r3, [r4, #12]
 8006d86:	9b00      	ldr	r3, [sp, #0]
 8006d88:	6120      	str	r0, [r4, #16]
 8006d8a:	6163      	str	r3, [r4, #20]
 8006d8c:	9b01      	ldr	r3, [sp, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00d      	beq.n	8006dae <__smakebuf_r+0x7a>
 8006d92:	0028      	movs	r0, r5
 8006d94:	230e      	movs	r3, #14
 8006d96:	5ee1      	ldrsh	r1, [r4, r3]
 8006d98:	f000 f89c 	bl	8006ed4 <_isatty_r>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d006      	beq.n	8006dae <__smakebuf_r+0x7a>
 8006da0:	2203      	movs	r2, #3
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	4393      	bics	r3, r2
 8006da6:	001a      	movs	r2, r3
 8006da8:	2301      	movs	r3, #1
 8006daa:	4313      	orrs	r3, r2
 8006dac:	81a3      	strh	r3, [r4, #12]
 8006dae:	89a0      	ldrh	r0, [r4, #12]
 8006db0:	4307      	orrs	r7, r0
 8006db2:	81a7      	strh	r7, [r4, #12]
 8006db4:	e7cb      	b.n	8006d4e <__smakebuf_r+0x1a>
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	08005fc5 	.word	0x08005fc5

08006dbc <memchr>:
 8006dbc:	b2c9      	uxtb	r1, r1
 8006dbe:	1882      	adds	r2, r0, r2
 8006dc0:	4290      	cmp	r0, r2
 8006dc2:	d101      	bne.n	8006dc8 <memchr+0xc>
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	4770      	bx	lr
 8006dc8:	7803      	ldrb	r3, [r0, #0]
 8006dca:	428b      	cmp	r3, r1
 8006dcc:	d0fb      	beq.n	8006dc6 <memchr+0xa>
 8006dce:	3001      	adds	r0, #1
 8006dd0:	e7f6      	b.n	8006dc0 <memchr+0x4>
	...

08006dd4 <__malloc_lock>:
 8006dd4:	b510      	push	{r4, lr}
 8006dd6:	4802      	ldr	r0, [pc, #8]	; (8006de0 <__malloc_lock+0xc>)
 8006dd8:	f7ff f9d3 	bl	8006182 <__retarget_lock_acquire_recursive>
 8006ddc:	bd10      	pop	{r4, pc}
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	20000254 	.word	0x20000254

08006de4 <__malloc_unlock>:
 8006de4:	b510      	push	{r4, lr}
 8006de6:	4802      	ldr	r0, [pc, #8]	; (8006df0 <__malloc_unlock+0xc>)
 8006de8:	f7ff f9cc 	bl	8006184 <__retarget_lock_release_recursive>
 8006dec:	bd10      	pop	{r4, pc}
 8006dee:	46c0      	nop			; (mov r8, r8)
 8006df0:	20000254 	.word	0x20000254

08006df4 <_free_r>:
 8006df4:	b570      	push	{r4, r5, r6, lr}
 8006df6:	0005      	movs	r5, r0
 8006df8:	2900      	cmp	r1, #0
 8006dfa:	d010      	beq.n	8006e1e <_free_r+0x2a>
 8006dfc:	1f0c      	subs	r4, r1, #4
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	da00      	bge.n	8006e06 <_free_r+0x12>
 8006e04:	18e4      	adds	r4, r4, r3
 8006e06:	0028      	movs	r0, r5
 8006e08:	f7ff ffe4 	bl	8006dd4 <__malloc_lock>
 8006e0c:	4a1d      	ldr	r2, [pc, #116]	; (8006e84 <_free_r+0x90>)
 8006e0e:	6813      	ldr	r3, [r2, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d105      	bne.n	8006e20 <_free_r+0x2c>
 8006e14:	6063      	str	r3, [r4, #4]
 8006e16:	6014      	str	r4, [r2, #0]
 8006e18:	0028      	movs	r0, r5
 8006e1a:	f7ff ffe3 	bl	8006de4 <__malloc_unlock>
 8006e1e:	bd70      	pop	{r4, r5, r6, pc}
 8006e20:	42a3      	cmp	r3, r4
 8006e22:	d908      	bls.n	8006e36 <_free_r+0x42>
 8006e24:	6821      	ldr	r1, [r4, #0]
 8006e26:	1860      	adds	r0, r4, r1
 8006e28:	4283      	cmp	r3, r0
 8006e2a:	d1f3      	bne.n	8006e14 <_free_r+0x20>
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	1841      	adds	r1, r0, r1
 8006e32:	6021      	str	r1, [r4, #0]
 8006e34:	e7ee      	b.n	8006e14 <_free_r+0x20>
 8006e36:	001a      	movs	r2, r3
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <_free_r+0x4e>
 8006e3e:	42a3      	cmp	r3, r4
 8006e40:	d9f9      	bls.n	8006e36 <_free_r+0x42>
 8006e42:	6811      	ldr	r1, [r2, #0]
 8006e44:	1850      	adds	r0, r2, r1
 8006e46:	42a0      	cmp	r0, r4
 8006e48:	d10b      	bne.n	8006e62 <_free_r+0x6e>
 8006e4a:	6820      	ldr	r0, [r4, #0]
 8006e4c:	1809      	adds	r1, r1, r0
 8006e4e:	1850      	adds	r0, r2, r1
 8006e50:	6011      	str	r1, [r2, #0]
 8006e52:	4283      	cmp	r3, r0
 8006e54:	d1e0      	bne.n	8006e18 <_free_r+0x24>
 8006e56:	6818      	ldr	r0, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	1841      	adds	r1, r0, r1
 8006e5c:	6011      	str	r1, [r2, #0]
 8006e5e:	6053      	str	r3, [r2, #4]
 8006e60:	e7da      	b.n	8006e18 <_free_r+0x24>
 8006e62:	42a0      	cmp	r0, r4
 8006e64:	d902      	bls.n	8006e6c <_free_r+0x78>
 8006e66:	230c      	movs	r3, #12
 8006e68:	602b      	str	r3, [r5, #0]
 8006e6a:	e7d5      	b.n	8006e18 <_free_r+0x24>
 8006e6c:	6821      	ldr	r1, [r4, #0]
 8006e6e:	1860      	adds	r0, r4, r1
 8006e70:	4283      	cmp	r3, r0
 8006e72:	d103      	bne.n	8006e7c <_free_r+0x88>
 8006e74:	6818      	ldr	r0, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	1841      	adds	r1, r0, r1
 8006e7a:	6021      	str	r1, [r4, #0]
 8006e7c:	6063      	str	r3, [r4, #4]
 8006e7e:	6054      	str	r4, [r2, #4]
 8006e80:	e7ca      	b.n	8006e18 <_free_r+0x24>
 8006e82:	46c0      	nop			; (mov r8, r8)
 8006e84:	20000258 	.word	0x20000258

08006e88 <_read_r>:
 8006e88:	b570      	push	{r4, r5, r6, lr}
 8006e8a:	0004      	movs	r4, r0
 8006e8c:	0008      	movs	r0, r1
 8006e8e:	0011      	movs	r1, r2
 8006e90:	001a      	movs	r2, r3
 8006e92:	2300      	movs	r3, #0
 8006e94:	4d05      	ldr	r5, [pc, #20]	; (8006eac <_read_r+0x24>)
 8006e96:	602b      	str	r3, [r5, #0]
 8006e98:	f7fa fd64 	bl	8001964 <_read>
 8006e9c:	1c43      	adds	r3, r0, #1
 8006e9e:	d103      	bne.n	8006ea8 <_read_r+0x20>
 8006ea0:	682b      	ldr	r3, [r5, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d000      	beq.n	8006ea8 <_read_r+0x20>
 8006ea6:	6023      	str	r3, [r4, #0]
 8006ea8:	bd70      	pop	{r4, r5, r6, pc}
 8006eaa:	46c0      	nop			; (mov r8, r8)
 8006eac:	20000260 	.word	0x20000260

08006eb0 <_fstat_r>:
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	b570      	push	{r4, r5, r6, lr}
 8006eb4:	4d06      	ldr	r5, [pc, #24]	; (8006ed0 <_fstat_r+0x20>)
 8006eb6:	0004      	movs	r4, r0
 8006eb8:	0008      	movs	r0, r1
 8006eba:	0011      	movs	r1, r2
 8006ebc:	602b      	str	r3, [r5, #0]
 8006ebe:	f7fa fd94 	bl	80019ea <_fstat>
 8006ec2:	1c43      	adds	r3, r0, #1
 8006ec4:	d103      	bne.n	8006ece <_fstat_r+0x1e>
 8006ec6:	682b      	ldr	r3, [r5, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d000      	beq.n	8006ece <_fstat_r+0x1e>
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	20000260 	.word	0x20000260

08006ed4 <_isatty_r>:
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	b570      	push	{r4, r5, r6, lr}
 8006ed8:	4d06      	ldr	r5, [pc, #24]	; (8006ef4 <_isatty_r+0x20>)
 8006eda:	0004      	movs	r4, r0
 8006edc:	0008      	movs	r0, r1
 8006ede:	602b      	str	r3, [r5, #0]
 8006ee0:	f7fa fd91 	bl	8001a06 <_isatty>
 8006ee4:	1c43      	adds	r3, r0, #1
 8006ee6:	d103      	bne.n	8006ef0 <_isatty_r+0x1c>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d000      	beq.n	8006ef0 <_isatty_r+0x1c>
 8006eee:	6023      	str	r3, [r4, #0]
 8006ef0:	bd70      	pop	{r4, r5, r6, pc}
 8006ef2:	46c0      	nop			; (mov r8, r8)
 8006ef4:	20000260 	.word	0x20000260

08006ef8 <_init>:
 8006ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efa:	46c0      	nop			; (mov r8, r8)
 8006efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efe:	bc08      	pop	{r3}
 8006f00:	469e      	mov	lr, r3
 8006f02:	4770      	bx	lr

08006f04 <_fini>:
 8006f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f06:	46c0      	nop			; (mov r8, r8)
 8006f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0a:	bc08      	pop	{r3}
 8006f0c:	469e      	mov	lr, r3
 8006f0e:	4770      	bx	lr
