
sinking-clock_master_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b20  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08005bdc  08005bdc  00015bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ec0  08005ec0  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ec0  08005ec0  00015ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ec8  08005ec8  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ec8  08005ec8  00015ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ecc  08005ecc  00015ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000009c  08005f6c  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08005f6c  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010409  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002386  00000000  00000000  000304cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00032858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00033550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b6a  00000000  00000000  00034160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c98  00000000  00000000  0004bcca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000930f4  00000000  00000000  0005c962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000efa56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d4  00000000  00000000  000efaa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000009c 	.word	0x2000009c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005bc4 	.word	0x08005bc4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a0 	.word	0x200000a0
 8000100:	08005bc4 	.word	0x08005bc4

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	469b      	mov	fp, r3
 80002a6:	d433      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a8:	465a      	mov	r2, fp
 80002aa:	4653      	mov	r3, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83a      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e078      	b.n	80003b4 <__udivmoddi4+0x144>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e075      	b.n	80003ba <__udivmoddi4+0x14a>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e028      	b.n	800033a <__udivmoddi4+0xca>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	2320      	movs	r3, #32
 8000314:	1a9b      	subs	r3, r3, r2
 8000316:	4652      	mov	r2, sl
 8000318:	40da      	lsrs	r2, r3
 800031a:	4641      	mov	r1, r8
 800031c:	0013      	movs	r3, r2
 800031e:	464a      	mov	r2, r9
 8000320:	408a      	lsls	r2, r1
 8000322:	0017      	movs	r7, r2
 8000324:	4642      	mov	r2, r8
 8000326:	431f      	orrs	r7, r3
 8000328:	4653      	mov	r3, sl
 800032a:	4093      	lsls	r3, r2
 800032c:	001e      	movs	r6, r3
 800032e:	42af      	cmp	r7, r5
 8000330:	d9c4      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0d9      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000340:	07fb      	lsls	r3, r7, #31
 8000342:	0872      	lsrs	r2, r6, #1
 8000344:	431a      	orrs	r2, r3
 8000346:	4646      	mov	r6, r8
 8000348:	087b      	lsrs	r3, r7, #1
 800034a:	e00e      	b.n	800036a <__udivmoddi4+0xfa>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d101      	bne.n	8000354 <__udivmoddi4+0xe4>
 8000350:	42a2      	cmp	r2, r4
 8000352:	d80c      	bhi.n	800036e <__udivmoddi4+0xfe>
 8000354:	1aa4      	subs	r4, r4, r2
 8000356:	419d      	sbcs	r5, r3
 8000358:	2001      	movs	r0, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2100      	movs	r1, #0
 8000360:	3e01      	subs	r6, #1
 8000362:	1824      	adds	r4, r4, r0
 8000364:	414d      	adcs	r5, r1
 8000366:	2e00      	cmp	r6, #0
 8000368:	d006      	beq.n	8000378 <__udivmoddi4+0x108>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d9ee      	bls.n	800034c <__udivmoddi4+0xdc>
 800036e:	3e01      	subs	r6, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2e00      	cmp	r6, #0
 8000376:	d1f8      	bne.n	800036a <__udivmoddi4+0xfa>
 8000378:	9800      	ldr	r0, [sp, #0]
 800037a:	9901      	ldr	r1, [sp, #4]
 800037c:	465b      	mov	r3, fp
 800037e:	1900      	adds	r0, r0, r4
 8000380:	4169      	adcs	r1, r5
 8000382:	2b00      	cmp	r3, #0
 8000384:	db24      	blt.n	80003d0 <__udivmoddi4+0x160>
 8000386:	002b      	movs	r3, r5
 8000388:	465a      	mov	r2, fp
 800038a:	4644      	mov	r4, r8
 800038c:	40d3      	lsrs	r3, r2
 800038e:	002a      	movs	r2, r5
 8000390:	40e2      	lsrs	r2, r4
 8000392:	001c      	movs	r4, r3
 8000394:	465b      	mov	r3, fp
 8000396:	0015      	movs	r5, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	db2a      	blt.n	80003f2 <__udivmoddi4+0x182>
 800039c:	0026      	movs	r6, r4
 800039e:	409e      	lsls	r6, r3
 80003a0:	0033      	movs	r3, r6
 80003a2:	0026      	movs	r6, r4
 80003a4:	4647      	mov	r7, r8
 80003a6:	40be      	lsls	r6, r7
 80003a8:	0032      	movs	r2, r6
 80003aa:	1a80      	subs	r0, r0, r2
 80003ac:	4199      	sbcs	r1, r3
 80003ae:	9000      	str	r0, [sp, #0]
 80003b0:	9101      	str	r1, [sp, #4]
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b4:	42a3      	cmp	r3, r4
 80003b6:	d8bc      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80003b8:	e783      	b.n	80002c2 <__udivmoddi4+0x52>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	2100      	movs	r1, #0
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	2200      	movs	r2, #0
 80003c4:	9100      	str	r1, [sp, #0]
 80003c6:	9201      	str	r2, [sp, #4]
 80003c8:	2201      	movs	r2, #1
 80003ca:	40da      	lsrs	r2, r3
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	e786      	b.n	80002de <__udivmoddi4+0x6e>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	4646      	mov	r6, r8
 80003da:	409a      	lsls	r2, r3
 80003dc:	0023      	movs	r3, r4
 80003de:	40f3      	lsrs	r3, r6
 80003e0:	4644      	mov	r4, r8
 80003e2:	4313      	orrs	r3, r2
 80003e4:	002a      	movs	r2, r5
 80003e6:	40e2      	lsrs	r2, r4
 80003e8:	001c      	movs	r4, r3
 80003ea:	465b      	mov	r3, fp
 80003ec:	0015      	movs	r5, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dad4      	bge.n	800039c <__udivmoddi4+0x12c>
 80003f2:	4642      	mov	r2, r8
 80003f4:	002f      	movs	r7, r5
 80003f6:	2320      	movs	r3, #32
 80003f8:	0026      	movs	r6, r4
 80003fa:	4097      	lsls	r7, r2
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	40de      	lsrs	r6, r3
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7cd      	b.n	80003a2 <__udivmoddi4+0x132>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000464:	2301      	movs	r3, #1
 8000466:	425b      	negs	r3, r3
 8000468:	1d39      	adds	r1, r7, #4
 800046a:	4804      	ldr	r0, [pc, #16]	; (800047c <__io_putchar+0x20>)
 800046c:	2201      	movs	r2, #1
 800046e:	f003 fec1 	bl	80041f4 <HAL_UART_Transmit>
  return ch;
 8000472:	687b      	ldr	r3, [r7, #4]
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000138 	.word	0x20000138

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000484:	f000 fdb0 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000488:	f000 f80b 	bl	80004a2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f000 f988 	bl	80007a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000490:	f000 f952 	bl	8000738 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000494:	f000 f852 	bl	800053c <MX_I2C1_Init>
  MX_RTC_Init();
 8000498:	f000 f890 	bl	80005bc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  sevSeg_I2C1_Init();
 800049c:	f000 fa2c 	bl	80008f8 <sevSeg_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <main+0x20>

080004a2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a2:	b590      	push	{r4, r7, lr}
 80004a4:	b093      	sub	sp, #76	; 0x4c
 80004a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a8:	2410      	movs	r4, #16
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	0018      	movs	r0, r3
 80004ae:	2338      	movs	r3, #56	; 0x38
 80004b0:	001a      	movs	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	f004 fba6 	bl	8004c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b8:	003b      	movs	r3, r7
 80004ba:	0018      	movs	r0, r3
 80004bc:	2310      	movs	r3, #16
 80004be:	001a      	movs	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	f004 fb9f 	bl	8004c04 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004c6:	2380      	movs	r3, #128	; 0x80
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 fb12 	bl	8002af4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	220a      	movs	r2, #10
 80004d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2280      	movs	r2, #128	; 0x80
 80004da:	0052      	lsls	r2, r2, #1
 80004dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004de:	0021      	movs	r1, r4
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2240      	movs	r2, #64	; 0x40
 80004ea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2201      	movs	r2, #1
 80004f0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2200      	movs	r2, #0
 80004f6:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	0018      	movs	r0, r3
 80004fc:	f002 fb46 	bl	8002b8c <HAL_RCC_OscConfig>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000504:	f000 fb58 	bl	8000bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000508:	003b      	movs	r3, r7
 800050a:	2207      	movs	r2, #7
 800050c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800050e:	003b      	movs	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000514:	003b      	movs	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800051a:	003b      	movs	r3, r7
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000520:	003b      	movs	r3, r7
 8000522:	2100      	movs	r1, #0
 8000524:	0018      	movs	r0, r3
 8000526:	f002 fe4b 	bl	80031c0 <HAL_RCC_ClockConfig>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800052e:	f000 fb43 	bl	8000bb8 <Error_Handler>
  }
}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b013      	add	sp, #76	; 0x4c
 8000538:	bd90      	pop	{r4, r7, pc}
	...

0800053c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000542:	4a1c      	ldr	r2, [pc, #112]	; (80005b4 <MX_I2C1_Init+0x78>)
 8000544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <MX_I2C1_Init+0x7c>)
 800054a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <MX_I2C1_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000554:	2201      	movs	r2, #1
 8000556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MX_I2C1_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_I2C1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000578:	0018      	movs	r0, r3
 800057a:	f001 f891 	bl	80016a0 <HAL_I2C_Init>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000582:	f000 fb19 	bl	8000bb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000588:	2100      	movs	r1, #0
 800058a:	0018      	movs	r0, r3
 800058c:	f002 fa1a 	bl	80029c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000594:	f000 fb10 	bl	8000bb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <MX_I2C1_Init+0x74>)
 800059a:	2100      	movs	r1, #0
 800059c:	0018      	movs	r0, r3
 800059e:	f002 fa5d 	bl	8002a5c <HAL_I2CEx_ConfigDigitalFilter>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005a6:	f000 fb07 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200000b8 	.word	0x200000b8
 80005b4:	40005400 	.word	0x40005400
 80005b8:	0010061a 	.word	0x0010061a

080005bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b090      	sub	sp, #64	; 0x40
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005c2:	232c      	movs	r3, #44	; 0x2c
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	0018      	movs	r0, r3
 80005c8:	2314      	movs	r3, #20
 80005ca:	001a      	movs	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	f004 fb19 	bl	8004c04 <memset>
  RTC_DateTypeDef sDate = {0};
 80005d2:	2328      	movs	r3, #40	; 0x28
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80005da:	003b      	movs	r3, r7
 80005dc:	0018      	movs	r0, r3
 80005de:	2328      	movs	r3, #40	; 0x28
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f004 fb0e 	bl	8004c04 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005e8:	4b4f      	ldr	r3, [pc, #316]	; (8000728 <MX_RTC_Init+0x16c>)
 80005ea:	4a50      	ldr	r2, [pc, #320]	; (800072c <MX_RTC_Init+0x170>)
 80005ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80005ee:	4b4e      	ldr	r3, [pc, #312]	; (8000728 <MX_RTC_Init+0x16c>)
 80005f0:	2240      	movs	r2, #64	; 0x40
 80005f2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80005f4:	4b4c      	ldr	r3, [pc, #304]	; (8000728 <MX_RTC_Init+0x16c>)
 80005f6:	227f      	movs	r2, #127	; 0x7f
 80005f8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80005fa:	4b4b      	ldr	r3, [pc, #300]	; (8000728 <MX_RTC_Init+0x16c>)
 80005fc:	22ff      	movs	r2, #255	; 0xff
 80005fe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000600:	4b49      	ldr	r3, [pc, #292]	; (8000728 <MX_RTC_Init+0x16c>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000606:	4b48      	ldr	r3, [pc, #288]	; (8000728 <MX_RTC_Init+0x16c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800060c:	4b46      	ldr	r3, [pc, #280]	; (8000728 <MX_RTC_Init+0x16c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000612:	4b45      	ldr	r3, [pc, #276]	; (8000728 <MX_RTC_Init+0x16c>)
 8000614:	2280      	movs	r2, #128	; 0x80
 8000616:	05d2      	lsls	r2, r2, #23
 8000618:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800061a:	4b43      	ldr	r3, [pc, #268]	; (8000728 <MX_RTC_Init+0x16c>)
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000620:	4b41      	ldr	r3, [pc, #260]	; (8000728 <MX_RTC_Init+0x16c>)
 8000622:	0018      	movs	r0, r3
 8000624:	f003 f8f0 	bl	8003808 <HAL_RTC_Init>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 800062c:	f000 fac4 	bl	8000bb8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000630:	212c      	movs	r1, #44	; 0x2c
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800065c:	1879      	adds	r1, r7, r1
 800065e:	4b32      	ldr	r3, [pc, #200]	; (8000728 <MX_RTC_Init+0x16c>)
 8000660:	2201      	movs	r2, #1
 8000662:	0018      	movs	r0, r3
 8000664:	f003 f972 	bl	800394c <HAL_RTC_SetTime>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 800066c:	f000 faa4 	bl	8000bb8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000670:	2128      	movs	r1, #40	; 0x28
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2201      	movs	r2, #1
 8000676:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2201      	movs	r2, #1
 800067c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2201      	movs	r2, #1
 8000682:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2200      	movs	r2, #0
 8000688:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800068a:	1879      	adds	r1, r7, r1
 800068c:	4b26      	ldr	r3, [pc, #152]	; (8000728 <MX_RTC_Init+0x16c>)
 800068e:	2201      	movs	r2, #1
 8000690:	0018      	movs	r0, r3
 8000692:	f003 fa5f 	bl	8003b54 <HAL_RTC_SetDate>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 800069a:	f000 fa8d 	bl	8000bb8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 800069e:	003b      	movs	r3, r7
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80006a4:	003b      	movs	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80006aa:	003b      	movs	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80006b0:	003b      	movs	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80006b6:	003b      	movs	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006bc:	003b      	movs	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006c2:	003b      	movs	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80006c8:	003b      	movs	r3, r7
 80006ca:	4a19      	ldr	r2, [pc, #100]	; (8000730 <MX_RTC_Init+0x174>)
 80006cc:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80006ce:	003b      	movs	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80006d4:	003b      	movs	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80006da:	003b      	movs	r3, r7
 80006dc:	2220      	movs	r2, #32
 80006de:	2101      	movs	r1, #1
 80006e0:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80006e2:	003b      	movs	r3, r7
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0052      	lsls	r2, r2, #1
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80006ea:	0039      	movs	r1, r7
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_RTC_Init+0x16c>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	0018      	movs	r0, r3
 80006f2:	f003 fb0f 	bl	8003d14 <HAL_RTC_SetAlarm>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <MX_RTC_Init+0x142>
  {
    Error_Handler();
 80006fa:	f000 fa5d 	bl	8000bb8 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 80006fe:	003b      	movs	r3, r7
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <MX_RTC_Init+0x178>)
 8000702:	615a      	str	r2, [r3, #20]
  sAlarm.Alarm = RTC_ALARM_B;
 8000704:	003b      	movs	r3, r7
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	0092      	lsls	r2, r2, #2
 800070a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800070c:	0039      	movs	r1, r7
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_RTC_Init+0x16c>)
 8000710:	2201      	movs	r2, #1
 8000712:	0018      	movs	r0, r3
 8000714:	f003 fafe 	bl	8003d14 <HAL_RTC_SetAlarm>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <MX_RTC_Init+0x164>
  {
    Error_Handler();
 800071c:	f000 fa4c 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b010      	add	sp, #64	; 0x40
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000010c 	.word	0x2000010c
 800072c:	40002800 	.word	0x40002800
 8000730:	80800080 	.word	0x80800080
 8000734:	80808080 	.word	0x80808080

08000738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_USART2_UART_Init+0x60>)
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <MX_USART2_UART_Init+0x64>)
 8000740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_USART2_UART_Init+0x60>)
 8000744:	22e1      	movs	r2, #225	; 0xe1
 8000746:	0252      	lsls	r2, r2, #9
 8000748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_USART2_UART_Init+0x60>)
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	0152      	lsls	r2, r2, #5
 8000750:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_USART2_UART_Init+0x60>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_USART2_UART_Init+0x60>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_USART2_UART_Init+0x60>)
 8000760:	220c      	movs	r2, #12
 8000762:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_USART2_UART_Init+0x60>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_USART2_UART_Init+0x60>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_USART2_UART_Init+0x60>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_USART2_UART_Init+0x60>)
 8000778:	2200      	movs	r2, #0
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_USART2_UART_Init+0x60>)
 800077e:	2200      	movs	r2, #0
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <MX_USART2_UART_Init+0x60>)
 8000784:	0018      	movs	r0, r3
 8000786:	f003 fcdf 	bl	8004148 <HAL_UART_Init>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800078e:	f000 fa13 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000138 	.word	0x20000138
 800079c:	40004400 	.word	0x40004400

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b08b      	sub	sp, #44	; 0x2c
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	2414      	movs	r4, #20
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	0018      	movs	r0, r3
 80007ac:	2314      	movs	r3, #20
 80007ae:	001a      	movs	r2, r3
 80007b0:	2100      	movs	r1, #0
 80007b2:	f004 fa27 	bl	8004c04 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b4b      	ldr	r3, [pc, #300]	; (80008e4 <MX_GPIO_Init+0x144>)
 80007b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ba:	4b4a      	ldr	r3, [pc, #296]	; (80008e4 <MX_GPIO_Init+0x144>)
 80007bc:	2102      	movs	r1, #2
 80007be:	430a      	orrs	r2, r1
 80007c0:	635a      	str	r2, [r3, #52]	; 0x34
 80007c2:	4b48      	ldr	r3, [pc, #288]	; (80008e4 <MX_GPIO_Init+0x144>)
 80007c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007c6:	2202      	movs	r2, #2
 80007c8:	4013      	ands	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b45      	ldr	r3, [pc, #276]	; (80008e4 <MX_GPIO_Init+0x144>)
 80007d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007d2:	4b44      	ldr	r3, [pc, #272]	; (80008e4 <MX_GPIO_Init+0x144>)
 80007d4:	2104      	movs	r1, #4
 80007d6:	430a      	orrs	r2, r1
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
 80007da:	4b42      	ldr	r3, [pc, #264]	; (80008e4 <MX_GPIO_Init+0x144>)
 80007dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007de:	2204      	movs	r2, #4
 80007e0:	4013      	ands	r3, r2
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e6:	4b3f      	ldr	r3, [pc, #252]	; (80008e4 <MX_GPIO_Init+0x144>)
 80007e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ea:	4b3e      	ldr	r3, [pc, #248]	; (80008e4 <MX_GPIO_Init+0x144>)
 80007ec:	2120      	movs	r1, #32
 80007ee:	430a      	orrs	r2, r1
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
 80007f2:	4b3c      	ldr	r3, [pc, #240]	; (80008e4 <MX_GPIO_Init+0x144>)
 80007f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007f6:	2220      	movs	r2, #32
 80007f8:	4013      	ands	r3, r2
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b39      	ldr	r3, [pc, #228]	; (80008e4 <MX_GPIO_Init+0x144>)
 8000800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000802:	4b38      	ldr	r3, [pc, #224]	; (80008e4 <MX_GPIO_Init+0x144>)
 8000804:	2101      	movs	r1, #1
 8000806:	430a      	orrs	r2, r1
 8000808:	635a      	str	r2, [r3, #52]	; 0x34
 800080a:	4b36      	ldr	r3, [pc, #216]	; (80008e4 <MX_GPIO_Init+0x144>)
 800080c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800080e:	2201      	movs	r2, #1
 8000810:	4013      	ands	r3, r2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Output_Pin|PM_LED_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);
 8000816:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <MX_GPIO_Init+0x148>)
 8000818:	2200      	movs	r2, #0
 800081a:	21c2      	movs	r1, #194	; 0xc2
 800081c:	0018      	movs	r0, r3
 800081e:	f000 ff21 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000822:	4b32      	ldr	r3, [pc, #200]	; (80008ec <MX_GPIO_Init+0x14c>)
 8000824:	2200      	movs	r2, #0
 8000826:	2140      	movs	r1, #64	; 0x40
 8000828:	0018      	movs	r0, r3
 800082a:	f000 ff1b 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2204      	movs	r2, #4
 8000832:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2288      	movs	r2, #136	; 0x88
 8000838:	0352      	lsls	r2, r2, #13
 800083a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000842:	193b      	adds	r3, r7, r4
 8000844:	4a2a      	ldr	r2, [pc, #168]	; (80008f0 <MX_GPIO_Init+0x150>)
 8000846:	0019      	movs	r1, r3
 8000848:	0010      	movs	r0, r2
 800084a:	f000 fda7 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_Button_Pin Alarm_Enable_Button_Pin Alarm_Set_Button_Pin Hour_Set_Button_Pin
                           Minute_Set_Button_Pin */
  GPIO_InitStruct.Pin = Display_Button_Pin|Alarm_Enable_Button_Pin|Alarm_Set_Button_Pin|Hour_Set_Button_Pin
 800084e:	193b      	adds	r3, r7, r4
 8000850:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <MX_GPIO_Init+0x154>)
 8000852:	601a      	str	r2, [r3, #0]
                          |Minute_Set_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2284      	movs	r2, #132	; 0x84
 8000858:	0392      	lsls	r2, r2, #14
 800085a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800085c:	193b      	adds	r3, r7, r4
 800085e:	2201      	movs	r2, #1
 8000860:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	193a      	adds	r2, r7, r4
 8000864:	23a0      	movs	r3, #160	; 0xa0
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	0011      	movs	r1, r2
 800086a:	0018      	movs	r0, r3
 800086c:	f000 fd96 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Output_Pin PM_LED_Pin Alarm_LED_Pin */
  GPIO_InitStruct.Pin = Buzzer_Output_Pin|PM_LED_Pin|Alarm_LED_Pin;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	22c2      	movs	r2, #194	; 0xc2
 8000874:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	193b      	adds	r3, r7, r4
 8000878:	2201      	movs	r2, #1
 800087a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	193b      	adds	r3, r7, r4
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	193b      	adds	r3, r7, r4
 800088a:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <MX_GPIO_Init+0x148>)
 800088c:	0019      	movs	r1, r3
 800088e:	0010      	movs	r0, r2
 8000890:	f000 fd84 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2240      	movs	r2, #64	; 0x40
 8000898:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2201      	movs	r2, #1
 800089e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <MX_GPIO_Init+0x14c>)
 80008b0:	0019      	movs	r1, r3
 80008b2:	0010      	movs	r0, r2
 80008b4:	f000 fd72 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : Snooze_Button_Pin */
  GPIO_InitStruct.Pin = Snooze_Button_Pin;
 80008b8:	0021      	movs	r1, r4
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	0112      	lsls	r2, r2, #4
 80008c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2201      	movs	r2, #1
 80008cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Snooze_Button_GPIO_Port, &GPIO_InitStruct);
 80008ce:	187a      	adds	r2, r7, r1
 80008d0:	23a0      	movs	r3, #160	; 0xa0
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	0011      	movs	r1, r2
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 fd60 	bl	800139c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	b00b      	add	sp, #44	; 0x2c
 80008e2:	bd90      	pop	{r4, r7, pc}
 80008e4:	40021000 	.word	0x40021000
 80008e8:	50000400 	.word	0x50000400
 80008ec:	50000800 	.word	0x50000800
 80008f0:	50001400 	.word	0x50001400
 80008f4:	00001033 	.word	0x00001033

080008f8 <sevSeg_I2C1_Init>:

/* USER CODE BEGIN 4 */

void sevSeg_I2C1_Init(void) {
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af02      	add	r7, sp, #8
	 */

	HAL_StatusTypeDef halRet;

	//Set display to decode hex data inputs
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_decodeBuffer, 2, HAL_MAX_DELAY);
 80008fe:	4b55      	ldr	r3, [pc, #340]	; (8000a54 <sevSeg_I2C1_Init+0x15c>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b299      	uxth	r1, r3
 8000904:	1dfc      	adds	r4, r7, #7
 8000906:	4a54      	ldr	r2, [pc, #336]	; (8000a58 <sevSeg_I2C1_Init+0x160>)
 8000908:	4854      	ldr	r0, [pc, #336]	; (8000a5c <sevSeg_I2C1_Init+0x164>)
 800090a:	2301      	movs	r3, #1
 800090c:	425b      	negs	r3, r3
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	2302      	movs	r3, #2
 8000912:	f000 ff5b 	bl	80017cc <HAL_I2C_Master_Transmit>
 8000916:	0003      	movs	r3, r0
 8000918:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d004      	beq.n	800092c <sevSeg_I2C1_Init+0x34>
		printf("HAL Error - TX decode mode\n\r");
 8000922:	4b4f      	ldr	r3, [pc, #316]	; (8000a60 <sevSeg_I2C1_Init+0x168>)
 8000924:	0018      	movs	r0, r3
 8000926:	f004 f975 	bl	8004c14 <iprintf>
 800092a:	e003      	b.n	8000934 <sevSeg_I2C1_Init+0x3c>
	} else{
		printf("Display set to decode mode\n\r");
 800092c:	4b4d      	ldr	r3, [pc, #308]	; (8000a64 <sevSeg_I2C1_Init+0x16c>)
 800092e:	0018      	movs	r0, r3
 8000930:	f004 f970 	bl	8004c14 <iprintf>
	}

	//Disable shutdown mode
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_SD_ONBuff, 2, HAL_MAX_DELAY);
 8000934:	4b47      	ldr	r3, [pc, #284]	; (8000a54 <sevSeg_I2C1_Init+0x15c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b299      	uxth	r1, r3
 800093a:	1dfc      	adds	r4, r7, #7
 800093c:	4a4a      	ldr	r2, [pc, #296]	; (8000a68 <sevSeg_I2C1_Init+0x170>)
 800093e:	4847      	ldr	r0, [pc, #284]	; (8000a5c <sevSeg_I2C1_Init+0x164>)
 8000940:	2301      	movs	r3, #1
 8000942:	425b      	negs	r3, r3
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2302      	movs	r3, #2
 8000948:	f000 ff40 	bl	80017cc <HAL_I2C_Master_Transmit>
 800094c:	0003      	movs	r3, r0
 800094e:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d004      	beq.n	8000962 <sevSeg_I2C1_Init+0x6a>
		printf("HAL Error - TX disable shutdown mode\n\r");
 8000958:	4b44      	ldr	r3, [pc, #272]	; (8000a6c <sevSeg_I2C1_Init+0x174>)
 800095a:	0018      	movs	r0, r3
 800095c:	f004 f95a 	bl	8004c14 <iprintf>
 8000960:	e003      	b.n	800096a <sevSeg_I2C1_Init+0x72>
	} else {
		printf("Display shutdown mode disabled\n\r");
 8000962:	4b43      	ldr	r3, [pc, #268]	; (8000a70 <sevSeg_I2C1_Init+0x178>)
 8000964:	0018      	movs	r0, r3
 8000966:	f004 f955 	bl	8004c14 <iprintf>
	}

	//Set to test mode
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_testONBuff, 2, HAL_MAX_DELAY);
 800096a:	4b3a      	ldr	r3, [pc, #232]	; (8000a54 <sevSeg_I2C1_Init+0x15c>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	b299      	uxth	r1, r3
 8000970:	1dfc      	adds	r4, r7, #7
 8000972:	4a40      	ldr	r2, [pc, #256]	; (8000a74 <sevSeg_I2C1_Init+0x17c>)
 8000974:	4839      	ldr	r0, [pc, #228]	; (8000a5c <sevSeg_I2C1_Init+0x164>)
 8000976:	2301      	movs	r3, #1
 8000978:	425b      	negs	r3, r3
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	2302      	movs	r3, #2
 800097e:	f000 ff25 	bl	80017cc <HAL_I2C_Master_Transmit>
 8000982:	0003      	movs	r3, r0
 8000984:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d004      	beq.n	8000998 <sevSeg_I2C1_Init+0xa0>
		printf("HAL Error - TX test mode ON data\n\r");
 800098e:	4b3a      	ldr	r3, [pc, #232]	; (8000a78 <sevSeg_I2C1_Init+0x180>)
 8000990:	0018      	movs	r0, r3
 8000992:	f004 f93f 	bl	8004c14 <iprintf>
 8000996:	e003      	b.n	80009a0 <sevSeg_I2C1_Init+0xa8>
	} else {
		printf("Test mode enabled - all LEDs on\n\r");
 8000998:	4b38      	ldr	r3, [pc, #224]	; (8000a7c <sevSeg_I2C1_Init+0x184>)
 800099a:	0018      	movs	r0, r3
 800099c:	f004 f93a 	bl	8004c14 <iprintf>
//	}

	//HAL_Delay(1000);

	//Set to test mode
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_testOFFBuff, 2, HAL_MAX_DELAY);
 80009a0:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <sevSeg_I2C1_Init+0x15c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b299      	uxth	r1, r3
 80009a6:	1dfc      	adds	r4, r7, #7
 80009a8:	4a35      	ldr	r2, [pc, #212]	; (8000a80 <sevSeg_I2C1_Init+0x188>)
 80009aa:	482c      	ldr	r0, [pc, #176]	; (8000a5c <sevSeg_I2C1_Init+0x164>)
 80009ac:	2301      	movs	r3, #1
 80009ae:	425b      	negs	r3, r3
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2302      	movs	r3, #2
 80009b4:	f000 ff0a 	bl	80017cc <HAL_I2C_Master_Transmit>
 80009b8:	0003      	movs	r3, r0
 80009ba:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d004      	beq.n	80009ce <sevSeg_I2C1_Init+0xd6>
		printf("HAL Error - TX test mode OFF data\n\r");
 80009c4:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <sevSeg_I2C1_Init+0x18c>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f004 f924 	bl	8004c14 <iprintf>
 80009cc:	e003      	b.n	80009d6 <sevSeg_I2C1_Init+0xde>
	} else {
		printf("Test mode disabled - all LEDs off\n\r");
 80009ce:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <sevSeg_I2C1_Init+0x190>)
 80009d0:	0018      	movs	r0, r3
 80009d2:	f004 f91f 	bl	8004c14 <iprintf>
	}

	// Set and display current time (12:00 A.M.)

	currTime.Hours = 12;
 80009d6:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <sevSeg_I2C1_Init+0x194>)
 80009d8:	220c      	movs	r2, #12
 80009da:	701a      	strb	r2, [r3, #0]
	currTime.Minutes = 0;
 80009dc:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <sevSeg_I2C1_Init+0x194>)
 80009de:	2200      	movs	r2, #0
 80009e0:	705a      	strb	r2, [r3, #1]
	currTime.Seconds = 0;
 80009e2:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <sevSeg_I2C1_Init+0x194>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	709a      	strb	r2, [r3, #2]

	currDate.Year = 0;
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <sevSeg_I2C1_Init+0x198>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	70da      	strb	r2, [r3, #3]
	currDate.Month = RTC_MONTH_JANUARY;
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <sevSeg_I2C1_Init+0x198>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	705a      	strb	r2, [r3, #1]
	currDate.Date = 0;
 80009f4:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <sevSeg_I2C1_Init+0x198>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 80009fa:	4924      	ldr	r1, [pc, #144]	; (8000a8c <sevSeg_I2C1_Init+0x194>)
 80009fc:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <sevSeg_I2C1_Init+0x19c>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	0018      	movs	r0, r3
 8000a02:	f002 ffa3 	bl	800394c <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 8000a06:	4922      	ldr	r1, [pc, #136]	; (8000a90 <sevSeg_I2C1_Init+0x198>)
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <sevSeg_I2C1_Init+0x19c>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f003 f8a1 	bl	8003b54 <HAL_RTC_SetDate>

	printf("Current time defaulted to: %d:%d:%d\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000a12:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <sevSeg_I2C1_Init+0x194>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	0019      	movs	r1, r3
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <sevSeg_I2C1_Init+0x194>)
 8000a1a:	785b      	ldrb	r3, [r3, #1]
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <sevSeg_I2C1_Init+0x194>)
 8000a20:	789b      	ldrb	r3, [r3, #2]
 8000a22:	481d      	ldr	r0, [pc, #116]	; (8000a98 <sevSeg_I2C1_Init+0x1a0>)
 8000a24:	f004 f8f6 	bl	8004c14 <iprintf>

	halRet = updateAndDisplayTime();
 8000a28:	1dfc      	adds	r4, r7, #7
 8000a2a:	f000 f83b 	bl	8000aa4 <updateAndDisplayTime>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d004      	beq.n	8000a44 <sevSeg_I2C1_Init+0x14c>
		printf("HAL Error - TX current time\n\r");
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <sevSeg_I2C1_Init+0x1a4>)
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f004 f8e9 	bl	8004c14 <iprintf>
	} else {
		printf("Display Updated with current time\n\r");
	}

	return;
 8000a42:	e004      	b.n	8000a4e <sevSeg_I2C1_Init+0x156>
		printf("Display Updated with current time\n\r");
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <sevSeg_I2C1_Init+0x1a8>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f004 f8e4 	bl	8004c14 <iprintf>
	return;
 8000a4c:	46c0      	nop			; (mov r8, r8)

}
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b003      	add	sp, #12
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	20000000 	.word	0x20000000
 8000a58:	20000004 	.word	0x20000004
 8000a5c:	200000b8 	.word	0x200000b8
 8000a60:	08005bdc 	.word	0x08005bdc
 8000a64:	08005bfc 	.word	0x08005bfc
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	08005c1c 	.word	0x08005c1c
 8000a70:	08005c44 	.word	0x08005c44
 8000a74:	20000018 	.word	0x20000018
 8000a78:	08005c68 	.word	0x08005c68
 8000a7c:	08005c8c 	.word	0x08005c8c
 8000a80:	20000014 	.word	0x20000014
 8000a84:	08005cb0 	.word	0x08005cb0
 8000a88:	08005cd4 	.word	0x08005cd4
 8000a8c:	200001cc 	.word	0x200001cc
 8000a90:	200001e0 	.word	0x200001e0
 8000a94:	2000010c 	.word	0x2000010c
 8000a98:	08005cf8 	.word	0x08005cf8
 8000a9c:	08005d20 	.word	0x08005d20
 8000aa0:	08005d40 	.word	0x08005d40

08000aa4 <updateAndDisplayTime>:

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af02      	add	r7, sp, #8

	HAL_StatusTypeDef halRet = HAL_OK;
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]

	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8000ab0:	4938      	ldr	r1, [pc, #224]	; (8000b94 <updateAndDisplayTime+0xf0>)
 8000ab2:	4b39      	ldr	r3, [pc, #228]	; (8000b98 <updateAndDisplayTime+0xf4>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f002 fff0 	bl	8003a9c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 8000abc:	4937      	ldr	r1, [pc, #220]	; (8000b9c <updateAndDisplayTime+0xf8>)
 8000abe:	4b36      	ldr	r3, [pc, #216]	; (8000b98 <updateAndDisplayTime+0xf4>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f003 f8d8 	bl	8003c78 <HAL_RTC_GetDate>
//	}
//	else {
//		printf("Time Update from RTC successfully");
//	}

	sevSeg_digit0Buff[1] = currTime.Hours / 10;
 8000ac8:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <updateAndDisplayTime+0xf0>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	210a      	movs	r1, #10
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f7ff fb22 	bl	8000118 <__udivsi3>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b31      	ldr	r3, [pc, #196]	; (8000ba0 <updateAndDisplayTime+0xfc>)
 8000ada:	705a      	strb	r2, [r3, #1]
	sevSeg_digit1Buff[1] = currTime.Hours % 10;
 8000adc:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <updateAndDisplayTime+0xf0>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	210a      	movs	r1, #10
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f7ff fb9e 	bl	8000224 <__aeabi_uidivmod>
 8000ae8:	000b      	movs	r3, r1
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <updateAndDisplayTime+0x100>)
 8000aee:	705a      	strb	r2, [r3, #1]
	sevSeg_digit2Buff[1] = currTime.Minutes / 10;
 8000af0:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <updateAndDisplayTime+0xf0>)
 8000af2:	785b      	ldrb	r3, [r3, #1]
 8000af4:	210a      	movs	r1, #10
 8000af6:	0018      	movs	r0, r3
 8000af8:	f7ff fb0e 	bl	8000118 <__udivsi3>
 8000afc:	0003      	movs	r3, r0
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <updateAndDisplayTime+0x104>)
 8000b02:	705a      	strb	r2, [r3, #1]
	sevSeg_digit3Buff[1] = currTime.Minutes % 10;
 8000b04:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <updateAndDisplayTime+0xf0>)
 8000b06:	785b      	ldrb	r3, [r3, #1]
 8000b08:	210a      	movs	r1, #10
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f7ff fb8a 	bl	8000224 <__aeabi_uidivmod>
 8000b10:	000b      	movs	r3, r1
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b25      	ldr	r3, [pc, #148]	; (8000bac <updateAndDisplayTime+0x108>)
 8000b16:	705a      	strb	r2, [r3, #1]

	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit0Buff, 2, HAL_MAX_DELAY);
 8000b18:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <updateAndDisplayTime+0x10c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b299      	uxth	r1, r3
 8000b1e:	1dfc      	adds	r4, r7, #7
 8000b20:	4a1f      	ldr	r2, [pc, #124]	; (8000ba0 <updateAndDisplayTime+0xfc>)
 8000b22:	4824      	ldr	r0, [pc, #144]	; (8000bb4 <updateAndDisplayTime+0x110>)
 8000b24:	2301      	movs	r3, #1
 8000b26:	425b      	negs	r3, r3
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	f000 fe4e 	bl	80017cc <HAL_I2C_Master_Transmit>
 8000b30:	0003      	movs	r3, r0
 8000b32:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit1Buff, 2, HAL_MAX_DELAY);
 8000b34:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <updateAndDisplayTime+0x10c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b299      	uxth	r1, r3
 8000b3a:	1dfc      	adds	r4, r7, #7
 8000b3c:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <updateAndDisplayTime+0x100>)
 8000b3e:	481d      	ldr	r0, [pc, #116]	; (8000bb4 <updateAndDisplayTime+0x110>)
 8000b40:	2301      	movs	r3, #1
 8000b42:	425b      	negs	r3, r3
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2302      	movs	r3, #2
 8000b48:	f000 fe40 	bl	80017cc <HAL_I2C_Master_Transmit>
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit2Buff, 2, HAL_MAX_DELAY);
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <updateAndDisplayTime+0x10c>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b299      	uxth	r1, r3
 8000b56:	1dfc      	adds	r4, r7, #7
 8000b58:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <updateAndDisplayTime+0x104>)
 8000b5a:	4816      	ldr	r0, [pc, #88]	; (8000bb4 <updateAndDisplayTime+0x110>)
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	425b      	negs	r3, r3
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	2302      	movs	r3, #2
 8000b64:	f000 fe32 	bl	80017cc <HAL_I2C_Master_Transmit>
 8000b68:	0003      	movs	r3, r0
 8000b6a:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit3Buff, 2, HAL_MAX_DELAY);
 8000b6c:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <updateAndDisplayTime+0x10c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b299      	uxth	r1, r3
 8000b72:	1dfc      	adds	r4, r7, #7
 8000b74:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <updateAndDisplayTime+0x108>)
 8000b76:	480f      	ldr	r0, [pc, #60]	; (8000bb4 <updateAndDisplayTime+0x110>)
 8000b78:	2301      	movs	r3, #1
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f000 fe24 	bl	80017cc <HAL_I2C_Master_Transmit>
 8000b84:	0003      	movs	r3, r0
 8000b86:	7023      	strb	r3, [r4, #0]
//	}
//	else {
//		printf("Updated time sent to current display.\n\r");
//	}

	return halRet;
 8000b88:	1dfb      	adds	r3, r7, #7
 8000b8a:	781b      	ldrb	r3, [r3, #0]

}
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b003      	add	sp, #12
 8000b92:	bd90      	pop	{r4, r7, pc}
 8000b94:	200001cc 	.word	0x200001cc
 8000b98:	2000010c 	.word	0x2000010c
 8000b9c:	200001e0 	.word	0x200001e0
 8000ba0:	2000001c 	.word	0x2000001c
 8000ba4:	20000020 	.word	0x20000020
 8000ba8:	20000024 	.word	0x20000024
 8000bac:	20000028 	.word	0x20000028
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	200000b8 	.word	0x200000b8

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <Error_Handler+0x8>
	...

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <HAL_MspInit+0x44>)
 8000bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_MspInit+0x44>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	641a      	str	r2, [r3, #64]	; 0x40
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <HAL_MspInit+0x44>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4013      	ands	r3, r2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_MspInit+0x44>)
 8000be4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_MspInit+0x44>)
 8000be8:	2180      	movs	r1, #128	; 0x80
 8000bea:	0549      	lsls	r1, r1, #21
 8000bec:	430a      	orrs	r2, r1
 8000bee:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <HAL_MspInit+0x44>)
 8000bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	055b      	lsls	r3, r3, #21
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b002      	add	sp, #8
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b095      	sub	sp, #84	; 0x54
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	233c      	movs	r3, #60	; 0x3c
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	0018      	movs	r0, r3
 8000c1a:	2314      	movs	r3, #20
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f003 fff0 	bl	8004c04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c24:	2414      	movs	r4, #20
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	0018      	movs	r0, r3
 8000c2a:	2328      	movs	r3, #40	; 0x28
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	f003 ffe8 	bl	8004c04 <memset>
  if(hi2c->Instance==I2C1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a26      	ldr	r2, [pc, #152]	; (8000cd4 <HAL_I2C_MspInit+0xc8>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d146      	bne.n	8000ccc <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	2220      	movs	r2, #32
 8000c42:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f002 fc61 	bl	8003514 <HAL_RCCEx_PeriphCLKConfig>
 8000c52:	1e03      	subs	r3, r0, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c56:	f7ff ffaf 	bl	8000bb8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <HAL_I2C_MspInit+0xcc>)
 8000c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <HAL_I2C_MspInit+0xcc>)
 8000c60:	2102      	movs	r1, #2
 8000c62:	430a      	orrs	r2, r1
 8000c64:	635a      	str	r2, [r3, #52]	; 0x34
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <HAL_I2C_MspInit+0xcc>)
 8000c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000c72:	213c      	movs	r1, #60	; 0x3c
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	22c0      	movs	r2, #192	; 0xc0
 8000c78:	0092      	lsls	r2, r2, #2
 8000c7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2212      	movs	r2, #18
 8000c80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2206      	movs	r2, #6
 8000c92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	4a11      	ldr	r2, [pc, #68]	; (8000cdc <HAL_I2C_MspInit+0xd0>)
 8000c98:	0019      	movs	r1, r3
 8000c9a:	0010      	movs	r0, r2
 8000c9c:	f000 fb7e 	bl	800139c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_I2C_MspInit+0xcc>)
 8000ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_I2C_MspInit+0xcc>)
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	0389      	lsls	r1, r1, #14
 8000caa:	430a      	orrs	r2, r1
 8000cac:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_I2C_MspInit+0xcc>)
 8000cb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	039b      	lsls	r3, r3, #14
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2017      	movs	r0, #23
 8000cc2:	f000 fac3 	bl	800124c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000cc6:	2017      	movs	r0, #23
 8000cc8:	f000 fad5 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b015      	add	sp, #84	; 0x54
 8000cd2:	bd90      	pop	{r4, r7, pc}
 8000cd4:	40005400 	.word	0x40005400
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	50000400 	.word	0x50000400

08000ce0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b08f      	sub	sp, #60	; 0x3c
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce8:	2410      	movs	r4, #16
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	0018      	movs	r0, r3
 8000cee:	2328      	movs	r3, #40	; 0x28
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f003 ff86 	bl	8004c04 <memset>
  if(hrtc->Instance==RTC)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a15      	ldr	r2, [pc, #84]	; (8000d54 <HAL_RTC_MspInit+0x74>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d124      	bne.n	8000d4c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	0292      	lsls	r2, r2, #10
 8000d08:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d0a:	193b      	adds	r3, r7, r4
 8000d0c:	2280      	movs	r2, #128	; 0x80
 8000d0e:	0092      	lsls	r2, r2, #2
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	0018      	movs	r0, r3
 8000d16:	f002 fbfd 	bl	8003514 <HAL_RCCEx_PeriphCLKConfig>
 8000d1a:	1e03      	subs	r3, r0, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d1e:	f7ff ff4b 	bl	8000bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_RTC_MspInit+0x78>)
 8000d24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_RTC_MspInit+0x78>)
 8000d28:	2180      	movs	r1, #128	; 0x80
 8000d2a:	0209      	lsls	r1, r1, #8
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_RTC_MspInit+0x78>)
 8000d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_RTC_MspInit+0x78>)
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	00c9      	lsls	r1, r1, #3
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_RTC_MspInit+0x78>)
 8000d40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4013      	ands	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b00f      	add	sp, #60	; 0x3c
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	40002800 	.word	0x40002800
 8000d58:	40021000 	.word	0x40021000

08000d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b08b      	sub	sp, #44	; 0x2c
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	2414      	movs	r4, #20
 8000d66:	193b      	adds	r3, r7, r4
 8000d68:	0018      	movs	r0, r3
 8000d6a:	2314      	movs	r3, #20
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f003 ff48 	bl	8004c04 <memset>
  if(huart->Instance==USART2)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a1b      	ldr	r2, [pc, #108]	; (8000de8 <HAL_UART_MspInit+0x8c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d130      	bne.n	8000de0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <HAL_UART_MspInit+0x90>)
 8000d80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <HAL_UART_MspInit+0x90>)
 8000d84:	2180      	movs	r1, #128	; 0x80
 8000d86:	0289      	lsls	r1, r1, #10
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d8c:	4b17      	ldr	r3, [pc, #92]	; (8000dec <HAL_UART_MspInit+0x90>)
 8000d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	029b      	lsls	r3, r3, #10
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <HAL_UART_MspInit+0x90>)
 8000d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <HAL_UART_MspInit+0x90>)
 8000da0:	2101      	movs	r1, #1
 8000da2:	430a      	orrs	r2, r1
 8000da4:	635a      	str	r2, [r3, #52]	; 0x34
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_UART_MspInit+0x90>)
 8000da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000daa:	2201      	movs	r2, #1
 8000dac:	4013      	ands	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000db2:	0021      	movs	r1, r4
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	220c      	movs	r2, #12
 8000db8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2201      	movs	r2, #1
 8000dd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	187a      	adds	r2, r7, r1
 8000dd4:	23a0      	movs	r3, #160	; 0xa0
 8000dd6:	05db      	lsls	r3, r3, #23
 8000dd8:	0011      	movs	r1, r2
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f000 fade 	bl	800139c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b00b      	add	sp, #44	; 0x2c
 8000de6:	bd90      	pop	{r4, r7, pc}
 8000de8:	40004400 	.word	0x40004400
 8000dec:	40021000 	.word	0x40021000

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e14:	f000 f952 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <I2C1_IRQHandler+0x2c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	699a      	ldr	r2, [r3, #24]
 8000e2a:	23e0      	movs	r3, #224	; 0xe0
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d004      	beq.n	8000e3c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <I2C1_IRQHandler+0x2c>)
 8000e34:	0018      	movs	r0, r3
 8000e36:	f000 fdeb 	bl	8001a10 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000e3a:	e003      	b.n	8000e44 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <I2C1_IRQHandler+0x2c>)
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 fdcc 	bl	80019dc <HAL_I2C_EV_IRQHandler>
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	200000b8 	.word	0x200000b8

08000e50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	e00a      	b.n	8000e78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e62:	e000      	b.n	8000e66 <_read+0x16>
 8000e64:	bf00      	nop
 8000e66:	0001      	movs	r1, r0
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	1c5a      	adds	r2, r3, #1
 8000e6c:	60ba      	str	r2, [r7, #8]
 8000e6e:	b2ca      	uxtb	r2, r1
 8000e70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	dbf0      	blt.n	8000e62 <_read+0x12>
  }

  return len;
 8000e80:	687b      	ldr	r3, [r7, #4]
}
 8000e82:	0018      	movs	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b006      	add	sp, #24
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	60f8      	str	r0, [r7, #12]
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	e009      	b.n	8000eb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	60ba      	str	r2, [r7, #8]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff fad9 	bl	800045c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	3301      	adds	r3, #1
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	dbf1      	blt.n	8000e9c <_write+0x12>
  }
  return len;
 8000eb8:	687b      	ldr	r3, [r7, #4]
}
 8000eba:	0018      	movs	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b006      	add	sp, #24
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <_close>:

int _close(int file)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	425b      	negs	r3, r3
}
 8000ece:	0018      	movs	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	0192      	lsls	r2, r2, #6
 8000ee6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_isatty>:

int _isatty(int file)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	0018      	movs	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b002      	add	sp, #8
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	0018      	movs	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b004      	add	sp, #16
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f24:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <_sbrk+0x5c>)
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <_sbrk+0x60>)
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <_sbrk+0x64>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <_sbrk+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	18d3      	adds	r3, r2, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d207      	bcs.n	8000f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f4c:	f003 fe30 	bl	8004bb0 <__errno>
 8000f50:	0003      	movs	r3, r0
 8000f52:	220c      	movs	r2, #12
 8000f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	425b      	negs	r3, r3
 8000f5a:	e009      	b.n	8000f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	18d2      	adds	r2, r2, r3
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <_sbrk+0x64>)
 8000f6c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
}
 8000f70:	0018      	movs	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b006      	add	sp, #24
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20002000 	.word	0x20002000
 8000f7c:	00000400 	.word	0x00000400
 8000f80:	200001e4 	.word	0x200001e4
 8000f84:	20000200 	.word	0x20000200

08000f88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f96:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f98:	f7ff fff6 	bl	8000f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9e:	490d      	ldr	r1, [pc, #52]	; (8000fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <LoopForever+0xe>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb4:	4c0a      	ldr	r4, [pc, #40]	; (8000fe0 <LoopForever+0x16>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fc2:	f003 fdfb 	bl	8004bbc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fc6:	f7ff fa5b 	bl	8000480 <main>

08000fca <LoopForever>:

LoopForever:
  b LoopForever
 8000fca:	e7fe      	b.n	8000fca <LoopForever>
  ldr   r0, =_estack
 8000fcc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000fd8:	08005ed0 	.word	0x08005ed0
  ldr r2, =_sbss
 8000fdc:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000fe0:	200001fc 	.word	0x200001fc

08000fe4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_Init+0x3c>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_Init+0x3c>)
 8000ffa:	2180      	movs	r1, #128	; 0x80
 8000ffc:	0049      	lsls	r1, r1, #1
 8000ffe:	430a      	orrs	r2, r1
 8001000:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001002:	2000      	movs	r0, #0
 8001004:	f000 f810 	bl	8001028 <HAL_InitTick>
 8001008:	1e03      	subs	r3, r0, #0
 800100a:	d003      	beq.n	8001014 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800100c:	1dfb      	adds	r3, r7, #7
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
 8001012:	e001      	b.n	8001018 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001014:	f7ff fdd6 	bl	8000bc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001018:	1dfb      	adds	r3, r7, #7
 800101a:	781b      	ldrb	r3, [r3, #0]
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b002      	add	sp, #8
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40022000 	.word	0x40022000

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001030:	230f      	movs	r3, #15
 8001032:	18fb      	adds	r3, r7, r3
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_InitTick+0x88>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d02b      	beq.n	8001098 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <HAL_InitTick+0x8c>)
 8001042:	681c      	ldr	r4, [r3, #0]
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_InitTick+0x88>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	0019      	movs	r1, r3
 800104a:	23fa      	movs	r3, #250	; 0xfa
 800104c:	0098      	lsls	r0, r3, #2
 800104e:	f7ff f863 	bl	8000118 <__udivsi3>
 8001052:	0003      	movs	r3, r0
 8001054:	0019      	movs	r1, r3
 8001056:	0020      	movs	r0, r4
 8001058:	f7ff f85e 	bl	8000118 <__udivsi3>
 800105c:	0003      	movs	r3, r0
 800105e:	0018      	movs	r0, r3
 8001060:	f000 f919 	bl	8001296 <HAL_SYSTICK_Config>
 8001064:	1e03      	subs	r3, r0, #0
 8001066:	d112      	bne.n	800108e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b03      	cmp	r3, #3
 800106c:	d80a      	bhi.n	8001084 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	2301      	movs	r3, #1
 8001072:	425b      	negs	r3, r3
 8001074:	2200      	movs	r2, #0
 8001076:	0018      	movs	r0, r3
 8001078:	f000 f8e8 	bl	800124c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_InitTick+0x90>)
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	e00d      	b.n	80010a0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001084:	230f      	movs	r3, #15
 8001086:	18fb      	adds	r3, r7, r3
 8001088:	2201      	movs	r2, #1
 800108a:	701a      	strb	r2, [r3, #0]
 800108c:	e008      	b.n	80010a0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800108e:	230f      	movs	r3, #15
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	e003      	b.n	80010a0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001098:	230f      	movs	r3, #15
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010a0:	230f      	movs	r3, #15
 80010a2:	18fb      	adds	r3, r7, r3
 80010a4:	781b      	ldrb	r3, [r3, #0]
}
 80010a6:	0018      	movs	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b005      	add	sp, #20
 80010ac:	bd90      	pop	{r4, r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	20000034 	.word	0x20000034
 80010b4:	2000002c 	.word	0x2000002c
 80010b8:	20000030 	.word	0x20000030

080010bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_IncTick+0x1c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	001a      	movs	r2, r3
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_IncTick+0x20>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	18d2      	adds	r2, r2, r3
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_IncTick+0x20>)
 80010ce:	601a      	str	r2, [r3, #0]
}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	20000034 	.word	0x20000034
 80010dc:	200001e8 	.word	0x200001e8

080010e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <HAL_GetTick+0x10>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	0018      	movs	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	200001e8 	.word	0x200001e8

080010f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	0002      	movs	r2, r0
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b7f      	cmp	r3, #127	; 0x7f
 8001106:	d809      	bhi.n	800111c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001108:	1dfb      	adds	r3, r7, #7
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	001a      	movs	r2, r3
 800110e:	231f      	movs	r3, #31
 8001110:	401a      	ands	r2, r3
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <__NVIC_EnableIRQ+0x30>)
 8001114:	2101      	movs	r1, #1
 8001116:	4091      	lsls	r1, r2
 8001118:	000a      	movs	r2, r1
 800111a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}
 8001124:	e000e100 	.word	0xe000e100

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	0002      	movs	r2, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b7f      	cmp	r3, #127	; 0x7f
 800113c:	d828      	bhi.n	8001190 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800113e:	4a2f      	ldr	r2, [pc, #188]	; (80011fc <__NVIC_SetPriority+0xd4>)
 8001140:	1dfb      	adds	r3, r7, #7
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b25b      	sxtb	r3, r3
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	33c0      	adds	r3, #192	; 0xc0
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	589b      	ldr	r3, [r3, r2]
 800114e:	1dfa      	adds	r2, r7, #7
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	0011      	movs	r1, r2
 8001154:	2203      	movs	r2, #3
 8001156:	400a      	ands	r2, r1
 8001158:	00d2      	lsls	r2, r2, #3
 800115a:	21ff      	movs	r1, #255	; 0xff
 800115c:	4091      	lsls	r1, r2
 800115e:	000a      	movs	r2, r1
 8001160:	43d2      	mvns	r2, r2
 8001162:	401a      	ands	r2, r3
 8001164:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	019b      	lsls	r3, r3, #6
 800116a:	22ff      	movs	r2, #255	; 0xff
 800116c:	401a      	ands	r2, r3
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	0018      	movs	r0, r3
 8001174:	2303      	movs	r3, #3
 8001176:	4003      	ands	r3, r0
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800117c:	481f      	ldr	r0, [pc, #124]	; (80011fc <__NVIC_SetPriority+0xd4>)
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b25b      	sxtb	r3, r3
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	430a      	orrs	r2, r1
 8001188:	33c0      	adds	r3, #192	; 0xc0
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800118e:	e031      	b.n	80011f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001190:	4a1b      	ldr	r2, [pc, #108]	; (8001200 <__NVIC_SetPriority+0xd8>)
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	0019      	movs	r1, r3
 8001198:	230f      	movs	r3, #15
 800119a:	400b      	ands	r3, r1
 800119c:	3b08      	subs	r3, #8
 800119e:	089b      	lsrs	r3, r3, #2
 80011a0:	3306      	adds	r3, #6
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	18d3      	adds	r3, r2, r3
 80011a6:	3304      	adds	r3, #4
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	1dfa      	adds	r2, r7, #7
 80011ac:	7812      	ldrb	r2, [r2, #0]
 80011ae:	0011      	movs	r1, r2
 80011b0:	2203      	movs	r2, #3
 80011b2:	400a      	ands	r2, r1
 80011b4:	00d2      	lsls	r2, r2, #3
 80011b6:	21ff      	movs	r1, #255	; 0xff
 80011b8:	4091      	lsls	r1, r2
 80011ba:	000a      	movs	r2, r1
 80011bc:	43d2      	mvns	r2, r2
 80011be:	401a      	ands	r2, r3
 80011c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	019b      	lsls	r3, r3, #6
 80011c6:	22ff      	movs	r2, #255	; 0xff
 80011c8:	401a      	ands	r2, r3
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	0018      	movs	r0, r3
 80011d0:	2303      	movs	r3, #3
 80011d2:	4003      	ands	r3, r0
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d8:	4809      	ldr	r0, [pc, #36]	; (8001200 <__NVIC_SetPriority+0xd8>)
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	001c      	movs	r4, r3
 80011e0:	230f      	movs	r3, #15
 80011e2:	4023      	ands	r3, r4
 80011e4:	3b08      	subs	r3, #8
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	430a      	orrs	r2, r1
 80011ea:	3306      	adds	r3, #6
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	18c3      	adds	r3, r0, r3
 80011f0:	3304      	adds	r3, #4
 80011f2:	601a      	str	r2, [r3, #0]
}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b003      	add	sp, #12
 80011fa:	bd90      	pop	{r4, r7, pc}
 80011fc:	e000e100 	.word	0xe000e100
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	1e5a      	subs	r2, r3, #1
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	045b      	lsls	r3, r3, #17
 8001214:	429a      	cmp	r2, r3
 8001216:	d301      	bcc.n	800121c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001218:	2301      	movs	r3, #1
 800121a:	e010      	b.n	800123e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <SysTick_Config+0x44>)
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	3a01      	subs	r2, #1
 8001222:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001224:	2301      	movs	r3, #1
 8001226:	425b      	negs	r3, r3
 8001228:	2103      	movs	r1, #3
 800122a:	0018      	movs	r0, r3
 800122c:	f7ff ff7c 	bl	8001128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <SysTick_Config+0x44>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <SysTick_Config+0x44>)
 8001238:	2207      	movs	r2, #7
 800123a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800123c:	2300      	movs	r3, #0
}
 800123e:	0018      	movs	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	b002      	add	sp, #8
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	e000e010 	.word	0xe000e010

0800124c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	210f      	movs	r1, #15
 8001258:	187b      	adds	r3, r7, r1
 800125a:	1c02      	adds	r2, r0, #0
 800125c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	187b      	adds	r3, r7, r1
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b25b      	sxtb	r3, r3
 8001266:	0011      	movs	r1, r2
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff ff5d 	bl	8001128 <__NVIC_SetPriority>
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b004      	add	sp, #16
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	0002      	movs	r2, r0
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b25b      	sxtb	r3, r3
 8001288:	0018      	movs	r0, r3
 800128a:	f7ff ff33 	bl	80010f4 <__NVIC_EnableIRQ>
}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	b002      	add	sp, #8
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	0018      	movs	r0, r3
 80012a2:	f7ff ffaf 	bl	8001204 <SysTick_Config>
 80012a6:	0003      	movs	r3, r0
}
 80012a8:	0018      	movs	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b002      	add	sp, #8
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012b8:	210f      	movs	r1, #15
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2225      	movs	r2, #37	; 0x25
 80012c4:	5c9b      	ldrb	r3, [r3, r2]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d006      	beq.n	80012da <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2204      	movs	r2, #4
 80012d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	e049      	b.n	800136e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	210e      	movs	r1, #14
 80012e6:	438a      	bics	r2, r1
 80012e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2101      	movs	r1, #1
 80012f6:	438a      	bics	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001304:	491d      	ldr	r1, [pc, #116]	; (800137c <HAL_DMA_Abort_IT+0xcc>)
 8001306:	400a      	ands	r2, r1
 8001308:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800130a:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <HAL_DMA_Abort_IT+0xd0>)
 800130c:	6859      	ldr	r1, [r3, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	221c      	movs	r2, #28
 8001314:	4013      	ands	r3, r2
 8001316:	2201      	movs	r2, #1
 8001318:	409a      	lsls	r2, r3
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_DMA_Abort_IT+0xd0>)
 800131c:	430a      	orrs	r2, r1
 800131e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001328:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00c      	beq.n	800134c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800133c:	490f      	ldr	r1, [pc, #60]	; (800137c <HAL_DMA_Abort_IT+0xcc>)
 800133e:	400a      	ands	r2, r1
 8001340:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800134a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2225      	movs	r2, #37	; 0x25
 8001350:	2101      	movs	r1, #1
 8001352:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2224      	movs	r2, #36	; 0x24
 8001358:	2100      	movs	r1, #0
 800135a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001360:	2b00      	cmp	r3, #0
 8001362:	d004      	beq.n	800136e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	0010      	movs	r0, r2
 800136c:	4798      	blx	r3
    }
  }
  return status;
 800136e:	230f      	movs	r3, #15
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	781b      	ldrb	r3, [r3, #0]
}
 8001374:	0018      	movs	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	b004      	add	sp, #16
 800137a:	bd80      	pop	{r7, pc}
 800137c:	fffffeff 	.word	0xfffffeff
 8001380:	40020000 	.word	0x40020000

08001384 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2225      	movs	r2, #37	; 0x25
 8001390:	5c9b      	ldrb	r3, [r3, r2]
 8001392:	b2db      	uxtb	r3, r3
}
 8001394:	0018      	movs	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	b002      	add	sp, #8
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013aa:	e147      	b.n	800163c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2101      	movs	r1, #1
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	4091      	lsls	r1, r2
 80013b6:	000a      	movs	r2, r1
 80013b8:	4013      	ands	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d100      	bne.n	80013c4 <HAL_GPIO_Init+0x28>
 80013c2:	e138      	b.n	8001636 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2203      	movs	r2, #3
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d005      	beq.n	80013dc <HAL_GPIO_Init+0x40>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2203      	movs	r2, #3
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d130      	bne.n	800143e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	409a      	lsls	r2, r3
 80013ea:	0013      	movs	r3, r2
 80013ec:	43da      	mvns	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	409a      	lsls	r2, r3
 80013fe:	0013      	movs	r3, r2
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001412:	2201      	movs	r2, #1
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	43da      	mvns	r2, r3
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	2201      	movs	r2, #1
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
 8001430:	0013      	movs	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2203      	movs	r2, #3
 8001444:	4013      	ands	r3, r2
 8001446:	2b03      	cmp	r3, #3
 8001448:	d017      	beq.n	800147a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	409a      	lsls	r2, r3
 8001458:	0013      	movs	r3, r2
 800145a:	43da      	mvns	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	409a      	lsls	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2203      	movs	r2, #3
 8001480:	4013      	ands	r3, r2
 8001482:	2b02      	cmp	r3, #2
 8001484:	d123      	bne.n	80014ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	0092      	lsls	r2, r2, #2
 8001490:	58d3      	ldr	r3, [r2, r3]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2207      	movs	r2, #7
 8001498:	4013      	ands	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	409a      	lsls	r2, r3
 80014a0:	0013      	movs	r3, r2
 80014a2:	43da      	mvns	r2, r3
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	691a      	ldr	r2, [r3, #16]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	2107      	movs	r1, #7
 80014b2:	400b      	ands	r3, r1
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	409a      	lsls	r2, r3
 80014b8:	0013      	movs	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	0092      	lsls	r2, r2, #2
 80014ca:	6939      	ldr	r1, [r7, #16]
 80014cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	409a      	lsls	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	43da      	mvns	r2, r3
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2203      	movs	r2, #3
 80014ec:	401a      	ands	r2, r3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	409a      	lsls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	23c0      	movs	r3, #192	; 0xc0
 8001508:	029b      	lsls	r3, r3, #10
 800150a:	4013      	ands	r3, r2
 800150c:	d100      	bne.n	8001510 <HAL_GPIO_Init+0x174>
 800150e:	e092      	b.n	8001636 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001510:	4a50      	ldr	r2, [pc, #320]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	089b      	lsrs	r3, r3, #2
 8001516:	3318      	adds	r3, #24
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	589b      	ldr	r3, [r3, r2]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2203      	movs	r2, #3
 8001522:	4013      	ands	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	220f      	movs	r2, #15
 8001528:	409a      	lsls	r2, r3
 800152a:	0013      	movs	r3, r2
 800152c:	43da      	mvns	r2, r3
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	23a0      	movs	r3, #160	; 0xa0
 8001538:	05db      	lsls	r3, r3, #23
 800153a:	429a      	cmp	r2, r3
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0x1ca>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a45      	ldr	r2, [pc, #276]	; (8001658 <HAL_GPIO_Init+0x2bc>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d00d      	beq.n	8001562 <HAL_GPIO_Init+0x1c6>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a44      	ldr	r2, [pc, #272]	; (800165c <HAL_GPIO_Init+0x2c0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d007      	beq.n	800155e <HAL_GPIO_Init+0x1c2>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a43      	ldr	r2, [pc, #268]	; (8001660 <HAL_GPIO_Init+0x2c4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_GPIO_Init+0x1be>
 8001556:	2303      	movs	r3, #3
 8001558:	e006      	b.n	8001568 <HAL_GPIO_Init+0x1cc>
 800155a:	2305      	movs	r3, #5
 800155c:	e004      	b.n	8001568 <HAL_GPIO_Init+0x1cc>
 800155e:	2302      	movs	r3, #2
 8001560:	e002      	b.n	8001568 <HAL_GPIO_Init+0x1cc>
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <HAL_GPIO_Init+0x1cc>
 8001566:	2300      	movs	r3, #0
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	2103      	movs	r1, #3
 800156c:	400a      	ands	r2, r1
 800156e:	00d2      	lsls	r2, r2, #3
 8001570:	4093      	lsls	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001578:	4936      	ldr	r1, [pc, #216]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	089b      	lsrs	r3, r3, #2
 800157e:	3318      	adds	r3, #24
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001586:	4b33      	ldr	r3, [pc, #204]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43da      	mvns	r2, r3
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	035b      	lsls	r3, r3, #13
 800159e:	4013      	ands	r3, r2
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43da      	mvns	r2, r3
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	039b      	lsls	r3, r3, #14
 80015c8:	4013      	ands	r3, r2
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015d4:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015da:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 80015dc:	2384      	movs	r3, #132	; 0x84
 80015de:	58d3      	ldr	r3, [r2, r3]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	43da      	mvns	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	029b      	lsls	r3, r3, #10
 80015f4:	4013      	ands	r3, r2
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001600:	4914      	ldr	r1, [pc, #80]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 8001602:	2284      	movs	r2, #132	; 0x84
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001608:	4a12      	ldr	r2, [pc, #72]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	58d3      	ldr	r3, [r2, r3]
 800160e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	43da      	mvns	r2, r3
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	025b      	lsls	r3, r3, #9
 8001622:	4013      	ands	r3, r2
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800162e:	4909      	ldr	r1, [pc, #36]	; (8001654 <HAL_GPIO_Init+0x2b8>)
 8001630:	2280      	movs	r2, #128	; 0x80
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	40da      	lsrs	r2, r3
 8001644:	1e13      	subs	r3, r2, #0
 8001646:	d000      	beq.n	800164a <HAL_GPIO_Init+0x2ae>
 8001648:	e6b0      	b.n	80013ac <HAL_GPIO_Init+0x10>
  }
}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	46c0      	nop			; (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b006      	add	sp, #24
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021800 	.word	0x40021800
 8001658:	50000400 	.word	0x50000400
 800165c:	50000800 	.word	0x50000800
 8001660:	50000c00 	.word	0x50000c00

08001664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	0008      	movs	r0, r1
 800166e:	0011      	movs	r1, r2
 8001670:	1cbb      	adds	r3, r7, #2
 8001672:	1c02      	adds	r2, r0, #0
 8001674:	801a      	strh	r2, [r3, #0]
 8001676:	1c7b      	adds	r3, r7, #1
 8001678:	1c0a      	adds	r2, r1, #0
 800167a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800167c:	1c7b      	adds	r3, r7, #1
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d004      	beq.n	800168e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001684:	1cbb      	adds	r3, r7, #2
 8001686:	881a      	ldrh	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800168c:	e003      	b.n	8001696 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800168e:	1cbb      	adds	r3, r7, #2
 8001690:	881a      	ldrh	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	b002      	add	sp, #8
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e082      	b.n	80017b8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2241      	movs	r2, #65	; 0x41
 80016b6:	5c9b      	ldrb	r3, [r3, r2]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d107      	bne.n	80016ce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2240      	movs	r2, #64	; 0x40
 80016c2:	2100      	movs	r1, #0
 80016c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff fa9f 	bl	8000c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2241      	movs	r2, #65	; 0x41
 80016d2:	2124      	movs	r1, #36	; 0x24
 80016d4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2101      	movs	r1, #1
 80016e2:	438a      	bics	r2, r1
 80016e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4934      	ldr	r1, [pc, #208]	; (80017c0 <HAL_I2C_Init+0x120>)
 80016f0:	400a      	ands	r2, r1
 80016f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4931      	ldr	r1, [pc, #196]	; (80017c4 <HAL_I2C_Init+0x124>)
 8001700:	400a      	ands	r2, r1
 8001702:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d108      	bne.n	800171e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	0209      	lsls	r1, r1, #8
 8001718:	430a      	orrs	r2, r1
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	e007      	b.n	800172e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2184      	movs	r1, #132	; 0x84
 8001728:	0209      	lsls	r1, r1, #8
 800172a:	430a      	orrs	r2, r1
 800172c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d104      	bne.n	8001740 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2280      	movs	r2, #128	; 0x80
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	491f      	ldr	r1, [pc, #124]	; (80017c8 <HAL_I2C_Init+0x128>)
 800174c:	430a      	orrs	r2, r1
 800174e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	491a      	ldr	r1, [pc, #104]	; (80017c4 <HAL_I2C_Init+0x124>)
 800175c:	400a      	ands	r2, r1
 800175e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691a      	ldr	r2, [r3, #16]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	431a      	orrs	r2, r3
 800176a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69d9      	ldr	r1, [r3, #28]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1a      	ldr	r2, [r3, #32]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2101      	movs	r1, #1
 8001796:	430a      	orrs	r2, r1
 8001798:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2241      	movs	r2, #65	; 0x41
 80017a4:	2120      	movs	r1, #32
 80017a6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2242      	movs	r2, #66	; 0x42
 80017b2:	2100      	movs	r1, #0
 80017b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	0018      	movs	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b002      	add	sp, #8
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	f0ffffff 	.word	0xf0ffffff
 80017c4:	ffff7fff 	.word	0xffff7fff
 80017c8:	02008000 	.word	0x02008000

080017cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	0008      	movs	r0, r1
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	0019      	movs	r1, r3
 80017da:	230a      	movs	r3, #10
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	1c02      	adds	r2, r0, #0
 80017e0:	801a      	strh	r2, [r3, #0]
 80017e2:	2308      	movs	r3, #8
 80017e4:	18fb      	adds	r3, r7, r3
 80017e6:	1c0a      	adds	r2, r1, #0
 80017e8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2241      	movs	r2, #65	; 0x41
 80017ee:	5c9b      	ldrb	r3, [r3, r2]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b20      	cmp	r3, #32
 80017f4:	d000      	beq.n	80017f8 <HAL_I2C_Master_Transmit+0x2c>
 80017f6:	e0e7      	b.n	80019c8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2240      	movs	r2, #64	; 0x40
 80017fc:	5c9b      	ldrb	r3, [r3, r2]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_I2C_Master_Transmit+0x3a>
 8001802:	2302      	movs	r3, #2
 8001804:	e0e1      	b.n	80019ca <HAL_I2C_Master_Transmit+0x1fe>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2240      	movs	r2, #64	; 0x40
 800180a:	2101      	movs	r1, #1
 800180c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800180e:	f7ff fc67 	bl	80010e0 <HAL_GetTick>
 8001812:	0003      	movs	r3, r0
 8001814:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	0219      	lsls	r1, r3, #8
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2319      	movs	r3, #25
 8001822:	2201      	movs	r2, #1
 8001824:	f000 fe76 	bl	8002514 <I2C_WaitOnFlagUntilTimeout>
 8001828:	1e03      	subs	r3, r0, #0
 800182a:	d001      	beq.n	8001830 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0cc      	b.n	80019ca <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2241      	movs	r2, #65	; 0x41
 8001834:	2121      	movs	r1, #33	; 0x21
 8001836:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2242      	movs	r2, #66	; 0x42
 800183c:	2110      	movs	r1, #16
 800183e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2208      	movs	r2, #8
 8001850:	18ba      	adds	r2, r7, r2
 8001852:	8812      	ldrh	r2, [r2, #0]
 8001854:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001860:	b29b      	uxth	r3, r3
 8001862:	2bff      	cmp	r3, #255	; 0xff
 8001864:	d911      	bls.n	800188a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	22ff      	movs	r2, #255	; 0xff
 800186a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001870:	b2da      	uxtb	r2, r3
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	045c      	lsls	r4, r3, #17
 8001876:	230a      	movs	r3, #10
 8001878:	18fb      	adds	r3, r7, r3
 800187a:	8819      	ldrh	r1, [r3, #0]
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	4b55      	ldr	r3, [pc, #340]	; (80019d4 <HAL_I2C_Master_Transmit+0x208>)
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	0023      	movs	r3, r4
 8001884:	f001 f800 	bl	8002888 <I2C_TransferConfig>
 8001888:	e075      	b.n	8001976 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188e:	b29a      	uxth	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001898:	b2da      	uxtb	r2, r3
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	049c      	lsls	r4, r3, #18
 800189e:	230a      	movs	r3, #10
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	8819      	ldrh	r1, [r3, #0]
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	4b4b      	ldr	r3, [pc, #300]	; (80019d4 <HAL_I2C_Master_Transmit+0x208>)
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	0023      	movs	r3, r4
 80018ac:	f000 ffec 	bl	8002888 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80018b0:	e061      	b.n	8001976 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	0018      	movs	r0, r3
 80018ba:	f000 fe6a 	bl	8002592 <I2C_WaitOnTXISFlagUntilTimeout>
 80018be:	1e03      	subs	r3, r0, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e081      	b.n	80019ca <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	3b01      	subs	r3, #1
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ee:	3b01      	subs	r3, #1
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d03a      	beq.n	8001976 <HAL_I2C_Master_Transmit+0x1aa>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001904:	2b00      	cmp	r3, #0
 8001906:	d136      	bne.n	8001976 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	0013      	movs	r3, r2
 8001912:	2200      	movs	r2, #0
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	f000 fdfd 	bl	8002514 <I2C_WaitOnFlagUntilTimeout>
 800191a:	1e03      	subs	r3, r0, #0
 800191c:	d001      	beq.n	8001922 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e053      	b.n	80019ca <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001926:	b29b      	uxth	r3, r3
 8001928:	2bff      	cmp	r3, #255	; 0xff
 800192a:	d911      	bls.n	8001950 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	22ff      	movs	r2, #255	; 0xff
 8001930:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001936:	b2da      	uxtb	r2, r3
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	045c      	lsls	r4, r3, #17
 800193c:	230a      	movs	r3, #10
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	8819      	ldrh	r1, [r3, #0]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	2300      	movs	r3, #0
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	0023      	movs	r3, r4
 800194a:	f000 ff9d 	bl	8002888 <I2C_TransferConfig>
 800194e:	e012      	b.n	8001976 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001954:	b29a      	uxth	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195e:	b2da      	uxtb	r2, r3
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	049c      	lsls	r4, r3, #18
 8001964:	230a      	movs	r3, #10
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	8819      	ldrh	r1, [r3, #0]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	2300      	movs	r3, #0
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	0023      	movs	r3, r4
 8001972:	f000 ff89 	bl	8002888 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197a:	b29b      	uxth	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d198      	bne.n	80018b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	0018      	movs	r0, r3
 8001988:	f000 fe42 	bl	8002610 <I2C_WaitOnSTOPFlagUntilTimeout>
 800198c:	1e03      	subs	r3, r0, #0
 800198e:	d001      	beq.n	8001994 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e01a      	b.n	80019ca <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2220      	movs	r2, #32
 800199a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	490c      	ldr	r1, [pc, #48]	; (80019d8 <HAL_I2C_Master_Transmit+0x20c>)
 80019a8:	400a      	ands	r2, r1
 80019aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2241      	movs	r2, #65	; 0x41
 80019b0:	2120      	movs	r1, #32
 80019b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2242      	movs	r2, #66	; 0x42
 80019b8:	2100      	movs	r1, #0
 80019ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2240      	movs	r2, #64	; 0x40
 80019c0:	2100      	movs	r1, #0
 80019c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	e000      	b.n	80019ca <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80019c8:	2302      	movs	r3, #2
  }
}
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b007      	add	sp, #28
 80019d0:	bd90      	pop	{r4, r7, pc}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	80002000 	.word	0x80002000
 80019d8:	fe00e800 	.word	0xfe00e800

080019dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	68f9      	ldr	r1, [r7, #12]
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	4798      	blx	r3
  }
}
 8001a08:	46c0      	nop			; (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b004      	add	sp, #16
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	0a1b      	lsrs	r3, r3, #8
 8001a2c:	001a      	movs	r2, r3
 8001a2e:	2301      	movs	r3, #1
 8001a30:	4013      	ands	r3, r2
 8001a32:	d010      	beq.n	8001a56 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	09db      	lsrs	r3, r3, #7
 8001a38:	001a      	movs	r2, r3
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001a3e:	d00a      	beq.n	8001a56 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	2201      	movs	r2, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2280      	movs	r2, #128	; 0x80
 8001a52:	0052      	lsls	r2, r2, #1
 8001a54:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	0a9b      	lsrs	r3, r3, #10
 8001a5a:	001a      	movs	r2, r3
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d010      	beq.n	8001a84 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	09db      	lsrs	r3, r3, #7
 8001a66:	001a      	movs	r2, r3
 8001a68:	2301      	movs	r3, #1
 8001a6a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001a6c:	d00a      	beq.n	8001a84 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	2208      	movs	r2, #8
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2280      	movs	r2, #128	; 0x80
 8001a80:	00d2      	lsls	r2, r2, #3
 8001a82:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	0a5b      	lsrs	r3, r3, #9
 8001a88:	001a      	movs	r2, r3
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d010      	beq.n	8001ab2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	09db      	lsrs	r3, r3, #7
 8001a94:	001a      	movs	r2, r3
 8001a96:	2301      	movs	r3, #1
 8001a98:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001a9a:	d00a      	beq.n	8001ab2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2280      	movs	r2, #128	; 0x80
 8001aae:	0092      	lsls	r2, r2, #2
 8001ab0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	220b      	movs	r2, #11
 8001abc:	4013      	ands	r3, r2
 8001abe:	d005      	beq.n	8001acc <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	0011      	movs	r1, r2
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f000 fbd8 	bl	800227c <I2C_ITError>
  }
}
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b006      	add	sp, #24
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	0008      	movs	r0, r1
 8001afe:	0011      	movs	r1, r2
 8001b00:	1cfb      	adds	r3, r7, #3
 8001b02:	1c02      	adds	r2, r0, #0
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	003b      	movs	r3, r7
 8001b08:	1c0a      	adds	r2, r1, #0
 8001b0a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001b0c:	46c0      	nop			; (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b002      	add	sp, #8
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001b2c:	46c0      	nop			; (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b002      	add	sp, #8
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001b3c:	46c0      	nop			; (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b002      	add	sp, #8
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2240      	movs	r2, #64	; 0x40
 8001b5e:	5c9b      	ldrb	r3, [r3, r2]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <I2C_Slave_ISR_IT+0x24>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e0fa      	b.n	8001d5e <I2C_Slave_ISR_IT+0x21a>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2240      	movs	r2, #64	; 0x40
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	001a      	movs	r2, r3
 8001b76:	2301      	movs	r3, #1
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d00b      	beq.n	8001b94 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	001a      	movs	r2, r3
 8001b82:	2301      	movs	r3, #1
 8001b84:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b86:	d005      	beq.n	8001b94 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	0011      	movs	r1, r2
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f000 f9f6 	bl	8001f80 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	001a      	movs	r2, r3
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d054      	beq.n	8001c4a <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	001a      	movs	r2, r3
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001baa:	d04e      	beq.n	8001c4a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d12d      	bne.n	8001c12 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2241      	movs	r2, #65	; 0x41
 8001bba:	5c9b      	ldrb	r3, [r3, r2]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b28      	cmp	r3, #40	; 0x28
 8001bc0:	d10b      	bne.n	8001bda <I2C_Slave_ISR_IT+0x96>
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	049b      	lsls	r3, r3, #18
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d106      	bne.n	8001bda <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	0011      	movs	r1, r2
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f000 faf8 	bl	80021c8 <I2C_ITListenCplt>
 8001bd8:	e036      	b.n	8001c48 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2241      	movs	r2, #65	; 0x41
 8001bde:	5c9b      	ldrb	r3, [r3, r2]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b29      	cmp	r3, #41	; 0x29
 8001be4:	d110      	bne.n	8001c08 <I2C_Slave_ISR_IT+0xc4>
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	4a5f      	ldr	r2, [pc, #380]	; (8001d68 <I2C_Slave_ISR_IT+0x224>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00c      	beq.n	8001c08 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f000 fc4a 	bl	8002492 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	0018      	movs	r0, r3
 8001c02:	f000 f957 	bl	8001eb4 <I2C_ITSlaveSeqCplt>
 8001c06:	e01f      	b.n	8001c48 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2210      	movs	r2, #16
 8001c0e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001c10:	e09d      	b.n	8001d4e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2210      	movs	r2, #16
 8001c18:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	2204      	movs	r2, #4
 8001c20:	431a      	orrs	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <I2C_Slave_ISR_IT+0xf4>
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	045b      	lsls	r3, r3, #17
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d000      	beq.n	8001c38 <I2C_Slave_ISR_IT+0xf4>
 8001c36:	e08a      	b.n	8001d4e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	0011      	movs	r1, r2
 8001c40:	0018      	movs	r0, r3
 8001c42:	f000 fb1b 	bl	800227c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001c46:	e082      	b.n	8001d4e <I2C_Slave_ISR_IT+0x20a>
 8001c48:	e081      	b.n	8001d4e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	001a      	movs	r2, r3
 8001c50:	2301      	movs	r3, #1
 8001c52:	4013      	ands	r3, r2
 8001c54:	d031      	beq.n	8001cba <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	001a      	movs	r2, r3
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001c60:	d02b      	beq.n	8001cba <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d018      	beq.n	8001c9e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d154      	bne.n	8001d52 <I2C_Slave_ISR_IT+0x20e>
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	4a2f      	ldr	r2, [pc, #188]	; (8001d68 <I2C_Slave_ISR_IT+0x224>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d050      	beq.n	8001d52 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f000 f8fe 	bl	8001eb4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001cb8:	e04b      	b.n	8001d52 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	08db      	lsrs	r3, r3, #3
 8001cbe:	001a      	movs	r2, r3
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d00c      	beq.n	8001ce0 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	08db      	lsrs	r3, r3, #3
 8001cca:	001a      	movs	r2, r3
 8001ccc:	2301      	movs	r3, #1
 8001cce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001cd0:	d006      	beq.n	8001ce0 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	0011      	movs	r1, r2
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f000 f847 	bl	8001d6c <I2C_ITAddrCplt>
 8001cde:	e039      	b.n	8001d54 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	085b      	lsrs	r3, r3, #1
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d033      	beq.n	8001d54 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	085b      	lsrs	r3, r3, #1
 8001cf0:	001a      	movs	r2, r3
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001cf6:	d02d      	beq.n	8001d54 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d018      	beq.n	8001d34 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	781a      	ldrb	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	851a      	strh	r2, [r3, #40]	; 0x28
 8001d32:	e00f      	b.n	8001d54 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	045b      	lsls	r3, r3, #17
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d002      	beq.n	8001d44 <I2C_Slave_ISR_IT+0x200>
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d107      	bne.n	8001d54 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	0018      	movs	r0, r3
 8001d48:	f000 f8b4 	bl	8001eb4 <I2C_ITSlaveSeqCplt>
 8001d4c:	e002      	b.n	8001d54 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	e000      	b.n	8001d54 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8001d52:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2240      	movs	r2, #64	; 0x40
 8001d58:	2100      	movs	r1, #0
 8001d5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b006      	add	sp, #24
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	ffff0000 	.word	0xffff0000

08001d6c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d6c:	b5b0      	push	{r4, r5, r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2241      	movs	r2, #65	; 0x41
 8001d7a:	5c9b      	ldrb	r3, [r3, r2]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	001a      	movs	r2, r3
 8001d80:	2328      	movs	r3, #40	; 0x28
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b28      	cmp	r3, #40	; 0x28
 8001d86:	d000      	beq.n	8001d8a <I2C_ITAddrCplt+0x1e>
 8001d88:	e088      	b.n	8001e9c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	0c1b      	lsrs	r3, r3, #16
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	250f      	movs	r5, #15
 8001d96:	197b      	adds	r3, r7, r5
 8001d98:	2101      	movs	r1, #1
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	200c      	movs	r0, #12
 8001daa:	183b      	adds	r3, r7, r0
 8001dac:	21fe      	movs	r1, #254	; 0xfe
 8001dae:	400a      	ands	r2, r1
 8001db0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	240a      	movs	r4, #10
 8001dbc:	193b      	adds	r3, r7, r4
 8001dbe:	0592      	lsls	r2, r2, #22
 8001dc0:	0d92      	lsrs	r2, r2, #22
 8001dc2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	2308      	movs	r3, #8
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	21fe      	movs	r1, #254	; 0xfe
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d148      	bne.n	8001e70 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001dde:	0021      	movs	r1, r4
 8001de0:	187b      	adds	r3, r7, r1
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	09db      	lsrs	r3, r3, #7
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	183b      	adds	r3, r7, r0
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	4053      	eors	r3, r2
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	001a      	movs	r2, r3
 8001df2:	2306      	movs	r3, #6
 8001df4:	4013      	ands	r3, r2
 8001df6:	d120      	bne.n	8001e3a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8001df8:	183b      	adds	r3, r7, r0
 8001dfa:	187a      	adds	r2, r7, r1
 8001dfc:	8812      	ldrh	r2, [r2, #0]
 8001dfe:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d14c      	bne.n	8001eac <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2240      	movs	r2, #64	; 0x40
 8001e24:	2100      	movs	r1, #0
 8001e26:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e28:	183b      	adds	r3, r7, r0
 8001e2a:	881a      	ldrh	r2, [r3, #0]
 8001e2c:	197b      	adds	r3, r7, r5
 8001e2e:	7819      	ldrb	r1, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	0018      	movs	r0, r3
 8001e34:	f7ff fe5e 	bl	8001af4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001e38:	e038      	b.n	8001eac <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8001e3a:	240c      	movs	r4, #12
 8001e3c:	193b      	adds	r3, r7, r4
 8001e3e:	2208      	movs	r2, #8
 8001e40:	18ba      	adds	r2, r7, r2
 8001e42:	8812      	ldrh	r2, [r2, #0]
 8001e44:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	021a      	lsls	r2, r3, #8
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	0011      	movs	r1, r2
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f000 fd54 	bl	80028fc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2240      	movs	r2, #64	; 0x40
 8001e58:	2100      	movs	r1, #0
 8001e5a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e5c:	193b      	adds	r3, r7, r4
 8001e5e:	881a      	ldrh	r2, [r3, #0]
 8001e60:	230f      	movs	r3, #15
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	7819      	ldrb	r1, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f7ff fe43 	bl	8001af4 <HAL_I2C_AddrCallback>
}
 8001e6e:	e01d      	b.n	8001eac <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	021a      	lsls	r2, r3, #8
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	0011      	movs	r1, r2
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f000 fd3f 	bl	80028fc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2240      	movs	r2, #64	; 0x40
 8001e82:	2100      	movs	r1, #0
 8001e84:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e86:	230c      	movs	r3, #12
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	881a      	ldrh	r2, [r3, #0]
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	7819      	ldrb	r1, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7ff fe2d 	bl	8001af4 <HAL_I2C_AddrCallback>
}
 8001e9a:	e007      	b.n	8001eac <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2240      	movs	r2, #64	; 0x40
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	5499      	strb	r1, [r3, r2]
}
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b004      	add	sp, #16
 8001eb2:	bdb0      	pop	{r4, r5, r7, pc}

08001eb4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2242      	movs	r2, #66	; 0x42
 8001ec8:	2100      	movs	r1, #0
 8001eca:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	0b9b      	lsrs	r3, r3, #14
 8001ed0:	001a      	movs	r2, r3
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d008      	beq.n	8001eea <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4925      	ldr	r1, [pc, #148]	; (8001f78 <I2C_ITSlaveSeqCplt+0xc4>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e00d      	b.n	8001f06 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	0bdb      	lsrs	r3, r3, #15
 8001eee:	001a      	movs	r2, r3
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d007      	beq.n	8001f06 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	491e      	ldr	r1, [pc, #120]	; (8001f7c <I2C_ITSlaveSeqCplt+0xc8>)
 8001f02:	400a      	ands	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2241      	movs	r2, #65	; 0x41
 8001f0a:	5c9b      	ldrb	r3, [r3, r2]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b29      	cmp	r3, #41	; 0x29
 8001f10:	d114      	bne.n	8001f3c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2241      	movs	r2, #65	; 0x41
 8001f16:	2128      	movs	r1, #40	; 0x28
 8001f18:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2221      	movs	r2, #33	; 0x21
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2101      	movs	r1, #1
 8001f24:	0018      	movs	r0, r3
 8001f26:	f000 fce9 	bl	80028fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2240      	movs	r2, #64	; 0x40
 8001f2e:	2100      	movs	r1, #0
 8001f30:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7ff fdcd 	bl	8001ad4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001f3a:	e019      	b.n	8001f70 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2241      	movs	r2, #65	; 0x41
 8001f40:	5c9b      	ldrb	r3, [r3, r2]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b2a      	cmp	r3, #42	; 0x2a
 8001f46:	d113      	bne.n	8001f70 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2241      	movs	r2, #65	; 0x41
 8001f4c:	2128      	movs	r1, #40	; 0x28
 8001f4e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2222      	movs	r2, #34	; 0x22
 8001f54:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2102      	movs	r1, #2
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f000 fcce 	bl	80028fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2240      	movs	r2, #64	; 0x40
 8001f64:	2100      	movs	r1, #0
 8001f66:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f7ff fdba 	bl	8001ae4 <HAL_I2C_SlaveRxCpltCallback>
}
 8001f70:	46c0      	nop			; (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b004      	add	sp, #16
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	ffffbfff 	.word	0xffffbfff
 8001f7c:	ffff7fff 	.word	0xffff7fff

08001f80 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001f96:	200f      	movs	r0, #15
 8001f98:	183b      	adds	r3, r7, r0
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	2141      	movs	r1, #65	; 0x41
 8001f9e:	5c52      	ldrb	r2, [r2, r1]
 8001fa0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001faa:	183b      	adds	r3, r7, r0
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b21      	cmp	r3, #33	; 0x21
 8001fb0:	d003      	beq.n	8001fba <I2C_ITSlaveCplt+0x3a>
 8001fb2:	183b      	adds	r3, r7, r0
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b29      	cmp	r3, #41	; 0x29
 8001fb8:	d109      	bne.n	8001fce <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001fba:	4a7d      	ldr	r2, [pc, #500]	; (80021b0 <I2C_ITSlaveCplt+0x230>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	0011      	movs	r1, r2
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f000 fc9b 	bl	80028fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2221      	movs	r2, #33	; 0x21
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
 8001fcc:	e011      	b.n	8001ff2 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001fce:	220f      	movs	r2, #15
 8001fd0:	18bb      	adds	r3, r7, r2
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b22      	cmp	r3, #34	; 0x22
 8001fd6:	d003      	beq.n	8001fe0 <I2C_ITSlaveCplt+0x60>
 8001fd8:	18bb      	adds	r3, r7, r2
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8001fde:	d108      	bne.n	8001ff2 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001fe0:	4a74      	ldr	r2, [pc, #464]	; (80021b4 <I2C_ITSlaveCplt+0x234>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	0011      	movs	r1, r2
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f000 fc88 	bl	80028fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2222      	movs	r2, #34	; 0x22
 8001ff0:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	0209      	lsls	r1, r1, #8
 8002000:	430a      	orrs	r2, r1
 8002002:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	496a      	ldr	r1, [pc, #424]	; (80021b8 <I2C_ITSlaveCplt+0x238>)
 8002010:	400a      	ands	r2, r1
 8002012:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	0018      	movs	r0, r3
 8002018:	f000 fa3b 	bl	8002492 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	0b9b      	lsrs	r3, r3, #14
 8002020:	001a      	movs	r2, r3
 8002022:	2301      	movs	r3, #1
 8002024:	4013      	ands	r3, r2
 8002026:	d013      	beq.n	8002050 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4962      	ldr	r1, [pc, #392]	; (80021bc <I2C_ITSlaveCplt+0x23c>)
 8002034:	400a      	ands	r2, r1
 8002036:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203c:	2b00      	cmp	r3, #0
 800203e:	d020      	beq.n	8002082 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	b29a      	uxth	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800204e:	e018      	b.n	8002082 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	0bdb      	lsrs	r3, r3, #15
 8002054:	001a      	movs	r2, r3
 8002056:	2301      	movs	r3, #1
 8002058:	4013      	ands	r3, r2
 800205a:	d012      	beq.n	8002082 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4956      	ldr	r1, [pc, #344]	; (80021c0 <I2C_ITSlaveCplt+0x240>)
 8002068:	400a      	ands	r2, r1
 800206a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	b29a      	uxth	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	001a      	movs	r2, r3
 8002088:	2301      	movs	r3, #1
 800208a:	4013      	ands	r3, r2
 800208c:	d020      	beq.n	80020d0 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2204      	movs	r2, #4
 8002092:	4393      	bics	r3, r2
 8002094:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00c      	beq.n	80020d0 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ba:	3b01      	subs	r3, #1
 80020bc:	b29a      	uxth	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	2204      	movs	r2, #4
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2242      	movs	r2, #66	; 0x42
 80020ea:	2100      	movs	r1, #0
 80020ec:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d013      	beq.n	8002124 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	0011      	movs	r1, r2
 8002104:	0018      	movs	r0, r3
 8002106:	f000 f8b9 	bl	800227c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2241      	movs	r2, #65	; 0x41
 800210e:	5c9b      	ldrb	r3, [r3, r2]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b28      	cmp	r3, #40	; 0x28
 8002114:	d147      	bne.n	80021a6 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	0011      	movs	r1, r2
 800211c:	0018      	movs	r0, r3
 800211e:	f000 f853 	bl	80021c8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002122:	e040      	b.n	80021a6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	4a26      	ldr	r2, [pc, #152]	; (80021c4 <I2C_ITSlaveCplt+0x244>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d016      	beq.n	800215c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	0018      	movs	r0, r3
 8002132:	f7ff febf 	bl	8001eb4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a22      	ldr	r2, [pc, #136]	; (80021c4 <I2C_ITSlaveCplt+0x244>)
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2241      	movs	r2, #65	; 0x41
 8002140:	2120      	movs	r1, #32
 8002142:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2240      	movs	r2, #64	; 0x40
 800214e:	2100      	movs	r1, #0
 8002150:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	0018      	movs	r0, r3
 8002156:	f7ff fcdd 	bl	8001b14 <HAL_I2C_ListenCpltCallback>
}
 800215a:	e024      	b.n	80021a6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2241      	movs	r2, #65	; 0x41
 8002160:	5c9b      	ldrb	r3, [r3, r2]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b22      	cmp	r3, #34	; 0x22
 8002166:	d10f      	bne.n	8002188 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2241      	movs	r2, #65	; 0x41
 800216c:	2120      	movs	r1, #32
 800216e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2240      	movs	r2, #64	; 0x40
 800217a:	2100      	movs	r1, #0
 800217c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	0018      	movs	r0, r3
 8002182:	f7ff fcaf 	bl	8001ae4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002186:	e00e      	b.n	80021a6 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2241      	movs	r2, #65	; 0x41
 800218c:	2120      	movs	r1, #32
 800218e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2240      	movs	r2, #64	; 0x40
 800219a:	2100      	movs	r1, #0
 800219c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f7ff fc97 	bl	8001ad4 <HAL_I2C_SlaveTxCpltCallback>
}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b006      	add	sp, #24
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	00008001 	.word	0x00008001
 80021b4:	00008002 	.word	0x00008002
 80021b8:	fe00e800 	.word	0xfe00e800
 80021bc:	ffffbfff 	.word	0xffffbfff
 80021c0:	ffff7fff 	.word	0xffff7fff
 80021c4:	ffff0000 	.word	0xffff0000

080021c8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a27      	ldr	r2, [pc, #156]	; (8002274 <I2C_ITListenCplt+0xac>)
 80021d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2241      	movs	r2, #65	; 0x41
 80021e2:	2120      	movs	r1, #32
 80021e4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2242      	movs	r2, #66	; 0x42
 80021ea:	2100      	movs	r1, #0
 80021ec:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	089b      	lsrs	r3, r3, #2
 80021f8:	001a      	movs	r2, r3
 80021fa:	2301      	movs	r3, #1
 80021fc:	4013      	ands	r3, r2
 80021fe:	d022      	beq.n	8002246 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	d012      	beq.n	8002246 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	2204      	movs	r2, #4
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002246:	4a0c      	ldr	r2, [pc, #48]	; (8002278 <I2C_ITListenCplt+0xb0>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	0011      	movs	r1, r2
 800224c:	0018      	movs	r0, r3
 800224e:	f000 fb55 	bl	80028fc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2210      	movs	r2, #16
 8002258:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2240      	movs	r2, #64	; 0x40
 800225e:	2100      	movs	r1, #0
 8002260:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	0018      	movs	r0, r3
 8002266:	f7ff fc55 	bl	8001b14 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	46bd      	mov	sp, r7
 800226e:	b002      	add	sp, #8
 8002270:	bd80      	pop	{r7, pc}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	ffff0000 	.word	0xffff0000
 8002278:	00008003 	.word	0x00008003

0800227c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002286:	200f      	movs	r0, #15
 8002288:	183b      	adds	r3, r7, r0
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	2141      	movs	r1, #65	; 0x41
 800228e:	5c52      	ldrb	r2, [r2, r1]
 8002290:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2242      	movs	r2, #66	; 0x42
 8002296:	2100      	movs	r1, #0
 8002298:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a62      	ldr	r2, [pc, #392]	; (8002428 <I2C_ITError+0x1ac>)
 800229e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80022b2:	183b      	adds	r3, r7, r0
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b28      	cmp	r3, #40	; 0x28
 80022b8:	d007      	beq.n	80022ca <I2C_ITError+0x4e>
 80022ba:	183b      	adds	r3, r7, r0
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b29      	cmp	r3, #41	; 0x29
 80022c0:	d003      	beq.n	80022ca <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80022c2:	183b      	adds	r3, r7, r0
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b2a      	cmp	r3, #42	; 0x2a
 80022c8:	d10c      	bne.n	80022e4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2103      	movs	r1, #3
 80022ce:	0018      	movs	r0, r3
 80022d0:	f000 fb14 	bl	80028fc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2241      	movs	r2, #65	; 0x41
 80022d8:	2128      	movs	r1, #40	; 0x28
 80022da:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a53      	ldr	r2, [pc, #332]	; (800242c <I2C_ITError+0x1b0>)
 80022e0:	635a      	str	r2, [r3, #52]	; 0x34
 80022e2:	e012      	b.n	800230a <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80022e4:	4a52      	ldr	r2, [pc, #328]	; (8002430 <I2C_ITError+0x1b4>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	0011      	movs	r1, r2
 80022ea:	0018      	movs	r0, r3
 80022ec:	f000 fb06 	bl	80028fc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2241      	movs	r2, #65	; 0x41
 80022f4:	5c9b      	ldrb	r3, [r3, r2]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b60      	cmp	r3, #96	; 0x60
 80022fa:	d003      	beq.n	8002304 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2241      	movs	r2, #65	; 0x41
 8002300:	2120      	movs	r1, #32
 8002302:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002314:	2b00      	cmp	r3, #0
 8002316:	d03b      	beq.n	8002390 <I2C_ITError+0x114>
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b11      	cmp	r3, #17
 800231c:	d002      	beq.n	8002324 <I2C_ITError+0xa8>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b21      	cmp	r3, #33	; 0x21
 8002322:	d135      	bne.n	8002390 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	01db      	lsls	r3, r3, #7
 800232e:	401a      	ands	r2, r3
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	01db      	lsls	r3, r3, #7
 8002334:	429a      	cmp	r2, r3
 8002336:	d107      	bne.n	8002348 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	493c      	ldr	r1, [pc, #240]	; (8002434 <I2C_ITError+0x1b8>)
 8002344:	400a      	ands	r2, r1
 8002346:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234c:	0018      	movs	r0, r3
 800234e:	f7ff f819 	bl	8001384 <HAL_DMA_GetState>
 8002352:	0003      	movs	r3, r0
 8002354:	2b01      	cmp	r3, #1
 8002356:	d016      	beq.n	8002386 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235c:	4a36      	ldr	r2, [pc, #216]	; (8002438 <I2C_ITError+0x1bc>)
 800235e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2240      	movs	r2, #64	; 0x40
 8002364:	2100      	movs	r1, #0
 8002366:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236c:	0018      	movs	r0, r3
 800236e:	f7fe ff9f 	bl	80012b0 <HAL_DMA_Abort_IT>
 8002372:	1e03      	subs	r3, r0, #0
 8002374:	d051      	beq.n	800241a <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002380:	0018      	movs	r0, r3
 8002382:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002384:	e049      	b.n	800241a <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	0018      	movs	r0, r3
 800238a:	f000 f859 	bl	8002440 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800238e:	e044      	b.n	800241a <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002394:	2b00      	cmp	r3, #0
 8002396:	d03b      	beq.n	8002410 <I2C_ITError+0x194>
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b12      	cmp	r3, #18
 800239c:	d002      	beq.n	80023a4 <I2C_ITError+0x128>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b22      	cmp	r3, #34	; 0x22
 80023a2:	d135      	bne.n	8002410 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	401a      	ands	r2, r3
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d107      	bne.n	80023c8 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	491e      	ldr	r1, [pc, #120]	; (800243c <I2C_ITError+0x1c0>)
 80023c4:	400a      	ands	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7fe ffd9 	bl	8001384 <HAL_DMA_GetState>
 80023d2:	0003      	movs	r3, r0
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d016      	beq.n	8002406 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	4a16      	ldr	r2, [pc, #88]	; (8002438 <I2C_ITError+0x1bc>)
 80023de:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2240      	movs	r2, #64	; 0x40
 80023e4:	2100      	movs	r1, #0
 80023e6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ec:	0018      	movs	r0, r3
 80023ee:	f7fe ff5f 	bl	80012b0 <HAL_DMA_Abort_IT>
 80023f2:	1e03      	subs	r3, r0, #0
 80023f4:	d013      	beq.n	800241e <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002400:	0018      	movs	r0, r3
 8002402:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002404:	e00b      	b.n	800241e <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	0018      	movs	r0, r3
 800240a:	f000 f819 	bl	8002440 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800240e:	e006      	b.n	800241e <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	0018      	movs	r0, r3
 8002414:	f000 f814 	bl	8002440 <I2C_TreatErrorCallback>
  }
}
 8002418:	e002      	b.n	8002420 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	e000      	b.n	8002420 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800241e:	46c0      	nop			; (mov r8, r8)
}
 8002420:	46c0      	nop			; (mov r8, r8)
 8002422:	46bd      	mov	sp, r7
 8002424:	b004      	add	sp, #16
 8002426:	bd80      	pop	{r7, pc}
 8002428:	ffff0000 	.word	0xffff0000
 800242c:	08001b45 	.word	0x08001b45
 8002430:	00008003 	.word	0x00008003
 8002434:	ffffbfff 	.word	0xffffbfff
 8002438:	080024d7 	.word	0x080024d7
 800243c:	ffff7fff 	.word	0xffff7fff

08002440 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2241      	movs	r2, #65	; 0x41
 800244c:	5c9b      	ldrb	r3, [r3, r2]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b60      	cmp	r3, #96	; 0x60
 8002452:	d10f      	bne.n	8002474 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2241      	movs	r2, #65	; 0x41
 8002458:	2120      	movs	r1, #32
 800245a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2240      	movs	r2, #64	; 0x40
 8002466:	2100      	movs	r1, #0
 8002468:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	0018      	movs	r0, r3
 800246e:	f7ff fb61 	bl	8001b34 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002472:	e00a      	b.n	800248a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2240      	movs	r2, #64	; 0x40
 800247e:	2100      	movs	r1, #0
 8002480:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	0018      	movs	r0, r3
 8002486:	f7ff fb4d 	bl	8001b24 <HAL_I2C_ErrorCallback>
}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	46bd      	mov	sp, r7
 800248e:	b002      	add	sp, #8
 8002490:	bd80      	pop	{r7, pc}

08002492 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2202      	movs	r2, #2
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d103      	bne.n	80024b0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2200      	movs	r2, #0
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	2201      	movs	r2, #1
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d007      	beq.n	80024ce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2101      	movs	r1, #1
 80024ca:	430a      	orrs	r2, r1
 80024cc:	619a      	str	r2, [r3, #24]
  }
}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b002      	add	sp, #8
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f0:	2200      	movs	r2, #0
 80024f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002500:	2200      	movs	r2, #0
 8002502:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	0018      	movs	r0, r3
 8002508:	f7ff ff9a 	bl	8002440 <I2C_TreatErrorCallback>
}
 800250c:	46c0      	nop			; (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b004      	add	sp, #16
 8002512:	bd80      	pop	{r7, pc}

08002514 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	1dfb      	adds	r3, r7, #7
 8002522:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002524:	e021      	b.n	800256a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	d01e      	beq.n	800256a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252c:	f7fe fdd8 	bl	80010e0 <HAL_GetTick>
 8002530:	0002      	movs	r2, r0
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d302      	bcc.n	8002542 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d113      	bne.n	800256a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	2220      	movs	r2, #32
 8002548:	431a      	orrs	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2241      	movs	r2, #65	; 0x41
 8002552:	2120      	movs	r1, #32
 8002554:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2242      	movs	r2, #66	; 0x42
 800255a:	2100      	movs	r1, #0
 800255c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2240      	movs	r2, #64	; 0x40
 8002562:	2100      	movs	r1, #0
 8002564:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e00f      	b.n	800258a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	4013      	ands	r3, r2
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	425a      	negs	r2, r3
 800257a:	4153      	adcs	r3, r2
 800257c:	b2db      	uxtb	r3, r3
 800257e:	001a      	movs	r2, r3
 8002580:	1dfb      	adds	r3, r7, #7
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d0ce      	beq.n	8002526 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	0018      	movs	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	b004      	add	sp, #16
 8002590:	bd80      	pop	{r7, pc}

08002592 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800259e:	e02b      	b.n	80025f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 f86e 	bl	8002688 <I2C_IsErrorOccurred>
 80025ac:	1e03      	subs	r3, r0, #0
 80025ae:	d001      	beq.n	80025b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e029      	b.n	8002608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	3301      	adds	r3, #1
 80025b8:	d01e      	beq.n	80025f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ba:	f7fe fd91 	bl	80010e0 <HAL_GetTick>
 80025be:	0002      	movs	r2, r0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d302      	bcc.n	80025d0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d113      	bne.n	80025f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	2220      	movs	r2, #32
 80025d6:	431a      	orrs	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2241      	movs	r2, #65	; 0x41
 80025e0:	2120      	movs	r1, #32
 80025e2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2242      	movs	r2, #66	; 0x42
 80025e8:	2100      	movs	r1, #0
 80025ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2240      	movs	r2, #64	; 0x40
 80025f0:	2100      	movs	r1, #0
 80025f2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e007      	b.n	8002608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2202      	movs	r2, #2
 8002600:	4013      	ands	r3, r2
 8002602:	2b02      	cmp	r3, #2
 8002604:	d1cc      	bne.n	80025a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	0018      	movs	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	b004      	add	sp, #16
 800260e:	bd80      	pop	{r7, pc}

08002610 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800261c:	e028      	b.n	8002670 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	0018      	movs	r0, r3
 8002626:	f000 f82f 	bl	8002688 <I2C_IsErrorOccurred>
 800262a:	1e03      	subs	r3, r0, #0
 800262c:	d001      	beq.n	8002632 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e026      	b.n	8002680 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002632:	f7fe fd55 	bl	80010e0 <HAL_GetTick>
 8002636:	0002      	movs	r2, r0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	429a      	cmp	r2, r3
 8002640:	d302      	bcc.n	8002648 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d113      	bne.n	8002670 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264c:	2220      	movs	r2, #32
 800264e:	431a      	orrs	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2241      	movs	r2, #65	; 0x41
 8002658:	2120      	movs	r1, #32
 800265a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2242      	movs	r2, #66	; 0x42
 8002660:	2100      	movs	r1, #0
 8002662:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2240      	movs	r2, #64	; 0x40
 8002668:	2100      	movs	r1, #0
 800266a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e007      	b.n	8002680 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2220      	movs	r2, #32
 8002678:	4013      	ands	r3, r2
 800267a:	2b20      	cmp	r3, #32
 800267c:	d1cf      	bne.n	800261e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	0018      	movs	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	b004      	add	sp, #16
 8002686:	bd80      	pop	{r7, pc}

08002688 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b08b      	sub	sp, #44	; 0x2c
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002694:	2327      	movs	r3, #39	; 0x27
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	2210      	movs	r2, #16
 80026b0:	4013      	ands	r3, r2
 80026b2:	d100      	bne.n	80026b6 <I2C_IsErrorOccurred+0x2e>
 80026b4:	e082      	b.n	80027bc <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2210      	movs	r2, #16
 80026bc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026be:	e060      	b.n	8002782 <I2C_IsErrorOccurred+0xfa>
 80026c0:	2427      	movs	r4, #39	; 0x27
 80026c2:	193b      	adds	r3, r7, r4
 80026c4:	193a      	adds	r2, r7, r4
 80026c6:	7812      	ldrb	r2, [r2, #0]
 80026c8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3301      	adds	r3, #1
 80026ce:	d058      	beq.n	8002782 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026d0:	f7fe fd06 	bl	80010e0 <HAL_GetTick>
 80026d4:	0002      	movs	r2, r0
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d306      	bcc.n	80026ee <I2C_IsErrorOccurred+0x66>
 80026e0:	193b      	adds	r3, r7, r4
 80026e2:	193a      	adds	r2, r7, r4
 80026e4:	7812      	ldrb	r2, [r2, #0]
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d149      	bne.n	8002782 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	01db      	lsls	r3, r3, #7
 80026f8:	4013      	ands	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026fc:	2013      	movs	r0, #19
 80026fe:	183b      	adds	r3, r7, r0
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	2142      	movs	r1, #66	; 0x42
 8002704:	5c52      	ldrb	r2, [r2, r1]
 8002706:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	2380      	movs	r3, #128	; 0x80
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	401a      	ands	r2, r3
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	429a      	cmp	r2, r3
 800271a:	d126      	bne.n	800276a <I2C_IsErrorOccurred+0xe2>
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	01db      	lsls	r3, r3, #7
 8002722:	429a      	cmp	r2, r3
 8002724:	d021      	beq.n	800276a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002726:	183b      	adds	r3, r7, r0
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b20      	cmp	r3, #32
 800272c:	d01d      	beq.n	800276a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2180      	movs	r1, #128	; 0x80
 800273a:	01c9      	lsls	r1, r1, #7
 800273c:	430a      	orrs	r2, r1
 800273e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002740:	f7fe fcce 	bl	80010e0 <HAL_GetTick>
 8002744:	0003      	movs	r3, r0
 8002746:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002748:	e00f      	b.n	800276a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800274a:	f7fe fcc9 	bl	80010e0 <HAL_GetTick>
 800274e:	0002      	movs	r2, r0
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b19      	cmp	r3, #25
 8002756:	d908      	bls.n	800276a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	2220      	movs	r2, #32
 800275c:	4313      	orrs	r3, r2
 800275e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002760:	2327      	movs	r3, #39	; 0x27
 8002762:	18fb      	adds	r3, r7, r3
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]

              break;
 8002768:	e00b      	b.n	8002782 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2220      	movs	r2, #32
 8002772:	4013      	ands	r3, r2
 8002774:	2127      	movs	r1, #39	; 0x27
 8002776:	187a      	adds	r2, r7, r1
 8002778:	1879      	adds	r1, r7, r1
 800277a:	7809      	ldrb	r1, [r1, #0]
 800277c:	7011      	strb	r1, [r2, #0]
 800277e:	2b20      	cmp	r3, #32
 8002780:	d1e3      	bne.n	800274a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2220      	movs	r2, #32
 800278a:	4013      	ands	r3, r2
 800278c:	2b20      	cmp	r3, #32
 800278e:	d004      	beq.n	800279a <I2C_IsErrorOccurred+0x112>
 8002790:	2327      	movs	r3, #39	; 0x27
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d092      	beq.n	80026c0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800279a:	2327      	movs	r3, #39	; 0x27
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d103      	bne.n	80027ac <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2220      	movs	r2, #32
 80027aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	2204      	movs	r2, #4
 80027b0:	4313      	orrs	r3, r2
 80027b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027b4:	2327      	movs	r3, #39	; 0x27
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4013      	ands	r3, r2
 80027cc:	d00c      	beq.n	80027e8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	2201      	movs	r2, #1
 80027d2:	4313      	orrs	r3, r2
 80027d4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2280      	movs	r2, #128	; 0x80
 80027dc:	0052      	lsls	r2, r2, #1
 80027de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027e0:	2327      	movs	r3, #39	; 0x27
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4013      	ands	r3, r2
 80027f0:	d00c      	beq.n	800280c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	2208      	movs	r2, #8
 80027f6:	4313      	orrs	r3, r2
 80027f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2280      	movs	r2, #128	; 0x80
 8002800:	00d2      	lsls	r2, r2, #3
 8002802:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002804:	2327      	movs	r3, #39	; 0x27
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4013      	ands	r3, r2
 8002814:	d00c      	beq.n	8002830 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	2202      	movs	r2, #2
 800281a:	4313      	orrs	r3, r2
 800281c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2280      	movs	r2, #128	; 0x80
 8002824:	0092      	lsls	r2, r2, #2
 8002826:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002828:	2327      	movs	r3, #39	; 0x27
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002830:	2327      	movs	r3, #39	; 0x27
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01d      	beq.n	8002876 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	0018      	movs	r0, r3
 800283e:	f7ff fe28 	bl	8002492 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	490d      	ldr	r1, [pc, #52]	; (8002884 <I2C_IsErrorOccurred+0x1fc>)
 800284e:	400a      	ands	r2, r1
 8002850:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	431a      	orrs	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2241      	movs	r2, #65	; 0x41
 8002862:	2120      	movs	r1, #32
 8002864:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2242      	movs	r2, #66	; 0x42
 800286a:	2100      	movs	r1, #0
 800286c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2240      	movs	r2, #64	; 0x40
 8002872:	2100      	movs	r1, #0
 8002874:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002876:	2327      	movs	r3, #39	; 0x27
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	781b      	ldrb	r3, [r3, #0]
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	b00b      	add	sp, #44	; 0x2c
 8002882:	bd90      	pop	{r4, r7, pc}
 8002884:	fe00e800 	.word	0xfe00e800

08002888 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	0008      	movs	r0, r1
 8002892:	0011      	movs	r1, r2
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	240a      	movs	r4, #10
 8002898:	193b      	adds	r3, r7, r4
 800289a:	1c02      	adds	r2, r0, #0
 800289c:	801a      	strh	r2, [r3, #0]
 800289e:	2009      	movs	r0, #9
 80028a0:	183b      	adds	r3, r7, r0
 80028a2:	1c0a      	adds	r2, r1, #0
 80028a4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028a6:	193b      	adds	r3, r7, r4
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	059b      	lsls	r3, r3, #22
 80028ac:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028ae:	183b      	adds	r3, r7, r0
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	0419      	lsls	r1, r3, #16
 80028b4:	23ff      	movs	r3, #255	; 0xff
 80028b6:	041b      	lsls	r3, r3, #16
 80028b8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028ba:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c2:	4313      	orrs	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	085b      	lsrs	r3, r3, #1
 80028c8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028d2:	0d51      	lsrs	r1, r2, #21
 80028d4:	2280      	movs	r2, #128	; 0x80
 80028d6:	00d2      	lsls	r2, r2, #3
 80028d8:	400a      	ands	r2, r1
 80028da:	4907      	ldr	r1, [pc, #28]	; (80028f8 <I2C_TransferConfig+0x70>)
 80028dc:	430a      	orrs	r2, r1
 80028de:	43d2      	mvns	r2, r2
 80028e0:	401a      	ands	r2, r3
 80028e2:	0011      	movs	r1, r2
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b007      	add	sp, #28
 80028f4:	bd90      	pop	{r4, r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	03ff63ff 	.word	0x03ff63ff

080028fc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	000a      	movs	r2, r1
 8002906:	1cbb      	adds	r3, r7, #2
 8002908:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800290e:	1cbb      	adds	r3, r7, #2
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	2201      	movs	r2, #1
 8002914:	4013      	ands	r3, r2
 8002916:	d010      	beq.n	800293a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2242      	movs	r2, #66	; 0x42
 800291c:	4313      	orrs	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2241      	movs	r2, #65	; 0x41
 8002924:	5c9b      	ldrb	r3, [r3, r2]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	001a      	movs	r2, r3
 800292a:	2328      	movs	r3, #40	; 0x28
 800292c:	4013      	ands	r3, r2
 800292e:	2b28      	cmp	r3, #40	; 0x28
 8002930:	d003      	beq.n	800293a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	22b0      	movs	r2, #176	; 0xb0
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800293a:	1cbb      	adds	r3, r7, #2
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	2202      	movs	r2, #2
 8002940:	4013      	ands	r3, r2
 8002942:	d010      	beq.n	8002966 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2244      	movs	r2, #68	; 0x44
 8002948:	4313      	orrs	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2241      	movs	r2, #65	; 0x41
 8002950:	5c9b      	ldrb	r3, [r3, r2]
 8002952:	b2db      	uxtb	r3, r3
 8002954:	001a      	movs	r2, r3
 8002956:	2328      	movs	r3, #40	; 0x28
 8002958:	4013      	ands	r3, r2
 800295a:	2b28      	cmp	r3, #40	; 0x28
 800295c:	d003      	beq.n	8002966 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	22b0      	movs	r2, #176	; 0xb0
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002966:	1cbb      	adds	r3, r7, #2
 8002968:	2200      	movs	r2, #0
 800296a:	5e9b      	ldrsh	r3, [r3, r2]
 800296c:	2b00      	cmp	r3, #0
 800296e:	da03      	bge.n	8002978 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	22b8      	movs	r2, #184	; 0xb8
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002978:	1cbb      	adds	r3, r7, #2
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	2b10      	cmp	r3, #16
 800297e:	d103      	bne.n	8002988 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2290      	movs	r2, #144	; 0x90
 8002984:	4313      	orrs	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002988:	1cbb      	adds	r3, r7, #2
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	2b20      	cmp	r3, #32
 800298e:	d103      	bne.n	8002998 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2220      	movs	r2, #32
 8002994:	4313      	orrs	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002998:	1cbb      	adds	r3, r7, #2
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d103      	bne.n	80029a8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2240      	movs	r2, #64	; 0x40
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	43d9      	mvns	r1, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	400a      	ands	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]
}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	46bd      	mov	sp, r7
 80029be:	b004      	add	sp, #16
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2241      	movs	r2, #65	; 0x41
 80029d2:	5c9b      	ldrb	r3, [r3, r2]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b20      	cmp	r3, #32
 80029d8:	d138      	bne.n	8002a4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2240      	movs	r2, #64	; 0x40
 80029de:	5c9b      	ldrb	r3, [r3, r2]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e032      	b.n	8002a4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2240      	movs	r2, #64	; 0x40
 80029ec:	2101      	movs	r1, #1
 80029ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2241      	movs	r2, #65	; 0x41
 80029f4:	2124      	movs	r1, #36	; 0x24
 80029f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2101      	movs	r1, #1
 8002a04:	438a      	bics	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4911      	ldr	r1, [pc, #68]	; (8002a58 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002a14:	400a      	ands	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6819      	ldr	r1, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2101      	movs	r1, #1
 8002a34:	430a      	orrs	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2241      	movs	r2, #65	; 0x41
 8002a3c:	2120      	movs	r1, #32
 8002a3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2240      	movs	r2, #64	; 0x40
 8002a44:	2100      	movs	r1, #0
 8002a46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e000      	b.n	8002a4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a4c:	2302      	movs	r3, #2
  }
}
 8002a4e:	0018      	movs	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b002      	add	sp, #8
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	ffffefff 	.word	0xffffefff

08002a5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2241      	movs	r2, #65	; 0x41
 8002a6a:	5c9b      	ldrb	r3, [r3, r2]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	d139      	bne.n	8002ae6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2240      	movs	r2, #64	; 0x40
 8002a76:	5c9b      	ldrb	r3, [r3, r2]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e033      	b.n	8002ae8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2240      	movs	r2, #64	; 0x40
 8002a84:	2101      	movs	r1, #1
 8002a86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2241      	movs	r2, #65	; 0x41
 8002a8c:	2124      	movs	r1, #36	; 0x24
 8002a8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	438a      	bics	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a11      	ldr	r2, [pc, #68]	; (8002af0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2101      	movs	r1, #1
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2241      	movs	r2, #65	; 0x41
 8002ad6:	2120      	movs	r1, #32
 8002ad8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2240      	movs	r2, #64	; 0x40
 8002ade:	2100      	movs	r1, #0
 8002ae0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e000      	b.n	8002ae8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
  }
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b004      	add	sp, #16
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	fffff0ff 	.word	0xfffff0ff

08002af4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002afc:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a19      	ldr	r2, [pc, #100]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	0019      	movs	r1, r3
 8002b06:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d11f      	bne.n	8002b58 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002b18:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	0013      	movs	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	189b      	adds	r3, r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4912      	ldr	r1, [pc, #72]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002b26:	0018      	movs	r0, r3
 8002b28:	f7fd faf6 	bl	8000118 <__udivsi3>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b32:	e008      	b.n	8002b46 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e001      	b.n	8002b46 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e009      	b.n	8002b5a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	401a      	ands	r2, r3
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d0ed      	beq.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b004      	add	sp, #16
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	40007000 	.word	0x40007000
 8002b68:	fffff9ff 	.word	0xfffff9ff
 8002b6c:	2000002c 	.word	0x2000002c
 8002b70:	000f4240 	.word	0x000f4240

08002b74 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	23e0      	movs	r3, #224	; 0xe0
 8002b7e:	01db      	lsls	r3, r3, #7
 8002b80:	4013      	ands	r3, r2
}
 8002b82:	0018      	movs	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000

08002b8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e2fe      	b.n	800319c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d100      	bne.n	8002baa <HAL_RCC_OscConfig+0x1e>
 8002ba8:	e07c      	b.n	8002ca4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002baa:	4bc3      	ldr	r3, [pc, #780]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2238      	movs	r2, #56	; 0x38
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb4:	4bc0      	ldr	r3, [pc, #768]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2203      	movs	r2, #3
 8002bba:	4013      	ands	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d102      	bne.n	8002bca <HAL_RCC_OscConfig+0x3e>
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d002      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d10b      	bne.n	8002be8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	4bb9      	ldr	r3, [pc, #740]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	029b      	lsls	r3, r3, #10
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d062      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x116>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d15e      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e2d9      	b.n	800319c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	2380      	movs	r3, #128	; 0x80
 8002bee:	025b      	lsls	r3, r3, #9
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d107      	bne.n	8002c04 <HAL_RCC_OscConfig+0x78>
 8002bf4:	4bb0      	ldr	r3, [pc, #704]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4baf      	ldr	r3, [pc, #700]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002bfa:	2180      	movs	r1, #128	; 0x80
 8002bfc:	0249      	lsls	r1, r1, #9
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	e020      	b.n	8002c46 <HAL_RCC_OscConfig+0xba>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	23a0      	movs	r3, #160	; 0xa0
 8002c0a:	02db      	lsls	r3, r3, #11
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d10e      	bne.n	8002c2e <HAL_RCC_OscConfig+0xa2>
 8002c10:	4ba9      	ldr	r3, [pc, #676]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4ba8      	ldr	r3, [pc, #672]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c16:	2180      	movs	r1, #128	; 0x80
 8002c18:	02c9      	lsls	r1, r1, #11
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	4ba6      	ldr	r3, [pc, #664]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	4ba5      	ldr	r3, [pc, #660]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c24:	2180      	movs	r1, #128	; 0x80
 8002c26:	0249      	lsls	r1, r1, #9
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e00b      	b.n	8002c46 <HAL_RCC_OscConfig+0xba>
 8002c2e:	4ba2      	ldr	r3, [pc, #648]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	4ba1      	ldr	r3, [pc, #644]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c34:	49a1      	ldr	r1, [pc, #644]	; (8002ebc <HAL_RCC_OscConfig+0x330>)
 8002c36:	400a      	ands	r2, r1
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	4b9f      	ldr	r3, [pc, #636]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	4b9e      	ldr	r3, [pc, #632]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c40:	499f      	ldr	r1, [pc, #636]	; (8002ec0 <HAL_RCC_OscConfig+0x334>)
 8002c42:	400a      	ands	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d014      	beq.n	8002c78 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fa47 	bl	80010e0 <HAL_GetTick>
 8002c52:	0003      	movs	r3, r0
 8002c54:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c58:	f7fe fa42 	bl	80010e0 <HAL_GetTick>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e298      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c6a:	4b93      	ldr	r3, [pc, #588]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	029b      	lsls	r3, r3, #10
 8002c72:	4013      	ands	r3, r2
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0xcc>
 8002c76:	e015      	b.n	8002ca4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fe fa32 	bl	80010e0 <HAL_GetTick>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c82:	f7fe fa2d 	bl	80010e0 <HAL_GetTick>
 8002c86:	0002      	movs	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b64      	cmp	r3, #100	; 0x64
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e283      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c94:	4b88      	ldr	r3, [pc, #544]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	029b      	lsls	r3, r3, #10
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d1f0      	bne.n	8002c82 <HAL_RCC_OscConfig+0xf6>
 8002ca0:	e000      	b.n	8002ca4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	4013      	ands	r3, r2
 8002cac:	d100      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x124>
 8002cae:	e099      	b.n	8002de4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb0:	4b81      	ldr	r3, [pc, #516]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2238      	movs	r2, #56	; 0x38
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cba:	4b7f      	ldr	r3, [pc, #508]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d102      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x144>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d002      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d135      	bne.n	8002d42 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cd6:	4b78      	ldr	r3, [pc, #480]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d005      	beq.n	8002cee <HAL_RCC_OscConfig+0x162>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e256      	b.n	800319c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cee:	4b72      	ldr	r3, [pc, #456]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4a74      	ldr	r2, [pc, #464]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	021a      	lsls	r2, r3, #8
 8002cfe:	4b6e      	ldr	r3, [pc, #440]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d112      	bne.n	8002d30 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d0a:	4b6b      	ldr	r3, [pc, #428]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6e      	ldr	r2, [pc, #440]	; (8002ec8 <HAL_RCC_OscConfig+0x33c>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	0019      	movs	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	4b67      	ldr	r3, [pc, #412]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002d1e:	4b66      	ldr	r3, [pc, #408]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	0adb      	lsrs	r3, r3, #11
 8002d24:	2207      	movs	r2, #7
 8002d26:	4013      	ands	r3, r2
 8002d28:	4a68      	ldr	r2, [pc, #416]	; (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002d2a:	40da      	lsrs	r2, r3
 8002d2c:	4b68      	ldr	r3, [pc, #416]	; (8002ed0 <HAL_RCC_OscConfig+0x344>)
 8002d2e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d30:	4b68      	ldr	r3, [pc, #416]	; (8002ed4 <HAL_RCC_OscConfig+0x348>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	0018      	movs	r0, r3
 8002d36:	f7fe f977 	bl	8001028 <HAL_InitTick>
 8002d3a:	1e03      	subs	r3, r0, #0
 8002d3c:	d051      	beq.n	8002de2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e22c      	b.n	800319c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d030      	beq.n	8002dac <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d4a:	4b5b      	ldr	r3, [pc, #364]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a5e      	ldr	r2, [pc, #376]	; (8002ec8 <HAL_RCC_OscConfig+0x33c>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	0019      	movs	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	4b57      	ldr	r3, [pc, #348]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002d5e:	4b56      	ldr	r3, [pc, #344]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	4b55      	ldr	r3, [pc, #340]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d64:	2180      	movs	r1, #128	; 0x80
 8002d66:	0049      	lsls	r1, r1, #1
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe f9b8 	bl	80010e0 <HAL_GetTick>
 8002d70:	0003      	movs	r3, r0
 8002d72:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d76:	f7fe f9b3 	bl	80010e0 <HAL_GetTick>
 8002d7a:	0002      	movs	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e209      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d88:	4b4b      	ldr	r3, [pc, #300]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4013      	ands	r3, r2
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d94:	4b48      	ldr	r3, [pc, #288]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4a4a      	ldr	r2, [pc, #296]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	021a      	lsls	r2, r3, #8
 8002da4:	4b44      	ldr	r3, [pc, #272]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	e01b      	b.n	8002de4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002dac:	4b42      	ldr	r3, [pc, #264]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b41      	ldr	r3, [pc, #260]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002db2:	4949      	ldr	r1, [pc, #292]	; (8002ed8 <HAL_RCC_OscConfig+0x34c>)
 8002db4:	400a      	ands	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe f992 	bl	80010e0 <HAL_GetTick>
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc2:	f7fe f98d 	bl	80010e0 <HAL_GetTick>
 8002dc6:	0002      	movs	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e1e3      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dd4:	4b38      	ldr	r3, [pc, #224]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d1f0      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x236>
 8002de0:	e000      	b.n	8002de4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002de2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2208      	movs	r2, #8
 8002dea:	4013      	ands	r3, r2
 8002dec:	d047      	beq.n	8002e7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002dee:	4b32      	ldr	r3, [pc, #200]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2238      	movs	r2, #56	; 0x38
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b18      	cmp	r3, #24
 8002df8:	d10a      	bne.n	8002e10 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002dfa:	4b2f      	ldr	r3, [pc, #188]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfe:	2202      	movs	r2, #2
 8002e00:	4013      	ands	r3, r2
 8002e02:	d03c      	beq.n	8002e7e <HAL_RCC_OscConfig+0x2f2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d138      	bne.n	8002e7e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e1c5      	b.n	800319c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d019      	beq.n	8002e4c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002e18:	4b27      	ldr	r3, [pc, #156]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002e1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e1c:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002e1e:	2101      	movs	r1, #1
 8002e20:	430a      	orrs	r2, r1
 8002e22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe f95c 	bl	80010e0 <HAL_GetTick>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2e:	f7fe f957 	bl	80010e0 <HAL_GetTick>
 8002e32:	0002      	movs	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e1ad      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e40:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e44:	2202      	movs	r2, #2
 8002e46:	4013      	ands	r3, r2
 8002e48:	d0f1      	beq.n	8002e2e <HAL_RCC_OscConfig+0x2a2>
 8002e4a:	e018      	b.n	8002e7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002e4c:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002e4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002e52:	2101      	movs	r1, #1
 8002e54:	438a      	bics	r2, r1
 8002e56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe f942 	bl	80010e0 <HAL_GetTick>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e62:	f7fe f93d 	bl	80010e0 <HAL_GetTick>
 8002e66:	0002      	movs	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e193      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e74:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e78:	2202      	movs	r2, #2
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d1f1      	bne.n	8002e62 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2204      	movs	r2, #4
 8002e84:	4013      	ands	r3, r2
 8002e86:	d100      	bne.n	8002e8a <HAL_RCC_OscConfig+0x2fe>
 8002e88:	e0c6      	b.n	8003018 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8a:	231f      	movs	r3, #31
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2238      	movs	r2, #56	; 0x38
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d11e      	bne.n	8002edc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_RCC_OscConfig+0x32c>)
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d100      	bne.n	8002eaa <HAL_RCC_OscConfig+0x31e>
 8002ea8:	e0b6      	b.n	8003018 <HAL_RCC_OscConfig+0x48c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d000      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x328>
 8002eb2:	e0b1      	b.n	8003018 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e171      	b.n	800319c <HAL_RCC_OscConfig+0x610>
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	fffeffff 	.word	0xfffeffff
 8002ec0:	fffbffff 	.word	0xfffbffff
 8002ec4:	ffff80ff 	.word	0xffff80ff
 8002ec8:	ffffc7ff 	.word	0xffffc7ff
 8002ecc:	00f42400 	.word	0x00f42400
 8002ed0:	2000002c 	.word	0x2000002c
 8002ed4:	20000030 	.word	0x20000030
 8002ed8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002edc:	4bb1      	ldr	r3, [pc, #708]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8002ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	055b      	lsls	r3, r3, #21
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_OscConfig+0x360>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x362>
 8002eec:	2300      	movs	r3, #0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d011      	beq.n	8002f16 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	4bac      	ldr	r3, [pc, #688]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8002ef4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ef6:	4bab      	ldr	r3, [pc, #684]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8002ef8:	2180      	movs	r1, #128	; 0x80
 8002efa:	0549      	lsls	r1, r1, #21
 8002efc:	430a      	orrs	r2, r1
 8002efe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f00:	4ba8      	ldr	r3, [pc, #672]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8002f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	055b      	lsls	r3, r3, #21
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002f0e:	231f      	movs	r3, #31
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f16:	4ba4      	ldr	r3, [pc, #656]	; (80031a8 <HAL_RCC_OscConfig+0x61c>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d11a      	bne.n	8002f58 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f22:	4ba1      	ldr	r3, [pc, #644]	; (80031a8 <HAL_RCC_OscConfig+0x61c>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	4ba0      	ldr	r3, [pc, #640]	; (80031a8 <HAL_RCC_OscConfig+0x61c>)
 8002f28:	2180      	movs	r1, #128	; 0x80
 8002f2a:	0049      	lsls	r1, r1, #1
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002f30:	f7fe f8d6 	bl	80010e0 <HAL_GetTick>
 8002f34:	0003      	movs	r3, r0
 8002f36:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3a:	f7fe f8d1 	bl	80010e0 <HAL_GetTick>
 8002f3e:	0002      	movs	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e127      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f4c:	4b96      	ldr	r3, [pc, #600]	; (80031a8 <HAL_RCC_OscConfig+0x61c>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4013      	ands	r3, r2
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d106      	bne.n	8002f6e <HAL_RCC_OscConfig+0x3e2>
 8002f60:	4b90      	ldr	r3, [pc, #576]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8002f62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f64:	4b8f      	ldr	r3, [pc, #572]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8002f66:	2101      	movs	r1, #1
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f6c:	e01c      	b.n	8002fa8 <HAL_RCC_OscConfig+0x41c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b05      	cmp	r3, #5
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x404>
 8002f76:	4b8b      	ldr	r3, [pc, #556]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8002f78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f7a:	4b8a      	ldr	r3, [pc, #552]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8002f7c:	2104      	movs	r1, #4
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f82:	4b88      	ldr	r3, [pc, #544]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8002f84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f86:	4b87      	ldr	r3, [pc, #540]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8002f88:	2101      	movs	r1, #1
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCC_OscConfig+0x41c>
 8002f90:	4b84      	ldr	r3, [pc, #528]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8002f92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f94:	4b83      	ldr	r3, [pc, #524]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8002f96:	2101      	movs	r1, #1
 8002f98:	438a      	bics	r2, r1
 8002f9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f9c:	4b81      	ldr	r3, [pc, #516]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8002f9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fa0:	4b80      	ldr	r3, [pc, #512]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8002fa2:	2104      	movs	r1, #4
 8002fa4:	438a      	bics	r2, r1
 8002fa6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d014      	beq.n	8002fda <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe f896 	bl	80010e0 <HAL_GetTick>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb8:	e009      	b.n	8002fce <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fba:	f7fe f891 	bl	80010e0 <HAL_GetTick>
 8002fbe:	0002      	movs	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	4a79      	ldr	r2, [pc, #484]	; (80031ac <HAL_RCC_OscConfig+0x620>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e0e6      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fce:	4b75      	ldr	r3, [pc, #468]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x42e>
 8002fd8:	e013      	b.n	8003002 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fda:	f7fe f881 	bl	80010e0 <HAL_GetTick>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fe2:	e009      	b.n	8002ff8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe4:	f7fe f87c 	bl	80010e0 <HAL_GetTick>
 8002fe8:	0002      	movs	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	4a6f      	ldr	r2, [pc, #444]	; (80031ac <HAL_RCC_OscConfig+0x620>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e0d1      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ff8:	4b6a      	ldr	r3, [pc, #424]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	4013      	ands	r3, r2
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003002:	231f      	movs	r3, #31
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800300c:	4b65      	ldr	r3, [pc, #404]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 800300e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003010:	4b64      	ldr	r3, [pc, #400]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8003012:	4967      	ldr	r1, [pc, #412]	; (80031b0 <HAL_RCC_OscConfig+0x624>)
 8003014:	400a      	ands	r2, r1
 8003016:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d100      	bne.n	8003022 <HAL_RCC_OscConfig+0x496>
 8003020:	e0bb      	b.n	800319a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003022:	4b60      	ldr	r3, [pc, #384]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2238      	movs	r2, #56	; 0x38
 8003028:	4013      	ands	r3, r2
 800302a:	2b10      	cmp	r3, #16
 800302c:	d100      	bne.n	8003030 <HAL_RCC_OscConfig+0x4a4>
 800302e:	e07b      	b.n	8003128 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d156      	bne.n	80030e6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003038:	4b5a      	ldr	r3, [pc, #360]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b59      	ldr	r3, [pc, #356]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 800303e:	495d      	ldr	r1, [pc, #372]	; (80031b4 <HAL_RCC_OscConfig+0x628>)
 8003040:	400a      	ands	r2, r1
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe f84c 	bl	80010e0 <HAL_GetTick>
 8003048:	0003      	movs	r3, r0
 800304a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304e:	f7fe f847 	bl	80010e0 <HAL_GetTick>
 8003052:	0002      	movs	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e09d      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003060:	4b50      	ldr	r3, [pc, #320]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	049b      	lsls	r3, r3, #18
 8003068:	4013      	ands	r3, r2
 800306a:	d1f0      	bne.n	800304e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800306c:	4b4d      	ldr	r3, [pc, #308]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4a51      	ldr	r2, [pc, #324]	; (80031b8 <HAL_RCC_OscConfig+0x62c>)
 8003072:	4013      	ands	r3, r2
 8003074:	0019      	movs	r1, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1a      	ldr	r2, [r3, #32]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	021b      	lsls	r3, r3, #8
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003098:	431a      	orrs	r2, r3
 800309a:	4b42      	ldr	r3, [pc, #264]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 800309c:	430a      	orrs	r2, r1
 800309e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a0:	4b40      	ldr	r3, [pc, #256]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4b3f      	ldr	r3, [pc, #252]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 80030a6:	2180      	movs	r1, #128	; 0x80
 80030a8:	0449      	lsls	r1, r1, #17
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80030ae:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	4b3c      	ldr	r3, [pc, #240]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 80030b4:	2180      	movs	r1, #128	; 0x80
 80030b6:	0549      	lsls	r1, r1, #21
 80030b8:	430a      	orrs	r2, r1
 80030ba:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fe f810 	bl	80010e0 <HAL_GetTick>
 80030c0:	0003      	movs	r3, r0
 80030c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c6:	f7fe f80b 	bl	80010e0 <HAL_GetTick>
 80030ca:	0002      	movs	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e061      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d8:	4b32      	ldr	r3, [pc, #200]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	2380      	movs	r3, #128	; 0x80
 80030de:	049b      	lsls	r3, r3, #18
 80030e0:	4013      	ands	r3, r2
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x53a>
 80030e4:	e059      	b.n	800319a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e6:	4b2f      	ldr	r3, [pc, #188]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b2e      	ldr	r3, [pc, #184]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 80030ec:	4931      	ldr	r1, [pc, #196]	; (80031b4 <HAL_RCC_OscConfig+0x628>)
 80030ee:	400a      	ands	r2, r1
 80030f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fd fff5 	bl	80010e0 <HAL_GetTick>
 80030f6:	0003      	movs	r3, r0
 80030f8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fd fff0 	bl	80010e0 <HAL_GetTick>
 8003100:	0002      	movs	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e046      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800310e:	4b25      	ldr	r3, [pc, #148]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	049b      	lsls	r3, r3, #18
 8003116:	4013      	ands	r3, r2
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800311a:	4b22      	ldr	r3, [pc, #136]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8003120:	4926      	ldr	r1, [pc, #152]	; (80031bc <HAL_RCC_OscConfig+0x630>)
 8003122:	400a      	ands	r2, r1
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	e038      	b.n	800319a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e033      	b.n	800319c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_RCC_OscConfig+0x618>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2203      	movs	r2, #3
 800313e:	401a      	ands	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	429a      	cmp	r2, r3
 8003146:	d126      	bne.n	8003196 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2270      	movs	r2, #112	; 0x70
 800314c:	401a      	ands	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003152:	429a      	cmp	r2, r3
 8003154:	d11f      	bne.n	8003196 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	23fe      	movs	r3, #254	; 0xfe
 800315a:	01db      	lsls	r3, r3, #7
 800315c:	401a      	ands	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d116      	bne.n	8003196 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	23f8      	movs	r3, #248	; 0xf8
 800316c:	039b      	lsls	r3, r3, #14
 800316e:	401a      	ands	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d10e      	bne.n	8003196 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	23e0      	movs	r3, #224	; 0xe0
 800317c:	051b      	lsls	r3, r3, #20
 800317e:	401a      	ands	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d106      	bne.n	8003196 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	0f5b      	lsrs	r3, r3, #29
 800318c:	075a      	lsls	r2, r3, #29
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d001      	beq.n	800319a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	0018      	movs	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	b008      	add	sp, #32
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40007000 	.word	0x40007000
 80031ac:	00001388 	.word	0x00001388
 80031b0:	efffffff 	.word	0xefffffff
 80031b4:	feffffff 	.word	0xfeffffff
 80031b8:	11c1808c 	.word	0x11c1808c
 80031bc:	eefefffc 	.word	0xeefefffc

080031c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0e9      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031d4:	4b76      	ldr	r3, [pc, #472]	; (80033b0 <HAL_RCC_ClockConfig+0x1f0>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2207      	movs	r2, #7
 80031da:	4013      	ands	r3, r2
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d91e      	bls.n	8003220 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	4b73      	ldr	r3, [pc, #460]	; (80033b0 <HAL_RCC_ClockConfig+0x1f0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2207      	movs	r2, #7
 80031e8:	4393      	bics	r3, r2
 80031ea:	0019      	movs	r1, r3
 80031ec:	4b70      	ldr	r3, [pc, #448]	; (80033b0 <HAL_RCC_ClockConfig+0x1f0>)
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031f4:	f7fd ff74 	bl	80010e0 <HAL_GetTick>
 80031f8:	0003      	movs	r3, r0
 80031fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031fc:	e009      	b.n	8003212 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fe:	f7fd ff6f 	bl	80010e0 <HAL_GetTick>
 8003202:	0002      	movs	r2, r0
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	4a6a      	ldr	r2, [pc, #424]	; (80033b4 <HAL_RCC_ClockConfig+0x1f4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e0ca      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003212:	4b67      	ldr	r3, [pc, #412]	; (80033b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2207      	movs	r2, #7
 8003218:	4013      	ands	r3, r2
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d1ee      	bne.n	80031fe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2202      	movs	r2, #2
 8003226:	4013      	ands	r3, r2
 8003228:	d015      	beq.n	8003256 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2204      	movs	r2, #4
 8003230:	4013      	ands	r3, r2
 8003232:	d006      	beq.n	8003242 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003234:	4b60      	ldr	r3, [pc, #384]	; (80033b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	4b5f      	ldr	r3, [pc, #380]	; (80033b8 <HAL_RCC_ClockConfig+0x1f8>)
 800323a:	21e0      	movs	r1, #224	; 0xe0
 800323c:	01c9      	lsls	r1, r1, #7
 800323e:	430a      	orrs	r2, r1
 8003240:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003242:	4b5d      	ldr	r3, [pc, #372]	; (80033b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	4a5d      	ldr	r2, [pc, #372]	; (80033bc <HAL_RCC_ClockConfig+0x1fc>)
 8003248:	4013      	ands	r3, r2
 800324a:	0019      	movs	r1, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	4b59      	ldr	r3, [pc, #356]	; (80033b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003252:	430a      	orrs	r2, r1
 8003254:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2201      	movs	r2, #1
 800325c:	4013      	ands	r3, r2
 800325e:	d057      	beq.n	8003310 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d107      	bne.n	8003278 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003268:	4b53      	ldr	r3, [pc, #332]	; (80033b8 <HAL_RCC_ClockConfig+0x1f8>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	029b      	lsls	r3, r3, #10
 8003270:	4013      	ands	r3, r2
 8003272:	d12b      	bne.n	80032cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e097      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d107      	bne.n	8003290 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003280:	4b4d      	ldr	r3, [pc, #308]	; (80033b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	049b      	lsls	r3, r3, #18
 8003288:	4013      	ands	r3, r2
 800328a:	d11f      	bne.n	80032cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e08b      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d107      	bne.n	80032a8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003298:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_RCC_ClockConfig+0x1f8>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4013      	ands	r3, r2
 80032a2:	d113      	bne.n	80032cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e07f      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d106      	bne.n	80032be <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032b0:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <HAL_RCC_ClockConfig+0x1f8>)
 80032b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b4:	2202      	movs	r2, #2
 80032b6:	4013      	ands	r3, r2
 80032b8:	d108      	bne.n	80032cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e074      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032be:	4b3e      	ldr	r3, [pc, #248]	; (80033b8 <HAL_RCC_ClockConfig+0x1f8>)
 80032c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c2:	2202      	movs	r2, #2
 80032c4:	4013      	ands	r3, r2
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e06d      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032cc:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <HAL_RCC_ClockConfig+0x1f8>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2207      	movs	r2, #7
 80032d2:	4393      	bics	r3, r2
 80032d4:	0019      	movs	r1, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4b37      	ldr	r3, [pc, #220]	; (80033b8 <HAL_RCC_ClockConfig+0x1f8>)
 80032dc:	430a      	orrs	r2, r1
 80032de:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e0:	f7fd fefe 	bl	80010e0 <HAL_GetTick>
 80032e4:	0003      	movs	r3, r0
 80032e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e8:	e009      	b.n	80032fe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ea:	f7fd fef9 	bl	80010e0 <HAL_GetTick>
 80032ee:	0002      	movs	r2, r0
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	4a2f      	ldr	r2, [pc, #188]	; (80033b4 <HAL_RCC_ClockConfig+0x1f4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e054      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	4b2e      	ldr	r3, [pc, #184]	; (80033b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2238      	movs	r2, #56	; 0x38
 8003304:	401a      	ands	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	429a      	cmp	r2, r3
 800330e:	d1ec      	bne.n	80032ea <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003310:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2207      	movs	r2, #7
 8003316:	4013      	ands	r3, r2
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d21e      	bcs.n	800335c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2207      	movs	r2, #7
 8003324:	4393      	bics	r3, r2
 8003326:	0019      	movs	r1, r3
 8003328:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <HAL_RCC_ClockConfig+0x1f0>)
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003330:	f7fd fed6 	bl	80010e0 <HAL_GetTick>
 8003334:	0003      	movs	r3, r0
 8003336:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003338:	e009      	b.n	800334e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333a:	f7fd fed1 	bl	80010e0 <HAL_GetTick>
 800333e:	0002      	movs	r2, r0
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	4a1b      	ldr	r2, [pc, #108]	; (80033b4 <HAL_RCC_ClockConfig+0x1f4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e02c      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800334e:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2207      	movs	r2, #7
 8003354:	4013      	ands	r3, r2
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d1ee      	bne.n	800333a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2204      	movs	r2, #4
 8003362:	4013      	ands	r3, r2
 8003364:	d009      	beq.n	800337a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003366:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	4a15      	ldr	r2, [pc, #84]	; (80033c0 <HAL_RCC_ClockConfig+0x200>)
 800336c:	4013      	ands	r3, r2
 800336e:	0019      	movs	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003376:	430a      	orrs	r2, r1
 8003378:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800337a:	f000 f829 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 800337e:	0001      	movs	r1, r0
 8003380:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	0a1b      	lsrs	r3, r3, #8
 8003386:	220f      	movs	r2, #15
 8003388:	401a      	ands	r2, r3
 800338a:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <HAL_RCC_ClockConfig+0x204>)
 800338c:	0092      	lsls	r2, r2, #2
 800338e:	58d3      	ldr	r3, [r2, r3]
 8003390:	221f      	movs	r2, #31
 8003392:	4013      	ands	r3, r2
 8003394:	000a      	movs	r2, r1
 8003396:	40da      	lsrs	r2, r3
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_ClockConfig+0x208>)
 800339a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_RCC_ClockConfig+0x20c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	0018      	movs	r0, r3
 80033a2:	f7fd fe41 	bl	8001028 <HAL_InitTick>
 80033a6:	0003      	movs	r3, r0
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b004      	add	sp, #16
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40022000 	.word	0x40022000
 80033b4:	00001388 	.word	0x00001388
 80033b8:	40021000 	.word	0x40021000
 80033bc:	fffff0ff 	.word	0xfffff0ff
 80033c0:	ffff8fff 	.word	0xffff8fff
 80033c4:	08005db0 	.word	0x08005db0
 80033c8:	2000002c 	.word	0x2000002c
 80033cc:	20000030 	.word	0x20000030

080033d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033d6:	4b3c      	ldr	r3, [pc, #240]	; (80034c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2238      	movs	r2, #56	; 0x38
 80033dc:	4013      	ands	r3, r2
 80033de:	d10f      	bne.n	8003400 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80033e0:	4b39      	ldr	r3, [pc, #228]	; (80034c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	0adb      	lsrs	r3, r3, #11
 80033e6:	2207      	movs	r2, #7
 80033e8:	4013      	ands	r3, r2
 80033ea:	2201      	movs	r2, #1
 80033ec:	409a      	lsls	r2, r3
 80033ee:	0013      	movs	r3, r2
 80033f0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80033f2:	6839      	ldr	r1, [r7, #0]
 80033f4:	4835      	ldr	r0, [pc, #212]	; (80034cc <HAL_RCC_GetSysClockFreq+0xfc>)
 80033f6:	f7fc fe8f 	bl	8000118 <__udivsi3>
 80033fa:	0003      	movs	r3, r0
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	e05d      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003400:	4b31      	ldr	r3, [pc, #196]	; (80034c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2238      	movs	r2, #56	; 0x38
 8003406:	4013      	ands	r3, r2
 8003408:	2b08      	cmp	r3, #8
 800340a:	d102      	bne.n	8003412 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800340c:	4b30      	ldr	r3, [pc, #192]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x100>)
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	e054      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003412:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2238      	movs	r2, #56	; 0x38
 8003418:	4013      	ands	r3, r2
 800341a:	2b10      	cmp	r3, #16
 800341c:	d138      	bne.n	8003490 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800341e:	4b2a      	ldr	r3, [pc, #168]	; (80034c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2203      	movs	r2, #3
 8003424:	4013      	ands	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003428:	4b27      	ldr	r3, [pc, #156]	; (80034c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	2207      	movs	r2, #7
 8003430:	4013      	ands	r3, r2
 8003432:	3301      	adds	r3, #1
 8003434:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d10d      	bne.n	8003458 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	4824      	ldr	r0, [pc, #144]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003440:	f7fc fe6a 	bl	8000118 <__udivsi3>
 8003444:	0003      	movs	r3, r0
 8003446:	0019      	movs	r1, r3
 8003448:	4b1f      	ldr	r3, [pc, #124]	; (80034c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	0a1b      	lsrs	r3, r3, #8
 800344e:	227f      	movs	r2, #127	; 0x7f
 8003450:	4013      	ands	r3, r2
 8003452:	434b      	muls	r3, r1
 8003454:	617b      	str	r3, [r7, #20]
        break;
 8003456:	e00d      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	481c      	ldr	r0, [pc, #112]	; (80034cc <HAL_RCC_GetSysClockFreq+0xfc>)
 800345c:	f7fc fe5c 	bl	8000118 <__udivsi3>
 8003460:	0003      	movs	r3, r0
 8003462:	0019      	movs	r1, r3
 8003464:	4b18      	ldr	r3, [pc, #96]	; (80034c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	227f      	movs	r2, #127	; 0x7f
 800346c:	4013      	ands	r3, r2
 800346e:	434b      	muls	r3, r1
 8003470:	617b      	str	r3, [r7, #20]
        break;
 8003472:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003474:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	0f5b      	lsrs	r3, r3, #29
 800347a:	2207      	movs	r2, #7
 800347c:	4013      	ands	r3, r2
 800347e:	3301      	adds	r3, #1
 8003480:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	6978      	ldr	r0, [r7, #20]
 8003486:	f7fc fe47 	bl	8000118 <__udivsi3>
 800348a:	0003      	movs	r3, r0
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	e015      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003490:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2238      	movs	r2, #56	; 0x38
 8003496:	4013      	ands	r3, r2
 8003498:	2b20      	cmp	r3, #32
 800349a:	d103      	bne.n	80034a4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	e00b      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80034a4:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2238      	movs	r2, #56	; 0x38
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b18      	cmp	r3, #24
 80034ae:	d103      	bne.n	80034b8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80034b0:	23fa      	movs	r3, #250	; 0xfa
 80034b2:	01db      	lsls	r3, r3, #7
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	e001      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034bc:	693b      	ldr	r3, [r7, #16]
}
 80034be:	0018      	movs	r0, r3
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b006      	add	sp, #24
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	40021000 	.word	0x40021000
 80034cc:	00f42400 	.word	0x00f42400
 80034d0:	007a1200 	.word	0x007a1200

080034d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d8:	4b02      	ldr	r3, [pc, #8]	; (80034e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80034da:	681b      	ldr	r3, [r3, #0]
}
 80034dc:	0018      	movs	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	2000002c 	.word	0x2000002c

080034e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e8:	b5b0      	push	{r4, r5, r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80034ec:	f7ff fff2 	bl	80034d4 <HAL_RCC_GetHCLKFreq>
 80034f0:	0004      	movs	r4, r0
 80034f2:	f7ff fb3f 	bl	8002b74 <LL_RCC_GetAPB1Prescaler>
 80034f6:	0003      	movs	r3, r0
 80034f8:	0b1a      	lsrs	r2, r3, #12
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034fc:	0092      	lsls	r2, r2, #2
 80034fe:	58d3      	ldr	r3, [r2, r3]
 8003500:	221f      	movs	r2, #31
 8003502:	4013      	ands	r3, r2
 8003504:	40dc      	lsrs	r4, r3
 8003506:	0023      	movs	r3, r4
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	bdb0      	pop	{r4, r5, r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	08005df0 	.word	0x08005df0

08003514 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800351c:	2313      	movs	r3, #19
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003524:	2312      	movs	r3, #18
 8003526:	18fb      	adds	r3, r7, r3
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	2380      	movs	r3, #128	; 0x80
 8003532:	029b      	lsls	r3, r3, #10
 8003534:	4013      	ands	r3, r2
 8003536:	d100      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003538:	e0a3      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353a:	2011      	movs	r0, #17
 800353c:	183b      	adds	r3, r7, r0
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003542:	4ba5      	ldr	r3, [pc, #660]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003546:	2380      	movs	r3, #128	; 0x80
 8003548:	055b      	lsls	r3, r3, #21
 800354a:	4013      	ands	r3, r2
 800354c:	d110      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354e:	4ba2      	ldr	r3, [pc, #648]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003552:	4ba1      	ldr	r3, [pc, #644]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	0549      	lsls	r1, r1, #21
 8003558:	430a      	orrs	r2, r1
 800355a:	63da      	str	r2, [r3, #60]	; 0x3c
 800355c:	4b9e      	ldr	r3, [pc, #632]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800355e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	055b      	lsls	r3, r3, #21
 8003564:	4013      	ands	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800356a:	183b      	adds	r3, r7, r0
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003570:	4b9a      	ldr	r3, [pc, #616]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4b99      	ldr	r3, [pc, #612]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003576:	2180      	movs	r1, #128	; 0x80
 8003578:	0049      	lsls	r1, r1, #1
 800357a:	430a      	orrs	r2, r1
 800357c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800357e:	f7fd fdaf 	bl	80010e0 <HAL_GetTick>
 8003582:	0003      	movs	r3, r0
 8003584:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003586:	e00b      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003588:	f7fd fdaa 	bl	80010e0 <HAL_GetTick>
 800358c:	0002      	movs	r2, r0
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d904      	bls.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003596:	2313      	movs	r3, #19
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	2203      	movs	r2, #3
 800359c:	701a      	strb	r2, [r3, #0]
        break;
 800359e:	e005      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035a0:	4b8e      	ldr	r3, [pc, #568]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	4013      	ands	r3, r2
 80035aa:	d0ed      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80035ac:	2313      	movs	r3, #19
 80035ae:	18fb      	adds	r3, r7, r3
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d154      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035b6:	4b88      	ldr	r3, [pc, #544]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035ba:	23c0      	movs	r3, #192	; 0xc0
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4013      	ands	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d019      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d014      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035d2:	4b81      	ldr	r3, [pc, #516]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d6:	4a82      	ldr	r2, [pc, #520]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80035d8:	4013      	ands	r3, r2
 80035da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035dc:	4b7e      	ldr	r3, [pc, #504]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035e0:	4b7d      	ldr	r3, [pc, #500]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035e2:	2180      	movs	r1, #128	; 0x80
 80035e4:	0249      	lsls	r1, r1, #9
 80035e6:	430a      	orrs	r2, r1
 80035e8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035ea:	4b7b      	ldr	r3, [pc, #492]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035ee:	4b7a      	ldr	r3, [pc, #488]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035f0:	497c      	ldr	r1, [pc, #496]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80035f2:	400a      	ands	r2, r1
 80035f4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035f6:	4b78      	ldr	r3, [pc, #480]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2201      	movs	r2, #1
 8003600:	4013      	ands	r3, r2
 8003602:	d016      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fd fd6c 	bl	80010e0 <HAL_GetTick>
 8003608:	0003      	movs	r3, r0
 800360a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800360c:	e00c      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360e:	f7fd fd67 	bl	80010e0 <HAL_GetTick>
 8003612:	0002      	movs	r2, r0
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	4a73      	ldr	r2, [pc, #460]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d904      	bls.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800361e:	2313      	movs	r3, #19
 8003620:	18fb      	adds	r3, r7, r3
 8003622:	2203      	movs	r2, #3
 8003624:	701a      	strb	r2, [r3, #0]
            break;
 8003626:	e004      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003628:	4b6b      	ldr	r3, [pc, #428]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800362a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362c:	2202      	movs	r2, #2
 800362e:	4013      	ands	r3, r2
 8003630:	d0ed      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003632:	2313      	movs	r3, #19
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10a      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800363c:	4b66      	ldr	r3, [pc, #408]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800363e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003640:	4a67      	ldr	r2, [pc, #412]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003642:	4013      	ands	r3, r2
 8003644:	0019      	movs	r1, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800364a:	4b63      	ldr	r3, [pc, #396]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800364c:	430a      	orrs	r2, r1
 800364e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003650:	e00c      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003652:	2312      	movs	r3, #18
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	2213      	movs	r2, #19
 8003658:	18ba      	adds	r2, r7, r2
 800365a:	7812      	ldrb	r2, [r2, #0]
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	e005      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003660:	2312      	movs	r3, #18
 8003662:	18fb      	adds	r3, r7, r3
 8003664:	2213      	movs	r2, #19
 8003666:	18ba      	adds	r2, r7, r2
 8003668:	7812      	ldrb	r2, [r2, #0]
 800366a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800366c:	2311      	movs	r3, #17
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d105      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003676:	4b58      	ldr	r3, [pc, #352]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800367a:	4b57      	ldr	r3, [pc, #348]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800367c:	495b      	ldr	r1, [pc, #364]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800367e:	400a      	ands	r2, r1
 8003680:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2201      	movs	r2, #1
 8003688:	4013      	ands	r3, r2
 800368a:	d009      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800368c:	4b52      	ldr	r3, [pc, #328]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800368e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003690:	2203      	movs	r2, #3
 8003692:	4393      	bics	r3, r2
 8003694:	0019      	movs	r1, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	4b4f      	ldr	r3, [pc, #316]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800369c:	430a      	orrs	r2, r1
 800369e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2210      	movs	r2, #16
 80036a6:	4013      	ands	r3, r2
 80036a8:	d009      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036aa:	4b4b      	ldr	r3, [pc, #300]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	4a50      	ldr	r2, [pc, #320]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	0019      	movs	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	4b47      	ldr	r3, [pc, #284]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036ba:	430a      	orrs	r2, r1
 80036bc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4013      	ands	r3, r2
 80036c8:	d009      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036ca:	4b43      	ldr	r3, [pc, #268]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	4a49      	ldr	r2, [pc, #292]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	0019      	movs	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	4b3f      	ldr	r3, [pc, #252]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036da:	430a      	orrs	r2, r1
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4013      	ands	r3, r2
 80036e8:	d009      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036ea:	4b3b      	ldr	r3, [pc, #236]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	4a42      	ldr	r2, [pc, #264]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	0019      	movs	r1, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	4b37      	ldr	r3, [pc, #220]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036fa:	430a      	orrs	r2, r1
 80036fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2220      	movs	r2, #32
 8003704:	4013      	ands	r3, r2
 8003706:	d009      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003708:	4b33      	ldr	r3, [pc, #204]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800370a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370c:	4a3b      	ldr	r2, [pc, #236]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800370e:	4013      	ands	r3, r2
 8003710:	0019      	movs	r1, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	4b30      	ldr	r3, [pc, #192]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003718:	430a      	orrs	r2, r1
 800371a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	01db      	lsls	r3, r3, #7
 8003724:	4013      	ands	r3, r2
 8003726:	d015      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003728:	4b2b      	ldr	r3, [pc, #172]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	0899      	lsrs	r1, r3, #2
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	4b28      	ldr	r3, [pc, #160]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003736:	430a      	orrs	r2, r1
 8003738:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69da      	ldr	r2, [r3, #28]
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	05db      	lsls	r3, r3, #23
 8003742:	429a      	cmp	r2, r3
 8003744:	d106      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003746:	4b24      	ldr	r3, [pc, #144]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	4b23      	ldr	r3, [pc, #140]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800374c:	2180      	movs	r1, #128	; 0x80
 800374e:	0249      	lsls	r1, r1, #9
 8003750:	430a      	orrs	r2, r1
 8003752:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	039b      	lsls	r3, r3, #14
 800375c:	4013      	ands	r3, r2
 800375e:	d016      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003760:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003764:	4a26      	ldr	r2, [pc, #152]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003766:	4013      	ands	r3, r2
 8003768:	0019      	movs	r1, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1a      	ldr	r2, [r3, #32]
 800376e:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003770:	430a      	orrs	r2, r1
 8003772:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1a      	ldr	r2, [r3, #32]
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	03db      	lsls	r3, r3, #15
 800377c:	429a      	cmp	r2, r3
 800377e:	d106      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003780:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003786:	2180      	movs	r1, #128	; 0x80
 8003788:	0449      	lsls	r1, r1, #17
 800378a:	430a      	orrs	r2, r1
 800378c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	2380      	movs	r3, #128	; 0x80
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	4013      	ands	r3, r2
 8003798:	d016      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800379a:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800379c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379e:	4a19      	ldr	r2, [pc, #100]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	0019      	movs	r1, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037aa:	430a      	orrs	r2, r1
 80037ac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	01db      	lsls	r3, r3, #7
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d106      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80037ba:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037c0:	2180      	movs	r1, #128	; 0x80
 80037c2:	0249      	lsls	r1, r1, #9
 80037c4:	430a      	orrs	r2, r1
 80037c6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80037c8:	2312      	movs	r3, #18
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	781b      	ldrb	r3, [r3, #0]
}
 80037ce:	0018      	movs	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b006      	add	sp, #24
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	40021000 	.word	0x40021000
 80037dc:	40007000 	.word	0x40007000
 80037e0:	fffffcff 	.word	0xfffffcff
 80037e4:	fffeffff 	.word	0xfffeffff
 80037e8:	00001388 	.word	0x00001388
 80037ec:	efffffff 	.word	0xefffffff
 80037f0:	fffff3ff 	.word	0xfffff3ff
 80037f4:	fff3ffff 	.word	0xfff3ffff
 80037f8:	ffcfffff 	.word	0xffcfffff
 80037fc:	ffffcfff 	.word	0xffffcfff
 8003800:	ffbfffff 	.word	0xffbfffff
 8003804:	ffff3fff 	.word	0xffff3fff

08003808 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003808:	b5b0      	push	{r4, r5, r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003810:	230f      	movs	r3, #15
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	2201      	movs	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d100      	bne.n	8003820 <HAL_RTC_Init+0x18>
 800381e:	e08c      	b.n	800393a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2229      	movs	r2, #41	; 0x29
 8003824:	5c9b      	ldrb	r3, [r3, r2]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10b      	bne.n	8003844 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2228      	movs	r2, #40	; 0x28
 8003830:	2100      	movs	r1, #0
 8003832:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2288      	movs	r2, #136	; 0x88
 8003838:	0212      	lsls	r2, r2, #8
 800383a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	0018      	movs	r0, r3
 8003840:	f7fd fa4e 	bl	8000ce0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2229      	movs	r2, #41	; 0x29
 8003848:	2102      	movs	r1, #2
 800384a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	2210      	movs	r2, #16
 8003854:	4013      	ands	r3, r2
 8003856:	2b10      	cmp	r3, #16
 8003858:	d062      	beq.n	8003920 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	22ca      	movs	r2, #202	; 0xca
 8003860:	625a      	str	r2, [r3, #36]	; 0x24
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2253      	movs	r2, #83	; 0x53
 8003868:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800386a:	250f      	movs	r5, #15
 800386c:	197c      	adds	r4, r7, r5
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	0018      	movs	r0, r3
 8003872:	f000 fb9c 	bl	8003fae <RTC_EnterInitMode>
 8003876:	0003      	movs	r3, r0
 8003878:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800387a:	0028      	movs	r0, r5
 800387c:	183b      	adds	r3, r7, r0
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d12c      	bne.n	80038de <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	492e      	ldr	r1, [pc, #184]	; (8003948 <HAL_RTC_Init+0x140>)
 8003890:	400a      	ands	r2, r1
 8003892:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6999      	ldr	r1, [r3, #24]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6912      	ldr	r2, [r2, #16]
 80038ba:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6919      	ldr	r1, [r3, #16]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	041a      	lsls	r2, r3, #16
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80038d0:	183c      	adds	r4, r7, r0
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f000 fbad 	bl	8004034 <RTC_ExitInitMode>
 80038da:	0003      	movs	r3, r0
 80038dc:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80038de:	230f      	movs	r3, #15
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d116      	bne.n	8003916 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	00d2      	lsls	r2, r2, #3
 80038f4:	08d2      	lsrs	r2, r2, #3
 80038f6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6999      	ldr	r1, [r3, #24]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	22ff      	movs	r2, #255	; 0xff
 800391c:	625a      	str	r2, [r3, #36]	; 0x24
 800391e:	e003      	b.n	8003928 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003920:	230f      	movs	r3, #15
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	2200      	movs	r2, #0
 8003926:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8003928:	230f      	movs	r3, #15
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d103      	bne.n	800393a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2229      	movs	r2, #41	; 0x29
 8003936:	2101      	movs	r1, #1
 8003938:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800393a:	230f      	movs	r3, #15
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	781b      	ldrb	r3, [r3, #0]
}
 8003940:	0018      	movs	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	b004      	add	sp, #16
 8003946:	bdb0      	pop	{r4, r5, r7, pc}
 8003948:	fb8fffbf 	.word	0xfb8fffbf

0800394c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800394c:	b5b0      	push	{r4, r5, r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2228      	movs	r2, #40	; 0x28
 800395c:	5c9b      	ldrb	r3, [r3, r2]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_RTC_SetTime+0x1a>
 8003962:	2302      	movs	r3, #2
 8003964:	e092      	b.n	8003a8c <HAL_RTC_SetTime+0x140>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2228      	movs	r2, #40	; 0x28
 800396a:	2101      	movs	r1, #1
 800396c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2229      	movs	r2, #41	; 0x29
 8003972:	2102      	movs	r1, #2
 8003974:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	22ca      	movs	r2, #202	; 0xca
 800397c:	625a      	str	r2, [r3, #36]	; 0x24
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2253      	movs	r2, #83	; 0x53
 8003984:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003986:	2513      	movs	r5, #19
 8003988:	197c      	adds	r4, r7, r5
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	0018      	movs	r0, r3
 800398e:	f000 fb0e 	bl	8003fae <RTC_EnterInitMode>
 8003992:	0003      	movs	r3, r0
 8003994:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003996:	197b      	adds	r3, r7, r5
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d162      	bne.n	8003a64 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d125      	bne.n	80039f0 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2240      	movs	r2, #64	; 0x40
 80039ac:	4013      	ands	r3, r2
 80039ae:	d102      	bne.n	80039b6 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2200      	movs	r2, #0
 80039b4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	0018      	movs	r0, r3
 80039bc:	f000 fb7e 	bl	80040bc <RTC_ByteToBcd2>
 80039c0:	0003      	movs	r3, r0
 80039c2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	785b      	ldrb	r3, [r3, #1]
 80039c8:	0018      	movs	r0, r3
 80039ca:	f000 fb77 	bl	80040bc <RTC_ByteToBcd2>
 80039ce:	0003      	movs	r3, r0
 80039d0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80039d2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	789b      	ldrb	r3, [r3, #2]
 80039d8:	0018      	movs	r0, r3
 80039da:	f000 fb6f 	bl	80040bc <RTC_ByteToBcd2>
 80039de:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039e0:	0022      	movs	r2, r4
 80039e2:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	78db      	ldrb	r3, [r3, #3]
 80039e8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	e017      	b.n	8003a20 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2240      	movs	r2, #64	; 0x40
 80039f8:	4013      	ands	r3, r2
 80039fa:	d102      	bne.n	8003a02 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2200      	movs	r2, #0
 8003a00:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	785b      	ldrb	r3, [r3, #1]
 8003a0c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003a0e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a14:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	78db      	ldrb	r3, [r3, #3]
 8003a1a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	491b      	ldr	r1, [pc, #108]	; (8003a94 <HAL_RTC_SetTime+0x148>)
 8003a28:	400a      	ands	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4918      	ldr	r1, [pc, #96]	; (8003a98 <HAL_RTC_SetTime+0x14c>)
 8003a38:	400a      	ands	r2, r1
 8003a3a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6999      	ldr	r1, [r3, #24]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a54:	2313      	movs	r3, #19
 8003a56:	18fc      	adds	r4, r7, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f000 faea 	bl	8004034 <RTC_ExitInitMode>
 8003a60:	0003      	movs	r3, r0
 8003a62:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	22ff      	movs	r2, #255	; 0xff
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8003a6c:	2313      	movs	r3, #19
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d103      	bne.n	8003a7e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2229      	movs	r2, #41	; 0x29
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2228      	movs	r2, #40	; 0x28
 8003a82:	2100      	movs	r1, #0
 8003a84:	5499      	strb	r1, [r3, r2]

  return status;
 8003a86:	2313      	movs	r3, #19
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	781b      	ldrb	r3, [r3, #0]
}
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b006      	add	sp, #24
 8003a92:	bdb0      	pop	{r4, r5, r7, pc}
 8003a94:	007f7f7f 	.word	0x007f7f7f
 8003a98:	fffbffff 	.word	0xfffbffff

08003a9c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	045b      	lsls	r3, r3, #17
 8003aba:	0c5a      	lsrs	r2, r3, #17
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a22      	ldr	r2, [pc, #136]	; (8003b50 <HAL_RTC_GetTime+0xb4>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	0c1b      	lsrs	r3, r3, #16
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	223f      	movs	r2, #63	; 0x3f
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	0a1b      	lsrs	r3, r3, #8
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	227f      	movs	r2, #127	; 0x7f
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	227f      	movs	r2, #127	; 0x7f
 8003af2:	4013      	ands	r3, r2
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	0d9b      	lsrs	r3, r3, #22
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2201      	movs	r2, #1
 8003b02:	4013      	ands	r3, r2
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d11a      	bne.n	8003b46 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f000 faf9 	bl	800410c <RTC_Bcd2ToByte>
 8003b1a:	0003      	movs	r3, r0
 8003b1c:	001a      	movs	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	785b      	ldrb	r3, [r3, #1]
 8003b26:	0018      	movs	r0, r3
 8003b28:	f000 faf0 	bl	800410c <RTC_Bcd2ToByte>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	001a      	movs	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	789b      	ldrb	r3, [r3, #2]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f000 fae7 	bl	800410c <RTC_Bcd2ToByte>
 8003b3e:	0003      	movs	r3, r0
 8003b40:	001a      	movs	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b006      	add	sp, #24
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	007f7f7f 	.word	0x007f7f7f

08003b54 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b54:	b5b0      	push	{r4, r5, r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2228      	movs	r2, #40	; 0x28
 8003b64:	5c9b      	ldrb	r3, [r3, r2]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_RTC_SetDate+0x1a>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e07e      	b.n	8003c6c <HAL_RTC_SetDate+0x118>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2228      	movs	r2, #40	; 0x28
 8003b72:	2101      	movs	r1, #1
 8003b74:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2229      	movs	r2, #41	; 0x29
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10e      	bne.n	8003ba2 <HAL_RTC_SetDate+0x4e>
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	785b      	ldrb	r3, [r3, #1]
 8003b88:	001a      	movs	r2, r3
 8003b8a:	2310      	movs	r3, #16
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	785b      	ldrb	r3, [r3, #1]
 8003b94:	2210      	movs	r2, #16
 8003b96:	4393      	bics	r3, r2
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	330a      	adds	r3, #10
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d11c      	bne.n	8003be2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	78db      	ldrb	r3, [r3, #3]
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 fa85 	bl	80040bc <RTC_ByteToBcd2>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	785b      	ldrb	r3, [r3, #1]
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f000 fa7e 	bl	80040bc <RTC_ByteToBcd2>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bc4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	789b      	ldrb	r3, [r3, #2]
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f000 fa76 	bl	80040bc <RTC_ByteToBcd2>
 8003bd0:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bd2:	0022      	movs	r2, r4
 8003bd4:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	e00e      	b.n	8003c00 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	78db      	ldrb	r3, [r3, #3]
 8003be6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	785b      	ldrb	r3, [r3, #1]
 8003bec:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003bee:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003bf4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	22ca      	movs	r2, #202	; 0xca
 8003c06:	625a      	str	r2, [r3, #36]	; 0x24
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2253      	movs	r2, #83	; 0x53
 8003c0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c10:	2513      	movs	r5, #19
 8003c12:	197c      	adds	r4, r7, r5
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	0018      	movs	r0, r3
 8003c18:	f000 f9c9 	bl	8003fae <RTC_EnterInitMode>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003c20:	0028      	movs	r0, r5
 8003c22:	183b      	adds	r3, r7, r0
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10c      	bne.n	8003c44 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4910      	ldr	r1, [pc, #64]	; (8003c74 <HAL_RTC_SetDate+0x120>)
 8003c32:	400a      	ands	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c36:	183c      	adds	r4, r7, r0
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f000 f9fa 	bl	8004034 <RTC_ExitInitMode>
 8003c40:	0003      	movs	r3, r0
 8003c42:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	22ff      	movs	r2, #255	; 0xff
 8003c4a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003c4c:	2313      	movs	r3, #19
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d103      	bne.n	8003c5e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2229      	movs	r2, #41	; 0x29
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2228      	movs	r2, #40	; 0x28
 8003c62:	2100      	movs	r1, #0
 8003c64:	5499      	strb	r1, [r3, r2]

  return status;
 8003c66:	2313      	movs	r3, #19
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	781b      	ldrb	r3, [r3, #0]
}
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b006      	add	sp, #24
 8003c72:	bdb0      	pop	{r4, r5, r7, pc}
 8003c74:	00ffff3f 	.word	0x00ffff3f

08003c78 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4a21      	ldr	r2, [pc, #132]	; (8003d10 <HAL_RTC_GetDate+0x98>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	0c1b      	lsrs	r3, r3, #16
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	0a1b      	lsrs	r3, r3, #8
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	221f      	movs	r2, #31
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	223f      	movs	r2, #63	; 0x3f
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	0b5b      	lsrs	r3, r3, #13
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2207      	movs	r2, #7
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d11a      	bne.n	8003d04 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	78db      	ldrb	r3, [r3, #3]
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	f000 fa1a 	bl	800410c <RTC_Bcd2ToByte>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	001a      	movs	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	785b      	ldrb	r3, [r3, #1]
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f000 fa11 	bl	800410c <RTC_Bcd2ToByte>
 8003cea:	0003      	movs	r3, r0
 8003cec:	001a      	movs	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	789b      	ldrb	r3, [r3, #2]
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f000 fa08 	bl	800410c <RTC_Bcd2ToByte>
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	001a      	movs	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	0018      	movs	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b006      	add	sp, #24
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	00ffff3f 	.word	0x00ffff3f

08003d14 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003d14:	b590      	push	{r4, r7, lr}
 8003d16:	b089      	sub	sp, #36	; 0x24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2228      	movs	r2, #40	; 0x28
 8003d24:	5c9b      	ldrb	r3, [r3, r2]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_RTC_SetAlarm+0x1a>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e10c      	b.n	8003f48 <HAL_RTC_SetAlarm+0x234>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2228      	movs	r2, #40	; 0x28
 8003d32:	2101      	movs	r1, #1
 8003d34:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2229      	movs	r2, #41	; 0x29
 8003d3a:	2102      	movs	r1, #2
 8003d3c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d136      	bne.n	8003db2 <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2240      	movs	r2, #64	; 0x40
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d102      	bne.n	8003d56 <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2200      	movs	r2, #0
 8003d54:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f000 f9ae 	bl	80040bc <RTC_ByteToBcd2>
 8003d60:	0003      	movs	r3, r0
 8003d62:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	785b      	ldrb	r3, [r3, #1]
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f000 f9a7 	bl	80040bc <RTC_ByteToBcd2>
 8003d6e:	0003      	movs	r3, r0
 8003d70:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d72:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	789b      	ldrb	r3, [r3, #2]
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f000 f99f 	bl	80040bc <RTC_ByteToBcd2>
 8003d7e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d80:	0022      	movs	r2, r4
 8003d82:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	78db      	ldrb	r3, [r3, #3]
 8003d88:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2220      	movs	r2, #32
 8003d92:	5c9b      	ldrb	r3, [r3, r2]
 8003d94:	0018      	movs	r0, r3
 8003d96:	f000 f991 	bl	80040bc <RTC_ByteToBcd2>
 8003d9a:	0003      	movs	r3, r0
 8003d9c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003d9e:	0022      	movs	r2, r4
 8003da0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003da6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003dac:	4313      	orrs	r3, r2
 8003dae:	61fb      	str	r3, [r7, #28]
 8003db0:	e022      	b.n	8003df8 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	2240      	movs	r2, #64	; 0x40
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d102      	bne.n	8003dc4 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	785b      	ldrb	r3, [r3, #1]
 8003dce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003dd0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003dd6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	78db      	ldrb	r3, [r3, #3]
 8003ddc:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003dde:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2120      	movs	r1, #32
 8003de4:	5c5b      	ldrb	r3, [r3, r1]
 8003de6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003de8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003dee:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	22ca      	movs	r2, #202	; 0xca
 8003e0a:	625a      	str	r2, [r3, #36]	; 0x24
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2253      	movs	r2, #83	; 0x53
 8003e12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e18:	2380      	movs	r3, #128	; 0x80
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d143      	bne.n	8003ea8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4949      	ldr	r1, [pc, #292]	; (8003f50 <HAL_RTC_SetAlarm+0x23c>)
 8003e2c:	400a      	ands	r2, r1
 8003e2e:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4946      	ldr	r1, [pc, #280]	; (8003f54 <HAL_RTC_SetAlarm+0x240>)
 8003e3c:	400a      	ands	r2, r1
 8003e3e:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8003e40:	f7fd f94e 	bl	80010e0 <HAL_GetTick>
 8003e44:	0003      	movs	r3, r0
 8003e46:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003e48:	e016      	b.n	8003e78 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003e4a:	f7fd f949 	bl	80010e0 <HAL_GetTick>
 8003e4e:	0002      	movs	r2, r0
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	1ad2      	subs	r2, r2, r3
 8003e54:	23fa      	movs	r3, #250	; 0xfa
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d90d      	bls.n	8003e78 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	22ff      	movs	r2, #255	; 0xff
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2229      	movs	r2, #41	; 0x29
 8003e68:	2103      	movs	r1, #3
 8003e6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2228      	movs	r2, #40	; 0x28
 8003e70:	2100      	movs	r1, #0
 8003e72:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e067      	b.n	8003f48 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	4013      	ands	r3, r2
 8003e82:	d0e2      	beq.n	8003e4a <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2180      	movs	r1, #128	; 0x80
 8003ea0:	0049      	lsls	r1, r1, #1
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	619a      	str	r2, [r3, #24]
 8003ea6:	e042      	b.n	8003f2e <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4929      	ldr	r1, [pc, #164]	; (8003f58 <HAL_RTC_SetAlarm+0x244>)
 8003eb4:	400a      	ands	r2, r1
 8003eb6:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4926      	ldr	r1, [pc, #152]	; (8003f5c <HAL_RTC_SetAlarm+0x248>)
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8003ec8:	f7fd f90a 	bl	80010e0 <HAL_GetTick>
 8003ecc:	0003      	movs	r3, r0
 8003ece:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003ed0:	e016      	b.n	8003f00 <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003ed2:	f7fd f905 	bl	80010e0 <HAL_GetTick>
 8003ed6:	0002      	movs	r2, r0
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	1ad2      	subs	r2, r2, r3
 8003edc:	23fa      	movs	r3, #250	; 0xfa
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d90d      	bls.n	8003f00 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	22ff      	movs	r2, #255	; 0xff
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2229      	movs	r2, #41	; 0x29
 8003ef0:	2103      	movs	r1, #3
 8003ef2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2228      	movs	r2, #40	; 0x28
 8003ef8:	2100      	movs	r1, #0
 8003efa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e023      	b.n	8003f48 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	2202      	movs	r2, #2
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d0e2      	beq.n	8003ed2 <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69fa      	ldr	r2, [r7, #28]
 8003f12:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2180      	movs	r1, #128	; 0x80
 8003f28:	0089      	lsls	r1, r1, #2
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	22ff      	movs	r2, #255	; 0xff
 8003f34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2229      	movs	r2, #41	; 0x29
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2228      	movs	r2, #40	; 0x28
 8003f42:	2100      	movs	r1, #0
 8003f44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	0018      	movs	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b009      	add	sp, #36	; 0x24
 8003f4e:	bd90      	pop	{r4, r7, pc}
 8003f50:	fffffeff 	.word	0xfffffeff
 8003f54:	ffffefff 	.word	0xffffefff
 8003f58:	fffffdff 	.word	0xfffffdff
 8003f5c:	ffffdfff 	.word	0xffffdfff

08003f60 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	21a0      	movs	r1, #160	; 0xa0
 8003f74:	438a      	bics	r2, r1
 8003f76:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003f78:	f7fd f8b2 	bl	80010e0 <HAL_GetTick>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003f80:	e00a      	b.n	8003f98 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003f82:	f7fd f8ad 	bl	80010e0 <HAL_GetTick>
 8003f86:	0002      	movs	r2, r0
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1ad2      	subs	r2, r2, r3
 8003f8c:	23fa      	movs	r3, #250	; 0xfa
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d901      	bls.n	8003f98 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e006      	b.n	8003fa6 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d0ee      	beq.n	8003f82 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b004      	add	sp, #16
 8003fac:	bd80      	pop	{r7, pc}

08003fae <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8003fb6:	230f      	movs	r3, #15
 8003fb8:	18fb      	adds	r3, r7, r3
 8003fba:	2200      	movs	r2, #0
 8003fbc:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2240      	movs	r2, #64	; 0x40
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d12c      	bne.n	8004024 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2180      	movs	r1, #128	; 0x80
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003fda:	f7fd f881 	bl	80010e0 <HAL_GetTick>
 8003fde:	0003      	movs	r3, r0
 8003fe0:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003fe2:	e014      	b.n	800400e <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003fe4:	f7fd f87c 	bl	80010e0 <HAL_GetTick>
 8003fe8:	0002      	movs	r2, r0
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	1ad2      	subs	r2, r2, r3
 8003fee:	200f      	movs	r0, #15
 8003ff0:	183b      	adds	r3, r7, r0
 8003ff2:	1839      	adds	r1, r7, r0
 8003ff4:	7809      	ldrb	r1, [r1, #0]
 8003ff6:	7019      	strb	r1, [r3, #0]
 8003ff8:	23fa      	movs	r3, #250	; 0xfa
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d906      	bls.n	800400e <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004000:	183b      	adds	r3, r7, r0
 8004002:	2203      	movs	r2, #3
 8004004:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2229      	movs	r2, #41	; 0x29
 800400a:	2103      	movs	r1, #3
 800400c:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2240      	movs	r2, #64	; 0x40
 8004016:	4013      	ands	r3, r2
 8004018:	d104      	bne.n	8004024 <RTC_EnterInitMode+0x76>
 800401a:	230f      	movs	r3, #15
 800401c:	18fb      	adds	r3, r7, r3
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d1df      	bne.n	8003fe4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004024:	230f      	movs	r3, #15
 8004026:	18fb      	adds	r3, r7, r3
 8004028:	781b      	ldrb	r3, [r3, #0]
}
 800402a:	0018      	movs	r0, r3
 800402c:	46bd      	mov	sp, r7
 800402e:	b004      	add	sp, #16
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004034:	b590      	push	{r4, r7, lr}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800403c:	240f      	movs	r4, #15
 800403e:	193b      	adds	r3, r7, r4
 8004040:	2200      	movs	r2, #0
 8004042:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004044:	4b1c      	ldr	r3, [pc, #112]	; (80040b8 <RTC_ExitInitMode+0x84>)
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <RTC_ExitInitMode+0x84>)
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	438a      	bics	r2, r1
 800404e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004050:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <RTC_ExitInitMode+0x84>)
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	2220      	movs	r2, #32
 8004056:	4013      	ands	r3, r2
 8004058:	d10d      	bne.n	8004076 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	0018      	movs	r0, r3
 800405e:	f7ff ff7f 	bl	8003f60 <HAL_RTC_WaitForSynchro>
 8004062:	1e03      	subs	r3, r0, #0
 8004064:	d021      	beq.n	80040aa <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2229      	movs	r2, #41	; 0x29
 800406a:	2103      	movs	r1, #3
 800406c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800406e:	193b      	adds	r3, r7, r4
 8004070:	2203      	movs	r2, #3
 8004072:	701a      	strb	r2, [r3, #0]
 8004074:	e019      	b.n	80040aa <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004076:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <RTC_ExitInitMode+0x84>)
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <RTC_ExitInitMode+0x84>)
 800407c:	2120      	movs	r1, #32
 800407e:	438a      	bics	r2, r1
 8004080:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	0018      	movs	r0, r3
 8004086:	f7ff ff6b 	bl	8003f60 <HAL_RTC_WaitForSynchro>
 800408a:	1e03      	subs	r3, r0, #0
 800408c:	d007      	beq.n	800409e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2229      	movs	r2, #41	; 0x29
 8004092:	2103      	movs	r1, #3
 8004094:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004096:	230f      	movs	r3, #15
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	2203      	movs	r2, #3
 800409c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <RTC_ExitInitMode+0x84>)
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <RTC_ExitInitMode+0x84>)
 80040a4:	2120      	movs	r1, #32
 80040a6:	430a      	orrs	r2, r1
 80040a8:	619a      	str	r2, [r3, #24]
  }

  return status;
 80040aa:	230f      	movs	r3, #15
 80040ac:	18fb      	adds	r3, r7, r3
 80040ae:	781b      	ldrb	r3, [r3, #0]
}
 80040b0:	0018      	movs	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b005      	add	sp, #20
 80040b6:	bd90      	pop	{r4, r7, pc}
 80040b8:	40002800 	.word	0x40002800

080040bc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	0002      	movs	r2, r0
 80040c4:	1dfb      	adds	r3, r7, #7
 80040c6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80040cc:	230b      	movs	r3, #11
 80040ce:	18fb      	adds	r3, r7, r3
 80040d0:	1dfa      	adds	r2, r7, #7
 80040d2:	7812      	ldrb	r2, [r2, #0]
 80040d4:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80040d6:	e008      	b.n	80040ea <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3301      	adds	r3, #1
 80040dc:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80040de:	220b      	movs	r2, #11
 80040e0:	18bb      	adds	r3, r7, r2
 80040e2:	18ba      	adds	r2, r7, r2
 80040e4:	7812      	ldrb	r2, [r2, #0]
 80040e6:	3a0a      	subs	r2, #10
 80040e8:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80040ea:	210b      	movs	r1, #11
 80040ec:	187b      	adds	r3, r7, r1
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b09      	cmp	r3, #9
 80040f2:	d8f1      	bhi.n	80040d8 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	187b      	adds	r3, r7, r1
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	4313      	orrs	r3, r2
 8004102:	b2db      	uxtb	r3, r3
}
 8004104:	0018      	movs	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	b004      	add	sp, #16
 800410a:	bd80      	pop	{r7, pc}

0800410c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	0002      	movs	r2, r0
 8004114:	1dfb      	adds	r3, r7, #7
 8004116:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004118:	1dfb      	adds	r3, r7, #7
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	091b      	lsrs	r3, r3, #4
 800411e:	b2db      	uxtb	r3, r3
 8004120:	001a      	movs	r2, r3
 8004122:	0013      	movs	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	189b      	adds	r3, r3, r2
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	b2da      	uxtb	r2, r3
 8004130:	1dfb      	adds	r3, r7, #7
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	210f      	movs	r1, #15
 8004136:	400b      	ands	r3, r1
 8004138:	b2db      	uxtb	r3, r3
 800413a:	18d3      	adds	r3, r2, r3
 800413c:	b2db      	uxtb	r3, r3
}
 800413e:	0018      	movs	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	b004      	add	sp, #16
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e046      	b.n	80041e8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2288      	movs	r2, #136	; 0x88
 800415e:	589b      	ldr	r3, [r3, r2]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d107      	bne.n	8004174 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2284      	movs	r2, #132	; 0x84
 8004168:	2100      	movs	r1, #0
 800416a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	0018      	movs	r0, r3
 8004170:	f7fc fdf4 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2288      	movs	r2, #136	; 0x88
 8004178:	2124      	movs	r1, #36	; 0x24
 800417a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2101      	movs	r1, #1
 8004188:	438a      	bics	r2, r1
 800418a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	0018      	movs	r0, r3
 8004190:	f000 f8cc 	bl	800432c <UART_SetConfig>
 8004194:	0003      	movs	r3, r0
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e024      	b.n	80041e8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	0018      	movs	r0, r3
 80041aa:	f000 fb37 	bl	800481c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	490d      	ldr	r1, [pc, #52]	; (80041f0 <HAL_UART_Init+0xa8>)
 80041ba:	400a      	ands	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	212a      	movs	r1, #42	; 0x2a
 80041ca:	438a      	bics	r2, r1
 80041cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2101      	movs	r1, #1
 80041da:	430a      	orrs	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	0018      	movs	r0, r3
 80041e2:	f000 fbcf 	bl	8004984 <UART_CheckIdleState>
 80041e6:	0003      	movs	r3, r0
}
 80041e8:	0018      	movs	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b002      	add	sp, #8
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	ffffb7ff 	.word	0xffffb7ff

080041f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08a      	sub	sp, #40	; 0x28
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	1dbb      	adds	r3, r7, #6
 8004202:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2288      	movs	r2, #136	; 0x88
 8004208:	589b      	ldr	r3, [r3, r2]
 800420a:	2b20      	cmp	r3, #32
 800420c:	d000      	beq.n	8004210 <HAL_UART_Transmit+0x1c>
 800420e:	e088      	b.n	8004322 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_UART_Transmit+0x2a>
 8004216:	1dbb      	adds	r3, r7, #6
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e080      	b.n	8004324 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	2380      	movs	r3, #128	; 0x80
 8004228:	015b      	lsls	r3, r3, #5
 800422a:	429a      	cmp	r2, r3
 800422c:	d109      	bne.n	8004242 <HAL_UART_Transmit+0x4e>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d105      	bne.n	8004242 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2201      	movs	r2, #1
 800423a:	4013      	ands	r3, r2
 800423c:	d001      	beq.n	8004242 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e070      	b.n	8004324 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2290      	movs	r2, #144	; 0x90
 8004246:	2100      	movs	r1, #0
 8004248:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2288      	movs	r2, #136	; 0x88
 800424e:	2121      	movs	r1, #33	; 0x21
 8004250:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004252:	f7fc ff45 	bl	80010e0 <HAL_GetTick>
 8004256:	0003      	movs	r3, r0
 8004258:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	1dba      	adds	r2, r7, #6
 800425e:	2154      	movs	r1, #84	; 0x54
 8004260:	8812      	ldrh	r2, [r2, #0]
 8004262:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	1dba      	adds	r2, r7, #6
 8004268:	2156      	movs	r1, #86	; 0x56
 800426a:	8812      	ldrh	r2, [r2, #0]
 800426c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	2380      	movs	r3, #128	; 0x80
 8004274:	015b      	lsls	r3, r3, #5
 8004276:	429a      	cmp	r2, r3
 8004278:	d108      	bne.n	800428c <HAL_UART_Transmit+0x98>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d104      	bne.n	800428c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	e003      	b.n	8004294 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004290:	2300      	movs	r3, #0
 8004292:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004294:	e02c      	b.n	80042f0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	0013      	movs	r3, r2
 80042a0:	2200      	movs	r2, #0
 80042a2:	2180      	movs	r1, #128	; 0x80
 80042a4:	f000 fbbc 	bl	8004a20 <UART_WaitOnFlagUntilTimeout>
 80042a8:	1e03      	subs	r3, r0, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e039      	b.n	8004324 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10b      	bne.n	80042ce <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	001a      	movs	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	05d2      	lsls	r2, r2, #23
 80042c2:	0dd2      	lsrs	r2, r2, #23
 80042c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	3302      	adds	r3, #2
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	e007      	b.n	80042de <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	781a      	ldrb	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	3301      	adds	r3, #1
 80042dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2256      	movs	r2, #86	; 0x56
 80042e2:	5a9b      	ldrh	r3, [r3, r2]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b299      	uxth	r1, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2256      	movs	r2, #86	; 0x56
 80042ee:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2256      	movs	r2, #86	; 0x56
 80042f4:	5a9b      	ldrh	r3, [r3, r2]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1cc      	bne.n	8004296 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	0013      	movs	r3, r2
 8004306:	2200      	movs	r2, #0
 8004308:	2140      	movs	r1, #64	; 0x40
 800430a:	f000 fb89 	bl	8004a20 <UART_WaitOnFlagUntilTimeout>
 800430e:	1e03      	subs	r3, r0, #0
 8004310:	d001      	beq.n	8004316 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e006      	b.n	8004324 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2288      	movs	r2, #136	; 0x88
 800431a:	2120      	movs	r1, #32
 800431c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e000      	b.n	8004324 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004322:	2302      	movs	r3, #2
  }
}
 8004324:	0018      	movs	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	b008      	add	sp, #32
 800432a:	bd80      	pop	{r7, pc}

0800432c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800432c:	b5b0      	push	{r4, r5, r7, lr}
 800432e:	b090      	sub	sp, #64	; 0x40
 8004330:	af00      	add	r7, sp, #0
 8004332:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004334:	231a      	movs	r3, #26
 8004336:	2220      	movs	r2, #32
 8004338:	189b      	adds	r3, r3, r2
 800433a:	19db      	adds	r3, r3, r7
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	431a      	orrs	r2, r3
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	431a      	orrs	r2, r3
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	4313      	orrs	r3, r2
 8004356:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4ac4      	ldr	r2, [pc, #784]	; (8004670 <UART_SetConfig+0x344>)
 8004360:	4013      	ands	r3, r2
 8004362:	0019      	movs	r1, r3
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800436a:	430b      	orrs	r3, r1
 800436c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	4abf      	ldr	r2, [pc, #764]	; (8004674 <UART_SetConfig+0x348>)
 8004376:	4013      	ands	r3, r2
 8004378:	0018      	movs	r0, r3
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	68d9      	ldr	r1, [r3, #12]
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	0003      	movs	r3, r0
 8004384:	430b      	orrs	r3, r1
 8004386:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4ab9      	ldr	r2, [pc, #740]	; (8004678 <UART_SetConfig+0x34c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d004      	beq.n	80043a2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800439e:	4313      	orrs	r3, r2
 80043a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	4ab4      	ldr	r2, [pc, #720]	; (800467c <UART_SetConfig+0x350>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	0019      	movs	r1, r3
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b4:	430b      	orrs	r3, r1
 80043b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043be:	220f      	movs	r2, #15
 80043c0:	4393      	bics	r3, r2
 80043c2:	0018      	movs	r0, r3
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	0003      	movs	r3, r0
 80043ce:	430b      	orrs	r3, r1
 80043d0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4aaa      	ldr	r2, [pc, #680]	; (8004680 <UART_SetConfig+0x354>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d131      	bne.n	8004440 <UART_SetConfig+0x114>
 80043dc:	4ba9      	ldr	r3, [pc, #676]	; (8004684 <UART_SetConfig+0x358>)
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	2203      	movs	r2, #3
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d01d      	beq.n	8004424 <UART_SetConfig+0xf8>
 80043e8:	d823      	bhi.n	8004432 <UART_SetConfig+0x106>
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d00c      	beq.n	8004408 <UART_SetConfig+0xdc>
 80043ee:	d820      	bhi.n	8004432 <UART_SetConfig+0x106>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <UART_SetConfig+0xce>
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d00e      	beq.n	8004416 <UART_SetConfig+0xea>
 80043f8:	e01b      	b.n	8004432 <UART_SetConfig+0x106>
 80043fa:	231b      	movs	r3, #27
 80043fc:	2220      	movs	r2, #32
 80043fe:	189b      	adds	r3, r3, r2
 8004400:	19db      	adds	r3, r3, r7
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
 8004406:	e071      	b.n	80044ec <UART_SetConfig+0x1c0>
 8004408:	231b      	movs	r3, #27
 800440a:	2220      	movs	r2, #32
 800440c:	189b      	adds	r3, r3, r2
 800440e:	19db      	adds	r3, r3, r7
 8004410:	2202      	movs	r2, #2
 8004412:	701a      	strb	r2, [r3, #0]
 8004414:	e06a      	b.n	80044ec <UART_SetConfig+0x1c0>
 8004416:	231b      	movs	r3, #27
 8004418:	2220      	movs	r2, #32
 800441a:	189b      	adds	r3, r3, r2
 800441c:	19db      	adds	r3, r3, r7
 800441e:	2204      	movs	r2, #4
 8004420:	701a      	strb	r2, [r3, #0]
 8004422:	e063      	b.n	80044ec <UART_SetConfig+0x1c0>
 8004424:	231b      	movs	r3, #27
 8004426:	2220      	movs	r2, #32
 8004428:	189b      	adds	r3, r3, r2
 800442a:	19db      	adds	r3, r3, r7
 800442c:	2208      	movs	r2, #8
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	e05c      	b.n	80044ec <UART_SetConfig+0x1c0>
 8004432:	231b      	movs	r3, #27
 8004434:	2220      	movs	r2, #32
 8004436:	189b      	adds	r3, r3, r2
 8004438:	19db      	adds	r3, r3, r7
 800443a:	2210      	movs	r2, #16
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	e055      	b.n	80044ec <UART_SetConfig+0x1c0>
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a90      	ldr	r2, [pc, #576]	; (8004688 <UART_SetConfig+0x35c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d106      	bne.n	8004458 <UART_SetConfig+0x12c>
 800444a:	231b      	movs	r3, #27
 800444c:	2220      	movs	r2, #32
 800444e:	189b      	adds	r3, r3, r2
 8004450:	19db      	adds	r3, r3, r7
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	e049      	b.n	80044ec <UART_SetConfig+0x1c0>
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a86      	ldr	r2, [pc, #536]	; (8004678 <UART_SetConfig+0x34c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d13e      	bne.n	80044e0 <UART_SetConfig+0x1b4>
 8004462:	4b88      	ldr	r3, [pc, #544]	; (8004684 <UART_SetConfig+0x358>)
 8004464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004466:	23c0      	movs	r3, #192	; 0xc0
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	4013      	ands	r3, r2
 800446c:	22c0      	movs	r2, #192	; 0xc0
 800446e:	0112      	lsls	r2, r2, #4
 8004470:	4293      	cmp	r3, r2
 8004472:	d027      	beq.n	80044c4 <UART_SetConfig+0x198>
 8004474:	22c0      	movs	r2, #192	; 0xc0
 8004476:	0112      	lsls	r2, r2, #4
 8004478:	4293      	cmp	r3, r2
 800447a:	d82a      	bhi.n	80044d2 <UART_SetConfig+0x1a6>
 800447c:	2280      	movs	r2, #128	; 0x80
 800447e:	0112      	lsls	r2, r2, #4
 8004480:	4293      	cmp	r3, r2
 8004482:	d011      	beq.n	80044a8 <UART_SetConfig+0x17c>
 8004484:	2280      	movs	r2, #128	; 0x80
 8004486:	0112      	lsls	r2, r2, #4
 8004488:	4293      	cmp	r3, r2
 800448a:	d822      	bhi.n	80044d2 <UART_SetConfig+0x1a6>
 800448c:	2b00      	cmp	r3, #0
 800448e:	d004      	beq.n	800449a <UART_SetConfig+0x16e>
 8004490:	2280      	movs	r2, #128	; 0x80
 8004492:	00d2      	lsls	r2, r2, #3
 8004494:	4293      	cmp	r3, r2
 8004496:	d00e      	beq.n	80044b6 <UART_SetConfig+0x18a>
 8004498:	e01b      	b.n	80044d2 <UART_SetConfig+0x1a6>
 800449a:	231b      	movs	r3, #27
 800449c:	2220      	movs	r2, #32
 800449e:	189b      	adds	r3, r3, r2
 80044a0:	19db      	adds	r3, r3, r7
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	e021      	b.n	80044ec <UART_SetConfig+0x1c0>
 80044a8:	231b      	movs	r3, #27
 80044aa:	2220      	movs	r2, #32
 80044ac:	189b      	adds	r3, r3, r2
 80044ae:	19db      	adds	r3, r3, r7
 80044b0:	2202      	movs	r2, #2
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	e01a      	b.n	80044ec <UART_SetConfig+0x1c0>
 80044b6:	231b      	movs	r3, #27
 80044b8:	2220      	movs	r2, #32
 80044ba:	189b      	adds	r3, r3, r2
 80044bc:	19db      	adds	r3, r3, r7
 80044be:	2204      	movs	r2, #4
 80044c0:	701a      	strb	r2, [r3, #0]
 80044c2:	e013      	b.n	80044ec <UART_SetConfig+0x1c0>
 80044c4:	231b      	movs	r3, #27
 80044c6:	2220      	movs	r2, #32
 80044c8:	189b      	adds	r3, r3, r2
 80044ca:	19db      	adds	r3, r3, r7
 80044cc:	2208      	movs	r2, #8
 80044ce:	701a      	strb	r2, [r3, #0]
 80044d0:	e00c      	b.n	80044ec <UART_SetConfig+0x1c0>
 80044d2:	231b      	movs	r3, #27
 80044d4:	2220      	movs	r2, #32
 80044d6:	189b      	adds	r3, r3, r2
 80044d8:	19db      	adds	r3, r3, r7
 80044da:	2210      	movs	r2, #16
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	e005      	b.n	80044ec <UART_SetConfig+0x1c0>
 80044e0:	231b      	movs	r3, #27
 80044e2:	2220      	movs	r2, #32
 80044e4:	189b      	adds	r3, r3, r2
 80044e6:	19db      	adds	r3, r3, r7
 80044e8:	2210      	movs	r2, #16
 80044ea:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a61      	ldr	r2, [pc, #388]	; (8004678 <UART_SetConfig+0x34c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d000      	beq.n	80044f8 <UART_SetConfig+0x1cc>
 80044f6:	e092      	b.n	800461e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044f8:	231b      	movs	r3, #27
 80044fa:	2220      	movs	r2, #32
 80044fc:	189b      	adds	r3, r3, r2
 80044fe:	19db      	adds	r3, r3, r7
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b08      	cmp	r3, #8
 8004504:	d015      	beq.n	8004532 <UART_SetConfig+0x206>
 8004506:	dc18      	bgt.n	800453a <UART_SetConfig+0x20e>
 8004508:	2b04      	cmp	r3, #4
 800450a:	d00d      	beq.n	8004528 <UART_SetConfig+0x1fc>
 800450c:	dc15      	bgt.n	800453a <UART_SetConfig+0x20e>
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <UART_SetConfig+0x1ec>
 8004512:	2b02      	cmp	r3, #2
 8004514:	d005      	beq.n	8004522 <UART_SetConfig+0x1f6>
 8004516:	e010      	b.n	800453a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004518:	f7fe ffe6 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 800451c:	0003      	movs	r3, r0
 800451e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004520:	e014      	b.n	800454c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004522:	4b5a      	ldr	r3, [pc, #360]	; (800468c <UART_SetConfig+0x360>)
 8004524:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004526:	e011      	b.n	800454c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004528:	f7fe ff52 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 800452c:	0003      	movs	r3, r0
 800452e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004530:	e00c      	b.n	800454c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004532:	2380      	movs	r3, #128	; 0x80
 8004534:	021b      	lsls	r3, r3, #8
 8004536:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004538:	e008      	b.n	800454c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800453e:	231a      	movs	r3, #26
 8004540:	2220      	movs	r2, #32
 8004542:	189b      	adds	r3, r3, r2
 8004544:	19db      	adds	r3, r3, r7
 8004546:	2201      	movs	r2, #1
 8004548:	701a      	strb	r2, [r3, #0]
        break;
 800454a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800454c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454e:	2b00      	cmp	r3, #0
 8004550:	d100      	bne.n	8004554 <UART_SetConfig+0x228>
 8004552:	e147      	b.n	80047e4 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004558:	4b4d      	ldr	r3, [pc, #308]	; (8004690 <UART_SetConfig+0x364>)
 800455a:	0052      	lsls	r2, r2, #1
 800455c:	5ad3      	ldrh	r3, [r2, r3]
 800455e:	0019      	movs	r1, r3
 8004560:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004562:	f7fb fdd9 	bl	8000118 <__udivsi3>
 8004566:	0003      	movs	r3, r0
 8004568:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	0013      	movs	r3, r2
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	189b      	adds	r3, r3, r2
 8004574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004576:	429a      	cmp	r2, r3
 8004578:	d305      	bcc.n	8004586 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004582:	429a      	cmp	r2, r3
 8004584:	d906      	bls.n	8004594 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004586:	231a      	movs	r3, #26
 8004588:	2220      	movs	r2, #32
 800458a:	189b      	adds	r3, r3, r2
 800458c:	19db      	adds	r3, r3, r7
 800458e:	2201      	movs	r2, #1
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	e127      	b.n	80047e4 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004596:	61bb      	str	r3, [r7, #24]
 8004598:	2300      	movs	r3, #0
 800459a:	61fb      	str	r3, [r7, #28]
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045a0:	4b3b      	ldr	r3, [pc, #236]	; (8004690 <UART_SetConfig+0x364>)
 80045a2:	0052      	lsls	r2, r2, #1
 80045a4:	5ad3      	ldrh	r3, [r2, r3]
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	69b8      	ldr	r0, [r7, #24]
 80045b2:	69f9      	ldr	r1, [r7, #28]
 80045b4:	f7fb fe3c 	bl	8000230 <__aeabi_uldivmod>
 80045b8:	0002      	movs	r2, r0
 80045ba:	000b      	movs	r3, r1
 80045bc:	0e11      	lsrs	r1, r2, #24
 80045be:	021d      	lsls	r5, r3, #8
 80045c0:	430d      	orrs	r5, r1
 80045c2:	0214      	lsls	r4, r2, #8
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	085b      	lsrs	r3, r3, #1
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	68b8      	ldr	r0, [r7, #8]
 80045d2:	68f9      	ldr	r1, [r7, #12]
 80045d4:	1900      	adds	r0, r0, r4
 80045d6:	4169      	adcs	r1, r5
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	603b      	str	r3, [r7, #0]
 80045de:	2300      	movs	r3, #0
 80045e0:	607b      	str	r3, [r7, #4]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f7fb fe23 	bl	8000230 <__aeabi_uldivmod>
 80045ea:	0002      	movs	r2, r0
 80045ec:	000b      	movs	r3, r1
 80045ee:	0013      	movs	r3, r2
 80045f0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f4:	23c0      	movs	r3, #192	; 0xc0
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d309      	bcc.n	8004610 <UART_SetConfig+0x2e4>
 80045fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045fe:	2380      	movs	r3, #128	; 0x80
 8004600:	035b      	lsls	r3, r3, #13
 8004602:	429a      	cmp	r2, r3
 8004604:	d204      	bcs.n	8004610 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800460c:	60da      	str	r2, [r3, #12]
 800460e:	e0e9      	b.n	80047e4 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004610:	231a      	movs	r3, #26
 8004612:	2220      	movs	r2, #32
 8004614:	189b      	adds	r3, r3, r2
 8004616:	19db      	adds	r3, r3, r7
 8004618:	2201      	movs	r2, #1
 800461a:	701a      	strb	r2, [r3, #0]
 800461c:	e0e2      	b.n	80047e4 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	69da      	ldr	r2, [r3, #28]
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	429a      	cmp	r2, r3
 8004628:	d000      	beq.n	800462c <UART_SetConfig+0x300>
 800462a:	e083      	b.n	8004734 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800462c:	231b      	movs	r3, #27
 800462e:	2220      	movs	r2, #32
 8004630:	189b      	adds	r3, r3, r2
 8004632:	19db      	adds	r3, r3, r7
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b08      	cmp	r3, #8
 8004638:	d015      	beq.n	8004666 <UART_SetConfig+0x33a>
 800463a:	dc2b      	bgt.n	8004694 <UART_SetConfig+0x368>
 800463c:	2b04      	cmp	r3, #4
 800463e:	d00d      	beq.n	800465c <UART_SetConfig+0x330>
 8004640:	dc28      	bgt.n	8004694 <UART_SetConfig+0x368>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <UART_SetConfig+0x320>
 8004646:	2b02      	cmp	r3, #2
 8004648:	d005      	beq.n	8004656 <UART_SetConfig+0x32a>
 800464a:	e023      	b.n	8004694 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800464c:	f7fe ff4c 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 8004650:	0003      	movs	r3, r0
 8004652:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004654:	e027      	b.n	80046a6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004656:	4b0d      	ldr	r3, [pc, #52]	; (800468c <UART_SetConfig+0x360>)
 8004658:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800465a:	e024      	b.n	80046a6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800465c:	f7fe feb8 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 8004660:	0003      	movs	r3, r0
 8004662:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004664:	e01f      	b.n	80046a6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004666:	2380      	movs	r3, #128	; 0x80
 8004668:	021b      	lsls	r3, r3, #8
 800466a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800466c:	e01b      	b.n	80046a6 <UART_SetConfig+0x37a>
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	cfff69f3 	.word	0xcfff69f3
 8004674:	ffffcfff 	.word	0xffffcfff
 8004678:	40008000 	.word	0x40008000
 800467c:	11fff4ff 	.word	0x11fff4ff
 8004680:	40013800 	.word	0x40013800
 8004684:	40021000 	.word	0x40021000
 8004688:	40004400 	.word	0x40004400
 800468c:	00f42400 	.word	0x00f42400
 8004690:	08005e10 	.word	0x08005e10
      default:
        pclk = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004698:	231a      	movs	r3, #26
 800469a:	2220      	movs	r2, #32
 800469c:	189b      	adds	r3, r3, r2
 800469e:	19db      	adds	r3, r3, r7
 80046a0:	2201      	movs	r2, #1
 80046a2:	701a      	strb	r2, [r3, #0]
        break;
 80046a4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d100      	bne.n	80046ae <UART_SetConfig+0x382>
 80046ac:	e09a      	b.n	80047e4 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046b2:	4b58      	ldr	r3, [pc, #352]	; (8004814 <UART_SetConfig+0x4e8>)
 80046b4:	0052      	lsls	r2, r2, #1
 80046b6:	5ad3      	ldrh	r3, [r2, r3]
 80046b8:	0019      	movs	r1, r3
 80046ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80046bc:	f7fb fd2c 	bl	8000118 <__udivsi3>
 80046c0:	0003      	movs	r3, r0
 80046c2:	005a      	lsls	r2, r3, #1
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	085b      	lsrs	r3, r3, #1
 80046ca:	18d2      	adds	r2, r2, r3
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	0019      	movs	r1, r3
 80046d2:	0010      	movs	r0, r2
 80046d4:	f7fb fd20 	bl	8000118 <__udivsi3>
 80046d8:	0003      	movs	r3, r0
 80046da:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	2b0f      	cmp	r3, #15
 80046e0:	d921      	bls.n	8004726 <UART_SetConfig+0x3fa>
 80046e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	025b      	lsls	r3, r3, #9
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d21c      	bcs.n	8004726 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	200e      	movs	r0, #14
 80046f2:	2420      	movs	r4, #32
 80046f4:	1903      	adds	r3, r0, r4
 80046f6:	19db      	adds	r3, r3, r7
 80046f8:	210f      	movs	r1, #15
 80046fa:	438a      	bics	r2, r1
 80046fc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	b29b      	uxth	r3, r3
 8004704:	2207      	movs	r2, #7
 8004706:	4013      	ands	r3, r2
 8004708:	b299      	uxth	r1, r3
 800470a:	1903      	adds	r3, r0, r4
 800470c:	19db      	adds	r3, r3, r7
 800470e:	1902      	adds	r2, r0, r4
 8004710:	19d2      	adds	r2, r2, r7
 8004712:	8812      	ldrh	r2, [r2, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	1902      	adds	r2, r0, r4
 800471e:	19d2      	adds	r2, r2, r7
 8004720:	8812      	ldrh	r2, [r2, #0]
 8004722:	60da      	str	r2, [r3, #12]
 8004724:	e05e      	b.n	80047e4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004726:	231a      	movs	r3, #26
 8004728:	2220      	movs	r2, #32
 800472a:	189b      	adds	r3, r3, r2
 800472c:	19db      	adds	r3, r3, r7
 800472e:	2201      	movs	r2, #1
 8004730:	701a      	strb	r2, [r3, #0]
 8004732:	e057      	b.n	80047e4 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004734:	231b      	movs	r3, #27
 8004736:	2220      	movs	r2, #32
 8004738:	189b      	adds	r3, r3, r2
 800473a:	19db      	adds	r3, r3, r7
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b08      	cmp	r3, #8
 8004740:	d015      	beq.n	800476e <UART_SetConfig+0x442>
 8004742:	dc18      	bgt.n	8004776 <UART_SetConfig+0x44a>
 8004744:	2b04      	cmp	r3, #4
 8004746:	d00d      	beq.n	8004764 <UART_SetConfig+0x438>
 8004748:	dc15      	bgt.n	8004776 <UART_SetConfig+0x44a>
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <UART_SetConfig+0x428>
 800474e:	2b02      	cmp	r3, #2
 8004750:	d005      	beq.n	800475e <UART_SetConfig+0x432>
 8004752:	e010      	b.n	8004776 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004754:	f7fe fec8 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 8004758:	0003      	movs	r3, r0
 800475a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800475c:	e014      	b.n	8004788 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800475e:	4b2e      	ldr	r3, [pc, #184]	; (8004818 <UART_SetConfig+0x4ec>)
 8004760:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004762:	e011      	b.n	8004788 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004764:	f7fe fe34 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 8004768:	0003      	movs	r3, r0
 800476a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800476c:	e00c      	b.n	8004788 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800476e:	2380      	movs	r3, #128	; 0x80
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004774:	e008      	b.n	8004788 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800477a:	231a      	movs	r3, #26
 800477c:	2220      	movs	r2, #32
 800477e:	189b      	adds	r3, r3, r2
 8004780:	19db      	adds	r3, r3, r7
 8004782:	2201      	movs	r2, #1
 8004784:	701a      	strb	r2, [r3, #0]
        break;
 8004786:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478a:	2b00      	cmp	r3, #0
 800478c:	d02a      	beq.n	80047e4 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004792:	4b20      	ldr	r3, [pc, #128]	; (8004814 <UART_SetConfig+0x4e8>)
 8004794:	0052      	lsls	r2, r2, #1
 8004796:	5ad3      	ldrh	r3, [r2, r3]
 8004798:	0019      	movs	r1, r3
 800479a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800479c:	f7fb fcbc 	bl	8000118 <__udivsi3>
 80047a0:	0003      	movs	r3, r0
 80047a2:	001a      	movs	r2, r3
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	085b      	lsrs	r3, r3, #1
 80047aa:	18d2      	adds	r2, r2, r3
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	0019      	movs	r1, r3
 80047b2:	0010      	movs	r0, r2
 80047b4:	f7fb fcb0 	bl	8000118 <__udivsi3>
 80047b8:	0003      	movs	r3, r0
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	2b0f      	cmp	r3, #15
 80047c0:	d90a      	bls.n	80047d8 <UART_SetConfig+0x4ac>
 80047c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047c4:	2380      	movs	r3, #128	; 0x80
 80047c6:	025b      	lsls	r3, r3, #9
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d205      	bcs.n	80047d8 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	60da      	str	r2, [r3, #12]
 80047d6:	e005      	b.n	80047e4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80047d8:	231a      	movs	r3, #26
 80047da:	2220      	movs	r2, #32
 80047dc:	189b      	adds	r3, r3, r2
 80047de:	19db      	adds	r3, r3, r7
 80047e0:	2201      	movs	r2, #1
 80047e2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	226a      	movs	r2, #106	; 0x6a
 80047e8:	2101      	movs	r1, #1
 80047ea:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	2268      	movs	r2, #104	; 0x68
 80047f0:	2101      	movs	r1, #1
 80047f2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	2200      	movs	r2, #0
 80047f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	2200      	movs	r2, #0
 80047fe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004800:	231a      	movs	r3, #26
 8004802:	2220      	movs	r2, #32
 8004804:	189b      	adds	r3, r3, r2
 8004806:	19db      	adds	r3, r3, r7
 8004808:	781b      	ldrb	r3, [r3, #0]
}
 800480a:	0018      	movs	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	b010      	add	sp, #64	; 0x40
 8004810:	bdb0      	pop	{r4, r5, r7, pc}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	08005e10 	.word	0x08005e10
 8004818:	00f42400 	.word	0x00f42400

0800481c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	2201      	movs	r2, #1
 800482a:	4013      	ands	r3, r2
 800482c:	d00b      	beq.n	8004846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	4a4a      	ldr	r2, [pc, #296]	; (8004960 <UART_AdvFeatureConfig+0x144>)
 8004836:	4013      	ands	r3, r2
 8004838:	0019      	movs	r1, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484a:	2202      	movs	r2, #2
 800484c:	4013      	ands	r3, r2
 800484e:	d00b      	beq.n	8004868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4a43      	ldr	r2, [pc, #268]	; (8004964 <UART_AdvFeatureConfig+0x148>)
 8004858:	4013      	ands	r3, r2
 800485a:	0019      	movs	r1, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	2204      	movs	r2, #4
 800486e:	4013      	ands	r3, r2
 8004870:	d00b      	beq.n	800488a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	4a3b      	ldr	r2, [pc, #236]	; (8004968 <UART_AdvFeatureConfig+0x14c>)
 800487a:	4013      	ands	r3, r2
 800487c:	0019      	movs	r1, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	2208      	movs	r2, #8
 8004890:	4013      	ands	r3, r2
 8004892:	d00b      	beq.n	80048ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4a34      	ldr	r2, [pc, #208]	; (800496c <UART_AdvFeatureConfig+0x150>)
 800489c:	4013      	ands	r3, r2
 800489e:	0019      	movs	r1, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b0:	2210      	movs	r2, #16
 80048b2:	4013      	ands	r3, r2
 80048b4:	d00b      	beq.n	80048ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4a2c      	ldr	r2, [pc, #176]	; (8004970 <UART_AdvFeatureConfig+0x154>)
 80048be:	4013      	ands	r3, r2
 80048c0:	0019      	movs	r1, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	2220      	movs	r2, #32
 80048d4:	4013      	ands	r3, r2
 80048d6:	d00b      	beq.n	80048f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	4a25      	ldr	r2, [pc, #148]	; (8004974 <UART_AdvFeatureConfig+0x158>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	0019      	movs	r1, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	2240      	movs	r2, #64	; 0x40
 80048f6:	4013      	ands	r3, r2
 80048f8:	d01d      	beq.n	8004936 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4a1d      	ldr	r2, [pc, #116]	; (8004978 <UART_AdvFeatureConfig+0x15c>)
 8004902:	4013      	ands	r3, r2
 8004904:	0019      	movs	r1, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004916:	2380      	movs	r3, #128	; 0x80
 8004918:	035b      	lsls	r3, r3, #13
 800491a:	429a      	cmp	r2, r3
 800491c:	d10b      	bne.n	8004936 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4a15      	ldr	r2, [pc, #84]	; (800497c <UART_AdvFeatureConfig+0x160>)
 8004926:	4013      	ands	r3, r2
 8004928:	0019      	movs	r1, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	2280      	movs	r2, #128	; 0x80
 800493c:	4013      	ands	r3, r2
 800493e:	d00b      	beq.n	8004958 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4a0e      	ldr	r2, [pc, #56]	; (8004980 <UART_AdvFeatureConfig+0x164>)
 8004948:	4013      	ands	r3, r2
 800494a:	0019      	movs	r1, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	605a      	str	r2, [r3, #4]
  }
}
 8004958:	46c0      	nop			; (mov r8, r8)
 800495a:	46bd      	mov	sp, r7
 800495c:	b002      	add	sp, #8
 800495e:	bd80      	pop	{r7, pc}
 8004960:	fffdffff 	.word	0xfffdffff
 8004964:	fffeffff 	.word	0xfffeffff
 8004968:	fffbffff 	.word	0xfffbffff
 800496c:	ffff7fff 	.word	0xffff7fff
 8004970:	ffffefff 	.word	0xffffefff
 8004974:	ffffdfff 	.word	0xffffdfff
 8004978:	ffefffff 	.word	0xffefffff
 800497c:	ff9fffff 	.word	0xff9fffff
 8004980:	fff7ffff 	.word	0xfff7ffff

08004984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af02      	add	r7, sp, #8
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2290      	movs	r2, #144	; 0x90
 8004990:	2100      	movs	r1, #0
 8004992:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004994:	f7fc fba4 	bl	80010e0 <HAL_GetTick>
 8004998:	0003      	movs	r3, r0
 800499a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2208      	movs	r2, #8
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d10c      	bne.n	80049c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2280      	movs	r2, #128	; 0x80
 80049ae:	0391      	lsls	r1, r2, #14
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	4a1a      	ldr	r2, [pc, #104]	; (8004a1c <UART_CheckIdleState+0x98>)
 80049b4:	9200      	str	r2, [sp, #0]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f000 f832 	bl	8004a20 <UART_WaitOnFlagUntilTimeout>
 80049bc:	1e03      	subs	r3, r0, #0
 80049be:	d001      	beq.n	80049c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e026      	b.n	8004a12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2204      	movs	r2, #4
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d10c      	bne.n	80049ec <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2280      	movs	r2, #128	; 0x80
 80049d6:	03d1      	lsls	r1, r2, #15
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	4a10      	ldr	r2, [pc, #64]	; (8004a1c <UART_CheckIdleState+0x98>)
 80049dc:	9200      	str	r2, [sp, #0]
 80049de:	2200      	movs	r2, #0
 80049e0:	f000 f81e 	bl	8004a20 <UART_WaitOnFlagUntilTimeout>
 80049e4:	1e03      	subs	r3, r0, #0
 80049e6:	d001      	beq.n	80049ec <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e012      	b.n	8004a12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2288      	movs	r2, #136	; 0x88
 80049f0:	2120      	movs	r1, #32
 80049f2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	228c      	movs	r2, #140	; 0x8c
 80049f8:	2120      	movs	r1, #32
 80049fa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2284      	movs	r2, #132	; 0x84
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	0018      	movs	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b004      	add	sp, #16
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	01ffffff 	.word	0x01ffffff

08004a20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b094      	sub	sp, #80	; 0x50
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	1dfb      	adds	r3, r7, #7
 8004a2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a30:	e0a7      	b.n	8004b82 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a34:	3301      	adds	r3, #1
 8004a36:	d100      	bne.n	8004a3a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004a38:	e0a3      	b.n	8004b82 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3a:	f7fc fb51 	bl	80010e0 <HAL_GetTick>
 8004a3e:	0002      	movs	r2, r0
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d302      	bcc.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d13f      	bne.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a50:	f3ef 8310 	mrs	r3, PRIMASK
 8004a54:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a58:	647b      	str	r3, [r7, #68]	; 0x44
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	f383 8810 	msr	PRIMASK, r3
}
 8004a64:	46c0      	nop			; (mov r8, r8)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	494e      	ldr	r1, [pc, #312]	; (8004bac <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004a72:	400a      	ands	r2, r1
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a78:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	f383 8810 	msr	PRIMASK, r3
}
 8004a80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a82:	f3ef 8310 	mrs	r3, PRIMASK
 8004a86:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a92:	f383 8810 	msr	PRIMASK, r3
}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	438a      	bics	r2, r1
 8004aa6:	609a      	str	r2, [r3, #8]
 8004aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aae:	f383 8810 	msr	PRIMASK, r3
}
 8004ab2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2288      	movs	r2, #136	; 0x88
 8004ab8:	2120      	movs	r1, #32
 8004aba:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	228c      	movs	r2, #140	; 0x8c
 8004ac0:	2120      	movs	r1, #32
 8004ac2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2284      	movs	r2, #132	; 0x84
 8004ac8:	2100      	movs	r1, #0
 8004aca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e069      	b.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d052      	beq.n	8004b82 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	69da      	ldr	r2, [r3, #28]
 8004ae2:	2380      	movs	r3, #128	; 0x80
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d148      	bne.n	8004b82 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2280      	movs	r2, #128	; 0x80
 8004af6:	0112      	lsls	r2, r2, #4
 8004af8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004afa:	f3ef 8310 	mrs	r3, PRIMASK
 8004afe:	613b      	str	r3, [r7, #16]
  return(result);
 8004b00:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b04:	2301      	movs	r3, #1
 8004b06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f383 8810 	msr	PRIMASK, r3
}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4924      	ldr	r1, [pc, #144]	; (8004bac <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004b1c:	400a      	ands	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	f383 8810 	msr	PRIMASK, r3
}
 8004b2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b30:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b32:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b34:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b36:	2301      	movs	r3, #1
 8004b38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	f383 8810 	msr	PRIMASK, r3
}
 8004b40:	46c0      	nop			; (mov r8, r8)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	438a      	bics	r2, r1
 8004b50:	609a      	str	r2, [r3, #8]
 8004b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b54:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	f383 8810 	msr	PRIMASK, r3
}
 8004b5c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2288      	movs	r2, #136	; 0x88
 8004b62:	2120      	movs	r1, #32
 8004b64:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	228c      	movs	r2, #140	; 0x8c
 8004b6a:	2120      	movs	r1, #32
 8004b6c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2290      	movs	r2, #144	; 0x90
 8004b72:	2120      	movs	r1, #32
 8004b74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2284      	movs	r2, #132	; 0x84
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e010      	b.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	425a      	negs	r2, r3
 8004b92:	4153      	adcs	r3, r2
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	001a      	movs	r2, r3
 8004b98:	1dfb      	adds	r3, r7, #7
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d100      	bne.n	8004ba2 <UART_WaitOnFlagUntilTimeout+0x182>
 8004ba0:	e747      	b.n	8004a32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b014      	add	sp, #80	; 0x50
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	fffffe5f 	.word	0xfffffe5f

08004bb0 <__errno>:
 8004bb0:	4b01      	ldr	r3, [pc, #4]	; (8004bb8 <__errno+0x8>)
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	4770      	bx	lr
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	20000038 	.word	0x20000038

08004bbc <__libc_init_array>:
 8004bbc:	b570      	push	{r4, r5, r6, lr}
 8004bbe:	2600      	movs	r6, #0
 8004bc0:	4d0c      	ldr	r5, [pc, #48]	; (8004bf4 <__libc_init_array+0x38>)
 8004bc2:	4c0d      	ldr	r4, [pc, #52]	; (8004bf8 <__libc_init_array+0x3c>)
 8004bc4:	1b64      	subs	r4, r4, r5
 8004bc6:	10a4      	asrs	r4, r4, #2
 8004bc8:	42a6      	cmp	r6, r4
 8004bca:	d109      	bne.n	8004be0 <__libc_init_array+0x24>
 8004bcc:	2600      	movs	r6, #0
 8004bce:	f000 fff9 	bl	8005bc4 <_init>
 8004bd2:	4d0a      	ldr	r5, [pc, #40]	; (8004bfc <__libc_init_array+0x40>)
 8004bd4:	4c0a      	ldr	r4, [pc, #40]	; (8004c00 <__libc_init_array+0x44>)
 8004bd6:	1b64      	subs	r4, r4, r5
 8004bd8:	10a4      	asrs	r4, r4, #2
 8004bda:	42a6      	cmp	r6, r4
 8004bdc:	d105      	bne.n	8004bea <__libc_init_array+0x2e>
 8004bde:	bd70      	pop	{r4, r5, r6, pc}
 8004be0:	00b3      	lsls	r3, r6, #2
 8004be2:	58eb      	ldr	r3, [r5, r3]
 8004be4:	4798      	blx	r3
 8004be6:	3601      	adds	r6, #1
 8004be8:	e7ee      	b.n	8004bc8 <__libc_init_array+0xc>
 8004bea:	00b3      	lsls	r3, r6, #2
 8004bec:	58eb      	ldr	r3, [r5, r3]
 8004bee:	4798      	blx	r3
 8004bf0:	3601      	adds	r6, #1
 8004bf2:	e7f2      	b.n	8004bda <__libc_init_array+0x1e>
 8004bf4:	08005ec8 	.word	0x08005ec8
 8004bf8:	08005ec8 	.word	0x08005ec8
 8004bfc:	08005ec8 	.word	0x08005ec8
 8004c00:	08005ecc 	.word	0x08005ecc

08004c04 <memset>:
 8004c04:	0003      	movs	r3, r0
 8004c06:	1882      	adds	r2, r0, r2
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d100      	bne.n	8004c0e <memset+0xa>
 8004c0c:	4770      	bx	lr
 8004c0e:	7019      	strb	r1, [r3, #0]
 8004c10:	3301      	adds	r3, #1
 8004c12:	e7f9      	b.n	8004c08 <memset+0x4>

08004c14 <iprintf>:
 8004c14:	b40f      	push	{r0, r1, r2, r3}
 8004c16:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <iprintf+0x30>)
 8004c18:	b513      	push	{r0, r1, r4, lr}
 8004c1a:	681c      	ldr	r4, [r3, #0]
 8004c1c:	2c00      	cmp	r4, #0
 8004c1e:	d005      	beq.n	8004c2c <iprintf+0x18>
 8004c20:	69a3      	ldr	r3, [r4, #24]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d102      	bne.n	8004c2c <iprintf+0x18>
 8004c26:	0020      	movs	r0, r4
 8004c28:	f000 f870 	bl	8004d0c <__sinit>
 8004c2c:	ab05      	add	r3, sp, #20
 8004c2e:	0020      	movs	r0, r4
 8004c30:	9a04      	ldr	r2, [sp, #16]
 8004c32:	68a1      	ldr	r1, [r4, #8]
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	f000 f9cd 	bl	8004fd4 <_vfiprintf_r>
 8004c3a:	bc16      	pop	{r1, r2, r4}
 8004c3c:	bc08      	pop	{r3}
 8004c3e:	b004      	add	sp, #16
 8004c40:	4718      	bx	r3
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	20000038 	.word	0x20000038

08004c48 <std>:
 8004c48:	2300      	movs	r3, #0
 8004c4a:	b510      	push	{r4, lr}
 8004c4c:	0004      	movs	r4, r0
 8004c4e:	6003      	str	r3, [r0, #0]
 8004c50:	6043      	str	r3, [r0, #4]
 8004c52:	6083      	str	r3, [r0, #8]
 8004c54:	8181      	strh	r1, [r0, #12]
 8004c56:	6643      	str	r3, [r0, #100]	; 0x64
 8004c58:	0019      	movs	r1, r3
 8004c5a:	81c2      	strh	r2, [r0, #14]
 8004c5c:	6103      	str	r3, [r0, #16]
 8004c5e:	6143      	str	r3, [r0, #20]
 8004c60:	6183      	str	r3, [r0, #24]
 8004c62:	2208      	movs	r2, #8
 8004c64:	305c      	adds	r0, #92	; 0x5c
 8004c66:	f7ff ffcd 	bl	8004c04 <memset>
 8004c6a:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <std+0x38>)
 8004c6c:	6224      	str	r4, [r4, #32]
 8004c6e:	6263      	str	r3, [r4, #36]	; 0x24
 8004c70:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <std+0x3c>)
 8004c72:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <std+0x40>)
 8004c76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c78:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <std+0x44>)
 8004c7a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c7c:	bd10      	pop	{r4, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	08005571 	.word	0x08005571
 8004c84:	08005599 	.word	0x08005599
 8004c88:	080055d1 	.word	0x080055d1
 8004c8c:	080055fd 	.word	0x080055fd

08004c90 <_cleanup_r>:
 8004c90:	b510      	push	{r4, lr}
 8004c92:	4902      	ldr	r1, [pc, #8]	; (8004c9c <_cleanup_r+0xc>)
 8004c94:	f000 f8ba 	bl	8004e0c <_fwalk_reent>
 8004c98:	bd10      	pop	{r4, pc}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	08005909 	.word	0x08005909

08004ca0 <__sfmoreglue>:
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	2568      	movs	r5, #104	; 0x68
 8004ca4:	1e4a      	subs	r2, r1, #1
 8004ca6:	4355      	muls	r5, r2
 8004ca8:	000e      	movs	r6, r1
 8004caa:	0029      	movs	r1, r5
 8004cac:	3174      	adds	r1, #116	; 0x74
 8004cae:	f000 f8f3 	bl	8004e98 <_malloc_r>
 8004cb2:	1e04      	subs	r4, r0, #0
 8004cb4:	d008      	beq.n	8004cc8 <__sfmoreglue+0x28>
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	002a      	movs	r2, r5
 8004cba:	6001      	str	r1, [r0, #0]
 8004cbc:	6046      	str	r6, [r0, #4]
 8004cbe:	300c      	adds	r0, #12
 8004cc0:	60a0      	str	r0, [r4, #8]
 8004cc2:	3268      	adds	r2, #104	; 0x68
 8004cc4:	f7ff ff9e 	bl	8004c04 <memset>
 8004cc8:	0020      	movs	r0, r4
 8004cca:	bd70      	pop	{r4, r5, r6, pc}

08004ccc <__sfp_lock_acquire>:
 8004ccc:	b510      	push	{r4, lr}
 8004cce:	4802      	ldr	r0, [pc, #8]	; (8004cd8 <__sfp_lock_acquire+0xc>)
 8004cd0:	f000 f8bd 	bl	8004e4e <__retarget_lock_acquire_recursive>
 8004cd4:	bd10      	pop	{r4, pc}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	200001ed 	.word	0x200001ed

08004cdc <__sfp_lock_release>:
 8004cdc:	b510      	push	{r4, lr}
 8004cde:	4802      	ldr	r0, [pc, #8]	; (8004ce8 <__sfp_lock_release+0xc>)
 8004ce0:	f000 f8b6 	bl	8004e50 <__retarget_lock_release_recursive>
 8004ce4:	bd10      	pop	{r4, pc}
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	200001ed 	.word	0x200001ed

08004cec <__sinit_lock_acquire>:
 8004cec:	b510      	push	{r4, lr}
 8004cee:	4802      	ldr	r0, [pc, #8]	; (8004cf8 <__sinit_lock_acquire+0xc>)
 8004cf0:	f000 f8ad 	bl	8004e4e <__retarget_lock_acquire_recursive>
 8004cf4:	bd10      	pop	{r4, pc}
 8004cf6:	46c0      	nop			; (mov r8, r8)
 8004cf8:	200001ee 	.word	0x200001ee

08004cfc <__sinit_lock_release>:
 8004cfc:	b510      	push	{r4, lr}
 8004cfe:	4802      	ldr	r0, [pc, #8]	; (8004d08 <__sinit_lock_release+0xc>)
 8004d00:	f000 f8a6 	bl	8004e50 <__retarget_lock_release_recursive>
 8004d04:	bd10      	pop	{r4, pc}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	200001ee 	.word	0x200001ee

08004d0c <__sinit>:
 8004d0c:	b513      	push	{r0, r1, r4, lr}
 8004d0e:	0004      	movs	r4, r0
 8004d10:	f7ff ffec 	bl	8004cec <__sinit_lock_acquire>
 8004d14:	69a3      	ldr	r3, [r4, #24]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <__sinit+0x14>
 8004d1a:	f7ff ffef 	bl	8004cfc <__sinit_lock_release>
 8004d1e:	bd13      	pop	{r0, r1, r4, pc}
 8004d20:	64a3      	str	r3, [r4, #72]	; 0x48
 8004d22:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004d24:	6523      	str	r3, [r4, #80]	; 0x50
 8004d26:	4b13      	ldr	r3, [pc, #76]	; (8004d74 <__sinit+0x68>)
 8004d28:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <__sinit+0x6c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	42a3      	cmp	r3, r4
 8004d32:	d101      	bne.n	8004d38 <__sinit+0x2c>
 8004d34:	2301      	movs	r3, #1
 8004d36:	61a3      	str	r3, [r4, #24]
 8004d38:	0020      	movs	r0, r4
 8004d3a:	f000 f81f 	bl	8004d7c <__sfp>
 8004d3e:	6060      	str	r0, [r4, #4]
 8004d40:	0020      	movs	r0, r4
 8004d42:	f000 f81b 	bl	8004d7c <__sfp>
 8004d46:	60a0      	str	r0, [r4, #8]
 8004d48:	0020      	movs	r0, r4
 8004d4a:	f000 f817 	bl	8004d7c <__sfp>
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2104      	movs	r1, #4
 8004d52:	60e0      	str	r0, [r4, #12]
 8004d54:	6860      	ldr	r0, [r4, #4]
 8004d56:	f7ff ff77 	bl	8004c48 <std>
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	2109      	movs	r1, #9
 8004d5e:	68a0      	ldr	r0, [r4, #8]
 8004d60:	f7ff ff72 	bl	8004c48 <std>
 8004d64:	2202      	movs	r2, #2
 8004d66:	2112      	movs	r1, #18
 8004d68:	68e0      	ldr	r0, [r4, #12]
 8004d6a:	f7ff ff6d 	bl	8004c48 <std>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	61a3      	str	r3, [r4, #24]
 8004d72:	e7d2      	b.n	8004d1a <__sinit+0xe>
 8004d74:	08005e28 	.word	0x08005e28
 8004d78:	08004c91 	.word	0x08004c91

08004d7c <__sfp>:
 8004d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7e:	0007      	movs	r7, r0
 8004d80:	f7ff ffa4 	bl	8004ccc <__sfp_lock_acquire>
 8004d84:	4b1f      	ldr	r3, [pc, #124]	; (8004e04 <__sfp+0x88>)
 8004d86:	681e      	ldr	r6, [r3, #0]
 8004d88:	69b3      	ldr	r3, [r6, #24]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d102      	bne.n	8004d94 <__sfp+0x18>
 8004d8e:	0030      	movs	r0, r6
 8004d90:	f7ff ffbc 	bl	8004d0c <__sinit>
 8004d94:	3648      	adds	r6, #72	; 0x48
 8004d96:	68b4      	ldr	r4, [r6, #8]
 8004d98:	6873      	ldr	r3, [r6, #4]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	d504      	bpl.n	8004da8 <__sfp+0x2c>
 8004d9e:	6833      	ldr	r3, [r6, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d022      	beq.n	8004dea <__sfp+0x6e>
 8004da4:	6836      	ldr	r6, [r6, #0]
 8004da6:	e7f6      	b.n	8004d96 <__sfp+0x1a>
 8004da8:	220c      	movs	r2, #12
 8004daa:	5ea5      	ldrsh	r5, [r4, r2]
 8004dac:	2d00      	cmp	r5, #0
 8004dae:	d11a      	bne.n	8004de6 <__sfp+0x6a>
 8004db0:	0020      	movs	r0, r4
 8004db2:	4b15      	ldr	r3, [pc, #84]	; (8004e08 <__sfp+0x8c>)
 8004db4:	3058      	adds	r0, #88	; 0x58
 8004db6:	60e3      	str	r3, [r4, #12]
 8004db8:	6665      	str	r5, [r4, #100]	; 0x64
 8004dba:	f000 f847 	bl	8004e4c <__retarget_lock_init_recursive>
 8004dbe:	f7ff ff8d 	bl	8004cdc <__sfp_lock_release>
 8004dc2:	0020      	movs	r0, r4
 8004dc4:	2208      	movs	r2, #8
 8004dc6:	0029      	movs	r1, r5
 8004dc8:	6025      	str	r5, [r4, #0]
 8004dca:	60a5      	str	r5, [r4, #8]
 8004dcc:	6065      	str	r5, [r4, #4]
 8004dce:	6125      	str	r5, [r4, #16]
 8004dd0:	6165      	str	r5, [r4, #20]
 8004dd2:	61a5      	str	r5, [r4, #24]
 8004dd4:	305c      	adds	r0, #92	; 0x5c
 8004dd6:	f7ff ff15 	bl	8004c04 <memset>
 8004dda:	6365      	str	r5, [r4, #52]	; 0x34
 8004ddc:	63a5      	str	r5, [r4, #56]	; 0x38
 8004dde:	64a5      	str	r5, [r4, #72]	; 0x48
 8004de0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004de2:	0020      	movs	r0, r4
 8004de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004de6:	3468      	adds	r4, #104	; 0x68
 8004de8:	e7d7      	b.n	8004d9a <__sfp+0x1e>
 8004dea:	2104      	movs	r1, #4
 8004dec:	0038      	movs	r0, r7
 8004dee:	f7ff ff57 	bl	8004ca0 <__sfmoreglue>
 8004df2:	1e04      	subs	r4, r0, #0
 8004df4:	6030      	str	r0, [r6, #0]
 8004df6:	d1d5      	bne.n	8004da4 <__sfp+0x28>
 8004df8:	f7ff ff70 	bl	8004cdc <__sfp_lock_release>
 8004dfc:	230c      	movs	r3, #12
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	e7ef      	b.n	8004de2 <__sfp+0x66>
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	08005e28 	.word	0x08005e28
 8004e08:	ffff0001 	.word	0xffff0001

08004e0c <_fwalk_reent>:
 8004e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e0e:	0004      	movs	r4, r0
 8004e10:	0006      	movs	r6, r0
 8004e12:	2700      	movs	r7, #0
 8004e14:	9101      	str	r1, [sp, #4]
 8004e16:	3448      	adds	r4, #72	; 0x48
 8004e18:	6863      	ldr	r3, [r4, #4]
 8004e1a:	68a5      	ldr	r5, [r4, #8]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	9b00      	ldr	r3, [sp, #0]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	d504      	bpl.n	8004e30 <_fwalk_reent+0x24>
 8004e26:	6824      	ldr	r4, [r4, #0]
 8004e28:	2c00      	cmp	r4, #0
 8004e2a:	d1f5      	bne.n	8004e18 <_fwalk_reent+0xc>
 8004e2c:	0038      	movs	r0, r7
 8004e2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e30:	89ab      	ldrh	r3, [r5, #12]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d908      	bls.n	8004e48 <_fwalk_reent+0x3c>
 8004e36:	220e      	movs	r2, #14
 8004e38:	5eab      	ldrsh	r3, [r5, r2]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	d004      	beq.n	8004e48 <_fwalk_reent+0x3c>
 8004e3e:	0029      	movs	r1, r5
 8004e40:	0030      	movs	r0, r6
 8004e42:	9b01      	ldr	r3, [sp, #4]
 8004e44:	4798      	blx	r3
 8004e46:	4307      	orrs	r7, r0
 8004e48:	3568      	adds	r5, #104	; 0x68
 8004e4a:	e7e8      	b.n	8004e1e <_fwalk_reent+0x12>

08004e4c <__retarget_lock_init_recursive>:
 8004e4c:	4770      	bx	lr

08004e4e <__retarget_lock_acquire_recursive>:
 8004e4e:	4770      	bx	lr

08004e50 <__retarget_lock_release_recursive>:
 8004e50:	4770      	bx	lr
	...

08004e54 <sbrk_aligned>:
 8004e54:	b570      	push	{r4, r5, r6, lr}
 8004e56:	4e0f      	ldr	r6, [pc, #60]	; (8004e94 <sbrk_aligned+0x40>)
 8004e58:	000d      	movs	r5, r1
 8004e5a:	6831      	ldr	r1, [r6, #0]
 8004e5c:	0004      	movs	r4, r0
 8004e5e:	2900      	cmp	r1, #0
 8004e60:	d102      	bne.n	8004e68 <sbrk_aligned+0x14>
 8004e62:	f000 fb73 	bl	800554c <_sbrk_r>
 8004e66:	6030      	str	r0, [r6, #0]
 8004e68:	0029      	movs	r1, r5
 8004e6a:	0020      	movs	r0, r4
 8004e6c:	f000 fb6e 	bl	800554c <_sbrk_r>
 8004e70:	1c43      	adds	r3, r0, #1
 8004e72:	d00a      	beq.n	8004e8a <sbrk_aligned+0x36>
 8004e74:	2303      	movs	r3, #3
 8004e76:	1cc5      	adds	r5, r0, #3
 8004e78:	439d      	bics	r5, r3
 8004e7a:	42a8      	cmp	r0, r5
 8004e7c:	d007      	beq.n	8004e8e <sbrk_aligned+0x3a>
 8004e7e:	1a29      	subs	r1, r5, r0
 8004e80:	0020      	movs	r0, r4
 8004e82:	f000 fb63 	bl	800554c <_sbrk_r>
 8004e86:	1c43      	adds	r3, r0, #1
 8004e88:	d101      	bne.n	8004e8e <sbrk_aligned+0x3a>
 8004e8a:	2501      	movs	r5, #1
 8004e8c:	426d      	negs	r5, r5
 8004e8e:	0028      	movs	r0, r5
 8004e90:	bd70      	pop	{r4, r5, r6, pc}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	200001f4 	.word	0x200001f4

08004e98 <_malloc_r>:
 8004e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e9a:	2203      	movs	r2, #3
 8004e9c:	1ccb      	adds	r3, r1, #3
 8004e9e:	4393      	bics	r3, r2
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	0006      	movs	r6, r0
 8004ea4:	001f      	movs	r7, r3
 8004ea6:	2b0c      	cmp	r3, #12
 8004ea8:	d232      	bcs.n	8004f10 <_malloc_r+0x78>
 8004eaa:	270c      	movs	r7, #12
 8004eac:	42b9      	cmp	r1, r7
 8004eae:	d831      	bhi.n	8004f14 <_malloc_r+0x7c>
 8004eb0:	0030      	movs	r0, r6
 8004eb2:	f000 fdf5 	bl	8005aa0 <__malloc_lock>
 8004eb6:	4d32      	ldr	r5, [pc, #200]	; (8004f80 <_malloc_r+0xe8>)
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	001c      	movs	r4, r3
 8004ebc:	2c00      	cmp	r4, #0
 8004ebe:	d12e      	bne.n	8004f1e <_malloc_r+0x86>
 8004ec0:	0039      	movs	r1, r7
 8004ec2:	0030      	movs	r0, r6
 8004ec4:	f7ff ffc6 	bl	8004e54 <sbrk_aligned>
 8004ec8:	0004      	movs	r4, r0
 8004eca:	1c43      	adds	r3, r0, #1
 8004ecc:	d11e      	bne.n	8004f0c <_malloc_r+0x74>
 8004ece:	682c      	ldr	r4, [r5, #0]
 8004ed0:	0025      	movs	r5, r4
 8004ed2:	2d00      	cmp	r5, #0
 8004ed4:	d14a      	bne.n	8004f6c <_malloc_r+0xd4>
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	0029      	movs	r1, r5
 8004eda:	18e3      	adds	r3, r4, r3
 8004edc:	0030      	movs	r0, r6
 8004ede:	9301      	str	r3, [sp, #4]
 8004ee0:	f000 fb34 	bl	800554c <_sbrk_r>
 8004ee4:	9b01      	ldr	r3, [sp, #4]
 8004ee6:	4283      	cmp	r3, r0
 8004ee8:	d143      	bne.n	8004f72 <_malloc_r+0xda>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	3703      	adds	r7, #3
 8004eee:	1aff      	subs	r7, r7, r3
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	439f      	bics	r7, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	2f0c      	cmp	r7, #12
 8004ef8:	d200      	bcs.n	8004efc <_malloc_r+0x64>
 8004efa:	270c      	movs	r7, #12
 8004efc:	0039      	movs	r1, r7
 8004efe:	0030      	movs	r0, r6
 8004f00:	f7ff ffa8 	bl	8004e54 <sbrk_aligned>
 8004f04:	1c43      	adds	r3, r0, #1
 8004f06:	d034      	beq.n	8004f72 <_malloc_r+0xda>
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	19df      	adds	r7, r3, r7
 8004f0c:	6027      	str	r7, [r4, #0]
 8004f0e:	e013      	b.n	8004f38 <_malloc_r+0xa0>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	dacb      	bge.n	8004eac <_malloc_r+0x14>
 8004f14:	230c      	movs	r3, #12
 8004f16:	2500      	movs	r5, #0
 8004f18:	6033      	str	r3, [r6, #0]
 8004f1a:	0028      	movs	r0, r5
 8004f1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f1e:	6822      	ldr	r2, [r4, #0]
 8004f20:	1bd1      	subs	r1, r2, r7
 8004f22:	d420      	bmi.n	8004f66 <_malloc_r+0xce>
 8004f24:	290b      	cmp	r1, #11
 8004f26:	d917      	bls.n	8004f58 <_malloc_r+0xc0>
 8004f28:	19e2      	adds	r2, r4, r7
 8004f2a:	6027      	str	r7, [r4, #0]
 8004f2c:	42a3      	cmp	r3, r4
 8004f2e:	d111      	bne.n	8004f54 <_malloc_r+0xbc>
 8004f30:	602a      	str	r2, [r5, #0]
 8004f32:	6863      	ldr	r3, [r4, #4]
 8004f34:	6011      	str	r1, [r2, #0]
 8004f36:	6053      	str	r3, [r2, #4]
 8004f38:	0030      	movs	r0, r6
 8004f3a:	0025      	movs	r5, r4
 8004f3c:	f000 fdb8 	bl	8005ab0 <__malloc_unlock>
 8004f40:	2207      	movs	r2, #7
 8004f42:	350b      	adds	r5, #11
 8004f44:	1d23      	adds	r3, r4, #4
 8004f46:	4395      	bics	r5, r2
 8004f48:	1aea      	subs	r2, r5, r3
 8004f4a:	429d      	cmp	r5, r3
 8004f4c:	d0e5      	beq.n	8004f1a <_malloc_r+0x82>
 8004f4e:	1b5b      	subs	r3, r3, r5
 8004f50:	50a3      	str	r3, [r4, r2]
 8004f52:	e7e2      	b.n	8004f1a <_malloc_r+0x82>
 8004f54:	605a      	str	r2, [r3, #4]
 8004f56:	e7ec      	b.n	8004f32 <_malloc_r+0x9a>
 8004f58:	6862      	ldr	r2, [r4, #4]
 8004f5a:	42a3      	cmp	r3, r4
 8004f5c:	d101      	bne.n	8004f62 <_malloc_r+0xca>
 8004f5e:	602a      	str	r2, [r5, #0]
 8004f60:	e7ea      	b.n	8004f38 <_malloc_r+0xa0>
 8004f62:	605a      	str	r2, [r3, #4]
 8004f64:	e7e8      	b.n	8004f38 <_malloc_r+0xa0>
 8004f66:	0023      	movs	r3, r4
 8004f68:	6864      	ldr	r4, [r4, #4]
 8004f6a:	e7a7      	b.n	8004ebc <_malloc_r+0x24>
 8004f6c:	002c      	movs	r4, r5
 8004f6e:	686d      	ldr	r5, [r5, #4]
 8004f70:	e7af      	b.n	8004ed2 <_malloc_r+0x3a>
 8004f72:	230c      	movs	r3, #12
 8004f74:	0030      	movs	r0, r6
 8004f76:	6033      	str	r3, [r6, #0]
 8004f78:	f000 fd9a 	bl	8005ab0 <__malloc_unlock>
 8004f7c:	e7cd      	b.n	8004f1a <_malloc_r+0x82>
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	200001f0 	.word	0x200001f0

08004f84 <__sfputc_r>:
 8004f84:	6893      	ldr	r3, [r2, #8]
 8004f86:	b510      	push	{r4, lr}
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	6093      	str	r3, [r2, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	da04      	bge.n	8004f9a <__sfputc_r+0x16>
 8004f90:	6994      	ldr	r4, [r2, #24]
 8004f92:	42a3      	cmp	r3, r4
 8004f94:	db07      	blt.n	8004fa6 <__sfputc_r+0x22>
 8004f96:	290a      	cmp	r1, #10
 8004f98:	d005      	beq.n	8004fa6 <__sfputc_r+0x22>
 8004f9a:	6813      	ldr	r3, [r2, #0]
 8004f9c:	1c58      	adds	r0, r3, #1
 8004f9e:	6010      	str	r0, [r2, #0]
 8004fa0:	7019      	strb	r1, [r3, #0]
 8004fa2:	0008      	movs	r0, r1
 8004fa4:	bd10      	pop	{r4, pc}
 8004fa6:	f000 fb2f 	bl	8005608 <__swbuf_r>
 8004faa:	0001      	movs	r1, r0
 8004fac:	e7f9      	b.n	8004fa2 <__sfputc_r+0x1e>

08004fae <__sfputs_r>:
 8004fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb0:	0006      	movs	r6, r0
 8004fb2:	000f      	movs	r7, r1
 8004fb4:	0014      	movs	r4, r2
 8004fb6:	18d5      	adds	r5, r2, r3
 8004fb8:	42ac      	cmp	r4, r5
 8004fba:	d101      	bne.n	8004fc0 <__sfputs_r+0x12>
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	e007      	b.n	8004fd0 <__sfputs_r+0x22>
 8004fc0:	7821      	ldrb	r1, [r4, #0]
 8004fc2:	003a      	movs	r2, r7
 8004fc4:	0030      	movs	r0, r6
 8004fc6:	f7ff ffdd 	bl	8004f84 <__sfputc_r>
 8004fca:	3401      	adds	r4, #1
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	d1f3      	bne.n	8004fb8 <__sfputs_r+0xa>
 8004fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fd4 <_vfiprintf_r>:
 8004fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd6:	b0a1      	sub	sp, #132	; 0x84
 8004fd8:	0006      	movs	r6, r0
 8004fda:	000c      	movs	r4, r1
 8004fdc:	001f      	movs	r7, r3
 8004fde:	9203      	str	r2, [sp, #12]
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d004      	beq.n	8004fee <_vfiprintf_r+0x1a>
 8004fe4:	6983      	ldr	r3, [r0, #24]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <_vfiprintf_r+0x1a>
 8004fea:	f7ff fe8f 	bl	8004d0c <__sinit>
 8004fee:	4b8e      	ldr	r3, [pc, #568]	; (8005228 <_vfiprintf_r+0x254>)
 8004ff0:	429c      	cmp	r4, r3
 8004ff2:	d11c      	bne.n	800502e <_vfiprintf_r+0x5a>
 8004ff4:	6874      	ldr	r4, [r6, #4]
 8004ff6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ff8:	07db      	lsls	r3, r3, #31
 8004ffa:	d405      	bmi.n	8005008 <_vfiprintf_r+0x34>
 8004ffc:	89a3      	ldrh	r3, [r4, #12]
 8004ffe:	059b      	lsls	r3, r3, #22
 8005000:	d402      	bmi.n	8005008 <_vfiprintf_r+0x34>
 8005002:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005004:	f7ff ff23 	bl	8004e4e <__retarget_lock_acquire_recursive>
 8005008:	89a3      	ldrh	r3, [r4, #12]
 800500a:	071b      	lsls	r3, r3, #28
 800500c:	d502      	bpl.n	8005014 <_vfiprintf_r+0x40>
 800500e:	6923      	ldr	r3, [r4, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d11d      	bne.n	8005050 <_vfiprintf_r+0x7c>
 8005014:	0021      	movs	r1, r4
 8005016:	0030      	movs	r0, r6
 8005018:	f000 fb60 	bl	80056dc <__swsetup_r>
 800501c:	2800      	cmp	r0, #0
 800501e:	d017      	beq.n	8005050 <_vfiprintf_r+0x7c>
 8005020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005022:	07db      	lsls	r3, r3, #31
 8005024:	d50d      	bpl.n	8005042 <_vfiprintf_r+0x6e>
 8005026:	2001      	movs	r0, #1
 8005028:	4240      	negs	r0, r0
 800502a:	b021      	add	sp, #132	; 0x84
 800502c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800502e:	4b7f      	ldr	r3, [pc, #508]	; (800522c <_vfiprintf_r+0x258>)
 8005030:	429c      	cmp	r4, r3
 8005032:	d101      	bne.n	8005038 <_vfiprintf_r+0x64>
 8005034:	68b4      	ldr	r4, [r6, #8]
 8005036:	e7de      	b.n	8004ff6 <_vfiprintf_r+0x22>
 8005038:	4b7d      	ldr	r3, [pc, #500]	; (8005230 <_vfiprintf_r+0x25c>)
 800503a:	429c      	cmp	r4, r3
 800503c:	d1db      	bne.n	8004ff6 <_vfiprintf_r+0x22>
 800503e:	68f4      	ldr	r4, [r6, #12]
 8005040:	e7d9      	b.n	8004ff6 <_vfiprintf_r+0x22>
 8005042:	89a3      	ldrh	r3, [r4, #12]
 8005044:	059b      	lsls	r3, r3, #22
 8005046:	d4ee      	bmi.n	8005026 <_vfiprintf_r+0x52>
 8005048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800504a:	f7ff ff01 	bl	8004e50 <__retarget_lock_release_recursive>
 800504e:	e7ea      	b.n	8005026 <_vfiprintf_r+0x52>
 8005050:	2300      	movs	r3, #0
 8005052:	ad08      	add	r5, sp, #32
 8005054:	616b      	str	r3, [r5, #20]
 8005056:	3320      	adds	r3, #32
 8005058:	766b      	strb	r3, [r5, #25]
 800505a:	3310      	adds	r3, #16
 800505c:	76ab      	strb	r3, [r5, #26]
 800505e:	9707      	str	r7, [sp, #28]
 8005060:	9f03      	ldr	r7, [sp, #12]
 8005062:	783b      	ldrb	r3, [r7, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <_vfiprintf_r+0x98>
 8005068:	2b25      	cmp	r3, #37	; 0x25
 800506a:	d14e      	bne.n	800510a <_vfiprintf_r+0x136>
 800506c:	9b03      	ldr	r3, [sp, #12]
 800506e:	1afb      	subs	r3, r7, r3
 8005070:	9305      	str	r3, [sp, #20]
 8005072:	9b03      	ldr	r3, [sp, #12]
 8005074:	429f      	cmp	r7, r3
 8005076:	d00d      	beq.n	8005094 <_vfiprintf_r+0xc0>
 8005078:	9b05      	ldr	r3, [sp, #20]
 800507a:	0021      	movs	r1, r4
 800507c:	0030      	movs	r0, r6
 800507e:	9a03      	ldr	r2, [sp, #12]
 8005080:	f7ff ff95 	bl	8004fae <__sfputs_r>
 8005084:	1c43      	adds	r3, r0, #1
 8005086:	d100      	bne.n	800508a <_vfiprintf_r+0xb6>
 8005088:	e0b5      	b.n	80051f6 <_vfiprintf_r+0x222>
 800508a:	696a      	ldr	r2, [r5, #20]
 800508c:	9b05      	ldr	r3, [sp, #20]
 800508e:	4694      	mov	ip, r2
 8005090:	4463      	add	r3, ip
 8005092:	616b      	str	r3, [r5, #20]
 8005094:	783b      	ldrb	r3, [r7, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d100      	bne.n	800509c <_vfiprintf_r+0xc8>
 800509a:	e0ac      	b.n	80051f6 <_vfiprintf_r+0x222>
 800509c:	2201      	movs	r2, #1
 800509e:	1c7b      	adds	r3, r7, #1
 80050a0:	9303      	str	r3, [sp, #12]
 80050a2:	2300      	movs	r3, #0
 80050a4:	4252      	negs	r2, r2
 80050a6:	606a      	str	r2, [r5, #4]
 80050a8:	a904      	add	r1, sp, #16
 80050aa:	3254      	adds	r2, #84	; 0x54
 80050ac:	1852      	adds	r2, r2, r1
 80050ae:	602b      	str	r3, [r5, #0]
 80050b0:	60eb      	str	r3, [r5, #12]
 80050b2:	60ab      	str	r3, [r5, #8]
 80050b4:	7013      	strb	r3, [r2, #0]
 80050b6:	65ab      	str	r3, [r5, #88]	; 0x58
 80050b8:	9b03      	ldr	r3, [sp, #12]
 80050ba:	2205      	movs	r2, #5
 80050bc:	7819      	ldrb	r1, [r3, #0]
 80050be:	485d      	ldr	r0, [pc, #372]	; (8005234 <_vfiprintf_r+0x260>)
 80050c0:	f000 fce2 	bl	8005a88 <memchr>
 80050c4:	9b03      	ldr	r3, [sp, #12]
 80050c6:	1c5f      	adds	r7, r3, #1
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d120      	bne.n	800510e <_vfiprintf_r+0x13a>
 80050cc:	682a      	ldr	r2, [r5, #0]
 80050ce:	06d3      	lsls	r3, r2, #27
 80050d0:	d504      	bpl.n	80050dc <_vfiprintf_r+0x108>
 80050d2:	2353      	movs	r3, #83	; 0x53
 80050d4:	a904      	add	r1, sp, #16
 80050d6:	185b      	adds	r3, r3, r1
 80050d8:	2120      	movs	r1, #32
 80050da:	7019      	strb	r1, [r3, #0]
 80050dc:	0713      	lsls	r3, r2, #28
 80050de:	d504      	bpl.n	80050ea <_vfiprintf_r+0x116>
 80050e0:	2353      	movs	r3, #83	; 0x53
 80050e2:	a904      	add	r1, sp, #16
 80050e4:	185b      	adds	r3, r3, r1
 80050e6:	212b      	movs	r1, #43	; 0x2b
 80050e8:	7019      	strb	r1, [r3, #0]
 80050ea:	9b03      	ldr	r3, [sp, #12]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b2a      	cmp	r3, #42	; 0x2a
 80050f0:	d016      	beq.n	8005120 <_vfiprintf_r+0x14c>
 80050f2:	2100      	movs	r1, #0
 80050f4:	68eb      	ldr	r3, [r5, #12]
 80050f6:	9f03      	ldr	r7, [sp, #12]
 80050f8:	783a      	ldrb	r2, [r7, #0]
 80050fa:	1c78      	adds	r0, r7, #1
 80050fc:	3a30      	subs	r2, #48	; 0x30
 80050fe:	4684      	mov	ip, r0
 8005100:	2a09      	cmp	r2, #9
 8005102:	d94f      	bls.n	80051a4 <_vfiprintf_r+0x1d0>
 8005104:	2900      	cmp	r1, #0
 8005106:	d111      	bne.n	800512c <_vfiprintf_r+0x158>
 8005108:	e017      	b.n	800513a <_vfiprintf_r+0x166>
 800510a:	3701      	adds	r7, #1
 800510c:	e7a9      	b.n	8005062 <_vfiprintf_r+0x8e>
 800510e:	4b49      	ldr	r3, [pc, #292]	; (8005234 <_vfiprintf_r+0x260>)
 8005110:	682a      	ldr	r2, [r5, #0]
 8005112:	1ac0      	subs	r0, r0, r3
 8005114:	2301      	movs	r3, #1
 8005116:	4083      	lsls	r3, r0
 8005118:	4313      	orrs	r3, r2
 800511a:	602b      	str	r3, [r5, #0]
 800511c:	9703      	str	r7, [sp, #12]
 800511e:	e7cb      	b.n	80050b8 <_vfiprintf_r+0xe4>
 8005120:	9b07      	ldr	r3, [sp, #28]
 8005122:	1d19      	adds	r1, r3, #4
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	9107      	str	r1, [sp, #28]
 8005128:	2b00      	cmp	r3, #0
 800512a:	db01      	blt.n	8005130 <_vfiprintf_r+0x15c>
 800512c:	930b      	str	r3, [sp, #44]	; 0x2c
 800512e:	e004      	b.n	800513a <_vfiprintf_r+0x166>
 8005130:	425b      	negs	r3, r3
 8005132:	60eb      	str	r3, [r5, #12]
 8005134:	2302      	movs	r3, #2
 8005136:	4313      	orrs	r3, r2
 8005138:	602b      	str	r3, [r5, #0]
 800513a:	783b      	ldrb	r3, [r7, #0]
 800513c:	2b2e      	cmp	r3, #46	; 0x2e
 800513e:	d10a      	bne.n	8005156 <_vfiprintf_r+0x182>
 8005140:	787b      	ldrb	r3, [r7, #1]
 8005142:	2b2a      	cmp	r3, #42	; 0x2a
 8005144:	d137      	bne.n	80051b6 <_vfiprintf_r+0x1e2>
 8005146:	9b07      	ldr	r3, [sp, #28]
 8005148:	3702      	adds	r7, #2
 800514a:	1d1a      	adds	r2, r3, #4
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	9207      	str	r2, [sp, #28]
 8005150:	2b00      	cmp	r3, #0
 8005152:	db2d      	blt.n	80051b0 <_vfiprintf_r+0x1dc>
 8005154:	9309      	str	r3, [sp, #36]	; 0x24
 8005156:	2203      	movs	r2, #3
 8005158:	7839      	ldrb	r1, [r7, #0]
 800515a:	4837      	ldr	r0, [pc, #220]	; (8005238 <_vfiprintf_r+0x264>)
 800515c:	f000 fc94 	bl	8005a88 <memchr>
 8005160:	2800      	cmp	r0, #0
 8005162:	d007      	beq.n	8005174 <_vfiprintf_r+0x1a0>
 8005164:	4b34      	ldr	r3, [pc, #208]	; (8005238 <_vfiprintf_r+0x264>)
 8005166:	682a      	ldr	r2, [r5, #0]
 8005168:	1ac0      	subs	r0, r0, r3
 800516a:	2340      	movs	r3, #64	; 0x40
 800516c:	4083      	lsls	r3, r0
 800516e:	4313      	orrs	r3, r2
 8005170:	3701      	adds	r7, #1
 8005172:	602b      	str	r3, [r5, #0]
 8005174:	7839      	ldrb	r1, [r7, #0]
 8005176:	1c7b      	adds	r3, r7, #1
 8005178:	2206      	movs	r2, #6
 800517a:	4830      	ldr	r0, [pc, #192]	; (800523c <_vfiprintf_r+0x268>)
 800517c:	9303      	str	r3, [sp, #12]
 800517e:	7629      	strb	r1, [r5, #24]
 8005180:	f000 fc82 	bl	8005a88 <memchr>
 8005184:	2800      	cmp	r0, #0
 8005186:	d045      	beq.n	8005214 <_vfiprintf_r+0x240>
 8005188:	4b2d      	ldr	r3, [pc, #180]	; (8005240 <_vfiprintf_r+0x26c>)
 800518a:	2b00      	cmp	r3, #0
 800518c:	d127      	bne.n	80051de <_vfiprintf_r+0x20a>
 800518e:	2207      	movs	r2, #7
 8005190:	9b07      	ldr	r3, [sp, #28]
 8005192:	3307      	adds	r3, #7
 8005194:	4393      	bics	r3, r2
 8005196:	3308      	adds	r3, #8
 8005198:	9307      	str	r3, [sp, #28]
 800519a:	696b      	ldr	r3, [r5, #20]
 800519c:	9a04      	ldr	r2, [sp, #16]
 800519e:	189b      	adds	r3, r3, r2
 80051a0:	616b      	str	r3, [r5, #20]
 80051a2:	e75d      	b.n	8005060 <_vfiprintf_r+0x8c>
 80051a4:	210a      	movs	r1, #10
 80051a6:	434b      	muls	r3, r1
 80051a8:	4667      	mov	r7, ip
 80051aa:	189b      	adds	r3, r3, r2
 80051ac:	3909      	subs	r1, #9
 80051ae:	e7a3      	b.n	80050f8 <_vfiprintf_r+0x124>
 80051b0:	2301      	movs	r3, #1
 80051b2:	425b      	negs	r3, r3
 80051b4:	e7ce      	b.n	8005154 <_vfiprintf_r+0x180>
 80051b6:	2300      	movs	r3, #0
 80051b8:	001a      	movs	r2, r3
 80051ba:	3701      	adds	r7, #1
 80051bc:	606b      	str	r3, [r5, #4]
 80051be:	7839      	ldrb	r1, [r7, #0]
 80051c0:	1c78      	adds	r0, r7, #1
 80051c2:	3930      	subs	r1, #48	; 0x30
 80051c4:	4684      	mov	ip, r0
 80051c6:	2909      	cmp	r1, #9
 80051c8:	d903      	bls.n	80051d2 <_vfiprintf_r+0x1fe>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0c3      	beq.n	8005156 <_vfiprintf_r+0x182>
 80051ce:	9209      	str	r2, [sp, #36]	; 0x24
 80051d0:	e7c1      	b.n	8005156 <_vfiprintf_r+0x182>
 80051d2:	230a      	movs	r3, #10
 80051d4:	435a      	muls	r2, r3
 80051d6:	4667      	mov	r7, ip
 80051d8:	1852      	adds	r2, r2, r1
 80051da:	3b09      	subs	r3, #9
 80051dc:	e7ef      	b.n	80051be <_vfiprintf_r+0x1ea>
 80051de:	ab07      	add	r3, sp, #28
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	0022      	movs	r2, r4
 80051e4:	0029      	movs	r1, r5
 80051e6:	0030      	movs	r0, r6
 80051e8:	4b16      	ldr	r3, [pc, #88]	; (8005244 <_vfiprintf_r+0x270>)
 80051ea:	e000      	b.n	80051ee <_vfiprintf_r+0x21a>
 80051ec:	bf00      	nop
 80051ee:	9004      	str	r0, [sp, #16]
 80051f0:	9b04      	ldr	r3, [sp, #16]
 80051f2:	3301      	adds	r3, #1
 80051f4:	d1d1      	bne.n	800519a <_vfiprintf_r+0x1c6>
 80051f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051f8:	07db      	lsls	r3, r3, #31
 80051fa:	d405      	bmi.n	8005208 <_vfiprintf_r+0x234>
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	059b      	lsls	r3, r3, #22
 8005200:	d402      	bmi.n	8005208 <_vfiprintf_r+0x234>
 8005202:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005204:	f7ff fe24 	bl	8004e50 <__retarget_lock_release_recursive>
 8005208:	89a3      	ldrh	r3, [r4, #12]
 800520a:	065b      	lsls	r3, r3, #25
 800520c:	d500      	bpl.n	8005210 <_vfiprintf_r+0x23c>
 800520e:	e70a      	b.n	8005026 <_vfiprintf_r+0x52>
 8005210:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005212:	e70a      	b.n	800502a <_vfiprintf_r+0x56>
 8005214:	ab07      	add	r3, sp, #28
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	0022      	movs	r2, r4
 800521a:	0029      	movs	r1, r5
 800521c:	0030      	movs	r0, r6
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <_vfiprintf_r+0x270>)
 8005220:	f000 f882 	bl	8005328 <_printf_i>
 8005224:	e7e3      	b.n	80051ee <_vfiprintf_r+0x21a>
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	08005e4c 	.word	0x08005e4c
 800522c:	08005e6c 	.word	0x08005e6c
 8005230:	08005e2c 	.word	0x08005e2c
 8005234:	08005e8c 	.word	0x08005e8c
 8005238:	08005e92 	.word	0x08005e92
 800523c:	08005e96 	.word	0x08005e96
 8005240:	00000000 	.word	0x00000000
 8005244:	08004faf 	.word	0x08004faf

08005248 <_printf_common>:
 8005248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800524a:	0015      	movs	r5, r2
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	688a      	ldr	r2, [r1, #8]
 8005250:	690b      	ldr	r3, [r1, #16]
 8005252:	000c      	movs	r4, r1
 8005254:	9000      	str	r0, [sp, #0]
 8005256:	4293      	cmp	r3, r2
 8005258:	da00      	bge.n	800525c <_printf_common+0x14>
 800525a:	0013      	movs	r3, r2
 800525c:	0022      	movs	r2, r4
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	3243      	adds	r2, #67	; 0x43
 8005262:	7812      	ldrb	r2, [r2, #0]
 8005264:	2a00      	cmp	r2, #0
 8005266:	d001      	beq.n	800526c <_printf_common+0x24>
 8005268:	3301      	adds	r3, #1
 800526a:	602b      	str	r3, [r5, #0]
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	069b      	lsls	r3, r3, #26
 8005270:	d502      	bpl.n	8005278 <_printf_common+0x30>
 8005272:	682b      	ldr	r3, [r5, #0]
 8005274:	3302      	adds	r3, #2
 8005276:	602b      	str	r3, [r5, #0]
 8005278:	6822      	ldr	r2, [r4, #0]
 800527a:	2306      	movs	r3, #6
 800527c:	0017      	movs	r7, r2
 800527e:	401f      	ands	r7, r3
 8005280:	421a      	tst	r2, r3
 8005282:	d027      	beq.n	80052d4 <_printf_common+0x8c>
 8005284:	0023      	movs	r3, r4
 8005286:	3343      	adds	r3, #67	; 0x43
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	1e5a      	subs	r2, r3, #1
 800528c:	4193      	sbcs	r3, r2
 800528e:	6822      	ldr	r2, [r4, #0]
 8005290:	0692      	lsls	r2, r2, #26
 8005292:	d430      	bmi.n	80052f6 <_printf_common+0xae>
 8005294:	0022      	movs	r2, r4
 8005296:	9901      	ldr	r1, [sp, #4]
 8005298:	9800      	ldr	r0, [sp, #0]
 800529a:	9e08      	ldr	r6, [sp, #32]
 800529c:	3243      	adds	r2, #67	; 0x43
 800529e:	47b0      	blx	r6
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	d025      	beq.n	80052f0 <_printf_common+0xa8>
 80052a4:	2306      	movs	r3, #6
 80052a6:	6820      	ldr	r0, [r4, #0]
 80052a8:	682a      	ldr	r2, [r5, #0]
 80052aa:	68e1      	ldr	r1, [r4, #12]
 80052ac:	2500      	movs	r5, #0
 80052ae:	4003      	ands	r3, r0
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d103      	bne.n	80052bc <_printf_common+0x74>
 80052b4:	1a8d      	subs	r5, r1, r2
 80052b6:	43eb      	mvns	r3, r5
 80052b8:	17db      	asrs	r3, r3, #31
 80052ba:	401d      	ands	r5, r3
 80052bc:	68a3      	ldr	r3, [r4, #8]
 80052be:	6922      	ldr	r2, [r4, #16]
 80052c0:	4293      	cmp	r3, r2
 80052c2:	dd01      	ble.n	80052c8 <_printf_common+0x80>
 80052c4:	1a9b      	subs	r3, r3, r2
 80052c6:	18ed      	adds	r5, r5, r3
 80052c8:	2700      	movs	r7, #0
 80052ca:	42bd      	cmp	r5, r7
 80052cc:	d120      	bne.n	8005310 <_printf_common+0xc8>
 80052ce:	2000      	movs	r0, #0
 80052d0:	e010      	b.n	80052f4 <_printf_common+0xac>
 80052d2:	3701      	adds	r7, #1
 80052d4:	68e3      	ldr	r3, [r4, #12]
 80052d6:	682a      	ldr	r2, [r5, #0]
 80052d8:	1a9b      	subs	r3, r3, r2
 80052da:	42bb      	cmp	r3, r7
 80052dc:	ddd2      	ble.n	8005284 <_printf_common+0x3c>
 80052de:	0022      	movs	r2, r4
 80052e0:	2301      	movs	r3, #1
 80052e2:	9901      	ldr	r1, [sp, #4]
 80052e4:	9800      	ldr	r0, [sp, #0]
 80052e6:	9e08      	ldr	r6, [sp, #32]
 80052e8:	3219      	adds	r2, #25
 80052ea:	47b0      	blx	r6
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d1f0      	bne.n	80052d2 <_printf_common+0x8a>
 80052f0:	2001      	movs	r0, #1
 80052f2:	4240      	negs	r0, r0
 80052f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80052f6:	2030      	movs	r0, #48	; 0x30
 80052f8:	18e1      	adds	r1, r4, r3
 80052fa:	3143      	adds	r1, #67	; 0x43
 80052fc:	7008      	strb	r0, [r1, #0]
 80052fe:	0021      	movs	r1, r4
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	3145      	adds	r1, #69	; 0x45
 8005304:	7809      	ldrb	r1, [r1, #0]
 8005306:	18a2      	adds	r2, r4, r2
 8005308:	3243      	adds	r2, #67	; 0x43
 800530a:	3302      	adds	r3, #2
 800530c:	7011      	strb	r1, [r2, #0]
 800530e:	e7c1      	b.n	8005294 <_printf_common+0x4c>
 8005310:	0022      	movs	r2, r4
 8005312:	2301      	movs	r3, #1
 8005314:	9901      	ldr	r1, [sp, #4]
 8005316:	9800      	ldr	r0, [sp, #0]
 8005318:	9e08      	ldr	r6, [sp, #32]
 800531a:	321a      	adds	r2, #26
 800531c:	47b0      	blx	r6
 800531e:	1c43      	adds	r3, r0, #1
 8005320:	d0e6      	beq.n	80052f0 <_printf_common+0xa8>
 8005322:	3701      	adds	r7, #1
 8005324:	e7d1      	b.n	80052ca <_printf_common+0x82>
	...

08005328 <_printf_i>:
 8005328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800532a:	b08b      	sub	sp, #44	; 0x2c
 800532c:	9206      	str	r2, [sp, #24]
 800532e:	000a      	movs	r2, r1
 8005330:	3243      	adds	r2, #67	; 0x43
 8005332:	9307      	str	r3, [sp, #28]
 8005334:	9005      	str	r0, [sp, #20]
 8005336:	9204      	str	r2, [sp, #16]
 8005338:	7e0a      	ldrb	r2, [r1, #24]
 800533a:	000c      	movs	r4, r1
 800533c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800533e:	2a78      	cmp	r2, #120	; 0x78
 8005340:	d807      	bhi.n	8005352 <_printf_i+0x2a>
 8005342:	2a62      	cmp	r2, #98	; 0x62
 8005344:	d809      	bhi.n	800535a <_printf_i+0x32>
 8005346:	2a00      	cmp	r2, #0
 8005348:	d100      	bne.n	800534c <_printf_i+0x24>
 800534a:	e0c1      	b.n	80054d0 <_printf_i+0x1a8>
 800534c:	2a58      	cmp	r2, #88	; 0x58
 800534e:	d100      	bne.n	8005352 <_printf_i+0x2a>
 8005350:	e08c      	b.n	800546c <_printf_i+0x144>
 8005352:	0026      	movs	r6, r4
 8005354:	3642      	adds	r6, #66	; 0x42
 8005356:	7032      	strb	r2, [r6, #0]
 8005358:	e022      	b.n	80053a0 <_printf_i+0x78>
 800535a:	0010      	movs	r0, r2
 800535c:	3863      	subs	r0, #99	; 0x63
 800535e:	2815      	cmp	r0, #21
 8005360:	d8f7      	bhi.n	8005352 <_printf_i+0x2a>
 8005362:	f7fa fecf 	bl	8000104 <__gnu_thumb1_case_shi>
 8005366:	0016      	.short	0x0016
 8005368:	fff6001f 	.word	0xfff6001f
 800536c:	fff6fff6 	.word	0xfff6fff6
 8005370:	001ffff6 	.word	0x001ffff6
 8005374:	fff6fff6 	.word	0xfff6fff6
 8005378:	fff6fff6 	.word	0xfff6fff6
 800537c:	003600a8 	.word	0x003600a8
 8005380:	fff6009a 	.word	0xfff6009a
 8005384:	00b9fff6 	.word	0x00b9fff6
 8005388:	0036fff6 	.word	0x0036fff6
 800538c:	fff6fff6 	.word	0xfff6fff6
 8005390:	009e      	.short	0x009e
 8005392:	0026      	movs	r6, r4
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	3642      	adds	r6, #66	; 0x42
 8005398:	1d11      	adds	r1, r2, #4
 800539a:	6019      	str	r1, [r3, #0]
 800539c:	6813      	ldr	r3, [r2, #0]
 800539e:	7033      	strb	r3, [r6, #0]
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0a7      	b.n	80054f4 <_printf_i+0x1cc>
 80053a4:	6808      	ldr	r0, [r1, #0]
 80053a6:	6819      	ldr	r1, [r3, #0]
 80053a8:	1d0a      	adds	r2, r1, #4
 80053aa:	0605      	lsls	r5, r0, #24
 80053ac:	d50b      	bpl.n	80053c6 <_printf_i+0x9e>
 80053ae:	680d      	ldr	r5, [r1, #0]
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	2d00      	cmp	r5, #0
 80053b4:	da03      	bge.n	80053be <_printf_i+0x96>
 80053b6:	232d      	movs	r3, #45	; 0x2d
 80053b8:	9a04      	ldr	r2, [sp, #16]
 80053ba:	426d      	negs	r5, r5
 80053bc:	7013      	strb	r3, [r2, #0]
 80053be:	4b61      	ldr	r3, [pc, #388]	; (8005544 <_printf_i+0x21c>)
 80053c0:	270a      	movs	r7, #10
 80053c2:	9303      	str	r3, [sp, #12]
 80053c4:	e01b      	b.n	80053fe <_printf_i+0xd6>
 80053c6:	680d      	ldr	r5, [r1, #0]
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	0641      	lsls	r1, r0, #25
 80053cc:	d5f1      	bpl.n	80053b2 <_printf_i+0x8a>
 80053ce:	b22d      	sxth	r5, r5
 80053d0:	e7ef      	b.n	80053b2 <_printf_i+0x8a>
 80053d2:	680d      	ldr	r5, [r1, #0]
 80053d4:	6819      	ldr	r1, [r3, #0]
 80053d6:	1d08      	adds	r0, r1, #4
 80053d8:	6018      	str	r0, [r3, #0]
 80053da:	062e      	lsls	r6, r5, #24
 80053dc:	d501      	bpl.n	80053e2 <_printf_i+0xba>
 80053de:	680d      	ldr	r5, [r1, #0]
 80053e0:	e003      	b.n	80053ea <_printf_i+0xc2>
 80053e2:	066d      	lsls	r5, r5, #25
 80053e4:	d5fb      	bpl.n	80053de <_printf_i+0xb6>
 80053e6:	680d      	ldr	r5, [r1, #0]
 80053e8:	b2ad      	uxth	r5, r5
 80053ea:	4b56      	ldr	r3, [pc, #344]	; (8005544 <_printf_i+0x21c>)
 80053ec:	2708      	movs	r7, #8
 80053ee:	9303      	str	r3, [sp, #12]
 80053f0:	2a6f      	cmp	r2, #111	; 0x6f
 80053f2:	d000      	beq.n	80053f6 <_printf_i+0xce>
 80053f4:	3702      	adds	r7, #2
 80053f6:	0023      	movs	r3, r4
 80053f8:	2200      	movs	r2, #0
 80053fa:	3343      	adds	r3, #67	; 0x43
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	6863      	ldr	r3, [r4, #4]
 8005400:	60a3      	str	r3, [r4, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	db03      	blt.n	800540e <_printf_i+0xe6>
 8005406:	2204      	movs	r2, #4
 8005408:	6821      	ldr	r1, [r4, #0]
 800540a:	4391      	bics	r1, r2
 800540c:	6021      	str	r1, [r4, #0]
 800540e:	2d00      	cmp	r5, #0
 8005410:	d102      	bne.n	8005418 <_printf_i+0xf0>
 8005412:	9e04      	ldr	r6, [sp, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00c      	beq.n	8005432 <_printf_i+0x10a>
 8005418:	9e04      	ldr	r6, [sp, #16]
 800541a:	0028      	movs	r0, r5
 800541c:	0039      	movs	r1, r7
 800541e:	f7fa ff01 	bl	8000224 <__aeabi_uidivmod>
 8005422:	9b03      	ldr	r3, [sp, #12]
 8005424:	3e01      	subs	r6, #1
 8005426:	5c5b      	ldrb	r3, [r3, r1]
 8005428:	7033      	strb	r3, [r6, #0]
 800542a:	002b      	movs	r3, r5
 800542c:	0005      	movs	r5, r0
 800542e:	429f      	cmp	r7, r3
 8005430:	d9f3      	bls.n	800541a <_printf_i+0xf2>
 8005432:	2f08      	cmp	r7, #8
 8005434:	d109      	bne.n	800544a <_printf_i+0x122>
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	07db      	lsls	r3, r3, #31
 800543a:	d506      	bpl.n	800544a <_printf_i+0x122>
 800543c:	6863      	ldr	r3, [r4, #4]
 800543e:	6922      	ldr	r2, [r4, #16]
 8005440:	4293      	cmp	r3, r2
 8005442:	dc02      	bgt.n	800544a <_printf_i+0x122>
 8005444:	2330      	movs	r3, #48	; 0x30
 8005446:	3e01      	subs	r6, #1
 8005448:	7033      	strb	r3, [r6, #0]
 800544a:	9b04      	ldr	r3, [sp, #16]
 800544c:	1b9b      	subs	r3, r3, r6
 800544e:	6123      	str	r3, [r4, #16]
 8005450:	9b07      	ldr	r3, [sp, #28]
 8005452:	0021      	movs	r1, r4
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	9805      	ldr	r0, [sp, #20]
 8005458:	9b06      	ldr	r3, [sp, #24]
 800545a:	aa09      	add	r2, sp, #36	; 0x24
 800545c:	f7ff fef4 	bl	8005248 <_printf_common>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d14c      	bne.n	80054fe <_printf_i+0x1d6>
 8005464:	2001      	movs	r0, #1
 8005466:	4240      	negs	r0, r0
 8005468:	b00b      	add	sp, #44	; 0x2c
 800546a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800546c:	3145      	adds	r1, #69	; 0x45
 800546e:	700a      	strb	r2, [r1, #0]
 8005470:	4a34      	ldr	r2, [pc, #208]	; (8005544 <_printf_i+0x21c>)
 8005472:	9203      	str	r2, [sp, #12]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	6821      	ldr	r1, [r4, #0]
 8005478:	ca20      	ldmia	r2!, {r5}
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	0608      	lsls	r0, r1, #24
 800547e:	d516      	bpl.n	80054ae <_printf_i+0x186>
 8005480:	07cb      	lsls	r3, r1, #31
 8005482:	d502      	bpl.n	800548a <_printf_i+0x162>
 8005484:	2320      	movs	r3, #32
 8005486:	4319      	orrs	r1, r3
 8005488:	6021      	str	r1, [r4, #0]
 800548a:	2710      	movs	r7, #16
 800548c:	2d00      	cmp	r5, #0
 800548e:	d1b2      	bne.n	80053f6 <_printf_i+0xce>
 8005490:	2320      	movs	r3, #32
 8005492:	6822      	ldr	r2, [r4, #0]
 8005494:	439a      	bics	r2, r3
 8005496:	6022      	str	r2, [r4, #0]
 8005498:	e7ad      	b.n	80053f6 <_printf_i+0xce>
 800549a:	2220      	movs	r2, #32
 800549c:	6809      	ldr	r1, [r1, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	6022      	str	r2, [r4, #0]
 80054a2:	0022      	movs	r2, r4
 80054a4:	2178      	movs	r1, #120	; 0x78
 80054a6:	3245      	adds	r2, #69	; 0x45
 80054a8:	7011      	strb	r1, [r2, #0]
 80054aa:	4a27      	ldr	r2, [pc, #156]	; (8005548 <_printf_i+0x220>)
 80054ac:	e7e1      	b.n	8005472 <_printf_i+0x14a>
 80054ae:	0648      	lsls	r0, r1, #25
 80054b0:	d5e6      	bpl.n	8005480 <_printf_i+0x158>
 80054b2:	b2ad      	uxth	r5, r5
 80054b4:	e7e4      	b.n	8005480 <_printf_i+0x158>
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	680d      	ldr	r5, [r1, #0]
 80054ba:	1d10      	adds	r0, r2, #4
 80054bc:	6949      	ldr	r1, [r1, #20]
 80054be:	6018      	str	r0, [r3, #0]
 80054c0:	6813      	ldr	r3, [r2, #0]
 80054c2:	062e      	lsls	r6, r5, #24
 80054c4:	d501      	bpl.n	80054ca <_printf_i+0x1a2>
 80054c6:	6019      	str	r1, [r3, #0]
 80054c8:	e002      	b.n	80054d0 <_printf_i+0x1a8>
 80054ca:	066d      	lsls	r5, r5, #25
 80054cc:	d5fb      	bpl.n	80054c6 <_printf_i+0x19e>
 80054ce:	8019      	strh	r1, [r3, #0]
 80054d0:	2300      	movs	r3, #0
 80054d2:	9e04      	ldr	r6, [sp, #16]
 80054d4:	6123      	str	r3, [r4, #16]
 80054d6:	e7bb      	b.n	8005450 <_printf_i+0x128>
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	1d11      	adds	r1, r2, #4
 80054dc:	6019      	str	r1, [r3, #0]
 80054de:	6816      	ldr	r6, [r2, #0]
 80054e0:	2100      	movs	r1, #0
 80054e2:	0030      	movs	r0, r6
 80054e4:	6862      	ldr	r2, [r4, #4]
 80054e6:	f000 facf 	bl	8005a88 <memchr>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	d001      	beq.n	80054f2 <_printf_i+0x1ca>
 80054ee:	1b80      	subs	r0, r0, r6
 80054f0:	6060      	str	r0, [r4, #4]
 80054f2:	6863      	ldr	r3, [r4, #4]
 80054f4:	6123      	str	r3, [r4, #16]
 80054f6:	2300      	movs	r3, #0
 80054f8:	9a04      	ldr	r2, [sp, #16]
 80054fa:	7013      	strb	r3, [r2, #0]
 80054fc:	e7a8      	b.n	8005450 <_printf_i+0x128>
 80054fe:	6923      	ldr	r3, [r4, #16]
 8005500:	0032      	movs	r2, r6
 8005502:	9906      	ldr	r1, [sp, #24]
 8005504:	9805      	ldr	r0, [sp, #20]
 8005506:	9d07      	ldr	r5, [sp, #28]
 8005508:	47a8      	blx	r5
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	d0aa      	beq.n	8005464 <_printf_i+0x13c>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	079b      	lsls	r3, r3, #30
 8005512:	d415      	bmi.n	8005540 <_printf_i+0x218>
 8005514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005516:	68e0      	ldr	r0, [r4, #12]
 8005518:	4298      	cmp	r0, r3
 800551a:	daa5      	bge.n	8005468 <_printf_i+0x140>
 800551c:	0018      	movs	r0, r3
 800551e:	e7a3      	b.n	8005468 <_printf_i+0x140>
 8005520:	0022      	movs	r2, r4
 8005522:	2301      	movs	r3, #1
 8005524:	9906      	ldr	r1, [sp, #24]
 8005526:	9805      	ldr	r0, [sp, #20]
 8005528:	9e07      	ldr	r6, [sp, #28]
 800552a:	3219      	adds	r2, #25
 800552c:	47b0      	blx	r6
 800552e:	1c43      	adds	r3, r0, #1
 8005530:	d098      	beq.n	8005464 <_printf_i+0x13c>
 8005532:	3501      	adds	r5, #1
 8005534:	68e3      	ldr	r3, [r4, #12]
 8005536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	42ab      	cmp	r3, r5
 800553c:	dcf0      	bgt.n	8005520 <_printf_i+0x1f8>
 800553e:	e7e9      	b.n	8005514 <_printf_i+0x1ec>
 8005540:	2500      	movs	r5, #0
 8005542:	e7f7      	b.n	8005534 <_printf_i+0x20c>
 8005544:	08005e9d 	.word	0x08005e9d
 8005548:	08005eae 	.word	0x08005eae

0800554c <_sbrk_r>:
 800554c:	2300      	movs	r3, #0
 800554e:	b570      	push	{r4, r5, r6, lr}
 8005550:	4d06      	ldr	r5, [pc, #24]	; (800556c <_sbrk_r+0x20>)
 8005552:	0004      	movs	r4, r0
 8005554:	0008      	movs	r0, r1
 8005556:	602b      	str	r3, [r5, #0]
 8005558:	f7fb fce0 	bl	8000f1c <_sbrk>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d103      	bne.n	8005568 <_sbrk_r+0x1c>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d000      	beq.n	8005568 <_sbrk_r+0x1c>
 8005566:	6023      	str	r3, [r4, #0]
 8005568:	bd70      	pop	{r4, r5, r6, pc}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	200001f8 	.word	0x200001f8

08005570 <__sread>:
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	000c      	movs	r4, r1
 8005574:	250e      	movs	r5, #14
 8005576:	5f49      	ldrsh	r1, [r1, r5]
 8005578:	f000 faec 	bl	8005b54 <_read_r>
 800557c:	2800      	cmp	r0, #0
 800557e:	db03      	blt.n	8005588 <__sread+0x18>
 8005580:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005582:	181b      	adds	r3, r3, r0
 8005584:	6563      	str	r3, [r4, #84]	; 0x54
 8005586:	bd70      	pop	{r4, r5, r6, pc}
 8005588:	89a3      	ldrh	r3, [r4, #12]
 800558a:	4a02      	ldr	r2, [pc, #8]	; (8005594 <__sread+0x24>)
 800558c:	4013      	ands	r3, r2
 800558e:	81a3      	strh	r3, [r4, #12]
 8005590:	e7f9      	b.n	8005586 <__sread+0x16>
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	ffffefff 	.word	0xffffefff

08005598 <__swrite>:
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559a:	001f      	movs	r7, r3
 800559c:	898b      	ldrh	r3, [r1, #12]
 800559e:	0005      	movs	r5, r0
 80055a0:	000c      	movs	r4, r1
 80055a2:	0016      	movs	r6, r2
 80055a4:	05db      	lsls	r3, r3, #23
 80055a6:	d505      	bpl.n	80055b4 <__swrite+0x1c>
 80055a8:	230e      	movs	r3, #14
 80055aa:	5ec9      	ldrsh	r1, [r1, r3]
 80055ac:	2200      	movs	r2, #0
 80055ae:	2302      	movs	r3, #2
 80055b0:	f000 f9ea 	bl	8005988 <_lseek_r>
 80055b4:	89a3      	ldrh	r3, [r4, #12]
 80055b6:	4a05      	ldr	r2, [pc, #20]	; (80055cc <__swrite+0x34>)
 80055b8:	0028      	movs	r0, r5
 80055ba:	4013      	ands	r3, r2
 80055bc:	81a3      	strh	r3, [r4, #12]
 80055be:	0032      	movs	r2, r6
 80055c0:	230e      	movs	r3, #14
 80055c2:	5ee1      	ldrsh	r1, [r4, r3]
 80055c4:	003b      	movs	r3, r7
 80055c6:	f000 f875 	bl	80056b4 <_write_r>
 80055ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055cc:	ffffefff 	.word	0xffffefff

080055d0 <__sseek>:
 80055d0:	b570      	push	{r4, r5, r6, lr}
 80055d2:	000c      	movs	r4, r1
 80055d4:	250e      	movs	r5, #14
 80055d6:	5f49      	ldrsh	r1, [r1, r5]
 80055d8:	f000 f9d6 	bl	8005988 <_lseek_r>
 80055dc:	89a3      	ldrh	r3, [r4, #12]
 80055de:	1c42      	adds	r2, r0, #1
 80055e0:	d103      	bne.n	80055ea <__sseek+0x1a>
 80055e2:	4a05      	ldr	r2, [pc, #20]	; (80055f8 <__sseek+0x28>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	81a3      	strh	r3, [r4, #12]
 80055e8:	bd70      	pop	{r4, r5, r6, pc}
 80055ea:	2280      	movs	r2, #128	; 0x80
 80055ec:	0152      	lsls	r2, r2, #5
 80055ee:	4313      	orrs	r3, r2
 80055f0:	81a3      	strh	r3, [r4, #12]
 80055f2:	6560      	str	r0, [r4, #84]	; 0x54
 80055f4:	e7f8      	b.n	80055e8 <__sseek+0x18>
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	ffffefff 	.word	0xffffefff

080055fc <__sclose>:
 80055fc:	b510      	push	{r4, lr}
 80055fe:	230e      	movs	r3, #14
 8005600:	5ec9      	ldrsh	r1, [r1, r3]
 8005602:	f000 f8e3 	bl	80057cc <_close_r>
 8005606:	bd10      	pop	{r4, pc}

08005608 <__swbuf_r>:
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560a:	0005      	movs	r5, r0
 800560c:	000e      	movs	r6, r1
 800560e:	0014      	movs	r4, r2
 8005610:	2800      	cmp	r0, #0
 8005612:	d004      	beq.n	800561e <__swbuf_r+0x16>
 8005614:	6983      	ldr	r3, [r0, #24]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <__swbuf_r+0x16>
 800561a:	f7ff fb77 	bl	8004d0c <__sinit>
 800561e:	4b22      	ldr	r3, [pc, #136]	; (80056a8 <__swbuf_r+0xa0>)
 8005620:	429c      	cmp	r4, r3
 8005622:	d12e      	bne.n	8005682 <__swbuf_r+0x7a>
 8005624:	686c      	ldr	r4, [r5, #4]
 8005626:	69a3      	ldr	r3, [r4, #24]
 8005628:	60a3      	str	r3, [r4, #8]
 800562a:	89a3      	ldrh	r3, [r4, #12]
 800562c:	071b      	lsls	r3, r3, #28
 800562e:	d532      	bpl.n	8005696 <__swbuf_r+0x8e>
 8005630:	6923      	ldr	r3, [r4, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d02f      	beq.n	8005696 <__swbuf_r+0x8e>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	6922      	ldr	r2, [r4, #16]
 800563a:	b2f7      	uxtb	r7, r6
 800563c:	1a98      	subs	r0, r3, r2
 800563e:	6963      	ldr	r3, [r4, #20]
 8005640:	b2f6      	uxtb	r6, r6
 8005642:	4283      	cmp	r3, r0
 8005644:	dc05      	bgt.n	8005652 <__swbuf_r+0x4a>
 8005646:	0021      	movs	r1, r4
 8005648:	0028      	movs	r0, r5
 800564a:	f000 f95d 	bl	8005908 <_fflush_r>
 800564e:	2800      	cmp	r0, #0
 8005650:	d127      	bne.n	80056a2 <__swbuf_r+0x9a>
 8005652:	68a3      	ldr	r3, [r4, #8]
 8005654:	3001      	adds	r0, #1
 8005656:	3b01      	subs	r3, #1
 8005658:	60a3      	str	r3, [r4, #8]
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	6022      	str	r2, [r4, #0]
 8005660:	701f      	strb	r7, [r3, #0]
 8005662:	6963      	ldr	r3, [r4, #20]
 8005664:	4283      	cmp	r3, r0
 8005666:	d004      	beq.n	8005672 <__swbuf_r+0x6a>
 8005668:	89a3      	ldrh	r3, [r4, #12]
 800566a:	07db      	lsls	r3, r3, #31
 800566c:	d507      	bpl.n	800567e <__swbuf_r+0x76>
 800566e:	2e0a      	cmp	r6, #10
 8005670:	d105      	bne.n	800567e <__swbuf_r+0x76>
 8005672:	0021      	movs	r1, r4
 8005674:	0028      	movs	r0, r5
 8005676:	f000 f947 	bl	8005908 <_fflush_r>
 800567a:	2800      	cmp	r0, #0
 800567c:	d111      	bne.n	80056a2 <__swbuf_r+0x9a>
 800567e:	0030      	movs	r0, r6
 8005680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005682:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <__swbuf_r+0xa4>)
 8005684:	429c      	cmp	r4, r3
 8005686:	d101      	bne.n	800568c <__swbuf_r+0x84>
 8005688:	68ac      	ldr	r4, [r5, #8]
 800568a:	e7cc      	b.n	8005626 <__swbuf_r+0x1e>
 800568c:	4b08      	ldr	r3, [pc, #32]	; (80056b0 <__swbuf_r+0xa8>)
 800568e:	429c      	cmp	r4, r3
 8005690:	d1c9      	bne.n	8005626 <__swbuf_r+0x1e>
 8005692:	68ec      	ldr	r4, [r5, #12]
 8005694:	e7c7      	b.n	8005626 <__swbuf_r+0x1e>
 8005696:	0021      	movs	r1, r4
 8005698:	0028      	movs	r0, r5
 800569a:	f000 f81f 	bl	80056dc <__swsetup_r>
 800569e:	2800      	cmp	r0, #0
 80056a0:	d0c9      	beq.n	8005636 <__swbuf_r+0x2e>
 80056a2:	2601      	movs	r6, #1
 80056a4:	4276      	negs	r6, r6
 80056a6:	e7ea      	b.n	800567e <__swbuf_r+0x76>
 80056a8:	08005e4c 	.word	0x08005e4c
 80056ac:	08005e6c 	.word	0x08005e6c
 80056b0:	08005e2c 	.word	0x08005e2c

080056b4 <_write_r>:
 80056b4:	b570      	push	{r4, r5, r6, lr}
 80056b6:	0004      	movs	r4, r0
 80056b8:	0008      	movs	r0, r1
 80056ba:	0011      	movs	r1, r2
 80056bc:	001a      	movs	r2, r3
 80056be:	2300      	movs	r3, #0
 80056c0:	4d05      	ldr	r5, [pc, #20]	; (80056d8 <_write_r+0x24>)
 80056c2:	602b      	str	r3, [r5, #0]
 80056c4:	f7fb fbe1 	bl	8000e8a <_write>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	d103      	bne.n	80056d4 <_write_r+0x20>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d000      	beq.n	80056d4 <_write_r+0x20>
 80056d2:	6023      	str	r3, [r4, #0]
 80056d4:	bd70      	pop	{r4, r5, r6, pc}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	200001f8 	.word	0x200001f8

080056dc <__swsetup_r>:
 80056dc:	4b37      	ldr	r3, [pc, #220]	; (80057bc <__swsetup_r+0xe0>)
 80056de:	b570      	push	{r4, r5, r6, lr}
 80056e0:	681d      	ldr	r5, [r3, #0]
 80056e2:	0006      	movs	r6, r0
 80056e4:	000c      	movs	r4, r1
 80056e6:	2d00      	cmp	r5, #0
 80056e8:	d005      	beq.n	80056f6 <__swsetup_r+0x1a>
 80056ea:	69ab      	ldr	r3, [r5, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d102      	bne.n	80056f6 <__swsetup_r+0x1a>
 80056f0:	0028      	movs	r0, r5
 80056f2:	f7ff fb0b 	bl	8004d0c <__sinit>
 80056f6:	4b32      	ldr	r3, [pc, #200]	; (80057c0 <__swsetup_r+0xe4>)
 80056f8:	429c      	cmp	r4, r3
 80056fa:	d10f      	bne.n	800571c <__swsetup_r+0x40>
 80056fc:	686c      	ldr	r4, [r5, #4]
 80056fe:	230c      	movs	r3, #12
 8005700:	5ee2      	ldrsh	r2, [r4, r3]
 8005702:	b293      	uxth	r3, r2
 8005704:	0711      	lsls	r1, r2, #28
 8005706:	d42d      	bmi.n	8005764 <__swsetup_r+0x88>
 8005708:	06d9      	lsls	r1, r3, #27
 800570a:	d411      	bmi.n	8005730 <__swsetup_r+0x54>
 800570c:	2309      	movs	r3, #9
 800570e:	2001      	movs	r0, #1
 8005710:	6033      	str	r3, [r6, #0]
 8005712:	3337      	adds	r3, #55	; 0x37
 8005714:	4313      	orrs	r3, r2
 8005716:	81a3      	strh	r3, [r4, #12]
 8005718:	4240      	negs	r0, r0
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	4b29      	ldr	r3, [pc, #164]	; (80057c4 <__swsetup_r+0xe8>)
 800571e:	429c      	cmp	r4, r3
 8005720:	d101      	bne.n	8005726 <__swsetup_r+0x4a>
 8005722:	68ac      	ldr	r4, [r5, #8]
 8005724:	e7eb      	b.n	80056fe <__swsetup_r+0x22>
 8005726:	4b28      	ldr	r3, [pc, #160]	; (80057c8 <__swsetup_r+0xec>)
 8005728:	429c      	cmp	r4, r3
 800572a:	d1e8      	bne.n	80056fe <__swsetup_r+0x22>
 800572c:	68ec      	ldr	r4, [r5, #12]
 800572e:	e7e6      	b.n	80056fe <__swsetup_r+0x22>
 8005730:	075b      	lsls	r3, r3, #29
 8005732:	d513      	bpl.n	800575c <__swsetup_r+0x80>
 8005734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005736:	2900      	cmp	r1, #0
 8005738:	d008      	beq.n	800574c <__swsetup_r+0x70>
 800573a:	0023      	movs	r3, r4
 800573c:	3344      	adds	r3, #68	; 0x44
 800573e:	4299      	cmp	r1, r3
 8005740:	d002      	beq.n	8005748 <__swsetup_r+0x6c>
 8005742:	0030      	movs	r0, r6
 8005744:	f000 f9bc 	bl	8005ac0 <_free_r>
 8005748:	2300      	movs	r3, #0
 800574a:	6363      	str	r3, [r4, #52]	; 0x34
 800574c:	2224      	movs	r2, #36	; 0x24
 800574e:	89a3      	ldrh	r3, [r4, #12]
 8005750:	4393      	bics	r3, r2
 8005752:	81a3      	strh	r3, [r4, #12]
 8005754:	2300      	movs	r3, #0
 8005756:	6063      	str	r3, [r4, #4]
 8005758:	6923      	ldr	r3, [r4, #16]
 800575a:	6023      	str	r3, [r4, #0]
 800575c:	2308      	movs	r3, #8
 800575e:	89a2      	ldrh	r2, [r4, #12]
 8005760:	4313      	orrs	r3, r2
 8005762:	81a3      	strh	r3, [r4, #12]
 8005764:	6923      	ldr	r3, [r4, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10b      	bne.n	8005782 <__swsetup_r+0xa6>
 800576a:	21a0      	movs	r1, #160	; 0xa0
 800576c:	2280      	movs	r2, #128	; 0x80
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	0089      	lsls	r1, r1, #2
 8005772:	0092      	lsls	r2, r2, #2
 8005774:	400b      	ands	r3, r1
 8005776:	4293      	cmp	r3, r2
 8005778:	d003      	beq.n	8005782 <__swsetup_r+0xa6>
 800577a:	0021      	movs	r1, r4
 800577c:	0030      	movs	r0, r6
 800577e:	f000 f93f 	bl	8005a00 <__smakebuf_r>
 8005782:	220c      	movs	r2, #12
 8005784:	5ea3      	ldrsh	r3, [r4, r2]
 8005786:	2001      	movs	r0, #1
 8005788:	001a      	movs	r2, r3
 800578a:	b299      	uxth	r1, r3
 800578c:	4002      	ands	r2, r0
 800578e:	4203      	tst	r3, r0
 8005790:	d00f      	beq.n	80057b2 <__swsetup_r+0xd6>
 8005792:	2200      	movs	r2, #0
 8005794:	60a2      	str	r2, [r4, #8]
 8005796:	6962      	ldr	r2, [r4, #20]
 8005798:	4252      	negs	r2, r2
 800579a:	61a2      	str	r2, [r4, #24]
 800579c:	2000      	movs	r0, #0
 800579e:	6922      	ldr	r2, [r4, #16]
 80057a0:	4282      	cmp	r2, r0
 80057a2:	d1ba      	bne.n	800571a <__swsetup_r+0x3e>
 80057a4:	060a      	lsls	r2, r1, #24
 80057a6:	d5b8      	bpl.n	800571a <__swsetup_r+0x3e>
 80057a8:	2240      	movs	r2, #64	; 0x40
 80057aa:	4313      	orrs	r3, r2
 80057ac:	81a3      	strh	r3, [r4, #12]
 80057ae:	3801      	subs	r0, #1
 80057b0:	e7b3      	b.n	800571a <__swsetup_r+0x3e>
 80057b2:	0788      	lsls	r0, r1, #30
 80057b4:	d400      	bmi.n	80057b8 <__swsetup_r+0xdc>
 80057b6:	6962      	ldr	r2, [r4, #20]
 80057b8:	60a2      	str	r2, [r4, #8]
 80057ba:	e7ef      	b.n	800579c <__swsetup_r+0xc0>
 80057bc:	20000038 	.word	0x20000038
 80057c0:	08005e4c 	.word	0x08005e4c
 80057c4:	08005e6c 	.word	0x08005e6c
 80057c8:	08005e2c 	.word	0x08005e2c

080057cc <_close_r>:
 80057cc:	2300      	movs	r3, #0
 80057ce:	b570      	push	{r4, r5, r6, lr}
 80057d0:	4d06      	ldr	r5, [pc, #24]	; (80057ec <_close_r+0x20>)
 80057d2:	0004      	movs	r4, r0
 80057d4:	0008      	movs	r0, r1
 80057d6:	602b      	str	r3, [r5, #0]
 80057d8:	f7fb fb73 	bl	8000ec2 <_close>
 80057dc:	1c43      	adds	r3, r0, #1
 80057de:	d103      	bne.n	80057e8 <_close_r+0x1c>
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d000      	beq.n	80057e8 <_close_r+0x1c>
 80057e6:	6023      	str	r3, [r4, #0]
 80057e8:	bd70      	pop	{r4, r5, r6, pc}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	200001f8 	.word	0x200001f8

080057f0 <__sflush_r>:
 80057f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057f2:	898b      	ldrh	r3, [r1, #12]
 80057f4:	0005      	movs	r5, r0
 80057f6:	000c      	movs	r4, r1
 80057f8:	071a      	lsls	r2, r3, #28
 80057fa:	d45f      	bmi.n	80058bc <__sflush_r+0xcc>
 80057fc:	684a      	ldr	r2, [r1, #4]
 80057fe:	2a00      	cmp	r2, #0
 8005800:	dc04      	bgt.n	800580c <__sflush_r+0x1c>
 8005802:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005804:	2a00      	cmp	r2, #0
 8005806:	dc01      	bgt.n	800580c <__sflush_r+0x1c>
 8005808:	2000      	movs	r0, #0
 800580a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800580c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800580e:	2f00      	cmp	r7, #0
 8005810:	d0fa      	beq.n	8005808 <__sflush_r+0x18>
 8005812:	2200      	movs	r2, #0
 8005814:	2180      	movs	r1, #128	; 0x80
 8005816:	682e      	ldr	r6, [r5, #0]
 8005818:	602a      	str	r2, [r5, #0]
 800581a:	001a      	movs	r2, r3
 800581c:	0149      	lsls	r1, r1, #5
 800581e:	400a      	ands	r2, r1
 8005820:	420b      	tst	r3, r1
 8005822:	d034      	beq.n	800588e <__sflush_r+0x9e>
 8005824:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	075b      	lsls	r3, r3, #29
 800582a:	d506      	bpl.n	800583a <__sflush_r+0x4a>
 800582c:	6863      	ldr	r3, [r4, #4]
 800582e:	1ac0      	subs	r0, r0, r3
 8005830:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <__sflush_r+0x4a>
 8005836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005838:	1ac0      	subs	r0, r0, r3
 800583a:	0002      	movs	r2, r0
 800583c:	6a21      	ldr	r1, [r4, #32]
 800583e:	2300      	movs	r3, #0
 8005840:	0028      	movs	r0, r5
 8005842:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005844:	47b8      	blx	r7
 8005846:	89a1      	ldrh	r1, [r4, #12]
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	d106      	bne.n	800585a <__sflush_r+0x6a>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	2b1d      	cmp	r3, #29
 8005850:	d831      	bhi.n	80058b6 <__sflush_r+0xc6>
 8005852:	4a2c      	ldr	r2, [pc, #176]	; (8005904 <__sflush_r+0x114>)
 8005854:	40da      	lsrs	r2, r3
 8005856:	07d3      	lsls	r3, r2, #31
 8005858:	d52d      	bpl.n	80058b6 <__sflush_r+0xc6>
 800585a:	2300      	movs	r3, #0
 800585c:	6063      	str	r3, [r4, #4]
 800585e:	6923      	ldr	r3, [r4, #16]
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	04cb      	lsls	r3, r1, #19
 8005864:	d505      	bpl.n	8005872 <__sflush_r+0x82>
 8005866:	1c43      	adds	r3, r0, #1
 8005868:	d102      	bne.n	8005870 <__sflush_r+0x80>
 800586a:	682b      	ldr	r3, [r5, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d100      	bne.n	8005872 <__sflush_r+0x82>
 8005870:	6560      	str	r0, [r4, #84]	; 0x54
 8005872:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005874:	602e      	str	r6, [r5, #0]
 8005876:	2900      	cmp	r1, #0
 8005878:	d0c6      	beq.n	8005808 <__sflush_r+0x18>
 800587a:	0023      	movs	r3, r4
 800587c:	3344      	adds	r3, #68	; 0x44
 800587e:	4299      	cmp	r1, r3
 8005880:	d002      	beq.n	8005888 <__sflush_r+0x98>
 8005882:	0028      	movs	r0, r5
 8005884:	f000 f91c 	bl	8005ac0 <_free_r>
 8005888:	2000      	movs	r0, #0
 800588a:	6360      	str	r0, [r4, #52]	; 0x34
 800588c:	e7bd      	b.n	800580a <__sflush_r+0x1a>
 800588e:	2301      	movs	r3, #1
 8005890:	0028      	movs	r0, r5
 8005892:	6a21      	ldr	r1, [r4, #32]
 8005894:	47b8      	blx	r7
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	d1c5      	bne.n	8005826 <__sflush_r+0x36>
 800589a:	682b      	ldr	r3, [r5, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0c2      	beq.n	8005826 <__sflush_r+0x36>
 80058a0:	2b1d      	cmp	r3, #29
 80058a2:	d001      	beq.n	80058a8 <__sflush_r+0xb8>
 80058a4:	2b16      	cmp	r3, #22
 80058a6:	d101      	bne.n	80058ac <__sflush_r+0xbc>
 80058a8:	602e      	str	r6, [r5, #0]
 80058aa:	e7ad      	b.n	8005808 <__sflush_r+0x18>
 80058ac:	2340      	movs	r3, #64	; 0x40
 80058ae:	89a2      	ldrh	r2, [r4, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	81a3      	strh	r3, [r4, #12]
 80058b4:	e7a9      	b.n	800580a <__sflush_r+0x1a>
 80058b6:	2340      	movs	r3, #64	; 0x40
 80058b8:	430b      	orrs	r3, r1
 80058ba:	e7fa      	b.n	80058b2 <__sflush_r+0xc2>
 80058bc:	690f      	ldr	r7, [r1, #16]
 80058be:	2f00      	cmp	r7, #0
 80058c0:	d0a2      	beq.n	8005808 <__sflush_r+0x18>
 80058c2:	680a      	ldr	r2, [r1, #0]
 80058c4:	600f      	str	r7, [r1, #0]
 80058c6:	1bd2      	subs	r2, r2, r7
 80058c8:	9201      	str	r2, [sp, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	079b      	lsls	r3, r3, #30
 80058ce:	d100      	bne.n	80058d2 <__sflush_r+0xe2>
 80058d0:	694a      	ldr	r2, [r1, #20]
 80058d2:	60a2      	str	r2, [r4, #8]
 80058d4:	9b01      	ldr	r3, [sp, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	dc00      	bgt.n	80058dc <__sflush_r+0xec>
 80058da:	e795      	b.n	8005808 <__sflush_r+0x18>
 80058dc:	003a      	movs	r2, r7
 80058de:	0028      	movs	r0, r5
 80058e0:	9b01      	ldr	r3, [sp, #4]
 80058e2:	6a21      	ldr	r1, [r4, #32]
 80058e4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058e6:	47b0      	blx	r6
 80058e8:	2800      	cmp	r0, #0
 80058ea:	dc06      	bgt.n	80058fa <__sflush_r+0x10a>
 80058ec:	2340      	movs	r3, #64	; 0x40
 80058ee:	2001      	movs	r0, #1
 80058f0:	89a2      	ldrh	r2, [r4, #12]
 80058f2:	4240      	negs	r0, r0
 80058f4:	4313      	orrs	r3, r2
 80058f6:	81a3      	strh	r3, [r4, #12]
 80058f8:	e787      	b.n	800580a <__sflush_r+0x1a>
 80058fa:	9b01      	ldr	r3, [sp, #4]
 80058fc:	183f      	adds	r7, r7, r0
 80058fe:	1a1b      	subs	r3, r3, r0
 8005900:	9301      	str	r3, [sp, #4]
 8005902:	e7e7      	b.n	80058d4 <__sflush_r+0xe4>
 8005904:	20400001 	.word	0x20400001

08005908 <_fflush_r>:
 8005908:	690b      	ldr	r3, [r1, #16]
 800590a:	b570      	push	{r4, r5, r6, lr}
 800590c:	0005      	movs	r5, r0
 800590e:	000c      	movs	r4, r1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d102      	bne.n	800591a <_fflush_r+0x12>
 8005914:	2500      	movs	r5, #0
 8005916:	0028      	movs	r0, r5
 8005918:	bd70      	pop	{r4, r5, r6, pc}
 800591a:	2800      	cmp	r0, #0
 800591c:	d004      	beq.n	8005928 <_fflush_r+0x20>
 800591e:	6983      	ldr	r3, [r0, #24]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <_fflush_r+0x20>
 8005924:	f7ff f9f2 	bl	8004d0c <__sinit>
 8005928:	4b14      	ldr	r3, [pc, #80]	; (800597c <_fflush_r+0x74>)
 800592a:	429c      	cmp	r4, r3
 800592c:	d11b      	bne.n	8005966 <_fflush_r+0x5e>
 800592e:	686c      	ldr	r4, [r5, #4]
 8005930:	220c      	movs	r2, #12
 8005932:	5ea3      	ldrsh	r3, [r4, r2]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0ed      	beq.n	8005914 <_fflush_r+0xc>
 8005938:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800593a:	07d2      	lsls	r2, r2, #31
 800593c:	d404      	bmi.n	8005948 <_fflush_r+0x40>
 800593e:	059b      	lsls	r3, r3, #22
 8005940:	d402      	bmi.n	8005948 <_fflush_r+0x40>
 8005942:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005944:	f7ff fa83 	bl	8004e4e <__retarget_lock_acquire_recursive>
 8005948:	0028      	movs	r0, r5
 800594a:	0021      	movs	r1, r4
 800594c:	f7ff ff50 	bl	80057f0 <__sflush_r>
 8005950:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005952:	0005      	movs	r5, r0
 8005954:	07db      	lsls	r3, r3, #31
 8005956:	d4de      	bmi.n	8005916 <_fflush_r+0xe>
 8005958:	89a3      	ldrh	r3, [r4, #12]
 800595a:	059b      	lsls	r3, r3, #22
 800595c:	d4db      	bmi.n	8005916 <_fflush_r+0xe>
 800595e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005960:	f7ff fa76 	bl	8004e50 <__retarget_lock_release_recursive>
 8005964:	e7d7      	b.n	8005916 <_fflush_r+0xe>
 8005966:	4b06      	ldr	r3, [pc, #24]	; (8005980 <_fflush_r+0x78>)
 8005968:	429c      	cmp	r4, r3
 800596a:	d101      	bne.n	8005970 <_fflush_r+0x68>
 800596c:	68ac      	ldr	r4, [r5, #8]
 800596e:	e7df      	b.n	8005930 <_fflush_r+0x28>
 8005970:	4b04      	ldr	r3, [pc, #16]	; (8005984 <_fflush_r+0x7c>)
 8005972:	429c      	cmp	r4, r3
 8005974:	d1dc      	bne.n	8005930 <_fflush_r+0x28>
 8005976:	68ec      	ldr	r4, [r5, #12]
 8005978:	e7da      	b.n	8005930 <_fflush_r+0x28>
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	08005e4c 	.word	0x08005e4c
 8005980:	08005e6c 	.word	0x08005e6c
 8005984:	08005e2c 	.word	0x08005e2c

08005988 <_lseek_r>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	0004      	movs	r4, r0
 800598c:	0008      	movs	r0, r1
 800598e:	0011      	movs	r1, r2
 8005990:	001a      	movs	r2, r3
 8005992:	2300      	movs	r3, #0
 8005994:	4d05      	ldr	r5, [pc, #20]	; (80059ac <_lseek_r+0x24>)
 8005996:	602b      	str	r3, [r5, #0]
 8005998:	f7fb fab4 	bl	8000f04 <_lseek>
 800599c:	1c43      	adds	r3, r0, #1
 800599e:	d103      	bne.n	80059a8 <_lseek_r+0x20>
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d000      	beq.n	80059a8 <_lseek_r+0x20>
 80059a6:	6023      	str	r3, [r4, #0]
 80059a8:	bd70      	pop	{r4, r5, r6, pc}
 80059aa:	46c0      	nop			; (mov r8, r8)
 80059ac:	200001f8 	.word	0x200001f8

080059b0 <__swhatbuf_r>:
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	000e      	movs	r6, r1
 80059b4:	001d      	movs	r5, r3
 80059b6:	230e      	movs	r3, #14
 80059b8:	5ec9      	ldrsh	r1, [r1, r3]
 80059ba:	0014      	movs	r4, r2
 80059bc:	b096      	sub	sp, #88	; 0x58
 80059be:	2900      	cmp	r1, #0
 80059c0:	da08      	bge.n	80059d4 <__swhatbuf_r+0x24>
 80059c2:	220c      	movs	r2, #12
 80059c4:	5eb3      	ldrsh	r3, [r6, r2]
 80059c6:	2200      	movs	r2, #0
 80059c8:	602a      	str	r2, [r5, #0]
 80059ca:	061b      	lsls	r3, r3, #24
 80059cc:	d411      	bmi.n	80059f2 <__swhatbuf_r+0x42>
 80059ce:	2380      	movs	r3, #128	; 0x80
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	e00f      	b.n	80059f4 <__swhatbuf_r+0x44>
 80059d4:	466a      	mov	r2, sp
 80059d6:	f000 f8d1 	bl	8005b7c <_fstat_r>
 80059da:	2800      	cmp	r0, #0
 80059dc:	dbf1      	blt.n	80059c2 <__swhatbuf_r+0x12>
 80059de:	23f0      	movs	r3, #240	; 0xf0
 80059e0:	9901      	ldr	r1, [sp, #4]
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	4019      	ands	r1, r3
 80059e6:	4b05      	ldr	r3, [pc, #20]	; (80059fc <__swhatbuf_r+0x4c>)
 80059e8:	18c9      	adds	r1, r1, r3
 80059ea:	424b      	negs	r3, r1
 80059ec:	4159      	adcs	r1, r3
 80059ee:	6029      	str	r1, [r5, #0]
 80059f0:	e7ed      	b.n	80059ce <__swhatbuf_r+0x1e>
 80059f2:	2340      	movs	r3, #64	; 0x40
 80059f4:	2000      	movs	r0, #0
 80059f6:	6023      	str	r3, [r4, #0]
 80059f8:	b016      	add	sp, #88	; 0x58
 80059fa:	bd70      	pop	{r4, r5, r6, pc}
 80059fc:	ffffe000 	.word	0xffffe000

08005a00 <__smakebuf_r>:
 8005a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a02:	2602      	movs	r6, #2
 8005a04:	898b      	ldrh	r3, [r1, #12]
 8005a06:	0005      	movs	r5, r0
 8005a08:	000c      	movs	r4, r1
 8005a0a:	4233      	tst	r3, r6
 8005a0c:	d006      	beq.n	8005a1c <__smakebuf_r+0x1c>
 8005a0e:	0023      	movs	r3, r4
 8005a10:	3347      	adds	r3, #71	; 0x47
 8005a12:	6023      	str	r3, [r4, #0]
 8005a14:	6123      	str	r3, [r4, #16]
 8005a16:	2301      	movs	r3, #1
 8005a18:	6163      	str	r3, [r4, #20]
 8005a1a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005a1c:	466a      	mov	r2, sp
 8005a1e:	ab01      	add	r3, sp, #4
 8005a20:	f7ff ffc6 	bl	80059b0 <__swhatbuf_r>
 8005a24:	9900      	ldr	r1, [sp, #0]
 8005a26:	0007      	movs	r7, r0
 8005a28:	0028      	movs	r0, r5
 8005a2a:	f7ff fa35 	bl	8004e98 <_malloc_r>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d108      	bne.n	8005a44 <__smakebuf_r+0x44>
 8005a32:	220c      	movs	r2, #12
 8005a34:	5ea3      	ldrsh	r3, [r4, r2]
 8005a36:	059a      	lsls	r2, r3, #22
 8005a38:	d4ef      	bmi.n	8005a1a <__smakebuf_r+0x1a>
 8005a3a:	2203      	movs	r2, #3
 8005a3c:	4393      	bics	r3, r2
 8005a3e:	431e      	orrs	r6, r3
 8005a40:	81a6      	strh	r6, [r4, #12]
 8005a42:	e7e4      	b.n	8005a0e <__smakebuf_r+0xe>
 8005a44:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <__smakebuf_r+0x84>)
 8005a46:	62ab      	str	r3, [r5, #40]	; 0x28
 8005a48:	2380      	movs	r3, #128	; 0x80
 8005a4a:	89a2      	ldrh	r2, [r4, #12]
 8005a4c:	6020      	str	r0, [r4, #0]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	81a3      	strh	r3, [r4, #12]
 8005a52:	9b00      	ldr	r3, [sp, #0]
 8005a54:	6120      	str	r0, [r4, #16]
 8005a56:	6163      	str	r3, [r4, #20]
 8005a58:	9b01      	ldr	r3, [sp, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00d      	beq.n	8005a7a <__smakebuf_r+0x7a>
 8005a5e:	0028      	movs	r0, r5
 8005a60:	230e      	movs	r3, #14
 8005a62:	5ee1      	ldrsh	r1, [r4, r3]
 8005a64:	f000 f89c 	bl	8005ba0 <_isatty_r>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d006      	beq.n	8005a7a <__smakebuf_r+0x7a>
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	4393      	bics	r3, r2
 8005a72:	001a      	movs	r2, r3
 8005a74:	2301      	movs	r3, #1
 8005a76:	4313      	orrs	r3, r2
 8005a78:	81a3      	strh	r3, [r4, #12]
 8005a7a:	89a0      	ldrh	r0, [r4, #12]
 8005a7c:	4307      	orrs	r7, r0
 8005a7e:	81a7      	strh	r7, [r4, #12]
 8005a80:	e7cb      	b.n	8005a1a <__smakebuf_r+0x1a>
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	08004c91 	.word	0x08004c91

08005a88 <memchr>:
 8005a88:	b2c9      	uxtb	r1, r1
 8005a8a:	1882      	adds	r2, r0, r2
 8005a8c:	4290      	cmp	r0, r2
 8005a8e:	d101      	bne.n	8005a94 <memchr+0xc>
 8005a90:	2000      	movs	r0, #0
 8005a92:	4770      	bx	lr
 8005a94:	7803      	ldrb	r3, [r0, #0]
 8005a96:	428b      	cmp	r3, r1
 8005a98:	d0fb      	beq.n	8005a92 <memchr+0xa>
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	e7f6      	b.n	8005a8c <memchr+0x4>
	...

08005aa0 <__malloc_lock>:
 8005aa0:	b510      	push	{r4, lr}
 8005aa2:	4802      	ldr	r0, [pc, #8]	; (8005aac <__malloc_lock+0xc>)
 8005aa4:	f7ff f9d3 	bl	8004e4e <__retarget_lock_acquire_recursive>
 8005aa8:	bd10      	pop	{r4, pc}
 8005aaa:	46c0      	nop			; (mov r8, r8)
 8005aac:	200001ec 	.word	0x200001ec

08005ab0 <__malloc_unlock>:
 8005ab0:	b510      	push	{r4, lr}
 8005ab2:	4802      	ldr	r0, [pc, #8]	; (8005abc <__malloc_unlock+0xc>)
 8005ab4:	f7ff f9cc 	bl	8004e50 <__retarget_lock_release_recursive>
 8005ab8:	bd10      	pop	{r4, pc}
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	200001ec 	.word	0x200001ec

08005ac0 <_free_r>:
 8005ac0:	b570      	push	{r4, r5, r6, lr}
 8005ac2:	0005      	movs	r5, r0
 8005ac4:	2900      	cmp	r1, #0
 8005ac6:	d010      	beq.n	8005aea <_free_r+0x2a>
 8005ac8:	1f0c      	subs	r4, r1, #4
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	da00      	bge.n	8005ad2 <_free_r+0x12>
 8005ad0:	18e4      	adds	r4, r4, r3
 8005ad2:	0028      	movs	r0, r5
 8005ad4:	f7ff ffe4 	bl	8005aa0 <__malloc_lock>
 8005ad8:	4a1d      	ldr	r2, [pc, #116]	; (8005b50 <_free_r+0x90>)
 8005ada:	6813      	ldr	r3, [r2, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d105      	bne.n	8005aec <_free_r+0x2c>
 8005ae0:	6063      	str	r3, [r4, #4]
 8005ae2:	6014      	str	r4, [r2, #0]
 8005ae4:	0028      	movs	r0, r5
 8005ae6:	f7ff ffe3 	bl	8005ab0 <__malloc_unlock>
 8005aea:	bd70      	pop	{r4, r5, r6, pc}
 8005aec:	42a3      	cmp	r3, r4
 8005aee:	d908      	bls.n	8005b02 <_free_r+0x42>
 8005af0:	6821      	ldr	r1, [r4, #0]
 8005af2:	1860      	adds	r0, r4, r1
 8005af4:	4283      	cmp	r3, r0
 8005af6:	d1f3      	bne.n	8005ae0 <_free_r+0x20>
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	1841      	adds	r1, r0, r1
 8005afe:	6021      	str	r1, [r4, #0]
 8005b00:	e7ee      	b.n	8005ae0 <_free_r+0x20>
 8005b02:	001a      	movs	r2, r3
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <_free_r+0x4e>
 8005b0a:	42a3      	cmp	r3, r4
 8005b0c:	d9f9      	bls.n	8005b02 <_free_r+0x42>
 8005b0e:	6811      	ldr	r1, [r2, #0]
 8005b10:	1850      	adds	r0, r2, r1
 8005b12:	42a0      	cmp	r0, r4
 8005b14:	d10b      	bne.n	8005b2e <_free_r+0x6e>
 8005b16:	6820      	ldr	r0, [r4, #0]
 8005b18:	1809      	adds	r1, r1, r0
 8005b1a:	1850      	adds	r0, r2, r1
 8005b1c:	6011      	str	r1, [r2, #0]
 8005b1e:	4283      	cmp	r3, r0
 8005b20:	d1e0      	bne.n	8005ae4 <_free_r+0x24>
 8005b22:	6818      	ldr	r0, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	1841      	adds	r1, r0, r1
 8005b28:	6011      	str	r1, [r2, #0]
 8005b2a:	6053      	str	r3, [r2, #4]
 8005b2c:	e7da      	b.n	8005ae4 <_free_r+0x24>
 8005b2e:	42a0      	cmp	r0, r4
 8005b30:	d902      	bls.n	8005b38 <_free_r+0x78>
 8005b32:	230c      	movs	r3, #12
 8005b34:	602b      	str	r3, [r5, #0]
 8005b36:	e7d5      	b.n	8005ae4 <_free_r+0x24>
 8005b38:	6821      	ldr	r1, [r4, #0]
 8005b3a:	1860      	adds	r0, r4, r1
 8005b3c:	4283      	cmp	r3, r0
 8005b3e:	d103      	bne.n	8005b48 <_free_r+0x88>
 8005b40:	6818      	ldr	r0, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	1841      	adds	r1, r0, r1
 8005b46:	6021      	str	r1, [r4, #0]
 8005b48:	6063      	str	r3, [r4, #4]
 8005b4a:	6054      	str	r4, [r2, #4]
 8005b4c:	e7ca      	b.n	8005ae4 <_free_r+0x24>
 8005b4e:	46c0      	nop			; (mov r8, r8)
 8005b50:	200001f0 	.word	0x200001f0

08005b54 <_read_r>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	0004      	movs	r4, r0
 8005b58:	0008      	movs	r0, r1
 8005b5a:	0011      	movs	r1, r2
 8005b5c:	001a      	movs	r2, r3
 8005b5e:	2300      	movs	r3, #0
 8005b60:	4d05      	ldr	r5, [pc, #20]	; (8005b78 <_read_r+0x24>)
 8005b62:	602b      	str	r3, [r5, #0]
 8005b64:	f7fb f974 	bl	8000e50 <_read>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d103      	bne.n	8005b74 <_read_r+0x20>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d000      	beq.n	8005b74 <_read_r+0x20>
 8005b72:	6023      	str	r3, [r4, #0]
 8005b74:	bd70      	pop	{r4, r5, r6, pc}
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	200001f8 	.word	0x200001f8

08005b7c <_fstat_r>:
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	b570      	push	{r4, r5, r6, lr}
 8005b80:	4d06      	ldr	r5, [pc, #24]	; (8005b9c <_fstat_r+0x20>)
 8005b82:	0004      	movs	r4, r0
 8005b84:	0008      	movs	r0, r1
 8005b86:	0011      	movs	r1, r2
 8005b88:	602b      	str	r3, [r5, #0]
 8005b8a:	f7fb f9a4 	bl	8000ed6 <_fstat>
 8005b8e:	1c43      	adds	r3, r0, #1
 8005b90:	d103      	bne.n	8005b9a <_fstat_r+0x1e>
 8005b92:	682b      	ldr	r3, [r5, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d000      	beq.n	8005b9a <_fstat_r+0x1e>
 8005b98:	6023      	str	r3, [r4, #0]
 8005b9a:	bd70      	pop	{r4, r5, r6, pc}
 8005b9c:	200001f8 	.word	0x200001f8

08005ba0 <_isatty_r>:
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	b570      	push	{r4, r5, r6, lr}
 8005ba4:	4d06      	ldr	r5, [pc, #24]	; (8005bc0 <_isatty_r+0x20>)
 8005ba6:	0004      	movs	r4, r0
 8005ba8:	0008      	movs	r0, r1
 8005baa:	602b      	str	r3, [r5, #0]
 8005bac:	f7fb f9a1 	bl	8000ef2 <_isatty>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d103      	bne.n	8005bbc <_isatty_r+0x1c>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d000      	beq.n	8005bbc <_isatty_r+0x1c>
 8005bba:	6023      	str	r3, [r4, #0]
 8005bbc:	bd70      	pop	{r4, r5, r6, pc}
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	200001f8 	.word	0x200001f8

08005bc4 <_init>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	46c0      	nop			; (mov r8, r8)
 8005bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bca:	bc08      	pop	{r3}
 8005bcc:	469e      	mov	lr, r3
 8005bce:	4770      	bx	lr

08005bd0 <_fini>:
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd6:	bc08      	pop	{r3}
 8005bd8:	469e      	mov	lr, r3
 8005bda:	4770      	bx	lr
