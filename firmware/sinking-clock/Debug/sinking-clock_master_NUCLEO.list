
sinking-clock_master_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  08006b74  08006b74  00016b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071a4  080071a4  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  080071a4  080071a4  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071ac  080071ac  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071ac  080071ac  000171ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071b0  080071b0  000171b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080071b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200000a0  08007254  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08007254  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163d5  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002be8  00000000  00000000  0003649d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  00039088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  0003a3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019417  00000000  00000000  0003b5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001791e  00000000  00000000  000549d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dc86  00000000  00000000  0006c2f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00109f7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d84  00000000  00000000  00109fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000a0 	.word	0x200000a0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006b5c 	.word	0x08006b5c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a4 	.word	0x200000a4
 8000100:	08006b5c 	.word	0x08006b5c

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	469b      	mov	fp, r3
 80002a6:	d433      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a8:	465a      	mov	r2, fp
 80002aa:	4653      	mov	r3, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83a      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e078      	b.n	80003b4 <__udivmoddi4+0x144>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e075      	b.n	80003ba <__udivmoddi4+0x14a>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e028      	b.n	800033a <__udivmoddi4+0xca>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	2320      	movs	r3, #32
 8000314:	1a9b      	subs	r3, r3, r2
 8000316:	4652      	mov	r2, sl
 8000318:	40da      	lsrs	r2, r3
 800031a:	4641      	mov	r1, r8
 800031c:	0013      	movs	r3, r2
 800031e:	464a      	mov	r2, r9
 8000320:	408a      	lsls	r2, r1
 8000322:	0017      	movs	r7, r2
 8000324:	4642      	mov	r2, r8
 8000326:	431f      	orrs	r7, r3
 8000328:	4653      	mov	r3, sl
 800032a:	4093      	lsls	r3, r2
 800032c:	001e      	movs	r6, r3
 800032e:	42af      	cmp	r7, r5
 8000330:	d9c4      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0d9      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000340:	07fb      	lsls	r3, r7, #31
 8000342:	0872      	lsrs	r2, r6, #1
 8000344:	431a      	orrs	r2, r3
 8000346:	4646      	mov	r6, r8
 8000348:	087b      	lsrs	r3, r7, #1
 800034a:	e00e      	b.n	800036a <__udivmoddi4+0xfa>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d101      	bne.n	8000354 <__udivmoddi4+0xe4>
 8000350:	42a2      	cmp	r2, r4
 8000352:	d80c      	bhi.n	800036e <__udivmoddi4+0xfe>
 8000354:	1aa4      	subs	r4, r4, r2
 8000356:	419d      	sbcs	r5, r3
 8000358:	2001      	movs	r0, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2100      	movs	r1, #0
 8000360:	3e01      	subs	r6, #1
 8000362:	1824      	adds	r4, r4, r0
 8000364:	414d      	adcs	r5, r1
 8000366:	2e00      	cmp	r6, #0
 8000368:	d006      	beq.n	8000378 <__udivmoddi4+0x108>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d9ee      	bls.n	800034c <__udivmoddi4+0xdc>
 800036e:	3e01      	subs	r6, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2e00      	cmp	r6, #0
 8000376:	d1f8      	bne.n	800036a <__udivmoddi4+0xfa>
 8000378:	9800      	ldr	r0, [sp, #0]
 800037a:	9901      	ldr	r1, [sp, #4]
 800037c:	465b      	mov	r3, fp
 800037e:	1900      	adds	r0, r0, r4
 8000380:	4169      	adcs	r1, r5
 8000382:	2b00      	cmp	r3, #0
 8000384:	db24      	blt.n	80003d0 <__udivmoddi4+0x160>
 8000386:	002b      	movs	r3, r5
 8000388:	465a      	mov	r2, fp
 800038a:	4644      	mov	r4, r8
 800038c:	40d3      	lsrs	r3, r2
 800038e:	002a      	movs	r2, r5
 8000390:	40e2      	lsrs	r2, r4
 8000392:	001c      	movs	r4, r3
 8000394:	465b      	mov	r3, fp
 8000396:	0015      	movs	r5, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	db2a      	blt.n	80003f2 <__udivmoddi4+0x182>
 800039c:	0026      	movs	r6, r4
 800039e:	409e      	lsls	r6, r3
 80003a0:	0033      	movs	r3, r6
 80003a2:	0026      	movs	r6, r4
 80003a4:	4647      	mov	r7, r8
 80003a6:	40be      	lsls	r6, r7
 80003a8:	0032      	movs	r2, r6
 80003aa:	1a80      	subs	r0, r0, r2
 80003ac:	4199      	sbcs	r1, r3
 80003ae:	9000      	str	r0, [sp, #0]
 80003b0:	9101      	str	r1, [sp, #4]
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b4:	42a3      	cmp	r3, r4
 80003b6:	d8bc      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80003b8:	e783      	b.n	80002c2 <__udivmoddi4+0x52>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	2100      	movs	r1, #0
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	2200      	movs	r2, #0
 80003c4:	9100      	str	r1, [sp, #0]
 80003c6:	9201      	str	r2, [sp, #4]
 80003c8:	2201      	movs	r2, #1
 80003ca:	40da      	lsrs	r2, r3
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	e786      	b.n	80002de <__udivmoddi4+0x6e>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	4646      	mov	r6, r8
 80003da:	409a      	lsls	r2, r3
 80003dc:	0023      	movs	r3, r4
 80003de:	40f3      	lsrs	r3, r6
 80003e0:	4644      	mov	r4, r8
 80003e2:	4313      	orrs	r3, r2
 80003e4:	002a      	movs	r2, r5
 80003e6:	40e2      	lsrs	r2, r4
 80003e8:	001c      	movs	r4, r3
 80003ea:	465b      	mov	r3, fp
 80003ec:	0015      	movs	r5, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dad4      	bge.n	800039c <__udivmoddi4+0x12c>
 80003f2:	4642      	mov	r2, r8
 80003f4:	002f      	movs	r7, r5
 80003f6:	2320      	movs	r3, #32
 80003f8:	0026      	movs	r6, r4
 80003fa:	4097      	lsls	r7, r2
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	40de      	lsrs	r6, r3
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7cd      	b.n	80003a2 <__udivmoddi4+0x132>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <getRTCTime>:
				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
	}

}

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000468:	68b9      	ldr	r1, [r7, #8]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	2200      	movs	r2, #0
 800046e:	0018      	movs	r0, r3
 8000470:	f004 f87a 	bl	8004568 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000474:	6879      	ldr	r1, [r7, #4]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2200      	movs	r2, #0
 800047a:	0018      	movs	r0, r3
 800047c:	f004 f962 	bl	8004744 <HAL_RTC_GetDate>

}
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b004      	add	sp, #16
 8000486:	bd80      	pop	{r7, pc}

08000488 <getUserAlarmTime>:

void getUserAlarmTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *userAlarmTime) {
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b08d      	sub	sp, #52	; 0x34
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]

	// Store alarm data in alarm object pointer and extract alarm time data from alarm object
	RTC_AlarmTypeDef userAlarmObj;
	HAL_RTC_GetAlarm(hrtc, &userAlarmObj, userAlarm, RTCTimeFormat);
 8000492:	2380      	movs	r3, #128	; 0x80
 8000494:	009a      	lsls	r2, r3, #2
 8000496:	2408      	movs	r4, #8
 8000498:	1939      	adds	r1, r7, r4
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	2300      	movs	r3, #0
 800049e:	f004 fadf 	bl	8004a60 <HAL_RTC_GetAlarm>
	*userAlarmTime = userAlarmObj.AlarmTime;
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	193a      	adds	r2, r7, r4
 80004a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004a8:	c313      	stmia	r3!, {r0, r1, r4}
 80004aa:	ca03      	ldmia	r2!, {r0, r1}
 80004ac:	c303      	stmia	r3!, {r0, r1}

}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b00d      	add	sp, #52	; 0x34
 80004b4:	bd90      	pop	{r4, r7, pc}

080004b6 <getUserAlarmObj>:

void getUserAlarmObj(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *userAlarmObj) {
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	6039      	str	r1, [r7, #0]

	// Store alarm data in alarm object pointer
	HAL_RTC_GetAlarm(hrtc, userAlarmObj, internalAlarm, FORMAT_BIN);
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	005a      	lsls	r2, r3, #1
 80004c4:	6839      	ldr	r1, [r7, #0]
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	2300      	movs	r3, #0
 80004ca:	f004 fac9 	bl	8004a60 <HAL_RTC_GetAlarm>

}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b002      	add	sp, #8
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80004e0:	2301      	movs	r3, #1
 80004e2:	425b      	negs	r3, r3
 80004e4:	1d39      	adds	r1, r7, #4
 80004e6:	4804      	ldr	r0, [pc, #16]	; (80004f8 <__io_putchar+0x20>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	f004 fe4f 	bl	800518c <HAL_UART_Transmit>
  return ch;
 80004ee:	687b      	ldr	r3, [r7, #4]
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	2000018c 	.word	0x2000018c

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f001 fa5d 	bl	80019c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f831 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f9f9 	bl	8000900 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050e:	f000 f9c3 	bl	8000898 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000512:	f000 f877 	bl	8000604 <MX_I2C1_Init>
  MX_RTC_Init();
 8000516:	f000 f8b5 	bl	8000684 <MX_RTC_Init>
  MX_TIM16_Init();
 800051a:	f000 f995 	bl	8000848 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  displayToggle = 2; 		// Display at 100% intensity for next display toggle
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <main+0x5c>)
 8000520:	2202      	movs	r2, #2
 8000522:	701a      	strb	r2, [r3, #0]
//  initRTCTime(&hrtc, &currTime, &currDate);
  sevSeg_I2C1_Init(&hi2c1);		//Initialize 7-seg
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <main+0x60>)
 8000526:	0018      	movs	r0, r3
 8000528:	f000 fe90 	bl	800124c <sevSeg_I2C1_Init>

  	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 800052c:	1dfc      	adds	r4, r7, #7
 800052e:	f000 faab 	bl	8000a88 <updateAndDisplayTime>
 8000532:	0003      	movs	r3, r0
 8000534:	7023      	strb	r3, [r4, #0]

  	if(halRet != HAL_OK) {		//check HAL
 8000536:	1dfb      	adds	r3, r7, #7
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d004      	beq.n	8000548 <main+0x4c>
  		printf("HAL Error - TX current time\n\r");
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <main+0x64>)
 8000540:	0018      	movs	r0, r3
 8000542:	f005 fb33 	bl	8005bac <iprintf>
 8000546:	e003      	b.n	8000550 <main+0x54>
  	} else {
  		printf("Display Updated with current time\n\r");
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <main+0x68>)
 800054a:	0018      	movs	r0, r3
 800054c:	f005 fb2e 	bl	8005bac <iprintf>
  	}

  userAlarmToggle = false;			//Default to off
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <main+0x6c>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000556:	e7fe      	b.n	8000556 <main+0x5a>
 8000558:	200000bc 	.word	0x200000bc
 800055c:	200000c0 	.word	0x200000c0
 8000560:	08006b74 	.word	0x08006b74
 8000564:	08006b94 	.word	0x08006b94
 8000568:	200000bd 	.word	0x200000bd

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b093      	sub	sp, #76	; 0x4c
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	2410      	movs	r4, #16
 8000574:	193b      	adds	r3, r7, r4
 8000576:	0018      	movs	r0, r3
 8000578:	2338      	movs	r3, #56	; 0x38
 800057a:	001a      	movs	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	f005 fb0d 	bl	8005b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000582:	003b      	movs	r3, r7
 8000584:	0018      	movs	r0, r3
 8000586:	2310      	movs	r3, #16
 8000588:	001a      	movs	r2, r3
 800058a:	2100      	movs	r1, #0
 800058c:	f005 fb06 	bl	8005b9c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	0018      	movs	r0, r3
 8000596:	f002 ffe9 	bl	800356c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800059a:	193b      	adds	r3, r7, r4
 800059c:	220a      	movs	r2, #10
 800059e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	0052      	lsls	r2, r2, #1
 80005a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005a8:	0021      	movs	r1, r4
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2240      	movs	r2, #64	; 0x40
 80005b4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2201      	movs	r2, #1
 80005ba:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	0018      	movs	r0, r3
 80005c6:	f003 f847 	bl	8003658 <HAL_RCC_OscConfig>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ce:	f000 fe37 	bl	8001240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	003b      	movs	r3, r7
 80005d4:	2207      	movs	r2, #7
 80005d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d8:	003b      	movs	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	003b      	movs	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e4:	003b      	movs	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ea:	003b      	movs	r3, r7
 80005ec:	2100      	movs	r1, #0
 80005ee:	0018      	movs	r0, r3
 80005f0:	f003 fb4c 	bl	8003c8c <HAL_RCC_ClockConfig>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005f8:	f000 fe22 	bl	8001240 <Error_Handler>
  }
}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	b013      	add	sp, #76	; 0x4c
 8000602:	bd90      	pop	{r4, r7, pc}

08000604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_I2C1_Init+0x74>)
 800060a:	4a1c      	ldr	r2, [pc, #112]	; (800067c <MX_I2C1_Init+0x78>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_I2C1_Init+0x74>)
 8000610:	4a1b      	ldr	r2, [pc, #108]	; (8000680 <MX_I2C1_Init+0x7c>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_I2C1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_I2C1_Init+0x74>)
 800061c:	2201      	movs	r2, #1
 800061e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_I2C1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_I2C1_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_I2C1_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_I2C1_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_I2C1_Init+0x74>)
 8000640:	0018      	movs	r0, r3
 8000642:	f001 fd69 	bl	8002118 <HAL_I2C_Init>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800064a:	f000 fdf9 	bl	8001240 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_I2C1_Init+0x74>)
 8000650:	2100      	movs	r1, #0
 8000652:	0018      	movs	r0, r3
 8000654:	f002 fef2 	bl	800343c <HAL_I2CEx_ConfigAnalogFilter>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800065c:	f000 fdf0 	bl	8001240 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <MX_I2C1_Init+0x74>)
 8000662:	2100      	movs	r1, #0
 8000664:	0018      	movs	r0, r3
 8000666:	f002 ff35 	bl	80034d4 <HAL_I2CEx_ConfigDigitalFilter>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800066e:	f000 fde7 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200000c0 	.word	0x200000c0
 800067c:	40005400 	.word	0x40005400
 8000680:	0010061a 	.word	0x0010061a

08000684 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b091      	sub	sp, #68	; 0x44
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800068a:	232c      	movs	r3, #44	; 0x2c
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	0018      	movs	r0, r3
 8000690:	2314      	movs	r3, #20
 8000692:	001a      	movs	r2, r3
 8000694:	2100      	movs	r1, #0
 8000696:	f005 fa81 	bl	8005b9c <memset>
  RTC_DateTypeDef sDate = {0};
 800069a:	2328      	movs	r3, #40	; 0x28
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80006a2:	003b      	movs	r3, r7
 80006a4:	0018      	movs	r0, r3
 80006a6:	2328      	movs	r3, #40	; 0x28
 80006a8:	001a      	movs	r2, r3
 80006aa:	2100      	movs	r1, #0
 80006ac:	f005 fa76 	bl	8005b9c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006b0:	4b5d      	ldr	r3, [pc, #372]	; (8000828 <MX_RTC_Init+0x1a4>)
 80006b2:	4a5e      	ldr	r2, [pc, #376]	; (800082c <MX_RTC_Init+0x1a8>)
 80006b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80006b6:	4b5c      	ldr	r3, [pc, #368]	; (8000828 <MX_RTC_Init+0x1a4>)
 80006b8:	2240      	movs	r2, #64	; 0x40
 80006ba:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80006bc:	4b5a      	ldr	r3, [pc, #360]	; (8000828 <MX_RTC_Init+0x1a4>)
 80006be:	227f      	movs	r2, #127	; 0x7f
 80006c0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80006c2:	4b59      	ldr	r3, [pc, #356]	; (8000828 <MX_RTC_Init+0x1a4>)
 80006c4:	22ff      	movs	r2, #255	; 0xff
 80006c6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006c8:	4b57      	ldr	r3, [pc, #348]	; (8000828 <MX_RTC_Init+0x1a4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006ce:	4b56      	ldr	r3, [pc, #344]	; (8000828 <MX_RTC_Init+0x1a4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006d4:	4b54      	ldr	r3, [pc, #336]	; (8000828 <MX_RTC_Init+0x1a4>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006da:	4b53      	ldr	r3, [pc, #332]	; (8000828 <MX_RTC_Init+0x1a4>)
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	05d2      	lsls	r2, r2, #23
 80006e0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80006e2:	4b51      	ldr	r3, [pc, #324]	; (8000828 <MX_RTC_Init+0x1a4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006e8:	4b4f      	ldr	r3, [pc, #316]	; (8000828 <MX_RTC_Init+0x1a4>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f003 fdf2 	bl	80042d4 <HAL_RTC_Init>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80006f4:	f000 fda4 	bl	8001240 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 80006f8:	212c      	movs	r1, #44	; 0x2c
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2201      	movs	r2, #1
 80006fe:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2200      	movs	r2, #0
 8000704:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2200      	movs	r2, #0
 8000716:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTCTimeFormat) != HAL_OK)
 8000724:	1879      	adds	r1, r7, r1
 8000726:	4b40      	ldr	r3, [pc, #256]	; (8000828 <MX_RTC_Init+0x1a4>)
 8000728:	2200      	movs	r2, #0
 800072a:	0018      	movs	r0, r3
 800072c:	f003 fe74 	bl	8004418 <HAL_RTC_SetTime>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000734:	f000 fd84 	bl	8001240 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000738:	2128      	movs	r1, #40	; 0x28
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2201      	movs	r2, #1
 800073e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2201      	movs	r2, #1
 8000744:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2201      	movs	r2, #1
 800074a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2200      	movs	r2, #0
 8000750:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTCTimeFormat) != HAL_OK)
 8000752:	1879      	adds	r1, r7, r1
 8000754:	4b34      	ldr	r3, [pc, #208]	; (8000828 <MX_RTC_Init+0x1a4>)
 8000756:	2200      	movs	r2, #0
 8000758:	0018      	movs	r0, r3
 800075a:	f003 ff61 	bl	8004620 <HAL_RTC_SetDate>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 8000762:	f000 fd6d 	bl	8001240 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000766:	003b      	movs	r3, r7
 8000768:	2201      	movs	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 800076c:	003b      	movs	r3, r7
 800076e:	2201      	movs	r2, #1
 8000770:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 8000772:	003b      	movs	r3, r7
 8000774:	2201      	movs	r2, #1
 8000776:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000778:	003b      	movs	r3, r7
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800077e:	003b      	movs	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000784:	003b      	movs	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800078a:	003b      	movs	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000790:	003b      	movs	r3, r7
 8000792:	4a27      	ldr	r2, [pc, #156]	; (8000830 <MX_RTC_Init+0x1ac>)
 8000794:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000796:	003b      	movs	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800079c:	003b      	movs	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80007a2:	003b      	movs	r3, r7
 80007a4:	2220      	movs	r2, #32
 80007a6:	2101      	movs	r1, #1
 80007a8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80007aa:	003b      	movs	r3, r7
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTCTimeFormat) != HAL_OK)
 80007b2:	0039      	movs	r1, r7
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_RTC_Init+0x1a4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	0018      	movs	r0, r3
 80007ba:	f004 f811 	bl	80047e0 <HAL_RTC_SetAlarm_IT>
 80007be:	1e03      	subs	r3, r0, #0
 80007c0:	d001      	beq.n	80007c6 <MX_RTC_Init+0x142>
  {
    Error_Handler();
 80007c2:	f000 fd3d 	bl	8001240 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80007c6:	003b      	movs	r3, r7
 80007c8:	4a1a      	ldr	r2, [pc, #104]	; (8000834 <MX_RTC_Init+0x1b0>)
 80007ca:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.Alarm = RTC_ALARM_B;
 80007cc:	003b      	movs	r3, r7
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	0092      	lsls	r2, r2, #2
 80007d2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTCTimeFormat) != HAL_OK)
 80007d4:	0039      	movs	r1, r7
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_RTC_Init+0x1a4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	0018      	movs	r0, r3
 80007dc:	f004 f800 	bl	80047e0 <HAL_RTC_SetAlarm_IT>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <MX_RTC_Init+0x164>
  {
    Error_Handler();
 80007e4:	f000 fd2c 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  currTime = sTime;
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_RTC_Init+0x1b4>)
 80007ea:	222c      	movs	r2, #44	; 0x2c
 80007ec:	18ba      	adds	r2, r7, r2
 80007ee:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007f0:	c313      	stmia	r3!, {r0, r1, r4}
 80007f2:	ca03      	ldmia	r2!, {r0, r1}
 80007f4:	c303      	stmia	r3!, {r0, r1}
  currDate = sDate;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_RTC_Init+0x1b8>)
 80007f8:	2228      	movs	r2, #40	; 0x28
 80007fa:	18ba      	adds	r2, r7, r2
 80007fc:	6812      	ldr	r2, [r2, #0]
 80007fe:	601a      	str	r2, [r3, #0]
  userAlarmObj = sAlarm;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_RTC_Init+0x1bc>)
 8000802:	003a      	movs	r2, r7
 8000804:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000806:	c313      	stmia	r3!, {r0, r1, r4}
 8000808:	ca13      	ldmia	r2!, {r0, r1, r4}
 800080a:	c313      	stmia	r3!, {r0, r1, r4}
 800080c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800080e:	c313      	stmia	r3!, {r0, r1, r4}
 8000810:	6812      	ldr	r2, [r2, #0]
 8000812:	601a      	str	r2, [r3, #0]
  userAlarmTime = userAlarmObj.AlarmTime;
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_RTC_Init+0x1c0>)
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <MX_RTC_Init+0x1bc>)
 8000818:	ca13      	ldmia	r2!, {r0, r1, r4}
 800081a:	c313      	stmia	r3!, {r0, r1, r4}
 800081c:	ca03      	ldmia	r2!, {r0, r1}
 800081e:	c303      	stmia	r3!, {r0, r1}

  /* USER CODE END RTC_Init 2 */

}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b011      	add	sp, #68	; 0x44
 8000826:	bd90      	pop	{r4, r7, pc}
 8000828:	20000114 	.word	0x20000114
 800082c:	40002800 	.word	0x40002800
 8000830:	80808000 	.word	0x80808000
 8000834:	80800080 	.word	0x80800080
 8000838:	20000220 	.word	0x20000220
 800083c:	20000234 	.word	0x20000234
 8000840:	2000024c 	.word	0x2000024c
 8000844:	20000238 	.word	0x20000238

08000848 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_TIM16_Init+0x44>)
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <MX_TIM16_Init+0x48>)
 8000850:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 244;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_TIM16_Init+0x44>)
 8000854:	22f4      	movs	r2, #244	; 0xf4
 8000856:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_TIM16_Init+0x44>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_TIM16_Init+0x44>)
 8000860:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <MX_TIM16_Init+0x4c>)
 8000862:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_TIM16_Init+0x44>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_TIM16_Init+0x44>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_TIM16_Init+0x44>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <MX_TIM16_Init+0x44>)
 8000878:	0018      	movs	r0, r3
 800087a:	f004 faf0 	bl	8004e5e <HAL_TIM_Base_Init>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000882:	f000 fcdd 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000140 	.word	0x20000140
 8000890:	40014400 	.word	0x40014400
 8000894:	0000ffff 	.word	0x0000ffff

08000898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_USART2_UART_Init+0x60>)
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <MX_USART2_UART_Init+0x64>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_USART2_UART_Init+0x60>)
 80008a4:	22e1      	movs	r2, #225	; 0xe1
 80008a6:	0252      	lsls	r2, r2, #9
 80008a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_USART2_UART_Init+0x60>)
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	0152      	lsls	r2, r2, #5
 80008b0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_USART2_UART_Init+0x60>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_USART2_UART_Init+0x60>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART2_UART_Init+0x60>)
 80008c0:	220c      	movs	r2, #12
 80008c2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_USART2_UART_Init+0x60>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_USART2_UART_Init+0x60>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_USART2_UART_Init+0x60>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_USART2_UART_Init+0x60>)
 80008d8:	2200      	movs	r2, #0
 80008da:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_USART2_UART_Init+0x60>)
 80008de:	2200      	movs	r2, #0
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <MX_USART2_UART_Init+0x60>)
 80008e4:	0018      	movs	r0, r3
 80008e6:	f004 fbfb 	bl	80050e0 <HAL_UART_Init>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80008ee:	f000 fca7 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	2000018c 	.word	0x2000018c
 80008fc:	40004400 	.word	0x40004400

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b08b      	sub	sp, #44	; 0x2c
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	2414      	movs	r4, #20
 8000908:	193b      	adds	r3, r7, r4
 800090a:	0018      	movs	r0, r3
 800090c:	2314      	movs	r3, #20
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f005 f943 	bl	8005b9c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b57      	ldr	r3, [pc, #348]	; (8000a74 <MX_GPIO_Init+0x174>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091a:	4b56      	ldr	r3, [pc, #344]	; (8000a74 <MX_GPIO_Init+0x174>)
 800091c:	2102      	movs	r1, #2
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
 8000922:	4b54      	ldr	r3, [pc, #336]	; (8000a74 <MX_GPIO_Init+0x174>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000926:	2202      	movs	r2, #2
 8000928:	4013      	ands	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	4b51      	ldr	r3, [pc, #324]	; (8000a74 <MX_GPIO_Init+0x174>)
 8000930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000932:	4b50      	ldr	r3, [pc, #320]	; (8000a74 <MX_GPIO_Init+0x174>)
 8000934:	2104      	movs	r1, #4
 8000936:	430a      	orrs	r2, r1
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
 800093a:	4b4e      	ldr	r3, [pc, #312]	; (8000a74 <MX_GPIO_Init+0x174>)
 800093c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800093e:	2204      	movs	r2, #4
 8000940:	4013      	ands	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000946:	4b4b      	ldr	r3, [pc, #300]	; (8000a74 <MX_GPIO_Init+0x174>)
 8000948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800094a:	4b4a      	ldr	r3, [pc, #296]	; (8000a74 <MX_GPIO_Init+0x174>)
 800094c:	2120      	movs	r1, #32
 800094e:	430a      	orrs	r2, r1
 8000950:	635a      	str	r2, [r3, #52]	; 0x34
 8000952:	4b48      	ldr	r3, [pc, #288]	; (8000a74 <MX_GPIO_Init+0x174>)
 8000954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000956:	2220      	movs	r2, #32
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b45      	ldr	r3, [pc, #276]	; (8000a74 <MX_GPIO_Init+0x174>)
 8000960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000962:	4b44      	ldr	r3, [pc, #272]	; (8000a74 <MX_GPIO_Init+0x174>)
 8000964:	2101      	movs	r1, #1
 8000966:	430a      	orrs	r2, r1
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
 800096a:	4b42      	ldr	r3, [pc, #264]	; (8000a74 <MX_GPIO_Init+0x174>)
 800096c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096e:	2201      	movs	r2, #1
 8000970:	4013      	ands	r3, r2
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Output_Pin|PM_LED_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);
 8000976:	4b40      	ldr	r3, [pc, #256]	; (8000a78 <MX_GPIO_Init+0x178>)
 8000978:	2200      	movs	r2, #0
 800097a:	21c2      	movs	r1, #194	; 0xc2
 800097c:	0018      	movs	r0, r3
 800097e:	f001 fb7a 	bl	8002076 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000982:	4b3e      	ldr	r3, [pc, #248]	; (8000a7c <MX_GPIO_Init+0x17c>)
 8000984:	2200      	movs	r2, #0
 8000986:	2140      	movs	r1, #64	; 0x40
 8000988:	0018      	movs	r0, r3
 800098a:	f001 fb74 	bl	8002076 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 800098e:	193b      	adds	r3, r7, r4
 8000990:	2204      	movs	r2, #4
 8000992:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000994:	193b      	adds	r3, r7, r4
 8000996:	2288      	movs	r2, #136	; 0x88
 8000998:	0352      	lsls	r2, r2, #13
 800099a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	4a36      	ldr	r2, [pc, #216]	; (8000a80 <MX_GPIO_Init+0x180>)
 80009a6:	0019      	movs	r1, r3
 80009a8:	0010      	movs	r0, r2
 80009aa:	f001 f9e3 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_Button_Pin Alarm_Set_Button_Pin Alarm_Enable_Button_Pin Hour_Set_Button_Pin
                           Minute_Set_Button_Pin */
  GPIO_InitStruct.Pin = Display_Button_Pin|Alarm_Set_Button_Pin|Alarm_Enable_Button_Pin|Hour_Set_Button_Pin
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	4a34      	ldr	r2, [pc, #208]	; (8000a84 <MX_GPIO_Init+0x184>)
 80009b2:	601a      	str	r2, [r3, #0]
                          |Minute_Set_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	2284      	movs	r2, #132	; 0x84
 80009b8:	0392      	lsls	r2, r2, #14
 80009ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	2201      	movs	r2, #1
 80009c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	193a      	adds	r2, r7, r4
 80009c4:	23a0      	movs	r3, #160	; 0xa0
 80009c6:	05db      	lsls	r3, r3, #23
 80009c8:	0011      	movs	r1, r2
 80009ca:	0018      	movs	r0, r3
 80009cc:	f001 f9d2 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Output_Pin PM_LED_Pin Alarm_LED_Pin */
  GPIO_InitStruct.Pin = Buzzer_Output_Pin|PM_LED_Pin|Alarm_LED_Pin;
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	22c2      	movs	r2, #194	; 0xc2
 80009d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	2201      	movs	r2, #1
 80009da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <MX_GPIO_Init+0x178>)
 80009ec:	0019      	movs	r1, r3
 80009ee:	0010      	movs	r0, r2
 80009f0:	f001 f9c0 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	2240      	movs	r2, #64	; 0x40
 80009f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	2201      	movs	r2, #1
 80009fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	193b      	adds	r3, r7, r4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <MX_GPIO_Init+0x17c>)
 8000a10:	0019      	movs	r1, r3
 8000a12:	0010      	movs	r0, r2
 8000a14:	f001 f9ae 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : Snooze_Button_Pin */
  GPIO_InitStruct.Pin = Snooze_Button_Pin;
 8000a18:	0021      	movs	r1, r4
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	0112      	lsls	r2, r2, #4
 8000a20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Snooze_Button_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	187a      	adds	r2, r7, r1
 8000a30:	23a0      	movs	r3, #160	; 0xa0
 8000a32:	05db      	lsls	r3, r3, #23
 8000a34:	0011      	movs	r1, r2
 8000a36:	0018      	movs	r0, r3
 8000a38:	f001 f99c 	bl	8001d74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2101      	movs	r1, #1
 8000a40:	2005      	movs	r0, #5
 8000a42:	f001 f8ef 	bl	8001c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000a46:	2005      	movs	r0, #5
 8000a48:	f001 f901 	bl	8001c4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2006      	movs	r0, #6
 8000a52:	f001 f8e7 	bl	8001c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000a56:	2006      	movs	r0, #6
 8000a58:	f001 f8f9 	bl	8001c4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2007      	movs	r0, #7
 8000a62:	f001 f8df 	bl	8001c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a66:	2007      	movs	r0, #7
 8000a68:	f001 f8f1 	bl	8001c4e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b00b      	add	sp, #44	; 0x2c
 8000a72:	bd90      	pop	{r4, r7, pc}
 8000a74:	40021000 	.word	0x40021000
 8000a78:	50000400 	.word	0x50000400
 8000a7c:	50000800 	.word	0x50000800
 8000a80:	50001400 	.word	0x50001400
 8000a84:	00001033 	.word	0x00001033

08000a88 <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8000a94:	4a11      	ldr	r2, [pc, #68]	; (8000adc <updateAndDisplayTime+0x54>)
 8000a96:	4912      	ldr	r1, [pc, #72]	; (8000ae0 <updateAndDisplayTime+0x58>)
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <updateAndDisplayTime+0x5c>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f7ff fcde 	bl	800045c <getRTCTime>
	sevSeg_updateDigits(&hi2c1, &currTime);
 8000aa0:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <updateAndDisplayTime+0x58>)
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <updateAndDisplayTime+0x60>)
 8000aa4:	0011      	movs	r1, r2
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 fc88 	bl	80013bc <sevSeg_updateDigits>

	if(currTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <updateAndDisplayTime+0x58>)
 8000aae:	78db      	ldrb	r3, [r3, #3]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d106      	bne.n	8000ac2 <updateAndDisplayTime+0x3a>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000ab4:	2140      	movs	r1, #64	; 0x40
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <updateAndDisplayTime+0x64>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	0018      	movs	r0, r3
 8000abc:	f001 fadb 	bl	8002076 <HAL_GPIO_WritePin>
 8000ac0:	e005      	b.n	8000ace <updateAndDisplayTime+0x46>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000ac2:	2140      	movs	r1, #64	; 0x40
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <updateAndDisplayTime+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f001 fad4 	bl	8002076 <HAL_GPIO_WritePin>
	}

	return halRet;
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]

}
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b002      	add	sp, #8
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	20000234 	.word	0x20000234
 8000ae0:	20000220 	.word	0x20000220
 8000ae4:	20000114 	.word	0x20000114
 8000ae8:	200000c0 	.word	0x200000c0
 8000aec:	50000400 	.word	0x50000400

08000af0 <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]

	getUserAlarmTime(&hrtc, &userAlarmTime);
 8000afc:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <updateAndDisplayAlarm+0x54>)
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <updateAndDisplayAlarm+0x58>)
 8000b00:	0011      	movs	r1, r2
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff fcc0 	bl	8000488 <getUserAlarmTime>
	sevSeg_updateDigits(&hi2c1, &userAlarmTime);
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <updateAndDisplayAlarm+0x54>)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <updateAndDisplayAlarm+0x5c>)
 8000b0c:	0011      	movs	r1, r2
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 fc54 	bl	80013bc <sevSeg_updateDigits>

	if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <updateAndDisplayAlarm+0x54>)
 8000b16:	78db      	ldrb	r3, [r3, #3]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d106      	bne.n	8000b2a <updateAndDisplayAlarm+0x3a>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000b1c:	2140      	movs	r1, #64	; 0x40
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <updateAndDisplayAlarm+0x60>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	0018      	movs	r0, r3
 8000b24:	f001 faa7 	bl	8002076 <HAL_GPIO_WritePin>
 8000b28:	e005      	b.n	8000b36 <updateAndDisplayAlarm+0x46>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000b2a:	2140      	movs	r1, #64	; 0x40
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <updateAndDisplayAlarm+0x60>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	0018      	movs	r0, r3
 8000b32:	f001 faa0 	bl	8002076 <HAL_GPIO_WritePin>
	}

	return halRet;
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]

}
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	20000238 	.word	0x20000238
 8000b48:	20000114 	.word	0x20000114
 8000b4c:	200000c0 	.word	0x200000c0
 8000b50:	50000400 	.word	0x50000400

08000b54 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b08d      	sub	sp, #52	; 0x34
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

	  printf("Enter current time minute increment interrupt\n\r");
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <HAL_RTC_AlarmAEventCallback+0x88>)
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f005 f824 	bl	8005bac <iprintf>

	  RTC_AlarmTypeDef sAlarm;
	  getUserAlarmObj(hrtc, &sAlarm);
 8000b64:	2408      	movs	r4, #8
 8000b66:	193a      	adds	r2, r7, r4
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f7ff fca2 	bl	80004b6 <getUserAlarmObj>
	  getRTCTime(hrtc, &currTime, &currDate);
 8000b72:	4a1b      	ldr	r2, [pc, #108]	; (8000be0 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8000b74:	491b      	ldr	r1, [pc, #108]	; (8000be4 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff fc6f 	bl	800045c <getRTCTime>

	  if(sAlarm.AlarmTime.Seconds>58) {
 8000b7e:	0022      	movs	r2, r4
 8000b80:	18bb      	adds	r3, r7, r2
 8000b82:	789b      	ldrb	r3, [r3, #2]
 8000b84:	2b3a      	cmp	r3, #58	; 0x3a
 8000b86:	d907      	bls.n	8000b98 <HAL_RTC_AlarmAEventCallback+0x44>
		sAlarm.AlarmTime.Seconds=0;
 8000b88:	18bb      	adds	r3, r7, r2
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	709a      	strb	r2, [r3, #2]
		printf("Reset alarm time\n\r");
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <HAL_RTC_AlarmAEventCallback+0x94>)
 8000b90:	0018      	movs	r0, r3
 8000b92:	f005 f80b 	bl	8005bac <iprintf>
 8000b96:	e006      	b.n	8000ba6 <HAL_RTC_AlarmAEventCallback+0x52>
	  } else {
		sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8000b98:	2108      	movs	r1, #8
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	789b      	ldrb	r3, [r3, #2]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	709a      	strb	r2, [r3, #2]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	2308      	movs	r3, #8
 8000baa:	18f9      	adds	r1, r7, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f003 fe15 	bl	80047e0 <HAL_RTC_SetAlarm_IT>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d1f6      	bne.n	8000ba8 <HAL_RTC_AlarmAEventCallback+0x54>

	  updateAndDisplayTime();
 8000bba:	f7ff ff65 	bl	8000a88 <updateAndDisplayTime>

	  printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	0019      	movs	r1, r3
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000bc6:	785b      	ldrb	r3, [r3, #1]
 8000bc8:	001a      	movs	r2, r3
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000bcc:	789b      	ldrb	r3, [r3, #2]
 8000bce:	4807      	ldr	r0, [pc, #28]	; (8000bec <HAL_RTC_AlarmAEventCallback+0x98>)
 8000bd0:	f004 ffec 	bl	8005bac <iprintf>

}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b00d      	add	sp, #52	; 0x34
 8000bda:	bd90      	pop	{r4, r7, pc}
 8000bdc:	08006bb8 	.word	0x08006bb8
 8000be0:	20000234 	.word	0x20000234
 8000be4:	20000220 	.word	0x20000220
 8000be8:	08006be8 	.word	0x08006be8
 8000bec:	08006bfc 	.word	0x08006bfc

08000bf0 <HAL_GPIO_EXTI_Falling_Callback>:

	HAL_TIM_Base_Stop(&htim16);

}

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000bf0:	b5b0      	push	{r4, r5, r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	0002      	movs	r2, r0
 8000bf8:	1dbb      	adds	r3, r7, #6
 8000bfa:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	1dbb      	adds	r3, r7, #6
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d113      	bne.n	8000c2e <HAL_GPIO_EXTI_Falling_Callback+0x3e>
		halRet = displayButtonISR();
 8000c06:	250f      	movs	r5, #15
 8000c08:	197c      	adds	r4, r7, r5
 8000c0a:	f000 f88f 	bl	8000d2c <displayButtonISR>
 8000c0e:	0003      	movs	r3, r0
 8000c10:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000c12:	197b      	adds	r3, r7, r5
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d004      	beq.n	8000c24 <HAL_GPIO_EXTI_Falling_Callback+0x34>
			printf("Error toggling display.\n\r");
 8000c1a:	4b3a      	ldr	r3, [pc, #232]	; (8000d04 <HAL_GPIO_EXTI_Falling_Callback+0x114>)
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f004 ffc5 	bl	8005bac <iprintf>
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8000c22:	e06a      	b.n	8000cfa <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Display intensity toggled.\n\r");
 8000c24:	4b38      	ldr	r3, [pc, #224]	; (8000d08 <HAL_GPIO_EXTI_Falling_Callback+0x118>)
 8000c26:	0018      	movs	r0, r3
 8000c28:	f004 ffc0 	bl	8005bac <iprintf>
}
 8000c2c:	e065      	b.n	8000cfa <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8000c2e:	2210      	movs	r2, #16
 8000c30:	1dbb      	adds	r3, r7, #6
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d113      	bne.n	8000c60 <HAL_GPIO_EXTI_Falling_Callback+0x70>
		halRet = alarmEnableISR();
 8000c38:	250f      	movs	r5, #15
 8000c3a:	197c      	adds	r4, r7, r5
 8000c3c:	f000 f8a6 	bl	8000d8c <alarmEnableISR>
 8000c40:	0003      	movs	r3, r0
 8000c42:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000c44:	197b      	adds	r3, r7, r5
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d004      	beq.n	8000c56 <HAL_GPIO_EXTI_Falling_Callback+0x66>
			printf("Error toggling user alarm.\n\r");
 8000c4c:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <HAL_GPIO_EXTI_Falling_Callback+0x11c>)
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f004 ffac 	bl	8005bac <iprintf>
}
 8000c54:	e051      	b.n	8000cfa <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm toggled.\n\r");
 8000c56:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <HAL_GPIO_EXTI_Falling_Callback+0x120>)
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f004 ffa7 	bl	8005bac <iprintf>
}
 8000c5e:	e04c      	b.n	8000cfa <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8000c60:	2202      	movs	r2, #2
 8000c62:	1dbb      	adds	r3, r7, #6
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d113      	bne.n	8000c92 <HAL_GPIO_EXTI_Falling_Callback+0xa2>
		halRet = alarmSetISR();
 8000c6a:	250f      	movs	r5, #15
 8000c6c:	197c      	adds	r4, r7, r5
 8000c6e:	f000 f8d9 	bl	8000e24 <alarmSetISR>
 8000c72:	0003      	movs	r3, r0
 8000c74:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000c76:	197b      	adds	r3, r7, r5
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d004      	beq.n	8000c88 <HAL_GPIO_EXTI_Falling_Callback+0x98>
			printf("Error setting user alarm.\n\r");
 8000c7e:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <HAL_GPIO_EXTI_Falling_Callback+0x124>)
 8000c80:	0018      	movs	r0, r3
 8000c82:	f004 ff93 	bl	8005bac <iprintf>
}
 8000c86:	e038      	b.n	8000cfa <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm set.\n\r");
 8000c88:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <HAL_GPIO_EXTI_Falling_Callback+0x128>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f004 ff8e 	bl	8005bac <iprintf>
}
 8000c90:	e033      	b.n	8000cfa <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == hourSetButtonPin) {
 8000c92:	2220      	movs	r2, #32
 8000c94:	1dbb      	adds	r3, r7, #6
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d113      	bne.n	8000cc4 <HAL_GPIO_EXTI_Falling_Callback+0xd4>
		halRet = hourSetISR();
 8000c9c:	250f      	movs	r5, #15
 8000c9e:	197c      	adds	r4, r7, r5
 8000ca0:	f000 f948 	bl	8000f34 <hourSetISR>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000ca8:	197b      	adds	r3, r7, r5
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d004      	beq.n	8000cba <HAL_GPIO_EXTI_Falling_Callback+0xca>
			printf("Error incrementing hour.\n\r");
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f004 ff7a 	bl	8005bac <iprintf>
}
 8000cb8:	e01f      	b.n	8000cfa <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Hour increment ISR success.\n\r");
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <HAL_GPIO_EXTI_Falling_Callback+0x130>)
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f004 ff75 	bl	8005bac <iprintf>
}
 8000cc2:	e01a      	b.n	8000cfa <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	015b      	lsls	r3, r3, #5
 8000cc8:	1dba      	adds	r2, r7, #6
 8000cca:	8812      	ldrh	r2, [r2, #0]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d113      	bne.n	8000cf8 <HAL_GPIO_EXTI_Falling_Callback+0x108>
		halRet = minuteSetISR();
 8000cd0:	250f      	movs	r5, #15
 8000cd2:	197c      	adds	r4, r7, r5
 8000cd4:	f000 f9da 	bl	800108c <minuteSetISR>
 8000cd8:	0003      	movs	r3, r0
 8000cda:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000cdc:	197b      	adds	r3, r7, r5
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d004      	beq.n	8000cee <HAL_GPIO_EXTI_Falling_Callback+0xfe>
			printf("Error incrementing minute.\n\r");
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_GPIO_EXTI_Falling_Callback+0x134>)
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f004 ff60 	bl	8005bac <iprintf>
}
 8000cec:	e005      	b.n	8000cfa <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Minute increment ISR success.\n\r");
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_GPIO_EXTI_Falling_Callback+0x138>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f004 ff5b 	bl	8005bac <iprintf>
}
 8000cf6:	e000      	b.n	8000cfa <HAL_GPIO_EXTI_Falling_Callback+0x10a>
		__NOP();
 8000cf8:	46c0      	nop			; (mov r8, r8)
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b004      	add	sp, #16
 8000d00:	bdb0      	pop	{r4, r5, r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	08006c54 	.word	0x08006c54
 8000d08:	08006c70 	.word	0x08006c70
 8000d0c:	08006c90 	.word	0x08006c90
 8000d10:	08006cb0 	.word	0x08006cb0
 8000d14:	08006cc8 	.word	0x08006cc8
 8000d18:	08006ce4 	.word	0x08006ce4
 8000d1c:	08006cf8 	.word	0x08006cf8
 8000d20:	08006d14 	.word	0x08006d14
 8000d24:	08006d34 	.word	0x08006d34
 8000d28:	08006d54 	.word	0x08006d54

08000d2c <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0

	printf("Entered display toggle ISR\n\r");
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <displayButtonISR+0x50>)
 8000d34:	0018      	movs	r0, r3
 8000d36:	f004 ff39 	bl	8005bac <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]

	sevSeg_setIntensity(&hi2c1, sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <displayButtonISR+0x54>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	001a      	movs	r2, r3
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <displayButtonISR+0x58>)
 8000d48:	5c9a      	ldrb	r2, [r3, r2]
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <displayButtonISR+0x5c>)
 8000d4c:	0011      	movs	r1, r2
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 fb9c 	bl	800148c <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <displayButtonISR+0x54>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d903      	bls.n	8000d64 <displayButtonISR+0x38>
		displayToggle = 0;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <displayButtonISR+0x54>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	e005      	b.n	8000d70 <displayButtonISR+0x44>
	} else {
		displayToggle++;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <displayButtonISR+0x54>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <displayButtonISR+0x54>)
 8000d6e:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	781b      	ldrb	r3, [r3, #0]

}
 8000d74:	0018      	movs	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	08006d74 	.word	0x08006d74
 8000d80:	200000bc 	.word	0x200000bc
 8000d84:	08007090 	.word	0x08007090
 8000d88:	200000c0 	.word	0x200000c0

08000d8c <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0

	printf("Entered alarm toggle ISR\n\r");
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <alarmEnableISR+0x80>)
 8000d94:	0018      	movs	r0, r3
 8000d96:	f004 ff09 	bl	8005bac <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <alarmEnableISR+0x84>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2201      	movs	r2, #1
 8000da6:	4053      	eors	r3, r2
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d014      	beq.n	8000dd8 <alarmEnableISR+0x4c>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_SET);			// Turn on alarm LED
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <alarmEnableISR+0x88>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	0018      	movs	r0, r3
 8000db6:	f001 f95e 	bl	8002076 <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <alarmEnableISR+0x84>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	701a      	strb	r2, [r3, #0]

		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <alarmEnableISR+0x8c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	0019      	movs	r1, r3
								userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <alarmEnableISR+0x8c>)
 8000dc8:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000dca:	001a      	movs	r2, r3
								userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <alarmEnableISR+0x8c>)
 8000dce:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000dd0:	4812      	ldr	r0, [pc, #72]	; (8000e1c <alarmEnableISR+0x90>)
 8000dd2:	f004 feeb 	bl	8005bac <iprintf>
 8000dd6:	e012      	b.n	8000dfe <alarmEnableISR+0x72>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <alarmEnableISR+0x84>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d00d      	beq.n	8000dfc <alarmEnableISR+0x70>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_RESET);			// Turn off alarm LED
 8000de0:	2180      	movs	r1, #128	; 0x80
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <alarmEnableISR+0x88>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	0018      	movs	r0, r3
 8000de8:	f001 f945 	bl	8002076 <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <alarmEnableISR+0x84>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]

		printf("User alarm disabled.\n\r");
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <alarmEnableISR+0x94>)
 8000df4:	0018      	movs	r0, r3
 8000df6:	f004 fed9 	bl	8005bac <iprintf>
 8000dfa:	e000      	b.n	8000dfe <alarmEnableISR+0x72>
	}
	else {
		__NOP();							//Code should never reach here.
 8000dfc:	46c0      	nop			; (mov r8, r8)
	}

	return halRet;
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]

}
 8000e02:	0018      	movs	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b002      	add	sp, #8
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	08006d94 	.word	0x08006d94
 8000e10:	200000bd 	.word	0x200000bd
 8000e14:	50000400 	.word	0x50000400
 8000e18:	20000238 	.word	0x20000238
 8000e1c:	08006db0 	.word	0x08006db0
 8000e20:	08006dd0 	.word	0x08006dd0

08000e24 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0

	printf("Enter user alarm set ISR.\n\r");
 8000e2a:	4b39      	ldr	r3, [pc, #228]	; (8000f10 <alarmSetISR+0xec>)
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f004 febd 	bl	8005bac <iprintf>

	getUserAlarmTime(&hrtc, &userAlarmTime);
 8000e32:	4a38      	ldr	r2, [pc, #224]	; (8000f14 <alarmSetISR+0xf0>)
 8000e34:	4b38      	ldr	r3, [pc, #224]	; (8000f18 <alarmSetISR+0xf4>)
 8000e36:	0011      	movs	r1, r2
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff fb25 	bl	8000488 <getUserAlarmTime>
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000e3e:	4b35      	ldr	r3, [pc, #212]	; (8000f14 <alarmSetISR+0xf0>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	0019      	movs	r1, r3
			userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000e44:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <alarmSetISR+0xf0>)
 8000e46:	785b      	ldrb	r3, [r3, #1]
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000e48:	001a      	movs	r2, r3
			userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000e4a:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <alarmSetISR+0xf0>)
 8000e4c:	789b      	ldrb	r3, [r3, #2]
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000e4e:	4833      	ldr	r0, [pc, #204]	; (8000f1c <alarmSetISR+0xf8>)
 8000e50:	f004 feac 	bl	8005bac <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim16);						// Begin timer 16 counting (to 500 ms)
 8000e5a:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <alarmSetISR+0xfc>)
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f004 f857 	bl	8004f10 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(&htim16);	// Get initial timer value to compare to
 8000e62:	4b2f      	ldr	r3, [pc, #188]	; (8000f20 <alarmSetISR+0xfc>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e68:	1dbb      	adds	r3, r7, #6
 8000e6a:	801a      	strh	r2, [r3, #0]
	bool displayBlink = false;
 8000e6c:	1d7b      	adds	r3, r7, #5
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]

	do {											// while the alarm set button is not held down, blink display.

		updateAndDisplayAlarm();
 8000e72:	f7ff fe3d 	bl	8000af0 <updateAndDisplayAlarm>

		if(__HAL_TIM_GET_COUNTER(&htim16) - timerVal >= (65536 / 2)) {
 8000e76:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <alarmSetISR+0xfc>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e7c:	1dbb      	adds	r3, r7, #6
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	1ad2      	subs	r2, r2, r3
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d31c      	bcc.n	8000ec4 <alarmSetISR+0xa0>

			sevSeg_setIntensity (&hi2c1, sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8000e8a:	1d7b      	adds	r3, r7, #5
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	4a25      	ldr	r2, [pc, #148]	; (8000f24 <alarmSetISR+0x100>)
 8000e90:	5cd2      	ldrb	r2, [r2, r3]
 8000e92:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <alarmSetISR+0x104>)
 8000e94:	0011      	movs	r1, r2
 8000e96:	0018      	movs	r0, r3
 8000e98:	f000 faf8 	bl	800148c <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(&htim16);
 8000e9c:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <alarmSetISR+0xfc>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ea2:	1dbb      	adds	r3, r7, #6
 8000ea4:	801a      	strh	r2, [r3, #0]
			displayBlink = !displayBlink;
 8000ea6:	1d7b      	adds	r3, r7, #5
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	1e5a      	subs	r2, r3, #1
 8000eac:	4193      	sbcs	r3, r2
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4053      	eors	r3, r2
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	001a      	movs	r2, r3
 8000eb8:	1d7b      	adds	r3, r7, #5
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	781a      	ldrb	r2, [r3, #0]
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	400a      	ands	r2, r1
 8000ec2:	701a      	strb	r2, [r3, #0]

		}

	}while(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == GPIO_PIN_RESET);
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	23a0      	movs	r3, #160	; 0xa0
 8000ec8:	05db      	lsls	r3, r3, #23
 8000eca:	0011      	movs	r1, r2
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f001 f8b5 	bl	800203c <HAL_GPIO_ReadPin>
 8000ed2:	1e03      	subs	r3, r0, #0
 8000ed4:	d0cd      	beq.n	8000e72 <alarmSetISR+0x4e>

	sevSeg_setIntensity(&hi2c1, sevSeg_intensityDuty[2]);
 8000ed6:	223f      	movs	r2, #63	; 0x3f
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <alarmSetISR+0x104>)
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f000 fad5 	bl	800148c <sevSeg_setIntensity>

	HAL_TIM_Base_Stop(&htim16);
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <alarmSetISR+0xfc>)
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f004 f85f 	bl	8004fa8 <HAL_TIM_Base_Stop>

	updateAndDisplayTime();
 8000eea:	f7ff fdcd 	bl	8000a88 <updateAndDisplayTime>
	printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <alarmSetISR+0x108>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	0019      	movs	r1, r3
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <alarmSetISR+0x108>)
 8000ef6:	785b      	ldrb	r3, [r3, #1]
 8000ef8:	001a      	movs	r2, r3
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <alarmSetISR+0x108>)
 8000efc:	789b      	ldrb	r3, [r3, #2]
 8000efe:	480c      	ldr	r0, [pc, #48]	; (8000f30 <alarmSetISR+0x10c>)
 8000f00:	f004 fe54 	bl	8005bac <iprintf>

	return halRet;
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	781b      	ldrb	r3, [r3, #0]

}
 8000f08:	0018      	movs	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	08006de8 	.word	0x08006de8
 8000f14:	20000238 	.word	0x20000238
 8000f18:	20000114 	.word	0x20000114
 8000f1c:	08006e04 	.word	0x08006e04
 8000f20:	20000140 	.word	0x20000140
 8000f24:	08007090 	.word	0x08007090
 8000f28:	200000c0 	.word	0x200000c0
 8000f2c:	20000220 	.word	0x20000220
 8000f30:	08006e2c 	.word	0x08006e2c

08000f34 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0

	printf("Entered hour set ISR.\n\r");
 8000f3a:	4b4c      	ldr	r3, [pc, #304]	; (800106c <hourSetISR+0x138>)
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f004 fe35 	bl	8005bac <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) != GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 8000f48:	2202      	movs	r2, #2
 8000f4a:	23a0      	movs	r3, #160	; 0xa0
 8000f4c:	05db      	lsls	r3, r3, #23
 8000f4e:	0011      	movs	r1, r2
 8000f50:	0018      	movs	r0, r3
 8000f52:	f001 f873 	bl	800203c <HAL_GPIO_ReadPin>
 8000f56:	0003      	movs	r3, r0
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d042      	beq.n	8000fe2 <hourSetISR+0xae>

		getUserAlarmTime(&hrtc, &userAlarmTime);
 8000f5c:	4a44      	ldr	r2, [pc, #272]	; (8001070 <hourSetISR+0x13c>)
 8000f5e:	4b45      	ldr	r3, [pc, #276]	; (8001074 <hourSetISR+0x140>)
 8000f60:	0011      	movs	r1, r2
 8000f62:	0018      	movs	r0, r3
 8000f64:	f7ff fa90 	bl	8000488 <getUserAlarmTime>

		if(userAlarmTime.Hours >= 12) {
 8000f68:	4b41      	ldr	r3, [pc, #260]	; (8001070 <hourSetISR+0x13c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b0b      	cmp	r3, #11
 8000f6e:	d90e      	bls.n	8000f8e <hourSetISR+0x5a>
			userAlarmTime.Hours = 1;
 8000f70:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <hourSetISR+0x13c>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8000f76:	4b3e      	ldr	r3, [pc, #248]	; (8001070 <hourSetISR+0x13c>)
 8000f78:	78db      	ldrb	r3, [r3, #3]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d103      	bne.n	8000f86 <hourSetISR+0x52>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8000f7e:	4b3c      	ldr	r3, [pc, #240]	; (8001070 <hourSetISR+0x13c>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	70da      	strb	r2, [r3, #3]
 8000f84:	e00f      	b.n	8000fa6 <hourSetISR+0x72>
			} else {
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000f86:	4b3a      	ldr	r3, [pc, #232]	; (8001070 <hourSetISR+0x13c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	70da      	strb	r2, [r3, #3]
 8000f8c:	e00b      	b.n	8000fa6 <hourSetISR+0x72>
			}
		}
		else if(userAlarmTime.Hours < 12) {
 8000f8e:	4b38      	ldr	r3, [pc, #224]	; (8001070 <hourSetISR+0x13c>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b0b      	cmp	r3, #11
 8000f94:	d806      	bhi.n	8000fa4 <hourSetISR+0x70>
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8000f96:	4b36      	ldr	r3, [pc, #216]	; (8001070 <hourSetISR+0x13c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b34      	ldr	r3, [pc, #208]	; (8001070 <hourSetISR+0x13c>)
 8000fa0:	701a      	strb	r2, [r3, #0]
 8000fa2:	e000      	b.n	8000fa6 <hourSetISR+0x72>
		}
		else {
			__NOP();
 8000fa4:	46c0      	nop			; (mov r8, r8)
		}

		userAlarmObj.AlarmTime = userAlarmTime;
 8000fa6:	4b34      	ldr	r3, [pc, #208]	; (8001078 <hourSetISR+0x144>)
 8000fa8:	4a31      	ldr	r2, [pc, #196]	; (8001070 <hourSetISR+0x13c>)
 8000faa:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000fac:	c313      	stmia	r3!, {r0, r1, r4}
 8000fae:	ca03      	ldmia	r2!, {r0, r1}
 8000fb0:	c303      	stmia	r3!, {r0, r1}

		HAL_RTC_SetAlarm_IT(&hrtc, &userAlarmObj, RTCTimeFormat);
 8000fb2:	4931      	ldr	r1, [pc, #196]	; (8001078 <hourSetISR+0x144>)
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <hourSetISR+0x140>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f003 fc11 	bl	80047e0 <HAL_RTC_SetAlarm_IT>
		getUserAlarmTime(&hrtc, &userAlarmTime);
 8000fbe:	4a2c      	ldr	r2, [pc, #176]	; (8001070 <hourSetISR+0x13c>)
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <hourSetISR+0x140>)
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff fa5f 	bl	8000488 <getUserAlarmTime>

		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 8000fca:	4b29      	ldr	r3, [pc, #164]	; (8001070 <hourSetISR+0x13c>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	0019      	movs	r1, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <hourSetISR+0x13c>)
 8000fd2:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 8000fd4:	001a      	movs	r2, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000fd6:	4b26      	ldr	r3, [pc, #152]	; (8001070 <hourSetISR+0x13c>)
 8000fd8:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 8000fda:	4828      	ldr	r0, [pc, #160]	; (800107c <hourSetISR+0x148>)
 8000fdc:	f004 fde6 	bl	8005bac <iprintf>
 8000fe0:	e03d      	b.n	800105e <hourSetISR+0x12a>

	}
	else {									// Otherwise, change current time hour.

		getRTCTime(&hrtc, &currTime, &currDate);
 8000fe2:	4a27      	ldr	r2, [pc, #156]	; (8001080 <hourSetISR+0x14c>)
 8000fe4:	4927      	ldr	r1, [pc, #156]	; (8001084 <hourSetISR+0x150>)
 8000fe6:	4b23      	ldr	r3, [pc, #140]	; (8001074 <hourSetISR+0x140>)
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f7ff fa37 	bl	800045c <getRTCTime>
		if(currTime.Hours >= 12) {
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <hourSetISR+0x150>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b0b      	cmp	r3, #11
 8000ff4:	d90e      	bls.n	8001014 <hourSetISR+0xe0>
			currTime.Hours = 1;
 8000ff6:	4b23      	ldr	r3, [pc, #140]	; (8001084 <hourSetISR+0x150>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
			if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <hourSetISR+0x150>)
 8000ffe:	78db      	ldrb	r3, [r3, #3]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d103      	bne.n	800100c <hourSetISR+0xd8>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <hourSetISR+0x150>)
 8001006:	2201      	movs	r2, #1
 8001008:	70da      	strb	r2, [r3, #3]
 800100a:	e00f      	b.n	800102c <hourSetISR+0xf8>
			} else {
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <hourSetISR+0x150>)
 800100e:	2200      	movs	r2, #0
 8001010:	70da      	strb	r2, [r3, #3]
 8001012:	e00b      	b.n	800102c <hourSetISR+0xf8>
			}
		}
		else if(currTime.Hours < 12) {
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <hourSetISR+0x150>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b0b      	cmp	r3, #11
 800101a:	d806      	bhi.n	800102a <hourSetISR+0xf6>
			currTime.Hours = currTime.Hours + 1;
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <hourSetISR+0x150>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <hourSetISR+0x150>)
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e000      	b.n	800102c <hourSetISR+0xf8>
		}
		else {
			__NOP();
 800102a:	46c0      	nop			; (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 800102c:	4915      	ldr	r1, [pc, #84]	; (8001084 <hourSetISR+0x150>)
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <hourSetISR+0x140>)
 8001030:	2200      	movs	r2, #0
 8001032:	0018      	movs	r0, r3
 8001034:	f003 f9f0 	bl	8004418 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8001038:	f7ff fd26 	bl	8000a88 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 800103c:	4a10      	ldr	r2, [pc, #64]	; (8001080 <hourSetISR+0x14c>)
 800103e:	4911      	ldr	r1, [pc, #68]	; (8001084 <hourSetISR+0x150>)
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <hourSetISR+0x140>)
 8001042:	0018      	movs	r0, r3
 8001044:	f7ff fa0a 	bl	800045c <getRTCTime>

		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <hourSetISR+0x150>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <hourSetISR+0x150>)
 8001050:	785b      	ldrb	r3, [r3, #1]
		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001052:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <hourSetISR+0x150>)
 8001056:	789b      	ldrb	r3, [r3, #2]
		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001058:	480b      	ldr	r0, [pc, #44]	; (8001088 <hourSetISR+0x154>)
 800105a:	f004 fda7 	bl	8005bac <iprintf>
	}

	return halRet;
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	781b      	ldrb	r3, [r3, #0]
}
 8001062:	0018      	movs	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	b003      	add	sp, #12
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	08006e50 	.word	0x08006e50
 8001070:	20000238 	.word	0x20000238
 8001074:	20000114 	.word	0x20000114
 8001078:	2000024c 	.word	0x2000024c
 800107c:	08006e68 	.word	0x08006e68
 8001080:	20000234 	.word	0x20000234
 8001084:	20000220 	.word	0x20000220
 8001088:	08006e94 	.word	0x08006e94

0800108c <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0

	printf("Entered minute set ISR.\n\r");
 8001092:	4b63      	ldr	r3, [pc, #396]	; (8001220 <minuteSetISR+0x194>)
 8001094:	0018      	movs	r0, r3
 8001096:	f004 fd89 	bl	8005bac <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == !GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 80010a0:	2202      	movs	r2, #2
 80010a2:	23a0      	movs	r3, #160	; 0xa0
 80010a4:	05db      	lsls	r3, r3, #23
 80010a6:	0011      	movs	r1, r2
 80010a8:	0018      	movs	r0, r3
 80010aa:	f000 ffc7 	bl	800203c <HAL_GPIO_ReadPin>
 80010ae:	1e03      	subs	r3, r0, #0
 80010b0:	d157      	bne.n	8001162 <minuteSetISR+0xd6>

		getUserAlarmTime(&hrtc, &userAlarmTime);
 80010b2:	4a5c      	ldr	r2, [pc, #368]	; (8001224 <minuteSetISR+0x198>)
 80010b4:	4b5c      	ldr	r3, [pc, #368]	; (8001228 <minuteSetISR+0x19c>)
 80010b6:	0011      	movs	r1, r2
 80010b8:	0018      	movs	r0, r3
 80010ba:	f7ff f9e5 	bl	8000488 <getUserAlarmTime>

		if(userAlarmTime.Minutes >= 59) {
 80010be:	4b59      	ldr	r3, [pc, #356]	; (8001224 <minuteSetISR+0x198>)
 80010c0:	785b      	ldrb	r3, [r3, #1]
 80010c2:	2b3a      	cmp	r3, #58	; 0x3a
 80010c4:	d929      	bls.n	800111a <minuteSetISR+0x8e>
			userAlarmTime.Minutes = 0;
 80010c6:	4b57      	ldr	r3, [pc, #348]	; (8001224 <minuteSetISR+0x198>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	705a      	strb	r2, [r3, #1]
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 80010cc:	4b55      	ldr	r3, [pc, #340]	; (8001224 <minuteSetISR+0x198>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b53      	ldr	r3, [pc, #332]	; (8001224 <minuteSetISR+0x198>)
 80010d6:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.Hours > 12) {
 80010d8:	4b52      	ldr	r3, [pc, #328]	; (8001224 <minuteSetISR+0x198>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b0c      	cmp	r3, #12
 80010de:	d902      	bls.n	80010e6 <minuteSetISR+0x5a>
				userAlarmTime.Hours = 1;
 80010e0:	4b50      	ldr	r3, [pc, #320]	; (8001224 <minuteSetISR+0x198>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
			}
			if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80010e6:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <minuteSetISR+0x198>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b0c      	cmp	r3, #12
 80010ec:	d107      	bne.n	80010fe <minuteSetISR+0x72>
 80010ee:	4b4d      	ldr	r3, [pc, #308]	; (8001224 <minuteSetISR+0x198>)
 80010f0:	78db      	ldrb	r3, [r3, #3]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d103      	bne.n	80010fe <minuteSetISR+0x72>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80010f6:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <minuteSetISR+0x198>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	70da      	strb	r2, [r3, #3]
 80010fc:	e019      	b.n	8001132 <minuteSetISR+0xa6>
			} else if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 80010fe:	4b49      	ldr	r3, [pc, #292]	; (8001224 <minuteSetISR+0x198>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b0c      	cmp	r3, #12
 8001104:	d107      	bne.n	8001116 <minuteSetISR+0x8a>
 8001106:	4b47      	ldr	r3, [pc, #284]	; (8001224 <minuteSetISR+0x198>)
 8001108:	78db      	ldrb	r3, [r3, #3]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d103      	bne.n	8001116 <minuteSetISR+0x8a>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800110e:	4b45      	ldr	r3, [pc, #276]	; (8001224 <minuteSetISR+0x198>)
 8001110:	2200      	movs	r2, #0
 8001112:	70da      	strb	r2, [r3, #3]
 8001114:	e00d      	b.n	8001132 <minuteSetISR+0xa6>
			}
			else {
				__NOP();
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	e00b      	b.n	8001132 <minuteSetISR+0xa6>
			}
		}
		else if(userAlarmTime.Minutes < 59) {
 800111a:	4b42      	ldr	r3, [pc, #264]	; (8001224 <minuteSetISR+0x198>)
 800111c:	785b      	ldrb	r3, [r3, #1]
 800111e:	2b3a      	cmp	r3, #58	; 0x3a
 8001120:	d806      	bhi.n	8001130 <minuteSetISR+0xa4>
			userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001122:	4b40      	ldr	r3, [pc, #256]	; (8001224 <minuteSetISR+0x198>)
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	3301      	adds	r3, #1
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b3e      	ldr	r3, [pc, #248]	; (8001224 <minuteSetISR+0x198>)
 800112c:	705a      	strb	r2, [r3, #1]
 800112e:	e000      	b.n	8001132 <minuteSetISR+0xa6>
		}
		else {
			__NOP();
 8001130:	46c0      	nop			; (mov r8, r8)
		}

		userAlarmObj.AlarmTime = userAlarmTime;
 8001132:	4b3e      	ldr	r3, [pc, #248]	; (800122c <minuteSetISR+0x1a0>)
 8001134:	4a3b      	ldr	r2, [pc, #236]	; (8001224 <minuteSetISR+0x198>)
 8001136:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001138:	c313      	stmia	r3!, {r0, r1, r4}
 800113a:	ca03      	ldmia	r2!, {r0, r1}
 800113c:	c303      	stmia	r3!, {r0, r1}

		HAL_RTC_SetAlarm_IT(&hrtc, &userAlarmObj, RTCTimeFormat);
 800113e:	493b      	ldr	r1, [pc, #236]	; (800122c <minuteSetISR+0x1a0>)
 8001140:	4b39      	ldr	r3, [pc, #228]	; (8001228 <minuteSetISR+0x19c>)
 8001142:	2200      	movs	r2, #0
 8001144:	0018      	movs	r0, r3
 8001146:	f003 fb4b 	bl	80047e0 <HAL_RTC_SetAlarm_IT>

		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmObj.AlarmTime.Hours,
 800114a:	4b38      	ldr	r3, [pc, #224]	; (800122c <minuteSetISR+0x1a0>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	0019      	movs	r1, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 8001150:	4b36      	ldr	r3, [pc, #216]	; (800122c <minuteSetISR+0x1a0>)
 8001152:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmObj.AlarmTime.Hours,
 8001154:	001a      	movs	r2, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 8001156:	4b35      	ldr	r3, [pc, #212]	; (800122c <minuteSetISR+0x1a0>)
 8001158:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmObj.AlarmTime.Hours,
 800115a:	4835      	ldr	r0, [pc, #212]	; (8001230 <minuteSetISR+0x1a4>)
 800115c:	f004 fd26 	bl	8005bac <iprintf>
 8001160:	e058      	b.n	8001214 <minuteSetISR+0x188>

	}
	else {									// Otherwise, change current time hour.

		getRTCTime(&hrtc, &currTime, &currDate);
 8001162:	4a34      	ldr	r2, [pc, #208]	; (8001234 <minuteSetISR+0x1a8>)
 8001164:	4934      	ldr	r1, [pc, #208]	; (8001238 <minuteSetISR+0x1ac>)
 8001166:	4b30      	ldr	r3, [pc, #192]	; (8001228 <minuteSetISR+0x19c>)
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff f977 	bl	800045c <getRTCTime>

		if(currTime.Minutes >= 59) {
 800116e:	4b32      	ldr	r3, [pc, #200]	; (8001238 <minuteSetISR+0x1ac>)
 8001170:	785b      	ldrb	r3, [r3, #1]
 8001172:	2b3a      	cmp	r3, #58	; 0x3a
 8001174:	d929      	bls.n	80011ca <minuteSetISR+0x13e>
			currTime.Minutes = 0;
 8001176:	4b30      	ldr	r3, [pc, #192]	; (8001238 <minuteSetISR+0x1ac>)
 8001178:	2200      	movs	r2, #0
 800117a:	705a      	strb	r2, [r3, #1]
			currTime.Hours = currTime.Hours + 1;
 800117c:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <minuteSetISR+0x1ac>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <minuteSetISR+0x1ac>)
 8001186:	701a      	strb	r2, [r3, #0]
			if(currTime.Hours > 12) {
 8001188:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <minuteSetISR+0x1ac>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b0c      	cmp	r3, #12
 800118e:	d902      	bls.n	8001196 <minuteSetISR+0x10a>
				currTime.Hours = 1;
 8001190:	4b29      	ldr	r3, [pc, #164]	; (8001238 <minuteSetISR+0x1ac>)
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
			}
			if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <minuteSetISR+0x1ac>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b0c      	cmp	r3, #12
 800119c:	d107      	bne.n	80011ae <minuteSetISR+0x122>
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <minuteSetISR+0x1ac>)
 80011a0:	78db      	ldrb	r3, [r3, #3]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d103      	bne.n	80011ae <minuteSetISR+0x122>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80011a6:	4b24      	ldr	r3, [pc, #144]	; (8001238 <minuteSetISR+0x1ac>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	70da      	strb	r2, [r3, #3]
 80011ac:	e019      	b.n	80011e2 <minuteSetISR+0x156>
			} else if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 80011ae:	4b22      	ldr	r3, [pc, #136]	; (8001238 <minuteSetISR+0x1ac>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b0c      	cmp	r3, #12
 80011b4:	d107      	bne.n	80011c6 <minuteSetISR+0x13a>
 80011b6:	4b20      	ldr	r3, [pc, #128]	; (8001238 <minuteSetISR+0x1ac>)
 80011b8:	78db      	ldrb	r3, [r3, #3]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d103      	bne.n	80011c6 <minuteSetISR+0x13a>
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80011be:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <minuteSetISR+0x1ac>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	70da      	strb	r2, [r3, #3]
 80011c4:	e00d      	b.n	80011e2 <minuteSetISR+0x156>
			}
			else {
				__NOP();
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	e00b      	b.n	80011e2 <minuteSetISR+0x156>
			}
		}
		else if(currTime.Minutes < 59) {
 80011ca:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <minuteSetISR+0x1ac>)
 80011cc:	785b      	ldrb	r3, [r3, #1]
 80011ce:	2b3a      	cmp	r3, #58	; 0x3a
 80011d0:	d806      	bhi.n	80011e0 <minuteSetISR+0x154>
			currTime.Minutes = currTime.Minutes + 1;
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <minuteSetISR+0x1ac>)
 80011d4:	785b      	ldrb	r3, [r3, #1]
 80011d6:	3301      	adds	r3, #1
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <minuteSetISR+0x1ac>)
 80011dc:	705a      	strb	r2, [r3, #1]
 80011de:	e000      	b.n	80011e2 <minuteSetISR+0x156>
		}
		else {
			__NOP();
 80011e0:	46c0      	nop			; (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80011e2:	4915      	ldr	r1, [pc, #84]	; (8001238 <minuteSetISR+0x1ac>)
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <minuteSetISR+0x19c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	0018      	movs	r0, r3
 80011ea:	f003 f915 	bl	8004418 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80011ee:	f7ff fc4b 	bl	8000a88 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80011f2:	4a10      	ldr	r2, [pc, #64]	; (8001234 <minuteSetISR+0x1a8>)
 80011f4:	4910      	ldr	r1, [pc, #64]	; (8001238 <minuteSetISR+0x1ac>)
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <minuteSetISR+0x19c>)
 80011f8:	0018      	movs	r0, r3
 80011fa:	f7ff f92f 	bl	800045c <getRTCTime>

		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <minuteSetISR+0x1ac>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <minuteSetISR+0x1ac>)
 8001206:	785b      	ldrb	r3, [r3, #1]
		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001208:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <minuteSetISR+0x1ac>)
 800120c:	789b      	ldrb	r3, [r3, #2]
		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <minuteSetISR+0x1b0>)
 8001210:	f004 fccc 	bl	8005bac <iprintf>
	}

	return halRet;
 8001214:	1dfb      	adds	r3, r7, #7
 8001216:	781b      	ldrb	r3, [r3, #0]
}
 8001218:	0018      	movs	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	b003      	add	sp, #12
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	08006ec4 	.word	0x08006ec4
 8001224:	20000238 	.word	0x20000238
 8001228:	20000114 	.word	0x20000114
 800122c:	2000024c 	.word	0x2000024c
 8001230:	08006ee0 	.word	0x08006ee0
 8001234:	20000234 	.word	0x20000234
 8001238:	20000220 	.word	0x20000220
 800123c:	08006f0c 	.word	0x08006f0c

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	e7fe      	b.n	8001248 <Error_Handler+0x8>
	...

0800124c <sevSeg_I2C1_Init>:
uint8_t sevSeg_digit1Buff[2] = {sevSeg_digit1Reg, dispDigits[0]};
uint8_t sevSeg_digit2Buff[2] = {sevSeg_digit2Reg, dispDigits[0]};
uint8_t sevSeg_digit3Buff[2] = {sevSeg_digit3Reg, dispDigits[0]};


void sevSeg_I2C1_Init(I2C_HandleTypeDef *hi2c1) {
 800124c:	b5b0      	push	{r4, r5, r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af02      	add	r7, sp, #8
 8001252:	6078      	str	r0, [r7, #4]
	 */

	HAL_StatusTypeDef halRetI2C;			// HAL status to monitor I2C initialization status

	//Set display to decode hex data inputs
	halRetI2C = HAL_I2C_Master_Transmit(hi2c1, sevSeg_addr, sevSeg_decodeBuffer, 2, HAL_MAX_DELAY);
 8001254:	4b49      	ldr	r3, [pc, #292]	; (800137c <sevSeg_I2C1_Init+0x130>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b299      	uxth	r1, r3
 800125a:	250f      	movs	r5, #15
 800125c:	197c      	adds	r4, r7, r5
 800125e:	4a48      	ldr	r2, [pc, #288]	; (8001380 <sevSeg_I2C1_Init+0x134>)
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	2301      	movs	r3, #1
 8001264:	425b      	negs	r3, r3
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2302      	movs	r3, #2
 800126a:	f000 ffeb 	bl	8002244 <HAL_I2C_Master_Transmit>
 800126e:	0003      	movs	r3, r0
 8001270:	7023      	strb	r3, [r4, #0]

	if(halRetI2C != HAL_OK) {		//check HAL
 8001272:	197b      	adds	r3, r7, r5
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d004      	beq.n	8001284 <sevSeg_I2C1_Init+0x38>
		printf("HAL Error - TX decode mode\n\r");
 800127a:	4b42      	ldr	r3, [pc, #264]	; (8001384 <sevSeg_I2C1_Init+0x138>)
 800127c:	0018      	movs	r0, r3
 800127e:	f004 fc95 	bl	8005bac <iprintf>
 8001282:	e003      	b.n	800128c <sevSeg_I2C1_Init+0x40>
	} else{
		printf("Display set to decode mode\n\r");
 8001284:	4b40      	ldr	r3, [pc, #256]	; (8001388 <sevSeg_I2C1_Init+0x13c>)
 8001286:	0018      	movs	r0, r3
 8001288:	f004 fc90 	bl	8005bac <iprintf>
	}

	//Disable shutdown mode
	halRetI2C = HAL_I2C_Master_Transmit(hi2c1, sevSeg_addr, sevSeg_SD_ONBuff, 2, HAL_MAX_DELAY);
 800128c:	4b3b      	ldr	r3, [pc, #236]	; (800137c <sevSeg_I2C1_Init+0x130>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b299      	uxth	r1, r3
 8001292:	250f      	movs	r5, #15
 8001294:	197c      	adds	r4, r7, r5
 8001296:	4a3d      	ldr	r2, [pc, #244]	; (800138c <sevSeg_I2C1_Init+0x140>)
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	2301      	movs	r3, #1
 800129c:	425b      	negs	r3, r3
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2302      	movs	r3, #2
 80012a2:	f000 ffcf 	bl	8002244 <HAL_I2C_Master_Transmit>
 80012a6:	0003      	movs	r3, r0
 80012a8:	7023      	strb	r3, [r4, #0]

	if(halRetI2C != HAL_OK) {		//check HAL
 80012aa:	197b      	adds	r3, r7, r5
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d004      	beq.n	80012bc <sevSeg_I2C1_Init+0x70>
		printf("HAL Error - TX disable shutdown mode\n\r");
 80012b2:	4b37      	ldr	r3, [pc, #220]	; (8001390 <sevSeg_I2C1_Init+0x144>)
 80012b4:	0018      	movs	r0, r3
 80012b6:	f004 fc79 	bl	8005bac <iprintf>
 80012ba:	e003      	b.n	80012c4 <sevSeg_I2C1_Init+0x78>
	} else {
		printf("Display shutdown mode disabled\n\r");
 80012bc:	4b35      	ldr	r3, [pc, #212]	; (8001394 <sevSeg_I2C1_Init+0x148>)
 80012be:	0018      	movs	r0, r3
 80012c0:	f004 fc74 	bl	8005bac <iprintf>
	}

	//Set to test mode
	halRetI2C = HAL_I2C_Master_Transmit(hi2c1, sevSeg_addr, sevSeg_testONBuff, 2, HAL_MAX_DELAY);
 80012c4:	4b2d      	ldr	r3, [pc, #180]	; (800137c <sevSeg_I2C1_Init+0x130>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b299      	uxth	r1, r3
 80012ca:	250f      	movs	r5, #15
 80012cc:	197c      	adds	r4, r7, r5
 80012ce:	4a32      	ldr	r2, [pc, #200]	; (8001398 <sevSeg_I2C1_Init+0x14c>)
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	2301      	movs	r3, #1
 80012d4:	425b      	negs	r3, r3
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2302      	movs	r3, #2
 80012da:	f000 ffb3 	bl	8002244 <HAL_I2C_Master_Transmit>
 80012de:	0003      	movs	r3, r0
 80012e0:	7023      	strb	r3, [r4, #0]

	if(halRetI2C != HAL_OK) {		//check HAL
 80012e2:	197b      	adds	r3, r7, r5
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d004      	beq.n	80012f4 <sevSeg_I2C1_Init+0xa8>
		printf("HAL Error - TX test mode ON data\n\r");
 80012ea:	4b2c      	ldr	r3, [pc, #176]	; (800139c <sevSeg_I2C1_Init+0x150>)
 80012ec:	0018      	movs	r0, r3
 80012ee:	f004 fc5d 	bl	8005bac <iprintf>
 80012f2:	e003      	b.n	80012fc <sevSeg_I2C1_Init+0xb0>
	} else {
		printf("Test mode enabled - all LEDs on\n\r");
 80012f4:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <sevSeg_I2C1_Init+0x154>)
 80012f6:	0018      	movs	r0, r3
 80012f8:	f004 fc58 	bl	8005bac <iprintf>
	}

	// Disable test mode
	halRetI2C = HAL_I2C_Master_Transmit(hi2c1, sevSeg_addr, sevSeg_testOFFBuff, 2, HAL_MAX_DELAY);
 80012fc:	4b1f      	ldr	r3, [pc, #124]	; (800137c <sevSeg_I2C1_Init+0x130>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b299      	uxth	r1, r3
 8001302:	250f      	movs	r5, #15
 8001304:	197c      	adds	r4, r7, r5
 8001306:	4a27      	ldr	r2, [pc, #156]	; (80013a4 <sevSeg_I2C1_Init+0x158>)
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	2301      	movs	r3, #1
 800130c:	425b      	negs	r3, r3
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2302      	movs	r3, #2
 8001312:	f000 ff97 	bl	8002244 <HAL_I2C_Master_Transmit>
 8001316:	0003      	movs	r3, r0
 8001318:	7023      	strb	r3, [r4, #0]

	if(halRetI2C != HAL_OK) {		//check HAL
 800131a:	197b      	adds	r3, r7, r5
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d004      	beq.n	800132c <sevSeg_I2C1_Init+0xe0>
		printf("HAL Error - TX test mode OFF data\n\r");
 8001322:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <sevSeg_I2C1_Init+0x15c>)
 8001324:	0018      	movs	r0, r3
 8001326:	f004 fc41 	bl	8005bac <iprintf>
 800132a:	e003      	b.n	8001334 <sevSeg_I2C1_Init+0xe8>
	} else {
		printf("Test mode disabled - all LEDs off\n\r");
 800132c:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <sevSeg_I2C1_Init+0x160>)
 800132e:	0018      	movs	r0, r3
 8001330:	f004 fc3c 	bl	8005bac <iprintf>
	}

	sevSeg_intensityBuff[1] = 31;		// Initialize to 50% duty cycle
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <sevSeg_I2C1_Init+0x164>)
 8001336:	221f      	movs	r2, #31
 8001338:	705a      	strb	r2, [r3, #1]
	halRetI2C = HAL_I2C_Master_Transmit(hi2c1, sevSeg_addr, sevSeg_intensityBuff, 2, HAL_MAX_DELAY);
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <sevSeg_I2C1_Init+0x130>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	b299      	uxth	r1, r3
 8001340:	250f      	movs	r5, #15
 8001342:	197c      	adds	r4, r7, r5
 8001344:	4a1a      	ldr	r2, [pc, #104]	; (80013b0 <sevSeg_I2C1_Init+0x164>)
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	2301      	movs	r3, #1
 800134a:	425b      	negs	r3, r3
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2302      	movs	r3, #2
 8001350:	f000 ff78 	bl	8002244 <HAL_I2C_Master_Transmit>
 8001354:	0003      	movs	r3, r0
 8001356:	7023      	strb	r3, [r4, #0]

	if(halRetI2C != HAL_OK) {		//check HAL
 8001358:	197b      	adds	r3, r7, r5
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d004      	beq.n	800136a <sevSeg_I2C1_Init+0x11e>
		printf("HAL Error - TX intensity level data\n\r");
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <sevSeg_I2C1_Init+0x168>)
 8001362:	0018      	movs	r0, r3
 8001364:	f004 fc22 	bl	8005bac <iprintf>
	} else {
		printf("Intensity Set\n\r");
	}

	return;
 8001368:	e004      	b.n	8001374 <sevSeg_I2C1_Init+0x128>
		printf("Intensity Set\n\r");
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <sevSeg_I2C1_Init+0x16c>)
 800136c:	0018      	movs	r0, r3
 800136e:	f004 fc1d 	bl	8005bac <iprintf>
	return;
 8001372:	46c0      	nop			; (mov r8, r8)

}
 8001374:	46bd      	mov	sp, r7
 8001376:	b004      	add	sp, #16
 8001378:	bdb0      	pop	{r4, r5, r7, pc}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	20000000 	.word	0x20000000
 8001380:	20000004 	.word	0x20000004
 8001384:	08006f3c 	.word	0x08006f3c
 8001388:	08006f5c 	.word	0x08006f5c
 800138c:	2000000c 	.word	0x2000000c
 8001390:	08006f7c 	.word	0x08006f7c
 8001394:	08006fa4 	.word	0x08006fa4
 8001398:	2000001c 	.word	0x2000001c
 800139c:	08006fc8 	.word	0x08006fc8
 80013a0:	08006fec 	.word	0x08006fec
 80013a4:	20000018 	.word	0x20000018
 80013a8:	08007010 	.word	0x08007010
 80013ac:	08007034 	.word	0x08007034
 80013b0:	20000008 	.word	0x20000008
 80013b4:	08007058 	.word	0x08007058
 80013b8:	08007080 	.word	0x08007080

080013bc <sevSeg_updateDigits>:

void sevSeg_updateDigits(I2C_HandleTypeDef *hi2c1, RTC_TimeTypeDef *updateTime) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]

	sevSeg_digit0Buff[1] = updateTime->Hours / 10;		// second digit of hours value
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	210a      	movs	r1, #10
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7fe fea3 	bl	8000118 <__udivsi3>
 80013d2:	0003      	movs	r3, r0
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b28      	ldr	r3, [pc, #160]	; (8001478 <sevSeg_updateDigits+0xbc>)
 80013d8:	705a      	strb	r2, [r3, #1]
	sevSeg_digit1Buff[1] = updateTime->Hours % 10;		// first digit of hours value
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	210a      	movs	r1, #10
 80013e0:	0018      	movs	r0, r3
 80013e2:	f7fe ff1f 	bl	8000224 <__aeabi_uidivmod>
 80013e6:	000b      	movs	r3, r1
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b24      	ldr	r3, [pc, #144]	; (800147c <sevSeg_updateDigits+0xc0>)
 80013ec:	705a      	strb	r2, [r3, #1]
	sevSeg_digit2Buff[1] = updateTime->Minutes / 10;	// second digit of minutes value
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	785b      	ldrb	r3, [r3, #1]
 80013f2:	210a      	movs	r1, #10
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7fe fe8f 	bl	8000118 <__udivsi3>
 80013fa:	0003      	movs	r3, r0
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <sevSeg_updateDigits+0xc4>)
 8001400:	705a      	strb	r2, [r3, #1]
	sevSeg_digit3Buff[1] = updateTime->Minutes % 10;	// first digit of minutes value
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	210a      	movs	r1, #10
 8001408:	0018      	movs	r0, r3
 800140a:	f7fe ff0b 	bl	8000224 <__aeabi_uidivmod>
 800140e:	000b      	movs	r3, r1
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <sevSeg_updateDigits+0xc8>)
 8001414:	705a      	strb	r2, [r3, #1]

	// Transmit updated time digits to display digits
	HAL_I2C_Master_Transmit(hi2c1, sevSeg_addr, sevSeg_digit0Buff, 2, HAL_MAX_DELAY);
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <sevSeg_updateDigits+0xcc>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b299      	uxth	r1, r3
 800141c:	4a16      	ldr	r2, [pc, #88]	; (8001478 <sevSeg_updateDigits+0xbc>)
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	2301      	movs	r3, #1
 8001422:	425b      	negs	r3, r3
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2302      	movs	r3, #2
 8001428:	f000 ff0c 	bl	8002244 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(hi2c1, sevSeg_addr, sevSeg_digit1Buff, 2, HAL_MAX_DELAY);
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <sevSeg_updateDigits+0xcc>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b299      	uxth	r1, r3
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <sevSeg_updateDigits+0xc0>)
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	2301      	movs	r3, #1
 8001438:	425b      	negs	r3, r3
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2302      	movs	r3, #2
 800143e:	f000 ff01 	bl	8002244 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(hi2c1, sevSeg_addr, sevSeg_digit2Buff, 2, HAL_MAX_DELAY);
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <sevSeg_updateDigits+0xcc>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b299      	uxth	r1, r3
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <sevSeg_updateDigits+0xc4>)
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	2301      	movs	r3, #1
 800144e:	425b      	negs	r3, r3
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2302      	movs	r3, #2
 8001454:	f000 fef6 	bl	8002244 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(hi2c1, sevSeg_addr, sevSeg_digit3Buff, 2, HAL_MAX_DELAY);
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <sevSeg_updateDigits+0xcc>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b299      	uxth	r1, r3
 800145e:	4a09      	ldr	r2, [pc, #36]	; (8001484 <sevSeg_updateDigits+0xc8>)
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	2301      	movs	r3, #1
 8001464:	425b      	negs	r3, r3
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	2302      	movs	r3, #2
 800146a:	f000 feeb 	bl	8002244 <HAL_I2C_Master_Transmit>

	return;
 800146e:	46c0      	nop			; (mov r8, r8)

}
 8001470:	46bd      	mov	sp, r7
 8001472:	b002      	add	sp, #8
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	20000020 	.word	0x20000020
 800147c:	20000024 	.word	0x20000024
 8001480:	20000028 	.word	0x20000028
 8001484:	2000002c 	.word	0x2000002c
 8001488:	20000000 	.word	0x20000000

0800148c <sevSeg_setIntensity>:

void sevSeg_setIntensity(I2C_HandleTypeDef *hi2c1, uint8_t dutyCycle) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af02      	add	r7, sp, #8
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	000a      	movs	r2, r1
 8001496:	1cfb      	adds	r3, r7, #3
 8001498:	701a      	strb	r2, [r3, #0]

	if(dutyCycle >= 0 && dutyCycle <= 63) {		// Only change intensity if input is between 0 and 63.
 800149a:	1cfb      	adds	r3, r7, #3
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b3f      	cmp	r3, #63	; 0x3f
 80014a0:	d80e      	bhi.n	80014c0 <sevSeg_setIntensity+0x34>

		sevSeg_intensityBuff[1] = dutyCycle;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <sevSeg_setIntensity+0x3c>)
 80014a4:	1cfa      	adds	r2, r7, #3
 80014a6:	7812      	ldrb	r2, [r2, #0]
 80014a8:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(hi2c1, sevSeg_addr, sevSeg_intensityBuff, 2, HAL_MAX_DELAY);
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <sevSeg_setIntensity+0x40>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b299      	uxth	r1, r3
 80014b0:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <sevSeg_setIntensity+0x3c>)
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	2301      	movs	r3, #1
 80014b6:	425b      	negs	r3, r3
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2302      	movs	r3, #2
 80014bc:	f000 fec2 	bl	8002244 <HAL_I2C_Master_Transmit>

	}

}
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b002      	add	sp, #8
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000000 	.word	0x20000000

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <HAL_MspInit+0x54>)
 80014d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_MspInit+0x54>)
 80014dc:	2101      	movs	r1, #1
 80014de:	430a      	orrs	r2, r1
 80014e0:	641a      	str	r2, [r3, #64]	; 0x40
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_MspInit+0x54>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	2201      	movs	r2, #1
 80014e8:	4013      	ands	r3, r2
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_MspInit+0x54>)
 80014f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_MspInit+0x54>)
 80014f4:	2180      	movs	r1, #128	; 0x80
 80014f6:	0549      	lsls	r1, r1, #21
 80014f8:	430a      	orrs	r2, r1
 80014fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_MspInit+0x54>)
 80014fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	055b      	lsls	r3, r3, #21
 8001504:	4013      	ands	r3, r2
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	2001      	movs	r0, #1
 8001510:	f000 fb88 	bl	8001c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001514:	2001      	movs	r0, #1
 8001516:	f000 fb9a 	bl	8001c4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b002      	add	sp, #8
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b095      	sub	sp, #84	; 0x54
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	233c      	movs	r3, #60	; 0x3c
 8001532:	18fb      	adds	r3, r7, r3
 8001534:	0018      	movs	r0, r3
 8001536:	2314      	movs	r3, #20
 8001538:	001a      	movs	r2, r3
 800153a:	2100      	movs	r1, #0
 800153c:	f004 fb2e 	bl	8005b9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001540:	2414      	movs	r4, #20
 8001542:	193b      	adds	r3, r7, r4
 8001544:	0018      	movs	r0, r3
 8001546:	2328      	movs	r3, #40	; 0x28
 8001548:	001a      	movs	r2, r3
 800154a:	2100      	movs	r1, #0
 800154c:	f004 fb26 	bl	8005b9c <memset>
  if(hi2c->Instance==I2C1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a26      	ldr	r2, [pc, #152]	; (80015f0 <HAL_I2C_MspInit+0xc8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d146      	bne.n	80015e8 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800155a:	193b      	adds	r3, r7, r4
 800155c:	2220      	movs	r2, #32
 800155e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001560:	193b      	adds	r3, r7, r4
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001566:	193b      	adds	r3, r7, r4
 8001568:	0018      	movs	r0, r3
 800156a:	f002 fd39 	bl	8003fe0 <HAL_RCCEx_PeriphCLKConfig>
 800156e:	1e03      	subs	r3, r0, #0
 8001570:	d001      	beq.n	8001576 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001572:	f7ff fe65 	bl	8001240 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <HAL_I2C_MspInit+0xcc>)
 8001578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <HAL_I2C_MspInit+0xcc>)
 800157c:	2102      	movs	r1, #2
 800157e:	430a      	orrs	r2, r1
 8001580:	635a      	str	r2, [r3, #52]	; 0x34
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <HAL_I2C_MspInit+0xcc>)
 8001584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001586:	2202      	movs	r2, #2
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800158e:	213c      	movs	r1, #60	; 0x3c
 8001590:	187b      	adds	r3, r7, r1
 8001592:	22c0      	movs	r2, #192	; 0xc0
 8001594:	0092      	lsls	r2, r2, #2
 8001596:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001598:	187b      	adds	r3, r7, r1
 800159a:	2212      	movs	r2, #18
 800159c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	2206      	movs	r2, #6
 80015ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	187b      	adds	r3, r7, r1
 80015b2:	4a11      	ldr	r2, [pc, #68]	; (80015f8 <HAL_I2C_MspInit+0xd0>)
 80015b4:	0019      	movs	r1, r3
 80015b6:	0010      	movs	r0, r2
 80015b8:	f000 fbdc 	bl	8001d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <HAL_I2C_MspInit+0xcc>)
 80015be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_I2C_MspInit+0xcc>)
 80015c2:	2180      	movs	r1, #128	; 0x80
 80015c4:	0389      	lsls	r1, r1, #14
 80015c6:	430a      	orrs	r2, r1
 80015c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <HAL_I2C_MspInit+0xcc>)
 80015cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	039b      	lsls	r3, r3, #14
 80015d2:	4013      	ands	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	2017      	movs	r0, #23
 80015de:	f000 fb21 	bl	8001c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80015e2:	2017      	movs	r0, #23
 80015e4:	f000 fb33 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015e8:	46c0      	nop			; (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b015      	add	sp, #84	; 0x54
 80015ee:	bd90      	pop	{r4, r7, pc}
 80015f0:	40005400 	.word	0x40005400
 80015f4:	40021000 	.word	0x40021000
 80015f8:	50000400 	.word	0x50000400

080015fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b08f      	sub	sp, #60	; 0x3c
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001604:	2410      	movs	r4, #16
 8001606:	193b      	adds	r3, r7, r4
 8001608:	0018      	movs	r0, r3
 800160a:	2328      	movs	r3, #40	; 0x28
 800160c:	001a      	movs	r2, r3
 800160e:	2100      	movs	r1, #0
 8001610:	f004 fac4 	bl	8005b9c <memset>
  if(hrtc->Instance==RTC)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a19      	ldr	r2, [pc, #100]	; (8001680 <HAL_RTC_MspInit+0x84>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d12c      	bne.n	8001678 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800161e:	193b      	adds	r3, r7, r4
 8001620:	2280      	movs	r2, #128	; 0x80
 8001622:	0292      	lsls	r2, r2, #10
 8001624:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001626:	193b      	adds	r3, r7, r4
 8001628:	2280      	movs	r2, #128	; 0x80
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800162e:	193b      	adds	r3, r7, r4
 8001630:	0018      	movs	r0, r3
 8001632:	f002 fcd5 	bl	8003fe0 <HAL_RCCEx_PeriphCLKConfig>
 8001636:	1e03      	subs	r3, r0, #0
 8001638:	d001      	beq.n	800163e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800163a:	f7ff fe01 	bl	8001240 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_RTC_MspInit+0x88>)
 8001640:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <HAL_RTC_MspInit+0x88>)
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	0209      	lsls	r1, r1, #8
 8001648:	430a      	orrs	r2, r1
 800164a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_RTC_MspInit+0x88>)
 800164e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_RTC_MspInit+0x88>)
 8001652:	2180      	movs	r1, #128	; 0x80
 8001654:	00c9      	lsls	r1, r1, #3
 8001656:	430a      	orrs	r2, r1
 8001658:	63da      	str	r2, [r3, #60]	; 0x3c
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_RTC_MspInit+0x88>)
 800165c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4013      	ands	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	2002      	movs	r0, #2
 800166e:	f000 fad9 	bl	8001c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001672:	2002      	movs	r0, #2
 8001674:	f000 faeb 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001678:	46c0      	nop			; (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	b00f      	add	sp, #60	; 0x3c
 800167e:	bd90      	pop	{r4, r7, pc}
 8001680:	40002800 	.word	0x40002800
 8001684:	40021000 	.word	0x40021000

08001688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_TIM_Base_MspInit+0x38>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d10d      	bne.n	80016b6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_TIM_Base_MspInit+0x3c>)
 800169c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_TIM_Base_MspInit+0x3c>)
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	0289      	lsls	r1, r1, #10
 80016a4:	430a      	orrs	r2, r1
 80016a6:	641a      	str	r2, [r3, #64]	; 0x40
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_TIM_Base_MspInit+0x3c>)
 80016aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	029b      	lsls	r3, r3, #10
 80016b0:	4013      	ands	r3, r2
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b004      	add	sp, #16
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	40014400 	.word	0x40014400
 80016c4:	40021000 	.word	0x40021000

080016c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b08b      	sub	sp, #44	; 0x2c
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	2414      	movs	r4, #20
 80016d2:	193b      	adds	r3, r7, r4
 80016d4:	0018      	movs	r0, r3
 80016d6:	2314      	movs	r3, #20
 80016d8:	001a      	movs	r2, r3
 80016da:	2100      	movs	r1, #0
 80016dc:	f004 fa5e 	bl	8005b9c <memset>
  if(huart->Instance==USART2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a1b      	ldr	r2, [pc, #108]	; (8001754 <HAL_UART_MspInit+0x8c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d130      	bne.n	800174c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ea:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_UART_MspInit+0x90>)
 80016ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <HAL_UART_MspInit+0x90>)
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	0289      	lsls	r1, r1, #10
 80016f4:	430a      	orrs	r2, r1
 80016f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <HAL_UART_MspInit+0x90>)
 80016fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	029b      	lsls	r3, r3, #10
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <HAL_UART_MspInit+0x90>)
 8001708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <HAL_UART_MspInit+0x90>)
 800170c:	2101      	movs	r1, #1
 800170e:	430a      	orrs	r2, r1
 8001710:	635a      	str	r2, [r3, #52]	; 0x34
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_UART_MspInit+0x90>)
 8001714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001716:	2201      	movs	r2, #1
 8001718:	4013      	ands	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800171e:	0021      	movs	r1, r4
 8001720:	187b      	adds	r3, r7, r1
 8001722:	220c      	movs	r2, #12
 8001724:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	187b      	adds	r3, r7, r1
 8001728:	2202      	movs	r2, #2
 800172a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800172c:	187b      	adds	r3, r7, r1
 800172e:	2201      	movs	r2, #1
 8001730:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	187b      	adds	r3, r7, r1
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001738:	187b      	adds	r3, r7, r1
 800173a:	2201      	movs	r2, #1
 800173c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	187a      	adds	r2, r7, r1
 8001740:	23a0      	movs	r3, #160	; 0xa0
 8001742:	05db      	lsls	r3, r3, #23
 8001744:	0011      	movs	r1, r2
 8001746:	0018      	movs	r0, r3
 8001748:	f000 fb14 	bl	8001d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b00b      	add	sp, #44	; 0x2c
 8001752:	bd90      	pop	{r4, r7, pc}
 8001754:	40004400 	.word	0x40004400
 8001758:	40021000 	.word	0x40021000

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <NMI_Handler+0x4>

08001762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <HardFault_Handler+0x4>

08001768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001780:	f000 f988 	bl	8001a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001784:	46c0      	nop			; (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800178e:	f001 ff2d 	bl	80035ec <HAL_PWREx_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <RTC_TAMP_IRQHandler+0x14>)
 800179e:	0018      	movs	r0, r3
 80017a0:	f003 fa24 	bl	8004bec <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	20000114 	.word	0x20000114

080017b0 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Display_Button_Pin);
 80017b4:	2001      	movs	r0, #1
 80017b6:	f000 fc7b 	bl	80020b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Set_Button_Pin);
 80017ba:	2002      	movs	r0, #2
 80017bc:	f000 fc78 	bl	80020b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80017c0:	46c0      	nop			; (mov r8, r8)
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_NRST_Pin);
 80017ca:	2004      	movs	r0, #4
 80017cc:	f000 fc70 	bl	80020b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80017d0:	46c0      	nop			; (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alarm_Enable_Button_Pin);
 80017da:	2010      	movs	r0, #16
 80017dc:	f000 fc68 	bl	80020b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Hour_Set_Button_Pin);
 80017e0:	2020      	movs	r0, #32
 80017e2:	f000 fc65 	bl	80020b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Minute_Set_Button_Pin);
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	015b      	lsls	r3, r3, #5
 80017ea:	0018      	movs	r0, r3
 80017ec:	f000 fc60 	bl	80020b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80017f0:	46c0      	nop			; (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <I2C1_IRQHandler+0x2c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699a      	ldr	r2, [r3, #24]
 8001802:	23e0      	movs	r3, #224	; 0xe0
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	4013      	ands	r3, r2
 8001808:	d004      	beq.n	8001814 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <I2C1_IRQHandler+0x2c>)
 800180c:	0018      	movs	r0, r3
 800180e:	f000 fe3b 	bl	8002488 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001812:	e003      	b.n	800181c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <I2C1_IRQHandler+0x2c>)
 8001816:	0018      	movs	r0, r3
 8001818:	f000 fe1c 	bl	8002454 <HAL_I2C_EV_IRQHandler>
}
 800181c:	46c0      	nop			; (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	200000c0 	.word	0x200000c0

08001828 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	e00a      	b.n	8001850 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800183a:	e000      	b.n	800183e <_read+0x16>
 800183c:	bf00      	nop
 800183e:	0001      	movs	r1, r0
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	60ba      	str	r2, [r7, #8]
 8001846:	b2ca      	uxtb	r2, r1
 8001848:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	3301      	adds	r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	429a      	cmp	r2, r3
 8001856:	dbf0      	blt.n	800183a <_read+0x12>
  }

  return len;
 8001858:	687b      	ldr	r3, [r7, #4]
}
 800185a:	0018      	movs	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	b006      	add	sp, #24
 8001860:	bd80      	pop	{r7, pc}

08001862 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	e009      	b.n	8001888 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	60ba      	str	r2, [r7, #8]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	0018      	movs	r0, r3
 800187e:	f7fe fe2b 	bl	80004d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	429a      	cmp	r2, r3
 800188e:	dbf1      	blt.n	8001874 <_write+0x12>
  }
  return len;
 8001890:	687b      	ldr	r3, [r7, #4]
}
 8001892:	0018      	movs	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	b006      	add	sp, #24
 8001898:	bd80      	pop	{r7, pc}

0800189a <_close>:

int _close(int file)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018a2:	2301      	movs	r3, #1
 80018a4:	425b      	negs	r3, r3
}
 80018a6:	0018      	movs	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b002      	add	sp, #8
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	0192      	lsls	r2, r2, #6
 80018be:	605a      	str	r2, [r3, #4]
  return 0;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	0018      	movs	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b002      	add	sp, #8
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_isatty>:

int _isatty(int file)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	0018      	movs	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b002      	add	sp, #8
 80018da:	bd80      	pop	{r7, pc}

080018dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	0018      	movs	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b004      	add	sp, #16
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018fc:	4a14      	ldr	r2, [pc, #80]	; (8001950 <_sbrk+0x5c>)
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <_sbrk+0x60>)
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <_sbrk+0x64>)
 8001912:	4a12      	ldr	r2, [pc, #72]	; (800195c <_sbrk+0x68>)
 8001914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	18d3      	adds	r3, r2, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	429a      	cmp	r2, r3
 8001922:	d207      	bcs.n	8001934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001924:	f004 f910 	bl	8005b48 <__errno>
 8001928:	0003      	movs	r3, r0
 800192a:	220c      	movs	r2, #12
 800192c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192e:	2301      	movs	r3, #1
 8001930:	425b      	negs	r3, r3
 8001932:	e009      	b.n	8001948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	18d2      	adds	r2, r2, r3
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <_sbrk+0x64>)
 8001944:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001946:	68fb      	ldr	r3, [r7, #12]
}
 8001948:	0018      	movs	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	b006      	add	sp, #24
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20002000 	.word	0x20002000
 8001954:	00000400 	.word	0x00000400
 8001958:	20000274 	.word	0x20000274
 800195c:	20000290 	.word	0x20000290

08001960 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800196c:	480d      	ldr	r0, [pc, #52]	; (80019a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800196e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001970:	f7ff fff6 	bl	8001960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001976:	490d      	ldr	r1, [pc, #52]	; (80019ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001978:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <LoopForever+0xe>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800197c:	e002      	b.n	8001984 <LoopCopyDataInit>

0800197e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001982:	3304      	adds	r3, #4

08001984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001988:	d3f9      	bcc.n	800197e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800198c:	4c0a      	ldr	r4, [pc, #40]	; (80019b8 <LoopForever+0x16>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001990:	e001      	b.n	8001996 <LoopFillZerobss>

08001992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001994:	3204      	adds	r2, #4

08001996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001998:	d3fb      	bcc.n	8001992 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800199a:	f004 f8db 	bl	8005b54 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800199e:	f7fe fdad 	bl	80004fc <main>

080019a2 <LoopForever>:

LoopForever:
  b LoopForever
 80019a2:	e7fe      	b.n	80019a2 <LoopForever>
  ldr   r0, =_estack
 80019a4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80019a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ac:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80019b0:	080071b4 	.word	0x080071b4
  ldr r2, =_sbss
 80019b4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80019b8:	2000028c 	.word	0x2000028c

080019bc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019bc:	e7fe      	b.n	80019bc <ADC1_IRQHandler>
	...

080019c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_Init+0x3c>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_Init+0x3c>)
 80019d2:	2180      	movs	r1, #128	; 0x80
 80019d4:	0049      	lsls	r1, r1, #1
 80019d6:	430a      	orrs	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019da:	2000      	movs	r0, #0
 80019dc:	f000 f810 	bl	8001a00 <HAL_InitTick>
 80019e0:	1e03      	subs	r3, r0, #0
 80019e2:	d003      	beq.n	80019ec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80019e4:	1dfb      	adds	r3, r7, #7
 80019e6:	2201      	movs	r2, #1
 80019e8:	701a      	strb	r2, [r3, #0]
 80019ea:	e001      	b.n	80019f0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80019ec:	f7ff fd70 	bl	80014d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019f0:	1dfb      	adds	r3, r7, #7
 80019f2:	781b      	ldrb	r3, [r3, #0]
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b002      	add	sp, #8
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40022000 	.word	0x40022000

08001a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a08:	230f      	movs	r3, #15
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001a10:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <HAL_InitTick+0x88>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d02b      	beq.n	8001a70 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001a18:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <HAL_InitTick+0x8c>)
 8001a1a:	681c      	ldr	r4, [r3, #0]
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_InitTick+0x88>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	0019      	movs	r1, r3
 8001a22:	23fa      	movs	r3, #250	; 0xfa
 8001a24:	0098      	lsls	r0, r3, #2
 8001a26:	f7fe fb77 	bl	8000118 <__udivsi3>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	0020      	movs	r0, r4
 8001a30:	f7fe fb72 	bl	8000118 <__udivsi3>
 8001a34:	0003      	movs	r3, r0
 8001a36:	0018      	movs	r0, r3
 8001a38:	f000 f919 	bl	8001c6e <HAL_SYSTICK_Config>
 8001a3c:	1e03      	subs	r3, r0, #0
 8001a3e:	d112      	bne.n	8001a66 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d80a      	bhi.n	8001a5c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	2301      	movs	r3, #1
 8001a4a:	425b      	negs	r3, r3
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f000 f8e8 	bl	8001c24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <HAL_InitTick+0x90>)
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	e00d      	b.n	8001a78 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001a5c:	230f      	movs	r3, #15
 8001a5e:	18fb      	adds	r3, r7, r3
 8001a60:	2201      	movs	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	e008      	b.n	8001a78 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a66:	230f      	movs	r3, #15
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	e003      	b.n	8001a78 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a70:	230f      	movs	r3, #15
 8001a72:	18fb      	adds	r3, r7, r3
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001a78:	230f      	movs	r3, #15
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	781b      	ldrb	r3, [r3, #0]
}
 8001a7e:	0018      	movs	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b005      	add	sp, #20
 8001a84:	bd90      	pop	{r4, r7, pc}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	20000038 	.word	0x20000038
 8001a8c:	20000030 	.word	0x20000030
 8001a90:	20000034 	.word	0x20000034

08001a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_IncTick+0x1c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_IncTick+0x20>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	18d2      	adds	r2, r2, r3
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_IncTick+0x20>)
 8001aa6:	601a      	str	r2, [r3, #0]
}
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	20000038 	.word	0x20000038
 8001ab4:	20000278 	.word	0x20000278

08001ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b02      	ldr	r3, [pc, #8]	; (8001ac8 <HAL_GetTick+0x10>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	20000278 	.word	0x20000278

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	1dfb      	adds	r3, r7, #7
 8001ad6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ad8:	1dfb      	adds	r3, r7, #7
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b7f      	cmp	r3, #127	; 0x7f
 8001ade:	d809      	bhi.n	8001af4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae0:	1dfb      	adds	r3, r7, #7
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	001a      	movs	r2, r3
 8001ae6:	231f      	movs	r3, #31
 8001ae8:	401a      	ands	r2, r3
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <__NVIC_EnableIRQ+0x30>)
 8001aec:	2101      	movs	r1, #1
 8001aee:	4091      	lsls	r1, r2
 8001af0:	000a      	movs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	e000e100 	.word	0xe000e100

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	0002      	movs	r2, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	1dfb      	adds	r3, r7, #7
 8001b0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b0e:	1dfb      	adds	r3, r7, #7
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b7f      	cmp	r3, #127	; 0x7f
 8001b14:	d828      	bhi.n	8001b68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b16:	4a2f      	ldr	r2, [pc, #188]	; (8001bd4 <__NVIC_SetPriority+0xd4>)
 8001b18:	1dfb      	adds	r3, r7, #7
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	b25b      	sxtb	r3, r3
 8001b1e:	089b      	lsrs	r3, r3, #2
 8001b20:	33c0      	adds	r3, #192	; 0xc0
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	589b      	ldr	r3, [r3, r2]
 8001b26:	1dfa      	adds	r2, r7, #7
 8001b28:	7812      	ldrb	r2, [r2, #0]
 8001b2a:	0011      	movs	r1, r2
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	400a      	ands	r2, r1
 8001b30:	00d2      	lsls	r2, r2, #3
 8001b32:	21ff      	movs	r1, #255	; 0xff
 8001b34:	4091      	lsls	r1, r2
 8001b36:	000a      	movs	r2, r1
 8001b38:	43d2      	mvns	r2, r2
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	019b      	lsls	r3, r3, #6
 8001b42:	22ff      	movs	r2, #255	; 0xff
 8001b44:	401a      	ands	r2, r3
 8001b46:	1dfb      	adds	r3, r7, #7
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	4003      	ands	r3, r0
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b54:	481f      	ldr	r0, [pc, #124]	; (8001bd4 <__NVIC_SetPriority+0xd4>)
 8001b56:	1dfb      	adds	r3, r7, #7
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	b25b      	sxtb	r3, r3
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	33c0      	adds	r3, #192	; 0xc0
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b66:	e031      	b.n	8001bcc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b68:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <__NVIC_SetPriority+0xd8>)
 8001b6a:	1dfb      	adds	r3, r7, #7
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	0019      	movs	r1, r3
 8001b70:	230f      	movs	r3, #15
 8001b72:	400b      	ands	r3, r1
 8001b74:	3b08      	subs	r3, #8
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3306      	adds	r3, #6
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	18d3      	adds	r3, r2, r3
 8001b7e:	3304      	adds	r3, #4
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	1dfa      	adds	r2, r7, #7
 8001b84:	7812      	ldrb	r2, [r2, #0]
 8001b86:	0011      	movs	r1, r2
 8001b88:	2203      	movs	r2, #3
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	00d2      	lsls	r2, r2, #3
 8001b8e:	21ff      	movs	r1, #255	; 0xff
 8001b90:	4091      	lsls	r1, r2
 8001b92:	000a      	movs	r2, r1
 8001b94:	43d2      	mvns	r2, r2
 8001b96:	401a      	ands	r2, r3
 8001b98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	019b      	lsls	r3, r3, #6
 8001b9e:	22ff      	movs	r2, #255	; 0xff
 8001ba0:	401a      	ands	r2, r3
 8001ba2:	1dfb      	adds	r3, r7, #7
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	2303      	movs	r3, #3
 8001baa:	4003      	ands	r3, r0
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bb0:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <__NVIC_SetPriority+0xd8>)
 8001bb2:	1dfb      	adds	r3, r7, #7
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	001c      	movs	r4, r3
 8001bb8:	230f      	movs	r3, #15
 8001bba:	4023      	ands	r3, r4
 8001bbc:	3b08      	subs	r3, #8
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	3306      	adds	r3, #6
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	18c3      	adds	r3, r0, r3
 8001bc8:	3304      	adds	r3, #4
 8001bca:	601a      	str	r2, [r3, #0]
}
 8001bcc:	46c0      	nop			; (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b003      	add	sp, #12
 8001bd2:	bd90      	pop	{r4, r7, pc}
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	1e5a      	subs	r2, r3, #1
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	045b      	lsls	r3, r3, #17
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d301      	bcc.n	8001bf4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e010      	b.n	8001c16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <SysTick_Config+0x44>)
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	3a01      	subs	r2, #1
 8001bfa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	425b      	negs	r3, r3
 8001c00:	2103      	movs	r1, #3
 8001c02:	0018      	movs	r0, r3
 8001c04:	f7ff ff7c 	bl	8001b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <SysTick_Config+0x44>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0e:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <SysTick_Config+0x44>)
 8001c10:	2207      	movs	r2, #7
 8001c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	0018      	movs	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b002      	add	sp, #8
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	e000e010 	.word	0xe000e010

08001c24 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	210f      	movs	r1, #15
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	1c02      	adds	r2, r0, #0
 8001c34:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	187b      	adds	r3, r7, r1
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b25b      	sxtb	r3, r3
 8001c3e:	0011      	movs	r1, r2
 8001c40:	0018      	movs	r0, r3
 8001c42:	f7ff ff5d 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b004      	add	sp, #16
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	0002      	movs	r2, r0
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c5a:	1dfb      	adds	r3, r7, #7
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b25b      	sxtb	r3, r3
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7ff ff33 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b002      	add	sp, #8
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f7ff ffaf 	bl	8001bdc <SysTick_Config>
 8001c7e:	0003      	movs	r3, r0
}
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b002      	add	sp, #8
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c90:	210f      	movs	r1, #15
 8001c92:	187b      	adds	r3, r7, r1
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2225      	movs	r2, #37	; 0x25
 8001c9c:	5c9b      	ldrb	r3, [r3, r2]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d006      	beq.n	8001cb2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	2201      	movs	r2, #1
 8001cae:	701a      	strb	r2, [r3, #0]
 8001cb0:	e049      	b.n	8001d46 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	210e      	movs	r1, #14
 8001cbe:	438a      	bics	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	438a      	bics	r2, r1
 8001cd0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	491d      	ldr	r1, [pc, #116]	; (8001d54 <HAL_DMA_Abort_IT+0xcc>)
 8001cde:	400a      	ands	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <HAL_DMA_Abort_IT+0xd0>)
 8001ce4:	6859      	ldr	r1, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	221c      	movs	r2, #28
 8001cec:	4013      	ands	r3, r2
 8001cee:	2201      	movs	r2, #1
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_DMA_Abort_IT+0xd0>)
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d00:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00c      	beq.n	8001d24 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d14:	490f      	ldr	r1, [pc, #60]	; (8001d54 <HAL_DMA_Abort_IT+0xcc>)
 8001d16:	400a      	ands	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001d22:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2225      	movs	r2, #37	; 0x25
 8001d28:	2101      	movs	r1, #1
 8001d2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2224      	movs	r2, #36	; 0x24
 8001d30:	2100      	movs	r1, #0
 8001d32:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d004      	beq.n	8001d46 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	0010      	movs	r0, r2
 8001d44:	4798      	blx	r3
    }
  }
  return status;
 8001d46:	230f      	movs	r3, #15
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	781b      	ldrb	r3, [r3, #0]
}
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b004      	add	sp, #16
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	fffffeff 	.word	0xfffffeff
 8001d58:	40020000 	.word	0x40020000

08001d5c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2225      	movs	r2, #37	; 0x25
 8001d68:	5c9b      	ldrb	r3, [r3, r2]
 8001d6a:	b2db      	uxtb	r3, r3
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d82:	e147      	b.n	8002014 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2101      	movs	r1, #1
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4091      	lsls	r1, r2
 8001d8e:	000a      	movs	r2, r1
 8001d90:	4013      	ands	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d100      	bne.n	8001d9c <HAL_GPIO_Init+0x28>
 8001d9a:	e138      	b.n	800200e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2203      	movs	r2, #3
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d005      	beq.n	8001db4 <HAL_GPIO_Init+0x40>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2203      	movs	r2, #3
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d130      	bne.n	8001e16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	0013      	movs	r3, r2
 8001dc4:	43da      	mvns	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	0013      	movs	r3, r2
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dea:	2201      	movs	r2, #1
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	409a      	lsls	r2, r3
 8001df0:	0013      	movs	r3, r2
 8001df2:	43da      	mvns	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	2201      	movs	r2, #1
 8001e02:	401a      	ands	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	409a      	lsls	r2, r3
 8001e08:	0013      	movs	r3, r2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d017      	beq.n	8001e52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	0013      	movs	r3, r2
 8001e32:	43da      	mvns	r2, r3
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	409a      	lsls	r2, r3
 8001e44:	0013      	movs	r3, r2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2203      	movs	r2, #3
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d123      	bne.n	8001ea6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	08da      	lsrs	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3208      	adds	r2, #8
 8001e66:	0092      	lsls	r2, r2, #2
 8001e68:	58d3      	ldr	r3, [r2, r3]
 8001e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2207      	movs	r2, #7
 8001e70:	4013      	ands	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	220f      	movs	r2, #15
 8001e76:	409a      	lsls	r2, r3
 8001e78:	0013      	movs	r3, r2
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	691a      	ldr	r2, [r3, #16]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2107      	movs	r1, #7
 8001e8a:	400b      	ands	r3, r1
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	0013      	movs	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	08da      	lsrs	r2, r3, #3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3208      	adds	r2, #8
 8001ea0:	0092      	lsls	r2, r2, #2
 8001ea2:	6939      	ldr	r1, [r7, #16]
 8001ea4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	0013      	movs	r3, r2
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	0013      	movs	r3, r2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	23c0      	movs	r3, #192	; 0xc0
 8001ee0:	029b      	lsls	r3, r3, #10
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d100      	bne.n	8001ee8 <HAL_GPIO_Init+0x174>
 8001ee6:	e092      	b.n	800200e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001ee8:	4a50      	ldr	r2, [pc, #320]	; (800202c <HAL_GPIO_Init+0x2b8>)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	3318      	adds	r3, #24
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	589b      	ldr	r3, [r3, r2]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2203      	movs	r2, #3
 8001efa:	4013      	ands	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	220f      	movs	r2, #15
 8001f00:	409a      	lsls	r2, r3
 8001f02:	0013      	movs	r3, r2
 8001f04:	43da      	mvns	r2, r3
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	23a0      	movs	r3, #160	; 0xa0
 8001f10:	05db      	lsls	r3, r3, #23
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d013      	beq.n	8001f3e <HAL_GPIO_Init+0x1ca>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a45      	ldr	r2, [pc, #276]	; (8002030 <HAL_GPIO_Init+0x2bc>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00d      	beq.n	8001f3a <HAL_GPIO_Init+0x1c6>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a44      	ldr	r2, [pc, #272]	; (8002034 <HAL_GPIO_Init+0x2c0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d007      	beq.n	8001f36 <HAL_GPIO_Init+0x1c2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a43      	ldr	r2, [pc, #268]	; (8002038 <HAL_GPIO_Init+0x2c4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_GPIO_Init+0x1be>
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e006      	b.n	8001f40 <HAL_GPIO_Init+0x1cc>
 8001f32:	2305      	movs	r3, #5
 8001f34:	e004      	b.n	8001f40 <HAL_GPIO_Init+0x1cc>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_Init+0x1cc>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_GPIO_Init+0x1cc>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	2103      	movs	r1, #3
 8001f44:	400a      	ands	r2, r1
 8001f46:	00d2      	lsls	r2, r2, #3
 8001f48:	4093      	lsls	r3, r2
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001f50:	4936      	ldr	r1, [pc, #216]	; (800202c <HAL_GPIO_Init+0x2b8>)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	3318      	adds	r3, #24
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f5e:	4b33      	ldr	r3, [pc, #204]	; (800202c <HAL_GPIO_Init+0x2b8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	43da      	mvns	r2, r3
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	035b      	lsls	r3, r3, #13
 8001f76:	4013      	ands	r3, r2
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f82:	4b2a      	ldr	r3, [pc, #168]	; (800202c <HAL_GPIO_Init+0x2b8>)
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001f88:	4b28      	ldr	r3, [pc, #160]	; (800202c <HAL_GPIO_Init+0x2b8>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	43da      	mvns	r2, r3
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	039b      	lsls	r3, r3, #14
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fac:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_GPIO_Init+0x2b8>)
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fb2:	4a1e      	ldr	r2, [pc, #120]	; (800202c <HAL_GPIO_Init+0x2b8>)
 8001fb4:	2384      	movs	r3, #132	; 0x84
 8001fb6:	58d3      	ldr	r3, [r2, r3]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	43da      	mvns	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	029b      	lsls	r3, r3, #10
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fd8:	4914      	ldr	r1, [pc, #80]	; (800202c <HAL_GPIO_Init+0x2b8>)
 8001fda:	2284      	movs	r2, #132	; 0x84
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001fe0:	4a12      	ldr	r2, [pc, #72]	; (800202c <HAL_GPIO_Init+0x2b8>)
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	58d3      	ldr	r3, [r2, r3]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	43da      	mvns	r2, r3
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	025b      	lsls	r3, r3, #9
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002006:	4909      	ldr	r1, [pc, #36]	; (800202c <HAL_GPIO_Init+0x2b8>)
 8002008:	2280      	movs	r2, #128	; 0x80
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	3301      	adds	r3, #1
 8002012:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	40da      	lsrs	r2, r3
 800201c:	1e13      	subs	r3, r2, #0
 800201e:	d000      	beq.n	8002022 <HAL_GPIO_Init+0x2ae>
 8002020:	e6b0      	b.n	8001d84 <HAL_GPIO_Init+0x10>
  }
}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	b006      	add	sp, #24
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021800 	.word	0x40021800
 8002030:	50000400 	.word	0x50000400
 8002034:	50000800 	.word	0x50000800
 8002038:	50000c00 	.word	0x50000c00

0800203c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	000a      	movs	r2, r1
 8002046:	1cbb      	adds	r3, r7, #2
 8002048:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	1cba      	adds	r2, r7, #2
 8002050:	8812      	ldrh	r2, [r2, #0]
 8002052:	4013      	ands	r3, r2
 8002054:	d004      	beq.n	8002060 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002056:	230f      	movs	r3, #15
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
 800205e:	e003      	b.n	8002068 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002060:	230f      	movs	r3, #15
 8002062:	18fb      	adds	r3, r7, r3
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002068:	230f      	movs	r3, #15
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	781b      	ldrb	r3, [r3, #0]
}
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b004      	add	sp, #16
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	0008      	movs	r0, r1
 8002080:	0011      	movs	r1, r2
 8002082:	1cbb      	adds	r3, r7, #2
 8002084:	1c02      	adds	r2, r0, #0
 8002086:	801a      	strh	r2, [r3, #0]
 8002088:	1c7b      	adds	r3, r7, #1
 800208a:	1c0a      	adds	r2, r1, #0
 800208c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800208e:	1c7b      	adds	r3, r7, #1
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d004      	beq.n	80020a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002096:	1cbb      	adds	r3, r7, #2
 8002098:	881a      	ldrh	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800209e:	e003      	b.n	80020a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020a0:	1cbb      	adds	r3, r7, #2
 80020a2:	881a      	ldrh	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020a8:	46c0      	nop			; (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b002      	add	sp, #8
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	0002      	movs	r2, r0
 80020b8:	1dbb      	adds	r3, r7, #6
 80020ba:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80020bc:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	1dba      	adds	r2, r7, #6
 80020c2:	8812      	ldrh	r2, [r2, #0]
 80020c4:	4013      	ands	r3, r2
 80020c6:	d008      	beq.n	80020da <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80020c8:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80020ca:	1dba      	adds	r2, r7, #6
 80020cc:	8812      	ldrh	r2, [r2, #0]
 80020ce:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80020d0:	1dbb      	adds	r3, r7, #6
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 f815 	bl	8002104 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	1dba      	adds	r2, r7, #6
 80020e0:	8812      	ldrh	r2, [r2, #0]
 80020e2:	4013      	ands	r3, r2
 80020e4:	d008      	beq.n	80020f8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80020e8:	1dba      	adds	r2, r7, #6
 80020ea:	8812      	ldrh	r2, [r2, #0]
 80020ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80020ee:	1dbb      	adds	r3, r7, #6
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	0018      	movs	r0, r3
 80020f4:	f7fe fd7c 	bl	8000bf0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80020f8:	46c0      	nop			; (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b002      	add	sp, #8
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021800 	.word	0x40021800

08002104 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	0002      	movs	r2, r0
 800210c:	1dbb      	adds	r3, r7, #6
 800210e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b002      	add	sp, #8
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e082      	b.n	8002230 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2241      	movs	r2, #65	; 0x41
 800212e:	5c9b      	ldrb	r3, [r3, r2]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d107      	bne.n	8002146 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2240      	movs	r2, #64	; 0x40
 800213a:	2100      	movs	r1, #0
 800213c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff f9f1 	bl	8001528 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2241      	movs	r2, #65	; 0x41
 800214a:	2124      	movs	r1, #36	; 0x24
 800214c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2101      	movs	r1, #1
 800215a:	438a      	bics	r2, r1
 800215c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4934      	ldr	r1, [pc, #208]	; (8002238 <HAL_I2C_Init+0x120>)
 8002168:	400a      	ands	r2, r1
 800216a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4931      	ldr	r1, [pc, #196]	; (800223c <HAL_I2C_Init+0x124>)
 8002178:	400a      	ands	r2, r1
 800217a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d108      	bne.n	8002196 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	0209      	lsls	r1, r1, #8
 8002190:	430a      	orrs	r2, r1
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	e007      	b.n	80021a6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2184      	movs	r1, #132	; 0x84
 80021a0:	0209      	lsls	r1, r1, #8
 80021a2:	430a      	orrs	r2, r1
 80021a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d104      	bne.n	80021b8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	0112      	lsls	r2, r2, #4
 80021b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	491f      	ldr	r1, [pc, #124]	; (8002240 <HAL_I2C_Init+0x128>)
 80021c4:	430a      	orrs	r2, r1
 80021c6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	491a      	ldr	r1, [pc, #104]	; (800223c <HAL_I2C_Init+0x124>)
 80021d4:	400a      	ands	r2, r1
 80021d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69d9      	ldr	r1, [r3, #28]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1a      	ldr	r2, [r3, #32]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2101      	movs	r1, #1
 800220e:	430a      	orrs	r2, r1
 8002210:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2241      	movs	r2, #65	; 0x41
 800221c:	2120      	movs	r1, #32
 800221e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2242      	movs	r2, #66	; 0x42
 800222a:	2100      	movs	r1, #0
 800222c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	b002      	add	sp, #8
 8002236:	bd80      	pop	{r7, pc}
 8002238:	f0ffffff 	.word	0xf0ffffff
 800223c:	ffff7fff 	.word	0xffff7fff
 8002240:	02008000 	.word	0x02008000

08002244 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	0008      	movs	r0, r1
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	0019      	movs	r1, r3
 8002252:	230a      	movs	r3, #10
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	1c02      	adds	r2, r0, #0
 8002258:	801a      	strh	r2, [r3, #0]
 800225a:	2308      	movs	r3, #8
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	1c0a      	adds	r2, r1, #0
 8002260:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2241      	movs	r2, #65	; 0x41
 8002266:	5c9b      	ldrb	r3, [r3, r2]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b20      	cmp	r3, #32
 800226c:	d000      	beq.n	8002270 <HAL_I2C_Master_Transmit+0x2c>
 800226e:	e0e7      	b.n	8002440 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2240      	movs	r2, #64	; 0x40
 8002274:	5c9b      	ldrb	r3, [r3, r2]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_I2C_Master_Transmit+0x3a>
 800227a:	2302      	movs	r3, #2
 800227c:	e0e1      	b.n	8002442 <HAL_I2C_Master_Transmit+0x1fe>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2240      	movs	r2, #64	; 0x40
 8002282:	2101      	movs	r1, #1
 8002284:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002286:	f7ff fc17 	bl	8001ab8 <HAL_GetTick>
 800228a:	0003      	movs	r3, r0
 800228c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	0219      	lsls	r1, r3, #8
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2319      	movs	r3, #25
 800229a:	2201      	movs	r2, #1
 800229c:	f000 fe76 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 80022a0:	1e03      	subs	r3, r0, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0cc      	b.n	8002442 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2241      	movs	r2, #65	; 0x41
 80022ac:	2121      	movs	r1, #33	; 0x21
 80022ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2242      	movs	r2, #66	; 0x42
 80022b4:	2110      	movs	r1, #16
 80022b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2208      	movs	r2, #8
 80022c8:	18ba      	adds	r2, r7, r2
 80022ca:	8812      	ldrh	r2, [r2, #0]
 80022cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2bff      	cmp	r3, #255	; 0xff
 80022dc:	d911      	bls.n	8002302 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	22ff      	movs	r2, #255	; 0xff
 80022e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	045c      	lsls	r4, r3, #17
 80022ee:	230a      	movs	r3, #10
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	8819      	ldrh	r1, [r3, #0]
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	4b55      	ldr	r3, [pc, #340]	; (800244c <HAL_I2C_Master_Transmit+0x208>)
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	0023      	movs	r3, r4
 80022fc:	f001 f800 	bl	8003300 <I2C_TransferConfig>
 8002300:	e075      	b.n	80023ee <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	b2da      	uxtb	r2, r3
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	049c      	lsls	r4, r3, #18
 8002316:	230a      	movs	r3, #10
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	8819      	ldrh	r1, [r3, #0]
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	4b4b      	ldr	r3, [pc, #300]	; (800244c <HAL_I2C_Master_Transmit+0x208>)
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	0023      	movs	r3, r4
 8002324:	f000 ffec 	bl	8003300 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002328:	e061      	b.n	80023ee <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	0018      	movs	r0, r3
 8002332:	f000 fe6a 	bl	800300a <I2C_WaitOnTXISFlagUntilTimeout>
 8002336:	1e03      	subs	r3, r0, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e081      	b.n	8002442 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	781a      	ldrb	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d03a      	beq.n	80023ee <HAL_I2C_Master_Transmit+0x1aa>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	2b00      	cmp	r3, #0
 800237e:	d136      	bne.n	80023ee <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	0013      	movs	r3, r2
 800238a:	2200      	movs	r2, #0
 800238c:	2180      	movs	r1, #128	; 0x80
 800238e:	f000 fdfd 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002392:	1e03      	subs	r3, r0, #0
 8002394:	d001      	beq.n	800239a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e053      	b.n	8002442 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2bff      	cmp	r3, #255	; 0xff
 80023a2:	d911      	bls.n	80023c8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	22ff      	movs	r2, #255	; 0xff
 80023a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	045c      	lsls	r4, r3, #17
 80023b4:	230a      	movs	r3, #10
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	8819      	ldrh	r1, [r3, #0]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	2300      	movs	r3, #0
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	0023      	movs	r3, r4
 80023c2:	f000 ff9d 	bl	8003300 <I2C_TransferConfig>
 80023c6:	e012      	b.n	80023ee <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	049c      	lsls	r4, r3, #18
 80023dc:	230a      	movs	r3, #10
 80023de:	18fb      	adds	r3, r7, r3
 80023e0:	8819      	ldrh	r1, [r3, #0]
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	2300      	movs	r3, #0
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	0023      	movs	r3, r4
 80023ea:	f000 ff89 	bl	8003300 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d198      	bne.n	800232a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	0018      	movs	r0, r3
 8002400:	f000 fe42 	bl	8003088 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002404:	1e03      	subs	r3, r0, #0
 8002406:	d001      	beq.n	800240c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e01a      	b.n	8002442 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2220      	movs	r2, #32
 8002412:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	490c      	ldr	r1, [pc, #48]	; (8002450 <HAL_I2C_Master_Transmit+0x20c>)
 8002420:	400a      	ands	r2, r1
 8002422:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2241      	movs	r2, #65	; 0x41
 8002428:	2120      	movs	r1, #32
 800242a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2242      	movs	r2, #66	; 0x42
 8002430:	2100      	movs	r1, #0
 8002432:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2240      	movs	r2, #64	; 0x40
 8002438:	2100      	movs	r1, #0
 800243a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	e000      	b.n	8002442 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002440:	2302      	movs	r3, #2
  }
}
 8002442:	0018      	movs	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	b007      	add	sp, #28
 8002448:	bd90      	pop	{r4, r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	80002000 	.word	0x80002000
 8002450:	fe00e800 	.word	0xfe00e800

08002454 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	68f9      	ldr	r1, [r7, #12]
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	4798      	blx	r3
  }
}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b004      	add	sp, #16
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	001a      	movs	r2, r3
 80024a6:	2301      	movs	r3, #1
 80024a8:	4013      	ands	r3, r2
 80024aa:	d010      	beq.n	80024ce <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	09db      	lsrs	r3, r3, #7
 80024b0:	001a      	movs	r2, r3
 80024b2:	2301      	movs	r3, #1
 80024b4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80024b6:	d00a      	beq.n	80024ce <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	2201      	movs	r2, #1
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	0052      	lsls	r2, r2, #1
 80024cc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	0a9b      	lsrs	r3, r3, #10
 80024d2:	001a      	movs	r2, r3
 80024d4:	2301      	movs	r3, #1
 80024d6:	4013      	ands	r3, r2
 80024d8:	d010      	beq.n	80024fc <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	09db      	lsrs	r3, r3, #7
 80024de:	001a      	movs	r2, r3
 80024e0:	2301      	movs	r3, #1
 80024e2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80024e4:	d00a      	beq.n	80024fc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	2208      	movs	r2, #8
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	00d2      	lsls	r2, r2, #3
 80024fa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	0a5b      	lsrs	r3, r3, #9
 8002500:	001a      	movs	r2, r3
 8002502:	2301      	movs	r3, #1
 8002504:	4013      	ands	r3, r2
 8002506:	d010      	beq.n	800252a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	09db      	lsrs	r3, r3, #7
 800250c:	001a      	movs	r2, r3
 800250e:	2301      	movs	r3, #1
 8002510:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002512:	d00a      	beq.n	800252a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002518:	2202      	movs	r2, #2
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2280      	movs	r2, #128	; 0x80
 8002526:	0092      	lsls	r2, r2, #2
 8002528:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	220b      	movs	r2, #11
 8002534:	4013      	ands	r3, r2
 8002536:	d005      	beq.n	8002544 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	0011      	movs	r1, r2
 800253e:	0018      	movs	r0, r3
 8002540:	f000 fbd8 	bl	8002cf4 <I2C_ITError>
  }
}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b006      	add	sp, #24
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b002      	add	sp, #8
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	0008      	movs	r0, r1
 8002576:	0011      	movs	r1, r2
 8002578:	1cfb      	adds	r3, r7, #3
 800257a:	1c02      	adds	r2, r0, #0
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	003b      	movs	r3, r7
 8002580:	1c0a      	adds	r2, r1, #0
 8002582:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002584:	46c0      	nop			; (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	b002      	add	sp, #8
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b002      	add	sp, #8
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80025a4:	46c0      	nop			; (mov r8, r8)
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b002      	add	sp, #8
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80025b4:	46c0      	nop			; (mov r8, r8)
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b002      	add	sp, #8
 80025ba:	bd80      	pop	{r7, pc}

080025bc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2240      	movs	r2, #64	; 0x40
 80025d6:	5c9b      	ldrb	r3, [r3, r2]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <I2C_Slave_ISR_IT+0x24>
 80025dc:	2302      	movs	r3, #2
 80025de:	e0fa      	b.n	80027d6 <I2C_Slave_ISR_IT+0x21a>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2240      	movs	r2, #64	; 0x40
 80025e4:	2101      	movs	r1, #1
 80025e6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	001a      	movs	r2, r3
 80025ee:	2301      	movs	r3, #1
 80025f0:	4013      	ands	r3, r2
 80025f2:	d00b      	beq.n	800260c <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	001a      	movs	r2, r3
 80025fa:	2301      	movs	r3, #1
 80025fc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80025fe:	d005      	beq.n	800260c <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	0011      	movs	r1, r2
 8002606:	0018      	movs	r0, r3
 8002608:	f000 f9f6 	bl	80029f8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	001a      	movs	r2, r3
 8002612:	2301      	movs	r3, #1
 8002614:	4013      	ands	r3, r2
 8002616:	d054      	beq.n	80026c2 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	001a      	movs	r2, r3
 800261e:	2301      	movs	r3, #1
 8002620:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002622:	d04e      	beq.n	80026c2 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d12d      	bne.n	800268a <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2241      	movs	r2, #65	; 0x41
 8002632:	5c9b      	ldrb	r3, [r3, r2]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b28      	cmp	r3, #40	; 0x28
 8002638:	d10b      	bne.n	8002652 <I2C_Slave_ISR_IT+0x96>
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	049b      	lsls	r3, r3, #18
 8002640:	429a      	cmp	r2, r3
 8002642:	d106      	bne.n	8002652 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	0011      	movs	r1, r2
 800264a:	0018      	movs	r0, r3
 800264c:	f000 faf8 	bl	8002c40 <I2C_ITListenCplt>
 8002650:	e036      	b.n	80026c0 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2241      	movs	r2, #65	; 0x41
 8002656:	5c9b      	ldrb	r3, [r3, r2]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b29      	cmp	r3, #41	; 0x29
 800265c:	d110      	bne.n	8002680 <I2C_Slave_ISR_IT+0xc4>
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	4a5f      	ldr	r2, [pc, #380]	; (80027e0 <I2C_Slave_ISR_IT+0x224>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00c      	beq.n	8002680 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2210      	movs	r2, #16
 800266c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	0018      	movs	r0, r3
 8002672:	f000 fc4a 	bl	8002f0a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	0018      	movs	r0, r3
 800267a:	f000 f957 	bl	800292c <I2C_ITSlaveSeqCplt>
 800267e:	e01f      	b.n	80026c0 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2210      	movs	r2, #16
 8002686:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002688:	e09d      	b.n	80027c6 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2210      	movs	r2, #16
 8002690:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	2204      	movs	r2, #4
 8002698:	431a      	orrs	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <I2C_Slave_ISR_IT+0xf4>
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	045b      	lsls	r3, r3, #17
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d000      	beq.n	80026b0 <I2C_Slave_ISR_IT+0xf4>
 80026ae:	e08a      	b.n	80027c6 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	0011      	movs	r1, r2
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 fb1b 	bl	8002cf4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80026be:	e082      	b.n	80027c6 <I2C_Slave_ISR_IT+0x20a>
 80026c0:	e081      	b.n	80027c6 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	001a      	movs	r2, r3
 80026c8:	2301      	movs	r3, #1
 80026ca:	4013      	ands	r3, r2
 80026cc:	d031      	beq.n	8002732 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	001a      	movs	r2, r3
 80026d4:	2301      	movs	r3, #1
 80026d6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80026d8:	d02b      	beq.n	8002732 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d018      	beq.n	8002716 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d154      	bne.n	80027ca <I2C_Slave_ISR_IT+0x20e>
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	4a2f      	ldr	r2, [pc, #188]	; (80027e0 <I2C_Slave_ISR_IT+0x224>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d050      	beq.n	80027ca <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	0018      	movs	r0, r3
 800272c:	f000 f8fe 	bl	800292c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002730:	e04b      	b.n	80027ca <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	08db      	lsrs	r3, r3, #3
 8002736:	001a      	movs	r2, r3
 8002738:	2301      	movs	r3, #1
 800273a:	4013      	ands	r3, r2
 800273c:	d00c      	beq.n	8002758 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	08db      	lsrs	r3, r3, #3
 8002742:	001a      	movs	r2, r3
 8002744:	2301      	movs	r3, #1
 8002746:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002748:	d006      	beq.n	8002758 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	0011      	movs	r1, r2
 8002750:	0018      	movs	r0, r3
 8002752:	f000 f847 	bl	80027e4 <I2C_ITAddrCplt>
 8002756:	e039      	b.n	80027cc <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	001a      	movs	r2, r3
 800275e:	2301      	movs	r3, #1
 8002760:	4013      	ands	r3, r2
 8002762:	d033      	beq.n	80027cc <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	085b      	lsrs	r3, r3, #1
 8002768:	001a      	movs	r2, r3
 800276a:	2301      	movs	r3, #1
 800276c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800276e:	d02d      	beq.n	80027cc <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d018      	beq.n	80027ac <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	781a      	ldrb	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	; 0x28
 80027aa:	e00f      	b.n	80027cc <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	045b      	lsls	r3, r3, #17
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d002      	beq.n	80027bc <I2C_Slave_ISR_IT+0x200>
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d107      	bne.n	80027cc <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	0018      	movs	r0, r3
 80027c0:	f000 f8b4 	bl	800292c <I2C_ITSlaveSeqCplt>
 80027c4:	e002      	b.n	80027cc <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	e000      	b.n	80027cc <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80027ca:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2240      	movs	r2, #64	; 0x40
 80027d0:	2100      	movs	r1, #0
 80027d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	0018      	movs	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	b006      	add	sp, #24
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	ffff0000 	.word	0xffff0000

080027e4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80027e4:	b5b0      	push	{r4, r5, r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2241      	movs	r2, #65	; 0x41
 80027f2:	5c9b      	ldrb	r3, [r3, r2]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	001a      	movs	r2, r3
 80027f8:	2328      	movs	r3, #40	; 0x28
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b28      	cmp	r3, #40	; 0x28
 80027fe:	d000      	beq.n	8002802 <I2C_ITAddrCplt+0x1e>
 8002800:	e088      	b.n	8002914 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	0c1b      	lsrs	r3, r3, #16
 800280a:	b2da      	uxtb	r2, r3
 800280c:	250f      	movs	r5, #15
 800280e:	197b      	adds	r3, r7, r5
 8002810:	2101      	movs	r1, #1
 8002812:	400a      	ands	r2, r1
 8002814:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	0c1b      	lsrs	r3, r3, #16
 800281e:	b29a      	uxth	r2, r3
 8002820:	200c      	movs	r0, #12
 8002822:	183b      	adds	r3, r7, r0
 8002824:	21fe      	movs	r1, #254	; 0xfe
 8002826:	400a      	ands	r2, r1
 8002828:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	b29a      	uxth	r2, r3
 8002832:	240a      	movs	r4, #10
 8002834:	193b      	adds	r3, r7, r4
 8002836:	0592      	lsls	r2, r2, #22
 8002838:	0d92      	lsrs	r2, r2, #22
 800283a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	b29a      	uxth	r2, r3
 8002844:	2308      	movs	r3, #8
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	21fe      	movs	r1, #254	; 0xfe
 800284a:	400a      	ands	r2, r1
 800284c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d148      	bne.n	80028e8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002856:	0021      	movs	r1, r4
 8002858:	187b      	adds	r3, r7, r1
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	09db      	lsrs	r3, r3, #7
 800285e:	b29a      	uxth	r2, r3
 8002860:	183b      	adds	r3, r7, r0
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	4053      	eors	r3, r2
 8002866:	b29b      	uxth	r3, r3
 8002868:	001a      	movs	r2, r3
 800286a:	2306      	movs	r3, #6
 800286c:	4013      	ands	r3, r2
 800286e:	d120      	bne.n	80028b2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8002870:	183b      	adds	r3, r7, r0
 8002872:	187a      	adds	r2, r7, r1
 8002874:	8812      	ldrh	r2, [r2, #0]
 8002876:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002886:	2b02      	cmp	r3, #2
 8002888:	d14c      	bne.n	8002924 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2208      	movs	r2, #8
 8002896:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2240      	movs	r2, #64	; 0x40
 800289c:	2100      	movs	r1, #0
 800289e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80028a0:	183b      	adds	r3, r7, r0
 80028a2:	881a      	ldrh	r2, [r3, #0]
 80028a4:	197b      	adds	r3, r7, r5
 80028a6:	7819      	ldrb	r1, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	0018      	movs	r0, r3
 80028ac:	f7ff fe5e 	bl	800256c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80028b0:	e038      	b.n	8002924 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80028b2:	240c      	movs	r4, #12
 80028b4:	193b      	adds	r3, r7, r4
 80028b6:	2208      	movs	r2, #8
 80028b8:	18ba      	adds	r2, r7, r2
 80028ba:	8812      	ldrh	r2, [r2, #0]
 80028bc:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	021a      	lsls	r2, r3, #8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	0011      	movs	r1, r2
 80028c6:	0018      	movs	r0, r3
 80028c8:	f000 fd54 	bl	8003374 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2240      	movs	r2, #64	; 0x40
 80028d0:	2100      	movs	r1, #0
 80028d2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80028d4:	193b      	adds	r3, r7, r4
 80028d6:	881a      	ldrh	r2, [r3, #0]
 80028d8:	230f      	movs	r3, #15
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	7819      	ldrb	r1, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	0018      	movs	r0, r3
 80028e2:	f7ff fe43 	bl	800256c <HAL_I2C_AddrCallback>
}
 80028e6:	e01d      	b.n	8002924 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	021a      	lsls	r2, r3, #8
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	0011      	movs	r1, r2
 80028f0:	0018      	movs	r0, r3
 80028f2:	f000 fd3f 	bl	8003374 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2240      	movs	r2, #64	; 0x40
 80028fa:	2100      	movs	r1, #0
 80028fc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80028fe:	230c      	movs	r3, #12
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	881a      	ldrh	r2, [r3, #0]
 8002904:	230f      	movs	r3, #15
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	7819      	ldrb	r1, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	0018      	movs	r0, r3
 800290e:	f7ff fe2d 	bl	800256c <HAL_I2C_AddrCallback>
}
 8002912:	e007      	b.n	8002924 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2208      	movs	r2, #8
 800291a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2240      	movs	r2, #64	; 0x40
 8002920:	2100      	movs	r1, #0
 8002922:	5499      	strb	r1, [r3, r2]
}
 8002924:	46c0      	nop			; (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b004      	add	sp, #16
 800292a:	bdb0      	pop	{r4, r5, r7, pc}

0800292c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2242      	movs	r2, #66	; 0x42
 8002940:	2100      	movs	r1, #0
 8002942:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	0b9b      	lsrs	r3, r3, #14
 8002948:	001a      	movs	r2, r3
 800294a:	2301      	movs	r3, #1
 800294c:	4013      	ands	r3, r2
 800294e:	d008      	beq.n	8002962 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4925      	ldr	r1, [pc, #148]	; (80029f0 <I2C_ITSlaveSeqCplt+0xc4>)
 800295c:	400a      	ands	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	e00d      	b.n	800297e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	0bdb      	lsrs	r3, r3, #15
 8002966:	001a      	movs	r2, r3
 8002968:	2301      	movs	r3, #1
 800296a:	4013      	ands	r3, r2
 800296c:	d007      	beq.n	800297e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	491e      	ldr	r1, [pc, #120]	; (80029f4 <I2C_ITSlaveSeqCplt+0xc8>)
 800297a:	400a      	ands	r2, r1
 800297c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2241      	movs	r2, #65	; 0x41
 8002982:	5c9b      	ldrb	r3, [r3, r2]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b29      	cmp	r3, #41	; 0x29
 8002988:	d114      	bne.n	80029b4 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2241      	movs	r2, #65	; 0x41
 800298e:	2128      	movs	r1, #40	; 0x28
 8002990:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2221      	movs	r2, #33	; 0x21
 8002996:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2101      	movs	r1, #1
 800299c:	0018      	movs	r0, r3
 800299e:	f000 fce9 	bl	8003374 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2240      	movs	r2, #64	; 0x40
 80029a6:	2100      	movs	r1, #0
 80029a8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f7ff fdcd 	bl	800254c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80029b2:	e019      	b.n	80029e8 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2241      	movs	r2, #65	; 0x41
 80029b8:	5c9b      	ldrb	r3, [r3, r2]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b2a      	cmp	r3, #42	; 0x2a
 80029be:	d113      	bne.n	80029e8 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2241      	movs	r2, #65	; 0x41
 80029c4:	2128      	movs	r1, #40	; 0x28
 80029c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2222      	movs	r2, #34	; 0x22
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2102      	movs	r1, #2
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 fcce 	bl	8003374 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2240      	movs	r2, #64	; 0x40
 80029dc:	2100      	movs	r1, #0
 80029de:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	0018      	movs	r0, r3
 80029e4:	f7ff fdba 	bl	800255c <HAL_I2C_SlaveRxCpltCallback>
}
 80029e8:	46c0      	nop			; (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b004      	add	sp, #16
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	ffffbfff 	.word	0xffffbfff
 80029f4:	ffff7fff 	.word	0xffff7fff

080029f8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a0e:	200f      	movs	r0, #15
 8002a10:	183b      	adds	r3, r7, r0
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	2141      	movs	r1, #65	; 0x41
 8002a16:	5c52      	ldrb	r2, [r2, r1]
 8002a18:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a22:	183b      	adds	r3, r7, r0
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b21      	cmp	r3, #33	; 0x21
 8002a28:	d003      	beq.n	8002a32 <I2C_ITSlaveCplt+0x3a>
 8002a2a:	183b      	adds	r3, r7, r0
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b29      	cmp	r3, #41	; 0x29
 8002a30:	d109      	bne.n	8002a46 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002a32:	4a7d      	ldr	r2, [pc, #500]	; (8002c28 <I2C_ITSlaveCplt+0x230>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	0011      	movs	r1, r2
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f000 fc9b 	bl	8003374 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2221      	movs	r2, #33	; 0x21
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
 8002a44:	e011      	b.n	8002a6a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a46:	220f      	movs	r2, #15
 8002a48:	18bb      	adds	r3, r7, r2
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b22      	cmp	r3, #34	; 0x22
 8002a4e:	d003      	beq.n	8002a58 <I2C_ITSlaveCplt+0x60>
 8002a50:	18bb      	adds	r3, r7, r2
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b2a      	cmp	r3, #42	; 0x2a
 8002a56:	d108      	bne.n	8002a6a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002a58:	4a74      	ldr	r2, [pc, #464]	; (8002c2c <I2C_ITSlaveCplt+0x234>)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	0011      	movs	r1, r2
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f000 fc88 	bl	8003374 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2222      	movs	r2, #34	; 0x22
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	0209      	lsls	r1, r1, #8
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	496a      	ldr	r1, [pc, #424]	; (8002c30 <I2C_ITSlaveCplt+0x238>)
 8002a88:	400a      	ands	r2, r1
 8002a8a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f000 fa3b 	bl	8002f0a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	0b9b      	lsrs	r3, r3, #14
 8002a98:	001a      	movs	r2, r3
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d013      	beq.n	8002ac8 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4962      	ldr	r1, [pc, #392]	; (8002c34 <I2C_ITSlaveCplt+0x23c>)
 8002aac:	400a      	ands	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d020      	beq.n	8002afa <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ac6:	e018      	b.n	8002afa <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	0bdb      	lsrs	r3, r3, #15
 8002acc:	001a      	movs	r2, r3
 8002ace:	2301      	movs	r3, #1
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d012      	beq.n	8002afa <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4956      	ldr	r1, [pc, #344]	; (8002c38 <I2C_ITSlaveCplt+0x240>)
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d006      	beq.n	8002afa <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	089b      	lsrs	r3, r3, #2
 8002afe:	001a      	movs	r2, r3
 8002b00:	2301      	movs	r3, #1
 8002b02:	4013      	ands	r3, r2
 8002b04:	d020      	beq.n	8002b48 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2204      	movs	r2, #4
 8002b0a:	4393      	bics	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00c      	beq.n	8002b48 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	2204      	movs	r2, #4
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2242      	movs	r2, #66	; 0x42
 8002b62:	2100      	movs	r1, #0
 8002b64:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d013      	beq.n	8002b9c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	0011      	movs	r1, r2
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f000 f8b9 	bl	8002cf4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2241      	movs	r2, #65	; 0x41
 8002b86:	5c9b      	ldrb	r3, [r3, r2]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b28      	cmp	r3, #40	; 0x28
 8002b8c:	d147      	bne.n	8002c1e <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	0011      	movs	r1, r2
 8002b94:	0018      	movs	r0, r3
 8002b96:	f000 f853 	bl	8002c40 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b9a:	e040      	b.n	8002c1e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	4a26      	ldr	r2, [pc, #152]	; (8002c3c <I2C_ITSlaveCplt+0x244>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d016      	beq.n	8002bd4 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f7ff febf 	bl	800292c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a22      	ldr	r2, [pc, #136]	; (8002c3c <I2C_ITSlaveCplt+0x244>)
 8002bb2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2241      	movs	r2, #65	; 0x41
 8002bb8:	2120      	movs	r1, #32
 8002bba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2240      	movs	r2, #64	; 0x40
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f7ff fcdd 	bl	800258c <HAL_I2C_ListenCpltCallback>
}
 8002bd2:	e024      	b.n	8002c1e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2241      	movs	r2, #65	; 0x41
 8002bd8:	5c9b      	ldrb	r3, [r3, r2]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b22      	cmp	r3, #34	; 0x22
 8002bde:	d10f      	bne.n	8002c00 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2241      	movs	r2, #65	; 0x41
 8002be4:	2120      	movs	r1, #32
 8002be6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2240      	movs	r2, #64	; 0x40
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f7ff fcaf 	bl	800255c <HAL_I2C_SlaveRxCpltCallback>
}
 8002bfe:	e00e      	b.n	8002c1e <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2241      	movs	r2, #65	; 0x41
 8002c04:	2120      	movs	r1, #32
 8002c06:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2240      	movs	r2, #64	; 0x40
 8002c12:	2100      	movs	r1, #0
 8002c14:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f7ff fc97 	bl	800254c <HAL_I2C_SlaveTxCpltCallback>
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b006      	add	sp, #24
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	00008001 	.word	0x00008001
 8002c2c:	00008002 	.word	0x00008002
 8002c30:	fe00e800 	.word	0xfe00e800
 8002c34:	ffffbfff 	.word	0xffffbfff
 8002c38:	ffff7fff 	.word	0xffff7fff
 8002c3c:	ffff0000 	.word	0xffff0000

08002c40 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a27      	ldr	r2, [pc, #156]	; (8002cec <I2C_ITListenCplt+0xac>)
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2241      	movs	r2, #65	; 0x41
 8002c5a:	2120      	movs	r1, #32
 8002c5c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2242      	movs	r2, #66	; 0x42
 8002c62:	2100      	movs	r1, #0
 8002c64:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	001a      	movs	r2, r3
 8002c72:	2301      	movs	r3, #1
 8002c74:	4013      	ands	r3, r2
 8002c76:	d022      	beq.n	8002cbe <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d012      	beq.n	8002cbe <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002cbe:	4a0c      	ldr	r2, [pc, #48]	; (8002cf0 <I2C_ITListenCplt+0xb0>)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	0011      	movs	r1, r2
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 fb55 	bl	8003374 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2210      	movs	r2, #16
 8002cd0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2240      	movs	r2, #64	; 0x40
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f7ff fc55 	bl	800258c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b002      	add	sp, #8
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	ffff0000 	.word	0xffff0000
 8002cf0:	00008003 	.word	0x00008003

08002cf4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002cfe:	200f      	movs	r0, #15
 8002d00:	183b      	adds	r3, r7, r0
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	2141      	movs	r1, #65	; 0x41
 8002d06:	5c52      	ldrb	r2, [r2, r1]
 8002d08:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2242      	movs	r2, #66	; 0x42
 8002d0e:	2100      	movs	r1, #0
 8002d10:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a62      	ldr	r2, [pc, #392]	; (8002ea0 <I2C_ITError+0x1ac>)
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002d2a:	183b      	adds	r3, r7, r0
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b28      	cmp	r3, #40	; 0x28
 8002d30:	d007      	beq.n	8002d42 <I2C_ITError+0x4e>
 8002d32:	183b      	adds	r3, r7, r0
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b29      	cmp	r3, #41	; 0x29
 8002d38:	d003      	beq.n	8002d42 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002d3a:	183b      	adds	r3, r7, r0
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d40:	d10c      	bne.n	8002d5c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2103      	movs	r1, #3
 8002d46:	0018      	movs	r0, r3
 8002d48:	f000 fb14 	bl	8003374 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2241      	movs	r2, #65	; 0x41
 8002d50:	2128      	movs	r1, #40	; 0x28
 8002d52:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a53      	ldr	r2, [pc, #332]	; (8002ea4 <I2C_ITError+0x1b0>)
 8002d58:	635a      	str	r2, [r3, #52]	; 0x34
 8002d5a:	e012      	b.n	8002d82 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d5c:	4a52      	ldr	r2, [pc, #328]	; (8002ea8 <I2C_ITError+0x1b4>)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	0011      	movs	r1, r2
 8002d62:	0018      	movs	r0, r3
 8002d64:	f000 fb06 	bl	8003374 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2241      	movs	r2, #65	; 0x41
 8002d6c:	5c9b      	ldrb	r3, [r3, r2]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b60      	cmp	r3, #96	; 0x60
 8002d72:	d003      	beq.n	8002d7c <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2241      	movs	r2, #65	; 0x41
 8002d78:	2120      	movs	r1, #32
 8002d7a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d03b      	beq.n	8002e08 <I2C_ITError+0x114>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b11      	cmp	r3, #17
 8002d94:	d002      	beq.n	8002d9c <I2C_ITError+0xa8>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b21      	cmp	r3, #33	; 0x21
 8002d9a:	d135      	bne.n	8002e08 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	01db      	lsls	r3, r3, #7
 8002da6:	401a      	ands	r2, r3
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	01db      	lsls	r3, r3, #7
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d107      	bne.n	8002dc0 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	493c      	ldr	r1, [pc, #240]	; (8002eac <I2C_ITError+0x1b8>)
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f7fe ffc9 	bl	8001d5c <HAL_DMA_GetState>
 8002dca:	0003      	movs	r3, r0
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d016      	beq.n	8002dfe <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd4:	4a36      	ldr	r2, [pc, #216]	; (8002eb0 <I2C_ITError+0x1bc>)
 8002dd6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2240      	movs	r2, #64	; 0x40
 8002ddc:	2100      	movs	r1, #0
 8002dde:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	0018      	movs	r0, r3
 8002de6:	f7fe ff4f 	bl	8001c88 <HAL_DMA_Abort_IT>
 8002dea:	1e03      	subs	r3, r0, #0
 8002dec:	d051      	beq.n	8002e92 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	0018      	movs	r0, r3
 8002dfa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002dfc:	e049      	b.n	8002e92 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	0018      	movs	r0, r3
 8002e02:	f000 f859 	bl	8002eb8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e06:	e044      	b.n	8002e92 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d03b      	beq.n	8002e88 <I2C_ITError+0x194>
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b12      	cmp	r3, #18
 8002e14:	d002      	beq.n	8002e1c <I2C_ITError+0x128>
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b22      	cmp	r3, #34	; 0x22
 8002e1a:	d135      	bne.n	8002e88 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	401a      	ands	r2, r3
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d107      	bne.n	8002e40 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	491e      	ldr	r1, [pc, #120]	; (8002eb4 <I2C_ITError+0x1c0>)
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e44:	0018      	movs	r0, r3
 8002e46:	f7fe ff89 	bl	8001d5c <HAL_DMA_GetState>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d016      	beq.n	8002e7e <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	4a16      	ldr	r2, [pc, #88]	; (8002eb0 <I2C_ITError+0x1bc>)
 8002e56:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2240      	movs	r2, #64	; 0x40
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e64:	0018      	movs	r0, r3
 8002e66:	f7fe ff0f 	bl	8001c88 <HAL_DMA_Abort_IT>
 8002e6a:	1e03      	subs	r3, r0, #0
 8002e6c:	d013      	beq.n	8002e96 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e78:	0018      	movs	r0, r3
 8002e7a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e7c:	e00b      	b.n	8002e96 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	0018      	movs	r0, r3
 8002e82:	f000 f819 	bl	8002eb8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e86:	e006      	b.n	8002e96 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f000 f814 	bl	8002eb8 <I2C_TreatErrorCallback>
  }
}
 8002e90:	e002      	b.n	8002e98 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	e000      	b.n	8002e98 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e96:	46c0      	nop			; (mov r8, r8)
}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b004      	add	sp, #16
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	ffff0000 	.word	0xffff0000
 8002ea4:	080025bd 	.word	0x080025bd
 8002ea8:	00008003 	.word	0x00008003
 8002eac:	ffffbfff 	.word	0xffffbfff
 8002eb0:	08002f4f 	.word	0x08002f4f
 8002eb4:	ffff7fff 	.word	0xffff7fff

08002eb8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2241      	movs	r2, #65	; 0x41
 8002ec4:	5c9b      	ldrb	r3, [r3, r2]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b60      	cmp	r3, #96	; 0x60
 8002eca:	d10f      	bne.n	8002eec <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2241      	movs	r2, #65	; 0x41
 8002ed0:	2120      	movs	r1, #32
 8002ed2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2240      	movs	r2, #64	; 0x40
 8002ede:	2100      	movs	r1, #0
 8002ee0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f7ff fb61 	bl	80025ac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002eea:	e00a      	b.n	8002f02 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2240      	movs	r2, #64	; 0x40
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	0018      	movs	r0, r3
 8002efe:	f7ff fb4d 	bl	800259c <HAL_I2C_ErrorCallback>
}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b002      	add	sp, #8
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d103      	bne.n	8002f28 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2200      	movs	r2, #0
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d007      	beq.n	8002f46 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699a      	ldr	r2, [r3, #24]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2101      	movs	r1, #1
 8002f42:	430a      	orrs	r2, r1
 8002f44:	619a      	str	r2, [r3, #24]
  }
}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b002      	add	sp, #8
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f68:	2200      	movs	r2, #0
 8002f6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f78:	2200      	movs	r2, #0
 8002f7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f7ff ff9a 	bl	8002eb8 <I2C_TreatErrorCallback>
}
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b004      	add	sp, #16
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	1dfb      	adds	r3, r7, #7
 8002f9a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f9c:	e021      	b.n	8002fe2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	d01e      	beq.n	8002fe2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa4:	f7fe fd88 	bl	8001ab8 <HAL_GetTick>
 8002fa8:	0002      	movs	r2, r0
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d302      	bcc.n	8002fba <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d113      	bne.n	8002fe2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2241      	movs	r2, #65	; 0x41
 8002fca:	2120      	movs	r1, #32
 8002fcc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2242      	movs	r2, #66	; 0x42
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2240      	movs	r2, #64	; 0x40
 8002fda:	2100      	movs	r1, #0
 8002fdc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e00f      	b.n	8003002 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	4013      	ands	r3, r2
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	425a      	negs	r2, r3
 8002ff2:	4153      	adcs	r3, r2
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	001a      	movs	r2, r3
 8002ff8:	1dfb      	adds	r3, r7, #7
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d0ce      	beq.n	8002f9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	0018      	movs	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	b004      	add	sp, #16
 8003008:	bd80      	pop	{r7, pc}

0800300a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003016:	e02b      	b.n	8003070 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	0018      	movs	r0, r3
 8003020:	f000 f86e 	bl	8003100 <I2C_IsErrorOccurred>
 8003024:	1e03      	subs	r3, r0, #0
 8003026:	d001      	beq.n	800302c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e029      	b.n	8003080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	3301      	adds	r3, #1
 8003030:	d01e      	beq.n	8003070 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003032:	f7fe fd41 	bl	8001ab8 <HAL_GetTick>
 8003036:	0002      	movs	r2, r0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	429a      	cmp	r2, r3
 8003040:	d302      	bcc.n	8003048 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d113      	bne.n	8003070 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	2220      	movs	r2, #32
 800304e:	431a      	orrs	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2241      	movs	r2, #65	; 0x41
 8003058:	2120      	movs	r1, #32
 800305a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2242      	movs	r2, #66	; 0x42
 8003060:	2100      	movs	r1, #0
 8003062:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2240      	movs	r2, #64	; 0x40
 8003068:	2100      	movs	r1, #0
 800306a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e007      	b.n	8003080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2202      	movs	r2, #2
 8003078:	4013      	ands	r3, r2
 800307a:	2b02      	cmp	r3, #2
 800307c:	d1cc      	bne.n	8003018 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b004      	add	sp, #16
 8003086:	bd80      	pop	{r7, pc}

08003088 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003094:	e028      	b.n	80030e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	0018      	movs	r0, r3
 800309e:	f000 f82f 	bl	8003100 <I2C_IsErrorOccurred>
 80030a2:	1e03      	subs	r3, r0, #0
 80030a4:	d001      	beq.n	80030aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e026      	b.n	80030f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030aa:	f7fe fd05 	bl	8001ab8 <HAL_GetTick>
 80030ae:	0002      	movs	r2, r0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d302      	bcc.n	80030c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d113      	bne.n	80030e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	2220      	movs	r2, #32
 80030c6:	431a      	orrs	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2241      	movs	r2, #65	; 0x41
 80030d0:	2120      	movs	r1, #32
 80030d2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2242      	movs	r2, #66	; 0x42
 80030d8:	2100      	movs	r1, #0
 80030da:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2240      	movs	r2, #64	; 0x40
 80030e0:	2100      	movs	r1, #0
 80030e2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e007      	b.n	80030f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	2220      	movs	r2, #32
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d1cf      	bne.n	8003096 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b004      	add	sp, #16
 80030fe:	bd80      	pop	{r7, pc}

08003100 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b08b      	sub	sp, #44	; 0x2c
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800310c:	2327      	movs	r3, #39	; 0x27
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2210      	movs	r2, #16
 8003128:	4013      	ands	r3, r2
 800312a:	d100      	bne.n	800312e <I2C_IsErrorOccurred+0x2e>
 800312c:	e082      	b.n	8003234 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2210      	movs	r2, #16
 8003134:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003136:	e060      	b.n	80031fa <I2C_IsErrorOccurred+0xfa>
 8003138:	2427      	movs	r4, #39	; 0x27
 800313a:	193b      	adds	r3, r7, r4
 800313c:	193a      	adds	r2, r7, r4
 800313e:	7812      	ldrb	r2, [r2, #0]
 8003140:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	3301      	adds	r3, #1
 8003146:	d058      	beq.n	80031fa <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003148:	f7fe fcb6 	bl	8001ab8 <HAL_GetTick>
 800314c:	0002      	movs	r2, r0
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	429a      	cmp	r2, r3
 8003156:	d306      	bcc.n	8003166 <I2C_IsErrorOccurred+0x66>
 8003158:	193b      	adds	r3, r7, r4
 800315a:	193a      	adds	r2, r7, r4
 800315c:	7812      	ldrb	r2, [r2, #0]
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d149      	bne.n	80031fa <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	01db      	lsls	r3, r3, #7
 8003170:	4013      	ands	r3, r2
 8003172:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003174:	2013      	movs	r0, #19
 8003176:	183b      	adds	r3, r7, r0
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	2142      	movs	r1, #66	; 0x42
 800317c:	5c52      	ldrb	r2, [r2, r1]
 800317e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	021b      	lsls	r3, r3, #8
 800318a:	401a      	ands	r2, r3
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	429a      	cmp	r2, r3
 8003192:	d126      	bne.n	80031e2 <I2C_IsErrorOccurred+0xe2>
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	01db      	lsls	r3, r3, #7
 800319a:	429a      	cmp	r2, r3
 800319c:	d021      	beq.n	80031e2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800319e:	183b      	adds	r3, r7, r0
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d01d      	beq.n	80031e2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	01c9      	lsls	r1, r1, #7
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031b8:	f7fe fc7e 	bl	8001ab8 <HAL_GetTick>
 80031bc:	0003      	movs	r3, r0
 80031be:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031c0:	e00f      	b.n	80031e2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031c2:	f7fe fc79 	bl	8001ab8 <HAL_GetTick>
 80031c6:	0002      	movs	r2, r0
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b19      	cmp	r3, #25
 80031ce:	d908      	bls.n	80031e2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	2220      	movs	r2, #32
 80031d4:	4313      	orrs	r3, r2
 80031d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80031d8:	2327      	movs	r3, #39	; 0x27
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]

              break;
 80031e0:	e00b      	b.n	80031fa <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	2220      	movs	r2, #32
 80031ea:	4013      	ands	r3, r2
 80031ec:	2127      	movs	r1, #39	; 0x27
 80031ee:	187a      	adds	r2, r7, r1
 80031f0:	1879      	adds	r1, r7, r1
 80031f2:	7809      	ldrb	r1, [r1, #0]
 80031f4:	7011      	strb	r1, [r2, #0]
 80031f6:	2b20      	cmp	r3, #32
 80031f8:	d1e3      	bne.n	80031c2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2220      	movs	r2, #32
 8003202:	4013      	ands	r3, r2
 8003204:	2b20      	cmp	r3, #32
 8003206:	d004      	beq.n	8003212 <I2C_IsErrorOccurred+0x112>
 8003208:	2327      	movs	r3, #39	; 0x27
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d092      	beq.n	8003138 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003212:	2327      	movs	r3, #39	; 0x27
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d103      	bne.n	8003224 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2220      	movs	r2, #32
 8003222:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	2204      	movs	r2, #4
 8003228:	4313      	orrs	r3, r2
 800322a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800322c:	2327      	movs	r3, #39	; 0x27
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4013      	ands	r3, r2
 8003244:	d00c      	beq.n	8003260 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	2201      	movs	r2, #1
 800324a:	4313      	orrs	r3, r2
 800324c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2280      	movs	r2, #128	; 0x80
 8003254:	0052      	lsls	r2, r2, #1
 8003256:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003258:	2327      	movs	r3, #39	; 0x27
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4013      	ands	r3, r2
 8003268:	d00c      	beq.n	8003284 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	2208      	movs	r2, #8
 800326e:	4313      	orrs	r3, r2
 8003270:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2280      	movs	r2, #128	; 0x80
 8003278:	00d2      	lsls	r2, r2, #3
 800327a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800327c:	2327      	movs	r3, #39	; 0x27
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	2201      	movs	r2, #1
 8003282:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4013      	ands	r3, r2
 800328c:	d00c      	beq.n	80032a8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	2202      	movs	r2, #2
 8003292:	4313      	orrs	r3, r2
 8003294:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2280      	movs	r2, #128	; 0x80
 800329c:	0092      	lsls	r2, r2, #2
 800329e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032a0:	2327      	movs	r3, #39	; 0x27
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	2201      	movs	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80032a8:	2327      	movs	r3, #39	; 0x27
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01d      	beq.n	80032ee <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7ff fe28 	bl	8002f0a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	490d      	ldr	r1, [pc, #52]	; (80032fc <I2C_IsErrorOccurred+0x1fc>)
 80032c6:	400a      	ands	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	431a      	orrs	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2241      	movs	r2, #65	; 0x41
 80032da:	2120      	movs	r1, #32
 80032dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2242      	movs	r2, #66	; 0x42
 80032e2:	2100      	movs	r1, #0
 80032e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2240      	movs	r2, #64	; 0x40
 80032ea:	2100      	movs	r1, #0
 80032ec:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80032ee:	2327      	movs	r3, #39	; 0x27
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	781b      	ldrb	r3, [r3, #0]
}
 80032f4:	0018      	movs	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b00b      	add	sp, #44	; 0x2c
 80032fa:	bd90      	pop	{r4, r7, pc}
 80032fc:	fe00e800 	.word	0xfe00e800

08003300 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	0008      	movs	r0, r1
 800330a:	0011      	movs	r1, r2
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	240a      	movs	r4, #10
 8003310:	193b      	adds	r3, r7, r4
 8003312:	1c02      	adds	r2, r0, #0
 8003314:	801a      	strh	r2, [r3, #0]
 8003316:	2009      	movs	r0, #9
 8003318:	183b      	adds	r3, r7, r0
 800331a:	1c0a      	adds	r2, r1, #0
 800331c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800331e:	193b      	adds	r3, r7, r4
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	059b      	lsls	r3, r3, #22
 8003324:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003326:	183b      	adds	r3, r7, r0
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	0419      	lsls	r1, r3, #16
 800332c:	23ff      	movs	r3, #255	; 0xff
 800332e:	041b      	lsls	r3, r3, #16
 8003330:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003332:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333a:	4313      	orrs	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800334a:	0d51      	lsrs	r1, r2, #21
 800334c:	2280      	movs	r2, #128	; 0x80
 800334e:	00d2      	lsls	r2, r2, #3
 8003350:	400a      	ands	r2, r1
 8003352:	4907      	ldr	r1, [pc, #28]	; (8003370 <I2C_TransferConfig+0x70>)
 8003354:	430a      	orrs	r2, r1
 8003356:	43d2      	mvns	r2, r2
 8003358:	401a      	ands	r2, r3
 800335a:	0011      	movs	r1, r2
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	46bd      	mov	sp, r7
 800336a:	b007      	add	sp, #28
 800336c:	bd90      	pop	{r4, r7, pc}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	03ff63ff 	.word	0x03ff63ff

08003374 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	000a      	movs	r2, r1
 800337e:	1cbb      	adds	r3, r7, #2
 8003380:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003386:	1cbb      	adds	r3, r7, #2
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	2201      	movs	r2, #1
 800338c:	4013      	ands	r3, r2
 800338e:	d010      	beq.n	80033b2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2242      	movs	r2, #66	; 0x42
 8003394:	4313      	orrs	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2241      	movs	r2, #65	; 0x41
 800339c:	5c9b      	ldrb	r3, [r3, r2]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	001a      	movs	r2, r3
 80033a2:	2328      	movs	r3, #40	; 0x28
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b28      	cmp	r3, #40	; 0x28
 80033a8:	d003      	beq.n	80033b2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	22b0      	movs	r2, #176	; 0xb0
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80033b2:	1cbb      	adds	r3, r7, #2
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	2202      	movs	r2, #2
 80033b8:	4013      	ands	r3, r2
 80033ba:	d010      	beq.n	80033de <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2244      	movs	r2, #68	; 0x44
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2241      	movs	r2, #65	; 0x41
 80033c8:	5c9b      	ldrb	r3, [r3, r2]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	001a      	movs	r2, r3
 80033ce:	2328      	movs	r3, #40	; 0x28
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b28      	cmp	r3, #40	; 0x28
 80033d4:	d003      	beq.n	80033de <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	22b0      	movs	r2, #176	; 0xb0
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80033de:	1cbb      	adds	r3, r7, #2
 80033e0:	2200      	movs	r2, #0
 80033e2:	5e9b      	ldrsh	r3, [r3, r2]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	da03      	bge.n	80033f0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	22b8      	movs	r2, #184	; 0xb8
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80033f0:	1cbb      	adds	r3, r7, #2
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d103      	bne.n	8003400 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2290      	movs	r2, #144	; 0x90
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003400:	1cbb      	adds	r3, r7, #2
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	2b20      	cmp	r3, #32
 8003406:	d103      	bne.n	8003410 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	4313      	orrs	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003410:	1cbb      	adds	r3, r7, #2
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	2b40      	cmp	r3, #64	; 0x40
 8003416:	d103      	bne.n	8003420 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2240      	movs	r2, #64	; 0x40
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	43d9      	mvns	r1, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	400a      	ands	r2, r1
 8003430:	601a      	str	r2, [r3, #0]
}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	46bd      	mov	sp, r7
 8003436:	b004      	add	sp, #16
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2241      	movs	r2, #65	; 0x41
 800344a:	5c9b      	ldrb	r3, [r3, r2]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b20      	cmp	r3, #32
 8003450:	d138      	bne.n	80034c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2240      	movs	r2, #64	; 0x40
 8003456:	5c9b      	ldrb	r3, [r3, r2]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800345c:	2302      	movs	r3, #2
 800345e:	e032      	b.n	80034c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2240      	movs	r2, #64	; 0x40
 8003464:	2101      	movs	r1, #1
 8003466:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2241      	movs	r2, #65	; 0x41
 800346c:	2124      	movs	r1, #36	; 0x24
 800346e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2101      	movs	r1, #1
 800347c:	438a      	bics	r2, r1
 800347e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4911      	ldr	r1, [pc, #68]	; (80034d0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800348c:	400a      	ands	r2, r1
 800348e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6819      	ldr	r1, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2101      	movs	r1, #1
 80034ac:	430a      	orrs	r2, r1
 80034ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2241      	movs	r2, #65	; 0x41
 80034b4:	2120      	movs	r1, #32
 80034b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2240      	movs	r2, #64	; 0x40
 80034bc:	2100      	movs	r1, #0
 80034be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	e000      	b.n	80034c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034c4:	2302      	movs	r3, #2
  }
}
 80034c6:	0018      	movs	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b002      	add	sp, #8
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	ffffefff 	.word	0xffffefff

080034d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2241      	movs	r2, #65	; 0x41
 80034e2:	5c9b      	ldrb	r3, [r3, r2]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d139      	bne.n	800355e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2240      	movs	r2, #64	; 0x40
 80034ee:	5c9b      	ldrb	r3, [r3, r2]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e033      	b.n	8003560 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2240      	movs	r2, #64	; 0x40
 80034fc:	2101      	movs	r1, #1
 80034fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2241      	movs	r2, #65	; 0x41
 8003504:	2124      	movs	r1, #36	; 0x24
 8003506:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2101      	movs	r1, #1
 8003514:	438a      	bics	r2, r1
 8003516:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4a11      	ldr	r2, [pc, #68]	; (8003568 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003524:	4013      	ands	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2101      	movs	r1, #1
 8003546:	430a      	orrs	r2, r1
 8003548:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2241      	movs	r2, #65	; 0x41
 800354e:	2120      	movs	r1, #32
 8003550:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2240      	movs	r2, #64	; 0x40
 8003556:	2100      	movs	r1, #0
 8003558:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e000      	b.n	8003560 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800355e:	2302      	movs	r3, #2
  }
}
 8003560:	0018      	movs	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	b004      	add	sp, #16
 8003566:	bd80      	pop	{r7, pc}
 8003568:	fffff0ff 	.word	0xfffff0ff

0800356c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003574:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800357a:	4013      	ands	r3, r2
 800357c:	0019      	movs	r1, r3
 800357e:	4b17      	ldr	r3, [pc, #92]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	430a      	orrs	r2, r1
 8003584:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	429a      	cmp	r2, r3
 800358e:	d11f      	bne.n	80035d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003590:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	0013      	movs	r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	189b      	adds	r3, r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4912      	ldr	r1, [pc, #72]	; (80035e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800359e:	0018      	movs	r0, r3
 80035a0:	f7fc fdba 	bl	8000118 <__udivsi3>
 80035a4:	0003      	movs	r3, r0
 80035a6:	3301      	adds	r3, #1
 80035a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035aa:	e008      	b.n	80035be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	e001      	b.n	80035be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e009      	b.n	80035d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035be:	4b07      	ldr	r3, [pc, #28]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	401a      	ands	r2, r3
 80035c8:	2380      	movs	r3, #128	; 0x80
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d0ed      	beq.n	80035ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	0018      	movs	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b004      	add	sp, #16
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	40007000 	.word	0x40007000
 80035e0:	fffff9ff 	.word	0xfffff9ff
 80035e4:	20000030 	.word	0x20000030
 80035e8:	000f4240 	.word	0x000f4240

080035ec <HAL_PWREx_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* Check PWR exti Rising flag */
  if (__HAL_PWR_PVD_EXTI_GET_RISING_FLAG() != 0x0U)
 80035f0:	4b0d      	ldr	r3, [pc, #52]	; (8003628 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	2380      	movs	r3, #128	; 0x80
 80035f6:	025b      	lsls	r3, r3, #9
 80035f8:	4013      	ands	r3, r2
 80035fa:	d005      	beq.n	8003608 <HAL_PWREx_PVD_IRQHandler+0x1c>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_RISING_FLAG();
 80035fc:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80035fe:	2280      	movs	r2, #128	; 0x80
 8003600:	0252      	lsls	r2, r2, #9
 8003602:	60da      	str	r2, [r3, #12]

    /* PWR PVD interrupt rising user callback */
    HAL_PWREx_PVD_Rising_Callback();
 8003604:	f000 f812 	bl	800362c <HAL_PWREx_PVD_Rising_Callback>
  }

  /* Check PWR exti fallling flag */
  if (__HAL_PWR_PVD_EXTI_GET_FALLING_FLAG() != 0x0U)
 8003608:	4b07      	ldr	r3, [pc, #28]	; (8003628 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	025b      	lsls	r3, r3, #9
 8003610:	4013      	ands	r3, r2
 8003612:	d005      	beq.n	8003620 <HAL_PWREx_PVD_IRQHandler+0x34>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FALLING_FLAG();
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8003616:	2280      	movs	r2, #128	; 0x80
 8003618:	0252      	lsls	r2, r2, #9
 800361a:	611a      	str	r2, [r3, #16]

    /* PWR PVD interrupt falling user callback */
    HAL_PWREx_PVD_Falling_Callback();
 800361c:	f000 f80b 	bl	8003636 <HAL_PWREx_PVD_Falling_Callback>
  }
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	40021800 	.word	0x40021800

0800362c <HAL_PWREx_PVD_Rising_Callback>:
/**
  * @brief  PWR PVD interrupt rising callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Rising_Callback(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Rising_Callback can be implemented in the user file
  */
}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_PWREx_PVD_Falling_Callback>:
/**
  * @brief  PWR PVD interrupt Falling callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Falling_Callback(void)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Falling_Callback can be implemented in the user file
  */
}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	23e0      	movs	r3, #224	; 0xe0
 800364a:	01db      	lsls	r3, r3, #7
 800364c:	4013      	ands	r3, r2
}
 800364e:	0018      	movs	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40021000 	.word	0x40021000

08003658 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e2fe      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2201      	movs	r2, #1
 8003670:	4013      	ands	r3, r2
 8003672:	d100      	bne.n	8003676 <HAL_RCC_OscConfig+0x1e>
 8003674:	e07c      	b.n	8003770 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003676:	4bc3      	ldr	r3, [pc, #780]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2238      	movs	r2, #56	; 0x38
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003680:	4bc0      	ldr	r3, [pc, #768]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	2203      	movs	r2, #3
 8003686:	4013      	ands	r3, r2
 8003688:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b10      	cmp	r3, #16
 800368e:	d102      	bne.n	8003696 <HAL_RCC_OscConfig+0x3e>
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2b03      	cmp	r3, #3
 8003694:	d002      	beq.n	800369c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d10b      	bne.n	80036b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800369c:	4bb9      	ldr	r3, [pc, #740]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	2380      	movs	r3, #128	; 0x80
 80036a2:	029b      	lsls	r3, r3, #10
 80036a4:	4013      	ands	r3, r2
 80036a6:	d062      	beq.n	800376e <HAL_RCC_OscConfig+0x116>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d15e      	bne.n	800376e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e2d9      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	025b      	lsls	r3, r3, #9
 80036bc:	429a      	cmp	r2, r3
 80036be:	d107      	bne.n	80036d0 <HAL_RCC_OscConfig+0x78>
 80036c0:	4bb0      	ldr	r3, [pc, #704]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	4baf      	ldr	r3, [pc, #700]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 80036c6:	2180      	movs	r1, #128	; 0x80
 80036c8:	0249      	lsls	r1, r1, #9
 80036ca:	430a      	orrs	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	e020      	b.n	8003712 <HAL_RCC_OscConfig+0xba>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	23a0      	movs	r3, #160	; 0xa0
 80036d6:	02db      	lsls	r3, r3, #11
 80036d8:	429a      	cmp	r2, r3
 80036da:	d10e      	bne.n	80036fa <HAL_RCC_OscConfig+0xa2>
 80036dc:	4ba9      	ldr	r3, [pc, #676]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4ba8      	ldr	r3, [pc, #672]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 80036e2:	2180      	movs	r1, #128	; 0x80
 80036e4:	02c9      	lsls	r1, r1, #11
 80036e6:	430a      	orrs	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	4ba6      	ldr	r3, [pc, #664]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4ba5      	ldr	r3, [pc, #660]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 80036f0:	2180      	movs	r1, #128	; 0x80
 80036f2:	0249      	lsls	r1, r1, #9
 80036f4:	430a      	orrs	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	e00b      	b.n	8003712 <HAL_RCC_OscConfig+0xba>
 80036fa:	4ba2      	ldr	r3, [pc, #648]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4ba1      	ldr	r3, [pc, #644]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 8003700:	49a1      	ldr	r1, [pc, #644]	; (8003988 <HAL_RCC_OscConfig+0x330>)
 8003702:	400a      	ands	r2, r1
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	4b9f      	ldr	r3, [pc, #636]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	4b9e      	ldr	r3, [pc, #632]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 800370c:	499f      	ldr	r1, [pc, #636]	; (800398c <HAL_RCC_OscConfig+0x334>)
 800370e:	400a      	ands	r2, r1
 8003710:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d014      	beq.n	8003744 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371a:	f7fe f9cd 	bl	8001ab8 <HAL_GetTick>
 800371e:	0003      	movs	r3, r0
 8003720:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003724:	f7fe f9c8 	bl	8001ab8 <HAL_GetTick>
 8003728:	0002      	movs	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e298      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003736:	4b93      	ldr	r3, [pc, #588]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	029b      	lsls	r3, r3, #10
 800373e:	4013      	ands	r3, r2
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0xcc>
 8003742:	e015      	b.n	8003770 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fe f9b8 	bl	8001ab8 <HAL_GetTick>
 8003748:	0003      	movs	r3, r0
 800374a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800374e:	f7fe f9b3 	bl	8001ab8 <HAL_GetTick>
 8003752:	0002      	movs	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b64      	cmp	r3, #100	; 0x64
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e283      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003760:	4b88      	ldr	r3, [pc, #544]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	029b      	lsls	r3, r3, #10
 8003768:	4013      	ands	r3, r2
 800376a:	d1f0      	bne.n	800374e <HAL_RCC_OscConfig+0xf6>
 800376c:	e000      	b.n	8003770 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2202      	movs	r2, #2
 8003776:	4013      	ands	r3, r2
 8003778:	d100      	bne.n	800377c <HAL_RCC_OscConfig+0x124>
 800377a:	e099      	b.n	80038b0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800377c:	4b81      	ldr	r3, [pc, #516]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2238      	movs	r2, #56	; 0x38
 8003782:	4013      	ands	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003786:	4b7f      	ldr	r3, [pc, #508]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2203      	movs	r2, #3
 800378c:	4013      	ands	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2b10      	cmp	r3, #16
 8003794:	d102      	bne.n	800379c <HAL_RCC_OscConfig+0x144>
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d002      	beq.n	80037a2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d135      	bne.n	800380e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037a2:	4b78      	ldr	r3, [pc, #480]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4013      	ands	r3, r2
 80037ac:	d005      	beq.n	80037ba <HAL_RCC_OscConfig+0x162>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e256      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ba:	4b72      	ldr	r3, [pc, #456]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4a74      	ldr	r2, [pc, #464]	; (8003990 <HAL_RCC_OscConfig+0x338>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	0019      	movs	r1, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	021a      	lsls	r2, r3, #8
 80037ca:	4b6e      	ldr	r3, [pc, #440]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 80037cc:	430a      	orrs	r2, r1
 80037ce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d112      	bne.n	80037fc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80037d6:	4b6b      	ldr	r3, [pc, #428]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a6e      	ldr	r2, [pc, #440]	; (8003994 <HAL_RCC_OscConfig+0x33c>)
 80037dc:	4013      	ands	r3, r2
 80037de:	0019      	movs	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	4b67      	ldr	r3, [pc, #412]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 80037e6:	430a      	orrs	r2, r1
 80037e8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80037ea:	4b66      	ldr	r3, [pc, #408]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	0adb      	lsrs	r3, r3, #11
 80037f0:	2207      	movs	r2, #7
 80037f2:	4013      	ands	r3, r2
 80037f4:	4a68      	ldr	r2, [pc, #416]	; (8003998 <HAL_RCC_OscConfig+0x340>)
 80037f6:	40da      	lsrs	r2, r3
 80037f8:	4b68      	ldr	r3, [pc, #416]	; (800399c <HAL_RCC_OscConfig+0x344>)
 80037fa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037fc:	4b68      	ldr	r3, [pc, #416]	; (80039a0 <HAL_RCC_OscConfig+0x348>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	0018      	movs	r0, r3
 8003802:	f7fe f8fd 	bl	8001a00 <HAL_InitTick>
 8003806:	1e03      	subs	r3, r0, #0
 8003808:	d051      	beq.n	80038ae <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e22c      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d030      	beq.n	8003878 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003816:	4b5b      	ldr	r3, [pc, #364]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a5e      	ldr	r2, [pc, #376]	; (8003994 <HAL_RCC_OscConfig+0x33c>)
 800381c:	4013      	ands	r3, r2
 800381e:	0019      	movs	r1, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	4b57      	ldr	r3, [pc, #348]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 8003826:	430a      	orrs	r2, r1
 8003828:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800382a:	4b56      	ldr	r3, [pc, #344]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4b55      	ldr	r3, [pc, #340]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 8003830:	2180      	movs	r1, #128	; 0x80
 8003832:	0049      	lsls	r1, r1, #1
 8003834:	430a      	orrs	r2, r1
 8003836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fe f93e 	bl	8001ab8 <HAL_GetTick>
 800383c:	0003      	movs	r3, r0
 800383e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003842:	f7fe f939 	bl	8001ab8 <HAL_GetTick>
 8003846:	0002      	movs	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e209      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003854:	4b4b      	ldr	r3, [pc, #300]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	2380      	movs	r3, #128	; 0x80
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4013      	ands	r3, r2
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003860:	4b48      	ldr	r3, [pc, #288]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	4a4a      	ldr	r2, [pc, #296]	; (8003990 <HAL_RCC_OscConfig+0x338>)
 8003866:	4013      	ands	r3, r2
 8003868:	0019      	movs	r1, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	021a      	lsls	r2, r3, #8
 8003870:	4b44      	ldr	r3, [pc, #272]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	e01b      	b.n	80038b0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003878:	4b42      	ldr	r3, [pc, #264]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	4b41      	ldr	r3, [pc, #260]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 800387e:	4949      	ldr	r1, [pc, #292]	; (80039a4 <HAL_RCC_OscConfig+0x34c>)
 8003880:	400a      	ands	r2, r1
 8003882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fe f918 	bl	8001ab8 <HAL_GetTick>
 8003888:	0003      	movs	r3, r0
 800388a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388e:	f7fe f913 	bl	8001ab8 <HAL_GetTick>
 8003892:	0002      	movs	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e1e3      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038a0:	4b38      	ldr	r3, [pc, #224]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4013      	ands	r3, r2
 80038aa:	d1f0      	bne.n	800388e <HAL_RCC_OscConfig+0x236>
 80038ac:	e000      	b.n	80038b0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2208      	movs	r2, #8
 80038b6:	4013      	ands	r3, r2
 80038b8:	d047      	beq.n	800394a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80038ba:	4b32      	ldr	r3, [pc, #200]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2238      	movs	r2, #56	; 0x38
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b18      	cmp	r3, #24
 80038c4:	d10a      	bne.n	80038dc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80038c6:	4b2f      	ldr	r3, [pc, #188]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 80038c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ca:	2202      	movs	r2, #2
 80038cc:	4013      	ands	r3, r2
 80038ce:	d03c      	beq.n	800394a <HAL_RCC_OscConfig+0x2f2>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d138      	bne.n	800394a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e1c5      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d019      	beq.n	8003918 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80038e4:	4b27      	ldr	r3, [pc, #156]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 80038e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038e8:	4b26      	ldr	r3, [pc, #152]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 80038ea:	2101      	movs	r1, #1
 80038ec:	430a      	orrs	r2, r1
 80038ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7fe f8e2 	bl	8001ab8 <HAL_GetTick>
 80038f4:	0003      	movs	r3, r0
 80038f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038fa:	f7fe f8dd 	bl	8001ab8 <HAL_GetTick>
 80038fe:	0002      	movs	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e1ad      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800390c:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 800390e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003910:	2202      	movs	r2, #2
 8003912:	4013      	ands	r3, r2
 8003914:	d0f1      	beq.n	80038fa <HAL_RCC_OscConfig+0x2a2>
 8003916:	e018      	b.n	800394a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003918:	4b1a      	ldr	r3, [pc, #104]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 800391a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 800391e:	2101      	movs	r1, #1
 8003920:	438a      	bics	r2, r1
 8003922:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fe f8c8 	bl	8001ab8 <HAL_GetTick>
 8003928:	0003      	movs	r3, r0
 800392a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392e:	f7fe f8c3 	bl	8001ab8 <HAL_GetTick>
 8003932:	0002      	movs	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e193      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003940:	4b10      	ldr	r3, [pc, #64]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 8003942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003944:	2202      	movs	r2, #2
 8003946:	4013      	ands	r3, r2
 8003948:	d1f1      	bne.n	800392e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2204      	movs	r2, #4
 8003950:	4013      	ands	r3, r2
 8003952:	d100      	bne.n	8003956 <HAL_RCC_OscConfig+0x2fe>
 8003954:	e0c6      	b.n	8003ae4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003956:	231f      	movs	r3, #31
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800395e:	4b09      	ldr	r3, [pc, #36]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2238      	movs	r2, #56	; 0x38
 8003964:	4013      	ands	r3, r2
 8003966:	2b20      	cmp	r3, #32
 8003968:	d11e      	bne.n	80039a8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800396a:	4b06      	ldr	r3, [pc, #24]	; (8003984 <HAL_RCC_OscConfig+0x32c>)
 800396c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396e:	2202      	movs	r2, #2
 8003970:	4013      	ands	r3, r2
 8003972:	d100      	bne.n	8003976 <HAL_RCC_OscConfig+0x31e>
 8003974:	e0b6      	b.n	8003ae4 <HAL_RCC_OscConfig+0x48c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d000      	beq.n	8003980 <HAL_RCC_OscConfig+0x328>
 800397e:	e0b1      	b.n	8003ae4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e171      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
 8003984:	40021000 	.word	0x40021000
 8003988:	fffeffff 	.word	0xfffeffff
 800398c:	fffbffff 	.word	0xfffbffff
 8003990:	ffff80ff 	.word	0xffff80ff
 8003994:	ffffc7ff 	.word	0xffffc7ff
 8003998:	00f42400 	.word	0x00f42400
 800399c:	20000030 	.word	0x20000030
 80039a0:	20000034 	.word	0x20000034
 80039a4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039a8:	4bb1      	ldr	r3, [pc, #708]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 80039aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	055b      	lsls	r3, r3, #21
 80039b0:	4013      	ands	r3, r2
 80039b2:	d101      	bne.n	80039b8 <HAL_RCC_OscConfig+0x360>
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x362>
 80039b8:	2300      	movs	r3, #0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d011      	beq.n	80039e2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80039be:	4bac      	ldr	r3, [pc, #688]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 80039c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039c2:	4bab      	ldr	r3, [pc, #684]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 80039c4:	2180      	movs	r1, #128	; 0x80
 80039c6:	0549      	lsls	r1, r1, #21
 80039c8:	430a      	orrs	r2, r1
 80039ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80039cc:	4ba8      	ldr	r3, [pc, #672]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 80039ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	055b      	lsls	r3, r3, #21
 80039d4:	4013      	ands	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80039da:	231f      	movs	r3, #31
 80039dc:	18fb      	adds	r3, r7, r3
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e2:	4ba4      	ldr	r3, [pc, #656]	; (8003c74 <HAL_RCC_OscConfig+0x61c>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	2380      	movs	r3, #128	; 0x80
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	4013      	ands	r3, r2
 80039ec:	d11a      	bne.n	8003a24 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ee:	4ba1      	ldr	r3, [pc, #644]	; (8003c74 <HAL_RCC_OscConfig+0x61c>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4ba0      	ldr	r3, [pc, #640]	; (8003c74 <HAL_RCC_OscConfig+0x61c>)
 80039f4:	2180      	movs	r1, #128	; 0x80
 80039f6:	0049      	lsls	r1, r1, #1
 80039f8:	430a      	orrs	r2, r1
 80039fa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80039fc:	f7fe f85c 	bl	8001ab8 <HAL_GetTick>
 8003a00:	0003      	movs	r3, r0
 8003a02:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a06:	f7fe f857 	bl	8001ab8 <HAL_GetTick>
 8003a0a:	0002      	movs	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e127      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a18:	4b96      	ldr	r3, [pc, #600]	; (8003c74 <HAL_RCC_OscConfig+0x61c>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	2380      	movs	r3, #128	; 0x80
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	4013      	ands	r3, r2
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d106      	bne.n	8003a3a <HAL_RCC_OscConfig+0x3e2>
 8003a2c:	4b90      	ldr	r3, [pc, #576]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003a2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a30:	4b8f      	ldr	r3, [pc, #572]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003a32:	2101      	movs	r1, #1
 8003a34:	430a      	orrs	r2, r1
 8003a36:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a38:	e01c      	b.n	8003a74 <HAL_RCC_OscConfig+0x41c>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b05      	cmp	r3, #5
 8003a40:	d10c      	bne.n	8003a5c <HAL_RCC_OscConfig+0x404>
 8003a42:	4b8b      	ldr	r3, [pc, #556]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003a44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a46:	4b8a      	ldr	r3, [pc, #552]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003a48:	2104      	movs	r1, #4
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a4e:	4b88      	ldr	r3, [pc, #544]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003a50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a52:	4b87      	ldr	r3, [pc, #540]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003a54:	2101      	movs	r1, #1
 8003a56:	430a      	orrs	r2, r1
 8003a58:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a5a:	e00b      	b.n	8003a74 <HAL_RCC_OscConfig+0x41c>
 8003a5c:	4b84      	ldr	r3, [pc, #528]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003a5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a60:	4b83      	ldr	r3, [pc, #524]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003a62:	2101      	movs	r1, #1
 8003a64:	438a      	bics	r2, r1
 8003a66:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a68:	4b81      	ldr	r3, [pc, #516]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003a6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a6c:	4b80      	ldr	r3, [pc, #512]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003a6e:	2104      	movs	r1, #4
 8003a70:	438a      	bics	r2, r1
 8003a72:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d014      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fe f81c 	bl	8001ab8 <HAL_GetTick>
 8003a80:	0003      	movs	r3, r0
 8003a82:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a84:	e009      	b.n	8003a9a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fe f817 	bl	8001ab8 <HAL_GetTick>
 8003a8a:	0002      	movs	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	4a79      	ldr	r2, [pc, #484]	; (8003c78 <HAL_RCC_OscConfig+0x620>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e0e6      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9a:	4b75      	ldr	r3, [pc, #468]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x42e>
 8003aa4:	e013      	b.n	8003ace <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa6:	f7fe f807 	bl	8001ab8 <HAL_GetTick>
 8003aaa:	0003      	movs	r3, r0
 8003aac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aae:	e009      	b.n	8003ac4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab0:	f7fe f802 	bl	8001ab8 <HAL_GetTick>
 8003ab4:	0002      	movs	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	4a6f      	ldr	r2, [pc, #444]	; (8003c78 <HAL_RCC_OscConfig+0x620>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e0d1      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ac4:	4b6a      	ldr	r3, [pc, #424]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac8:	2202      	movs	r2, #2
 8003aca:	4013      	ands	r3, r2
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003ace:	231f      	movs	r3, #31
 8003ad0:	18fb      	adds	r3, r7, r3
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d105      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003ad8:	4b65      	ldr	r3, [pc, #404]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003adc:	4b64      	ldr	r3, [pc, #400]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003ade:	4967      	ldr	r1, [pc, #412]	; (8003c7c <HAL_RCC_OscConfig+0x624>)
 8003ae0:	400a      	ands	r2, r1
 8003ae2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d100      	bne.n	8003aee <HAL_RCC_OscConfig+0x496>
 8003aec:	e0bb      	b.n	8003c66 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aee:	4b60      	ldr	r3, [pc, #384]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2238      	movs	r2, #56	; 0x38
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b10      	cmp	r3, #16
 8003af8:	d100      	bne.n	8003afc <HAL_RCC_OscConfig+0x4a4>
 8003afa:	e07b      	b.n	8003bf4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d156      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b04:	4b5a      	ldr	r3, [pc, #360]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4b59      	ldr	r3, [pc, #356]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003b0a:	495d      	ldr	r1, [pc, #372]	; (8003c80 <HAL_RCC_OscConfig+0x628>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7fd ffd2 	bl	8001ab8 <HAL_GetTick>
 8003b14:	0003      	movs	r3, r0
 8003b16:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1a:	f7fd ffcd 	bl	8001ab8 <HAL_GetTick>
 8003b1e:	0002      	movs	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e09d      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b2c:	4b50      	ldr	r3, [pc, #320]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	049b      	lsls	r3, r3, #18
 8003b34:	4013      	ands	r3, r2
 8003b36:	d1f0      	bne.n	8003b1a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b38:	4b4d      	ldr	r3, [pc, #308]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4a51      	ldr	r2, [pc, #324]	; (8003c84 <HAL_RCC_OscConfig+0x62c>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	0019      	movs	r1, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1a      	ldr	r2, [r3, #32]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b64:	431a      	orrs	r2, r3
 8003b66:	4b42      	ldr	r3, [pc, #264]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b6c:	4b40      	ldr	r3, [pc, #256]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b3f      	ldr	r3, [pc, #252]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003b72:	2180      	movs	r1, #128	; 0x80
 8003b74:	0449      	lsls	r1, r1, #17
 8003b76:	430a      	orrs	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003b7a:	4b3d      	ldr	r3, [pc, #244]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	4b3c      	ldr	r3, [pc, #240]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003b80:	2180      	movs	r1, #128	; 0x80
 8003b82:	0549      	lsls	r1, r1, #21
 8003b84:	430a      	orrs	r2, r1
 8003b86:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fd ff96 	bl	8001ab8 <HAL_GetTick>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b92:	f7fd ff91 	bl	8001ab8 <HAL_GetTick>
 8003b96:	0002      	movs	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e061      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba4:	4b32      	ldr	r3, [pc, #200]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	049b      	lsls	r3, r3, #18
 8003bac:	4013      	ands	r3, r2
 8003bae:	d0f0      	beq.n	8003b92 <HAL_RCC_OscConfig+0x53a>
 8003bb0:	e059      	b.n	8003c66 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb2:	4b2f      	ldr	r3, [pc, #188]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	4b2e      	ldr	r3, [pc, #184]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003bb8:	4931      	ldr	r1, [pc, #196]	; (8003c80 <HAL_RCC_OscConfig+0x628>)
 8003bba:	400a      	ands	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbe:	f7fd ff7b 	bl	8001ab8 <HAL_GetTick>
 8003bc2:	0003      	movs	r3, r0
 8003bc4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc8:	f7fd ff76 	bl	8001ab8 <HAL_GetTick>
 8003bcc:	0002      	movs	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e046      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bda:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	049b      	lsls	r3, r3, #18
 8003be2:	4013      	ands	r3, r2
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003be6:	4b22      	ldr	r3, [pc, #136]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003bec:	4926      	ldr	r1, [pc, #152]	; (8003c88 <HAL_RCC_OscConfig+0x630>)
 8003bee:	400a      	ands	r2, r1
 8003bf0:	60da      	str	r2, [r3, #12]
 8003bf2:	e038      	b.n	8003c66 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e033      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2203      	movs	r2, #3
 8003c0a:	401a      	ands	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d126      	bne.n	8003c62 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2270      	movs	r2, #112	; 0x70
 8003c18:	401a      	ands	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d11f      	bne.n	8003c62 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	23fe      	movs	r3, #254	; 0xfe
 8003c26:	01db      	lsls	r3, r3, #7
 8003c28:	401a      	ands	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d116      	bne.n	8003c62 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	23f8      	movs	r3, #248	; 0xf8
 8003c38:	039b      	lsls	r3, r3, #14
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d10e      	bne.n	8003c62 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	23e0      	movs	r3, #224	; 0xe0
 8003c48:	051b      	lsls	r3, r3, #20
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d106      	bne.n	8003c62 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	0f5b      	lsrs	r3, r3, #29
 8003c58:	075a      	lsls	r2, r3, #29
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d001      	beq.n	8003c66 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	0018      	movs	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b008      	add	sp, #32
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40007000 	.word	0x40007000
 8003c78:	00001388 	.word	0x00001388
 8003c7c:	efffffff 	.word	0xefffffff
 8003c80:	feffffff 	.word	0xfeffffff
 8003c84:	11c1808c 	.word	0x11c1808c
 8003c88:	eefefffc 	.word	0xeefefffc

08003c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0e9      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca0:	4b76      	ldr	r3, [pc, #472]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2207      	movs	r2, #7
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d91e      	bls.n	8003cec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cae:	4b73      	ldr	r3, [pc, #460]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2207      	movs	r2, #7
 8003cb4:	4393      	bics	r3, r2
 8003cb6:	0019      	movs	r1, r3
 8003cb8:	4b70      	ldr	r3, [pc, #448]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cc0:	f7fd fefa 	bl	8001ab8 <HAL_GetTick>
 8003cc4:	0003      	movs	r3, r0
 8003cc6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003cc8:	e009      	b.n	8003cde <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cca:	f7fd fef5 	bl	8001ab8 <HAL_GetTick>
 8003cce:	0002      	movs	r2, r0
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	4a6a      	ldr	r2, [pc, #424]	; (8003e80 <HAL_RCC_ClockConfig+0x1f4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e0ca      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003cde:	4b67      	ldr	r3, [pc, #412]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2207      	movs	r2, #7
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d1ee      	bne.n	8003cca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d015      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d006      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003d00:	4b60      	ldr	r3, [pc, #384]	; (8003e84 <HAL_RCC_ClockConfig+0x1f8>)
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	4b5f      	ldr	r3, [pc, #380]	; (8003e84 <HAL_RCC_ClockConfig+0x1f8>)
 8003d06:	21e0      	movs	r1, #224	; 0xe0
 8003d08:	01c9      	lsls	r1, r1, #7
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d0e:	4b5d      	ldr	r3, [pc, #372]	; (8003e84 <HAL_RCC_ClockConfig+0x1f8>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	4a5d      	ldr	r2, [pc, #372]	; (8003e88 <HAL_RCC_ClockConfig+0x1fc>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	0019      	movs	r1, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	4b59      	ldr	r3, [pc, #356]	; (8003e84 <HAL_RCC_ClockConfig+0x1f8>)
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2201      	movs	r2, #1
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d057      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d107      	bne.n	8003d44 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d34:	4b53      	ldr	r3, [pc, #332]	; (8003e84 <HAL_RCC_ClockConfig+0x1f8>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	2380      	movs	r3, #128	; 0x80
 8003d3a:	029b      	lsls	r3, r3, #10
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d12b      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e097      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d107      	bne.n	8003d5c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d4c:	4b4d      	ldr	r3, [pc, #308]	; (8003e84 <HAL_RCC_ClockConfig+0x1f8>)
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	049b      	lsls	r3, r3, #18
 8003d54:	4013      	ands	r3, r2
 8003d56:	d11f      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e08b      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d107      	bne.n	8003d74 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d64:	4b47      	ldr	r3, [pc, #284]	; (8003e84 <HAL_RCC_ClockConfig+0x1f8>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d113      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e07f      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d106      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d7c:	4b41      	ldr	r3, [pc, #260]	; (8003e84 <HAL_RCC_ClockConfig+0x1f8>)
 8003d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d80:	2202      	movs	r2, #2
 8003d82:	4013      	ands	r3, r2
 8003d84:	d108      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e074      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d8a:	4b3e      	ldr	r3, [pc, #248]	; (8003e84 <HAL_RCC_ClockConfig+0x1f8>)
 8003d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8e:	2202      	movs	r2, #2
 8003d90:	4013      	ands	r3, r2
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e06d      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d98:	4b3a      	ldr	r3, [pc, #232]	; (8003e84 <HAL_RCC_ClockConfig+0x1f8>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2207      	movs	r2, #7
 8003d9e:	4393      	bics	r3, r2
 8003da0:	0019      	movs	r1, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	4b37      	ldr	r3, [pc, #220]	; (8003e84 <HAL_RCC_ClockConfig+0x1f8>)
 8003da8:	430a      	orrs	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dac:	f7fd fe84 	bl	8001ab8 <HAL_GetTick>
 8003db0:	0003      	movs	r3, r0
 8003db2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db4:	e009      	b.n	8003dca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db6:	f7fd fe7f 	bl	8001ab8 <HAL_GetTick>
 8003dba:	0002      	movs	r2, r0
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	4a2f      	ldr	r2, [pc, #188]	; (8003e80 <HAL_RCC_ClockConfig+0x1f4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e054      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dca:	4b2e      	ldr	r3, [pc, #184]	; (8003e84 <HAL_RCC_ClockConfig+0x1f8>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2238      	movs	r2, #56	; 0x38
 8003dd0:	401a      	ands	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d1ec      	bne.n	8003db6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ddc:	4b27      	ldr	r3, [pc, #156]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2207      	movs	r2, #7
 8003de2:	4013      	ands	r3, r2
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d21e      	bcs.n	8003e28 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dea:	4b24      	ldr	r3, [pc, #144]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2207      	movs	r2, #7
 8003df0:	4393      	bics	r3, r2
 8003df2:	0019      	movs	r1, r3
 8003df4:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003dfc:	f7fd fe5c 	bl	8001ab8 <HAL_GetTick>
 8003e00:	0003      	movs	r3, r0
 8003e02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e04:	e009      	b.n	8003e1a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e06:	f7fd fe57 	bl	8001ab8 <HAL_GetTick>
 8003e0a:	0002      	movs	r2, r0
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	4a1b      	ldr	r2, [pc, #108]	; (8003e80 <HAL_RCC_ClockConfig+0x1f4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e02c      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e1a:	4b18      	ldr	r3, [pc, #96]	; (8003e7c <HAL_RCC_ClockConfig+0x1f0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2207      	movs	r2, #7
 8003e20:	4013      	ands	r3, r2
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d1ee      	bne.n	8003e06 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d009      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003e32:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <HAL_RCC_ClockConfig+0x1f8>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <HAL_RCC_ClockConfig+0x200>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	0019      	movs	r1, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <HAL_RCC_ClockConfig+0x1f8>)
 8003e42:	430a      	orrs	r2, r1
 8003e44:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003e46:	f000 f829 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8003e4a:	0001      	movs	r1, r0
 8003e4c:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <HAL_RCC_ClockConfig+0x1f8>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	0a1b      	lsrs	r3, r3, #8
 8003e52:	220f      	movs	r2, #15
 8003e54:	401a      	ands	r2, r3
 8003e56:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <HAL_RCC_ClockConfig+0x204>)
 8003e58:	0092      	lsls	r2, r2, #2
 8003e5a:	58d3      	ldr	r3, [r2, r3]
 8003e5c:	221f      	movs	r2, #31
 8003e5e:	4013      	ands	r3, r2
 8003e60:	000a      	movs	r2, r1
 8003e62:	40da      	lsrs	r2, r3
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCC_ClockConfig+0x208>)
 8003e66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e68:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <HAL_RCC_ClockConfig+0x20c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f7fd fdc7 	bl	8001a00 <HAL_InitTick>
 8003e72:	0003      	movs	r3, r0
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b004      	add	sp, #16
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40022000 	.word	0x40022000
 8003e80:	00001388 	.word	0x00001388
 8003e84:	40021000 	.word	0x40021000
 8003e88:	fffff0ff 	.word	0xfffff0ff
 8003e8c:	ffff8fff 	.word	0xffff8fff
 8003e90:	08007094 	.word	0x08007094
 8003e94:	20000030 	.word	0x20000030
 8003e98:	20000034 	.word	0x20000034

08003e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ea2:	4b3c      	ldr	r3, [pc, #240]	; (8003f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	2238      	movs	r2, #56	; 0x38
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d10f      	bne.n	8003ecc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003eac:	4b39      	ldr	r3, [pc, #228]	; (8003f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	0adb      	lsrs	r3, r3, #11
 8003eb2:	2207      	movs	r2, #7
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	409a      	lsls	r2, r3
 8003eba:	0013      	movs	r3, r2
 8003ebc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003ebe:	6839      	ldr	r1, [r7, #0]
 8003ec0:	4835      	ldr	r0, [pc, #212]	; (8003f98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ec2:	f7fc f929 	bl	8000118 <__udivsi3>
 8003ec6:	0003      	movs	r3, r0
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	e05d      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ecc:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2238      	movs	r2, #56	; 0x38
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d102      	bne.n	8003ede <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ed8:	4b30      	ldr	r3, [pc, #192]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x100>)
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	e054      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ede:	4b2d      	ldr	r3, [pc, #180]	; (8003f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2238      	movs	r2, #56	; 0x38
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2b10      	cmp	r3, #16
 8003ee8:	d138      	bne.n	8003f5c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003eea:	4b2a      	ldr	r3, [pc, #168]	; (8003f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2203      	movs	r2, #3
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ef4:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	2207      	movs	r2, #7
 8003efc:	4013      	ands	r3, r2
 8003efe:	3301      	adds	r3, #1
 8003f00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d10d      	bne.n	8003f24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	4824      	ldr	r0, [pc, #144]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x100>)
 8003f0c:	f7fc f904 	bl	8000118 <__udivsi3>
 8003f10:	0003      	movs	r3, r0
 8003f12:	0019      	movs	r1, r3
 8003f14:	4b1f      	ldr	r3, [pc, #124]	; (8003f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	0a1b      	lsrs	r3, r3, #8
 8003f1a:	227f      	movs	r2, #127	; 0x7f
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	434b      	muls	r3, r1
 8003f20:	617b      	str	r3, [r7, #20]
        break;
 8003f22:	e00d      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	481c      	ldr	r0, [pc, #112]	; (8003f98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003f28:	f7fc f8f6 	bl	8000118 <__udivsi3>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	0019      	movs	r1, r3
 8003f30:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	0a1b      	lsrs	r3, r3, #8
 8003f36:	227f      	movs	r2, #127	; 0x7f
 8003f38:	4013      	ands	r3, r2
 8003f3a:	434b      	muls	r3, r1
 8003f3c:	617b      	str	r3, [r7, #20]
        break;
 8003f3e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003f40:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	0f5b      	lsrs	r3, r3, #29
 8003f46:	2207      	movs	r2, #7
 8003f48:	4013      	ands	r3, r2
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	6978      	ldr	r0, [r7, #20]
 8003f52:	f7fc f8e1 	bl	8000118 <__udivsi3>
 8003f56:	0003      	movs	r3, r0
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	e015      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f5c:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	2238      	movs	r2, #56	; 0x38
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d103      	bne.n	8003f70 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	021b      	lsls	r3, r3, #8
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	e00b      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f70:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2238      	movs	r2, #56	; 0x38
 8003f76:	4013      	ands	r3, r2
 8003f78:	2b18      	cmp	r3, #24
 8003f7a:	d103      	bne.n	8003f84 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003f7c:	23fa      	movs	r3, #250	; 0xfa
 8003f7e:	01db      	lsls	r3, r3, #7
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	e001      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f88:	693b      	ldr	r3, [r7, #16]
}
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b006      	add	sp, #24
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	40021000 	.word	0x40021000
 8003f98:	00f42400 	.word	0x00f42400
 8003f9c:	007a1200 	.word	0x007a1200

08003fa0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa4:	4b02      	ldr	r3, [pc, #8]	; (8003fb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
}
 8003fa8:	0018      	movs	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	20000030 	.word	0x20000030

08003fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb4:	b5b0      	push	{r4, r5, r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003fb8:	f7ff fff2 	bl	8003fa0 <HAL_RCC_GetHCLKFreq>
 8003fbc:	0004      	movs	r4, r0
 8003fbe:	f7ff fb3f 	bl	8003640 <LL_RCC_GetAPB1Prescaler>
 8003fc2:	0003      	movs	r3, r0
 8003fc4:	0b1a      	lsrs	r2, r3, #12
 8003fc6:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fc8:	0092      	lsls	r2, r2, #2
 8003fca:	58d3      	ldr	r3, [r2, r3]
 8003fcc:	221f      	movs	r2, #31
 8003fce:	4013      	ands	r3, r2
 8003fd0:	40dc      	lsrs	r4, r3
 8003fd2:	0023      	movs	r3, r4
}
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	080070d4 	.word	0x080070d4

08003fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003fe8:	2313      	movs	r3, #19
 8003fea:	18fb      	adds	r3, r7, r3
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ff0:	2312      	movs	r3, #18
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	029b      	lsls	r3, r3, #10
 8004000:	4013      	ands	r3, r2
 8004002:	d100      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004004:	e0a3      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004006:	2011      	movs	r0, #17
 8004008:	183b      	adds	r3, r7, r0
 800400a:	2200      	movs	r2, #0
 800400c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800400e:	4ba5      	ldr	r3, [pc, #660]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004010:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	055b      	lsls	r3, r3, #21
 8004016:	4013      	ands	r3, r2
 8004018:	d110      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401a:	4ba2      	ldr	r3, [pc, #648]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800401c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800401e:	4ba1      	ldr	r3, [pc, #644]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004020:	2180      	movs	r1, #128	; 0x80
 8004022:	0549      	lsls	r1, r1, #21
 8004024:	430a      	orrs	r2, r1
 8004026:	63da      	str	r2, [r3, #60]	; 0x3c
 8004028:	4b9e      	ldr	r3, [pc, #632]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800402a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	055b      	lsls	r3, r3, #21
 8004030:	4013      	ands	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]
 8004034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004036:	183b      	adds	r3, r7, r0
 8004038:	2201      	movs	r2, #1
 800403a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800403c:	4b9a      	ldr	r3, [pc, #616]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b99      	ldr	r3, [pc, #612]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004042:	2180      	movs	r1, #128	; 0x80
 8004044:	0049      	lsls	r1, r1, #1
 8004046:	430a      	orrs	r2, r1
 8004048:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800404a:	f7fd fd35 	bl	8001ab8 <HAL_GetTick>
 800404e:	0003      	movs	r3, r0
 8004050:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004052:	e00b      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004054:	f7fd fd30 	bl	8001ab8 <HAL_GetTick>
 8004058:	0002      	movs	r2, r0
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d904      	bls.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004062:	2313      	movs	r3, #19
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	2203      	movs	r2, #3
 8004068:	701a      	strb	r2, [r3, #0]
        break;
 800406a:	e005      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800406c:	4b8e      	ldr	r3, [pc, #568]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	2380      	movs	r3, #128	; 0x80
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	4013      	ands	r3, r2
 8004076:	d0ed      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004078:	2313      	movs	r3, #19
 800407a:	18fb      	adds	r3, r7, r3
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d154      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004082:	4b88      	ldr	r3, [pc, #544]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004084:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004086:	23c0      	movs	r3, #192	; 0xc0
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4013      	ands	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d019      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	429a      	cmp	r2, r3
 800409c:	d014      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800409e:	4b81      	ldr	r3, [pc, #516]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a2:	4a82      	ldr	r2, [pc, #520]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040a8:	4b7e      	ldr	r3, [pc, #504]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040ac:	4b7d      	ldr	r3, [pc, #500]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040ae:	2180      	movs	r1, #128	; 0x80
 80040b0:	0249      	lsls	r1, r1, #9
 80040b2:	430a      	orrs	r2, r1
 80040b4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040b6:	4b7b      	ldr	r3, [pc, #492]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040ba:	4b7a      	ldr	r3, [pc, #488]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040bc:	497c      	ldr	r1, [pc, #496]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80040be:	400a      	ands	r2, r1
 80040c0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040c2:	4b78      	ldr	r3, [pc, #480]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2201      	movs	r2, #1
 80040cc:	4013      	ands	r3, r2
 80040ce:	d016      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fd fcf2 	bl	8001ab8 <HAL_GetTick>
 80040d4:	0003      	movs	r3, r0
 80040d6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d8:	e00c      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040da:	f7fd fced 	bl	8001ab8 <HAL_GetTick>
 80040de:	0002      	movs	r2, r0
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	4a73      	ldr	r2, [pc, #460]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d904      	bls.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80040ea:	2313      	movs	r3, #19
 80040ec:	18fb      	adds	r3, r7, r3
 80040ee:	2203      	movs	r2, #3
 80040f0:	701a      	strb	r2, [r3, #0]
            break;
 80040f2:	e004      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f4:	4b6b      	ldr	r3, [pc, #428]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	2202      	movs	r2, #2
 80040fa:	4013      	ands	r3, r2
 80040fc:	d0ed      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80040fe:	2313      	movs	r3, #19
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004108:	4b66      	ldr	r3, [pc, #408]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800410a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410c:	4a67      	ldr	r2, [pc, #412]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800410e:	4013      	ands	r3, r2
 8004110:	0019      	movs	r1, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004116:	4b63      	ldr	r3, [pc, #396]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004118:	430a      	orrs	r2, r1
 800411a:	65da      	str	r2, [r3, #92]	; 0x5c
 800411c:	e00c      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800411e:	2312      	movs	r3, #18
 8004120:	18fb      	adds	r3, r7, r3
 8004122:	2213      	movs	r2, #19
 8004124:	18ba      	adds	r2, r7, r2
 8004126:	7812      	ldrb	r2, [r2, #0]
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e005      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	2312      	movs	r3, #18
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	2213      	movs	r2, #19
 8004132:	18ba      	adds	r2, r7, r2
 8004134:	7812      	ldrb	r2, [r2, #0]
 8004136:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004138:	2311      	movs	r3, #17
 800413a:	18fb      	adds	r3, r7, r3
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d105      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004142:	4b58      	ldr	r3, [pc, #352]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004146:	4b57      	ldr	r3, [pc, #348]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004148:	495b      	ldr	r1, [pc, #364]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800414a:	400a      	ands	r2, r1
 800414c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2201      	movs	r2, #1
 8004154:	4013      	ands	r3, r2
 8004156:	d009      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004158:	4b52      	ldr	r3, [pc, #328]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	2203      	movs	r2, #3
 800415e:	4393      	bics	r3, r2
 8004160:	0019      	movs	r1, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	4b4f      	ldr	r3, [pc, #316]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004168:	430a      	orrs	r2, r1
 800416a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2210      	movs	r2, #16
 8004172:	4013      	ands	r3, r2
 8004174:	d009      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004176:	4b4b      	ldr	r3, [pc, #300]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417a:	4a50      	ldr	r2, [pc, #320]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800417c:	4013      	ands	r3, r2
 800417e:	0019      	movs	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	4b47      	ldr	r3, [pc, #284]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004186:	430a      	orrs	r2, r1
 8004188:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4013      	ands	r3, r2
 8004194:	d009      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004196:	4b43      	ldr	r3, [pc, #268]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	4a49      	ldr	r2, [pc, #292]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800419c:	4013      	ands	r3, r2
 800419e:	0019      	movs	r1, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695a      	ldr	r2, [r3, #20]
 80041a4:	4b3f      	ldr	r3, [pc, #252]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041a6:	430a      	orrs	r2, r1
 80041a8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4013      	ands	r3, r2
 80041b4:	d009      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041b6:	4b3b      	ldr	r3, [pc, #236]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ba:	4a42      	ldr	r2, [pc, #264]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80041bc:	4013      	ands	r3, r2
 80041be:	0019      	movs	r1, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699a      	ldr	r2, [r3, #24]
 80041c4:	4b37      	ldr	r3, [pc, #220]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041c6:	430a      	orrs	r2, r1
 80041c8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2220      	movs	r2, #32
 80041d0:	4013      	ands	r3, r2
 80041d2:	d009      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041d4:	4b33      	ldr	r3, [pc, #204]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d8:	4a3b      	ldr	r2, [pc, #236]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80041da:	4013      	ands	r3, r2
 80041dc:	0019      	movs	r1, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	4b30      	ldr	r3, [pc, #192]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041e4:	430a      	orrs	r2, r1
 80041e6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	01db      	lsls	r3, r3, #7
 80041f0:	4013      	ands	r3, r2
 80041f2:	d015      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041f4:	4b2b      	ldr	r3, [pc, #172]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	0899      	lsrs	r1, r3, #2
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69da      	ldr	r2, [r3, #28]
 8004200:	4b28      	ldr	r3, [pc, #160]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004202:	430a      	orrs	r2, r1
 8004204:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69da      	ldr	r2, [r3, #28]
 800420a:	2380      	movs	r3, #128	; 0x80
 800420c:	05db      	lsls	r3, r3, #23
 800420e:	429a      	cmp	r2, r3
 8004210:	d106      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004212:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	4b23      	ldr	r3, [pc, #140]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004218:	2180      	movs	r1, #128	; 0x80
 800421a:	0249      	lsls	r1, r1, #9
 800421c:	430a      	orrs	r2, r1
 800421e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	039b      	lsls	r3, r3, #14
 8004228:	4013      	ands	r3, r2
 800422a:	d016      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800422c:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800422e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004230:	4a26      	ldr	r2, [pc, #152]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004232:	4013      	ands	r3, r2
 8004234:	0019      	movs	r1, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1a      	ldr	r2, [r3, #32]
 800423a:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800423c:	430a      	orrs	r2, r1
 800423e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1a      	ldr	r2, [r3, #32]
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	03db      	lsls	r3, r3, #15
 8004248:	429a      	cmp	r2, r3
 800424a:	d106      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800424c:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004252:	2180      	movs	r1, #128	; 0x80
 8004254:	0449      	lsls	r1, r1, #17
 8004256:	430a      	orrs	r2, r1
 8004258:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	2380      	movs	r3, #128	; 0x80
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	4013      	ands	r3, r2
 8004264:	d016      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004266:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800426c:	4013      	ands	r3, r2
 800426e:	0019      	movs	r1, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004276:	430a      	orrs	r2, r1
 8004278:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	2380      	movs	r3, #128	; 0x80
 8004280:	01db      	lsls	r3, r3, #7
 8004282:	429a      	cmp	r2, r3
 8004284:	d106      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004286:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800428c:	2180      	movs	r1, #128	; 0x80
 800428e:	0249      	lsls	r1, r1, #9
 8004290:	430a      	orrs	r2, r1
 8004292:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004294:	2312      	movs	r3, #18
 8004296:	18fb      	adds	r3, r7, r3
 8004298:	781b      	ldrb	r3, [r3, #0]
}
 800429a:	0018      	movs	r0, r3
 800429c:	46bd      	mov	sp, r7
 800429e:	b006      	add	sp, #24
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	40021000 	.word	0x40021000
 80042a8:	40007000 	.word	0x40007000
 80042ac:	fffffcff 	.word	0xfffffcff
 80042b0:	fffeffff 	.word	0xfffeffff
 80042b4:	00001388 	.word	0x00001388
 80042b8:	efffffff 	.word	0xefffffff
 80042bc:	fffff3ff 	.word	0xfffff3ff
 80042c0:	fff3ffff 	.word	0xfff3ffff
 80042c4:	ffcfffff 	.word	0xffcfffff
 80042c8:	ffffcfff 	.word	0xffffcfff
 80042cc:	ffbfffff 	.word	0xffbfffff
 80042d0:	ffff3fff 	.word	0xffff3fff

080042d4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80042d4:	b5b0      	push	{r4, r5, r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042dc:	230f      	movs	r3, #15
 80042de:	18fb      	adds	r3, r7, r3
 80042e0:	2201      	movs	r2, #1
 80042e2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d100      	bne.n	80042ec <HAL_RTC_Init+0x18>
 80042ea:	e08c      	b.n	8004406 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2229      	movs	r2, #41	; 0x29
 80042f0:	5c9b      	ldrb	r3, [r3, r2]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10b      	bne.n	8004310 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2228      	movs	r2, #40	; 0x28
 80042fc:	2100      	movs	r1, #0
 80042fe:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2288      	movs	r2, #136	; 0x88
 8004304:	0212      	lsls	r2, r2, #8
 8004306:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	0018      	movs	r0, r3
 800430c:	f7fd f976 	bl	80015fc <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2229      	movs	r2, #41	; 0x29
 8004314:	2102      	movs	r1, #2
 8004316:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	2210      	movs	r2, #16
 8004320:	4013      	ands	r3, r2
 8004322:	2b10      	cmp	r3, #16
 8004324:	d062      	beq.n	80043ec <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	22ca      	movs	r2, #202	; 0xca
 800432c:	625a      	str	r2, [r3, #36]	; 0x24
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2253      	movs	r2, #83	; 0x53
 8004334:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004336:	250f      	movs	r5, #15
 8004338:	197c      	adds	r4, r7, r5
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	0018      	movs	r0, r3
 800433e:	f000 fcba 	bl	8004cb6 <RTC_EnterInitMode>
 8004342:	0003      	movs	r3, r0
 8004344:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004346:	0028      	movs	r0, r5
 8004348:	183b      	adds	r3, r7, r0
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d12c      	bne.n	80043aa <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	492e      	ldr	r1, [pc, #184]	; (8004414 <HAL_RTC_Init+0x140>)
 800435c:	400a      	ands	r2, r1
 800435e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6999      	ldr	r1, [r3, #24]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6912      	ldr	r2, [r2, #16]
 8004386:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6919      	ldr	r1, [r3, #16]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	041a      	lsls	r2, r3, #16
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800439c:	183c      	adds	r4, r7, r0
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	0018      	movs	r0, r3
 80043a2:	f000 fccb 	bl	8004d3c <RTC_ExitInitMode>
 80043a6:	0003      	movs	r3, r0
 80043a8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80043aa:	230f      	movs	r3, #15
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d116      	bne.n	80043e2 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699a      	ldr	r2, [r3, #24]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	00d2      	lsls	r2, r2, #3
 80043c0:	08d2      	lsrs	r2, r2, #3
 80043c2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6999      	ldr	r1, [r3, #24]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	22ff      	movs	r2, #255	; 0xff
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24
 80043ea:	e003      	b.n	80043f4 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80043ec:	230f      	movs	r3, #15
 80043ee:	18fb      	adds	r3, r7, r3
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80043f4:	230f      	movs	r3, #15
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d103      	bne.n	8004406 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2229      	movs	r2, #41	; 0x29
 8004402:	2101      	movs	r1, #1
 8004404:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004406:	230f      	movs	r3, #15
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	781b      	ldrb	r3, [r3, #0]
}
 800440c:	0018      	movs	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	b004      	add	sp, #16
 8004412:	bdb0      	pop	{r4, r5, r7, pc}
 8004414:	fb8fffbf 	.word	0xfb8fffbf

08004418 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004418:	b5b0      	push	{r4, r5, r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2228      	movs	r2, #40	; 0x28
 8004428:	5c9b      	ldrb	r3, [r3, r2]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_RTC_SetTime+0x1a>
 800442e:	2302      	movs	r3, #2
 8004430:	e092      	b.n	8004558 <HAL_RTC_SetTime+0x140>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2228      	movs	r2, #40	; 0x28
 8004436:	2101      	movs	r1, #1
 8004438:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2229      	movs	r2, #41	; 0x29
 800443e:	2102      	movs	r1, #2
 8004440:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	22ca      	movs	r2, #202	; 0xca
 8004448:	625a      	str	r2, [r3, #36]	; 0x24
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2253      	movs	r2, #83	; 0x53
 8004450:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004452:	2513      	movs	r5, #19
 8004454:	197c      	adds	r4, r7, r5
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	0018      	movs	r0, r3
 800445a:	f000 fc2c 	bl	8004cb6 <RTC_EnterInitMode>
 800445e:	0003      	movs	r3, r0
 8004460:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004462:	197b      	adds	r3, r7, r5
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d162      	bne.n	8004530 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d125      	bne.n	80044bc <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	2240      	movs	r2, #64	; 0x40
 8004478:	4013      	ands	r3, r2
 800447a:	d102      	bne.n	8004482 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2200      	movs	r2, #0
 8004480:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	0018      	movs	r0, r3
 8004488:	f000 fc9c 	bl	8004dc4 <RTC_ByteToBcd2>
 800448c:	0003      	movs	r3, r0
 800448e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	785b      	ldrb	r3, [r3, #1]
 8004494:	0018      	movs	r0, r3
 8004496:	f000 fc95 	bl	8004dc4 <RTC_ByteToBcd2>
 800449a:	0003      	movs	r3, r0
 800449c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800449e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	789b      	ldrb	r3, [r3, #2]
 80044a4:	0018      	movs	r0, r3
 80044a6:	f000 fc8d 	bl	8004dc4 <RTC_ByteToBcd2>
 80044aa:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044ac:	0022      	movs	r2, r4
 80044ae:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	78db      	ldrb	r3, [r3, #3]
 80044b4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]
 80044ba:	e017      	b.n	80044ec <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	2240      	movs	r2, #64	; 0x40
 80044c4:	4013      	ands	r3, r2
 80044c6:	d102      	bne.n	80044ce <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2200      	movs	r2, #0
 80044cc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	785b      	ldrb	r3, [r3, #1]
 80044d8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044da:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044e0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	78db      	ldrb	r3, [r3, #3]
 80044e6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	491b      	ldr	r1, [pc, #108]	; (8004560 <HAL_RTC_SetTime+0x148>)
 80044f4:	400a      	ands	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4918      	ldr	r1, [pc, #96]	; (8004564 <HAL_RTC_SetTime+0x14c>)
 8004504:	400a      	ands	r2, r1
 8004506:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6999      	ldr	r1, [r3, #24]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	431a      	orrs	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004520:	2313      	movs	r3, #19
 8004522:	18fc      	adds	r4, r7, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	0018      	movs	r0, r3
 8004528:	f000 fc08 	bl	8004d3c <RTC_ExitInitMode>
 800452c:	0003      	movs	r3, r0
 800452e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	22ff      	movs	r2, #255	; 0xff
 8004536:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004538:	2313      	movs	r3, #19
 800453a:	18fb      	adds	r3, r7, r3
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2229      	movs	r2, #41	; 0x29
 8004546:	2101      	movs	r1, #1
 8004548:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2228      	movs	r2, #40	; 0x28
 800454e:	2100      	movs	r1, #0
 8004550:	5499      	strb	r1, [r3, r2]

  return status;
 8004552:	2313      	movs	r3, #19
 8004554:	18fb      	adds	r3, r7, r3
 8004556:	781b      	ldrb	r3, [r3, #0]
}
 8004558:	0018      	movs	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	b006      	add	sp, #24
 800455e:	bdb0      	pop	{r4, r5, r7, pc}
 8004560:	007f7f7f 	.word	0x007f7f7f
 8004564:	fffbffff 	.word	0xfffbffff

08004568 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	045b      	lsls	r3, r3, #17
 8004586:	0c5a      	lsrs	r2, r3, #17
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a22      	ldr	r2, [pc, #136]	; (800461c <HAL_RTC_GetTime+0xb4>)
 8004594:	4013      	ands	r3, r2
 8004596:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	0c1b      	lsrs	r3, r3, #16
 800459c:	b2db      	uxtb	r3, r3
 800459e:	223f      	movs	r2, #63	; 0x3f
 80045a0:	4013      	ands	r3, r2
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	0a1b      	lsrs	r3, r3, #8
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	227f      	movs	r2, #127	; 0x7f
 80045b0:	4013      	ands	r3, r2
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	227f      	movs	r2, #127	; 0x7f
 80045be:	4013      	ands	r3, r2
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	0d9b      	lsrs	r3, r3, #22
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2201      	movs	r2, #1
 80045ce:	4013      	ands	r3, r2
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d11a      	bne.n	8004612 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	0018      	movs	r0, r3
 80045e2:	f000 fc17 	bl	8004e14 <RTC_Bcd2ToByte>
 80045e6:	0003      	movs	r3, r0
 80045e8:	001a      	movs	r2, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	785b      	ldrb	r3, [r3, #1]
 80045f2:	0018      	movs	r0, r3
 80045f4:	f000 fc0e 	bl	8004e14 <RTC_Bcd2ToByte>
 80045f8:	0003      	movs	r3, r0
 80045fa:	001a      	movs	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	789b      	ldrb	r3, [r3, #2]
 8004604:	0018      	movs	r0, r3
 8004606:	f000 fc05 	bl	8004e14 <RTC_Bcd2ToByte>
 800460a:	0003      	movs	r3, r0
 800460c:	001a      	movs	r2, r3
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	0018      	movs	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	b006      	add	sp, #24
 800461a:	bd80      	pop	{r7, pc}
 800461c:	007f7f7f 	.word	0x007f7f7f

08004620 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004620:	b5b0      	push	{r4, r5, r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2228      	movs	r2, #40	; 0x28
 8004630:	5c9b      	ldrb	r3, [r3, r2]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_RTC_SetDate+0x1a>
 8004636:	2302      	movs	r3, #2
 8004638:	e07e      	b.n	8004738 <HAL_RTC_SetDate+0x118>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2228      	movs	r2, #40	; 0x28
 800463e:	2101      	movs	r1, #1
 8004640:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2229      	movs	r2, #41	; 0x29
 8004646:	2102      	movs	r1, #2
 8004648:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10e      	bne.n	800466e <HAL_RTC_SetDate+0x4e>
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	785b      	ldrb	r3, [r3, #1]
 8004654:	001a      	movs	r2, r3
 8004656:	2310      	movs	r3, #16
 8004658:	4013      	ands	r3, r2
 800465a:	d008      	beq.n	800466e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	785b      	ldrb	r3, [r3, #1]
 8004660:	2210      	movs	r2, #16
 8004662:	4393      	bics	r3, r2
 8004664:	b2db      	uxtb	r3, r3
 8004666:	330a      	adds	r3, #10
 8004668:	b2da      	uxtb	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d11c      	bne.n	80046ae <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	78db      	ldrb	r3, [r3, #3]
 8004678:	0018      	movs	r0, r3
 800467a:	f000 fba3 	bl	8004dc4 <RTC_ByteToBcd2>
 800467e:	0003      	movs	r3, r0
 8004680:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	785b      	ldrb	r3, [r3, #1]
 8004686:	0018      	movs	r0, r3
 8004688:	f000 fb9c 	bl	8004dc4 <RTC_ByteToBcd2>
 800468c:	0003      	movs	r3, r0
 800468e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004690:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	789b      	ldrb	r3, [r3, #2]
 8004696:	0018      	movs	r0, r3
 8004698:	f000 fb94 	bl	8004dc4 <RTC_ByteToBcd2>
 800469c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800469e:	0022      	movs	r2, r4
 80046a0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	e00e      	b.n	80046cc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	78db      	ldrb	r3, [r3, #3]
 80046b2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	785b      	ldrb	r3, [r3, #1]
 80046b8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80046ba:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80046c0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	22ca      	movs	r2, #202	; 0xca
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2253      	movs	r2, #83	; 0x53
 80046da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80046dc:	2513      	movs	r5, #19
 80046de:	197c      	adds	r4, r7, r5
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	0018      	movs	r0, r3
 80046e4:	f000 fae7 	bl	8004cb6 <RTC_EnterInitMode>
 80046e8:	0003      	movs	r3, r0
 80046ea:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80046ec:	0028      	movs	r0, r5
 80046ee:	183b      	adds	r3, r7, r0
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10c      	bne.n	8004710 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4910      	ldr	r1, [pc, #64]	; (8004740 <HAL_RTC_SetDate+0x120>)
 80046fe:	400a      	ands	r2, r1
 8004700:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004702:	183c      	adds	r4, r7, r0
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	0018      	movs	r0, r3
 8004708:	f000 fb18 	bl	8004d3c <RTC_ExitInitMode>
 800470c:	0003      	movs	r3, r0
 800470e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	22ff      	movs	r2, #255	; 0xff
 8004716:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004718:	2313      	movs	r3, #19
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d103      	bne.n	800472a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2229      	movs	r2, #41	; 0x29
 8004726:	2101      	movs	r1, #1
 8004728:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2228      	movs	r2, #40	; 0x28
 800472e:	2100      	movs	r1, #0
 8004730:	5499      	strb	r1, [r3, r2]

  return status;
 8004732:	2313      	movs	r3, #19
 8004734:	18fb      	adds	r3, r7, r3
 8004736:	781b      	ldrb	r3, [r3, #0]
}
 8004738:	0018      	movs	r0, r3
 800473a:	46bd      	mov	sp, r7
 800473c:	b006      	add	sp, #24
 800473e:	bdb0      	pop	{r4, r5, r7, pc}
 8004740:	00ffff3f 	.word	0x00ffff3f

08004744 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	4a21      	ldr	r2, [pc, #132]	; (80047dc <HAL_RTC_GetDate+0x98>)
 8004758:	4013      	ands	r3, r2
 800475a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	0c1b      	lsrs	r3, r3, #16
 8004760:	b2da      	uxtb	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	0a1b      	lsrs	r3, r3, #8
 800476a:	b2db      	uxtb	r3, r3
 800476c:	221f      	movs	r2, #31
 800476e:	4013      	ands	r3, r2
 8004770:	b2da      	uxtb	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	223f      	movs	r2, #63	; 0x3f
 800477c:	4013      	ands	r3, r2
 800477e:	b2da      	uxtb	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	0b5b      	lsrs	r3, r3, #13
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2207      	movs	r2, #7
 800478c:	4013      	ands	r3, r2
 800478e:	b2da      	uxtb	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d11a      	bne.n	80047d0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	78db      	ldrb	r3, [r3, #3]
 800479e:	0018      	movs	r0, r3
 80047a0:	f000 fb38 	bl	8004e14 <RTC_Bcd2ToByte>
 80047a4:	0003      	movs	r3, r0
 80047a6:	001a      	movs	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	785b      	ldrb	r3, [r3, #1]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f000 fb2f 	bl	8004e14 <RTC_Bcd2ToByte>
 80047b6:	0003      	movs	r3, r0
 80047b8:	001a      	movs	r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	789b      	ldrb	r3, [r3, #2]
 80047c2:	0018      	movs	r0, r3
 80047c4:	f000 fb26 	bl	8004e14 <RTC_Bcd2ToByte>
 80047c8:	0003      	movs	r3, r0
 80047ca:	001a      	movs	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	0018      	movs	r0, r3
 80047d4:	46bd      	mov	sp, r7
 80047d6:	b006      	add	sp, #24
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	00ffff3f 	.word	0x00ffff3f

080047e0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80047e0:	b590      	push	{r4, r7, lr}
 80047e2:	b089      	sub	sp, #36	; 0x24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2228      	movs	r2, #40	; 0x28
 80047f0:	5c9b      	ldrb	r3, [r3, r2]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_RTC_SetAlarm_IT+0x1a>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e127      	b.n	8004a4a <HAL_RTC_SetAlarm_IT+0x26a>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2228      	movs	r2, #40	; 0x28
 80047fe:	2101      	movs	r1, #1
 8004800:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2229      	movs	r2, #41	; 0x29
 8004806:	2102      	movs	r1, #2
 8004808:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d136      	bne.n	800487e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	2240      	movs	r2, #64	; 0x40
 8004818:	4013      	ands	r3, r2
 800481a:	d102      	bne.n	8004822 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2200      	movs	r2, #0
 8004820:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	0018      	movs	r0, r3
 8004828:	f000 facc 	bl	8004dc4 <RTC_ByteToBcd2>
 800482c:	0003      	movs	r3, r0
 800482e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	785b      	ldrb	r3, [r3, #1]
 8004834:	0018      	movs	r0, r3
 8004836:	f000 fac5 	bl	8004dc4 <RTC_ByteToBcd2>
 800483a:	0003      	movs	r3, r0
 800483c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800483e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	789b      	ldrb	r3, [r3, #2]
 8004844:	0018      	movs	r0, r3
 8004846:	f000 fabd 	bl	8004dc4 <RTC_ByteToBcd2>
 800484a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800484c:	0022      	movs	r2, r4
 800484e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	78db      	ldrb	r3, [r3, #3]
 8004854:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004856:	431a      	orrs	r2, r3
 8004858:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2220      	movs	r2, #32
 800485e:	5c9b      	ldrb	r3, [r3, r2]
 8004860:	0018      	movs	r0, r3
 8004862:	f000 faaf 	bl	8004dc4 <RTC_ByteToBcd2>
 8004866:	0003      	movs	r3, r0
 8004868:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800486a:	0022      	movs	r2, r4
 800486c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004872:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004878:	4313      	orrs	r3, r2
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	e022      	b.n	80048c4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	2240      	movs	r2, #64	; 0x40
 8004886:	4013      	ands	r3, r2
 8004888:	d102      	bne.n	8004890 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2200      	movs	r2, #0
 800488e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	785b      	ldrb	r3, [r3, #1]
 800489a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800489c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80048a2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	78db      	ldrb	r3, [r3, #3]
 80048a8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80048aa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2120      	movs	r1, #32
 80048b0:	5c5b      	ldrb	r3, [r3, r1]
 80048b2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80048b4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80048ba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80048c0:	4313      	orrs	r3, r2
 80048c2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	22ca      	movs	r2, #202	; 0xca
 80048d6:	625a      	str	r2, [r3, #36]	; 0x24
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2253      	movs	r2, #83	; 0x53
 80048de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048e4:	2380      	movs	r3, #128	; 0x80
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d14c      	bne.n	8004986 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4957      	ldr	r1, [pc, #348]	; (8004a54 <HAL_RTC_SetAlarm_IT+0x274>)
 80048f8:	400a      	ands	r2, r1
 80048fa:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2101      	movs	r1, #1
 8004908:	430a      	orrs	r2, r1
 800490a:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800490c:	f7fd f8d4 	bl	8001ab8 <HAL_GetTick>
 8004910:	0003      	movs	r3, r0
 8004912:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004914:	e016      	b.n	8004944 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004916:	f7fd f8cf 	bl	8001ab8 <HAL_GetTick>
 800491a:	0002      	movs	r2, r0
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	1ad2      	subs	r2, r2, r3
 8004920:	23fa      	movs	r3, #250	; 0xfa
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	429a      	cmp	r2, r3
 8004926:	d90d      	bls.n	8004944 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	22ff      	movs	r2, #255	; 0xff
 800492e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2229      	movs	r2, #41	; 0x29
 8004934:	2103      	movs	r1, #3
 8004936:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2228      	movs	r2, #40	; 0x28
 800493c:	2100      	movs	r1, #0
 800493e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e082      	b.n	8004a4a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	4013      	ands	r3, r2
 800494e:	d0e2      	beq.n	8004916 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	69fa      	ldr	r2, [r7, #28]
 8004956:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699a      	ldr	r2, [r3, #24]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2180      	movs	r1, #128	; 0x80
 800496c:	0049      	lsls	r1, r1, #1
 800496e:	430a      	orrs	r2, r1
 8004970:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699a      	ldr	r2, [r3, #24]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2180      	movs	r1, #128	; 0x80
 800497e:	0149      	lsls	r1, r1, #5
 8004980:	430a      	orrs	r2, r1
 8004982:	619a      	str	r2, [r3, #24]
 8004984:	e04b      	b.n	8004a1e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699a      	ldr	r2, [r3, #24]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4931      	ldr	r1, [pc, #196]	; (8004a58 <HAL_RTC_SetAlarm_IT+0x278>)
 8004992:	400a      	ands	r2, r1
 8004994:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2102      	movs	r1, #2
 80049a2:	430a      	orrs	r2, r1
 80049a4:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80049a6:	f7fd f887 	bl	8001ab8 <HAL_GetTick>
 80049aa:	0003      	movs	r3, r0
 80049ac:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80049ae:	e016      	b.n	80049de <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80049b0:	f7fd f882 	bl	8001ab8 <HAL_GetTick>
 80049b4:	0002      	movs	r2, r0
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	1ad2      	subs	r2, r2, r3
 80049ba:	23fa      	movs	r3, #250	; 0xfa
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	429a      	cmp	r2, r3
 80049c0:	d90d      	bls.n	80049de <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	22ff      	movs	r2, #255	; 0xff
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2229      	movs	r2, #41	; 0x29
 80049ce:	2103      	movs	r1, #3
 80049d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2228      	movs	r2, #40	; 0x28
 80049d6:	2100      	movs	r1, #0
 80049d8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e035      	b.n	8004a4a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	2202      	movs	r2, #2
 80049e6:	4013      	ands	r3, r2
 80049e8:	d0e2      	beq.n	80049b0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699a      	ldr	r2, [r3, #24]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2180      	movs	r1, #128	; 0x80
 8004a06:	0089      	lsls	r1, r1, #2
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2180      	movs	r1, #128	; 0x80
 8004a18:	0189      	lsls	r1, r1, #6
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004a1e:	4a0f      	ldr	r2, [pc, #60]	; (8004a5c <HAL_RTC_SetAlarm_IT+0x27c>)
 8004a20:	2380      	movs	r3, #128	; 0x80
 8004a22:	58d3      	ldr	r3, [r2, r3]
 8004a24:	490d      	ldr	r1, [pc, #52]	; (8004a5c <HAL_RTC_SetAlarm_IT+0x27c>)
 8004a26:	2280      	movs	r2, #128	; 0x80
 8004a28:	0312      	lsls	r2, r2, #12
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	2280      	movs	r2, #128	; 0x80
 8004a2e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	22ff      	movs	r2, #255	; 0xff
 8004a36:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2229      	movs	r2, #41	; 0x29
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2228      	movs	r2, #40	; 0x28
 8004a44:	2100      	movs	r1, #0
 8004a46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	b009      	add	sp, #36	; 0x24
 8004a50:	bd90      	pop	{r4, r7, pc}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	fffffeff 	.word	0xfffffeff
 8004a58:	fffffdff 	.word	0xfffffdff
 8004a5c:	40021800 	.word	0x40021800

08004a60 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	2380      	movs	r3, #128	; 0x80
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d144      	bne.n	8004b02 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2280      	movs	r2, #128	; 0x80
 8004a7c:	0052      	lsls	r2, r2, #1
 8004a7e:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8e:	045b      	lsls	r3, r3, #17
 8004a90:	0c5b      	lsrs	r3, r3, #17
 8004a92:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	0c1b      	lsrs	r3, r3, #16
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	223f      	movs	r2, #63	; 0x3f
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	0a1b      	lsrs	r3, r3, #8
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	227f      	movs	r2, #127	; 0x7f
 8004aac:	4013      	ands	r3, r2
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	227f      	movs	r2, #127	; 0x7f
 8004aba:	4013      	ands	r3, r2
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	0d9b      	lsrs	r3, r3, #22
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2201      	movs	r2, #1
 8004aca:	4013      	ands	r3, r2
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	0e1b      	lsrs	r3, r3, #24
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	223f      	movs	r2, #63	; 0x3f
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	b2d9      	uxtb	r1, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	05db      	lsls	r3, r3, #23
 8004af0:	401a      	ands	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	4a3b      	ldr	r2, [pc, #236]	; (8004be8 <HAL_RTC_GetAlarm+0x188>)
 8004afa:	401a      	ands	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	615a      	str	r2, [r3, #20]
 8004b00:	e043      	b.n	8004b8a <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2280      	movs	r2, #128	; 0x80
 8004b06:	0092      	lsls	r2, r2, #2
 8004b08:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b10:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b18:	045b      	lsls	r3, r3, #17
 8004b1a:	0c5b      	lsrs	r3, r3, #17
 8004b1c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	0c1b      	lsrs	r3, r3, #16
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	223f      	movs	r2, #63	; 0x3f
 8004b26:	4013      	ands	r3, r2
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	0a1b      	lsrs	r3, r3, #8
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	227f      	movs	r2, #127	; 0x7f
 8004b36:	4013      	ands	r3, r2
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	227f      	movs	r2, #127	; 0x7f
 8004b44:	4013      	ands	r3, r2
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	0d9b      	lsrs	r3, r3, #22
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2201      	movs	r2, #1
 8004b54:	4013      	ands	r3, r2
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	0e1b      	lsrs	r3, r3, #24
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	223f      	movs	r2, #63	; 0x3f
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	b2d9      	uxtb	r1, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2220      	movs	r2, #32
 8004b72:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	2380      	movs	r3, #128	; 0x80
 8004b78:	05db      	lsls	r3, r3, #23
 8004b7a:	401a      	ands	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	4a19      	ldr	r2, [pc, #100]	; (8004be8 <HAL_RTC_GetAlarm+0x188>)
 8004b84:	401a      	ands	r2, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d125      	bne.n	8004bdc <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	0018      	movs	r0, r3
 8004b96:	f000 f93d 	bl	8004e14 <RTC_Bcd2ToByte>
 8004b9a:	0003      	movs	r3, r0
 8004b9c:	001a      	movs	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	785b      	ldrb	r3, [r3, #1]
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f000 f934 	bl	8004e14 <RTC_Bcd2ToByte>
 8004bac:	0003      	movs	r3, r0
 8004bae:	001a      	movs	r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	789b      	ldrb	r3, [r3, #2]
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f000 f92b 	bl	8004e14 <RTC_Bcd2ToByte>
 8004bbe:	0003      	movs	r3, r0
 8004bc0:	001a      	movs	r2, r3
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	5c9b      	ldrb	r3, [r3, r2]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f000 f921 	bl	8004e14 <RTC_Bcd2ToByte>
 8004bd2:	0003      	movs	r3, r0
 8004bd4:	0019      	movs	r1, r3
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	0018      	movs	r0, r3
 8004be0:	46bd      	mov	sp, r7
 8004be2:	b006      	add	sp, #24
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	46c0      	nop			; (mov r8, r8)
 8004be8:	80808080 	.word	0x80808080

08004bec <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	2380      	movs	r3, #128	; 0x80
 8004bfc:	015b      	lsls	r3, r3, #5
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d011      	beq.n	8004c26 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c08:	2201      	movs	r2, #1
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d00b      	beq.n	8004c26 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2101      	movs	r1, #1
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	0018      	movs	r0, r3
 8004c22:	f7fb ff97 	bl	8000b54 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	699a      	ldr	r2, [r3, #24]
 8004c2c:	2380      	movs	r3, #128	; 0x80
 8004c2e:	019b      	lsls	r3, r3, #6
 8004c30:	4013      	ands	r3, r2
 8004c32:	d011      	beq.n	8004c58 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d00b      	beq.n	8004c58 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2102      	movs	r1, #2
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	0018      	movs	r0, r3
 8004c54:	f000 f8fb 	bl	8004e4e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2229      	movs	r2, #41	; 0x29
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	5499      	strb	r1, [r3, r2]
}
 8004c60:	46c0      	nop			; (mov r8, r8)
 8004c62:	46bd      	mov	sp, r7
 8004c64:	b002      	add	sp, #8
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	21a0      	movs	r1, #160	; 0xa0
 8004c7c:	438a      	bics	r2, r1
 8004c7e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004c80:	f7fc ff1a 	bl	8001ab8 <HAL_GetTick>
 8004c84:	0003      	movs	r3, r0
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004c88:	e00a      	b.n	8004ca0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c8a:	f7fc ff15 	bl	8001ab8 <HAL_GetTick>
 8004c8e:	0002      	movs	r2, r0
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1ad2      	subs	r2, r2, r3
 8004c94:	23fa      	movs	r3, #250	; 0xfa
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e006      	b.n	8004cae <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d0ee      	beq.n	8004c8a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	0018      	movs	r0, r3
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	b004      	add	sp, #16
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004cbe:	230f      	movs	r3, #15
 8004cc0:	18fb      	adds	r3, r7, r3
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	2240      	movs	r2, #64	; 0x40
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d12c      	bne.n	8004d2c <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2180      	movs	r1, #128	; 0x80
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004ce2:	f7fc fee9 	bl	8001ab8 <HAL_GetTick>
 8004ce6:	0003      	movs	r3, r0
 8004ce8:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004cea:	e014      	b.n	8004d16 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004cec:	f7fc fee4 	bl	8001ab8 <HAL_GetTick>
 8004cf0:	0002      	movs	r2, r0
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	1ad2      	subs	r2, r2, r3
 8004cf6:	200f      	movs	r0, #15
 8004cf8:	183b      	adds	r3, r7, r0
 8004cfa:	1839      	adds	r1, r7, r0
 8004cfc:	7809      	ldrb	r1, [r1, #0]
 8004cfe:	7019      	strb	r1, [r3, #0]
 8004d00:	23fa      	movs	r3, #250	; 0xfa
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d906      	bls.n	8004d16 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004d08:	183b      	adds	r3, r7, r0
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2229      	movs	r2, #41	; 0x29
 8004d12:	2103      	movs	r1, #3
 8004d14:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	2240      	movs	r2, #64	; 0x40
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d104      	bne.n	8004d2c <RTC_EnterInitMode+0x76>
 8004d22:	230f      	movs	r3, #15
 8004d24:	18fb      	adds	r3, r7, r3
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b03      	cmp	r3, #3
 8004d2a:	d1df      	bne.n	8004cec <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004d2c:	230f      	movs	r3, #15
 8004d2e:	18fb      	adds	r3, r7, r3
 8004d30:	781b      	ldrb	r3, [r3, #0]
}
 8004d32:	0018      	movs	r0, r3
 8004d34:	46bd      	mov	sp, r7
 8004d36:	b004      	add	sp, #16
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d3c:	b590      	push	{r4, r7, lr}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d44:	240f      	movs	r4, #15
 8004d46:	193b      	adds	r3, r7, r4
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004d4c:	4b1c      	ldr	r3, [pc, #112]	; (8004dc0 <RTC_ExitInitMode+0x84>)
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	4b1b      	ldr	r3, [pc, #108]	; (8004dc0 <RTC_ExitInitMode+0x84>)
 8004d52:	2180      	movs	r1, #128	; 0x80
 8004d54:	438a      	bics	r2, r1
 8004d56:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004d58:	4b19      	ldr	r3, [pc, #100]	; (8004dc0 <RTC_ExitInitMode+0x84>)
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d10d      	bne.n	8004d7e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	0018      	movs	r0, r3
 8004d66:	f7ff ff7f 	bl	8004c68 <HAL_RTC_WaitForSynchro>
 8004d6a:	1e03      	subs	r3, r0, #0
 8004d6c:	d021      	beq.n	8004db2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2229      	movs	r2, #41	; 0x29
 8004d72:	2103      	movs	r1, #3
 8004d74:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004d76:	193b      	adds	r3, r7, r4
 8004d78:	2203      	movs	r2, #3
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	e019      	b.n	8004db2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004d7e:	4b10      	ldr	r3, [pc, #64]	; (8004dc0 <RTC_ExitInitMode+0x84>)
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <RTC_ExitInitMode+0x84>)
 8004d84:	2120      	movs	r1, #32
 8004d86:	438a      	bics	r2, r1
 8004d88:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f7ff ff6b 	bl	8004c68 <HAL_RTC_WaitForSynchro>
 8004d92:	1e03      	subs	r3, r0, #0
 8004d94:	d007      	beq.n	8004da6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2229      	movs	r2, #41	; 0x29
 8004d9a:	2103      	movs	r1, #3
 8004d9c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004d9e:	230f      	movs	r3, #15
 8004da0:	18fb      	adds	r3, r7, r3
 8004da2:	2203      	movs	r2, #3
 8004da4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004da6:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <RTC_ExitInitMode+0x84>)
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <RTC_ExitInitMode+0x84>)
 8004dac:	2120      	movs	r1, #32
 8004dae:	430a      	orrs	r2, r1
 8004db0:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004db2:	230f      	movs	r3, #15
 8004db4:	18fb      	adds	r3, r7, r3
 8004db6:	781b      	ldrb	r3, [r3, #0]
}
 8004db8:	0018      	movs	r0, r3
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	b005      	add	sp, #20
 8004dbe:	bd90      	pop	{r4, r7, pc}
 8004dc0:	40002800 	.word	0x40002800

08004dc4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	0002      	movs	r2, r0
 8004dcc:	1dfb      	adds	r3, r7, #7
 8004dce:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004dd4:	230b      	movs	r3, #11
 8004dd6:	18fb      	adds	r3, r7, r3
 8004dd8:	1dfa      	adds	r2, r7, #7
 8004dda:	7812      	ldrb	r2, [r2, #0]
 8004ddc:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004dde:	e008      	b.n	8004df2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3301      	adds	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004de6:	220b      	movs	r2, #11
 8004de8:	18bb      	adds	r3, r7, r2
 8004dea:	18ba      	adds	r2, r7, r2
 8004dec:	7812      	ldrb	r2, [r2, #0]
 8004dee:	3a0a      	subs	r2, #10
 8004df0:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004df2:	210b      	movs	r1, #11
 8004df4:	187b      	adds	r3, r7, r1
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b09      	cmp	r3, #9
 8004dfa:	d8f1      	bhi.n	8004de0 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	187b      	adds	r3, r7, r1
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	b2db      	uxtb	r3, r3
}
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b004      	add	sp, #16
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	0002      	movs	r2, r0
 8004e1c:	1dfb      	adds	r3, r7, #7
 8004e1e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004e20:	1dfb      	adds	r3, r7, #7
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	091b      	lsrs	r3, r3, #4
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	001a      	movs	r2, r3
 8004e2a:	0013      	movs	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	189b      	adds	r3, r3, r2
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	1dfb      	adds	r3, r7, #7
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	210f      	movs	r1, #15
 8004e3e:	400b      	ands	r3, r1
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	18d3      	adds	r3, r2, r3
 8004e44:	b2db      	uxtb	r3, r3
}
 8004e46:	0018      	movs	r0, r3
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b004      	add	sp, #16
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b082      	sub	sp, #8
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	b002      	add	sp, #8
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b082      	sub	sp, #8
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e04a      	b.n	8004f06 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	223d      	movs	r2, #61	; 0x3d
 8004e74:	5c9b      	ldrb	r3, [r3, r2]
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d107      	bne.n	8004e8c <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	223c      	movs	r2, #60	; 0x3c
 8004e80:	2100      	movs	r1, #0
 8004e82:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	0018      	movs	r0, r3
 8004e88:	f7fc fbfe 	bl	8001688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	223d      	movs	r2, #61	; 0x3d
 8004e90:	2102      	movs	r1, #2
 8004e92:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	0019      	movs	r1, r3
 8004e9e:	0010      	movs	r0, r2
 8004ea0:	f000 f8a8 	bl	8004ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2248      	movs	r2, #72	; 0x48
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	223e      	movs	r2, #62	; 0x3e
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	5499      	strb	r1, [r3, r2]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	223f      	movs	r2, #63	; 0x3f
 8004eb8:	2101      	movs	r1, #1
 8004eba:	5499      	strb	r1, [r3, r2]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2240      	movs	r2, #64	; 0x40
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	5499      	strb	r1, [r3, r2]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2241      	movs	r2, #65	; 0x41
 8004ec8:	2101      	movs	r1, #1
 8004eca:	5499      	strb	r1, [r3, r2]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2242      	movs	r2, #66	; 0x42
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	5499      	strb	r1, [r3, r2]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2243      	movs	r2, #67	; 0x43
 8004ed8:	2101      	movs	r1, #1
 8004eda:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2244      	movs	r2, #68	; 0x44
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	5499      	strb	r1, [r3, r2]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2245      	movs	r2, #69	; 0x45
 8004ee8:	2101      	movs	r1, #1
 8004eea:	5499      	strb	r1, [r3, r2]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2246      	movs	r2, #70	; 0x46
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	5499      	strb	r1, [r3, r2]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2247      	movs	r2, #71	; 0x47
 8004ef8:	2101      	movs	r1, #1
 8004efa:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	223d      	movs	r2, #61	; 0x3d
 8004f00:	2101      	movs	r1, #1
 8004f02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	0018      	movs	r0, r3
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b002      	add	sp, #8
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	223d      	movs	r2, #61	; 0x3d
 8004f1c:	5c9b      	ldrb	r3, [r3, r2]
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d001      	beq.n	8004f28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e035      	b.n	8004f94 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	223d      	movs	r2, #61	; 0x3d
 8004f2c:	2102      	movs	r1, #2
 8004f2e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a19      	ldr	r2, [pc, #100]	; (8004f9c <HAL_TIM_Base_Start+0x8c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00a      	beq.n	8004f50 <HAL_TIM_Base_Start+0x40>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	2380      	movs	r3, #128	; 0x80
 8004f40:	05db      	lsls	r3, r3, #23
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d004      	beq.n	8004f50 <HAL_TIM_Base_Start+0x40>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a15      	ldr	r2, [pc, #84]	; (8004fa0 <HAL_TIM_Base_Start+0x90>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d116      	bne.n	8004f7e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	4a13      	ldr	r2, [pc, #76]	; (8004fa4 <HAL_TIM_Base_Start+0x94>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b06      	cmp	r3, #6
 8004f60:	d016      	beq.n	8004f90 <HAL_TIM_Base_Start+0x80>
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	2380      	movs	r3, #128	; 0x80
 8004f66:	025b      	lsls	r3, r3, #9
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d011      	beq.n	8004f90 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2101      	movs	r1, #1
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7c:	e008      	b.n	8004f90 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2101      	movs	r1, #1
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	e000      	b.n	8004f92 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f90:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	0018      	movs	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	b004      	add	sp, #16
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40012c00 	.word	0x40012c00
 8004fa0:	40000400 	.word	0x40000400
 8004fa4:	00010007 	.word	0x00010007

08004fa8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	4a0d      	ldr	r2, [pc, #52]	; (8004fec <HAL_TIM_Base_Stop+0x44>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d10d      	bne.n	8004fd8 <HAL_TIM_Base_Stop+0x30>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	4a0b      	ldr	r2, [pc, #44]	; (8004ff0 <HAL_TIM_Base_Stop+0x48>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d107      	bne.n	8004fd8 <HAL_TIM_Base_Stop+0x30>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	438a      	bics	r2, r1
 8004fd6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	223d      	movs	r2, #61	; 0x3d
 8004fdc:	2101      	movs	r1, #1
 8004fde:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	b002      	add	sp, #8
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	00001111 	.word	0x00001111
 8004ff0:	00000444 	.word	0x00000444

08004ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a30      	ldr	r2, [pc, #192]	; (80050c8 <TIM_Base_SetConfig+0xd4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d008      	beq.n	800501e <TIM_Base_SetConfig+0x2a>
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	2380      	movs	r3, #128	; 0x80
 8005010:	05db      	lsls	r3, r3, #23
 8005012:	429a      	cmp	r2, r3
 8005014:	d003      	beq.n	800501e <TIM_Base_SetConfig+0x2a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a2c      	ldr	r2, [pc, #176]	; (80050cc <TIM_Base_SetConfig+0xd8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d108      	bne.n	8005030 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2270      	movs	r2, #112	; 0x70
 8005022:	4393      	bics	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a25      	ldr	r2, [pc, #148]	; (80050c8 <TIM_Base_SetConfig+0xd4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d014      	beq.n	8005062 <TIM_Base_SetConfig+0x6e>
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	2380      	movs	r3, #128	; 0x80
 800503c:	05db      	lsls	r3, r3, #23
 800503e:	429a      	cmp	r2, r3
 8005040:	d00f      	beq.n	8005062 <TIM_Base_SetConfig+0x6e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a21      	ldr	r2, [pc, #132]	; (80050cc <TIM_Base_SetConfig+0xd8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00b      	beq.n	8005062 <TIM_Base_SetConfig+0x6e>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a20      	ldr	r2, [pc, #128]	; (80050d0 <TIM_Base_SetConfig+0xdc>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d007      	beq.n	8005062 <TIM_Base_SetConfig+0x6e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a1f      	ldr	r2, [pc, #124]	; (80050d4 <TIM_Base_SetConfig+0xe0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d003      	beq.n	8005062 <TIM_Base_SetConfig+0x6e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a1e      	ldr	r2, [pc, #120]	; (80050d8 <TIM_Base_SetConfig+0xe4>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d108      	bne.n	8005074 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4a1d      	ldr	r2, [pc, #116]	; (80050dc <TIM_Base_SetConfig+0xe8>)
 8005066:	4013      	ands	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4313      	orrs	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2280      	movs	r2, #128	; 0x80
 8005078:	4393      	bics	r3, r2
 800507a:	001a      	movs	r2, r3
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a0a      	ldr	r2, [pc, #40]	; (80050c8 <TIM_Base_SetConfig+0xd4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d007      	beq.n	80050b2 <TIM_Base_SetConfig+0xbe>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a0b      	ldr	r2, [pc, #44]	; (80050d4 <TIM_Base_SetConfig+0xe0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d003      	beq.n	80050b2 <TIM_Base_SetConfig+0xbe>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a0a      	ldr	r2, [pc, #40]	; (80050d8 <TIM_Base_SetConfig+0xe4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d103      	bne.n	80050ba <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	691a      	ldr	r2, [r3, #16]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	615a      	str	r2, [r3, #20]
}
 80050c0:	46c0      	nop			; (mov r8, r8)
 80050c2:	46bd      	mov	sp, r7
 80050c4:	b004      	add	sp, #16
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40012c00 	.word	0x40012c00
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40002000 	.word	0x40002000
 80050d4:	40014400 	.word	0x40014400
 80050d8:	40014800 	.word	0x40014800
 80050dc:	fffffcff 	.word	0xfffffcff

080050e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e046      	b.n	8005180 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2288      	movs	r2, #136	; 0x88
 80050f6:	589b      	ldr	r3, [r3, r2]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d107      	bne.n	800510c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2284      	movs	r2, #132	; 0x84
 8005100:	2100      	movs	r1, #0
 8005102:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	0018      	movs	r0, r3
 8005108:	f7fc fade 	bl	80016c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2288      	movs	r2, #136	; 0x88
 8005110:	2124      	movs	r1, #36	; 0x24
 8005112:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2101      	movs	r1, #1
 8005120:	438a      	bics	r2, r1
 8005122:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	0018      	movs	r0, r3
 8005128:	f000 f8cc 	bl	80052c4 <UART_SetConfig>
 800512c:	0003      	movs	r3, r0
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e024      	b.n	8005180 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	0018      	movs	r0, r3
 8005142:	f000 fb37 	bl	80057b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	490d      	ldr	r1, [pc, #52]	; (8005188 <HAL_UART_Init+0xa8>)
 8005152:	400a      	ands	r2, r1
 8005154:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	212a      	movs	r1, #42	; 0x2a
 8005162:	438a      	bics	r2, r1
 8005164:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2101      	movs	r1, #1
 8005172:	430a      	orrs	r2, r1
 8005174:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	0018      	movs	r0, r3
 800517a:	f000 fbcf 	bl	800591c <UART_CheckIdleState>
 800517e:	0003      	movs	r3, r0
}
 8005180:	0018      	movs	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	b002      	add	sp, #8
 8005186:	bd80      	pop	{r7, pc}
 8005188:	ffffb7ff 	.word	0xffffb7ff

0800518c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08a      	sub	sp, #40	; 0x28
 8005190:	af02      	add	r7, sp, #8
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	1dbb      	adds	r3, r7, #6
 800519a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2288      	movs	r2, #136	; 0x88
 80051a0:	589b      	ldr	r3, [r3, r2]
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d000      	beq.n	80051a8 <HAL_UART_Transmit+0x1c>
 80051a6:	e088      	b.n	80052ba <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_UART_Transmit+0x2a>
 80051ae:	1dbb      	adds	r3, r7, #6
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e080      	b.n	80052bc <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	2380      	movs	r3, #128	; 0x80
 80051c0:	015b      	lsls	r3, r3, #5
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d109      	bne.n	80051da <HAL_UART_Transmit+0x4e>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d105      	bne.n	80051da <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2201      	movs	r2, #1
 80051d2:	4013      	ands	r3, r2
 80051d4:	d001      	beq.n	80051da <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e070      	b.n	80052bc <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2290      	movs	r2, #144	; 0x90
 80051de:	2100      	movs	r1, #0
 80051e0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2288      	movs	r2, #136	; 0x88
 80051e6:	2121      	movs	r1, #33	; 0x21
 80051e8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051ea:	f7fc fc65 	bl	8001ab8 <HAL_GetTick>
 80051ee:	0003      	movs	r3, r0
 80051f0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1dba      	adds	r2, r7, #6
 80051f6:	2154      	movs	r1, #84	; 0x54
 80051f8:	8812      	ldrh	r2, [r2, #0]
 80051fa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	1dba      	adds	r2, r7, #6
 8005200:	2156      	movs	r1, #86	; 0x56
 8005202:	8812      	ldrh	r2, [r2, #0]
 8005204:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	689a      	ldr	r2, [r3, #8]
 800520a:	2380      	movs	r3, #128	; 0x80
 800520c:	015b      	lsls	r3, r3, #5
 800520e:	429a      	cmp	r2, r3
 8005210:	d108      	bne.n	8005224 <HAL_UART_Transmit+0x98>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d104      	bne.n	8005224 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800521a:	2300      	movs	r3, #0
 800521c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	e003      	b.n	800522c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005228:	2300      	movs	r3, #0
 800522a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800522c:	e02c      	b.n	8005288 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	0013      	movs	r3, r2
 8005238:	2200      	movs	r2, #0
 800523a:	2180      	movs	r1, #128	; 0x80
 800523c:	f000 fbbc 	bl	80059b8 <UART_WaitOnFlagUntilTimeout>
 8005240:	1e03      	subs	r3, r0, #0
 8005242:	d001      	beq.n	8005248 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e039      	b.n	80052bc <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10b      	bne.n	8005266 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	001a      	movs	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	05d2      	lsls	r2, r2, #23
 800525a:	0dd2      	lsrs	r2, r2, #23
 800525c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	3302      	adds	r3, #2
 8005262:	61bb      	str	r3, [r7, #24]
 8005264:	e007      	b.n	8005276 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	781a      	ldrb	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	3301      	adds	r3, #1
 8005274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2256      	movs	r2, #86	; 0x56
 800527a:	5a9b      	ldrh	r3, [r3, r2]
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b299      	uxth	r1, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2256      	movs	r2, #86	; 0x56
 8005286:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2256      	movs	r2, #86	; 0x56
 800528c:	5a9b      	ldrh	r3, [r3, r2]
 800528e:	b29b      	uxth	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1cc      	bne.n	800522e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	0013      	movs	r3, r2
 800529e:	2200      	movs	r2, #0
 80052a0:	2140      	movs	r1, #64	; 0x40
 80052a2:	f000 fb89 	bl	80059b8 <UART_WaitOnFlagUntilTimeout>
 80052a6:	1e03      	subs	r3, r0, #0
 80052a8:	d001      	beq.n	80052ae <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e006      	b.n	80052bc <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2288      	movs	r2, #136	; 0x88
 80052b2:	2120      	movs	r1, #32
 80052b4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	e000      	b.n	80052bc <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80052ba:	2302      	movs	r3, #2
  }
}
 80052bc:	0018      	movs	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	b008      	add	sp, #32
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052c4:	b5b0      	push	{r4, r5, r7, lr}
 80052c6:	b090      	sub	sp, #64	; 0x40
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052cc:	231a      	movs	r3, #26
 80052ce:	2220      	movs	r2, #32
 80052d0:	189b      	adds	r3, r3, r2
 80052d2:	19db      	adds	r3, r3, r7
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	431a      	orrs	r2, r3
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	431a      	orrs	r2, r3
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4ac4      	ldr	r2, [pc, #784]	; (8005608 <UART_SetConfig+0x344>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	0019      	movs	r1, r3
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005302:	430b      	orrs	r3, r1
 8005304:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	4abf      	ldr	r2, [pc, #764]	; (800560c <UART_SetConfig+0x348>)
 800530e:	4013      	ands	r3, r2
 8005310:	0018      	movs	r0, r3
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	68d9      	ldr	r1, [r3, #12]
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	0003      	movs	r3, r0
 800531c:	430b      	orrs	r3, r1
 800531e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4ab9      	ldr	r2, [pc, #740]	; (8005610 <UART_SetConfig+0x34c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d004      	beq.n	800533a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005336:	4313      	orrs	r3, r2
 8005338:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	4ab4      	ldr	r2, [pc, #720]	; (8005614 <UART_SetConfig+0x350>)
 8005342:	4013      	ands	r3, r2
 8005344:	0019      	movs	r1, r3
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534c:	430b      	orrs	r3, r1
 800534e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	220f      	movs	r2, #15
 8005358:	4393      	bics	r3, r2
 800535a:	0018      	movs	r0, r3
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	0003      	movs	r3, r0
 8005366:	430b      	orrs	r3, r1
 8005368:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4aaa      	ldr	r2, [pc, #680]	; (8005618 <UART_SetConfig+0x354>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d131      	bne.n	80053d8 <UART_SetConfig+0x114>
 8005374:	4ba9      	ldr	r3, [pc, #676]	; (800561c <UART_SetConfig+0x358>)
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	2203      	movs	r2, #3
 800537a:	4013      	ands	r3, r2
 800537c:	2b03      	cmp	r3, #3
 800537e:	d01d      	beq.n	80053bc <UART_SetConfig+0xf8>
 8005380:	d823      	bhi.n	80053ca <UART_SetConfig+0x106>
 8005382:	2b02      	cmp	r3, #2
 8005384:	d00c      	beq.n	80053a0 <UART_SetConfig+0xdc>
 8005386:	d820      	bhi.n	80053ca <UART_SetConfig+0x106>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <UART_SetConfig+0xce>
 800538c:	2b01      	cmp	r3, #1
 800538e:	d00e      	beq.n	80053ae <UART_SetConfig+0xea>
 8005390:	e01b      	b.n	80053ca <UART_SetConfig+0x106>
 8005392:	231b      	movs	r3, #27
 8005394:	2220      	movs	r2, #32
 8005396:	189b      	adds	r3, r3, r2
 8005398:	19db      	adds	r3, r3, r7
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	e071      	b.n	8005484 <UART_SetConfig+0x1c0>
 80053a0:	231b      	movs	r3, #27
 80053a2:	2220      	movs	r2, #32
 80053a4:	189b      	adds	r3, r3, r2
 80053a6:	19db      	adds	r3, r3, r7
 80053a8:	2202      	movs	r2, #2
 80053aa:	701a      	strb	r2, [r3, #0]
 80053ac:	e06a      	b.n	8005484 <UART_SetConfig+0x1c0>
 80053ae:	231b      	movs	r3, #27
 80053b0:	2220      	movs	r2, #32
 80053b2:	189b      	adds	r3, r3, r2
 80053b4:	19db      	adds	r3, r3, r7
 80053b6:	2204      	movs	r2, #4
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	e063      	b.n	8005484 <UART_SetConfig+0x1c0>
 80053bc:	231b      	movs	r3, #27
 80053be:	2220      	movs	r2, #32
 80053c0:	189b      	adds	r3, r3, r2
 80053c2:	19db      	adds	r3, r3, r7
 80053c4:	2208      	movs	r2, #8
 80053c6:	701a      	strb	r2, [r3, #0]
 80053c8:	e05c      	b.n	8005484 <UART_SetConfig+0x1c0>
 80053ca:	231b      	movs	r3, #27
 80053cc:	2220      	movs	r2, #32
 80053ce:	189b      	adds	r3, r3, r2
 80053d0:	19db      	adds	r3, r3, r7
 80053d2:	2210      	movs	r2, #16
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	e055      	b.n	8005484 <UART_SetConfig+0x1c0>
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a90      	ldr	r2, [pc, #576]	; (8005620 <UART_SetConfig+0x35c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d106      	bne.n	80053f0 <UART_SetConfig+0x12c>
 80053e2:	231b      	movs	r3, #27
 80053e4:	2220      	movs	r2, #32
 80053e6:	189b      	adds	r3, r3, r2
 80053e8:	19db      	adds	r3, r3, r7
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	e049      	b.n	8005484 <UART_SetConfig+0x1c0>
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a86      	ldr	r2, [pc, #536]	; (8005610 <UART_SetConfig+0x34c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d13e      	bne.n	8005478 <UART_SetConfig+0x1b4>
 80053fa:	4b88      	ldr	r3, [pc, #544]	; (800561c <UART_SetConfig+0x358>)
 80053fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053fe:	23c0      	movs	r3, #192	; 0xc0
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	4013      	ands	r3, r2
 8005404:	22c0      	movs	r2, #192	; 0xc0
 8005406:	0112      	lsls	r2, r2, #4
 8005408:	4293      	cmp	r3, r2
 800540a:	d027      	beq.n	800545c <UART_SetConfig+0x198>
 800540c:	22c0      	movs	r2, #192	; 0xc0
 800540e:	0112      	lsls	r2, r2, #4
 8005410:	4293      	cmp	r3, r2
 8005412:	d82a      	bhi.n	800546a <UART_SetConfig+0x1a6>
 8005414:	2280      	movs	r2, #128	; 0x80
 8005416:	0112      	lsls	r2, r2, #4
 8005418:	4293      	cmp	r3, r2
 800541a:	d011      	beq.n	8005440 <UART_SetConfig+0x17c>
 800541c:	2280      	movs	r2, #128	; 0x80
 800541e:	0112      	lsls	r2, r2, #4
 8005420:	4293      	cmp	r3, r2
 8005422:	d822      	bhi.n	800546a <UART_SetConfig+0x1a6>
 8005424:	2b00      	cmp	r3, #0
 8005426:	d004      	beq.n	8005432 <UART_SetConfig+0x16e>
 8005428:	2280      	movs	r2, #128	; 0x80
 800542a:	00d2      	lsls	r2, r2, #3
 800542c:	4293      	cmp	r3, r2
 800542e:	d00e      	beq.n	800544e <UART_SetConfig+0x18a>
 8005430:	e01b      	b.n	800546a <UART_SetConfig+0x1a6>
 8005432:	231b      	movs	r3, #27
 8005434:	2220      	movs	r2, #32
 8005436:	189b      	adds	r3, r3, r2
 8005438:	19db      	adds	r3, r3, r7
 800543a:	2200      	movs	r2, #0
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	e021      	b.n	8005484 <UART_SetConfig+0x1c0>
 8005440:	231b      	movs	r3, #27
 8005442:	2220      	movs	r2, #32
 8005444:	189b      	adds	r3, r3, r2
 8005446:	19db      	adds	r3, r3, r7
 8005448:	2202      	movs	r2, #2
 800544a:	701a      	strb	r2, [r3, #0]
 800544c:	e01a      	b.n	8005484 <UART_SetConfig+0x1c0>
 800544e:	231b      	movs	r3, #27
 8005450:	2220      	movs	r2, #32
 8005452:	189b      	adds	r3, r3, r2
 8005454:	19db      	adds	r3, r3, r7
 8005456:	2204      	movs	r2, #4
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	e013      	b.n	8005484 <UART_SetConfig+0x1c0>
 800545c:	231b      	movs	r3, #27
 800545e:	2220      	movs	r2, #32
 8005460:	189b      	adds	r3, r3, r2
 8005462:	19db      	adds	r3, r3, r7
 8005464:	2208      	movs	r2, #8
 8005466:	701a      	strb	r2, [r3, #0]
 8005468:	e00c      	b.n	8005484 <UART_SetConfig+0x1c0>
 800546a:	231b      	movs	r3, #27
 800546c:	2220      	movs	r2, #32
 800546e:	189b      	adds	r3, r3, r2
 8005470:	19db      	adds	r3, r3, r7
 8005472:	2210      	movs	r2, #16
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	e005      	b.n	8005484 <UART_SetConfig+0x1c0>
 8005478:	231b      	movs	r3, #27
 800547a:	2220      	movs	r2, #32
 800547c:	189b      	adds	r3, r3, r2
 800547e:	19db      	adds	r3, r3, r7
 8005480:	2210      	movs	r2, #16
 8005482:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a61      	ldr	r2, [pc, #388]	; (8005610 <UART_SetConfig+0x34c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d000      	beq.n	8005490 <UART_SetConfig+0x1cc>
 800548e:	e092      	b.n	80055b6 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005490:	231b      	movs	r3, #27
 8005492:	2220      	movs	r2, #32
 8005494:	189b      	adds	r3, r3, r2
 8005496:	19db      	adds	r3, r3, r7
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b08      	cmp	r3, #8
 800549c:	d015      	beq.n	80054ca <UART_SetConfig+0x206>
 800549e:	dc18      	bgt.n	80054d2 <UART_SetConfig+0x20e>
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d00d      	beq.n	80054c0 <UART_SetConfig+0x1fc>
 80054a4:	dc15      	bgt.n	80054d2 <UART_SetConfig+0x20e>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <UART_SetConfig+0x1ec>
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d005      	beq.n	80054ba <UART_SetConfig+0x1f6>
 80054ae:	e010      	b.n	80054d2 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b0:	f7fe fd80 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 80054b4:	0003      	movs	r3, r0
 80054b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054b8:	e014      	b.n	80054e4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054ba:	4b5a      	ldr	r3, [pc, #360]	; (8005624 <UART_SetConfig+0x360>)
 80054bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054be:	e011      	b.n	80054e4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054c0:	f7fe fcec 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 80054c4:	0003      	movs	r3, r0
 80054c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054c8:	e00c      	b.n	80054e4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ca:	2380      	movs	r3, #128	; 0x80
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054d0:	e008      	b.n	80054e4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80054d6:	231a      	movs	r3, #26
 80054d8:	2220      	movs	r2, #32
 80054da:	189b      	adds	r3, r3, r2
 80054dc:	19db      	adds	r3, r3, r7
 80054de:	2201      	movs	r2, #1
 80054e0:	701a      	strb	r2, [r3, #0]
        break;
 80054e2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d100      	bne.n	80054ec <UART_SetConfig+0x228>
 80054ea:	e147      	b.n	800577c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054f0:	4b4d      	ldr	r3, [pc, #308]	; (8005628 <UART_SetConfig+0x364>)
 80054f2:	0052      	lsls	r2, r2, #1
 80054f4:	5ad3      	ldrh	r3, [r2, r3]
 80054f6:	0019      	movs	r1, r3
 80054f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054fa:	f7fa fe0d 	bl	8000118 <__udivsi3>
 80054fe:	0003      	movs	r3, r0
 8005500:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	0013      	movs	r3, r2
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	189b      	adds	r3, r3, r2
 800550c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800550e:	429a      	cmp	r2, r3
 8005510:	d305      	bcc.n	800551e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800551a:	429a      	cmp	r2, r3
 800551c:	d906      	bls.n	800552c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800551e:	231a      	movs	r3, #26
 8005520:	2220      	movs	r2, #32
 8005522:	189b      	adds	r3, r3, r2
 8005524:	19db      	adds	r3, r3, r7
 8005526:	2201      	movs	r2, #1
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	e127      	b.n	800577c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552e:	61bb      	str	r3, [r7, #24]
 8005530:	2300      	movs	r3, #0
 8005532:	61fb      	str	r3, [r7, #28]
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005538:	4b3b      	ldr	r3, [pc, #236]	; (8005628 <UART_SetConfig+0x364>)
 800553a:	0052      	lsls	r2, r2, #1
 800553c:	5ad3      	ldrh	r3, [r2, r3]
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	2300      	movs	r3, #0
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	69b8      	ldr	r0, [r7, #24]
 800554a:	69f9      	ldr	r1, [r7, #28]
 800554c:	f7fa fe70 	bl	8000230 <__aeabi_uldivmod>
 8005550:	0002      	movs	r2, r0
 8005552:	000b      	movs	r3, r1
 8005554:	0e11      	lsrs	r1, r2, #24
 8005556:	021d      	lsls	r5, r3, #8
 8005558:	430d      	orrs	r5, r1
 800555a:	0214      	lsls	r4, r2, #8
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	085b      	lsrs	r3, r3, #1
 8005562:	60bb      	str	r3, [r7, #8]
 8005564:	2300      	movs	r3, #0
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	68b8      	ldr	r0, [r7, #8]
 800556a:	68f9      	ldr	r1, [r7, #12]
 800556c:	1900      	adds	r0, r0, r4
 800556e:	4169      	adcs	r1, r5
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	603b      	str	r3, [r7, #0]
 8005576:	2300      	movs	r3, #0
 8005578:	607b      	str	r3, [r7, #4]
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f7fa fe57 	bl	8000230 <__aeabi_uldivmod>
 8005582:	0002      	movs	r2, r0
 8005584:	000b      	movs	r3, r1
 8005586:	0013      	movs	r3, r2
 8005588:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800558a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800558c:	23c0      	movs	r3, #192	; 0xc0
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	429a      	cmp	r2, r3
 8005592:	d309      	bcc.n	80055a8 <UART_SetConfig+0x2e4>
 8005594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005596:	2380      	movs	r3, #128	; 0x80
 8005598:	035b      	lsls	r3, r3, #13
 800559a:	429a      	cmp	r2, r3
 800559c:	d204      	bcs.n	80055a8 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a4:	60da      	str	r2, [r3, #12]
 80055a6:	e0e9      	b.n	800577c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80055a8:	231a      	movs	r3, #26
 80055aa:	2220      	movs	r2, #32
 80055ac:	189b      	adds	r3, r3, r2
 80055ae:	19db      	adds	r3, r3, r7
 80055b0:	2201      	movs	r2, #1
 80055b2:	701a      	strb	r2, [r3, #0]
 80055b4:	e0e2      	b.n	800577c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	69da      	ldr	r2, [r3, #28]
 80055ba:	2380      	movs	r3, #128	; 0x80
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	429a      	cmp	r2, r3
 80055c0:	d000      	beq.n	80055c4 <UART_SetConfig+0x300>
 80055c2:	e083      	b.n	80056cc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80055c4:	231b      	movs	r3, #27
 80055c6:	2220      	movs	r2, #32
 80055c8:	189b      	adds	r3, r3, r2
 80055ca:	19db      	adds	r3, r3, r7
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d015      	beq.n	80055fe <UART_SetConfig+0x33a>
 80055d2:	dc2b      	bgt.n	800562c <UART_SetConfig+0x368>
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d00d      	beq.n	80055f4 <UART_SetConfig+0x330>
 80055d8:	dc28      	bgt.n	800562c <UART_SetConfig+0x368>
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <UART_SetConfig+0x320>
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d005      	beq.n	80055ee <UART_SetConfig+0x32a>
 80055e2:	e023      	b.n	800562c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e4:	f7fe fce6 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 80055e8:	0003      	movs	r3, r0
 80055ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055ec:	e027      	b.n	800563e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055ee:	4b0d      	ldr	r3, [pc, #52]	; (8005624 <UART_SetConfig+0x360>)
 80055f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055f2:	e024      	b.n	800563e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f4:	f7fe fc52 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 80055f8:	0003      	movs	r3, r0
 80055fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055fc:	e01f      	b.n	800563e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055fe:	2380      	movs	r3, #128	; 0x80
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005604:	e01b      	b.n	800563e <UART_SetConfig+0x37a>
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	cfff69f3 	.word	0xcfff69f3
 800560c:	ffffcfff 	.word	0xffffcfff
 8005610:	40008000 	.word	0x40008000
 8005614:	11fff4ff 	.word	0x11fff4ff
 8005618:	40013800 	.word	0x40013800
 800561c:	40021000 	.word	0x40021000
 8005620:	40004400 	.word	0x40004400
 8005624:	00f42400 	.word	0x00f42400
 8005628:	080070f4 	.word	0x080070f4
      default:
        pclk = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005630:	231a      	movs	r3, #26
 8005632:	2220      	movs	r2, #32
 8005634:	189b      	adds	r3, r3, r2
 8005636:	19db      	adds	r3, r3, r7
 8005638:	2201      	movs	r2, #1
 800563a:	701a      	strb	r2, [r3, #0]
        break;
 800563c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800563e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005640:	2b00      	cmp	r3, #0
 8005642:	d100      	bne.n	8005646 <UART_SetConfig+0x382>
 8005644:	e09a      	b.n	800577c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800564a:	4b58      	ldr	r3, [pc, #352]	; (80057ac <UART_SetConfig+0x4e8>)
 800564c:	0052      	lsls	r2, r2, #1
 800564e:	5ad3      	ldrh	r3, [r2, r3]
 8005650:	0019      	movs	r1, r3
 8005652:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005654:	f7fa fd60 	bl	8000118 <__udivsi3>
 8005658:	0003      	movs	r3, r0
 800565a:	005a      	lsls	r2, r3, #1
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	085b      	lsrs	r3, r3, #1
 8005662:	18d2      	adds	r2, r2, r3
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	0019      	movs	r1, r3
 800566a:	0010      	movs	r0, r2
 800566c:	f7fa fd54 	bl	8000118 <__udivsi3>
 8005670:	0003      	movs	r3, r0
 8005672:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	2b0f      	cmp	r3, #15
 8005678:	d921      	bls.n	80056be <UART_SetConfig+0x3fa>
 800567a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567c:	2380      	movs	r3, #128	; 0x80
 800567e:	025b      	lsls	r3, r3, #9
 8005680:	429a      	cmp	r2, r3
 8005682:	d21c      	bcs.n	80056be <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	b29a      	uxth	r2, r3
 8005688:	200e      	movs	r0, #14
 800568a:	2420      	movs	r4, #32
 800568c:	1903      	adds	r3, r0, r4
 800568e:	19db      	adds	r3, r3, r7
 8005690:	210f      	movs	r1, #15
 8005692:	438a      	bics	r2, r1
 8005694:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	b29b      	uxth	r3, r3
 800569c:	2207      	movs	r2, #7
 800569e:	4013      	ands	r3, r2
 80056a0:	b299      	uxth	r1, r3
 80056a2:	1903      	adds	r3, r0, r4
 80056a4:	19db      	adds	r3, r3, r7
 80056a6:	1902      	adds	r2, r0, r4
 80056a8:	19d2      	adds	r2, r2, r7
 80056aa:	8812      	ldrh	r2, [r2, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	1902      	adds	r2, r0, r4
 80056b6:	19d2      	adds	r2, r2, r7
 80056b8:	8812      	ldrh	r2, [r2, #0]
 80056ba:	60da      	str	r2, [r3, #12]
 80056bc:	e05e      	b.n	800577c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80056be:	231a      	movs	r3, #26
 80056c0:	2220      	movs	r2, #32
 80056c2:	189b      	adds	r3, r3, r2
 80056c4:	19db      	adds	r3, r3, r7
 80056c6:	2201      	movs	r2, #1
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	e057      	b.n	800577c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056cc:	231b      	movs	r3, #27
 80056ce:	2220      	movs	r2, #32
 80056d0:	189b      	adds	r3, r3, r2
 80056d2:	19db      	adds	r3, r3, r7
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d015      	beq.n	8005706 <UART_SetConfig+0x442>
 80056da:	dc18      	bgt.n	800570e <UART_SetConfig+0x44a>
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d00d      	beq.n	80056fc <UART_SetConfig+0x438>
 80056e0:	dc15      	bgt.n	800570e <UART_SetConfig+0x44a>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <UART_SetConfig+0x428>
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d005      	beq.n	80056f6 <UART_SetConfig+0x432>
 80056ea:	e010      	b.n	800570e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ec:	f7fe fc62 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 80056f0:	0003      	movs	r3, r0
 80056f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056f4:	e014      	b.n	8005720 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f6:	4b2e      	ldr	r3, [pc, #184]	; (80057b0 <UART_SetConfig+0x4ec>)
 80056f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056fa:	e011      	b.n	8005720 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fc:	f7fe fbce 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8005700:	0003      	movs	r3, r0
 8005702:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005704:	e00c      	b.n	8005720 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005706:	2380      	movs	r3, #128	; 0x80
 8005708:	021b      	lsls	r3, r3, #8
 800570a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800570c:	e008      	b.n	8005720 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005712:	231a      	movs	r3, #26
 8005714:	2220      	movs	r2, #32
 8005716:	189b      	adds	r3, r3, r2
 8005718:	19db      	adds	r3, r3, r7
 800571a:	2201      	movs	r2, #1
 800571c:	701a      	strb	r2, [r3, #0]
        break;
 800571e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005722:	2b00      	cmp	r3, #0
 8005724:	d02a      	beq.n	800577c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800572a:	4b20      	ldr	r3, [pc, #128]	; (80057ac <UART_SetConfig+0x4e8>)
 800572c:	0052      	lsls	r2, r2, #1
 800572e:	5ad3      	ldrh	r3, [r2, r3]
 8005730:	0019      	movs	r1, r3
 8005732:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005734:	f7fa fcf0 	bl	8000118 <__udivsi3>
 8005738:	0003      	movs	r3, r0
 800573a:	001a      	movs	r2, r3
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	18d2      	adds	r2, r2, r3
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	0019      	movs	r1, r3
 800574a:	0010      	movs	r0, r2
 800574c:	f7fa fce4 	bl	8000118 <__udivsi3>
 8005750:	0003      	movs	r3, r0
 8005752:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	2b0f      	cmp	r3, #15
 8005758:	d90a      	bls.n	8005770 <UART_SetConfig+0x4ac>
 800575a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800575c:	2380      	movs	r3, #128	; 0x80
 800575e:	025b      	lsls	r3, r3, #9
 8005760:	429a      	cmp	r2, r3
 8005762:	d205      	bcs.n	8005770 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005766:	b29a      	uxth	r2, r3
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60da      	str	r2, [r3, #12]
 800576e:	e005      	b.n	800577c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005770:	231a      	movs	r3, #26
 8005772:	2220      	movs	r2, #32
 8005774:	189b      	adds	r3, r3, r2
 8005776:	19db      	adds	r3, r3, r7
 8005778:	2201      	movs	r2, #1
 800577a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	226a      	movs	r2, #106	; 0x6a
 8005780:	2101      	movs	r1, #1
 8005782:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	2268      	movs	r2, #104	; 0x68
 8005788:	2101      	movs	r1, #1
 800578a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	2200      	movs	r2, #0
 8005790:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	2200      	movs	r2, #0
 8005796:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005798:	231a      	movs	r3, #26
 800579a:	2220      	movs	r2, #32
 800579c:	189b      	adds	r3, r3, r2
 800579e:	19db      	adds	r3, r3, r7
 80057a0:	781b      	ldrb	r3, [r3, #0]
}
 80057a2:	0018      	movs	r0, r3
 80057a4:	46bd      	mov	sp, r7
 80057a6:	b010      	add	sp, #64	; 0x40
 80057a8:	bdb0      	pop	{r4, r5, r7, pc}
 80057aa:	46c0      	nop			; (mov r8, r8)
 80057ac:	080070f4 	.word	0x080070f4
 80057b0:	00f42400 	.word	0x00f42400

080057b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	2201      	movs	r2, #1
 80057c2:	4013      	ands	r3, r2
 80057c4:	d00b      	beq.n	80057de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	4a4a      	ldr	r2, [pc, #296]	; (80058f8 <UART_AdvFeatureConfig+0x144>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	0019      	movs	r1, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e2:	2202      	movs	r2, #2
 80057e4:	4013      	ands	r3, r2
 80057e6:	d00b      	beq.n	8005800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	4a43      	ldr	r2, [pc, #268]	; (80058fc <UART_AdvFeatureConfig+0x148>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	0019      	movs	r1, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	2204      	movs	r2, #4
 8005806:	4013      	ands	r3, r2
 8005808:	d00b      	beq.n	8005822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	4a3b      	ldr	r2, [pc, #236]	; (8005900 <UART_AdvFeatureConfig+0x14c>)
 8005812:	4013      	ands	r3, r2
 8005814:	0019      	movs	r1, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005826:	2208      	movs	r2, #8
 8005828:	4013      	ands	r3, r2
 800582a:	d00b      	beq.n	8005844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	4a34      	ldr	r2, [pc, #208]	; (8005904 <UART_AdvFeatureConfig+0x150>)
 8005834:	4013      	ands	r3, r2
 8005836:	0019      	movs	r1, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005848:	2210      	movs	r2, #16
 800584a:	4013      	ands	r3, r2
 800584c:	d00b      	beq.n	8005866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	4a2c      	ldr	r2, [pc, #176]	; (8005908 <UART_AdvFeatureConfig+0x154>)
 8005856:	4013      	ands	r3, r2
 8005858:	0019      	movs	r1, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586a:	2220      	movs	r2, #32
 800586c:	4013      	ands	r3, r2
 800586e:	d00b      	beq.n	8005888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	4a25      	ldr	r2, [pc, #148]	; (800590c <UART_AdvFeatureConfig+0x158>)
 8005878:	4013      	ands	r3, r2
 800587a:	0019      	movs	r1, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588c:	2240      	movs	r2, #64	; 0x40
 800588e:	4013      	ands	r3, r2
 8005890:	d01d      	beq.n	80058ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	4a1d      	ldr	r2, [pc, #116]	; (8005910 <UART_AdvFeatureConfig+0x15c>)
 800589a:	4013      	ands	r3, r2
 800589c:	0019      	movs	r1, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058ae:	2380      	movs	r3, #128	; 0x80
 80058b0:	035b      	lsls	r3, r3, #13
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d10b      	bne.n	80058ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	4a15      	ldr	r2, [pc, #84]	; (8005914 <UART_AdvFeatureConfig+0x160>)
 80058be:	4013      	ands	r3, r2
 80058c0:	0019      	movs	r1, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d2:	2280      	movs	r2, #128	; 0x80
 80058d4:	4013      	ands	r3, r2
 80058d6:	d00b      	beq.n	80058f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	4a0e      	ldr	r2, [pc, #56]	; (8005918 <UART_AdvFeatureConfig+0x164>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	0019      	movs	r1, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	605a      	str	r2, [r3, #4]
  }
}
 80058f0:	46c0      	nop			; (mov r8, r8)
 80058f2:	46bd      	mov	sp, r7
 80058f4:	b002      	add	sp, #8
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	fffdffff 	.word	0xfffdffff
 80058fc:	fffeffff 	.word	0xfffeffff
 8005900:	fffbffff 	.word	0xfffbffff
 8005904:	ffff7fff 	.word	0xffff7fff
 8005908:	ffffefff 	.word	0xffffefff
 800590c:	ffffdfff 	.word	0xffffdfff
 8005910:	ffefffff 	.word	0xffefffff
 8005914:	ff9fffff 	.word	0xff9fffff
 8005918:	fff7ffff 	.word	0xfff7ffff

0800591c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af02      	add	r7, sp, #8
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2290      	movs	r2, #144	; 0x90
 8005928:	2100      	movs	r1, #0
 800592a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800592c:	f7fc f8c4 	bl	8001ab8 <HAL_GetTick>
 8005930:	0003      	movs	r3, r0
 8005932:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2208      	movs	r2, #8
 800593c:	4013      	ands	r3, r2
 800593e:	2b08      	cmp	r3, #8
 8005940:	d10c      	bne.n	800595c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2280      	movs	r2, #128	; 0x80
 8005946:	0391      	lsls	r1, r2, #14
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	4a1a      	ldr	r2, [pc, #104]	; (80059b4 <UART_CheckIdleState+0x98>)
 800594c:	9200      	str	r2, [sp, #0]
 800594e:	2200      	movs	r2, #0
 8005950:	f000 f832 	bl	80059b8 <UART_WaitOnFlagUntilTimeout>
 8005954:	1e03      	subs	r3, r0, #0
 8005956:	d001      	beq.n	800595c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e026      	b.n	80059aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2204      	movs	r2, #4
 8005964:	4013      	ands	r3, r2
 8005966:	2b04      	cmp	r3, #4
 8005968:	d10c      	bne.n	8005984 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2280      	movs	r2, #128	; 0x80
 800596e:	03d1      	lsls	r1, r2, #15
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	4a10      	ldr	r2, [pc, #64]	; (80059b4 <UART_CheckIdleState+0x98>)
 8005974:	9200      	str	r2, [sp, #0]
 8005976:	2200      	movs	r2, #0
 8005978:	f000 f81e 	bl	80059b8 <UART_WaitOnFlagUntilTimeout>
 800597c:	1e03      	subs	r3, r0, #0
 800597e:	d001      	beq.n	8005984 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e012      	b.n	80059aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2288      	movs	r2, #136	; 0x88
 8005988:	2120      	movs	r1, #32
 800598a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	228c      	movs	r2, #140	; 0x8c
 8005990:	2120      	movs	r1, #32
 8005992:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2284      	movs	r2, #132	; 0x84
 80059a4:	2100      	movs	r1, #0
 80059a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	0018      	movs	r0, r3
 80059ac:	46bd      	mov	sp, r7
 80059ae:	b004      	add	sp, #16
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	46c0      	nop			; (mov r8, r8)
 80059b4:	01ffffff 	.word	0x01ffffff

080059b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b094      	sub	sp, #80	; 0x50
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	1dfb      	adds	r3, r7, #7
 80059c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c8:	e0a7      	b.n	8005b1a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059cc:	3301      	adds	r3, #1
 80059ce:	d100      	bne.n	80059d2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80059d0:	e0a3      	b.n	8005b1a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d2:	f7fc f871 	bl	8001ab8 <HAL_GetTick>
 80059d6:	0002      	movs	r2, r0
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059de:	429a      	cmp	r2, r3
 80059e0:	d302      	bcc.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80059e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d13f      	bne.n	8005a68 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e8:	f3ef 8310 	mrs	r3, PRIMASK
 80059ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80059f0:	647b      	str	r3, [r7, #68]	; 0x44
 80059f2:	2301      	movs	r3, #1
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f8:	f383 8810 	msr	PRIMASK, r3
}
 80059fc:	46c0      	nop			; (mov r8, r8)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	494e      	ldr	r1, [pc, #312]	; (8005b44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005a0a:	400a      	ands	r2, r1
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a10:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	f383 8810 	msr	PRIMASK, r3
}
 8005a18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a1e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a22:	643b      	str	r3, [r7, #64]	; 0x40
 8005a24:	2301      	movs	r3, #1
 8005a26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2a:	f383 8810 	msr	PRIMASK, r3
}
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	438a      	bics	r2, r1
 8005a3e:	609a      	str	r2, [r3, #8]
 8005a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a46:	f383 8810 	msr	PRIMASK, r3
}
 8005a4a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2288      	movs	r2, #136	; 0x88
 8005a50:	2120      	movs	r1, #32
 8005a52:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	228c      	movs	r2, #140	; 0x8c
 8005a58:	2120      	movs	r1, #32
 8005a5a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2284      	movs	r2, #132	; 0x84
 8005a60:	2100      	movs	r1, #0
 8005a62:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e069      	b.n	8005b3c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2204      	movs	r2, #4
 8005a70:	4013      	ands	r3, r2
 8005a72:	d052      	beq.n	8005b1a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	69da      	ldr	r2, [r3, #28]
 8005a7a:	2380      	movs	r3, #128	; 0x80
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	401a      	ands	r2, r3
 8005a80:	2380      	movs	r3, #128	; 0x80
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d148      	bne.n	8005b1a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2280      	movs	r2, #128	; 0x80
 8005a8e:	0112      	lsls	r2, r2, #4
 8005a90:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a92:	f3ef 8310 	mrs	r3, PRIMASK
 8005a96:	613b      	str	r3, [r7, #16]
  return(result);
 8005a98:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f383 8810 	msr	PRIMASK, r3
}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4924      	ldr	r1, [pc, #144]	; (8005b44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005ab4:	400a      	ands	r2, r1
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	f383 8810 	msr	PRIMASK, r3
}
 8005ac2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ac8:	61fb      	str	r3, [r7, #28]
  return(result);
 8005aca:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ace:	2301      	movs	r3, #1
 8005ad0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	f383 8810 	msr	PRIMASK, r3
}
 8005ad8:	46c0      	nop			; (mov r8, r8)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	438a      	bics	r2, r1
 8005ae8:	609a      	str	r2, [r3, #8]
 8005aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	f383 8810 	msr	PRIMASK, r3
}
 8005af4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2288      	movs	r2, #136	; 0x88
 8005afa:	2120      	movs	r1, #32
 8005afc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	228c      	movs	r2, #140	; 0x8c
 8005b02:	2120      	movs	r1, #32
 8005b04:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2290      	movs	r2, #144	; 0x90
 8005b0a:	2120      	movs	r1, #32
 8005b0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2284      	movs	r2, #132	; 0x84
 8005b12:	2100      	movs	r1, #0
 8005b14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e010      	b.n	8005b3c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	4013      	ands	r3, r2
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	425a      	negs	r2, r3
 8005b2a:	4153      	adcs	r3, r2
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	001a      	movs	r2, r3
 8005b30:	1dfb      	adds	r3, r7, #7
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d100      	bne.n	8005b3a <UART_WaitOnFlagUntilTimeout+0x182>
 8005b38:	e747      	b.n	80059ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	b014      	add	sp, #80	; 0x50
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	fffffe5f 	.word	0xfffffe5f

08005b48 <__errno>:
 8005b48:	4b01      	ldr	r3, [pc, #4]	; (8005b50 <__errno+0x8>)
 8005b4a:	6818      	ldr	r0, [r3, #0]
 8005b4c:	4770      	bx	lr
 8005b4e:	46c0      	nop			; (mov r8, r8)
 8005b50:	2000003c 	.word	0x2000003c

08005b54 <__libc_init_array>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	2600      	movs	r6, #0
 8005b58:	4d0c      	ldr	r5, [pc, #48]	; (8005b8c <__libc_init_array+0x38>)
 8005b5a:	4c0d      	ldr	r4, [pc, #52]	; (8005b90 <__libc_init_array+0x3c>)
 8005b5c:	1b64      	subs	r4, r4, r5
 8005b5e:	10a4      	asrs	r4, r4, #2
 8005b60:	42a6      	cmp	r6, r4
 8005b62:	d109      	bne.n	8005b78 <__libc_init_array+0x24>
 8005b64:	2600      	movs	r6, #0
 8005b66:	f000 fff9 	bl	8006b5c <_init>
 8005b6a:	4d0a      	ldr	r5, [pc, #40]	; (8005b94 <__libc_init_array+0x40>)
 8005b6c:	4c0a      	ldr	r4, [pc, #40]	; (8005b98 <__libc_init_array+0x44>)
 8005b6e:	1b64      	subs	r4, r4, r5
 8005b70:	10a4      	asrs	r4, r4, #2
 8005b72:	42a6      	cmp	r6, r4
 8005b74:	d105      	bne.n	8005b82 <__libc_init_array+0x2e>
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
 8005b78:	00b3      	lsls	r3, r6, #2
 8005b7a:	58eb      	ldr	r3, [r5, r3]
 8005b7c:	4798      	blx	r3
 8005b7e:	3601      	adds	r6, #1
 8005b80:	e7ee      	b.n	8005b60 <__libc_init_array+0xc>
 8005b82:	00b3      	lsls	r3, r6, #2
 8005b84:	58eb      	ldr	r3, [r5, r3]
 8005b86:	4798      	blx	r3
 8005b88:	3601      	adds	r6, #1
 8005b8a:	e7f2      	b.n	8005b72 <__libc_init_array+0x1e>
 8005b8c:	080071ac 	.word	0x080071ac
 8005b90:	080071ac 	.word	0x080071ac
 8005b94:	080071ac 	.word	0x080071ac
 8005b98:	080071b0 	.word	0x080071b0

08005b9c <memset>:
 8005b9c:	0003      	movs	r3, r0
 8005b9e:	1882      	adds	r2, r0, r2
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d100      	bne.n	8005ba6 <memset+0xa>
 8005ba4:	4770      	bx	lr
 8005ba6:	7019      	strb	r1, [r3, #0]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	e7f9      	b.n	8005ba0 <memset+0x4>

08005bac <iprintf>:
 8005bac:	b40f      	push	{r0, r1, r2, r3}
 8005bae:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <iprintf+0x30>)
 8005bb0:	b513      	push	{r0, r1, r4, lr}
 8005bb2:	681c      	ldr	r4, [r3, #0]
 8005bb4:	2c00      	cmp	r4, #0
 8005bb6:	d005      	beq.n	8005bc4 <iprintf+0x18>
 8005bb8:	69a3      	ldr	r3, [r4, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d102      	bne.n	8005bc4 <iprintf+0x18>
 8005bbe:	0020      	movs	r0, r4
 8005bc0:	f000 f870 	bl	8005ca4 <__sinit>
 8005bc4:	ab05      	add	r3, sp, #20
 8005bc6:	0020      	movs	r0, r4
 8005bc8:	9a04      	ldr	r2, [sp, #16]
 8005bca:	68a1      	ldr	r1, [r4, #8]
 8005bcc:	9301      	str	r3, [sp, #4]
 8005bce:	f000 f9cd 	bl	8005f6c <_vfiprintf_r>
 8005bd2:	bc16      	pop	{r1, r2, r4}
 8005bd4:	bc08      	pop	{r3}
 8005bd6:	b004      	add	sp, #16
 8005bd8:	4718      	bx	r3
 8005bda:	46c0      	nop			; (mov r8, r8)
 8005bdc:	2000003c 	.word	0x2000003c

08005be0 <std>:
 8005be0:	2300      	movs	r3, #0
 8005be2:	b510      	push	{r4, lr}
 8005be4:	0004      	movs	r4, r0
 8005be6:	6003      	str	r3, [r0, #0]
 8005be8:	6043      	str	r3, [r0, #4]
 8005bea:	6083      	str	r3, [r0, #8]
 8005bec:	8181      	strh	r1, [r0, #12]
 8005bee:	6643      	str	r3, [r0, #100]	; 0x64
 8005bf0:	0019      	movs	r1, r3
 8005bf2:	81c2      	strh	r2, [r0, #14]
 8005bf4:	6103      	str	r3, [r0, #16]
 8005bf6:	6143      	str	r3, [r0, #20]
 8005bf8:	6183      	str	r3, [r0, #24]
 8005bfa:	2208      	movs	r2, #8
 8005bfc:	305c      	adds	r0, #92	; 0x5c
 8005bfe:	f7ff ffcd 	bl	8005b9c <memset>
 8005c02:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <std+0x38>)
 8005c04:	6224      	str	r4, [r4, #32]
 8005c06:	6263      	str	r3, [r4, #36]	; 0x24
 8005c08:	4b04      	ldr	r3, [pc, #16]	; (8005c1c <std+0x3c>)
 8005c0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c0c:	4b04      	ldr	r3, [pc, #16]	; (8005c20 <std+0x40>)
 8005c0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c10:	4b04      	ldr	r3, [pc, #16]	; (8005c24 <std+0x44>)
 8005c12:	6323      	str	r3, [r4, #48]	; 0x30
 8005c14:	bd10      	pop	{r4, pc}
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	08006509 	.word	0x08006509
 8005c1c:	08006531 	.word	0x08006531
 8005c20:	08006569 	.word	0x08006569
 8005c24:	08006595 	.word	0x08006595

08005c28 <_cleanup_r>:
 8005c28:	b510      	push	{r4, lr}
 8005c2a:	4902      	ldr	r1, [pc, #8]	; (8005c34 <_cleanup_r+0xc>)
 8005c2c:	f000 f8ba 	bl	8005da4 <_fwalk_reent>
 8005c30:	bd10      	pop	{r4, pc}
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	080068a1 	.word	0x080068a1

08005c38 <__sfmoreglue>:
 8005c38:	b570      	push	{r4, r5, r6, lr}
 8005c3a:	2568      	movs	r5, #104	; 0x68
 8005c3c:	1e4a      	subs	r2, r1, #1
 8005c3e:	4355      	muls	r5, r2
 8005c40:	000e      	movs	r6, r1
 8005c42:	0029      	movs	r1, r5
 8005c44:	3174      	adds	r1, #116	; 0x74
 8005c46:	f000 f8f3 	bl	8005e30 <_malloc_r>
 8005c4a:	1e04      	subs	r4, r0, #0
 8005c4c:	d008      	beq.n	8005c60 <__sfmoreglue+0x28>
 8005c4e:	2100      	movs	r1, #0
 8005c50:	002a      	movs	r2, r5
 8005c52:	6001      	str	r1, [r0, #0]
 8005c54:	6046      	str	r6, [r0, #4]
 8005c56:	300c      	adds	r0, #12
 8005c58:	60a0      	str	r0, [r4, #8]
 8005c5a:	3268      	adds	r2, #104	; 0x68
 8005c5c:	f7ff ff9e 	bl	8005b9c <memset>
 8005c60:	0020      	movs	r0, r4
 8005c62:	bd70      	pop	{r4, r5, r6, pc}

08005c64 <__sfp_lock_acquire>:
 8005c64:	b510      	push	{r4, lr}
 8005c66:	4802      	ldr	r0, [pc, #8]	; (8005c70 <__sfp_lock_acquire+0xc>)
 8005c68:	f000 f8bd 	bl	8005de6 <__retarget_lock_acquire_recursive>
 8005c6c:	bd10      	pop	{r4, pc}
 8005c6e:	46c0      	nop			; (mov r8, r8)
 8005c70:	2000027d 	.word	0x2000027d

08005c74 <__sfp_lock_release>:
 8005c74:	b510      	push	{r4, lr}
 8005c76:	4802      	ldr	r0, [pc, #8]	; (8005c80 <__sfp_lock_release+0xc>)
 8005c78:	f000 f8b6 	bl	8005de8 <__retarget_lock_release_recursive>
 8005c7c:	bd10      	pop	{r4, pc}
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	2000027d 	.word	0x2000027d

08005c84 <__sinit_lock_acquire>:
 8005c84:	b510      	push	{r4, lr}
 8005c86:	4802      	ldr	r0, [pc, #8]	; (8005c90 <__sinit_lock_acquire+0xc>)
 8005c88:	f000 f8ad 	bl	8005de6 <__retarget_lock_acquire_recursive>
 8005c8c:	bd10      	pop	{r4, pc}
 8005c8e:	46c0      	nop			; (mov r8, r8)
 8005c90:	2000027e 	.word	0x2000027e

08005c94 <__sinit_lock_release>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	4802      	ldr	r0, [pc, #8]	; (8005ca0 <__sinit_lock_release+0xc>)
 8005c98:	f000 f8a6 	bl	8005de8 <__retarget_lock_release_recursive>
 8005c9c:	bd10      	pop	{r4, pc}
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	2000027e 	.word	0x2000027e

08005ca4 <__sinit>:
 8005ca4:	b513      	push	{r0, r1, r4, lr}
 8005ca6:	0004      	movs	r4, r0
 8005ca8:	f7ff ffec 	bl	8005c84 <__sinit_lock_acquire>
 8005cac:	69a3      	ldr	r3, [r4, #24]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <__sinit+0x14>
 8005cb2:	f7ff ffef 	bl	8005c94 <__sinit_lock_release>
 8005cb6:	bd13      	pop	{r0, r1, r4, pc}
 8005cb8:	64a3      	str	r3, [r4, #72]	; 0x48
 8005cba:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005cbc:	6523      	str	r3, [r4, #80]	; 0x50
 8005cbe:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <__sinit+0x68>)
 8005cc0:	4a13      	ldr	r2, [pc, #76]	; (8005d10 <__sinit+0x6c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005cc6:	9301      	str	r3, [sp, #4]
 8005cc8:	42a3      	cmp	r3, r4
 8005cca:	d101      	bne.n	8005cd0 <__sinit+0x2c>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	61a3      	str	r3, [r4, #24]
 8005cd0:	0020      	movs	r0, r4
 8005cd2:	f000 f81f 	bl	8005d14 <__sfp>
 8005cd6:	6060      	str	r0, [r4, #4]
 8005cd8:	0020      	movs	r0, r4
 8005cda:	f000 f81b 	bl	8005d14 <__sfp>
 8005cde:	60a0      	str	r0, [r4, #8]
 8005ce0:	0020      	movs	r0, r4
 8005ce2:	f000 f817 	bl	8005d14 <__sfp>
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	2104      	movs	r1, #4
 8005cea:	60e0      	str	r0, [r4, #12]
 8005cec:	6860      	ldr	r0, [r4, #4]
 8005cee:	f7ff ff77 	bl	8005be0 <std>
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	2109      	movs	r1, #9
 8005cf6:	68a0      	ldr	r0, [r4, #8]
 8005cf8:	f7ff ff72 	bl	8005be0 <std>
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	2112      	movs	r1, #18
 8005d00:	68e0      	ldr	r0, [r4, #12]
 8005d02:	f7ff ff6d 	bl	8005be0 <std>
 8005d06:	2301      	movs	r3, #1
 8005d08:	61a3      	str	r3, [r4, #24]
 8005d0a:	e7d2      	b.n	8005cb2 <__sinit+0xe>
 8005d0c:	0800710c 	.word	0x0800710c
 8005d10:	08005c29 	.word	0x08005c29

08005d14 <__sfp>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	0007      	movs	r7, r0
 8005d18:	f7ff ffa4 	bl	8005c64 <__sfp_lock_acquire>
 8005d1c:	4b1f      	ldr	r3, [pc, #124]	; (8005d9c <__sfp+0x88>)
 8005d1e:	681e      	ldr	r6, [r3, #0]
 8005d20:	69b3      	ldr	r3, [r6, #24]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d102      	bne.n	8005d2c <__sfp+0x18>
 8005d26:	0030      	movs	r0, r6
 8005d28:	f7ff ffbc 	bl	8005ca4 <__sinit>
 8005d2c:	3648      	adds	r6, #72	; 0x48
 8005d2e:	68b4      	ldr	r4, [r6, #8]
 8005d30:	6873      	ldr	r3, [r6, #4]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	d504      	bpl.n	8005d40 <__sfp+0x2c>
 8005d36:	6833      	ldr	r3, [r6, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d022      	beq.n	8005d82 <__sfp+0x6e>
 8005d3c:	6836      	ldr	r6, [r6, #0]
 8005d3e:	e7f6      	b.n	8005d2e <__sfp+0x1a>
 8005d40:	220c      	movs	r2, #12
 8005d42:	5ea5      	ldrsh	r5, [r4, r2]
 8005d44:	2d00      	cmp	r5, #0
 8005d46:	d11a      	bne.n	8005d7e <__sfp+0x6a>
 8005d48:	0020      	movs	r0, r4
 8005d4a:	4b15      	ldr	r3, [pc, #84]	; (8005da0 <__sfp+0x8c>)
 8005d4c:	3058      	adds	r0, #88	; 0x58
 8005d4e:	60e3      	str	r3, [r4, #12]
 8005d50:	6665      	str	r5, [r4, #100]	; 0x64
 8005d52:	f000 f847 	bl	8005de4 <__retarget_lock_init_recursive>
 8005d56:	f7ff ff8d 	bl	8005c74 <__sfp_lock_release>
 8005d5a:	0020      	movs	r0, r4
 8005d5c:	2208      	movs	r2, #8
 8005d5e:	0029      	movs	r1, r5
 8005d60:	6025      	str	r5, [r4, #0]
 8005d62:	60a5      	str	r5, [r4, #8]
 8005d64:	6065      	str	r5, [r4, #4]
 8005d66:	6125      	str	r5, [r4, #16]
 8005d68:	6165      	str	r5, [r4, #20]
 8005d6a:	61a5      	str	r5, [r4, #24]
 8005d6c:	305c      	adds	r0, #92	; 0x5c
 8005d6e:	f7ff ff15 	bl	8005b9c <memset>
 8005d72:	6365      	str	r5, [r4, #52]	; 0x34
 8005d74:	63a5      	str	r5, [r4, #56]	; 0x38
 8005d76:	64a5      	str	r5, [r4, #72]	; 0x48
 8005d78:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005d7a:	0020      	movs	r0, r4
 8005d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d7e:	3468      	adds	r4, #104	; 0x68
 8005d80:	e7d7      	b.n	8005d32 <__sfp+0x1e>
 8005d82:	2104      	movs	r1, #4
 8005d84:	0038      	movs	r0, r7
 8005d86:	f7ff ff57 	bl	8005c38 <__sfmoreglue>
 8005d8a:	1e04      	subs	r4, r0, #0
 8005d8c:	6030      	str	r0, [r6, #0]
 8005d8e:	d1d5      	bne.n	8005d3c <__sfp+0x28>
 8005d90:	f7ff ff70 	bl	8005c74 <__sfp_lock_release>
 8005d94:	230c      	movs	r3, #12
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	e7ef      	b.n	8005d7a <__sfp+0x66>
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	0800710c 	.word	0x0800710c
 8005da0:	ffff0001 	.word	0xffff0001

08005da4 <_fwalk_reent>:
 8005da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005da6:	0004      	movs	r4, r0
 8005da8:	0006      	movs	r6, r0
 8005daa:	2700      	movs	r7, #0
 8005dac:	9101      	str	r1, [sp, #4]
 8005dae:	3448      	adds	r4, #72	; 0x48
 8005db0:	6863      	ldr	r3, [r4, #4]
 8005db2:	68a5      	ldr	r5, [r4, #8]
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	9b00      	ldr	r3, [sp, #0]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	d504      	bpl.n	8005dc8 <_fwalk_reent+0x24>
 8005dbe:	6824      	ldr	r4, [r4, #0]
 8005dc0:	2c00      	cmp	r4, #0
 8005dc2:	d1f5      	bne.n	8005db0 <_fwalk_reent+0xc>
 8005dc4:	0038      	movs	r0, r7
 8005dc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005dc8:	89ab      	ldrh	r3, [r5, #12]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d908      	bls.n	8005de0 <_fwalk_reent+0x3c>
 8005dce:	220e      	movs	r2, #14
 8005dd0:	5eab      	ldrsh	r3, [r5, r2]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	d004      	beq.n	8005de0 <_fwalk_reent+0x3c>
 8005dd6:	0029      	movs	r1, r5
 8005dd8:	0030      	movs	r0, r6
 8005dda:	9b01      	ldr	r3, [sp, #4]
 8005ddc:	4798      	blx	r3
 8005dde:	4307      	orrs	r7, r0
 8005de0:	3568      	adds	r5, #104	; 0x68
 8005de2:	e7e8      	b.n	8005db6 <_fwalk_reent+0x12>

08005de4 <__retarget_lock_init_recursive>:
 8005de4:	4770      	bx	lr

08005de6 <__retarget_lock_acquire_recursive>:
 8005de6:	4770      	bx	lr

08005de8 <__retarget_lock_release_recursive>:
 8005de8:	4770      	bx	lr
	...

08005dec <sbrk_aligned>:
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	4e0f      	ldr	r6, [pc, #60]	; (8005e2c <sbrk_aligned+0x40>)
 8005df0:	000d      	movs	r5, r1
 8005df2:	6831      	ldr	r1, [r6, #0]
 8005df4:	0004      	movs	r4, r0
 8005df6:	2900      	cmp	r1, #0
 8005df8:	d102      	bne.n	8005e00 <sbrk_aligned+0x14>
 8005dfa:	f000 fb73 	bl	80064e4 <_sbrk_r>
 8005dfe:	6030      	str	r0, [r6, #0]
 8005e00:	0029      	movs	r1, r5
 8005e02:	0020      	movs	r0, r4
 8005e04:	f000 fb6e 	bl	80064e4 <_sbrk_r>
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	d00a      	beq.n	8005e22 <sbrk_aligned+0x36>
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	1cc5      	adds	r5, r0, #3
 8005e10:	439d      	bics	r5, r3
 8005e12:	42a8      	cmp	r0, r5
 8005e14:	d007      	beq.n	8005e26 <sbrk_aligned+0x3a>
 8005e16:	1a29      	subs	r1, r5, r0
 8005e18:	0020      	movs	r0, r4
 8005e1a:	f000 fb63 	bl	80064e4 <_sbrk_r>
 8005e1e:	1c43      	adds	r3, r0, #1
 8005e20:	d101      	bne.n	8005e26 <sbrk_aligned+0x3a>
 8005e22:	2501      	movs	r5, #1
 8005e24:	426d      	negs	r5, r5
 8005e26:	0028      	movs	r0, r5
 8005e28:	bd70      	pop	{r4, r5, r6, pc}
 8005e2a:	46c0      	nop			; (mov r8, r8)
 8005e2c:	20000284 	.word	0x20000284

08005e30 <_malloc_r>:
 8005e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e32:	2203      	movs	r2, #3
 8005e34:	1ccb      	adds	r3, r1, #3
 8005e36:	4393      	bics	r3, r2
 8005e38:	3308      	adds	r3, #8
 8005e3a:	0006      	movs	r6, r0
 8005e3c:	001f      	movs	r7, r3
 8005e3e:	2b0c      	cmp	r3, #12
 8005e40:	d232      	bcs.n	8005ea8 <_malloc_r+0x78>
 8005e42:	270c      	movs	r7, #12
 8005e44:	42b9      	cmp	r1, r7
 8005e46:	d831      	bhi.n	8005eac <_malloc_r+0x7c>
 8005e48:	0030      	movs	r0, r6
 8005e4a:	f000 fdf5 	bl	8006a38 <__malloc_lock>
 8005e4e:	4d32      	ldr	r5, [pc, #200]	; (8005f18 <_malloc_r+0xe8>)
 8005e50:	682b      	ldr	r3, [r5, #0]
 8005e52:	001c      	movs	r4, r3
 8005e54:	2c00      	cmp	r4, #0
 8005e56:	d12e      	bne.n	8005eb6 <_malloc_r+0x86>
 8005e58:	0039      	movs	r1, r7
 8005e5a:	0030      	movs	r0, r6
 8005e5c:	f7ff ffc6 	bl	8005dec <sbrk_aligned>
 8005e60:	0004      	movs	r4, r0
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	d11e      	bne.n	8005ea4 <_malloc_r+0x74>
 8005e66:	682c      	ldr	r4, [r5, #0]
 8005e68:	0025      	movs	r5, r4
 8005e6a:	2d00      	cmp	r5, #0
 8005e6c:	d14a      	bne.n	8005f04 <_malloc_r+0xd4>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	0029      	movs	r1, r5
 8005e72:	18e3      	adds	r3, r4, r3
 8005e74:	0030      	movs	r0, r6
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	f000 fb34 	bl	80064e4 <_sbrk_r>
 8005e7c:	9b01      	ldr	r3, [sp, #4]
 8005e7e:	4283      	cmp	r3, r0
 8005e80:	d143      	bne.n	8005f0a <_malloc_r+0xda>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	3703      	adds	r7, #3
 8005e86:	1aff      	subs	r7, r7, r3
 8005e88:	2303      	movs	r3, #3
 8005e8a:	439f      	bics	r7, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	2f0c      	cmp	r7, #12
 8005e90:	d200      	bcs.n	8005e94 <_malloc_r+0x64>
 8005e92:	270c      	movs	r7, #12
 8005e94:	0039      	movs	r1, r7
 8005e96:	0030      	movs	r0, r6
 8005e98:	f7ff ffa8 	bl	8005dec <sbrk_aligned>
 8005e9c:	1c43      	adds	r3, r0, #1
 8005e9e:	d034      	beq.n	8005f0a <_malloc_r+0xda>
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	19df      	adds	r7, r3, r7
 8005ea4:	6027      	str	r7, [r4, #0]
 8005ea6:	e013      	b.n	8005ed0 <_malloc_r+0xa0>
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	dacb      	bge.n	8005e44 <_malloc_r+0x14>
 8005eac:	230c      	movs	r3, #12
 8005eae:	2500      	movs	r5, #0
 8005eb0:	6033      	str	r3, [r6, #0]
 8005eb2:	0028      	movs	r0, r5
 8005eb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005eb6:	6822      	ldr	r2, [r4, #0]
 8005eb8:	1bd1      	subs	r1, r2, r7
 8005eba:	d420      	bmi.n	8005efe <_malloc_r+0xce>
 8005ebc:	290b      	cmp	r1, #11
 8005ebe:	d917      	bls.n	8005ef0 <_malloc_r+0xc0>
 8005ec0:	19e2      	adds	r2, r4, r7
 8005ec2:	6027      	str	r7, [r4, #0]
 8005ec4:	42a3      	cmp	r3, r4
 8005ec6:	d111      	bne.n	8005eec <_malloc_r+0xbc>
 8005ec8:	602a      	str	r2, [r5, #0]
 8005eca:	6863      	ldr	r3, [r4, #4]
 8005ecc:	6011      	str	r1, [r2, #0]
 8005ece:	6053      	str	r3, [r2, #4]
 8005ed0:	0030      	movs	r0, r6
 8005ed2:	0025      	movs	r5, r4
 8005ed4:	f000 fdb8 	bl	8006a48 <__malloc_unlock>
 8005ed8:	2207      	movs	r2, #7
 8005eda:	350b      	adds	r5, #11
 8005edc:	1d23      	adds	r3, r4, #4
 8005ede:	4395      	bics	r5, r2
 8005ee0:	1aea      	subs	r2, r5, r3
 8005ee2:	429d      	cmp	r5, r3
 8005ee4:	d0e5      	beq.n	8005eb2 <_malloc_r+0x82>
 8005ee6:	1b5b      	subs	r3, r3, r5
 8005ee8:	50a3      	str	r3, [r4, r2]
 8005eea:	e7e2      	b.n	8005eb2 <_malloc_r+0x82>
 8005eec:	605a      	str	r2, [r3, #4]
 8005eee:	e7ec      	b.n	8005eca <_malloc_r+0x9a>
 8005ef0:	6862      	ldr	r2, [r4, #4]
 8005ef2:	42a3      	cmp	r3, r4
 8005ef4:	d101      	bne.n	8005efa <_malloc_r+0xca>
 8005ef6:	602a      	str	r2, [r5, #0]
 8005ef8:	e7ea      	b.n	8005ed0 <_malloc_r+0xa0>
 8005efa:	605a      	str	r2, [r3, #4]
 8005efc:	e7e8      	b.n	8005ed0 <_malloc_r+0xa0>
 8005efe:	0023      	movs	r3, r4
 8005f00:	6864      	ldr	r4, [r4, #4]
 8005f02:	e7a7      	b.n	8005e54 <_malloc_r+0x24>
 8005f04:	002c      	movs	r4, r5
 8005f06:	686d      	ldr	r5, [r5, #4]
 8005f08:	e7af      	b.n	8005e6a <_malloc_r+0x3a>
 8005f0a:	230c      	movs	r3, #12
 8005f0c:	0030      	movs	r0, r6
 8005f0e:	6033      	str	r3, [r6, #0]
 8005f10:	f000 fd9a 	bl	8006a48 <__malloc_unlock>
 8005f14:	e7cd      	b.n	8005eb2 <_malloc_r+0x82>
 8005f16:	46c0      	nop			; (mov r8, r8)
 8005f18:	20000280 	.word	0x20000280

08005f1c <__sfputc_r>:
 8005f1c:	6893      	ldr	r3, [r2, #8]
 8005f1e:	b510      	push	{r4, lr}
 8005f20:	3b01      	subs	r3, #1
 8005f22:	6093      	str	r3, [r2, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	da04      	bge.n	8005f32 <__sfputc_r+0x16>
 8005f28:	6994      	ldr	r4, [r2, #24]
 8005f2a:	42a3      	cmp	r3, r4
 8005f2c:	db07      	blt.n	8005f3e <__sfputc_r+0x22>
 8005f2e:	290a      	cmp	r1, #10
 8005f30:	d005      	beq.n	8005f3e <__sfputc_r+0x22>
 8005f32:	6813      	ldr	r3, [r2, #0]
 8005f34:	1c58      	adds	r0, r3, #1
 8005f36:	6010      	str	r0, [r2, #0]
 8005f38:	7019      	strb	r1, [r3, #0]
 8005f3a:	0008      	movs	r0, r1
 8005f3c:	bd10      	pop	{r4, pc}
 8005f3e:	f000 fb2f 	bl	80065a0 <__swbuf_r>
 8005f42:	0001      	movs	r1, r0
 8005f44:	e7f9      	b.n	8005f3a <__sfputc_r+0x1e>

08005f46 <__sfputs_r>:
 8005f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f48:	0006      	movs	r6, r0
 8005f4a:	000f      	movs	r7, r1
 8005f4c:	0014      	movs	r4, r2
 8005f4e:	18d5      	adds	r5, r2, r3
 8005f50:	42ac      	cmp	r4, r5
 8005f52:	d101      	bne.n	8005f58 <__sfputs_r+0x12>
 8005f54:	2000      	movs	r0, #0
 8005f56:	e007      	b.n	8005f68 <__sfputs_r+0x22>
 8005f58:	7821      	ldrb	r1, [r4, #0]
 8005f5a:	003a      	movs	r2, r7
 8005f5c:	0030      	movs	r0, r6
 8005f5e:	f7ff ffdd 	bl	8005f1c <__sfputc_r>
 8005f62:	3401      	adds	r4, #1
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	d1f3      	bne.n	8005f50 <__sfputs_r+0xa>
 8005f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f6c <_vfiprintf_r>:
 8005f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f6e:	b0a1      	sub	sp, #132	; 0x84
 8005f70:	0006      	movs	r6, r0
 8005f72:	000c      	movs	r4, r1
 8005f74:	001f      	movs	r7, r3
 8005f76:	9203      	str	r2, [sp, #12]
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d004      	beq.n	8005f86 <_vfiprintf_r+0x1a>
 8005f7c:	6983      	ldr	r3, [r0, #24]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <_vfiprintf_r+0x1a>
 8005f82:	f7ff fe8f 	bl	8005ca4 <__sinit>
 8005f86:	4b8e      	ldr	r3, [pc, #568]	; (80061c0 <_vfiprintf_r+0x254>)
 8005f88:	429c      	cmp	r4, r3
 8005f8a:	d11c      	bne.n	8005fc6 <_vfiprintf_r+0x5a>
 8005f8c:	6874      	ldr	r4, [r6, #4]
 8005f8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f90:	07db      	lsls	r3, r3, #31
 8005f92:	d405      	bmi.n	8005fa0 <_vfiprintf_r+0x34>
 8005f94:	89a3      	ldrh	r3, [r4, #12]
 8005f96:	059b      	lsls	r3, r3, #22
 8005f98:	d402      	bmi.n	8005fa0 <_vfiprintf_r+0x34>
 8005f9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f9c:	f7ff ff23 	bl	8005de6 <__retarget_lock_acquire_recursive>
 8005fa0:	89a3      	ldrh	r3, [r4, #12]
 8005fa2:	071b      	lsls	r3, r3, #28
 8005fa4:	d502      	bpl.n	8005fac <_vfiprintf_r+0x40>
 8005fa6:	6923      	ldr	r3, [r4, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d11d      	bne.n	8005fe8 <_vfiprintf_r+0x7c>
 8005fac:	0021      	movs	r1, r4
 8005fae:	0030      	movs	r0, r6
 8005fb0:	f000 fb60 	bl	8006674 <__swsetup_r>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	d017      	beq.n	8005fe8 <_vfiprintf_r+0x7c>
 8005fb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fba:	07db      	lsls	r3, r3, #31
 8005fbc:	d50d      	bpl.n	8005fda <_vfiprintf_r+0x6e>
 8005fbe:	2001      	movs	r0, #1
 8005fc0:	4240      	negs	r0, r0
 8005fc2:	b021      	add	sp, #132	; 0x84
 8005fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fc6:	4b7f      	ldr	r3, [pc, #508]	; (80061c4 <_vfiprintf_r+0x258>)
 8005fc8:	429c      	cmp	r4, r3
 8005fca:	d101      	bne.n	8005fd0 <_vfiprintf_r+0x64>
 8005fcc:	68b4      	ldr	r4, [r6, #8]
 8005fce:	e7de      	b.n	8005f8e <_vfiprintf_r+0x22>
 8005fd0:	4b7d      	ldr	r3, [pc, #500]	; (80061c8 <_vfiprintf_r+0x25c>)
 8005fd2:	429c      	cmp	r4, r3
 8005fd4:	d1db      	bne.n	8005f8e <_vfiprintf_r+0x22>
 8005fd6:	68f4      	ldr	r4, [r6, #12]
 8005fd8:	e7d9      	b.n	8005f8e <_vfiprintf_r+0x22>
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	059b      	lsls	r3, r3, #22
 8005fde:	d4ee      	bmi.n	8005fbe <_vfiprintf_r+0x52>
 8005fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fe2:	f7ff ff01 	bl	8005de8 <__retarget_lock_release_recursive>
 8005fe6:	e7ea      	b.n	8005fbe <_vfiprintf_r+0x52>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	ad08      	add	r5, sp, #32
 8005fec:	616b      	str	r3, [r5, #20]
 8005fee:	3320      	adds	r3, #32
 8005ff0:	766b      	strb	r3, [r5, #25]
 8005ff2:	3310      	adds	r3, #16
 8005ff4:	76ab      	strb	r3, [r5, #26]
 8005ff6:	9707      	str	r7, [sp, #28]
 8005ff8:	9f03      	ldr	r7, [sp, #12]
 8005ffa:	783b      	ldrb	r3, [r7, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <_vfiprintf_r+0x98>
 8006000:	2b25      	cmp	r3, #37	; 0x25
 8006002:	d14e      	bne.n	80060a2 <_vfiprintf_r+0x136>
 8006004:	9b03      	ldr	r3, [sp, #12]
 8006006:	1afb      	subs	r3, r7, r3
 8006008:	9305      	str	r3, [sp, #20]
 800600a:	9b03      	ldr	r3, [sp, #12]
 800600c:	429f      	cmp	r7, r3
 800600e:	d00d      	beq.n	800602c <_vfiprintf_r+0xc0>
 8006010:	9b05      	ldr	r3, [sp, #20]
 8006012:	0021      	movs	r1, r4
 8006014:	0030      	movs	r0, r6
 8006016:	9a03      	ldr	r2, [sp, #12]
 8006018:	f7ff ff95 	bl	8005f46 <__sfputs_r>
 800601c:	1c43      	adds	r3, r0, #1
 800601e:	d100      	bne.n	8006022 <_vfiprintf_r+0xb6>
 8006020:	e0b5      	b.n	800618e <_vfiprintf_r+0x222>
 8006022:	696a      	ldr	r2, [r5, #20]
 8006024:	9b05      	ldr	r3, [sp, #20]
 8006026:	4694      	mov	ip, r2
 8006028:	4463      	add	r3, ip
 800602a:	616b      	str	r3, [r5, #20]
 800602c:	783b      	ldrb	r3, [r7, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d100      	bne.n	8006034 <_vfiprintf_r+0xc8>
 8006032:	e0ac      	b.n	800618e <_vfiprintf_r+0x222>
 8006034:	2201      	movs	r2, #1
 8006036:	1c7b      	adds	r3, r7, #1
 8006038:	9303      	str	r3, [sp, #12]
 800603a:	2300      	movs	r3, #0
 800603c:	4252      	negs	r2, r2
 800603e:	606a      	str	r2, [r5, #4]
 8006040:	a904      	add	r1, sp, #16
 8006042:	3254      	adds	r2, #84	; 0x54
 8006044:	1852      	adds	r2, r2, r1
 8006046:	602b      	str	r3, [r5, #0]
 8006048:	60eb      	str	r3, [r5, #12]
 800604a:	60ab      	str	r3, [r5, #8]
 800604c:	7013      	strb	r3, [r2, #0]
 800604e:	65ab      	str	r3, [r5, #88]	; 0x58
 8006050:	9b03      	ldr	r3, [sp, #12]
 8006052:	2205      	movs	r2, #5
 8006054:	7819      	ldrb	r1, [r3, #0]
 8006056:	485d      	ldr	r0, [pc, #372]	; (80061cc <_vfiprintf_r+0x260>)
 8006058:	f000 fce2 	bl	8006a20 <memchr>
 800605c:	9b03      	ldr	r3, [sp, #12]
 800605e:	1c5f      	adds	r7, r3, #1
 8006060:	2800      	cmp	r0, #0
 8006062:	d120      	bne.n	80060a6 <_vfiprintf_r+0x13a>
 8006064:	682a      	ldr	r2, [r5, #0]
 8006066:	06d3      	lsls	r3, r2, #27
 8006068:	d504      	bpl.n	8006074 <_vfiprintf_r+0x108>
 800606a:	2353      	movs	r3, #83	; 0x53
 800606c:	a904      	add	r1, sp, #16
 800606e:	185b      	adds	r3, r3, r1
 8006070:	2120      	movs	r1, #32
 8006072:	7019      	strb	r1, [r3, #0]
 8006074:	0713      	lsls	r3, r2, #28
 8006076:	d504      	bpl.n	8006082 <_vfiprintf_r+0x116>
 8006078:	2353      	movs	r3, #83	; 0x53
 800607a:	a904      	add	r1, sp, #16
 800607c:	185b      	adds	r3, r3, r1
 800607e:	212b      	movs	r1, #43	; 0x2b
 8006080:	7019      	strb	r1, [r3, #0]
 8006082:	9b03      	ldr	r3, [sp, #12]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b2a      	cmp	r3, #42	; 0x2a
 8006088:	d016      	beq.n	80060b8 <_vfiprintf_r+0x14c>
 800608a:	2100      	movs	r1, #0
 800608c:	68eb      	ldr	r3, [r5, #12]
 800608e:	9f03      	ldr	r7, [sp, #12]
 8006090:	783a      	ldrb	r2, [r7, #0]
 8006092:	1c78      	adds	r0, r7, #1
 8006094:	3a30      	subs	r2, #48	; 0x30
 8006096:	4684      	mov	ip, r0
 8006098:	2a09      	cmp	r2, #9
 800609a:	d94f      	bls.n	800613c <_vfiprintf_r+0x1d0>
 800609c:	2900      	cmp	r1, #0
 800609e:	d111      	bne.n	80060c4 <_vfiprintf_r+0x158>
 80060a0:	e017      	b.n	80060d2 <_vfiprintf_r+0x166>
 80060a2:	3701      	adds	r7, #1
 80060a4:	e7a9      	b.n	8005ffa <_vfiprintf_r+0x8e>
 80060a6:	4b49      	ldr	r3, [pc, #292]	; (80061cc <_vfiprintf_r+0x260>)
 80060a8:	682a      	ldr	r2, [r5, #0]
 80060aa:	1ac0      	subs	r0, r0, r3
 80060ac:	2301      	movs	r3, #1
 80060ae:	4083      	lsls	r3, r0
 80060b0:	4313      	orrs	r3, r2
 80060b2:	602b      	str	r3, [r5, #0]
 80060b4:	9703      	str	r7, [sp, #12]
 80060b6:	e7cb      	b.n	8006050 <_vfiprintf_r+0xe4>
 80060b8:	9b07      	ldr	r3, [sp, #28]
 80060ba:	1d19      	adds	r1, r3, #4
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	9107      	str	r1, [sp, #28]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	db01      	blt.n	80060c8 <_vfiprintf_r+0x15c>
 80060c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80060c6:	e004      	b.n	80060d2 <_vfiprintf_r+0x166>
 80060c8:	425b      	negs	r3, r3
 80060ca:	60eb      	str	r3, [r5, #12]
 80060cc:	2302      	movs	r3, #2
 80060ce:	4313      	orrs	r3, r2
 80060d0:	602b      	str	r3, [r5, #0]
 80060d2:	783b      	ldrb	r3, [r7, #0]
 80060d4:	2b2e      	cmp	r3, #46	; 0x2e
 80060d6:	d10a      	bne.n	80060ee <_vfiprintf_r+0x182>
 80060d8:	787b      	ldrb	r3, [r7, #1]
 80060da:	2b2a      	cmp	r3, #42	; 0x2a
 80060dc:	d137      	bne.n	800614e <_vfiprintf_r+0x1e2>
 80060de:	9b07      	ldr	r3, [sp, #28]
 80060e0:	3702      	adds	r7, #2
 80060e2:	1d1a      	adds	r2, r3, #4
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	9207      	str	r2, [sp, #28]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	db2d      	blt.n	8006148 <_vfiprintf_r+0x1dc>
 80060ec:	9309      	str	r3, [sp, #36]	; 0x24
 80060ee:	2203      	movs	r2, #3
 80060f0:	7839      	ldrb	r1, [r7, #0]
 80060f2:	4837      	ldr	r0, [pc, #220]	; (80061d0 <_vfiprintf_r+0x264>)
 80060f4:	f000 fc94 	bl	8006a20 <memchr>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	d007      	beq.n	800610c <_vfiprintf_r+0x1a0>
 80060fc:	4b34      	ldr	r3, [pc, #208]	; (80061d0 <_vfiprintf_r+0x264>)
 80060fe:	682a      	ldr	r2, [r5, #0]
 8006100:	1ac0      	subs	r0, r0, r3
 8006102:	2340      	movs	r3, #64	; 0x40
 8006104:	4083      	lsls	r3, r0
 8006106:	4313      	orrs	r3, r2
 8006108:	3701      	adds	r7, #1
 800610a:	602b      	str	r3, [r5, #0]
 800610c:	7839      	ldrb	r1, [r7, #0]
 800610e:	1c7b      	adds	r3, r7, #1
 8006110:	2206      	movs	r2, #6
 8006112:	4830      	ldr	r0, [pc, #192]	; (80061d4 <_vfiprintf_r+0x268>)
 8006114:	9303      	str	r3, [sp, #12]
 8006116:	7629      	strb	r1, [r5, #24]
 8006118:	f000 fc82 	bl	8006a20 <memchr>
 800611c:	2800      	cmp	r0, #0
 800611e:	d045      	beq.n	80061ac <_vfiprintf_r+0x240>
 8006120:	4b2d      	ldr	r3, [pc, #180]	; (80061d8 <_vfiprintf_r+0x26c>)
 8006122:	2b00      	cmp	r3, #0
 8006124:	d127      	bne.n	8006176 <_vfiprintf_r+0x20a>
 8006126:	2207      	movs	r2, #7
 8006128:	9b07      	ldr	r3, [sp, #28]
 800612a:	3307      	adds	r3, #7
 800612c:	4393      	bics	r3, r2
 800612e:	3308      	adds	r3, #8
 8006130:	9307      	str	r3, [sp, #28]
 8006132:	696b      	ldr	r3, [r5, #20]
 8006134:	9a04      	ldr	r2, [sp, #16]
 8006136:	189b      	adds	r3, r3, r2
 8006138:	616b      	str	r3, [r5, #20]
 800613a:	e75d      	b.n	8005ff8 <_vfiprintf_r+0x8c>
 800613c:	210a      	movs	r1, #10
 800613e:	434b      	muls	r3, r1
 8006140:	4667      	mov	r7, ip
 8006142:	189b      	adds	r3, r3, r2
 8006144:	3909      	subs	r1, #9
 8006146:	e7a3      	b.n	8006090 <_vfiprintf_r+0x124>
 8006148:	2301      	movs	r3, #1
 800614a:	425b      	negs	r3, r3
 800614c:	e7ce      	b.n	80060ec <_vfiprintf_r+0x180>
 800614e:	2300      	movs	r3, #0
 8006150:	001a      	movs	r2, r3
 8006152:	3701      	adds	r7, #1
 8006154:	606b      	str	r3, [r5, #4]
 8006156:	7839      	ldrb	r1, [r7, #0]
 8006158:	1c78      	adds	r0, r7, #1
 800615a:	3930      	subs	r1, #48	; 0x30
 800615c:	4684      	mov	ip, r0
 800615e:	2909      	cmp	r1, #9
 8006160:	d903      	bls.n	800616a <_vfiprintf_r+0x1fe>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0c3      	beq.n	80060ee <_vfiprintf_r+0x182>
 8006166:	9209      	str	r2, [sp, #36]	; 0x24
 8006168:	e7c1      	b.n	80060ee <_vfiprintf_r+0x182>
 800616a:	230a      	movs	r3, #10
 800616c:	435a      	muls	r2, r3
 800616e:	4667      	mov	r7, ip
 8006170:	1852      	adds	r2, r2, r1
 8006172:	3b09      	subs	r3, #9
 8006174:	e7ef      	b.n	8006156 <_vfiprintf_r+0x1ea>
 8006176:	ab07      	add	r3, sp, #28
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	0022      	movs	r2, r4
 800617c:	0029      	movs	r1, r5
 800617e:	0030      	movs	r0, r6
 8006180:	4b16      	ldr	r3, [pc, #88]	; (80061dc <_vfiprintf_r+0x270>)
 8006182:	e000      	b.n	8006186 <_vfiprintf_r+0x21a>
 8006184:	bf00      	nop
 8006186:	9004      	str	r0, [sp, #16]
 8006188:	9b04      	ldr	r3, [sp, #16]
 800618a:	3301      	adds	r3, #1
 800618c:	d1d1      	bne.n	8006132 <_vfiprintf_r+0x1c6>
 800618e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006190:	07db      	lsls	r3, r3, #31
 8006192:	d405      	bmi.n	80061a0 <_vfiprintf_r+0x234>
 8006194:	89a3      	ldrh	r3, [r4, #12]
 8006196:	059b      	lsls	r3, r3, #22
 8006198:	d402      	bmi.n	80061a0 <_vfiprintf_r+0x234>
 800619a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800619c:	f7ff fe24 	bl	8005de8 <__retarget_lock_release_recursive>
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	065b      	lsls	r3, r3, #25
 80061a4:	d500      	bpl.n	80061a8 <_vfiprintf_r+0x23c>
 80061a6:	e70a      	b.n	8005fbe <_vfiprintf_r+0x52>
 80061a8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80061aa:	e70a      	b.n	8005fc2 <_vfiprintf_r+0x56>
 80061ac:	ab07      	add	r3, sp, #28
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	0022      	movs	r2, r4
 80061b2:	0029      	movs	r1, r5
 80061b4:	0030      	movs	r0, r6
 80061b6:	4b09      	ldr	r3, [pc, #36]	; (80061dc <_vfiprintf_r+0x270>)
 80061b8:	f000 f882 	bl	80062c0 <_printf_i>
 80061bc:	e7e3      	b.n	8006186 <_vfiprintf_r+0x21a>
 80061be:	46c0      	nop			; (mov r8, r8)
 80061c0:	08007130 	.word	0x08007130
 80061c4:	08007150 	.word	0x08007150
 80061c8:	08007110 	.word	0x08007110
 80061cc:	08007170 	.word	0x08007170
 80061d0:	08007176 	.word	0x08007176
 80061d4:	0800717a 	.word	0x0800717a
 80061d8:	00000000 	.word	0x00000000
 80061dc:	08005f47 	.word	0x08005f47

080061e0 <_printf_common>:
 80061e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061e2:	0015      	movs	r5, r2
 80061e4:	9301      	str	r3, [sp, #4]
 80061e6:	688a      	ldr	r2, [r1, #8]
 80061e8:	690b      	ldr	r3, [r1, #16]
 80061ea:	000c      	movs	r4, r1
 80061ec:	9000      	str	r0, [sp, #0]
 80061ee:	4293      	cmp	r3, r2
 80061f0:	da00      	bge.n	80061f4 <_printf_common+0x14>
 80061f2:	0013      	movs	r3, r2
 80061f4:	0022      	movs	r2, r4
 80061f6:	602b      	str	r3, [r5, #0]
 80061f8:	3243      	adds	r2, #67	; 0x43
 80061fa:	7812      	ldrb	r2, [r2, #0]
 80061fc:	2a00      	cmp	r2, #0
 80061fe:	d001      	beq.n	8006204 <_printf_common+0x24>
 8006200:	3301      	adds	r3, #1
 8006202:	602b      	str	r3, [r5, #0]
 8006204:	6823      	ldr	r3, [r4, #0]
 8006206:	069b      	lsls	r3, r3, #26
 8006208:	d502      	bpl.n	8006210 <_printf_common+0x30>
 800620a:	682b      	ldr	r3, [r5, #0]
 800620c:	3302      	adds	r3, #2
 800620e:	602b      	str	r3, [r5, #0]
 8006210:	6822      	ldr	r2, [r4, #0]
 8006212:	2306      	movs	r3, #6
 8006214:	0017      	movs	r7, r2
 8006216:	401f      	ands	r7, r3
 8006218:	421a      	tst	r2, r3
 800621a:	d027      	beq.n	800626c <_printf_common+0x8c>
 800621c:	0023      	movs	r3, r4
 800621e:	3343      	adds	r3, #67	; 0x43
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	1e5a      	subs	r2, r3, #1
 8006224:	4193      	sbcs	r3, r2
 8006226:	6822      	ldr	r2, [r4, #0]
 8006228:	0692      	lsls	r2, r2, #26
 800622a:	d430      	bmi.n	800628e <_printf_common+0xae>
 800622c:	0022      	movs	r2, r4
 800622e:	9901      	ldr	r1, [sp, #4]
 8006230:	9800      	ldr	r0, [sp, #0]
 8006232:	9e08      	ldr	r6, [sp, #32]
 8006234:	3243      	adds	r2, #67	; 0x43
 8006236:	47b0      	blx	r6
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d025      	beq.n	8006288 <_printf_common+0xa8>
 800623c:	2306      	movs	r3, #6
 800623e:	6820      	ldr	r0, [r4, #0]
 8006240:	682a      	ldr	r2, [r5, #0]
 8006242:	68e1      	ldr	r1, [r4, #12]
 8006244:	2500      	movs	r5, #0
 8006246:	4003      	ands	r3, r0
 8006248:	2b04      	cmp	r3, #4
 800624a:	d103      	bne.n	8006254 <_printf_common+0x74>
 800624c:	1a8d      	subs	r5, r1, r2
 800624e:	43eb      	mvns	r3, r5
 8006250:	17db      	asrs	r3, r3, #31
 8006252:	401d      	ands	r5, r3
 8006254:	68a3      	ldr	r3, [r4, #8]
 8006256:	6922      	ldr	r2, [r4, #16]
 8006258:	4293      	cmp	r3, r2
 800625a:	dd01      	ble.n	8006260 <_printf_common+0x80>
 800625c:	1a9b      	subs	r3, r3, r2
 800625e:	18ed      	adds	r5, r5, r3
 8006260:	2700      	movs	r7, #0
 8006262:	42bd      	cmp	r5, r7
 8006264:	d120      	bne.n	80062a8 <_printf_common+0xc8>
 8006266:	2000      	movs	r0, #0
 8006268:	e010      	b.n	800628c <_printf_common+0xac>
 800626a:	3701      	adds	r7, #1
 800626c:	68e3      	ldr	r3, [r4, #12]
 800626e:	682a      	ldr	r2, [r5, #0]
 8006270:	1a9b      	subs	r3, r3, r2
 8006272:	42bb      	cmp	r3, r7
 8006274:	ddd2      	ble.n	800621c <_printf_common+0x3c>
 8006276:	0022      	movs	r2, r4
 8006278:	2301      	movs	r3, #1
 800627a:	9901      	ldr	r1, [sp, #4]
 800627c:	9800      	ldr	r0, [sp, #0]
 800627e:	9e08      	ldr	r6, [sp, #32]
 8006280:	3219      	adds	r2, #25
 8006282:	47b0      	blx	r6
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d1f0      	bne.n	800626a <_printf_common+0x8a>
 8006288:	2001      	movs	r0, #1
 800628a:	4240      	negs	r0, r0
 800628c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800628e:	2030      	movs	r0, #48	; 0x30
 8006290:	18e1      	adds	r1, r4, r3
 8006292:	3143      	adds	r1, #67	; 0x43
 8006294:	7008      	strb	r0, [r1, #0]
 8006296:	0021      	movs	r1, r4
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	3145      	adds	r1, #69	; 0x45
 800629c:	7809      	ldrb	r1, [r1, #0]
 800629e:	18a2      	adds	r2, r4, r2
 80062a0:	3243      	adds	r2, #67	; 0x43
 80062a2:	3302      	adds	r3, #2
 80062a4:	7011      	strb	r1, [r2, #0]
 80062a6:	e7c1      	b.n	800622c <_printf_common+0x4c>
 80062a8:	0022      	movs	r2, r4
 80062aa:	2301      	movs	r3, #1
 80062ac:	9901      	ldr	r1, [sp, #4]
 80062ae:	9800      	ldr	r0, [sp, #0]
 80062b0:	9e08      	ldr	r6, [sp, #32]
 80062b2:	321a      	adds	r2, #26
 80062b4:	47b0      	blx	r6
 80062b6:	1c43      	adds	r3, r0, #1
 80062b8:	d0e6      	beq.n	8006288 <_printf_common+0xa8>
 80062ba:	3701      	adds	r7, #1
 80062bc:	e7d1      	b.n	8006262 <_printf_common+0x82>
	...

080062c0 <_printf_i>:
 80062c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062c2:	b08b      	sub	sp, #44	; 0x2c
 80062c4:	9206      	str	r2, [sp, #24]
 80062c6:	000a      	movs	r2, r1
 80062c8:	3243      	adds	r2, #67	; 0x43
 80062ca:	9307      	str	r3, [sp, #28]
 80062cc:	9005      	str	r0, [sp, #20]
 80062ce:	9204      	str	r2, [sp, #16]
 80062d0:	7e0a      	ldrb	r2, [r1, #24]
 80062d2:	000c      	movs	r4, r1
 80062d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062d6:	2a78      	cmp	r2, #120	; 0x78
 80062d8:	d807      	bhi.n	80062ea <_printf_i+0x2a>
 80062da:	2a62      	cmp	r2, #98	; 0x62
 80062dc:	d809      	bhi.n	80062f2 <_printf_i+0x32>
 80062de:	2a00      	cmp	r2, #0
 80062e0:	d100      	bne.n	80062e4 <_printf_i+0x24>
 80062e2:	e0c1      	b.n	8006468 <_printf_i+0x1a8>
 80062e4:	2a58      	cmp	r2, #88	; 0x58
 80062e6:	d100      	bne.n	80062ea <_printf_i+0x2a>
 80062e8:	e08c      	b.n	8006404 <_printf_i+0x144>
 80062ea:	0026      	movs	r6, r4
 80062ec:	3642      	adds	r6, #66	; 0x42
 80062ee:	7032      	strb	r2, [r6, #0]
 80062f0:	e022      	b.n	8006338 <_printf_i+0x78>
 80062f2:	0010      	movs	r0, r2
 80062f4:	3863      	subs	r0, #99	; 0x63
 80062f6:	2815      	cmp	r0, #21
 80062f8:	d8f7      	bhi.n	80062ea <_printf_i+0x2a>
 80062fa:	f7f9 ff03 	bl	8000104 <__gnu_thumb1_case_shi>
 80062fe:	0016      	.short	0x0016
 8006300:	fff6001f 	.word	0xfff6001f
 8006304:	fff6fff6 	.word	0xfff6fff6
 8006308:	001ffff6 	.word	0x001ffff6
 800630c:	fff6fff6 	.word	0xfff6fff6
 8006310:	fff6fff6 	.word	0xfff6fff6
 8006314:	003600a8 	.word	0x003600a8
 8006318:	fff6009a 	.word	0xfff6009a
 800631c:	00b9fff6 	.word	0x00b9fff6
 8006320:	0036fff6 	.word	0x0036fff6
 8006324:	fff6fff6 	.word	0xfff6fff6
 8006328:	009e      	.short	0x009e
 800632a:	0026      	movs	r6, r4
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	3642      	adds	r6, #66	; 0x42
 8006330:	1d11      	adds	r1, r2, #4
 8006332:	6019      	str	r1, [r3, #0]
 8006334:	6813      	ldr	r3, [r2, #0]
 8006336:	7033      	strb	r3, [r6, #0]
 8006338:	2301      	movs	r3, #1
 800633a:	e0a7      	b.n	800648c <_printf_i+0x1cc>
 800633c:	6808      	ldr	r0, [r1, #0]
 800633e:	6819      	ldr	r1, [r3, #0]
 8006340:	1d0a      	adds	r2, r1, #4
 8006342:	0605      	lsls	r5, r0, #24
 8006344:	d50b      	bpl.n	800635e <_printf_i+0x9e>
 8006346:	680d      	ldr	r5, [r1, #0]
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	2d00      	cmp	r5, #0
 800634c:	da03      	bge.n	8006356 <_printf_i+0x96>
 800634e:	232d      	movs	r3, #45	; 0x2d
 8006350:	9a04      	ldr	r2, [sp, #16]
 8006352:	426d      	negs	r5, r5
 8006354:	7013      	strb	r3, [r2, #0]
 8006356:	4b61      	ldr	r3, [pc, #388]	; (80064dc <_printf_i+0x21c>)
 8006358:	270a      	movs	r7, #10
 800635a:	9303      	str	r3, [sp, #12]
 800635c:	e01b      	b.n	8006396 <_printf_i+0xd6>
 800635e:	680d      	ldr	r5, [r1, #0]
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	0641      	lsls	r1, r0, #25
 8006364:	d5f1      	bpl.n	800634a <_printf_i+0x8a>
 8006366:	b22d      	sxth	r5, r5
 8006368:	e7ef      	b.n	800634a <_printf_i+0x8a>
 800636a:	680d      	ldr	r5, [r1, #0]
 800636c:	6819      	ldr	r1, [r3, #0]
 800636e:	1d08      	adds	r0, r1, #4
 8006370:	6018      	str	r0, [r3, #0]
 8006372:	062e      	lsls	r6, r5, #24
 8006374:	d501      	bpl.n	800637a <_printf_i+0xba>
 8006376:	680d      	ldr	r5, [r1, #0]
 8006378:	e003      	b.n	8006382 <_printf_i+0xc2>
 800637a:	066d      	lsls	r5, r5, #25
 800637c:	d5fb      	bpl.n	8006376 <_printf_i+0xb6>
 800637e:	680d      	ldr	r5, [r1, #0]
 8006380:	b2ad      	uxth	r5, r5
 8006382:	4b56      	ldr	r3, [pc, #344]	; (80064dc <_printf_i+0x21c>)
 8006384:	2708      	movs	r7, #8
 8006386:	9303      	str	r3, [sp, #12]
 8006388:	2a6f      	cmp	r2, #111	; 0x6f
 800638a:	d000      	beq.n	800638e <_printf_i+0xce>
 800638c:	3702      	adds	r7, #2
 800638e:	0023      	movs	r3, r4
 8006390:	2200      	movs	r2, #0
 8006392:	3343      	adds	r3, #67	; 0x43
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	6863      	ldr	r3, [r4, #4]
 8006398:	60a3      	str	r3, [r4, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	db03      	blt.n	80063a6 <_printf_i+0xe6>
 800639e:	2204      	movs	r2, #4
 80063a0:	6821      	ldr	r1, [r4, #0]
 80063a2:	4391      	bics	r1, r2
 80063a4:	6021      	str	r1, [r4, #0]
 80063a6:	2d00      	cmp	r5, #0
 80063a8:	d102      	bne.n	80063b0 <_printf_i+0xf0>
 80063aa:	9e04      	ldr	r6, [sp, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00c      	beq.n	80063ca <_printf_i+0x10a>
 80063b0:	9e04      	ldr	r6, [sp, #16]
 80063b2:	0028      	movs	r0, r5
 80063b4:	0039      	movs	r1, r7
 80063b6:	f7f9 ff35 	bl	8000224 <__aeabi_uidivmod>
 80063ba:	9b03      	ldr	r3, [sp, #12]
 80063bc:	3e01      	subs	r6, #1
 80063be:	5c5b      	ldrb	r3, [r3, r1]
 80063c0:	7033      	strb	r3, [r6, #0]
 80063c2:	002b      	movs	r3, r5
 80063c4:	0005      	movs	r5, r0
 80063c6:	429f      	cmp	r7, r3
 80063c8:	d9f3      	bls.n	80063b2 <_printf_i+0xf2>
 80063ca:	2f08      	cmp	r7, #8
 80063cc:	d109      	bne.n	80063e2 <_printf_i+0x122>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	07db      	lsls	r3, r3, #31
 80063d2:	d506      	bpl.n	80063e2 <_printf_i+0x122>
 80063d4:	6863      	ldr	r3, [r4, #4]
 80063d6:	6922      	ldr	r2, [r4, #16]
 80063d8:	4293      	cmp	r3, r2
 80063da:	dc02      	bgt.n	80063e2 <_printf_i+0x122>
 80063dc:	2330      	movs	r3, #48	; 0x30
 80063de:	3e01      	subs	r6, #1
 80063e0:	7033      	strb	r3, [r6, #0]
 80063e2:	9b04      	ldr	r3, [sp, #16]
 80063e4:	1b9b      	subs	r3, r3, r6
 80063e6:	6123      	str	r3, [r4, #16]
 80063e8:	9b07      	ldr	r3, [sp, #28]
 80063ea:	0021      	movs	r1, r4
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	9805      	ldr	r0, [sp, #20]
 80063f0:	9b06      	ldr	r3, [sp, #24]
 80063f2:	aa09      	add	r2, sp, #36	; 0x24
 80063f4:	f7ff fef4 	bl	80061e0 <_printf_common>
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	d14c      	bne.n	8006496 <_printf_i+0x1d6>
 80063fc:	2001      	movs	r0, #1
 80063fe:	4240      	negs	r0, r0
 8006400:	b00b      	add	sp, #44	; 0x2c
 8006402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006404:	3145      	adds	r1, #69	; 0x45
 8006406:	700a      	strb	r2, [r1, #0]
 8006408:	4a34      	ldr	r2, [pc, #208]	; (80064dc <_printf_i+0x21c>)
 800640a:	9203      	str	r2, [sp, #12]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	6821      	ldr	r1, [r4, #0]
 8006410:	ca20      	ldmia	r2!, {r5}
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	0608      	lsls	r0, r1, #24
 8006416:	d516      	bpl.n	8006446 <_printf_i+0x186>
 8006418:	07cb      	lsls	r3, r1, #31
 800641a:	d502      	bpl.n	8006422 <_printf_i+0x162>
 800641c:	2320      	movs	r3, #32
 800641e:	4319      	orrs	r1, r3
 8006420:	6021      	str	r1, [r4, #0]
 8006422:	2710      	movs	r7, #16
 8006424:	2d00      	cmp	r5, #0
 8006426:	d1b2      	bne.n	800638e <_printf_i+0xce>
 8006428:	2320      	movs	r3, #32
 800642a:	6822      	ldr	r2, [r4, #0]
 800642c:	439a      	bics	r2, r3
 800642e:	6022      	str	r2, [r4, #0]
 8006430:	e7ad      	b.n	800638e <_printf_i+0xce>
 8006432:	2220      	movs	r2, #32
 8006434:	6809      	ldr	r1, [r1, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	6022      	str	r2, [r4, #0]
 800643a:	0022      	movs	r2, r4
 800643c:	2178      	movs	r1, #120	; 0x78
 800643e:	3245      	adds	r2, #69	; 0x45
 8006440:	7011      	strb	r1, [r2, #0]
 8006442:	4a27      	ldr	r2, [pc, #156]	; (80064e0 <_printf_i+0x220>)
 8006444:	e7e1      	b.n	800640a <_printf_i+0x14a>
 8006446:	0648      	lsls	r0, r1, #25
 8006448:	d5e6      	bpl.n	8006418 <_printf_i+0x158>
 800644a:	b2ad      	uxth	r5, r5
 800644c:	e7e4      	b.n	8006418 <_printf_i+0x158>
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	680d      	ldr	r5, [r1, #0]
 8006452:	1d10      	adds	r0, r2, #4
 8006454:	6949      	ldr	r1, [r1, #20]
 8006456:	6018      	str	r0, [r3, #0]
 8006458:	6813      	ldr	r3, [r2, #0]
 800645a:	062e      	lsls	r6, r5, #24
 800645c:	d501      	bpl.n	8006462 <_printf_i+0x1a2>
 800645e:	6019      	str	r1, [r3, #0]
 8006460:	e002      	b.n	8006468 <_printf_i+0x1a8>
 8006462:	066d      	lsls	r5, r5, #25
 8006464:	d5fb      	bpl.n	800645e <_printf_i+0x19e>
 8006466:	8019      	strh	r1, [r3, #0]
 8006468:	2300      	movs	r3, #0
 800646a:	9e04      	ldr	r6, [sp, #16]
 800646c:	6123      	str	r3, [r4, #16]
 800646e:	e7bb      	b.n	80063e8 <_printf_i+0x128>
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	1d11      	adds	r1, r2, #4
 8006474:	6019      	str	r1, [r3, #0]
 8006476:	6816      	ldr	r6, [r2, #0]
 8006478:	2100      	movs	r1, #0
 800647a:	0030      	movs	r0, r6
 800647c:	6862      	ldr	r2, [r4, #4]
 800647e:	f000 facf 	bl	8006a20 <memchr>
 8006482:	2800      	cmp	r0, #0
 8006484:	d001      	beq.n	800648a <_printf_i+0x1ca>
 8006486:	1b80      	subs	r0, r0, r6
 8006488:	6060      	str	r0, [r4, #4]
 800648a:	6863      	ldr	r3, [r4, #4]
 800648c:	6123      	str	r3, [r4, #16]
 800648e:	2300      	movs	r3, #0
 8006490:	9a04      	ldr	r2, [sp, #16]
 8006492:	7013      	strb	r3, [r2, #0]
 8006494:	e7a8      	b.n	80063e8 <_printf_i+0x128>
 8006496:	6923      	ldr	r3, [r4, #16]
 8006498:	0032      	movs	r2, r6
 800649a:	9906      	ldr	r1, [sp, #24]
 800649c:	9805      	ldr	r0, [sp, #20]
 800649e:	9d07      	ldr	r5, [sp, #28]
 80064a0:	47a8      	blx	r5
 80064a2:	1c43      	adds	r3, r0, #1
 80064a4:	d0aa      	beq.n	80063fc <_printf_i+0x13c>
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	079b      	lsls	r3, r3, #30
 80064aa:	d415      	bmi.n	80064d8 <_printf_i+0x218>
 80064ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ae:	68e0      	ldr	r0, [r4, #12]
 80064b0:	4298      	cmp	r0, r3
 80064b2:	daa5      	bge.n	8006400 <_printf_i+0x140>
 80064b4:	0018      	movs	r0, r3
 80064b6:	e7a3      	b.n	8006400 <_printf_i+0x140>
 80064b8:	0022      	movs	r2, r4
 80064ba:	2301      	movs	r3, #1
 80064bc:	9906      	ldr	r1, [sp, #24]
 80064be:	9805      	ldr	r0, [sp, #20]
 80064c0:	9e07      	ldr	r6, [sp, #28]
 80064c2:	3219      	adds	r2, #25
 80064c4:	47b0      	blx	r6
 80064c6:	1c43      	adds	r3, r0, #1
 80064c8:	d098      	beq.n	80063fc <_printf_i+0x13c>
 80064ca:	3501      	adds	r5, #1
 80064cc:	68e3      	ldr	r3, [r4, #12]
 80064ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064d0:	1a9b      	subs	r3, r3, r2
 80064d2:	42ab      	cmp	r3, r5
 80064d4:	dcf0      	bgt.n	80064b8 <_printf_i+0x1f8>
 80064d6:	e7e9      	b.n	80064ac <_printf_i+0x1ec>
 80064d8:	2500      	movs	r5, #0
 80064da:	e7f7      	b.n	80064cc <_printf_i+0x20c>
 80064dc:	08007181 	.word	0x08007181
 80064e0:	08007192 	.word	0x08007192

080064e4 <_sbrk_r>:
 80064e4:	2300      	movs	r3, #0
 80064e6:	b570      	push	{r4, r5, r6, lr}
 80064e8:	4d06      	ldr	r5, [pc, #24]	; (8006504 <_sbrk_r+0x20>)
 80064ea:	0004      	movs	r4, r0
 80064ec:	0008      	movs	r0, r1
 80064ee:	602b      	str	r3, [r5, #0]
 80064f0:	f7fb fa00 	bl	80018f4 <_sbrk>
 80064f4:	1c43      	adds	r3, r0, #1
 80064f6:	d103      	bne.n	8006500 <_sbrk_r+0x1c>
 80064f8:	682b      	ldr	r3, [r5, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d000      	beq.n	8006500 <_sbrk_r+0x1c>
 80064fe:	6023      	str	r3, [r4, #0]
 8006500:	bd70      	pop	{r4, r5, r6, pc}
 8006502:	46c0      	nop			; (mov r8, r8)
 8006504:	20000288 	.word	0x20000288

08006508 <__sread>:
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	000c      	movs	r4, r1
 800650c:	250e      	movs	r5, #14
 800650e:	5f49      	ldrsh	r1, [r1, r5]
 8006510:	f000 faec 	bl	8006aec <_read_r>
 8006514:	2800      	cmp	r0, #0
 8006516:	db03      	blt.n	8006520 <__sread+0x18>
 8006518:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800651a:	181b      	adds	r3, r3, r0
 800651c:	6563      	str	r3, [r4, #84]	; 0x54
 800651e:	bd70      	pop	{r4, r5, r6, pc}
 8006520:	89a3      	ldrh	r3, [r4, #12]
 8006522:	4a02      	ldr	r2, [pc, #8]	; (800652c <__sread+0x24>)
 8006524:	4013      	ands	r3, r2
 8006526:	81a3      	strh	r3, [r4, #12]
 8006528:	e7f9      	b.n	800651e <__sread+0x16>
 800652a:	46c0      	nop			; (mov r8, r8)
 800652c:	ffffefff 	.word	0xffffefff

08006530 <__swrite>:
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006532:	001f      	movs	r7, r3
 8006534:	898b      	ldrh	r3, [r1, #12]
 8006536:	0005      	movs	r5, r0
 8006538:	000c      	movs	r4, r1
 800653a:	0016      	movs	r6, r2
 800653c:	05db      	lsls	r3, r3, #23
 800653e:	d505      	bpl.n	800654c <__swrite+0x1c>
 8006540:	230e      	movs	r3, #14
 8006542:	5ec9      	ldrsh	r1, [r1, r3]
 8006544:	2200      	movs	r2, #0
 8006546:	2302      	movs	r3, #2
 8006548:	f000 f9ea 	bl	8006920 <_lseek_r>
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	4a05      	ldr	r2, [pc, #20]	; (8006564 <__swrite+0x34>)
 8006550:	0028      	movs	r0, r5
 8006552:	4013      	ands	r3, r2
 8006554:	81a3      	strh	r3, [r4, #12]
 8006556:	0032      	movs	r2, r6
 8006558:	230e      	movs	r3, #14
 800655a:	5ee1      	ldrsh	r1, [r4, r3]
 800655c:	003b      	movs	r3, r7
 800655e:	f000 f875 	bl	800664c <_write_r>
 8006562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006564:	ffffefff 	.word	0xffffefff

08006568 <__sseek>:
 8006568:	b570      	push	{r4, r5, r6, lr}
 800656a:	000c      	movs	r4, r1
 800656c:	250e      	movs	r5, #14
 800656e:	5f49      	ldrsh	r1, [r1, r5]
 8006570:	f000 f9d6 	bl	8006920 <_lseek_r>
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	1c42      	adds	r2, r0, #1
 8006578:	d103      	bne.n	8006582 <__sseek+0x1a>
 800657a:	4a05      	ldr	r2, [pc, #20]	; (8006590 <__sseek+0x28>)
 800657c:	4013      	ands	r3, r2
 800657e:	81a3      	strh	r3, [r4, #12]
 8006580:	bd70      	pop	{r4, r5, r6, pc}
 8006582:	2280      	movs	r2, #128	; 0x80
 8006584:	0152      	lsls	r2, r2, #5
 8006586:	4313      	orrs	r3, r2
 8006588:	81a3      	strh	r3, [r4, #12]
 800658a:	6560      	str	r0, [r4, #84]	; 0x54
 800658c:	e7f8      	b.n	8006580 <__sseek+0x18>
 800658e:	46c0      	nop			; (mov r8, r8)
 8006590:	ffffefff 	.word	0xffffefff

08006594 <__sclose>:
 8006594:	b510      	push	{r4, lr}
 8006596:	230e      	movs	r3, #14
 8006598:	5ec9      	ldrsh	r1, [r1, r3]
 800659a:	f000 f8e3 	bl	8006764 <_close_r>
 800659e:	bd10      	pop	{r4, pc}

080065a0 <__swbuf_r>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	0005      	movs	r5, r0
 80065a4:	000e      	movs	r6, r1
 80065a6:	0014      	movs	r4, r2
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d004      	beq.n	80065b6 <__swbuf_r+0x16>
 80065ac:	6983      	ldr	r3, [r0, #24]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <__swbuf_r+0x16>
 80065b2:	f7ff fb77 	bl	8005ca4 <__sinit>
 80065b6:	4b22      	ldr	r3, [pc, #136]	; (8006640 <__swbuf_r+0xa0>)
 80065b8:	429c      	cmp	r4, r3
 80065ba:	d12e      	bne.n	800661a <__swbuf_r+0x7a>
 80065bc:	686c      	ldr	r4, [r5, #4]
 80065be:	69a3      	ldr	r3, [r4, #24]
 80065c0:	60a3      	str	r3, [r4, #8]
 80065c2:	89a3      	ldrh	r3, [r4, #12]
 80065c4:	071b      	lsls	r3, r3, #28
 80065c6:	d532      	bpl.n	800662e <__swbuf_r+0x8e>
 80065c8:	6923      	ldr	r3, [r4, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d02f      	beq.n	800662e <__swbuf_r+0x8e>
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	6922      	ldr	r2, [r4, #16]
 80065d2:	b2f7      	uxtb	r7, r6
 80065d4:	1a98      	subs	r0, r3, r2
 80065d6:	6963      	ldr	r3, [r4, #20]
 80065d8:	b2f6      	uxtb	r6, r6
 80065da:	4283      	cmp	r3, r0
 80065dc:	dc05      	bgt.n	80065ea <__swbuf_r+0x4a>
 80065de:	0021      	movs	r1, r4
 80065e0:	0028      	movs	r0, r5
 80065e2:	f000 f95d 	bl	80068a0 <_fflush_r>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d127      	bne.n	800663a <__swbuf_r+0x9a>
 80065ea:	68a3      	ldr	r3, [r4, #8]
 80065ec:	3001      	adds	r0, #1
 80065ee:	3b01      	subs	r3, #1
 80065f0:	60a3      	str	r3, [r4, #8]
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	6022      	str	r2, [r4, #0]
 80065f8:	701f      	strb	r7, [r3, #0]
 80065fa:	6963      	ldr	r3, [r4, #20]
 80065fc:	4283      	cmp	r3, r0
 80065fe:	d004      	beq.n	800660a <__swbuf_r+0x6a>
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	07db      	lsls	r3, r3, #31
 8006604:	d507      	bpl.n	8006616 <__swbuf_r+0x76>
 8006606:	2e0a      	cmp	r6, #10
 8006608:	d105      	bne.n	8006616 <__swbuf_r+0x76>
 800660a:	0021      	movs	r1, r4
 800660c:	0028      	movs	r0, r5
 800660e:	f000 f947 	bl	80068a0 <_fflush_r>
 8006612:	2800      	cmp	r0, #0
 8006614:	d111      	bne.n	800663a <__swbuf_r+0x9a>
 8006616:	0030      	movs	r0, r6
 8006618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800661a:	4b0a      	ldr	r3, [pc, #40]	; (8006644 <__swbuf_r+0xa4>)
 800661c:	429c      	cmp	r4, r3
 800661e:	d101      	bne.n	8006624 <__swbuf_r+0x84>
 8006620:	68ac      	ldr	r4, [r5, #8]
 8006622:	e7cc      	b.n	80065be <__swbuf_r+0x1e>
 8006624:	4b08      	ldr	r3, [pc, #32]	; (8006648 <__swbuf_r+0xa8>)
 8006626:	429c      	cmp	r4, r3
 8006628:	d1c9      	bne.n	80065be <__swbuf_r+0x1e>
 800662a:	68ec      	ldr	r4, [r5, #12]
 800662c:	e7c7      	b.n	80065be <__swbuf_r+0x1e>
 800662e:	0021      	movs	r1, r4
 8006630:	0028      	movs	r0, r5
 8006632:	f000 f81f 	bl	8006674 <__swsetup_r>
 8006636:	2800      	cmp	r0, #0
 8006638:	d0c9      	beq.n	80065ce <__swbuf_r+0x2e>
 800663a:	2601      	movs	r6, #1
 800663c:	4276      	negs	r6, r6
 800663e:	e7ea      	b.n	8006616 <__swbuf_r+0x76>
 8006640:	08007130 	.word	0x08007130
 8006644:	08007150 	.word	0x08007150
 8006648:	08007110 	.word	0x08007110

0800664c <_write_r>:
 800664c:	b570      	push	{r4, r5, r6, lr}
 800664e:	0004      	movs	r4, r0
 8006650:	0008      	movs	r0, r1
 8006652:	0011      	movs	r1, r2
 8006654:	001a      	movs	r2, r3
 8006656:	2300      	movs	r3, #0
 8006658:	4d05      	ldr	r5, [pc, #20]	; (8006670 <_write_r+0x24>)
 800665a:	602b      	str	r3, [r5, #0]
 800665c:	f7fb f901 	bl	8001862 <_write>
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d103      	bne.n	800666c <_write_r+0x20>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d000      	beq.n	800666c <_write_r+0x20>
 800666a:	6023      	str	r3, [r4, #0]
 800666c:	bd70      	pop	{r4, r5, r6, pc}
 800666e:	46c0      	nop			; (mov r8, r8)
 8006670:	20000288 	.word	0x20000288

08006674 <__swsetup_r>:
 8006674:	4b37      	ldr	r3, [pc, #220]	; (8006754 <__swsetup_r+0xe0>)
 8006676:	b570      	push	{r4, r5, r6, lr}
 8006678:	681d      	ldr	r5, [r3, #0]
 800667a:	0006      	movs	r6, r0
 800667c:	000c      	movs	r4, r1
 800667e:	2d00      	cmp	r5, #0
 8006680:	d005      	beq.n	800668e <__swsetup_r+0x1a>
 8006682:	69ab      	ldr	r3, [r5, #24]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d102      	bne.n	800668e <__swsetup_r+0x1a>
 8006688:	0028      	movs	r0, r5
 800668a:	f7ff fb0b 	bl	8005ca4 <__sinit>
 800668e:	4b32      	ldr	r3, [pc, #200]	; (8006758 <__swsetup_r+0xe4>)
 8006690:	429c      	cmp	r4, r3
 8006692:	d10f      	bne.n	80066b4 <__swsetup_r+0x40>
 8006694:	686c      	ldr	r4, [r5, #4]
 8006696:	230c      	movs	r3, #12
 8006698:	5ee2      	ldrsh	r2, [r4, r3]
 800669a:	b293      	uxth	r3, r2
 800669c:	0711      	lsls	r1, r2, #28
 800669e:	d42d      	bmi.n	80066fc <__swsetup_r+0x88>
 80066a0:	06d9      	lsls	r1, r3, #27
 80066a2:	d411      	bmi.n	80066c8 <__swsetup_r+0x54>
 80066a4:	2309      	movs	r3, #9
 80066a6:	2001      	movs	r0, #1
 80066a8:	6033      	str	r3, [r6, #0]
 80066aa:	3337      	adds	r3, #55	; 0x37
 80066ac:	4313      	orrs	r3, r2
 80066ae:	81a3      	strh	r3, [r4, #12]
 80066b0:	4240      	negs	r0, r0
 80066b2:	bd70      	pop	{r4, r5, r6, pc}
 80066b4:	4b29      	ldr	r3, [pc, #164]	; (800675c <__swsetup_r+0xe8>)
 80066b6:	429c      	cmp	r4, r3
 80066b8:	d101      	bne.n	80066be <__swsetup_r+0x4a>
 80066ba:	68ac      	ldr	r4, [r5, #8]
 80066bc:	e7eb      	b.n	8006696 <__swsetup_r+0x22>
 80066be:	4b28      	ldr	r3, [pc, #160]	; (8006760 <__swsetup_r+0xec>)
 80066c0:	429c      	cmp	r4, r3
 80066c2:	d1e8      	bne.n	8006696 <__swsetup_r+0x22>
 80066c4:	68ec      	ldr	r4, [r5, #12]
 80066c6:	e7e6      	b.n	8006696 <__swsetup_r+0x22>
 80066c8:	075b      	lsls	r3, r3, #29
 80066ca:	d513      	bpl.n	80066f4 <__swsetup_r+0x80>
 80066cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066ce:	2900      	cmp	r1, #0
 80066d0:	d008      	beq.n	80066e4 <__swsetup_r+0x70>
 80066d2:	0023      	movs	r3, r4
 80066d4:	3344      	adds	r3, #68	; 0x44
 80066d6:	4299      	cmp	r1, r3
 80066d8:	d002      	beq.n	80066e0 <__swsetup_r+0x6c>
 80066da:	0030      	movs	r0, r6
 80066dc:	f000 f9bc 	bl	8006a58 <_free_r>
 80066e0:	2300      	movs	r3, #0
 80066e2:	6363      	str	r3, [r4, #52]	; 0x34
 80066e4:	2224      	movs	r2, #36	; 0x24
 80066e6:	89a3      	ldrh	r3, [r4, #12]
 80066e8:	4393      	bics	r3, r2
 80066ea:	81a3      	strh	r3, [r4, #12]
 80066ec:	2300      	movs	r3, #0
 80066ee:	6063      	str	r3, [r4, #4]
 80066f0:	6923      	ldr	r3, [r4, #16]
 80066f2:	6023      	str	r3, [r4, #0]
 80066f4:	2308      	movs	r3, #8
 80066f6:	89a2      	ldrh	r2, [r4, #12]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	81a3      	strh	r3, [r4, #12]
 80066fc:	6923      	ldr	r3, [r4, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10b      	bne.n	800671a <__swsetup_r+0xa6>
 8006702:	21a0      	movs	r1, #160	; 0xa0
 8006704:	2280      	movs	r2, #128	; 0x80
 8006706:	89a3      	ldrh	r3, [r4, #12]
 8006708:	0089      	lsls	r1, r1, #2
 800670a:	0092      	lsls	r2, r2, #2
 800670c:	400b      	ands	r3, r1
 800670e:	4293      	cmp	r3, r2
 8006710:	d003      	beq.n	800671a <__swsetup_r+0xa6>
 8006712:	0021      	movs	r1, r4
 8006714:	0030      	movs	r0, r6
 8006716:	f000 f93f 	bl	8006998 <__smakebuf_r>
 800671a:	220c      	movs	r2, #12
 800671c:	5ea3      	ldrsh	r3, [r4, r2]
 800671e:	2001      	movs	r0, #1
 8006720:	001a      	movs	r2, r3
 8006722:	b299      	uxth	r1, r3
 8006724:	4002      	ands	r2, r0
 8006726:	4203      	tst	r3, r0
 8006728:	d00f      	beq.n	800674a <__swsetup_r+0xd6>
 800672a:	2200      	movs	r2, #0
 800672c:	60a2      	str	r2, [r4, #8]
 800672e:	6962      	ldr	r2, [r4, #20]
 8006730:	4252      	negs	r2, r2
 8006732:	61a2      	str	r2, [r4, #24]
 8006734:	2000      	movs	r0, #0
 8006736:	6922      	ldr	r2, [r4, #16]
 8006738:	4282      	cmp	r2, r0
 800673a:	d1ba      	bne.n	80066b2 <__swsetup_r+0x3e>
 800673c:	060a      	lsls	r2, r1, #24
 800673e:	d5b8      	bpl.n	80066b2 <__swsetup_r+0x3e>
 8006740:	2240      	movs	r2, #64	; 0x40
 8006742:	4313      	orrs	r3, r2
 8006744:	81a3      	strh	r3, [r4, #12]
 8006746:	3801      	subs	r0, #1
 8006748:	e7b3      	b.n	80066b2 <__swsetup_r+0x3e>
 800674a:	0788      	lsls	r0, r1, #30
 800674c:	d400      	bmi.n	8006750 <__swsetup_r+0xdc>
 800674e:	6962      	ldr	r2, [r4, #20]
 8006750:	60a2      	str	r2, [r4, #8]
 8006752:	e7ef      	b.n	8006734 <__swsetup_r+0xc0>
 8006754:	2000003c 	.word	0x2000003c
 8006758:	08007130 	.word	0x08007130
 800675c:	08007150 	.word	0x08007150
 8006760:	08007110 	.word	0x08007110

08006764 <_close_r>:
 8006764:	2300      	movs	r3, #0
 8006766:	b570      	push	{r4, r5, r6, lr}
 8006768:	4d06      	ldr	r5, [pc, #24]	; (8006784 <_close_r+0x20>)
 800676a:	0004      	movs	r4, r0
 800676c:	0008      	movs	r0, r1
 800676e:	602b      	str	r3, [r5, #0]
 8006770:	f7fb f893 	bl	800189a <_close>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d103      	bne.n	8006780 <_close_r+0x1c>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d000      	beq.n	8006780 <_close_r+0x1c>
 800677e:	6023      	str	r3, [r4, #0]
 8006780:	bd70      	pop	{r4, r5, r6, pc}
 8006782:	46c0      	nop			; (mov r8, r8)
 8006784:	20000288 	.word	0x20000288

08006788 <__sflush_r>:
 8006788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800678a:	898b      	ldrh	r3, [r1, #12]
 800678c:	0005      	movs	r5, r0
 800678e:	000c      	movs	r4, r1
 8006790:	071a      	lsls	r2, r3, #28
 8006792:	d45f      	bmi.n	8006854 <__sflush_r+0xcc>
 8006794:	684a      	ldr	r2, [r1, #4]
 8006796:	2a00      	cmp	r2, #0
 8006798:	dc04      	bgt.n	80067a4 <__sflush_r+0x1c>
 800679a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800679c:	2a00      	cmp	r2, #0
 800679e:	dc01      	bgt.n	80067a4 <__sflush_r+0x1c>
 80067a0:	2000      	movs	r0, #0
 80067a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80067a4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80067a6:	2f00      	cmp	r7, #0
 80067a8:	d0fa      	beq.n	80067a0 <__sflush_r+0x18>
 80067aa:	2200      	movs	r2, #0
 80067ac:	2180      	movs	r1, #128	; 0x80
 80067ae:	682e      	ldr	r6, [r5, #0]
 80067b0:	602a      	str	r2, [r5, #0]
 80067b2:	001a      	movs	r2, r3
 80067b4:	0149      	lsls	r1, r1, #5
 80067b6:	400a      	ands	r2, r1
 80067b8:	420b      	tst	r3, r1
 80067ba:	d034      	beq.n	8006826 <__sflush_r+0x9e>
 80067bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067be:	89a3      	ldrh	r3, [r4, #12]
 80067c0:	075b      	lsls	r3, r3, #29
 80067c2:	d506      	bpl.n	80067d2 <__sflush_r+0x4a>
 80067c4:	6863      	ldr	r3, [r4, #4]
 80067c6:	1ac0      	subs	r0, r0, r3
 80067c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <__sflush_r+0x4a>
 80067ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067d0:	1ac0      	subs	r0, r0, r3
 80067d2:	0002      	movs	r2, r0
 80067d4:	6a21      	ldr	r1, [r4, #32]
 80067d6:	2300      	movs	r3, #0
 80067d8:	0028      	movs	r0, r5
 80067da:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80067dc:	47b8      	blx	r7
 80067de:	89a1      	ldrh	r1, [r4, #12]
 80067e0:	1c43      	adds	r3, r0, #1
 80067e2:	d106      	bne.n	80067f2 <__sflush_r+0x6a>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	2b1d      	cmp	r3, #29
 80067e8:	d831      	bhi.n	800684e <__sflush_r+0xc6>
 80067ea:	4a2c      	ldr	r2, [pc, #176]	; (800689c <__sflush_r+0x114>)
 80067ec:	40da      	lsrs	r2, r3
 80067ee:	07d3      	lsls	r3, r2, #31
 80067f0:	d52d      	bpl.n	800684e <__sflush_r+0xc6>
 80067f2:	2300      	movs	r3, #0
 80067f4:	6063      	str	r3, [r4, #4]
 80067f6:	6923      	ldr	r3, [r4, #16]
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	04cb      	lsls	r3, r1, #19
 80067fc:	d505      	bpl.n	800680a <__sflush_r+0x82>
 80067fe:	1c43      	adds	r3, r0, #1
 8006800:	d102      	bne.n	8006808 <__sflush_r+0x80>
 8006802:	682b      	ldr	r3, [r5, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d100      	bne.n	800680a <__sflush_r+0x82>
 8006808:	6560      	str	r0, [r4, #84]	; 0x54
 800680a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800680c:	602e      	str	r6, [r5, #0]
 800680e:	2900      	cmp	r1, #0
 8006810:	d0c6      	beq.n	80067a0 <__sflush_r+0x18>
 8006812:	0023      	movs	r3, r4
 8006814:	3344      	adds	r3, #68	; 0x44
 8006816:	4299      	cmp	r1, r3
 8006818:	d002      	beq.n	8006820 <__sflush_r+0x98>
 800681a:	0028      	movs	r0, r5
 800681c:	f000 f91c 	bl	8006a58 <_free_r>
 8006820:	2000      	movs	r0, #0
 8006822:	6360      	str	r0, [r4, #52]	; 0x34
 8006824:	e7bd      	b.n	80067a2 <__sflush_r+0x1a>
 8006826:	2301      	movs	r3, #1
 8006828:	0028      	movs	r0, r5
 800682a:	6a21      	ldr	r1, [r4, #32]
 800682c:	47b8      	blx	r7
 800682e:	1c43      	adds	r3, r0, #1
 8006830:	d1c5      	bne.n	80067be <__sflush_r+0x36>
 8006832:	682b      	ldr	r3, [r5, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d0c2      	beq.n	80067be <__sflush_r+0x36>
 8006838:	2b1d      	cmp	r3, #29
 800683a:	d001      	beq.n	8006840 <__sflush_r+0xb8>
 800683c:	2b16      	cmp	r3, #22
 800683e:	d101      	bne.n	8006844 <__sflush_r+0xbc>
 8006840:	602e      	str	r6, [r5, #0]
 8006842:	e7ad      	b.n	80067a0 <__sflush_r+0x18>
 8006844:	2340      	movs	r3, #64	; 0x40
 8006846:	89a2      	ldrh	r2, [r4, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	81a3      	strh	r3, [r4, #12]
 800684c:	e7a9      	b.n	80067a2 <__sflush_r+0x1a>
 800684e:	2340      	movs	r3, #64	; 0x40
 8006850:	430b      	orrs	r3, r1
 8006852:	e7fa      	b.n	800684a <__sflush_r+0xc2>
 8006854:	690f      	ldr	r7, [r1, #16]
 8006856:	2f00      	cmp	r7, #0
 8006858:	d0a2      	beq.n	80067a0 <__sflush_r+0x18>
 800685a:	680a      	ldr	r2, [r1, #0]
 800685c:	600f      	str	r7, [r1, #0]
 800685e:	1bd2      	subs	r2, r2, r7
 8006860:	9201      	str	r2, [sp, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	079b      	lsls	r3, r3, #30
 8006866:	d100      	bne.n	800686a <__sflush_r+0xe2>
 8006868:	694a      	ldr	r2, [r1, #20]
 800686a:	60a2      	str	r2, [r4, #8]
 800686c:	9b01      	ldr	r3, [sp, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	dc00      	bgt.n	8006874 <__sflush_r+0xec>
 8006872:	e795      	b.n	80067a0 <__sflush_r+0x18>
 8006874:	003a      	movs	r2, r7
 8006876:	0028      	movs	r0, r5
 8006878:	9b01      	ldr	r3, [sp, #4]
 800687a:	6a21      	ldr	r1, [r4, #32]
 800687c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800687e:	47b0      	blx	r6
 8006880:	2800      	cmp	r0, #0
 8006882:	dc06      	bgt.n	8006892 <__sflush_r+0x10a>
 8006884:	2340      	movs	r3, #64	; 0x40
 8006886:	2001      	movs	r0, #1
 8006888:	89a2      	ldrh	r2, [r4, #12]
 800688a:	4240      	negs	r0, r0
 800688c:	4313      	orrs	r3, r2
 800688e:	81a3      	strh	r3, [r4, #12]
 8006890:	e787      	b.n	80067a2 <__sflush_r+0x1a>
 8006892:	9b01      	ldr	r3, [sp, #4]
 8006894:	183f      	adds	r7, r7, r0
 8006896:	1a1b      	subs	r3, r3, r0
 8006898:	9301      	str	r3, [sp, #4]
 800689a:	e7e7      	b.n	800686c <__sflush_r+0xe4>
 800689c:	20400001 	.word	0x20400001

080068a0 <_fflush_r>:
 80068a0:	690b      	ldr	r3, [r1, #16]
 80068a2:	b570      	push	{r4, r5, r6, lr}
 80068a4:	0005      	movs	r5, r0
 80068a6:	000c      	movs	r4, r1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d102      	bne.n	80068b2 <_fflush_r+0x12>
 80068ac:	2500      	movs	r5, #0
 80068ae:	0028      	movs	r0, r5
 80068b0:	bd70      	pop	{r4, r5, r6, pc}
 80068b2:	2800      	cmp	r0, #0
 80068b4:	d004      	beq.n	80068c0 <_fflush_r+0x20>
 80068b6:	6983      	ldr	r3, [r0, #24]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <_fflush_r+0x20>
 80068bc:	f7ff f9f2 	bl	8005ca4 <__sinit>
 80068c0:	4b14      	ldr	r3, [pc, #80]	; (8006914 <_fflush_r+0x74>)
 80068c2:	429c      	cmp	r4, r3
 80068c4:	d11b      	bne.n	80068fe <_fflush_r+0x5e>
 80068c6:	686c      	ldr	r4, [r5, #4]
 80068c8:	220c      	movs	r2, #12
 80068ca:	5ea3      	ldrsh	r3, [r4, r2]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0ed      	beq.n	80068ac <_fflush_r+0xc>
 80068d0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068d2:	07d2      	lsls	r2, r2, #31
 80068d4:	d404      	bmi.n	80068e0 <_fflush_r+0x40>
 80068d6:	059b      	lsls	r3, r3, #22
 80068d8:	d402      	bmi.n	80068e0 <_fflush_r+0x40>
 80068da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068dc:	f7ff fa83 	bl	8005de6 <__retarget_lock_acquire_recursive>
 80068e0:	0028      	movs	r0, r5
 80068e2:	0021      	movs	r1, r4
 80068e4:	f7ff ff50 	bl	8006788 <__sflush_r>
 80068e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068ea:	0005      	movs	r5, r0
 80068ec:	07db      	lsls	r3, r3, #31
 80068ee:	d4de      	bmi.n	80068ae <_fflush_r+0xe>
 80068f0:	89a3      	ldrh	r3, [r4, #12]
 80068f2:	059b      	lsls	r3, r3, #22
 80068f4:	d4db      	bmi.n	80068ae <_fflush_r+0xe>
 80068f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068f8:	f7ff fa76 	bl	8005de8 <__retarget_lock_release_recursive>
 80068fc:	e7d7      	b.n	80068ae <_fflush_r+0xe>
 80068fe:	4b06      	ldr	r3, [pc, #24]	; (8006918 <_fflush_r+0x78>)
 8006900:	429c      	cmp	r4, r3
 8006902:	d101      	bne.n	8006908 <_fflush_r+0x68>
 8006904:	68ac      	ldr	r4, [r5, #8]
 8006906:	e7df      	b.n	80068c8 <_fflush_r+0x28>
 8006908:	4b04      	ldr	r3, [pc, #16]	; (800691c <_fflush_r+0x7c>)
 800690a:	429c      	cmp	r4, r3
 800690c:	d1dc      	bne.n	80068c8 <_fflush_r+0x28>
 800690e:	68ec      	ldr	r4, [r5, #12]
 8006910:	e7da      	b.n	80068c8 <_fflush_r+0x28>
 8006912:	46c0      	nop			; (mov r8, r8)
 8006914:	08007130 	.word	0x08007130
 8006918:	08007150 	.word	0x08007150
 800691c:	08007110 	.word	0x08007110

08006920 <_lseek_r>:
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	0004      	movs	r4, r0
 8006924:	0008      	movs	r0, r1
 8006926:	0011      	movs	r1, r2
 8006928:	001a      	movs	r2, r3
 800692a:	2300      	movs	r3, #0
 800692c:	4d05      	ldr	r5, [pc, #20]	; (8006944 <_lseek_r+0x24>)
 800692e:	602b      	str	r3, [r5, #0]
 8006930:	f7fa ffd4 	bl	80018dc <_lseek>
 8006934:	1c43      	adds	r3, r0, #1
 8006936:	d103      	bne.n	8006940 <_lseek_r+0x20>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d000      	beq.n	8006940 <_lseek_r+0x20>
 800693e:	6023      	str	r3, [r4, #0]
 8006940:	bd70      	pop	{r4, r5, r6, pc}
 8006942:	46c0      	nop			; (mov r8, r8)
 8006944:	20000288 	.word	0x20000288

08006948 <__swhatbuf_r>:
 8006948:	b570      	push	{r4, r5, r6, lr}
 800694a:	000e      	movs	r6, r1
 800694c:	001d      	movs	r5, r3
 800694e:	230e      	movs	r3, #14
 8006950:	5ec9      	ldrsh	r1, [r1, r3]
 8006952:	0014      	movs	r4, r2
 8006954:	b096      	sub	sp, #88	; 0x58
 8006956:	2900      	cmp	r1, #0
 8006958:	da08      	bge.n	800696c <__swhatbuf_r+0x24>
 800695a:	220c      	movs	r2, #12
 800695c:	5eb3      	ldrsh	r3, [r6, r2]
 800695e:	2200      	movs	r2, #0
 8006960:	602a      	str	r2, [r5, #0]
 8006962:	061b      	lsls	r3, r3, #24
 8006964:	d411      	bmi.n	800698a <__swhatbuf_r+0x42>
 8006966:	2380      	movs	r3, #128	; 0x80
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	e00f      	b.n	800698c <__swhatbuf_r+0x44>
 800696c:	466a      	mov	r2, sp
 800696e:	f000 f8d1 	bl	8006b14 <_fstat_r>
 8006972:	2800      	cmp	r0, #0
 8006974:	dbf1      	blt.n	800695a <__swhatbuf_r+0x12>
 8006976:	23f0      	movs	r3, #240	; 0xf0
 8006978:	9901      	ldr	r1, [sp, #4]
 800697a:	021b      	lsls	r3, r3, #8
 800697c:	4019      	ands	r1, r3
 800697e:	4b05      	ldr	r3, [pc, #20]	; (8006994 <__swhatbuf_r+0x4c>)
 8006980:	18c9      	adds	r1, r1, r3
 8006982:	424b      	negs	r3, r1
 8006984:	4159      	adcs	r1, r3
 8006986:	6029      	str	r1, [r5, #0]
 8006988:	e7ed      	b.n	8006966 <__swhatbuf_r+0x1e>
 800698a:	2340      	movs	r3, #64	; 0x40
 800698c:	2000      	movs	r0, #0
 800698e:	6023      	str	r3, [r4, #0]
 8006990:	b016      	add	sp, #88	; 0x58
 8006992:	bd70      	pop	{r4, r5, r6, pc}
 8006994:	ffffe000 	.word	0xffffe000

08006998 <__smakebuf_r>:
 8006998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800699a:	2602      	movs	r6, #2
 800699c:	898b      	ldrh	r3, [r1, #12]
 800699e:	0005      	movs	r5, r0
 80069a0:	000c      	movs	r4, r1
 80069a2:	4233      	tst	r3, r6
 80069a4:	d006      	beq.n	80069b4 <__smakebuf_r+0x1c>
 80069a6:	0023      	movs	r3, r4
 80069a8:	3347      	adds	r3, #71	; 0x47
 80069aa:	6023      	str	r3, [r4, #0]
 80069ac:	6123      	str	r3, [r4, #16]
 80069ae:	2301      	movs	r3, #1
 80069b0:	6163      	str	r3, [r4, #20]
 80069b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80069b4:	466a      	mov	r2, sp
 80069b6:	ab01      	add	r3, sp, #4
 80069b8:	f7ff ffc6 	bl	8006948 <__swhatbuf_r>
 80069bc:	9900      	ldr	r1, [sp, #0]
 80069be:	0007      	movs	r7, r0
 80069c0:	0028      	movs	r0, r5
 80069c2:	f7ff fa35 	bl	8005e30 <_malloc_r>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d108      	bne.n	80069dc <__smakebuf_r+0x44>
 80069ca:	220c      	movs	r2, #12
 80069cc:	5ea3      	ldrsh	r3, [r4, r2]
 80069ce:	059a      	lsls	r2, r3, #22
 80069d0:	d4ef      	bmi.n	80069b2 <__smakebuf_r+0x1a>
 80069d2:	2203      	movs	r2, #3
 80069d4:	4393      	bics	r3, r2
 80069d6:	431e      	orrs	r6, r3
 80069d8:	81a6      	strh	r6, [r4, #12]
 80069da:	e7e4      	b.n	80069a6 <__smakebuf_r+0xe>
 80069dc:	4b0f      	ldr	r3, [pc, #60]	; (8006a1c <__smakebuf_r+0x84>)
 80069de:	62ab      	str	r3, [r5, #40]	; 0x28
 80069e0:	2380      	movs	r3, #128	; 0x80
 80069e2:	89a2      	ldrh	r2, [r4, #12]
 80069e4:	6020      	str	r0, [r4, #0]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	81a3      	strh	r3, [r4, #12]
 80069ea:	9b00      	ldr	r3, [sp, #0]
 80069ec:	6120      	str	r0, [r4, #16]
 80069ee:	6163      	str	r3, [r4, #20]
 80069f0:	9b01      	ldr	r3, [sp, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00d      	beq.n	8006a12 <__smakebuf_r+0x7a>
 80069f6:	0028      	movs	r0, r5
 80069f8:	230e      	movs	r3, #14
 80069fa:	5ee1      	ldrsh	r1, [r4, r3]
 80069fc:	f000 f89c 	bl	8006b38 <_isatty_r>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d006      	beq.n	8006a12 <__smakebuf_r+0x7a>
 8006a04:	2203      	movs	r2, #3
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	4393      	bics	r3, r2
 8006a0a:	001a      	movs	r2, r3
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	81a3      	strh	r3, [r4, #12]
 8006a12:	89a0      	ldrh	r0, [r4, #12]
 8006a14:	4307      	orrs	r7, r0
 8006a16:	81a7      	strh	r7, [r4, #12]
 8006a18:	e7cb      	b.n	80069b2 <__smakebuf_r+0x1a>
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	08005c29 	.word	0x08005c29

08006a20 <memchr>:
 8006a20:	b2c9      	uxtb	r1, r1
 8006a22:	1882      	adds	r2, r0, r2
 8006a24:	4290      	cmp	r0, r2
 8006a26:	d101      	bne.n	8006a2c <memchr+0xc>
 8006a28:	2000      	movs	r0, #0
 8006a2a:	4770      	bx	lr
 8006a2c:	7803      	ldrb	r3, [r0, #0]
 8006a2e:	428b      	cmp	r3, r1
 8006a30:	d0fb      	beq.n	8006a2a <memchr+0xa>
 8006a32:	3001      	adds	r0, #1
 8006a34:	e7f6      	b.n	8006a24 <memchr+0x4>
	...

08006a38 <__malloc_lock>:
 8006a38:	b510      	push	{r4, lr}
 8006a3a:	4802      	ldr	r0, [pc, #8]	; (8006a44 <__malloc_lock+0xc>)
 8006a3c:	f7ff f9d3 	bl	8005de6 <__retarget_lock_acquire_recursive>
 8006a40:	bd10      	pop	{r4, pc}
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	2000027c 	.word	0x2000027c

08006a48 <__malloc_unlock>:
 8006a48:	b510      	push	{r4, lr}
 8006a4a:	4802      	ldr	r0, [pc, #8]	; (8006a54 <__malloc_unlock+0xc>)
 8006a4c:	f7ff f9cc 	bl	8005de8 <__retarget_lock_release_recursive>
 8006a50:	bd10      	pop	{r4, pc}
 8006a52:	46c0      	nop			; (mov r8, r8)
 8006a54:	2000027c 	.word	0x2000027c

08006a58 <_free_r>:
 8006a58:	b570      	push	{r4, r5, r6, lr}
 8006a5a:	0005      	movs	r5, r0
 8006a5c:	2900      	cmp	r1, #0
 8006a5e:	d010      	beq.n	8006a82 <_free_r+0x2a>
 8006a60:	1f0c      	subs	r4, r1, #4
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	da00      	bge.n	8006a6a <_free_r+0x12>
 8006a68:	18e4      	adds	r4, r4, r3
 8006a6a:	0028      	movs	r0, r5
 8006a6c:	f7ff ffe4 	bl	8006a38 <__malloc_lock>
 8006a70:	4a1d      	ldr	r2, [pc, #116]	; (8006ae8 <_free_r+0x90>)
 8006a72:	6813      	ldr	r3, [r2, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d105      	bne.n	8006a84 <_free_r+0x2c>
 8006a78:	6063      	str	r3, [r4, #4]
 8006a7a:	6014      	str	r4, [r2, #0]
 8006a7c:	0028      	movs	r0, r5
 8006a7e:	f7ff ffe3 	bl	8006a48 <__malloc_unlock>
 8006a82:	bd70      	pop	{r4, r5, r6, pc}
 8006a84:	42a3      	cmp	r3, r4
 8006a86:	d908      	bls.n	8006a9a <_free_r+0x42>
 8006a88:	6821      	ldr	r1, [r4, #0]
 8006a8a:	1860      	adds	r0, r4, r1
 8006a8c:	4283      	cmp	r3, r0
 8006a8e:	d1f3      	bne.n	8006a78 <_free_r+0x20>
 8006a90:	6818      	ldr	r0, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	1841      	adds	r1, r0, r1
 8006a96:	6021      	str	r1, [r4, #0]
 8006a98:	e7ee      	b.n	8006a78 <_free_r+0x20>
 8006a9a:	001a      	movs	r2, r3
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <_free_r+0x4e>
 8006aa2:	42a3      	cmp	r3, r4
 8006aa4:	d9f9      	bls.n	8006a9a <_free_r+0x42>
 8006aa6:	6811      	ldr	r1, [r2, #0]
 8006aa8:	1850      	adds	r0, r2, r1
 8006aaa:	42a0      	cmp	r0, r4
 8006aac:	d10b      	bne.n	8006ac6 <_free_r+0x6e>
 8006aae:	6820      	ldr	r0, [r4, #0]
 8006ab0:	1809      	adds	r1, r1, r0
 8006ab2:	1850      	adds	r0, r2, r1
 8006ab4:	6011      	str	r1, [r2, #0]
 8006ab6:	4283      	cmp	r3, r0
 8006ab8:	d1e0      	bne.n	8006a7c <_free_r+0x24>
 8006aba:	6818      	ldr	r0, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	1841      	adds	r1, r0, r1
 8006ac0:	6011      	str	r1, [r2, #0]
 8006ac2:	6053      	str	r3, [r2, #4]
 8006ac4:	e7da      	b.n	8006a7c <_free_r+0x24>
 8006ac6:	42a0      	cmp	r0, r4
 8006ac8:	d902      	bls.n	8006ad0 <_free_r+0x78>
 8006aca:	230c      	movs	r3, #12
 8006acc:	602b      	str	r3, [r5, #0]
 8006ace:	e7d5      	b.n	8006a7c <_free_r+0x24>
 8006ad0:	6821      	ldr	r1, [r4, #0]
 8006ad2:	1860      	adds	r0, r4, r1
 8006ad4:	4283      	cmp	r3, r0
 8006ad6:	d103      	bne.n	8006ae0 <_free_r+0x88>
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	1841      	adds	r1, r0, r1
 8006ade:	6021      	str	r1, [r4, #0]
 8006ae0:	6063      	str	r3, [r4, #4]
 8006ae2:	6054      	str	r4, [r2, #4]
 8006ae4:	e7ca      	b.n	8006a7c <_free_r+0x24>
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	20000280 	.word	0x20000280

08006aec <_read_r>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	0004      	movs	r4, r0
 8006af0:	0008      	movs	r0, r1
 8006af2:	0011      	movs	r1, r2
 8006af4:	001a      	movs	r2, r3
 8006af6:	2300      	movs	r3, #0
 8006af8:	4d05      	ldr	r5, [pc, #20]	; (8006b10 <_read_r+0x24>)
 8006afa:	602b      	str	r3, [r5, #0]
 8006afc:	f7fa fe94 	bl	8001828 <_read>
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	d103      	bne.n	8006b0c <_read_r+0x20>
 8006b04:	682b      	ldr	r3, [r5, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d000      	beq.n	8006b0c <_read_r+0x20>
 8006b0a:	6023      	str	r3, [r4, #0]
 8006b0c:	bd70      	pop	{r4, r5, r6, pc}
 8006b0e:	46c0      	nop			; (mov r8, r8)
 8006b10:	20000288 	.word	0x20000288

08006b14 <_fstat_r>:
 8006b14:	2300      	movs	r3, #0
 8006b16:	b570      	push	{r4, r5, r6, lr}
 8006b18:	4d06      	ldr	r5, [pc, #24]	; (8006b34 <_fstat_r+0x20>)
 8006b1a:	0004      	movs	r4, r0
 8006b1c:	0008      	movs	r0, r1
 8006b1e:	0011      	movs	r1, r2
 8006b20:	602b      	str	r3, [r5, #0]
 8006b22:	f7fa fec4 	bl	80018ae <_fstat>
 8006b26:	1c43      	adds	r3, r0, #1
 8006b28:	d103      	bne.n	8006b32 <_fstat_r+0x1e>
 8006b2a:	682b      	ldr	r3, [r5, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d000      	beq.n	8006b32 <_fstat_r+0x1e>
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	bd70      	pop	{r4, r5, r6, pc}
 8006b34:	20000288 	.word	0x20000288

08006b38 <_isatty_r>:
 8006b38:	2300      	movs	r3, #0
 8006b3a:	b570      	push	{r4, r5, r6, lr}
 8006b3c:	4d06      	ldr	r5, [pc, #24]	; (8006b58 <_isatty_r+0x20>)
 8006b3e:	0004      	movs	r4, r0
 8006b40:	0008      	movs	r0, r1
 8006b42:	602b      	str	r3, [r5, #0]
 8006b44:	f7fa fec1 	bl	80018ca <_isatty>
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	d103      	bne.n	8006b54 <_isatty_r+0x1c>
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d000      	beq.n	8006b54 <_isatty_r+0x1c>
 8006b52:	6023      	str	r3, [r4, #0]
 8006b54:	bd70      	pop	{r4, r5, r6, pc}
 8006b56:	46c0      	nop			; (mov r8, r8)
 8006b58:	20000288 	.word	0x20000288

08006b5c <_init>:
 8006b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5e:	46c0      	nop			; (mov r8, r8)
 8006b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b62:	bc08      	pop	{r3}
 8006b64:	469e      	mov	lr, r3
 8006b66:	4770      	bx	lr

08006b68 <_fini>:
 8006b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6a:	46c0      	nop			; (mov r8, r8)
 8006b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b6e:	bc08      	pop	{r3}
 8006b70:	469e      	mov	lr, r3
 8006b72:	4770      	bx	lr
