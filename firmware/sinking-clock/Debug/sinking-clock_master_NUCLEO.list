
sinking-clock_master_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005840  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  080058fc  080058fc  000158fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b28  08005b28  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b28  08005b28  00015b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b30  08005b30  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b30  08005b30  00015b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b34  08005b34  00015b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08005b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000008c  08005bc4  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08005bc4  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010278  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002353  00000000  00000000  0003032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00032680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00033368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b6a  00000000  00000000  00033f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bd7  00000000  00000000  0004bad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009307a  00000000  00000000  0005c6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef723  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003594  00000000  00000000  000ef774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000008c 	.word	0x2000008c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080058e4 	.word	0x080058e4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000090 	.word	0x20000090
 8000100:	080058e4 	.word	0x080058e4

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	469b      	mov	fp, r3
 80002a6:	d433      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a8:	465a      	mov	r2, fp
 80002aa:	4653      	mov	r3, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83a      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e078      	b.n	80003b4 <__udivmoddi4+0x144>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e075      	b.n	80003ba <__udivmoddi4+0x14a>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e028      	b.n	800033a <__udivmoddi4+0xca>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	2320      	movs	r3, #32
 8000314:	1a9b      	subs	r3, r3, r2
 8000316:	4652      	mov	r2, sl
 8000318:	40da      	lsrs	r2, r3
 800031a:	4641      	mov	r1, r8
 800031c:	0013      	movs	r3, r2
 800031e:	464a      	mov	r2, r9
 8000320:	408a      	lsls	r2, r1
 8000322:	0017      	movs	r7, r2
 8000324:	4642      	mov	r2, r8
 8000326:	431f      	orrs	r7, r3
 8000328:	4653      	mov	r3, sl
 800032a:	4093      	lsls	r3, r2
 800032c:	001e      	movs	r6, r3
 800032e:	42af      	cmp	r7, r5
 8000330:	d9c4      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0d9      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000340:	07fb      	lsls	r3, r7, #31
 8000342:	0872      	lsrs	r2, r6, #1
 8000344:	431a      	orrs	r2, r3
 8000346:	4646      	mov	r6, r8
 8000348:	087b      	lsrs	r3, r7, #1
 800034a:	e00e      	b.n	800036a <__udivmoddi4+0xfa>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d101      	bne.n	8000354 <__udivmoddi4+0xe4>
 8000350:	42a2      	cmp	r2, r4
 8000352:	d80c      	bhi.n	800036e <__udivmoddi4+0xfe>
 8000354:	1aa4      	subs	r4, r4, r2
 8000356:	419d      	sbcs	r5, r3
 8000358:	2001      	movs	r0, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2100      	movs	r1, #0
 8000360:	3e01      	subs	r6, #1
 8000362:	1824      	adds	r4, r4, r0
 8000364:	414d      	adcs	r5, r1
 8000366:	2e00      	cmp	r6, #0
 8000368:	d006      	beq.n	8000378 <__udivmoddi4+0x108>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d9ee      	bls.n	800034c <__udivmoddi4+0xdc>
 800036e:	3e01      	subs	r6, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2e00      	cmp	r6, #0
 8000376:	d1f8      	bne.n	800036a <__udivmoddi4+0xfa>
 8000378:	9800      	ldr	r0, [sp, #0]
 800037a:	9901      	ldr	r1, [sp, #4]
 800037c:	465b      	mov	r3, fp
 800037e:	1900      	adds	r0, r0, r4
 8000380:	4169      	adcs	r1, r5
 8000382:	2b00      	cmp	r3, #0
 8000384:	db24      	blt.n	80003d0 <__udivmoddi4+0x160>
 8000386:	002b      	movs	r3, r5
 8000388:	465a      	mov	r2, fp
 800038a:	4644      	mov	r4, r8
 800038c:	40d3      	lsrs	r3, r2
 800038e:	002a      	movs	r2, r5
 8000390:	40e2      	lsrs	r2, r4
 8000392:	001c      	movs	r4, r3
 8000394:	465b      	mov	r3, fp
 8000396:	0015      	movs	r5, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	db2a      	blt.n	80003f2 <__udivmoddi4+0x182>
 800039c:	0026      	movs	r6, r4
 800039e:	409e      	lsls	r6, r3
 80003a0:	0033      	movs	r3, r6
 80003a2:	0026      	movs	r6, r4
 80003a4:	4647      	mov	r7, r8
 80003a6:	40be      	lsls	r6, r7
 80003a8:	0032      	movs	r2, r6
 80003aa:	1a80      	subs	r0, r0, r2
 80003ac:	4199      	sbcs	r1, r3
 80003ae:	9000      	str	r0, [sp, #0]
 80003b0:	9101      	str	r1, [sp, #4]
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b4:	42a3      	cmp	r3, r4
 80003b6:	d8bc      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80003b8:	e783      	b.n	80002c2 <__udivmoddi4+0x52>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	2100      	movs	r1, #0
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	2200      	movs	r2, #0
 80003c4:	9100      	str	r1, [sp, #0]
 80003c6:	9201      	str	r2, [sp, #4]
 80003c8:	2201      	movs	r2, #1
 80003ca:	40da      	lsrs	r2, r3
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	e786      	b.n	80002de <__udivmoddi4+0x6e>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	4646      	mov	r6, r8
 80003da:	409a      	lsls	r2, r3
 80003dc:	0023      	movs	r3, r4
 80003de:	40f3      	lsrs	r3, r6
 80003e0:	4644      	mov	r4, r8
 80003e2:	4313      	orrs	r3, r2
 80003e4:	002a      	movs	r2, r5
 80003e6:	40e2      	lsrs	r2, r4
 80003e8:	001c      	movs	r4, r3
 80003ea:	465b      	mov	r3, fp
 80003ec:	0015      	movs	r5, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dad4      	bge.n	800039c <__udivmoddi4+0x12c>
 80003f2:	4642      	mov	r2, r8
 80003f4:	002f      	movs	r7, r5
 80003f6:	2320      	movs	r3, #32
 80003f8:	0026      	movs	r6, r4
 80003fa:	4097      	lsls	r7, r2
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	40de      	lsrs	r6, r3
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7cd      	b.n	80003a2 <__udivmoddi4+0x132>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000464:	2301      	movs	r3, #1
 8000466:	425b      	negs	r3, r3
 8000468:	1d39      	adds	r1, r7, #4
 800046a:	4804      	ldr	r0, [pc, #16]	; (800047c <__io_putchar+0x20>)
 800046c:	2201      	movs	r2, #1
 800046e:	f003 fd51 	bl	8003f14 <HAL_UART_Transmit>
  return ch;
 8000472:	687b      	ldr	r3, [r7, #4]
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000128 	.word	0x20000128

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000484:	f000 fce4 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000488:	f000 f80b 	bl	80004a2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f000 f988 	bl	80007a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000490:	f000 f952 	bl	8000738 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000494:	f000 f852 	bl	800053c <MX_I2C1_Init>
  MX_RTC_Init();
 8000498:	f000 f890 	bl	80005bc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  sevSeg_I2C1_Init();
 800049c:	f000 fa2c 	bl	80008f8 <sevSeg_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <main+0x20>

080004a2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a2:	b590      	push	{r4, r7, lr}
 80004a4:	b093      	sub	sp, #76	; 0x4c
 80004a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a8:	2410      	movs	r4, #16
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	0018      	movs	r0, r3
 80004ae:	2338      	movs	r3, #56	; 0x38
 80004b0:	001a      	movs	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	f004 fa36 	bl	8004924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b8:	003b      	movs	r3, r7
 80004ba:	0018      	movs	r0, r3
 80004bc:	2310      	movs	r3, #16
 80004be:	001a      	movs	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	f004 fa2f 	bl	8004924 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004c6:	2380      	movs	r3, #128	; 0x80
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 fa6a 	bl	80029a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	220a      	movs	r2, #10
 80004d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2280      	movs	r2, #128	; 0x80
 80004da:	0052      	lsls	r2, r2, #1
 80004dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004de:	0021      	movs	r1, r4
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2240      	movs	r2, #64	; 0x40
 80004ea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2201      	movs	r2, #1
 80004f0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2200      	movs	r2, #0
 80004f6:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	0018      	movs	r0, r3
 80004fc:	f002 fa9e 	bl	8002a3c <HAL_RCC_OscConfig>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000504:	f000 fa8c 	bl	8000a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000508:	003b      	movs	r3, r7
 800050a:	2207      	movs	r2, #7
 800050c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800050e:	003b      	movs	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000514:	003b      	movs	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800051a:	003b      	movs	r3, r7
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000520:	003b      	movs	r3, r7
 8000522:	2100      	movs	r1, #0
 8000524:	0018      	movs	r0, r3
 8000526:	f002 fda3 	bl	8003070 <HAL_RCC_ClockConfig>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800052e:	f000 fa77 	bl	8000a20 <Error_Handler>
  }
}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b013      	add	sp, #76	; 0x4c
 8000538:	bd90      	pop	{r4, r7, pc}
	...

0800053c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000542:	4a1c      	ldr	r2, [pc, #112]	; (80005b4 <MX_I2C1_Init+0x78>)
 8000544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <MX_I2C1_Init+0x7c>)
 800054a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <MX_I2C1_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000554:	2201      	movs	r2, #1
 8000556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MX_I2C1_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_I2C1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000578:	0018      	movs	r0, r3
 800057a:	f000 ffe9 	bl	8001550 <HAL_I2C_Init>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000582:	f000 fa4d 	bl	8000a20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000588:	2100      	movs	r1, #0
 800058a:	0018      	movs	r0, r3
 800058c:	f002 f972 	bl	8002874 <HAL_I2CEx_ConfigAnalogFilter>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000594:	f000 fa44 	bl	8000a20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <MX_I2C1_Init+0x74>)
 800059a:	2100      	movs	r1, #0
 800059c:	0018      	movs	r0, r3
 800059e:	f002 f9b5 	bl	800290c <HAL_I2CEx_ConfigDigitalFilter>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005a6:	f000 fa3b 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200000a8 	.word	0x200000a8
 80005b4:	40005400 	.word	0x40005400
 80005b8:	0010061a 	.word	0x0010061a

080005bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b090      	sub	sp, #64	; 0x40
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005c2:	232c      	movs	r3, #44	; 0x2c
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	0018      	movs	r0, r3
 80005c8:	2314      	movs	r3, #20
 80005ca:	001a      	movs	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	f004 f9a9 	bl	8004924 <memset>
  RTC_DateTypeDef sDate = {0};
 80005d2:	2328      	movs	r3, #40	; 0x28
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80005da:	003b      	movs	r3, r7
 80005dc:	0018      	movs	r0, r3
 80005de:	2328      	movs	r3, #40	; 0x28
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f004 f99e 	bl	8004924 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005e8:	4b4f      	ldr	r3, [pc, #316]	; (8000728 <MX_RTC_Init+0x16c>)
 80005ea:	4a50      	ldr	r2, [pc, #320]	; (800072c <MX_RTC_Init+0x170>)
 80005ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80005ee:	4b4e      	ldr	r3, [pc, #312]	; (8000728 <MX_RTC_Init+0x16c>)
 80005f0:	2240      	movs	r2, #64	; 0x40
 80005f2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80005f4:	4b4c      	ldr	r3, [pc, #304]	; (8000728 <MX_RTC_Init+0x16c>)
 80005f6:	227f      	movs	r2, #127	; 0x7f
 80005f8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80005fa:	4b4b      	ldr	r3, [pc, #300]	; (8000728 <MX_RTC_Init+0x16c>)
 80005fc:	22ff      	movs	r2, #255	; 0xff
 80005fe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000600:	4b49      	ldr	r3, [pc, #292]	; (8000728 <MX_RTC_Init+0x16c>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000606:	4b48      	ldr	r3, [pc, #288]	; (8000728 <MX_RTC_Init+0x16c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800060c:	4b46      	ldr	r3, [pc, #280]	; (8000728 <MX_RTC_Init+0x16c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000612:	4b45      	ldr	r3, [pc, #276]	; (8000728 <MX_RTC_Init+0x16c>)
 8000614:	2280      	movs	r2, #128	; 0x80
 8000616:	05d2      	lsls	r2, r2, #23
 8000618:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800061a:	4b43      	ldr	r3, [pc, #268]	; (8000728 <MX_RTC_Init+0x16c>)
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000620:	4b41      	ldr	r3, [pc, #260]	; (8000728 <MX_RTC_Init+0x16c>)
 8000622:	0018      	movs	r0, r3
 8000624:	f003 f848 	bl	80036b8 <HAL_RTC_Init>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 800062c:	f000 f9f8 	bl	8000a20 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000630:	212c      	movs	r1, #44	; 0x2c
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800065c:	1879      	adds	r1, r7, r1
 800065e:	4b32      	ldr	r3, [pc, #200]	; (8000728 <MX_RTC_Init+0x16c>)
 8000660:	2201      	movs	r2, #1
 8000662:	0018      	movs	r0, r3
 8000664:	f003 f8ca 	bl	80037fc <HAL_RTC_SetTime>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 800066c:	f000 f9d8 	bl	8000a20 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000670:	2128      	movs	r1, #40	; 0x28
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2201      	movs	r2, #1
 8000676:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2201      	movs	r2, #1
 800067c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2201      	movs	r2, #1
 8000682:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2200      	movs	r2, #0
 8000688:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800068a:	1879      	adds	r1, r7, r1
 800068c:	4b26      	ldr	r3, [pc, #152]	; (8000728 <MX_RTC_Init+0x16c>)
 800068e:	2201      	movs	r2, #1
 8000690:	0018      	movs	r0, r3
 8000692:	f003 f95b 	bl	800394c <HAL_RTC_SetDate>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 800069a:	f000 f9c1 	bl	8000a20 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 800069e:	003b      	movs	r3, r7
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80006a4:	003b      	movs	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80006aa:	003b      	movs	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80006b0:	003b      	movs	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80006b6:	003b      	movs	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006bc:	003b      	movs	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006c2:	003b      	movs	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80006c8:	003b      	movs	r3, r7
 80006ca:	4a19      	ldr	r2, [pc, #100]	; (8000730 <MX_RTC_Init+0x174>)
 80006cc:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80006ce:	003b      	movs	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80006d4:	003b      	movs	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80006da:	003b      	movs	r3, r7
 80006dc:	2220      	movs	r2, #32
 80006de:	2101      	movs	r1, #1
 80006e0:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80006e2:	003b      	movs	r3, r7
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0052      	lsls	r2, r2, #1
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80006ea:	0039      	movs	r1, r7
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_RTC_Init+0x16c>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	0018      	movs	r0, r3
 80006f2:	f003 f9bd 	bl	8003a70 <HAL_RTC_SetAlarm>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <MX_RTC_Init+0x142>
  {
    Error_Handler();
 80006fa:	f000 f991 	bl	8000a20 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 80006fe:	003b      	movs	r3, r7
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <MX_RTC_Init+0x178>)
 8000702:	615a      	str	r2, [r3, #20]
  sAlarm.Alarm = RTC_ALARM_B;
 8000704:	003b      	movs	r3, r7
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	0092      	lsls	r2, r2, #2
 800070a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800070c:	0039      	movs	r1, r7
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_RTC_Init+0x16c>)
 8000710:	2201      	movs	r2, #1
 8000712:	0018      	movs	r0, r3
 8000714:	f003 f9ac 	bl	8003a70 <HAL_RTC_SetAlarm>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <MX_RTC_Init+0x164>
  {
    Error_Handler();
 800071c:	f000 f980 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b010      	add	sp, #64	; 0x40
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000fc 	.word	0x200000fc
 800072c:	40002800 	.word	0x40002800
 8000730:	80800080 	.word	0x80800080
 8000734:	80808080 	.word	0x80808080

08000738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_USART2_UART_Init+0x60>)
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <MX_USART2_UART_Init+0x64>)
 8000740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_USART2_UART_Init+0x60>)
 8000744:	22e1      	movs	r2, #225	; 0xe1
 8000746:	0252      	lsls	r2, r2, #9
 8000748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_USART2_UART_Init+0x60>)
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	0552      	lsls	r2, r2, #21
 8000750:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_USART2_UART_Init+0x60>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_USART2_UART_Init+0x60>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_USART2_UART_Init+0x60>)
 8000760:	220c      	movs	r2, #12
 8000762:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_USART2_UART_Init+0x60>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_USART2_UART_Init+0x60>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_USART2_UART_Init+0x60>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_USART2_UART_Init+0x60>)
 8000778:	2200      	movs	r2, #0
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_USART2_UART_Init+0x60>)
 800077e:	2200      	movs	r2, #0
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <MX_USART2_UART_Init+0x60>)
 8000784:	0018      	movs	r0, r3
 8000786:	f003 fb6f 	bl	8003e68 <HAL_UART_Init>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800078e:	f000 f947 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000128 	.word	0x20000128
 800079c:	40004400 	.word	0x40004400

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b08b      	sub	sp, #44	; 0x2c
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	2414      	movs	r4, #20
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	0018      	movs	r0, r3
 80007ac:	2314      	movs	r3, #20
 80007ae:	001a      	movs	r2, r3
 80007b0:	2100      	movs	r1, #0
 80007b2:	f004 f8b7 	bl	8004924 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b4b      	ldr	r3, [pc, #300]	; (80008e4 <MX_GPIO_Init+0x144>)
 80007b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ba:	4b4a      	ldr	r3, [pc, #296]	; (80008e4 <MX_GPIO_Init+0x144>)
 80007bc:	2102      	movs	r1, #2
 80007be:	430a      	orrs	r2, r1
 80007c0:	635a      	str	r2, [r3, #52]	; 0x34
 80007c2:	4b48      	ldr	r3, [pc, #288]	; (80008e4 <MX_GPIO_Init+0x144>)
 80007c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007c6:	2202      	movs	r2, #2
 80007c8:	4013      	ands	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b45      	ldr	r3, [pc, #276]	; (80008e4 <MX_GPIO_Init+0x144>)
 80007d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007d2:	4b44      	ldr	r3, [pc, #272]	; (80008e4 <MX_GPIO_Init+0x144>)
 80007d4:	2104      	movs	r1, #4
 80007d6:	430a      	orrs	r2, r1
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
 80007da:	4b42      	ldr	r3, [pc, #264]	; (80008e4 <MX_GPIO_Init+0x144>)
 80007dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007de:	2204      	movs	r2, #4
 80007e0:	4013      	ands	r3, r2
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e6:	4b3f      	ldr	r3, [pc, #252]	; (80008e4 <MX_GPIO_Init+0x144>)
 80007e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ea:	4b3e      	ldr	r3, [pc, #248]	; (80008e4 <MX_GPIO_Init+0x144>)
 80007ec:	2120      	movs	r1, #32
 80007ee:	430a      	orrs	r2, r1
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
 80007f2:	4b3c      	ldr	r3, [pc, #240]	; (80008e4 <MX_GPIO_Init+0x144>)
 80007f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007f6:	2220      	movs	r2, #32
 80007f8:	4013      	ands	r3, r2
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b39      	ldr	r3, [pc, #228]	; (80008e4 <MX_GPIO_Init+0x144>)
 8000800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000802:	4b38      	ldr	r3, [pc, #224]	; (80008e4 <MX_GPIO_Init+0x144>)
 8000804:	2101      	movs	r1, #1
 8000806:	430a      	orrs	r2, r1
 8000808:	635a      	str	r2, [r3, #52]	; 0x34
 800080a:	4b36      	ldr	r3, [pc, #216]	; (80008e4 <MX_GPIO_Init+0x144>)
 800080c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800080e:	2201      	movs	r2, #1
 8000810:	4013      	ands	r3, r2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Output_Pin|PM_LED_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);
 8000816:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <MX_GPIO_Init+0x148>)
 8000818:	2200      	movs	r2, #0
 800081a:	21c2      	movs	r1, #194	; 0xc2
 800081c:	0018      	movs	r0, r3
 800081e:	f000 fe79 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000822:	4b32      	ldr	r3, [pc, #200]	; (80008ec <MX_GPIO_Init+0x14c>)
 8000824:	2200      	movs	r2, #0
 8000826:	2140      	movs	r1, #64	; 0x40
 8000828:	0018      	movs	r0, r3
 800082a:	f000 fe73 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2204      	movs	r2, #4
 8000832:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2288      	movs	r2, #136	; 0x88
 8000838:	0352      	lsls	r2, r2, #13
 800083a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000842:	193b      	adds	r3, r7, r4
 8000844:	4a2a      	ldr	r2, [pc, #168]	; (80008f0 <MX_GPIO_Init+0x150>)
 8000846:	0019      	movs	r1, r3
 8000848:	0010      	movs	r0, r2
 800084a:	f000 fcff 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_Button_Pin Alarm_Enable_Button_Pin Alarm_Set_Button_Pin Hour_Set_Button_Pin
                           Minute_Set_Button_Pin */
  GPIO_InitStruct.Pin = Display_Button_Pin|Alarm_Enable_Button_Pin|Alarm_Set_Button_Pin|Hour_Set_Button_Pin
 800084e:	193b      	adds	r3, r7, r4
 8000850:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <MX_GPIO_Init+0x154>)
 8000852:	601a      	str	r2, [r3, #0]
                          |Minute_Set_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2284      	movs	r2, #132	; 0x84
 8000858:	0392      	lsls	r2, r2, #14
 800085a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800085c:	193b      	adds	r3, r7, r4
 800085e:	2201      	movs	r2, #1
 8000860:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	193a      	adds	r2, r7, r4
 8000864:	23a0      	movs	r3, #160	; 0xa0
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	0011      	movs	r1, r2
 800086a:	0018      	movs	r0, r3
 800086c:	f000 fcee 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Output_Pin PM_LED_Pin Alarm_LED_Pin */
  GPIO_InitStruct.Pin = Buzzer_Output_Pin|PM_LED_Pin|Alarm_LED_Pin;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	22c2      	movs	r2, #194	; 0xc2
 8000874:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	193b      	adds	r3, r7, r4
 8000878:	2201      	movs	r2, #1
 800087a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	193b      	adds	r3, r7, r4
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	193b      	adds	r3, r7, r4
 800088a:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <MX_GPIO_Init+0x148>)
 800088c:	0019      	movs	r1, r3
 800088e:	0010      	movs	r0, r2
 8000890:	f000 fcdc 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2240      	movs	r2, #64	; 0x40
 8000898:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2201      	movs	r2, #1
 800089e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <MX_GPIO_Init+0x14c>)
 80008b0:	0019      	movs	r1, r3
 80008b2:	0010      	movs	r0, r2
 80008b4:	f000 fcca 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : Snooze_Button_Pin */
  GPIO_InitStruct.Pin = Snooze_Button_Pin;
 80008b8:	0021      	movs	r1, r4
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	0112      	lsls	r2, r2, #4
 80008c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2201      	movs	r2, #1
 80008cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Snooze_Button_GPIO_Port, &GPIO_InitStruct);
 80008ce:	187a      	adds	r2, r7, r1
 80008d0:	23a0      	movs	r3, #160	; 0xa0
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	0011      	movs	r1, r2
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 fcb8 	bl	800124c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	b00b      	add	sp, #44	; 0x2c
 80008e2:	bd90      	pop	{r4, r7, pc}
 80008e4:	40021000 	.word	0x40021000
 80008e8:	50000400 	.word	0x50000400
 80008ec:	50000800 	.word	0x50000800
 80008f0:	50001400 	.word	0x50001400
 80008f4:	00001033 	.word	0x00001033

080008f8 <sevSeg_I2C1_Init>:

/* USER CODE BEGIN 4 */

void sevSeg_I2C1_Init(void) {
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af02      	add	r7, sp, #8
	 */

	HAL_StatusTypeDef HalRet;

	//Set display to decode hex data inputs
	HalRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_decodeBuffer, 2, HAL_MAX_DELAY);
 80008fe:	4b3a      	ldr	r3, [pc, #232]	; (80009e8 <sevSeg_I2C1_Init+0xf0>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b299      	uxth	r1, r3
 8000904:	1dfc      	adds	r4, r7, #7
 8000906:	4a39      	ldr	r2, [pc, #228]	; (80009ec <sevSeg_I2C1_Init+0xf4>)
 8000908:	4839      	ldr	r0, [pc, #228]	; (80009f0 <sevSeg_I2C1_Init+0xf8>)
 800090a:	2301      	movs	r3, #1
 800090c:	425b      	negs	r3, r3
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	2302      	movs	r3, #2
 8000912:	f000 feb3 	bl	800167c <HAL_I2C_Master_Transmit>
 8000916:	0003      	movs	r3, r0
 8000918:	7023      	strb	r3, [r4, #0]

	if(HalRet != HAL_OK) {		//check HAL
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d004      	beq.n	800092c <sevSeg_I2C1_Init+0x34>
		printf("HAL Error - TX decode mode\n\r");
 8000922:	4b34      	ldr	r3, [pc, #208]	; (80009f4 <sevSeg_I2C1_Init+0xfc>)
 8000924:	0018      	movs	r0, r3
 8000926:	f004 f805 	bl	8004934 <iprintf>
 800092a:	e003      	b.n	8000934 <sevSeg_I2C1_Init+0x3c>
	} else{
		printf("Display set to decode mode\n\r");
 800092c:	4b32      	ldr	r3, [pc, #200]	; (80009f8 <sevSeg_I2C1_Init+0x100>)
 800092e:	0018      	movs	r0, r3
 8000930:	f004 f800 	bl	8004934 <iprintf>
	}

	//Disable shutdown mode
	HalRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_SD_ONBuff, 2, HAL_MAX_DELAY);
 8000934:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <sevSeg_I2C1_Init+0xf0>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b299      	uxth	r1, r3
 800093a:	1dfc      	adds	r4, r7, #7
 800093c:	4a2f      	ldr	r2, [pc, #188]	; (80009fc <sevSeg_I2C1_Init+0x104>)
 800093e:	482c      	ldr	r0, [pc, #176]	; (80009f0 <sevSeg_I2C1_Init+0xf8>)
 8000940:	2301      	movs	r3, #1
 8000942:	425b      	negs	r3, r3
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2302      	movs	r3, #2
 8000948:	f000 fe98 	bl	800167c <HAL_I2C_Master_Transmit>
 800094c:	0003      	movs	r3, r0
 800094e:	7023      	strb	r3, [r4, #0]

	if(HalRet != HAL_OK) {		//check HAL
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d004      	beq.n	8000962 <sevSeg_I2C1_Init+0x6a>
		printf("HAL Error - TX disable shutdown mode\n\r");
 8000958:	4b29      	ldr	r3, [pc, #164]	; (8000a00 <sevSeg_I2C1_Init+0x108>)
 800095a:	0018      	movs	r0, r3
 800095c:	f003 ffea 	bl	8004934 <iprintf>
 8000960:	e003      	b.n	800096a <sevSeg_I2C1_Init+0x72>
	} else {
		printf("Display shutdown mode disabled\n\r");
 8000962:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <sevSeg_I2C1_Init+0x10c>)
 8000964:	0018      	movs	r0, r3
 8000966:	f003 ffe5 	bl	8004934 <iprintf>
	}

	//Set to test mode
	HalRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_testONBuff, 2, HAL_MAX_DELAY);
 800096a:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <sevSeg_I2C1_Init+0xf0>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	b299      	uxth	r1, r3
 8000970:	1dfc      	adds	r4, r7, #7
 8000972:	4a25      	ldr	r2, [pc, #148]	; (8000a08 <sevSeg_I2C1_Init+0x110>)
 8000974:	481e      	ldr	r0, [pc, #120]	; (80009f0 <sevSeg_I2C1_Init+0xf8>)
 8000976:	2301      	movs	r3, #1
 8000978:	425b      	negs	r3, r3
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	2302      	movs	r3, #2
 800097e:	f000 fe7d 	bl	800167c <HAL_I2C_Master_Transmit>
 8000982:	0003      	movs	r3, r0
 8000984:	7023      	strb	r3, [r4, #0]

	if(HalRet != HAL_OK) {		//check HAL
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d004      	beq.n	8000998 <sevSeg_I2C1_Init+0xa0>
		printf("HAL Error - TX test mode ON data\n\r");
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <sevSeg_I2C1_Init+0x114>)
 8000990:	0018      	movs	r0, r3
 8000992:	f003 ffcf 	bl	8004934 <iprintf>
 8000996:	e003      	b.n	80009a0 <sevSeg_I2C1_Init+0xa8>
	} else {
		printf("Test mode enabled - all LEDs on\n\r");
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <sevSeg_I2C1_Init+0x118>)
 800099a:	0018      	movs	r0, r3
 800099c:	f003 ffca 	bl	8004934 <iprintf>
//		printf("HAL Error - TX intensity level data\n\r");
//	} else {
//		printf("Intensity Set\n\r");
//	}

	HAL_Delay(500);
 80009a0:	23fa      	movs	r3, #250	; 0xfa
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 fad9 	bl	8000f5c <HAL_Delay>

	//Set to test mode
	HalRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_testOFFBuff, 2, HAL_MAX_DELAY);
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <sevSeg_I2C1_Init+0xf0>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b299      	uxth	r1, r3
 80009b0:	1dfc      	adds	r4, r7, #7
 80009b2:	4a18      	ldr	r2, [pc, #96]	; (8000a14 <sevSeg_I2C1_Init+0x11c>)
 80009b4:	480e      	ldr	r0, [pc, #56]	; (80009f0 <sevSeg_I2C1_Init+0xf8>)
 80009b6:	2301      	movs	r3, #1
 80009b8:	425b      	negs	r3, r3
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2302      	movs	r3, #2
 80009be:	f000 fe5d 	bl	800167c <HAL_I2C_Master_Transmit>
 80009c2:	0003      	movs	r3, r0
 80009c4:	7023      	strb	r3, [r4, #0]

	if(HalRet != HAL_OK) {		//check HAL
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d004      	beq.n	80009d8 <sevSeg_I2C1_Init+0xe0>
		printf("HAL Error - TX test mode OFF data\n\r");
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <sevSeg_I2C1_Init+0x120>)
 80009d0:	0018      	movs	r0, r3
 80009d2:	f003 ffaf 	bl	8004934 <iprintf>
	} else {
		printf("Test mode disabled - all LEDs off\n\r");
	}

	return;
 80009d6:	e004      	b.n	80009e2 <sevSeg_I2C1_Init+0xea>
		printf("Test mode disabled - all LEDs off\n\r");
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <sevSeg_I2C1_Init+0x124>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f003 ffaa 	bl	8004934 <iprintf>
	return;
 80009e0:	46c0      	nop			; (mov r8, r8)

}
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b003      	add	sp, #12
 80009e6:	bd90      	pop	{r4, r7, pc}
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000004 	.word	0x20000004
 80009f0:	200000a8 	.word	0x200000a8
 80009f4:	080058fc 	.word	0x080058fc
 80009f8:	0800591c 	.word	0x0800591c
 80009fc:	20000008 	.word	0x20000008
 8000a00:	0800593c 	.word	0x0800593c
 8000a04:	08005964 	.word	0x08005964
 8000a08:	20000018 	.word	0x20000018
 8000a0c:	08005988 	.word	0x08005988
 8000a10:	080059ac 	.word	0x080059ac
 8000a14:	20000014 	.word	0x20000014
 8000a18:	080059d0 	.word	0x080059d0
 8000a1c:	080059f4 	.word	0x080059f4

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <Error_Handler+0x8>
	...

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <HAL_MspInit+0x44>)
 8000a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_MspInit+0x44>)
 8000a38:	2101      	movs	r1, #1
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <HAL_MspInit+0x44>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	2201      	movs	r2, #1
 8000a44:	4013      	ands	r3, r2
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_MspInit+0x44>)
 8000a4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <HAL_MspInit+0x44>)
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	0549      	lsls	r1, r1, #21
 8000a54:	430a      	orrs	r2, r1
 8000a56:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_MspInit+0x44>)
 8000a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	055b      	lsls	r3, r3, #21
 8000a60:	4013      	ands	r3, r2
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b002      	add	sp, #8
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	40021000 	.word	0x40021000

08000a74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b095      	sub	sp, #84	; 0x54
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	233c      	movs	r3, #60	; 0x3c
 8000a7e:	18fb      	adds	r3, r7, r3
 8000a80:	0018      	movs	r0, r3
 8000a82:	2314      	movs	r3, #20
 8000a84:	001a      	movs	r2, r3
 8000a86:	2100      	movs	r1, #0
 8000a88:	f003 ff4c 	bl	8004924 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a8c:	2414      	movs	r4, #20
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	0018      	movs	r0, r3
 8000a92:	2328      	movs	r3, #40	; 0x28
 8000a94:	001a      	movs	r2, r3
 8000a96:	2100      	movs	r1, #0
 8000a98:	f003 ff44 	bl	8004924 <memset>
  if(hi2c->Instance==I2C1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a26      	ldr	r2, [pc, #152]	; (8000b3c <HAL_I2C_MspInit+0xc8>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d146      	bne.n	8000b34 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	2220      	movs	r2, #32
 8000aaa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f002 fc85 	bl	80033c4 <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	1e03      	subs	r3, r0, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000abe:	f7ff ffaf 	bl	8000a20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <HAL_I2C_MspInit+0xcc>)
 8000ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <HAL_I2C_MspInit+0xcc>)
 8000ac8:	2102      	movs	r1, #2
 8000aca:	430a      	orrs	r2, r1
 8000acc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <HAL_I2C_MspInit+0xcc>)
 8000ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000ada:	213c      	movs	r1, #60	; 0x3c
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	22c0      	movs	r2, #192	; 0xc0
 8000ae0:	0092      	lsls	r2, r2, #2
 8000ae2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2212      	movs	r2, #18
 8000ae8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2206      	movs	r2, #6
 8000afa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <HAL_I2C_MspInit+0xd0>)
 8000b00:	0019      	movs	r1, r3
 8000b02:	0010      	movs	r0, r2
 8000b04:	f000 fba2 	bl	800124c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <HAL_I2C_MspInit+0xcc>)
 8000b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_I2C_MspInit+0xcc>)
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	0389      	lsls	r1, r1, #14
 8000b12:	430a      	orrs	r2, r1
 8000b14:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <HAL_I2C_MspInit+0xcc>)
 8000b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b1a:	2380      	movs	r3, #128	; 0x80
 8000b1c:	039b      	lsls	r3, r3, #14
 8000b1e:	4013      	ands	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	2017      	movs	r0, #23
 8000b2a:	f000 fae7 	bl	80010fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000b2e:	2017      	movs	r0, #23
 8000b30:	f000 faf9 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b015      	add	sp, #84	; 0x54
 8000b3a:	bd90      	pop	{r4, r7, pc}
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	40021000 	.word	0x40021000
 8000b44:	50000400 	.word	0x50000400

08000b48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b08f      	sub	sp, #60	; 0x3c
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b50:	2410      	movs	r4, #16
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	0018      	movs	r0, r3
 8000b56:	2328      	movs	r3, #40	; 0x28
 8000b58:	001a      	movs	r2, r3
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f003 fee2 	bl	8004924 <memset>
  if(hrtc->Instance==RTC)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a15      	ldr	r2, [pc, #84]	; (8000bbc <HAL_RTC_MspInit+0x74>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d124      	bne.n	8000bb4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2280      	movs	r2, #128	; 0x80
 8000b6e:	0292      	lsls	r2, r2, #10
 8000b70:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	0092      	lsls	r2, r2, #2
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f002 fc21 	bl	80033c4 <HAL_RCCEx_PeriphCLKConfig>
 8000b82:	1e03      	subs	r3, r0, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000b86:	f7ff ff4b 	bl	8000a20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_RTC_MspInit+0x78>)
 8000b8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_RTC_MspInit+0x78>)
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	0209      	lsls	r1, r1, #8
 8000b94:	430a      	orrs	r2, r1
 8000b96:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_RTC_MspInit+0x78>)
 8000b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_RTC_MspInit+0x78>)
 8000b9e:	2180      	movs	r1, #128	; 0x80
 8000ba0:	00c9      	lsls	r1, r1, #3
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_RTC_MspInit+0x78>)
 8000ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	4013      	ands	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b00f      	add	sp, #60	; 0x3c
 8000bba:	bd90      	pop	{r4, r7, pc}
 8000bbc:	40002800 	.word	0x40002800
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b08b      	sub	sp, #44	; 0x2c
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	2414      	movs	r4, #20
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	2314      	movs	r3, #20
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f003 fea4 	bl	8004924 <memset>
  if(huart->Instance==USART2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a1b      	ldr	r2, [pc, #108]	; (8000c50 <HAL_UART_MspInit+0x8c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d130      	bne.n	8000c48 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be6:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <HAL_UART_MspInit+0x90>)
 8000be8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <HAL_UART_MspInit+0x90>)
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	0289      	lsls	r1, r1, #10
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_UART_MspInit+0x90>)
 8000bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	029b      	lsls	r3, r3, #10
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <HAL_UART_MspInit+0x90>)
 8000c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <HAL_UART_MspInit+0x90>)
 8000c08:	2101      	movs	r1, #1
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <HAL_UART_MspInit+0x90>)
 8000c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c12:	2201      	movs	r2, #1
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000c1a:	0021      	movs	r1, r4
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	2202      	movs	r2, #2
 8000c26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2201      	movs	r2, #1
 8000c38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	187a      	adds	r2, r7, r1
 8000c3c:	23a0      	movs	r3, #160	; 0xa0
 8000c3e:	05db      	lsls	r3, r3, #23
 8000c40:	0011      	movs	r1, r2
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 fb02 	bl	800124c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b00b      	add	sp, #44	; 0x2c
 8000c4e:	bd90      	pop	{r4, r7, pc}
 8000c50:	40004400 	.word	0x40004400
 8000c54:	40021000 	.word	0x40021000

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler+0x4>

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7c:	f000 f952 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <I2C1_IRQHandler+0x2c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	699a      	ldr	r2, [r3, #24]
 8000c92:	23e0      	movs	r3, #224	; 0xe0
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	4013      	ands	r3, r2
 8000c98:	d004      	beq.n	8000ca4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <I2C1_IRQHandler+0x2c>)
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f000 fe0f 	bl	80018c0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000ca2:	e003      	b.n	8000cac <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <I2C1_IRQHandler+0x2c>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 fdf0 	bl	800188c <HAL_I2C_EV_IRQHandler>
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	200000a8 	.word	0x200000a8

08000cb8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	e00a      	b.n	8000ce0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cca:	e000      	b.n	8000cce <_read+0x16>
 8000ccc:	bf00      	nop
 8000cce:	0001      	movs	r1, r0
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	60ba      	str	r2, [r7, #8]
 8000cd6:	b2ca      	uxtb	r2, r1
 8000cd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dbf0      	blt.n	8000cca <_read+0x12>
  }

  return len;
 8000ce8:	687b      	ldr	r3, [r7, #4]
}
 8000cea:	0018      	movs	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b006      	add	sp, #24
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	e009      	b.n	8000d18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	60ba      	str	r2, [r7, #8]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff fba5 	bl	800045c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dbf1      	blt.n	8000d04 <_write+0x12>
  }
  return len;
 8000d20:	687b      	ldr	r3, [r7, #4]
}
 8000d22:	0018      	movs	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b006      	add	sp, #24
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <_close>:

int _close(int file)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	425b      	negs	r3, r3
}
 8000d36:	0018      	movs	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b002      	add	sp, #8
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	0192      	lsls	r2, r2, #6
 8000d4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	0018      	movs	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b002      	add	sp, #8
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_isatty>:

int _isatty(int file)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b002      	add	sp, #8
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b004      	add	sp, #16
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <_sbrk+0x5c>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <_sbrk+0x60>)
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <_sbrk+0x64>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <_sbrk+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	18d3      	adds	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d207      	bcs.n	8000dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db4:	f003 fd8c 	bl	80048d0 <__errno>
 8000db8:	0003      	movs	r3, r0
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	425b      	negs	r3, r3
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	18d2      	adds	r2, r2, r3
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <_sbrk+0x64>)
 8000dd4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b006      	add	sp, #24
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20002000 	.word	0x20002000
 8000de4:	00000400 	.word	0x00000400
 8000de8:	200001bc 	.word	0x200001bc
 8000dec:	200001d8 	.word	0x200001d8

08000df0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dfe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e00:	f7ff fff6 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <LoopForever+0xe>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <LoopForever+0x16>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e2a:	f003 fd57 	bl	80048dc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e2e:	f7ff fb27 	bl	8000480 <main>

08000e32 <LoopForever>:

LoopForever:
  b LoopForever
 8000e32:	e7fe      	b.n	8000e32 <LoopForever>
  ldr   r0, =_estack
 8000e34:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000e40:	08005b38 	.word	0x08005b38
  ldr r2, =_sbss
 8000e44:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000e48:	200001d4 	.word	0x200001d4

08000e4c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC1_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_Init+0x3c>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_Init+0x3c>)
 8000e62:	2180      	movs	r1, #128	; 0x80
 8000e64:	0049      	lsls	r1, r1, #1
 8000e66:	430a      	orrs	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f810 	bl	8000e90 <HAL_InitTick>
 8000e70:	1e03      	subs	r3, r0, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e74:	1dfb      	adds	r3, r7, #7
 8000e76:	2201      	movs	r2, #1
 8000e78:	701a      	strb	r2, [r3, #0]
 8000e7a:	e001      	b.n	8000e80 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff fdd6 	bl	8000a2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	781b      	ldrb	r3, [r3, #0]
}
 8000e84:	0018      	movs	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b002      	add	sp, #8
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40022000 	.word	0x40022000

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e98:	230f      	movs	r3, #15
 8000e9a:	18fb      	adds	r3, r7, r3
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <HAL_InitTick+0x88>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d02b      	beq.n	8000f00 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <HAL_InitTick+0x8c>)
 8000eaa:	681c      	ldr	r4, [r3, #0]
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <HAL_InitTick+0x88>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	0019      	movs	r1, r3
 8000eb2:	23fa      	movs	r3, #250	; 0xfa
 8000eb4:	0098      	lsls	r0, r3, #2
 8000eb6:	f7ff f92f 	bl	8000118 <__udivsi3>
 8000eba:	0003      	movs	r3, r0
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	0020      	movs	r0, r4
 8000ec0:	f7ff f92a 	bl	8000118 <__udivsi3>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 f93d 	bl	8001146 <HAL_SYSTICK_Config>
 8000ecc:	1e03      	subs	r3, r0, #0
 8000ece:	d112      	bne.n	8000ef6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d80a      	bhi.n	8000eec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	425b      	negs	r3, r3
 8000edc:	2200      	movs	r2, #0
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f000 f90c 	bl	80010fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_InitTick+0x90>)
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	e00d      	b.n	8000f08 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000eec:	230f      	movs	r3, #15
 8000eee:	18fb      	adds	r3, r7, r3
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	e008      	b.n	8000f08 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	e003      	b.n	8000f08 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f00:	230f      	movs	r3, #15
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	2201      	movs	r2, #1
 8000f06:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f08:	230f      	movs	r3, #15
 8000f0a:	18fb      	adds	r3, r7, r3
 8000f0c:	781b      	ldrb	r3, [r3, #0]
}
 8000f0e:	0018      	movs	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b005      	add	sp, #20
 8000f14:	bd90      	pop	{r4, r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	20000024 	.word	0x20000024
 8000f1c:	2000001c 	.word	0x2000001c
 8000f20:	20000020 	.word	0x20000020

08000f24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_IncTick+0x1c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_IncTick+0x20>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	18d2      	adds	r2, r2, r3
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_IncTick+0x20>)
 8000f36:	601a      	str	r2, [r3, #0]
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	20000024 	.word	0x20000024
 8000f44:	200001c0 	.word	0x200001c0

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b02      	ldr	r3, [pc, #8]	; (8000f58 <HAL_GetTick+0x10>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	200001c0 	.word	0x200001c0

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff fff0 	bl	8000f48 <HAL_GetTick>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	3301      	adds	r3, #1
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	001a      	movs	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	189b      	adds	r3, r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	f7ff ffe0 	bl	8000f48 <HAL_GetTick>
 8000f88:	0002      	movs	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b004      	add	sp, #16
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	20000024 	.word	0x20000024

08000fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	0002      	movs	r2, r0
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	1dfb      	adds	r3, r7, #7
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8000fb6:	d809      	bhi.n	8000fcc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb8:	1dfb      	adds	r3, r7, #7
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	001a      	movs	r2, r3
 8000fbe:	231f      	movs	r3, #31
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_EnableIRQ+0x30>)
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	4091      	lsls	r1, r2
 8000fc8:	000a      	movs	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b002      	add	sp, #8
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	0002      	movs	r2, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b7f      	cmp	r3, #127	; 0x7f
 8000fec:	d828      	bhi.n	8001040 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fee:	4a2f      	ldr	r2, [pc, #188]	; (80010ac <__NVIC_SetPriority+0xd4>)
 8000ff0:	1dfb      	adds	r3, r7, #7
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	33c0      	adds	r3, #192	; 0xc0
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	589b      	ldr	r3, [r3, r2]
 8000ffe:	1dfa      	adds	r2, r7, #7
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	0011      	movs	r1, r2
 8001004:	2203      	movs	r2, #3
 8001006:	400a      	ands	r2, r1
 8001008:	00d2      	lsls	r2, r2, #3
 800100a:	21ff      	movs	r1, #255	; 0xff
 800100c:	4091      	lsls	r1, r2
 800100e:	000a      	movs	r2, r1
 8001010:	43d2      	mvns	r2, r2
 8001012:	401a      	ands	r2, r3
 8001014:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	019b      	lsls	r3, r3, #6
 800101a:	22ff      	movs	r2, #255	; 0xff
 800101c:	401a      	ands	r2, r3
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	0018      	movs	r0, r3
 8001024:	2303      	movs	r3, #3
 8001026:	4003      	ands	r3, r0
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800102c:	481f      	ldr	r0, [pc, #124]	; (80010ac <__NVIC_SetPriority+0xd4>)
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b25b      	sxtb	r3, r3
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	430a      	orrs	r2, r1
 8001038:	33c0      	adds	r3, #192	; 0xc0
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800103e:	e031      	b.n	80010a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001040:	4a1b      	ldr	r2, [pc, #108]	; (80010b0 <__NVIC_SetPriority+0xd8>)
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	0019      	movs	r1, r3
 8001048:	230f      	movs	r3, #15
 800104a:	400b      	ands	r3, r1
 800104c:	3b08      	subs	r3, #8
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	3306      	adds	r3, #6
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	18d3      	adds	r3, r2, r3
 8001056:	3304      	adds	r3, #4
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	1dfa      	adds	r2, r7, #7
 800105c:	7812      	ldrb	r2, [r2, #0]
 800105e:	0011      	movs	r1, r2
 8001060:	2203      	movs	r2, #3
 8001062:	400a      	ands	r2, r1
 8001064:	00d2      	lsls	r2, r2, #3
 8001066:	21ff      	movs	r1, #255	; 0xff
 8001068:	4091      	lsls	r1, r2
 800106a:	000a      	movs	r2, r1
 800106c:	43d2      	mvns	r2, r2
 800106e:	401a      	ands	r2, r3
 8001070:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	019b      	lsls	r3, r3, #6
 8001076:	22ff      	movs	r2, #255	; 0xff
 8001078:	401a      	ands	r2, r3
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	0018      	movs	r0, r3
 8001080:	2303      	movs	r3, #3
 8001082:	4003      	ands	r3, r0
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <__NVIC_SetPriority+0xd8>)
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	001c      	movs	r4, r3
 8001090:	230f      	movs	r3, #15
 8001092:	4023      	ands	r3, r4
 8001094:	3b08      	subs	r3, #8
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	430a      	orrs	r2, r1
 800109a:	3306      	adds	r3, #6
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	18c3      	adds	r3, r0, r3
 80010a0:	3304      	adds	r3, #4
 80010a2:	601a      	str	r2, [r3, #0]
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b003      	add	sp, #12
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	1e5a      	subs	r2, r3, #1
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	045b      	lsls	r3, r3, #17
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d301      	bcc.n	80010cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c8:	2301      	movs	r3, #1
 80010ca:	e010      	b.n	80010ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <SysTick_Config+0x44>)
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	3a01      	subs	r2, #1
 80010d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d4:	2301      	movs	r3, #1
 80010d6:	425b      	negs	r3, r3
 80010d8:	2103      	movs	r1, #3
 80010da:	0018      	movs	r0, r3
 80010dc:	f7ff ff7c 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SysTick_Config+0x44>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SysTick_Config+0x44>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	210f      	movs	r1, #15
 8001108:	187b      	adds	r3, r7, r1
 800110a:	1c02      	adds	r2, r0, #0
 800110c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	187b      	adds	r3, r7, r1
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b25b      	sxtb	r3, r3
 8001116:	0011      	movs	r1, r2
 8001118:	0018      	movs	r0, r3
 800111a:	f7ff ff5d 	bl	8000fd8 <__NVIC_SetPriority>
}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	b004      	add	sp, #16
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	0002      	movs	r2, r0
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b25b      	sxtb	r3, r3
 8001138:	0018      	movs	r0, r3
 800113a:	f7ff ff33 	bl	8000fa4 <__NVIC_EnableIRQ>
}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b002      	add	sp, #8
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff ffaf 	bl	80010b4 <SysTick_Config>
 8001156:	0003      	movs	r3, r0
}
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001168:	210f      	movs	r1, #15
 800116a:	187b      	adds	r3, r7, r1
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2225      	movs	r2, #37	; 0x25
 8001174:	5c9b      	ldrb	r3, [r3, r2]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d006      	beq.n	800118a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2204      	movs	r2, #4
 8001180:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001182:	187b      	adds	r3, r7, r1
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
 8001188:	e049      	b.n	800121e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	210e      	movs	r1, #14
 8001196:	438a      	bics	r2, r1
 8001198:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2101      	movs	r1, #1
 80011a6:	438a      	bics	r2, r1
 80011a8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b4:	491d      	ldr	r1, [pc, #116]	; (800122c <HAL_DMA_Abort_IT+0xcc>)
 80011b6:	400a      	ands	r2, r1
 80011b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <HAL_DMA_Abort_IT+0xd0>)
 80011bc:	6859      	ldr	r1, [r3, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	221c      	movs	r2, #28
 80011c4:	4013      	ands	r3, r2
 80011c6:	2201      	movs	r2, #1
 80011c8:	409a      	lsls	r2, r3
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_DMA_Abort_IT+0xd0>)
 80011cc:	430a      	orrs	r2, r1
 80011ce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80011d8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00c      	beq.n	80011fc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ec:	490f      	ldr	r1, [pc, #60]	; (800122c <HAL_DMA_Abort_IT+0xcc>)
 80011ee:	400a      	ands	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80011fa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2225      	movs	r2, #37	; 0x25
 8001200:	2101      	movs	r1, #1
 8001202:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2224      	movs	r2, #36	; 0x24
 8001208:	2100      	movs	r1, #0
 800120a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001210:	2b00      	cmp	r3, #0
 8001212:	d004      	beq.n	800121e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	0010      	movs	r0, r2
 800121c:	4798      	blx	r3
    }
  }
  return status;
 800121e:	230f      	movs	r3, #15
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	781b      	ldrb	r3, [r3, #0]
}
 8001224:	0018      	movs	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	b004      	add	sp, #16
 800122a:	bd80      	pop	{r7, pc}
 800122c:	fffffeff 	.word	0xfffffeff
 8001230:	40020000 	.word	0x40020000

08001234 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2225      	movs	r2, #37	; 0x25
 8001240:	5c9b      	ldrb	r3, [r3, r2]
 8001242:	b2db      	uxtb	r3, r3
}
 8001244:	0018      	movs	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125a:	e147      	b.n	80014ec <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2101      	movs	r1, #1
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4091      	lsls	r1, r2
 8001266:	000a      	movs	r2, r1
 8001268:	4013      	ands	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d100      	bne.n	8001274 <HAL_GPIO_Init+0x28>
 8001272:	e138      	b.n	80014e6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2203      	movs	r2, #3
 800127a:	4013      	ands	r3, r2
 800127c:	2b01      	cmp	r3, #1
 800127e:	d005      	beq.n	800128c <HAL_GPIO_Init+0x40>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2203      	movs	r2, #3
 8001286:	4013      	ands	r3, r2
 8001288:	2b02      	cmp	r3, #2
 800128a:	d130      	bne.n	80012ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	409a      	lsls	r2, r3
 800129a:	0013      	movs	r3, r2
 800129c:	43da      	mvns	r2, r3
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	409a      	lsls	r2, r3
 80012ae:	0013      	movs	r3, r2
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012c2:	2201      	movs	r2, #1
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	43da      	mvns	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	091b      	lsrs	r3, r3, #4
 80012d8:	2201      	movs	r2, #1
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
 80012e0:	0013      	movs	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2203      	movs	r2, #3
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d017      	beq.n	800132a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	2203      	movs	r2, #3
 8001306:	409a      	lsls	r2, r3
 8001308:	0013      	movs	r3, r2
 800130a:	43da      	mvns	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	409a      	lsls	r2, r3
 800131c:	0013      	movs	r3, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2203      	movs	r2, #3
 8001330:	4013      	ands	r3, r2
 8001332:	2b02      	cmp	r3, #2
 8001334:	d123      	bne.n	800137e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	08da      	lsrs	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3208      	adds	r2, #8
 800133e:	0092      	lsls	r2, r2, #2
 8001340:	58d3      	ldr	r3, [r2, r3]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	2207      	movs	r2, #7
 8001348:	4013      	ands	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	43da      	mvns	r2, r3
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	691a      	ldr	r2, [r3, #16]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2107      	movs	r1, #7
 8001362:	400b      	ands	r3, r1
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	409a      	lsls	r2, r3
 8001368:	0013      	movs	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	08da      	lsrs	r2, r3, #3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3208      	adds	r2, #8
 8001378:	0092      	lsls	r2, r2, #2
 800137a:	6939      	ldr	r1, [r7, #16]
 800137c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	409a      	lsls	r2, r3
 800138c:	0013      	movs	r3, r2
 800138e:	43da      	mvns	r2, r3
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2203      	movs	r2, #3
 800139c:	401a      	ands	r2, r3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	409a      	lsls	r2, r3
 80013a4:	0013      	movs	r3, r2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	23c0      	movs	r3, #192	; 0xc0
 80013b8:	029b      	lsls	r3, r3, #10
 80013ba:	4013      	ands	r3, r2
 80013bc:	d100      	bne.n	80013c0 <HAL_GPIO_Init+0x174>
 80013be:	e092      	b.n	80014e6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80013c0:	4a50      	ldr	r2, [pc, #320]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3318      	adds	r3, #24
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	589b      	ldr	r3, [r3, r2]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	2203      	movs	r2, #3
 80013d2:	4013      	ands	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	220f      	movs	r2, #15
 80013d8:	409a      	lsls	r2, r3
 80013da:	0013      	movs	r3, r2
 80013dc:	43da      	mvns	r2, r3
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	23a0      	movs	r3, #160	; 0xa0
 80013e8:	05db      	lsls	r3, r3, #23
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d013      	beq.n	8001416 <HAL_GPIO_Init+0x1ca>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a45      	ldr	r2, [pc, #276]	; (8001508 <HAL_GPIO_Init+0x2bc>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d00d      	beq.n	8001412 <HAL_GPIO_Init+0x1c6>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a44      	ldr	r2, [pc, #272]	; (800150c <HAL_GPIO_Init+0x2c0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d007      	beq.n	800140e <HAL_GPIO_Init+0x1c2>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a43      	ldr	r2, [pc, #268]	; (8001510 <HAL_GPIO_Init+0x2c4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d101      	bne.n	800140a <HAL_GPIO_Init+0x1be>
 8001406:	2303      	movs	r3, #3
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x1cc>
 800140a:	2305      	movs	r3, #5
 800140c:	e004      	b.n	8001418 <HAL_GPIO_Init+0x1cc>
 800140e:	2302      	movs	r3, #2
 8001410:	e002      	b.n	8001418 <HAL_GPIO_Init+0x1cc>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_GPIO_Init+0x1cc>
 8001416:	2300      	movs	r3, #0
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	2103      	movs	r1, #3
 800141c:	400a      	ands	r2, r1
 800141e:	00d2      	lsls	r2, r2, #3
 8001420:	4093      	lsls	r3, r2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001428:	4936      	ldr	r1, [pc, #216]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3318      	adds	r3, #24
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001436:	4b33      	ldr	r3, [pc, #204]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43da      	mvns	r2, r3
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	035b      	lsls	r3, r3, #13
 800144e:	4013      	ands	r3, r2
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800145a:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43da      	mvns	r2, r3
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	039b      	lsls	r3, r3, #14
 8001478:	4013      	ands	r3, r2
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800148a:	4a1e      	ldr	r2, [pc, #120]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 800148c:	2384      	movs	r3, #132	; 0x84
 800148e:	58d3      	ldr	r3, [r2, r3]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43da      	mvns	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	029b      	lsls	r3, r3, #10
 80014a4:	4013      	ands	r3, r2
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014b0:	4914      	ldr	r1, [pc, #80]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 80014b2:	2284      	movs	r2, #132	; 0x84
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80014b8:	4a12      	ldr	r2, [pc, #72]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	58d3      	ldr	r3, [r2, r3]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	43da      	mvns	r2, r3
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	025b      	lsls	r3, r3, #9
 80014d2:	4013      	ands	r3, r2
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014de:	4909      	ldr	r1, [pc, #36]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	40da      	lsrs	r2, r3
 80014f4:	1e13      	subs	r3, r2, #0
 80014f6:	d000      	beq.n	80014fa <HAL_GPIO_Init+0x2ae>
 80014f8:	e6b0      	b.n	800125c <HAL_GPIO_Init+0x10>
  }
}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b006      	add	sp, #24
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021800 	.word	0x40021800
 8001508:	50000400 	.word	0x50000400
 800150c:	50000800 	.word	0x50000800
 8001510:	50000c00 	.word	0x50000c00

08001514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	0008      	movs	r0, r1
 800151e:	0011      	movs	r1, r2
 8001520:	1cbb      	adds	r3, r7, #2
 8001522:	1c02      	adds	r2, r0, #0
 8001524:	801a      	strh	r2, [r3, #0]
 8001526:	1c7b      	adds	r3, r7, #1
 8001528:	1c0a      	adds	r2, r1, #0
 800152a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800152c:	1c7b      	adds	r3, r7, #1
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001534:	1cbb      	adds	r3, r7, #2
 8001536:	881a      	ldrh	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800153c:	e003      	b.n	8001546 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800153e:	1cbb      	adds	r3, r7, #2
 8001540:	881a      	ldrh	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b002      	add	sp, #8
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e082      	b.n	8001668 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2241      	movs	r2, #65	; 0x41
 8001566:	5c9b      	ldrb	r3, [r3, r2]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d107      	bne.n	800157e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2240      	movs	r2, #64	; 0x40
 8001572:	2100      	movs	r1, #0
 8001574:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	0018      	movs	r0, r3
 800157a:	f7ff fa7b 	bl	8000a74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2241      	movs	r2, #65	; 0x41
 8001582:	2124      	movs	r1, #36	; 0x24
 8001584:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2101      	movs	r1, #1
 8001592:	438a      	bics	r2, r1
 8001594:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4934      	ldr	r1, [pc, #208]	; (8001670 <HAL_I2C_Init+0x120>)
 80015a0:	400a      	ands	r2, r1
 80015a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4931      	ldr	r1, [pc, #196]	; (8001674 <HAL_I2C_Init+0x124>)
 80015b0:	400a      	ands	r2, r1
 80015b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d108      	bne.n	80015ce <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0209      	lsls	r1, r1, #8
 80015c8:	430a      	orrs	r2, r1
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	e007      	b.n	80015de <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2184      	movs	r1, #132	; 0x84
 80015d8:	0209      	lsls	r1, r1, #8
 80015da:	430a      	orrs	r2, r1
 80015dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d104      	bne.n	80015f0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	491f      	ldr	r1, [pc, #124]	; (8001678 <HAL_I2C_Init+0x128>)
 80015fc:	430a      	orrs	r2, r1
 80015fe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	491a      	ldr	r1, [pc, #104]	; (8001674 <HAL_I2C_Init+0x124>)
 800160c:	400a      	ands	r2, r1
 800160e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	431a      	orrs	r2, r3
 800161a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69d9      	ldr	r1, [r3, #28]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1a      	ldr	r2, [r3, #32]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2101      	movs	r1, #1
 8001646:	430a      	orrs	r2, r1
 8001648:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2241      	movs	r2, #65	; 0x41
 8001654:	2120      	movs	r1, #32
 8001656:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2242      	movs	r2, #66	; 0x42
 8001662:	2100      	movs	r1, #0
 8001664:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	b002      	add	sp, #8
 800166e:	bd80      	pop	{r7, pc}
 8001670:	f0ffffff 	.word	0xf0ffffff
 8001674:	ffff7fff 	.word	0xffff7fff
 8001678:	02008000 	.word	0x02008000

0800167c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af02      	add	r7, sp, #8
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	0008      	movs	r0, r1
 8001686:	607a      	str	r2, [r7, #4]
 8001688:	0019      	movs	r1, r3
 800168a:	230a      	movs	r3, #10
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	1c02      	adds	r2, r0, #0
 8001690:	801a      	strh	r2, [r3, #0]
 8001692:	2308      	movs	r3, #8
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	1c0a      	adds	r2, r1, #0
 8001698:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2241      	movs	r2, #65	; 0x41
 800169e:	5c9b      	ldrb	r3, [r3, r2]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b20      	cmp	r3, #32
 80016a4:	d000      	beq.n	80016a8 <HAL_I2C_Master_Transmit+0x2c>
 80016a6:	e0e7      	b.n	8001878 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2240      	movs	r2, #64	; 0x40
 80016ac:	5c9b      	ldrb	r3, [r3, r2]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_I2C_Master_Transmit+0x3a>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e0e1      	b.n	800187a <HAL_I2C_Master_Transmit+0x1fe>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2240      	movs	r2, #64	; 0x40
 80016ba:	2101      	movs	r1, #1
 80016bc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016be:	f7ff fc43 	bl	8000f48 <HAL_GetTick>
 80016c2:	0003      	movs	r3, r0
 80016c4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	0219      	lsls	r1, r3, #8
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2319      	movs	r3, #25
 80016d2:	2201      	movs	r2, #1
 80016d4:	f000 fe76 	bl	80023c4 <I2C_WaitOnFlagUntilTimeout>
 80016d8:	1e03      	subs	r3, r0, #0
 80016da:	d001      	beq.n	80016e0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0cc      	b.n	800187a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2241      	movs	r2, #65	; 0x41
 80016e4:	2121      	movs	r1, #33	; 0x21
 80016e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2242      	movs	r2, #66	; 0x42
 80016ec:	2110      	movs	r1, #16
 80016ee:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2208      	movs	r2, #8
 8001700:	18ba      	adds	r2, r7, r2
 8001702:	8812      	ldrh	r2, [r2, #0]
 8001704:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001710:	b29b      	uxth	r3, r3
 8001712:	2bff      	cmp	r3, #255	; 0xff
 8001714:	d911      	bls.n	800173a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	22ff      	movs	r2, #255	; 0xff
 800171a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001720:	b2da      	uxtb	r2, r3
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	045c      	lsls	r4, r3, #17
 8001726:	230a      	movs	r3, #10
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	8819      	ldrh	r1, [r3, #0]
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	4b55      	ldr	r3, [pc, #340]	; (8001884 <HAL_I2C_Master_Transmit+0x208>)
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	0023      	movs	r3, r4
 8001734:	f001 f800 	bl	8002738 <I2C_TransferConfig>
 8001738:	e075      	b.n	8001826 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001748:	b2da      	uxtb	r2, r3
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	049c      	lsls	r4, r3, #18
 800174e:	230a      	movs	r3, #10
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	8819      	ldrh	r1, [r3, #0]
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	4b4b      	ldr	r3, [pc, #300]	; (8001884 <HAL_I2C_Master_Transmit+0x208>)
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	0023      	movs	r3, r4
 800175c:	f000 ffec 	bl	8002738 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001760:	e061      	b.n	8001826 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	0018      	movs	r0, r3
 800176a:	f000 fe6a 	bl	8002442 <I2C_WaitOnTXISFlagUntilTimeout>
 800176e:	1e03      	subs	r3, r0, #0
 8001770:	d001      	beq.n	8001776 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e081      	b.n	800187a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	781a      	ldrb	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d03a      	beq.n	8001826 <HAL_I2C_Master_Transmit+0x1aa>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d136      	bne.n	8001826 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	0013      	movs	r3, r2
 80017c2:	2200      	movs	r2, #0
 80017c4:	2180      	movs	r1, #128	; 0x80
 80017c6:	f000 fdfd 	bl	80023c4 <I2C_WaitOnFlagUntilTimeout>
 80017ca:	1e03      	subs	r3, r0, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e053      	b.n	800187a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	2bff      	cmp	r3, #255	; 0xff
 80017da:	d911      	bls.n	8001800 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	22ff      	movs	r2, #255	; 0xff
 80017e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	045c      	lsls	r4, r3, #17
 80017ec:	230a      	movs	r3, #10
 80017ee:	18fb      	adds	r3, r7, r3
 80017f0:	8819      	ldrh	r1, [r3, #0]
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	2300      	movs	r3, #0
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	0023      	movs	r3, r4
 80017fa:	f000 ff9d 	bl	8002738 <I2C_TransferConfig>
 80017fe:	e012      	b.n	8001826 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001804:	b29a      	uxth	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180e:	b2da      	uxtb	r2, r3
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	049c      	lsls	r4, r3, #18
 8001814:	230a      	movs	r3, #10
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	8819      	ldrh	r1, [r3, #0]
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	2300      	movs	r3, #0
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	0023      	movs	r3, r4
 8001822:	f000 ff89 	bl	8002738 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182a:	b29b      	uxth	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d198      	bne.n	8001762 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	0018      	movs	r0, r3
 8001838:	f000 fe42 	bl	80024c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800183c:	1e03      	subs	r3, r0, #0
 800183e:	d001      	beq.n	8001844 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e01a      	b.n	800187a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2220      	movs	r2, #32
 800184a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	490c      	ldr	r1, [pc, #48]	; (8001888 <HAL_I2C_Master_Transmit+0x20c>)
 8001858:	400a      	ands	r2, r1
 800185a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2241      	movs	r2, #65	; 0x41
 8001860:	2120      	movs	r1, #32
 8001862:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2242      	movs	r2, #66	; 0x42
 8001868:	2100      	movs	r1, #0
 800186a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2240      	movs	r2, #64	; 0x40
 8001870:	2100      	movs	r1, #0
 8001872:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	e000      	b.n	800187a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001878:	2302      	movs	r3, #2
  }
}
 800187a:	0018      	movs	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	b007      	add	sp, #28
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	80002000 	.word	0x80002000
 8001888:	fe00e800 	.word	0xfe00e800

0800188c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	68f9      	ldr	r1, [r7, #12]
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	4798      	blx	r3
  }
}
 80018b8:	46c0      	nop			; (mov r8, r8)
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b004      	add	sp, #16
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	0a1b      	lsrs	r3, r3, #8
 80018dc:	001a      	movs	r2, r3
 80018de:	2301      	movs	r3, #1
 80018e0:	4013      	ands	r3, r2
 80018e2:	d010      	beq.n	8001906 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	09db      	lsrs	r3, r3, #7
 80018e8:	001a      	movs	r2, r3
 80018ea:	2301      	movs	r3, #1
 80018ec:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80018ee:	d00a      	beq.n	8001906 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f4:	2201      	movs	r2, #1
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	0052      	lsls	r2, r2, #1
 8001904:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	0a9b      	lsrs	r3, r3, #10
 800190a:	001a      	movs	r2, r3
 800190c:	2301      	movs	r3, #1
 800190e:	4013      	ands	r3, r2
 8001910:	d010      	beq.n	8001934 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	09db      	lsrs	r3, r3, #7
 8001916:	001a      	movs	r2, r3
 8001918:	2301      	movs	r3, #1
 800191a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800191c:	d00a      	beq.n	8001934 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	2208      	movs	r2, #8
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	00d2      	lsls	r2, r2, #3
 8001932:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	0a5b      	lsrs	r3, r3, #9
 8001938:	001a      	movs	r2, r3
 800193a:	2301      	movs	r3, #1
 800193c:	4013      	ands	r3, r2
 800193e:	d010      	beq.n	8001962 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	09db      	lsrs	r3, r3, #7
 8001944:	001a      	movs	r2, r3
 8001946:	2301      	movs	r3, #1
 8001948:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800194a:	d00a      	beq.n	8001962 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	2202      	movs	r2, #2
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	220b      	movs	r2, #11
 800196c:	4013      	ands	r3, r2
 800196e:	d005      	beq.n	800197c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	0011      	movs	r1, r2
 8001976:	0018      	movs	r0, r3
 8001978:	f000 fbd8 	bl	800212c <I2C_ITError>
  }
}
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	b006      	add	sp, #24
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b002      	add	sp, #8
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800199c:	46c0      	nop			; (mov r8, r8)
 800199e:	46bd      	mov	sp, r7
 80019a0:	b002      	add	sp, #8
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	0008      	movs	r0, r1
 80019ae:	0011      	movs	r1, r2
 80019b0:	1cfb      	adds	r3, r7, #3
 80019b2:	1c02      	adds	r2, r0, #0
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	003b      	movs	r3, r7
 80019b8:	1c0a      	adds	r2, r1, #0
 80019ba:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80019bc:	46c0      	nop			; (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	b002      	add	sp, #8
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80019cc:	46c0      	nop			; (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b002      	add	sp, #8
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	b002      	add	sp, #8
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80019ec:	46c0      	nop			; (mov r8, r8)
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b002      	add	sp, #8
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2240      	movs	r2, #64	; 0x40
 8001a0e:	5c9b      	ldrb	r3, [r3, r2]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <I2C_Slave_ISR_IT+0x24>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e0fa      	b.n	8001c0e <I2C_Slave_ISR_IT+0x21a>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2240      	movs	r2, #64	; 0x40
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	001a      	movs	r2, r3
 8001a26:	2301      	movs	r3, #1
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d00b      	beq.n	8001a44 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	001a      	movs	r2, r3
 8001a32:	2301      	movs	r3, #1
 8001a34:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a36:	d005      	beq.n	8001a44 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	0011      	movs	r1, r2
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 f9f6 	bl	8001e30 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	091b      	lsrs	r3, r3, #4
 8001a48:	001a      	movs	r2, r3
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d054      	beq.n	8001afa <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	091b      	lsrs	r3, r3, #4
 8001a54:	001a      	movs	r2, r3
 8001a56:	2301      	movs	r3, #1
 8001a58:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001a5a:	d04e      	beq.n	8001afa <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d12d      	bne.n	8001ac2 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2241      	movs	r2, #65	; 0x41
 8001a6a:	5c9b      	ldrb	r3, [r3, r2]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b28      	cmp	r3, #40	; 0x28
 8001a70:	d10b      	bne.n	8001a8a <I2C_Slave_ISR_IT+0x96>
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	049b      	lsls	r3, r3, #18
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d106      	bne.n	8001a8a <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	0011      	movs	r1, r2
 8001a82:	0018      	movs	r0, r3
 8001a84:	f000 faf8 	bl	8002078 <I2C_ITListenCplt>
 8001a88:	e036      	b.n	8001af8 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2241      	movs	r2, #65	; 0x41
 8001a8e:	5c9b      	ldrb	r3, [r3, r2]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b29      	cmp	r3, #41	; 0x29
 8001a94:	d110      	bne.n	8001ab8 <I2C_Slave_ISR_IT+0xc4>
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	4a5f      	ldr	r2, [pc, #380]	; (8001c18 <I2C_Slave_ISR_IT+0x224>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d00c      	beq.n	8001ab8 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2210      	movs	r2, #16
 8001aa4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f000 fc4a 	bl	8002342 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f000 f957 	bl	8001d64 <I2C_ITSlaveSeqCplt>
 8001ab6:	e01f      	b.n	8001af8 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2210      	movs	r2, #16
 8001abe:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001ac0:	e09d      	b.n	8001bfe <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2210      	movs	r2, #16
 8001ac8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	2204      	movs	r2, #4
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <I2C_Slave_ISR_IT+0xf4>
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	045b      	lsls	r3, r3, #17
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d000      	beq.n	8001ae8 <I2C_Slave_ISR_IT+0xf4>
 8001ae6:	e08a      	b.n	8001bfe <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	0011      	movs	r1, r2
 8001af0:	0018      	movs	r0, r3
 8001af2:	f000 fb1b 	bl	800212c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001af6:	e082      	b.n	8001bfe <I2C_Slave_ISR_IT+0x20a>
 8001af8:	e081      	b.n	8001bfe <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	001a      	movs	r2, r3
 8001b00:	2301      	movs	r3, #1
 8001b02:	4013      	ands	r3, r2
 8001b04:	d031      	beq.n	8001b6a <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b10:	d02b      	beq.n	8001b6a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d018      	beq.n	8001b4e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d154      	bne.n	8001c02 <I2C_Slave_ISR_IT+0x20e>
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	4a2f      	ldr	r2, [pc, #188]	; (8001c18 <I2C_Slave_ISR_IT+0x224>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d050      	beq.n	8001c02 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	0018      	movs	r0, r3
 8001b64:	f000 f8fe 	bl	8001d64 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001b68:	e04b      	b.n	8001c02 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	08db      	lsrs	r3, r3, #3
 8001b6e:	001a      	movs	r2, r3
 8001b70:	2301      	movs	r3, #1
 8001b72:	4013      	ands	r3, r2
 8001b74:	d00c      	beq.n	8001b90 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	001a      	movs	r2, r3
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b80:	d006      	beq.n	8001b90 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	0011      	movs	r1, r2
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f000 f847 	bl	8001c1c <I2C_ITAddrCplt>
 8001b8e:	e039      	b.n	8001c04 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	085b      	lsrs	r3, r3, #1
 8001b94:	001a      	movs	r2, r3
 8001b96:	2301      	movs	r3, #1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d033      	beq.n	8001c04 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	085b      	lsrs	r3, r3, #1
 8001ba0:	001a      	movs	r2, r3
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ba6:	d02d      	beq.n	8001c04 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d018      	beq.n	8001be4 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	781a      	ldrb	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	851a      	strh	r2, [r3, #40]	; 0x28
 8001be2:	e00f      	b.n	8001c04 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	045b      	lsls	r3, r3, #17
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d002      	beq.n	8001bf4 <I2C_Slave_ISR_IT+0x200>
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d107      	bne.n	8001c04 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f000 f8b4 	bl	8001d64 <I2C_ITSlaveSeqCplt>
 8001bfc:	e002      	b.n	8001c04 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	e000      	b.n	8001c04 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8001c02:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2240      	movs	r2, #64	; 0x40
 8001c08:	2100      	movs	r1, #0
 8001c0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	0018      	movs	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b006      	add	sp, #24
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	ffff0000 	.word	0xffff0000

08001c1c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001c1c:	b5b0      	push	{r4, r5, r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2241      	movs	r2, #65	; 0x41
 8001c2a:	5c9b      	ldrb	r3, [r3, r2]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	001a      	movs	r2, r3
 8001c30:	2328      	movs	r3, #40	; 0x28
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b28      	cmp	r3, #40	; 0x28
 8001c36:	d000      	beq.n	8001c3a <I2C_ITAddrCplt+0x1e>
 8001c38:	e088      	b.n	8001d4c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	0c1b      	lsrs	r3, r3, #16
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	250f      	movs	r5, #15
 8001c46:	197b      	adds	r3, r7, r5
 8001c48:	2101      	movs	r1, #1
 8001c4a:	400a      	ands	r2, r1
 8001c4c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	200c      	movs	r0, #12
 8001c5a:	183b      	adds	r3, r7, r0
 8001c5c:	21fe      	movs	r1, #254	; 0xfe
 8001c5e:	400a      	ands	r2, r1
 8001c60:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	240a      	movs	r4, #10
 8001c6c:	193b      	adds	r3, r7, r4
 8001c6e:	0592      	lsls	r2, r2, #22
 8001c70:	0d92      	lsrs	r2, r2, #22
 8001c72:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	2308      	movs	r3, #8
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	21fe      	movs	r1, #254	; 0xfe
 8001c82:	400a      	ands	r2, r1
 8001c84:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d148      	bne.n	8001d20 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001c8e:	0021      	movs	r1, r4
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	09db      	lsrs	r3, r3, #7
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	183b      	adds	r3, r7, r0
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	4053      	eors	r3, r2
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	001a      	movs	r2, r3
 8001ca2:	2306      	movs	r3, #6
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d120      	bne.n	8001cea <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8001ca8:	183b      	adds	r3, r7, r0
 8001caa:	187a      	adds	r2, r7, r1
 8001cac:	8812      	ldrh	r2, [r2, #0]
 8001cae:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d14c      	bne.n	8001d5c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2208      	movs	r2, #8
 8001cce:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2240      	movs	r2, #64	; 0x40
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001cd8:	183b      	adds	r3, r7, r0
 8001cda:	881a      	ldrh	r2, [r3, #0]
 8001cdc:	197b      	adds	r3, r7, r5
 8001cde:	7819      	ldrb	r1, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f7ff fe5e 	bl	80019a4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001ce8:	e038      	b.n	8001d5c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8001cea:	240c      	movs	r4, #12
 8001cec:	193b      	adds	r3, r7, r4
 8001cee:	2208      	movs	r2, #8
 8001cf0:	18ba      	adds	r2, r7, r2
 8001cf2:	8812      	ldrh	r2, [r2, #0]
 8001cf4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	021a      	lsls	r2, r3, #8
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	0011      	movs	r1, r2
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f000 fd54 	bl	80027ac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2240      	movs	r2, #64	; 0x40
 8001d08:	2100      	movs	r1, #0
 8001d0a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d0c:	193b      	adds	r3, r7, r4
 8001d0e:	881a      	ldrh	r2, [r3, #0]
 8001d10:	230f      	movs	r3, #15
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	7819      	ldrb	r1, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f7ff fe43 	bl	80019a4 <HAL_I2C_AddrCallback>
}
 8001d1e:	e01d      	b.n	8001d5c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	021a      	lsls	r2, r3, #8
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	0011      	movs	r1, r2
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f000 fd3f 	bl	80027ac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2240      	movs	r2, #64	; 0x40
 8001d32:	2100      	movs	r1, #0
 8001d34:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d36:	230c      	movs	r3, #12
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	881a      	ldrh	r2, [r3, #0]
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	7819      	ldrb	r1, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff fe2d 	bl	80019a4 <HAL_I2C_AddrCallback>
}
 8001d4a:	e007      	b.n	8001d5c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2208      	movs	r2, #8
 8001d52:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2240      	movs	r2, #64	; 0x40
 8001d58:	2100      	movs	r1, #0
 8001d5a:	5499      	strb	r1, [r3, r2]
}
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b004      	add	sp, #16
 8001d62:	bdb0      	pop	{r4, r5, r7, pc}

08001d64 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2242      	movs	r2, #66	; 0x42
 8001d78:	2100      	movs	r1, #0
 8001d7a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	0b9b      	lsrs	r3, r3, #14
 8001d80:	001a      	movs	r2, r3
 8001d82:	2301      	movs	r3, #1
 8001d84:	4013      	ands	r3, r2
 8001d86:	d008      	beq.n	8001d9a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4925      	ldr	r1, [pc, #148]	; (8001e28 <I2C_ITSlaveSeqCplt+0xc4>)
 8001d94:	400a      	ands	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	e00d      	b.n	8001db6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	0bdb      	lsrs	r3, r3, #15
 8001d9e:	001a      	movs	r2, r3
 8001da0:	2301      	movs	r3, #1
 8001da2:	4013      	ands	r3, r2
 8001da4:	d007      	beq.n	8001db6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	491e      	ldr	r1, [pc, #120]	; (8001e2c <I2C_ITSlaveSeqCplt+0xc8>)
 8001db2:	400a      	ands	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2241      	movs	r2, #65	; 0x41
 8001dba:	5c9b      	ldrb	r3, [r3, r2]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b29      	cmp	r3, #41	; 0x29
 8001dc0:	d114      	bne.n	8001dec <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2241      	movs	r2, #65	; 0x41
 8001dc6:	2128      	movs	r1, #40	; 0x28
 8001dc8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2221      	movs	r2, #33	; 0x21
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f000 fce9 	bl	80027ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2240      	movs	r2, #64	; 0x40
 8001dde:	2100      	movs	r1, #0
 8001de0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7ff fdcd 	bl	8001984 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001dea:	e019      	b.n	8001e20 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2241      	movs	r2, #65	; 0x41
 8001df0:	5c9b      	ldrb	r3, [r3, r2]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b2a      	cmp	r3, #42	; 0x2a
 8001df6:	d113      	bne.n	8001e20 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2241      	movs	r2, #65	; 0x41
 8001dfc:	2128      	movs	r1, #40	; 0x28
 8001dfe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2222      	movs	r2, #34	; 0x22
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2102      	movs	r1, #2
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f000 fcce 	bl	80027ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2240      	movs	r2, #64	; 0x40
 8001e14:	2100      	movs	r1, #0
 8001e16:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f7ff fdba 	bl	8001994 <HAL_I2C_SlaveRxCpltCallback>
}
 8001e20:	46c0      	nop			; (mov r8, r8)
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b004      	add	sp, #16
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	ffffbfff 	.word	0xffffbfff
 8001e2c:	ffff7fff 	.word	0xffff7fff

08001e30 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e46:	200f      	movs	r0, #15
 8001e48:	183b      	adds	r3, r7, r0
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	2141      	movs	r1, #65	; 0x41
 8001e4e:	5c52      	ldrb	r2, [r2, r1]
 8001e50:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2220      	movs	r2, #32
 8001e58:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e5a:	183b      	adds	r3, r7, r0
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b21      	cmp	r3, #33	; 0x21
 8001e60:	d003      	beq.n	8001e6a <I2C_ITSlaveCplt+0x3a>
 8001e62:	183b      	adds	r3, r7, r0
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b29      	cmp	r3, #41	; 0x29
 8001e68:	d109      	bne.n	8001e7e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001e6a:	4a7d      	ldr	r2, [pc, #500]	; (8002060 <I2C_ITSlaveCplt+0x230>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	0011      	movs	r1, r2
 8001e70:	0018      	movs	r0, r3
 8001e72:	f000 fc9b 	bl	80027ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2221      	movs	r2, #33	; 0x21
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e7c:	e011      	b.n	8001ea2 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001e7e:	220f      	movs	r2, #15
 8001e80:	18bb      	adds	r3, r7, r2
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b22      	cmp	r3, #34	; 0x22
 8001e86:	d003      	beq.n	8001e90 <I2C_ITSlaveCplt+0x60>
 8001e88:	18bb      	adds	r3, r7, r2
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8001e8e:	d108      	bne.n	8001ea2 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001e90:	4a74      	ldr	r2, [pc, #464]	; (8002064 <I2C_ITSlaveCplt+0x234>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	0011      	movs	r1, r2
 8001e96:	0018      	movs	r0, r3
 8001e98:	f000 fc88 	bl	80027ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2222      	movs	r2, #34	; 0x22
 8001ea0:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2180      	movs	r1, #128	; 0x80
 8001eae:	0209      	lsls	r1, r1, #8
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	496a      	ldr	r1, [pc, #424]	; (8002068 <I2C_ITSlaveCplt+0x238>)
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f000 fa3b 	bl	8002342 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	0b9b      	lsrs	r3, r3, #14
 8001ed0:	001a      	movs	r2, r3
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d013      	beq.n	8001f00 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4962      	ldr	r1, [pc, #392]	; (800206c <I2C_ITSlaveCplt+0x23c>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d020      	beq.n	8001f32 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001efe:	e018      	b.n	8001f32 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	0bdb      	lsrs	r3, r3, #15
 8001f04:	001a      	movs	r2, r3
 8001f06:	2301      	movs	r3, #1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d012      	beq.n	8001f32 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4956      	ldr	r1, [pc, #344]	; (8002070 <I2C_ITSlaveCplt+0x240>)
 8001f18:	400a      	ands	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d006      	beq.n	8001f32 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	001a      	movs	r2, r3
 8001f38:	2301      	movs	r3, #1
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d020      	beq.n	8001f80 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2204      	movs	r2, #4
 8001f42:	4393      	bics	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00c      	beq.n	8001f80 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	2204      	movs	r2, #4
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2242      	movs	r2, #66	; 0x42
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d013      	beq.n	8001fd4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	0011      	movs	r1, r2
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f000 f8b9 	bl	800212c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2241      	movs	r2, #65	; 0x41
 8001fbe:	5c9b      	ldrb	r3, [r3, r2]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b28      	cmp	r3, #40	; 0x28
 8001fc4:	d147      	bne.n	8002056 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	0011      	movs	r1, r2
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f000 f853 	bl	8002078 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001fd2:	e040      	b.n	8002056 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	4a26      	ldr	r2, [pc, #152]	; (8002074 <I2C_ITSlaveCplt+0x244>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d016      	beq.n	800200c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7ff febf 	bl	8001d64 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a22      	ldr	r2, [pc, #136]	; (8002074 <I2C_ITSlaveCplt+0x244>)
 8001fea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2241      	movs	r2, #65	; 0x41
 8001ff0:	2120      	movs	r1, #32
 8001ff2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2240      	movs	r2, #64	; 0x40
 8001ffe:	2100      	movs	r1, #0
 8002000:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	0018      	movs	r0, r3
 8002006:	f7ff fcdd 	bl	80019c4 <HAL_I2C_ListenCpltCallback>
}
 800200a:	e024      	b.n	8002056 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2241      	movs	r2, #65	; 0x41
 8002010:	5c9b      	ldrb	r3, [r3, r2]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b22      	cmp	r3, #34	; 0x22
 8002016:	d10f      	bne.n	8002038 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2241      	movs	r2, #65	; 0x41
 800201c:	2120      	movs	r1, #32
 800201e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2240      	movs	r2, #64	; 0x40
 800202a:	2100      	movs	r1, #0
 800202c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	0018      	movs	r0, r3
 8002032:	f7ff fcaf 	bl	8001994 <HAL_I2C_SlaveRxCpltCallback>
}
 8002036:	e00e      	b.n	8002056 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2241      	movs	r2, #65	; 0x41
 800203c:	2120      	movs	r1, #32
 800203e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2240      	movs	r2, #64	; 0x40
 800204a:	2100      	movs	r1, #0
 800204c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	0018      	movs	r0, r3
 8002052:	f7ff fc97 	bl	8001984 <HAL_I2C_SlaveTxCpltCallback>
}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b006      	add	sp, #24
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	00008001 	.word	0x00008001
 8002064:	00008002 	.word	0x00008002
 8002068:	fe00e800 	.word	0xfe00e800
 800206c:	ffffbfff 	.word	0xffffbfff
 8002070:	ffff7fff 	.word	0xffff7fff
 8002074:	ffff0000 	.word	0xffff0000

08002078 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a27      	ldr	r2, [pc, #156]	; (8002124 <I2C_ITListenCplt+0xac>)
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2241      	movs	r2, #65	; 0x41
 8002092:	2120      	movs	r1, #32
 8002094:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2242      	movs	r2, #66	; 0x42
 800209a:	2100      	movs	r1, #0
 800209c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	001a      	movs	r2, r3
 80020aa:	2301      	movs	r3, #1
 80020ac:	4013      	ands	r3, r2
 80020ae:	d022      	beq.n	80020f6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d012      	beq.n	80020f6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	2204      	movs	r2, #4
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80020f6:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <I2C_ITListenCplt+0xb0>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	0011      	movs	r1, r2
 80020fc:	0018      	movs	r0, r3
 80020fe:	f000 fb55 	bl	80027ac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2210      	movs	r2, #16
 8002108:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2240      	movs	r2, #64	; 0x40
 800210e:	2100      	movs	r1, #0
 8002110:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	0018      	movs	r0, r3
 8002116:	f7ff fc55 	bl	80019c4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	ffff0000 	.word	0xffff0000
 8002128:	00008003 	.word	0x00008003

0800212c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002136:	200f      	movs	r0, #15
 8002138:	183b      	adds	r3, r7, r0
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	2141      	movs	r1, #65	; 0x41
 800213e:	5c52      	ldrb	r2, [r2, r1]
 8002140:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2242      	movs	r2, #66	; 0x42
 8002146:	2100      	movs	r1, #0
 8002148:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a62      	ldr	r2, [pc, #392]	; (80022d8 <I2C_ITError+0x1ac>)
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002162:	183b      	adds	r3, r7, r0
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b28      	cmp	r3, #40	; 0x28
 8002168:	d007      	beq.n	800217a <I2C_ITError+0x4e>
 800216a:	183b      	adds	r3, r7, r0
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b29      	cmp	r3, #41	; 0x29
 8002170:	d003      	beq.n	800217a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002172:	183b      	adds	r3, r7, r0
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b2a      	cmp	r3, #42	; 0x2a
 8002178:	d10c      	bne.n	8002194 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2103      	movs	r1, #3
 800217e:	0018      	movs	r0, r3
 8002180:	f000 fb14 	bl	80027ac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2241      	movs	r2, #65	; 0x41
 8002188:	2128      	movs	r1, #40	; 0x28
 800218a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a53      	ldr	r2, [pc, #332]	; (80022dc <I2C_ITError+0x1b0>)
 8002190:	635a      	str	r2, [r3, #52]	; 0x34
 8002192:	e012      	b.n	80021ba <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002194:	4a52      	ldr	r2, [pc, #328]	; (80022e0 <I2C_ITError+0x1b4>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	0011      	movs	r1, r2
 800219a:	0018      	movs	r0, r3
 800219c:	f000 fb06 	bl	80027ac <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2241      	movs	r2, #65	; 0x41
 80021a4:	5c9b      	ldrb	r3, [r3, r2]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b60      	cmp	r3, #96	; 0x60
 80021aa:	d003      	beq.n	80021b4 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2241      	movs	r2, #65	; 0x41
 80021b0:	2120      	movs	r1, #32
 80021b2:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d03b      	beq.n	8002240 <I2C_ITError+0x114>
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b11      	cmp	r3, #17
 80021cc:	d002      	beq.n	80021d4 <I2C_ITError+0xa8>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b21      	cmp	r3, #33	; 0x21
 80021d2:	d135      	bne.n	8002240 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	01db      	lsls	r3, r3, #7
 80021de:	401a      	ands	r2, r3
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	01db      	lsls	r3, r3, #7
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d107      	bne.n	80021f8 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	493c      	ldr	r1, [pc, #240]	; (80022e4 <I2C_ITError+0x1b8>)
 80021f4:	400a      	ands	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7ff f819 	bl	8001234 <HAL_DMA_GetState>
 8002202:	0003      	movs	r3, r0
 8002204:	2b01      	cmp	r3, #1
 8002206:	d016      	beq.n	8002236 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220c:	4a36      	ldr	r2, [pc, #216]	; (80022e8 <I2C_ITError+0x1bc>)
 800220e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2240      	movs	r2, #64	; 0x40
 8002214:	2100      	movs	r1, #0
 8002216:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221c:	0018      	movs	r0, r3
 800221e:	f7fe ff9f 	bl	8001160 <HAL_DMA_Abort_IT>
 8002222:	1e03      	subs	r3, r0, #0
 8002224:	d051      	beq.n	80022ca <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002230:	0018      	movs	r0, r3
 8002232:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002234:	e049      	b.n	80022ca <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	0018      	movs	r0, r3
 800223a:	f000 f859 	bl	80022f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800223e:	e044      	b.n	80022ca <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002244:	2b00      	cmp	r3, #0
 8002246:	d03b      	beq.n	80022c0 <I2C_ITError+0x194>
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b12      	cmp	r3, #18
 800224c:	d002      	beq.n	8002254 <I2C_ITError+0x128>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b22      	cmp	r3, #34	; 0x22
 8002252:	d135      	bne.n	80022c0 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	401a      	ands	r2, r3
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	429a      	cmp	r2, r3
 8002266:	d107      	bne.n	8002278 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	491e      	ldr	r1, [pc, #120]	; (80022ec <I2C_ITError+0x1c0>)
 8002274:	400a      	ands	r2, r1
 8002276:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	0018      	movs	r0, r3
 800227e:	f7fe ffd9 	bl	8001234 <HAL_DMA_GetState>
 8002282:	0003      	movs	r3, r0
 8002284:	2b01      	cmp	r3, #1
 8002286:	d016      	beq.n	80022b6 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228c:	4a16      	ldr	r2, [pc, #88]	; (80022e8 <I2C_ITError+0x1bc>)
 800228e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2240      	movs	r2, #64	; 0x40
 8002294:	2100      	movs	r1, #0
 8002296:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229c:	0018      	movs	r0, r3
 800229e:	f7fe ff5f 	bl	8001160 <HAL_DMA_Abort_IT>
 80022a2:	1e03      	subs	r3, r0, #0
 80022a4:	d013      	beq.n	80022ce <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b0:	0018      	movs	r0, r3
 80022b2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022b4:	e00b      	b.n	80022ce <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f000 f819 	bl	80022f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022be:	e006      	b.n	80022ce <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 f814 	bl	80022f0 <I2C_TreatErrorCallback>
  }
}
 80022c8:	e002      	b.n	80022d0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	e000      	b.n	80022d0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022ce:	46c0      	nop			; (mov r8, r8)
}
 80022d0:	46c0      	nop			; (mov r8, r8)
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b004      	add	sp, #16
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	ffff0000 	.word	0xffff0000
 80022dc:	080019f5 	.word	0x080019f5
 80022e0:	00008003 	.word	0x00008003
 80022e4:	ffffbfff 	.word	0xffffbfff
 80022e8:	08002387 	.word	0x08002387
 80022ec:	ffff7fff 	.word	0xffff7fff

080022f0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2241      	movs	r2, #65	; 0x41
 80022fc:	5c9b      	ldrb	r3, [r3, r2]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b60      	cmp	r3, #96	; 0x60
 8002302:	d10f      	bne.n	8002324 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2241      	movs	r2, #65	; 0x41
 8002308:	2120      	movs	r1, #32
 800230a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2240      	movs	r2, #64	; 0x40
 8002316:	2100      	movs	r1, #0
 8002318:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	0018      	movs	r0, r3
 800231e:	f7ff fb61 	bl	80019e4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002322:	e00a      	b.n	800233a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2240      	movs	r2, #64	; 0x40
 800232e:	2100      	movs	r1, #0
 8002330:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	0018      	movs	r0, r3
 8002336:	f7ff fb4d 	bl	80019d4 <HAL_I2C_ErrorCallback>
}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	46bd      	mov	sp, r7
 800233e:	b002      	add	sp, #8
 8002340:	bd80      	pop	{r7, pc}

08002342 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	2202      	movs	r2, #2
 8002352:	4013      	ands	r3, r2
 8002354:	2b02      	cmp	r3, #2
 8002356:	d103      	bne.n	8002360 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2200      	movs	r2, #0
 800235e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2201      	movs	r2, #1
 8002368:	4013      	ands	r3, r2
 800236a:	2b01      	cmp	r3, #1
 800236c:	d007      	beq.n	800237e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699a      	ldr	r2, [r3, #24]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	430a      	orrs	r2, r1
 800237c:	619a      	str	r2, [r3, #24]
  }
}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	46bd      	mov	sp, r7
 8002382:	b002      	add	sp, #8
 8002384:	bd80      	pop	{r7, pc}

08002386 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a0:	2200      	movs	r2, #0
 80023a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b0:	2200      	movs	r2, #0
 80023b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	0018      	movs	r0, r3
 80023b8:	f7ff ff9a 	bl	80022f0 <I2C_TreatErrorCallback>
}
 80023bc:	46c0      	nop			; (mov r8, r8)
 80023be:	46bd      	mov	sp, r7
 80023c0:	b004      	add	sp, #16
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	1dfb      	adds	r3, r7, #7
 80023d2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d4:	e021      	b.n	800241a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	3301      	adds	r3, #1
 80023da:	d01e      	beq.n	800241a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023dc:	f7fe fdb4 	bl	8000f48 <HAL_GetTick>
 80023e0:	0002      	movs	r2, r0
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d302      	bcc.n	80023f2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d113      	bne.n	800241a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	2220      	movs	r2, #32
 80023f8:	431a      	orrs	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2241      	movs	r2, #65	; 0x41
 8002402:	2120      	movs	r1, #32
 8002404:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2242      	movs	r2, #66	; 0x42
 800240a:	2100      	movs	r1, #0
 800240c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2240      	movs	r2, #64	; 0x40
 8002412:	2100      	movs	r1, #0
 8002414:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e00f      	b.n	800243a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	4013      	ands	r3, r2
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	425a      	negs	r2, r3
 800242a:	4153      	adcs	r3, r2
 800242c:	b2db      	uxtb	r3, r3
 800242e:	001a      	movs	r2, r3
 8002430:	1dfb      	adds	r3, r7, #7
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d0ce      	beq.n	80023d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	0018      	movs	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	b004      	add	sp, #16
 8002440:	bd80      	pop	{r7, pc}

08002442 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b084      	sub	sp, #16
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800244e:	e02b      	b.n	80024a8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	68b9      	ldr	r1, [r7, #8]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	0018      	movs	r0, r3
 8002458:	f000 f86e 	bl	8002538 <I2C_IsErrorOccurred>
 800245c:	1e03      	subs	r3, r0, #0
 800245e:	d001      	beq.n	8002464 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e029      	b.n	80024b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	3301      	adds	r3, #1
 8002468:	d01e      	beq.n	80024a8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800246a:	f7fe fd6d 	bl	8000f48 <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	429a      	cmp	r2, r3
 8002478:	d302      	bcc.n	8002480 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d113      	bne.n	80024a8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002484:	2220      	movs	r2, #32
 8002486:	431a      	orrs	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2241      	movs	r2, #65	; 0x41
 8002490:	2120      	movs	r1, #32
 8002492:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2242      	movs	r2, #66	; 0x42
 8002498:	2100      	movs	r1, #0
 800249a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2240      	movs	r2, #64	; 0x40
 80024a0:	2100      	movs	r1, #0
 80024a2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e007      	b.n	80024b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2202      	movs	r2, #2
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d1cc      	bne.n	8002450 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b004      	add	sp, #16
 80024be:	bd80      	pop	{r7, pc}

080024c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024cc:	e028      	b.n	8002520 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 f82f 	bl	8002538 <I2C_IsErrorOccurred>
 80024da:	1e03      	subs	r3, r0, #0
 80024dc:	d001      	beq.n	80024e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e026      	b.n	8002530 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e2:	f7fe fd31 	bl	8000f48 <HAL_GetTick>
 80024e6:	0002      	movs	r2, r0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d302      	bcc.n	80024f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d113      	bne.n	8002520 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fc:	2220      	movs	r2, #32
 80024fe:	431a      	orrs	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2241      	movs	r2, #65	; 0x41
 8002508:	2120      	movs	r1, #32
 800250a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2242      	movs	r2, #66	; 0x42
 8002510:	2100      	movs	r1, #0
 8002512:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2240      	movs	r2, #64	; 0x40
 8002518:	2100      	movs	r1, #0
 800251a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e007      	b.n	8002530 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	2220      	movs	r2, #32
 8002528:	4013      	ands	r3, r2
 800252a:	2b20      	cmp	r3, #32
 800252c:	d1cf      	bne.n	80024ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	0018      	movs	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	b004      	add	sp, #16
 8002536:	bd80      	pop	{r7, pc}

08002538 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b08b      	sub	sp, #44	; 0x2c
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002544:	2327      	movs	r3, #39	; 0x27
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	2210      	movs	r2, #16
 8002560:	4013      	ands	r3, r2
 8002562:	d100      	bne.n	8002566 <I2C_IsErrorOccurred+0x2e>
 8002564:	e082      	b.n	800266c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2210      	movs	r2, #16
 800256c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800256e:	e060      	b.n	8002632 <I2C_IsErrorOccurred+0xfa>
 8002570:	2427      	movs	r4, #39	; 0x27
 8002572:	193b      	adds	r3, r7, r4
 8002574:	193a      	adds	r2, r7, r4
 8002576:	7812      	ldrb	r2, [r2, #0]
 8002578:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	3301      	adds	r3, #1
 800257e:	d058      	beq.n	8002632 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002580:	f7fe fce2 	bl	8000f48 <HAL_GetTick>
 8002584:	0002      	movs	r2, r0
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	429a      	cmp	r2, r3
 800258e:	d306      	bcc.n	800259e <I2C_IsErrorOccurred+0x66>
 8002590:	193b      	adds	r3, r7, r4
 8002592:	193a      	adds	r2, r7, r4
 8002594:	7812      	ldrb	r2, [r2, #0]
 8002596:	701a      	strb	r2, [r3, #0]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d149      	bne.n	8002632 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	01db      	lsls	r3, r3, #7
 80025a8:	4013      	ands	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80025ac:	2013      	movs	r0, #19
 80025ae:	183b      	adds	r3, r7, r0
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	2142      	movs	r1, #66	; 0x42
 80025b4:	5c52      	ldrb	r2, [r2, r1]
 80025b6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	401a      	ands	r2, r3
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d126      	bne.n	800261a <I2C_IsErrorOccurred+0xe2>
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	01db      	lsls	r3, r3, #7
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d021      	beq.n	800261a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80025d6:	183b      	adds	r3, r7, r0
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b20      	cmp	r3, #32
 80025dc:	d01d      	beq.n	800261a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2180      	movs	r1, #128	; 0x80
 80025ea:	01c9      	lsls	r1, r1, #7
 80025ec:	430a      	orrs	r2, r1
 80025ee:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80025f0:	f7fe fcaa 	bl	8000f48 <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025f8:	e00f      	b.n	800261a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025fa:	f7fe fca5 	bl	8000f48 <HAL_GetTick>
 80025fe:	0002      	movs	r2, r0
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b19      	cmp	r3, #25
 8002606:	d908      	bls.n	800261a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	2220      	movs	r2, #32
 800260c:	4313      	orrs	r3, r2
 800260e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002610:	2327      	movs	r3, #39	; 0x27
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	2201      	movs	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]

              break;
 8002618:	e00b      	b.n	8002632 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2220      	movs	r2, #32
 8002622:	4013      	ands	r3, r2
 8002624:	2127      	movs	r1, #39	; 0x27
 8002626:	187a      	adds	r2, r7, r1
 8002628:	1879      	adds	r1, r7, r1
 800262a:	7809      	ldrb	r1, [r1, #0]
 800262c:	7011      	strb	r1, [r2, #0]
 800262e:	2b20      	cmp	r3, #32
 8002630:	d1e3      	bne.n	80025fa <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	2220      	movs	r2, #32
 800263a:	4013      	ands	r3, r2
 800263c:	2b20      	cmp	r3, #32
 800263e:	d004      	beq.n	800264a <I2C_IsErrorOccurred+0x112>
 8002640:	2327      	movs	r3, #39	; 0x27
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d092      	beq.n	8002570 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800264a:	2327      	movs	r3, #39	; 0x27
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d103      	bne.n	800265c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2220      	movs	r2, #32
 800265a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	2204      	movs	r2, #4
 8002660:	4313      	orrs	r3, r2
 8002662:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002664:	2327      	movs	r3, #39	; 0x27
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4013      	ands	r3, r2
 800267c:	d00c      	beq.n	8002698 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	2201      	movs	r2, #1
 8002682:	4313      	orrs	r3, r2
 8002684:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2280      	movs	r2, #128	; 0x80
 800268c:	0052      	lsls	r2, r2, #1
 800268e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002690:	2327      	movs	r3, #39	; 0x27
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4013      	ands	r3, r2
 80026a0:	d00c      	beq.n	80026bc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	2208      	movs	r2, #8
 80026a6:	4313      	orrs	r3, r2
 80026a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2280      	movs	r2, #128	; 0x80
 80026b0:	00d2      	lsls	r2, r2, #3
 80026b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026b4:	2327      	movs	r3, #39	; 0x27
 80026b6:	18fb      	adds	r3, r7, r3
 80026b8:	2201      	movs	r2, #1
 80026ba:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4013      	ands	r3, r2
 80026c4:	d00c      	beq.n	80026e0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	2202      	movs	r2, #2
 80026ca:	4313      	orrs	r3, r2
 80026cc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2280      	movs	r2, #128	; 0x80
 80026d4:	0092      	lsls	r2, r2, #2
 80026d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026d8:	2327      	movs	r3, #39	; 0x27
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80026e0:	2327      	movs	r3, #39	; 0x27
 80026e2:	18fb      	adds	r3, r7, r3
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d01d      	beq.n	8002726 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7ff fe28 	bl	8002342 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	490d      	ldr	r1, [pc, #52]	; (8002734 <I2C_IsErrorOccurred+0x1fc>)
 80026fe:	400a      	ands	r2, r1
 8002700:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	431a      	orrs	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2241      	movs	r2, #65	; 0x41
 8002712:	2120      	movs	r1, #32
 8002714:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2242      	movs	r2, #66	; 0x42
 800271a:	2100      	movs	r1, #0
 800271c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2240      	movs	r2, #64	; 0x40
 8002722:	2100      	movs	r1, #0
 8002724:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002726:	2327      	movs	r3, #39	; 0x27
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	781b      	ldrb	r3, [r3, #0]
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b00b      	add	sp, #44	; 0x2c
 8002732:	bd90      	pop	{r4, r7, pc}
 8002734:	fe00e800 	.word	0xfe00e800

08002738 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	0008      	movs	r0, r1
 8002742:	0011      	movs	r1, r2
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	240a      	movs	r4, #10
 8002748:	193b      	adds	r3, r7, r4
 800274a:	1c02      	adds	r2, r0, #0
 800274c:	801a      	strh	r2, [r3, #0]
 800274e:	2009      	movs	r0, #9
 8002750:	183b      	adds	r3, r7, r0
 8002752:	1c0a      	adds	r2, r1, #0
 8002754:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002756:	193b      	adds	r3, r7, r4
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	059b      	lsls	r3, r3, #22
 800275c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800275e:	183b      	adds	r3, r7, r0
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	0419      	lsls	r1, r3, #16
 8002764:	23ff      	movs	r3, #255	; 0xff
 8002766:	041b      	lsls	r3, r3, #16
 8002768:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800276a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	4313      	orrs	r3, r2
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	085b      	lsrs	r3, r3, #1
 8002778:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002782:	0d51      	lsrs	r1, r2, #21
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	00d2      	lsls	r2, r2, #3
 8002788:	400a      	ands	r2, r1
 800278a:	4907      	ldr	r1, [pc, #28]	; (80027a8 <I2C_TransferConfig+0x70>)
 800278c:	430a      	orrs	r2, r1
 800278e:	43d2      	mvns	r2, r2
 8002790:	401a      	ands	r2, r3
 8002792:	0011      	movs	r1, r2
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b007      	add	sp, #28
 80027a4:	bd90      	pop	{r4, r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	03ff63ff 	.word	0x03ff63ff

080027ac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	000a      	movs	r2, r1
 80027b6:	1cbb      	adds	r3, r7, #2
 80027b8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80027be:	1cbb      	adds	r3, r7, #2
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	2201      	movs	r2, #1
 80027c4:	4013      	ands	r3, r2
 80027c6:	d010      	beq.n	80027ea <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2242      	movs	r2, #66	; 0x42
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2241      	movs	r2, #65	; 0x41
 80027d4:	5c9b      	ldrb	r3, [r3, r2]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	001a      	movs	r2, r3
 80027da:	2328      	movs	r3, #40	; 0x28
 80027dc:	4013      	ands	r3, r2
 80027de:	2b28      	cmp	r3, #40	; 0x28
 80027e0:	d003      	beq.n	80027ea <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	22b0      	movs	r2, #176	; 0xb0
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80027ea:	1cbb      	adds	r3, r7, #2
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	2202      	movs	r2, #2
 80027f0:	4013      	ands	r3, r2
 80027f2:	d010      	beq.n	8002816 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2244      	movs	r2, #68	; 0x44
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2241      	movs	r2, #65	; 0x41
 8002800:	5c9b      	ldrb	r3, [r3, r2]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	001a      	movs	r2, r3
 8002806:	2328      	movs	r3, #40	; 0x28
 8002808:	4013      	ands	r3, r2
 800280a:	2b28      	cmp	r3, #40	; 0x28
 800280c:	d003      	beq.n	8002816 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	22b0      	movs	r2, #176	; 0xb0
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002816:	1cbb      	adds	r3, r7, #2
 8002818:	2200      	movs	r2, #0
 800281a:	5e9b      	ldrsh	r3, [r3, r2]
 800281c:	2b00      	cmp	r3, #0
 800281e:	da03      	bge.n	8002828 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	22b8      	movs	r2, #184	; 0xb8
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002828:	1cbb      	adds	r3, r7, #2
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	2b10      	cmp	r3, #16
 800282e:	d103      	bne.n	8002838 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2290      	movs	r2, #144	; 0x90
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002838:	1cbb      	adds	r3, r7, #2
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	2b20      	cmp	r3, #32
 800283e:	d103      	bne.n	8002848 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002848:	1cbb      	adds	r3, r7, #2
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d103      	bne.n	8002858 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2240      	movs	r2, #64	; 0x40
 8002854:	4313      	orrs	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	43d9      	mvns	r1, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	400a      	ands	r2, r1
 8002868:	601a      	str	r2, [r3, #0]
}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	46bd      	mov	sp, r7
 800286e:	b004      	add	sp, #16
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2241      	movs	r2, #65	; 0x41
 8002882:	5c9b      	ldrb	r3, [r3, r2]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b20      	cmp	r3, #32
 8002888:	d138      	bne.n	80028fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2240      	movs	r2, #64	; 0x40
 800288e:	5c9b      	ldrb	r3, [r3, r2]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002894:	2302      	movs	r3, #2
 8002896:	e032      	b.n	80028fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2240      	movs	r2, #64	; 0x40
 800289c:	2101      	movs	r1, #1
 800289e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2241      	movs	r2, #65	; 0x41
 80028a4:	2124      	movs	r1, #36	; 0x24
 80028a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2101      	movs	r1, #1
 80028b4:	438a      	bics	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4911      	ldr	r1, [pc, #68]	; (8002908 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80028c4:	400a      	ands	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6819      	ldr	r1, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2101      	movs	r1, #1
 80028e4:	430a      	orrs	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2241      	movs	r2, #65	; 0x41
 80028ec:	2120      	movs	r1, #32
 80028ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2240      	movs	r2, #64	; 0x40
 80028f4:	2100      	movs	r1, #0
 80028f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	e000      	b.n	80028fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028fc:	2302      	movs	r3, #2
  }
}
 80028fe:	0018      	movs	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	b002      	add	sp, #8
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	ffffefff 	.word	0xffffefff

0800290c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2241      	movs	r2, #65	; 0x41
 800291a:	5c9b      	ldrb	r3, [r3, r2]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b20      	cmp	r3, #32
 8002920:	d139      	bne.n	8002996 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2240      	movs	r2, #64	; 0x40
 8002926:	5c9b      	ldrb	r3, [r3, r2]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800292c:	2302      	movs	r3, #2
 800292e:	e033      	b.n	8002998 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2240      	movs	r2, #64	; 0x40
 8002934:	2101      	movs	r1, #1
 8002936:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2241      	movs	r2, #65	; 0x41
 800293c:	2124      	movs	r1, #36	; 0x24
 800293e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2101      	movs	r1, #1
 800294c:	438a      	bics	r2, r1
 800294e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800295c:	4013      	ands	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2101      	movs	r1, #1
 800297e:	430a      	orrs	r2, r1
 8002980:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2241      	movs	r2, #65	; 0x41
 8002986:	2120      	movs	r1, #32
 8002988:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2240      	movs	r2, #64	; 0x40
 800298e:	2100      	movs	r1, #0
 8002990:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	e000      	b.n	8002998 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002996:	2302      	movs	r3, #2
  }
}
 8002998:	0018      	movs	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	b004      	add	sp, #16
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	fffff0ff 	.word	0xfffff0ff

080029a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a19      	ldr	r2, [pc, #100]	; (8002a18 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d11f      	bne.n	8002a08 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80029c8:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	0013      	movs	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	189b      	adds	r3, r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4912      	ldr	r1, [pc, #72]	; (8002a20 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80029d6:	0018      	movs	r0, r3
 80029d8:	f7fd fb9e 	bl	8000118 <__udivsi3>
 80029dc:	0003      	movs	r3, r0
 80029de:	3301      	adds	r3, #1
 80029e0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029e2:	e008      	b.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3b01      	subs	r3, #1
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	e001      	b.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e009      	b.n	8002a0a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029f6:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	401a      	ands	r2, r3
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d0ed      	beq.n	80029e4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b004      	add	sp, #16
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	40007000 	.word	0x40007000
 8002a18:	fffff9ff 	.word	0xfffff9ff
 8002a1c:	2000001c 	.word	0x2000001c
 8002a20:	000f4240 	.word	0x000f4240

08002a24 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	23e0      	movs	r3, #224	; 0xe0
 8002a2e:	01db      	lsls	r3, r3, #7
 8002a30:	4013      	ands	r3, r2
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000

08002a3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e2fe      	b.n	800304c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2201      	movs	r2, #1
 8002a54:	4013      	ands	r3, r2
 8002a56:	d100      	bne.n	8002a5a <HAL_RCC_OscConfig+0x1e>
 8002a58:	e07c      	b.n	8002b54 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a5a:	4bc3      	ldr	r3, [pc, #780]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2238      	movs	r2, #56	; 0x38
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a64:	4bc0      	ldr	r3, [pc, #768]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2203      	movs	r2, #3
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b10      	cmp	r3, #16
 8002a72:	d102      	bne.n	8002a7a <HAL_RCC_OscConfig+0x3e>
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d002      	beq.n	8002a80 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d10b      	bne.n	8002a98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a80:	4bb9      	ldr	r3, [pc, #740]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	029b      	lsls	r3, r3, #10
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d062      	beq.n	8002b52 <HAL_RCC_OscConfig+0x116>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d15e      	bne.n	8002b52 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e2d9      	b.n	800304c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	025b      	lsls	r3, r3, #9
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d107      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x78>
 8002aa4:	4bb0      	ldr	r3, [pc, #704]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4baf      	ldr	r3, [pc, #700]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002aaa:	2180      	movs	r1, #128	; 0x80
 8002aac:	0249      	lsls	r1, r1, #9
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e020      	b.n	8002af6 <HAL_RCC_OscConfig+0xba>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	23a0      	movs	r3, #160	; 0xa0
 8002aba:	02db      	lsls	r3, r3, #11
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d10e      	bne.n	8002ade <HAL_RCC_OscConfig+0xa2>
 8002ac0:	4ba9      	ldr	r3, [pc, #676]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4ba8      	ldr	r3, [pc, #672]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002ac6:	2180      	movs	r1, #128	; 0x80
 8002ac8:	02c9      	lsls	r1, r1, #11
 8002aca:	430a      	orrs	r2, r1
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	4ba6      	ldr	r3, [pc, #664]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4ba5      	ldr	r3, [pc, #660]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002ad4:	2180      	movs	r1, #128	; 0x80
 8002ad6:	0249      	lsls	r1, r1, #9
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e00b      	b.n	8002af6 <HAL_RCC_OscConfig+0xba>
 8002ade:	4ba2      	ldr	r3, [pc, #648]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4ba1      	ldr	r3, [pc, #644]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002ae4:	49a1      	ldr	r1, [pc, #644]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002ae6:	400a      	ands	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	4b9f      	ldr	r3, [pc, #636]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b9e      	ldr	r3, [pc, #632]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002af0:	499f      	ldr	r1, [pc, #636]	; (8002d70 <HAL_RCC_OscConfig+0x334>)
 8002af2:	400a      	ands	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d014      	beq.n	8002b28 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afe:	f7fe fa23 	bl	8000f48 <HAL_GetTick>
 8002b02:	0003      	movs	r3, r0
 8002b04:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b08:	f7fe fa1e 	bl	8000f48 <HAL_GetTick>
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	; 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e298      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b1a:	4b93      	ldr	r3, [pc, #588]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	029b      	lsls	r3, r3, #10
 8002b22:	4013      	ands	r3, r2
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0xcc>
 8002b26:	e015      	b.n	8002b54 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7fe fa0e 	bl	8000f48 <HAL_GetTick>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b32:	f7fe fa09 	bl	8000f48 <HAL_GetTick>
 8002b36:	0002      	movs	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b64      	cmp	r3, #100	; 0x64
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e283      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b44:	4b88      	ldr	r3, [pc, #544]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	029b      	lsls	r3, r3, #10
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d1f0      	bne.n	8002b32 <HAL_RCC_OscConfig+0xf6>
 8002b50:	e000      	b.n	8002b54 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b52:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d100      	bne.n	8002b60 <HAL_RCC_OscConfig+0x124>
 8002b5e:	e099      	b.n	8002c94 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b60:	4b81      	ldr	r3, [pc, #516]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2238      	movs	r2, #56	; 0x38
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b6a:	4b7f      	ldr	r3, [pc, #508]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	2203      	movs	r2, #3
 8002b70:	4013      	ands	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2b10      	cmp	r3, #16
 8002b78:	d102      	bne.n	8002b80 <HAL_RCC_OscConfig+0x144>
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d002      	beq.n	8002b86 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d135      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b86:	4b78      	ldr	r3, [pc, #480]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d005      	beq.n	8002b9e <HAL_RCC_OscConfig+0x162>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e256      	b.n	800304c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9e:	4b72      	ldr	r3, [pc, #456]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	4a74      	ldr	r2, [pc, #464]	; (8002d74 <HAL_RCC_OscConfig+0x338>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	021a      	lsls	r2, r3, #8
 8002bae:	4b6e      	ldr	r3, [pc, #440]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d112      	bne.n	8002be0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bba:	4b6b      	ldr	r3, [pc, #428]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a6e      	ldr	r2, [pc, #440]	; (8002d78 <HAL_RCC_OscConfig+0x33c>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	4b67      	ldr	r3, [pc, #412]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002bce:	4b66      	ldr	r3, [pc, #408]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0adb      	lsrs	r3, r3, #11
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	4a68      	ldr	r2, [pc, #416]	; (8002d7c <HAL_RCC_OscConfig+0x340>)
 8002bda:	40da      	lsrs	r2, r3
 8002bdc:	4b68      	ldr	r3, [pc, #416]	; (8002d80 <HAL_RCC_OscConfig+0x344>)
 8002bde:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002be0:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <HAL_RCC_OscConfig+0x348>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0018      	movs	r0, r3
 8002be6:	f7fe f953 	bl	8000e90 <HAL_InitTick>
 8002bea:	1e03      	subs	r3, r0, #0
 8002bec:	d051      	beq.n	8002c92 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e22c      	b.n	800304c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d030      	beq.n	8002c5c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bfa:	4b5b      	ldr	r3, [pc, #364]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a5e      	ldr	r2, [pc, #376]	; (8002d78 <HAL_RCC_OscConfig+0x33c>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	0019      	movs	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	4b57      	ldr	r3, [pc, #348]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002c0e:	4b56      	ldr	r3, [pc, #344]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4b55      	ldr	r3, [pc, #340]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002c14:	2180      	movs	r1, #128	; 0x80
 8002c16:	0049      	lsls	r1, r1, #1
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe f994 	bl	8000f48 <HAL_GetTick>
 8002c20:	0003      	movs	r3, r0
 8002c22:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c26:	f7fe f98f 	bl	8000f48 <HAL_GetTick>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e209      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c38:	4b4b      	ldr	r3, [pc, #300]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4013      	ands	r3, r2
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4b48      	ldr	r3, [pc, #288]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	4a4a      	ldr	r2, [pc, #296]	; (8002d74 <HAL_RCC_OscConfig+0x338>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	021a      	lsls	r2, r3, #8
 8002c54:	4b44      	ldr	r3, [pc, #272]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	e01b      	b.n	8002c94 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002c5c:	4b42      	ldr	r3, [pc, #264]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002c62:	4949      	ldr	r1, [pc, #292]	; (8002d88 <HAL_RCC_OscConfig+0x34c>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe f96e 	bl	8000f48 <HAL_GetTick>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c72:	f7fe f969 	bl	8000f48 <HAL_GetTick>
 8002c76:	0002      	movs	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e1e3      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c84:	4b38      	ldr	r3, [pc, #224]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d1f0      	bne.n	8002c72 <HAL_RCC_OscConfig+0x236>
 8002c90:	e000      	b.n	8002c94 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c92:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2208      	movs	r2, #8
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d047      	beq.n	8002d2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c9e:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2238      	movs	r2, #56	; 0x38
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b18      	cmp	r3, #24
 8002ca8:	d10a      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002caa:	4b2f      	ldr	r3, [pc, #188]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cae:	2202      	movs	r2, #2
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d03c      	beq.n	8002d2e <HAL_RCC_OscConfig+0x2f2>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d138      	bne.n	8002d2e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e1c5      	b.n	800304c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d019      	beq.n	8002cfc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002cc8:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002cca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ccc:	4b26      	ldr	r3, [pc, #152]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002cce:	2101      	movs	r1, #1
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe f938 	bl	8000f48 <HAL_GetTick>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cde:	f7fe f933 	bl	8000f48 <HAL_GetTick>
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e1ad      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d0f1      	beq.n	8002cde <HAL_RCC_OscConfig+0x2a2>
 8002cfa:	e018      	b.n	8002d2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002cfc:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002cfe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002d02:	2101      	movs	r1, #1
 8002d04:	438a      	bics	r2, r1
 8002d06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fe f91e 	bl	8000f48 <HAL_GetTick>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d12:	f7fe f919 	bl	8000f48 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e193      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d24:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d28:	2202      	movs	r2, #2
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d1f1      	bne.n	8002d12 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2204      	movs	r2, #4
 8002d34:	4013      	ands	r3, r2
 8002d36:	d100      	bne.n	8002d3a <HAL_RCC_OscConfig+0x2fe>
 8002d38:	e0c6      	b.n	8002ec8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3a:	231f      	movs	r3, #31
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2238      	movs	r2, #56	; 0x38
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d11e      	bne.n	8002d8c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_RCC_OscConfig+0x32c>)
 8002d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d52:	2202      	movs	r2, #2
 8002d54:	4013      	ands	r3, r2
 8002d56:	d100      	bne.n	8002d5a <HAL_RCC_OscConfig+0x31e>
 8002d58:	e0b6      	b.n	8002ec8 <HAL_RCC_OscConfig+0x48c>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d000      	beq.n	8002d64 <HAL_RCC_OscConfig+0x328>
 8002d62:	e0b1      	b.n	8002ec8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e171      	b.n	800304c <HAL_RCC_OscConfig+0x610>
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	fffeffff 	.word	0xfffeffff
 8002d70:	fffbffff 	.word	0xfffbffff
 8002d74:	ffff80ff 	.word	0xffff80ff
 8002d78:	ffffc7ff 	.word	0xffffc7ff
 8002d7c:	00f42400 	.word	0x00f42400
 8002d80:	2000001c 	.word	0x2000001c
 8002d84:	20000020 	.word	0x20000020
 8002d88:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d8c:	4bb1      	ldr	r3, [pc, #708]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	055b      	lsls	r3, r3, #21
 8002d94:	4013      	ands	r3, r2
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_OscConfig+0x360>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <HAL_RCC_OscConfig+0x362>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d011      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002da2:	4bac      	ldr	r3, [pc, #688]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002da4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002da6:	4bab      	ldr	r3, [pc, #684]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002da8:	2180      	movs	r1, #128	; 0x80
 8002daa:	0549      	lsls	r1, r1, #21
 8002dac:	430a      	orrs	r2, r1
 8002dae:	63da      	str	r2, [r3, #60]	; 0x3c
 8002db0:	4ba8      	ldr	r3, [pc, #672]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002db2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	055b      	lsls	r3, r3, #21
 8002db8:	4013      	ands	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002dbe:	231f      	movs	r3, #31
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dc6:	4ba4      	ldr	r3, [pc, #656]	; (8003058 <HAL_RCC_OscConfig+0x61c>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d11a      	bne.n	8002e08 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dd2:	4ba1      	ldr	r3, [pc, #644]	; (8003058 <HAL_RCC_OscConfig+0x61c>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	4ba0      	ldr	r3, [pc, #640]	; (8003058 <HAL_RCC_OscConfig+0x61c>)
 8002dd8:	2180      	movs	r1, #128	; 0x80
 8002dda:	0049      	lsls	r1, r1, #1
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002de0:	f7fe f8b2 	bl	8000f48 <HAL_GetTick>
 8002de4:	0003      	movs	r3, r0
 8002de6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dea:	f7fe f8ad 	bl	8000f48 <HAL_GetTick>
 8002dee:	0002      	movs	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e127      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dfc:	4b96      	ldr	r3, [pc, #600]	; (8003058 <HAL_RCC_OscConfig+0x61c>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4013      	ands	r3, r2
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_OscConfig+0x3e2>
 8002e10:	4b90      	ldr	r3, [pc, #576]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e14:	4b8f      	ldr	r3, [pc, #572]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e16:	2101      	movs	r1, #1
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e1c:	e01c      	b.n	8002e58 <HAL_RCC_OscConfig+0x41c>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b05      	cmp	r3, #5
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCC_OscConfig+0x404>
 8002e26:	4b8b      	ldr	r3, [pc, #556]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e2a:	4b8a      	ldr	r3, [pc, #552]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e2c:	2104      	movs	r1, #4
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e32:	4b88      	ldr	r3, [pc, #544]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e36:	4b87      	ldr	r3, [pc, #540]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e38:	2101      	movs	r1, #1
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e3e:	e00b      	b.n	8002e58 <HAL_RCC_OscConfig+0x41c>
 8002e40:	4b84      	ldr	r3, [pc, #528]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e44:	4b83      	ldr	r3, [pc, #524]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e46:	2101      	movs	r1, #1
 8002e48:	438a      	bics	r2, r1
 8002e4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e4c:	4b81      	ldr	r3, [pc, #516]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e50:	4b80      	ldr	r3, [pc, #512]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e52:	2104      	movs	r1, #4
 8002e54:	438a      	bics	r2, r1
 8002e56:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d014      	beq.n	8002e8a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fe f872 	bl	8000f48 <HAL_GetTick>
 8002e64:	0003      	movs	r3, r0
 8002e66:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e68:	e009      	b.n	8002e7e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fe f86d 	bl	8000f48 <HAL_GetTick>
 8002e6e:	0002      	movs	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	4a79      	ldr	r2, [pc, #484]	; (800305c <HAL_RCC_OscConfig+0x620>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e0e6      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7e:	4b75      	ldr	r3, [pc, #468]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	2202      	movs	r2, #2
 8002e84:	4013      	ands	r3, r2
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x42e>
 8002e88:	e013      	b.n	8002eb2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7fe f85d 	bl	8000f48 <HAL_GetTick>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e92:	e009      	b.n	8002ea8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e94:	f7fe f858 	bl	8000f48 <HAL_GetTick>
 8002e98:	0002      	movs	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	4a6f      	ldr	r2, [pc, #444]	; (800305c <HAL_RCC_OscConfig+0x620>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e0d1      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ea8:	4b6a      	ldr	r3, [pc, #424]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	2202      	movs	r2, #2
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002eb2:	231f      	movs	r3, #31
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d105      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002ebc:	4b65      	ldr	r3, [pc, #404]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ec0:	4b64      	ldr	r3, [pc, #400]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002ec2:	4967      	ldr	r1, [pc, #412]	; (8003060 <HAL_RCC_OscConfig+0x624>)
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d100      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x496>
 8002ed0:	e0bb      	b.n	800304a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ed2:	4b60      	ldr	r3, [pc, #384]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2238      	movs	r2, #56	; 0x38
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d100      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4a4>
 8002ede:	e07b      	b.n	8002fd8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d156      	bne.n	8002f96 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee8:	4b5a      	ldr	r3, [pc, #360]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b59      	ldr	r3, [pc, #356]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002eee:	495d      	ldr	r1, [pc, #372]	; (8003064 <HAL_RCC_OscConfig+0x628>)
 8002ef0:	400a      	ands	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7fe f828 	bl	8000f48 <HAL_GetTick>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efe:	f7fe f823 	bl	8000f48 <HAL_GetTick>
 8002f02:	0002      	movs	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e09d      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f10:	4b50      	ldr	r3, [pc, #320]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	049b      	lsls	r3, r3, #18
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d1f0      	bne.n	8002efe <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f1c:	4b4d      	ldr	r3, [pc, #308]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4a51      	ldr	r2, [pc, #324]	; (8003068 <HAL_RCC_OscConfig+0x62c>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1a      	ldr	r2, [r3, #32]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	4b42      	ldr	r3, [pc, #264]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f50:	4b40      	ldr	r3, [pc, #256]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f56:	2180      	movs	r1, #128	; 0x80
 8002f58:	0449      	lsls	r1, r1, #17
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002f5e:	4b3d      	ldr	r3, [pc, #244]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	4b3c      	ldr	r3, [pc, #240]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	0549      	lsls	r1, r1, #21
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fd ffec 	bl	8000f48 <HAL_GetTick>
 8002f70:	0003      	movs	r3, r0
 8002f72:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f76:	f7fd ffe7 	bl	8000f48 <HAL_GetTick>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e061      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f88:	4b32      	ldr	r3, [pc, #200]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	049b      	lsls	r3, r3, #18
 8002f90:	4013      	ands	r3, r2
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x53a>
 8002f94:	e059      	b.n	800304a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f96:	4b2f      	ldr	r3, [pc, #188]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002f9c:	4931      	ldr	r1, [pc, #196]	; (8003064 <HAL_RCC_OscConfig+0x628>)
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa2:	f7fd ffd1 	bl	8000f48 <HAL_GetTick>
 8002fa6:	0003      	movs	r3, r0
 8002fa8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fd ffcc 	bl	8000f48 <HAL_GetTick>
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e046      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fbe:	4b25      	ldr	r3, [pc, #148]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	049b      	lsls	r3, r3, #18
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002fca:	4b22      	ldr	r3, [pc, #136]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	4b21      	ldr	r3, [pc, #132]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002fd0:	4926      	ldr	r1, [pc, #152]	; (800306c <HAL_RCC_OscConfig+0x630>)
 8002fd2:	400a      	ands	r2, r1
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	e038      	b.n	800304a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e033      	b.n	800304c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <HAL_RCC_OscConfig+0x618>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2203      	movs	r2, #3
 8002fee:	401a      	ands	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d126      	bne.n	8003046 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2270      	movs	r2, #112	; 0x70
 8002ffc:	401a      	ands	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003002:	429a      	cmp	r2, r3
 8003004:	d11f      	bne.n	8003046 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	23fe      	movs	r3, #254	; 0xfe
 800300a:	01db      	lsls	r3, r3, #7
 800300c:	401a      	ands	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003014:	429a      	cmp	r2, r3
 8003016:	d116      	bne.n	8003046 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	23f8      	movs	r3, #248	; 0xf8
 800301c:	039b      	lsls	r3, r3, #14
 800301e:	401a      	ands	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d10e      	bne.n	8003046 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	23e0      	movs	r3, #224	; 0xe0
 800302c:	051b      	lsls	r3, r3, #20
 800302e:	401a      	ands	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	0f5b      	lsrs	r3, r3, #29
 800303c:	075a      	lsls	r2, r3, #29
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003042:	429a      	cmp	r2, r3
 8003044:	d001      	beq.n	800304a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b008      	add	sp, #32
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	40007000 	.word	0x40007000
 800305c:	00001388 	.word	0x00001388
 8003060:	efffffff 	.word	0xefffffff
 8003064:	feffffff 	.word	0xfeffffff
 8003068:	11c1808c 	.word	0x11c1808c
 800306c:	eefefffc 	.word	0xeefefffc

08003070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0e9      	b.n	8003258 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003084:	4b76      	ldr	r3, [pc, #472]	; (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2207      	movs	r2, #7
 800308a:	4013      	ands	r3, r2
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d91e      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b73      	ldr	r3, [pc, #460]	; (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2207      	movs	r2, #7
 8003098:	4393      	bics	r3, r2
 800309a:	0019      	movs	r1, r3
 800309c:	4b70      	ldr	r3, [pc, #448]	; (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030a4:	f7fd ff50 	bl	8000f48 <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030ac:	e009      	b.n	80030c2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ae:	f7fd ff4b 	bl	8000f48 <HAL_GetTick>
 80030b2:	0002      	movs	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	4a6a      	ldr	r2, [pc, #424]	; (8003264 <HAL_RCC_ClockConfig+0x1f4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e0ca      	b.n	8003258 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030c2:	4b67      	ldr	r3, [pc, #412]	; (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2207      	movs	r2, #7
 80030c8:	4013      	ands	r3, r2
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d1ee      	bne.n	80030ae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2202      	movs	r2, #2
 80030d6:	4013      	ands	r3, r2
 80030d8:	d015      	beq.n	8003106 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2204      	movs	r2, #4
 80030e0:	4013      	ands	r3, r2
 80030e2:	d006      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80030e4:	4b60      	ldr	r3, [pc, #384]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	4b5f      	ldr	r3, [pc, #380]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 80030ea:	21e0      	movs	r1, #224	; 0xe0
 80030ec:	01c9      	lsls	r1, r1, #7
 80030ee:	430a      	orrs	r2, r1
 80030f0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f2:	4b5d      	ldr	r3, [pc, #372]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	4a5d      	ldr	r2, [pc, #372]	; (800326c <HAL_RCC_ClockConfig+0x1fc>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	0019      	movs	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	4b59      	ldr	r3, [pc, #356]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 8003102:	430a      	orrs	r2, r1
 8003104:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2201      	movs	r2, #1
 800310c:	4013      	ands	r3, r2
 800310e:	d057      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d107      	bne.n	8003128 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003118:	4b53      	ldr	r3, [pc, #332]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	029b      	lsls	r3, r3, #10
 8003120:	4013      	ands	r3, r2
 8003122:	d12b      	bne.n	800317c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e097      	b.n	8003258 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d107      	bne.n	8003140 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003130:	4b4d      	ldr	r3, [pc, #308]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	049b      	lsls	r3, r3, #18
 8003138:	4013      	ands	r3, r2
 800313a:	d11f      	bne.n	800317c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e08b      	b.n	8003258 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d107      	bne.n	8003158 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003148:	4b47      	ldr	r3, [pc, #284]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4013      	ands	r3, r2
 8003152:	d113      	bne.n	800317c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e07f      	b.n	8003258 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b03      	cmp	r3, #3
 800315e:	d106      	bne.n	800316e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003160:	4b41      	ldr	r3, [pc, #260]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 8003162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003164:	2202      	movs	r2, #2
 8003166:	4013      	ands	r3, r2
 8003168:	d108      	bne.n	800317c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e074      	b.n	8003258 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800316e:	4b3e      	ldr	r3, [pc, #248]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 8003170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003172:	2202      	movs	r2, #2
 8003174:	4013      	ands	r3, r2
 8003176:	d101      	bne.n	800317c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e06d      	b.n	8003258 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800317c:	4b3a      	ldr	r3, [pc, #232]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2207      	movs	r2, #7
 8003182:	4393      	bics	r3, r2
 8003184:	0019      	movs	r1, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	4b37      	ldr	r3, [pc, #220]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 800318c:	430a      	orrs	r2, r1
 800318e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003190:	f7fd feda 	bl	8000f48 <HAL_GetTick>
 8003194:	0003      	movs	r3, r0
 8003196:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003198:	e009      	b.n	80031ae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319a:	f7fd fed5 	bl	8000f48 <HAL_GetTick>
 800319e:	0002      	movs	r2, r0
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	4a2f      	ldr	r2, [pc, #188]	; (8003264 <HAL_RCC_ClockConfig+0x1f4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e054      	b.n	8003258 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2238      	movs	r2, #56	; 0x38
 80031b4:	401a      	ands	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	429a      	cmp	r2, r3
 80031be:	d1ec      	bne.n	800319a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031c0:	4b27      	ldr	r3, [pc, #156]	; (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2207      	movs	r2, #7
 80031c6:	4013      	ands	r3, r2
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d21e      	bcs.n	800320c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2207      	movs	r2, #7
 80031d4:	4393      	bics	r3, r2
 80031d6:	0019      	movs	r1, r3
 80031d8:	4b21      	ldr	r3, [pc, #132]	; (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031e0:	f7fd feb2 	bl	8000f48 <HAL_GetTick>
 80031e4:	0003      	movs	r3, r0
 80031e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031e8:	e009      	b.n	80031fe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ea:	f7fd fead 	bl	8000f48 <HAL_GetTick>
 80031ee:	0002      	movs	r2, r0
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <HAL_RCC_ClockConfig+0x1f4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e02c      	b.n	8003258 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031fe:	4b18      	ldr	r3, [pc, #96]	; (8003260 <HAL_RCC_ClockConfig+0x1f0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2207      	movs	r2, #7
 8003204:	4013      	ands	r3, r2
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d1ee      	bne.n	80031ea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2204      	movs	r2, #4
 8003212:	4013      	ands	r3, r2
 8003214:	d009      	beq.n	800322a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	4a15      	ldr	r2, [pc, #84]	; (8003270 <HAL_RCC_ClockConfig+0x200>)
 800321c:	4013      	ands	r3, r2
 800321e:	0019      	movs	r1, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 8003226:	430a      	orrs	r2, r1
 8003228:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800322a:	f000 f829 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 800322e:	0001      	movs	r1, r0
 8003230:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <HAL_RCC_ClockConfig+0x1f8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	220f      	movs	r2, #15
 8003238:	401a      	ands	r2, r3
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <HAL_RCC_ClockConfig+0x204>)
 800323c:	0092      	lsls	r2, r2, #2
 800323e:	58d3      	ldr	r3, [r2, r3]
 8003240:	221f      	movs	r2, #31
 8003242:	4013      	ands	r3, r2
 8003244:	000a      	movs	r2, r1
 8003246:	40da      	lsrs	r2, r3
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_RCC_ClockConfig+0x208>)
 800324a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HAL_RCC_ClockConfig+0x20c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0018      	movs	r0, r3
 8003252:	f7fd fe1d 	bl	8000e90 <HAL_InitTick>
 8003256:	0003      	movs	r3, r0
}
 8003258:	0018      	movs	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	b004      	add	sp, #16
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40022000 	.word	0x40022000
 8003264:	00001388 	.word	0x00001388
 8003268:	40021000 	.word	0x40021000
 800326c:	fffff0ff 	.word	0xfffff0ff
 8003270:	ffff8fff 	.word	0xffff8fff
 8003274:	08005a18 	.word	0x08005a18
 8003278:	2000001c 	.word	0x2000001c
 800327c:	20000020 	.word	0x20000020

08003280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003286:	4b3c      	ldr	r3, [pc, #240]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2238      	movs	r2, #56	; 0x38
 800328c:	4013      	ands	r3, r2
 800328e:	d10f      	bne.n	80032b0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003290:	4b39      	ldr	r3, [pc, #228]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	0adb      	lsrs	r3, r3, #11
 8003296:	2207      	movs	r2, #7
 8003298:	4013      	ands	r3, r2
 800329a:	2201      	movs	r2, #1
 800329c:	409a      	lsls	r2, r3
 800329e:	0013      	movs	r3, r2
 80032a0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80032a2:	6839      	ldr	r1, [r7, #0]
 80032a4:	4835      	ldr	r0, [pc, #212]	; (800337c <HAL_RCC_GetSysClockFreq+0xfc>)
 80032a6:	f7fc ff37 	bl	8000118 <__udivsi3>
 80032aa:	0003      	movs	r3, r0
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	e05d      	b.n	800336c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032b0:	4b31      	ldr	r3, [pc, #196]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2238      	movs	r2, #56	; 0x38
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d102      	bne.n	80032c2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032bc:	4b30      	ldr	r3, [pc, #192]	; (8003380 <HAL_RCC_GetSysClockFreq+0x100>)
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	e054      	b.n	800336c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c2:	4b2d      	ldr	r3, [pc, #180]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2238      	movs	r2, #56	; 0x38
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d138      	bne.n	8003340 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80032ce:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2203      	movs	r2, #3
 80032d4:	4013      	ands	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032d8:	4b27      	ldr	r3, [pc, #156]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	2207      	movs	r2, #7
 80032e0:	4013      	ands	r3, r2
 80032e2:	3301      	adds	r3, #1
 80032e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d10d      	bne.n	8003308 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	4824      	ldr	r0, [pc, #144]	; (8003380 <HAL_RCC_GetSysClockFreq+0x100>)
 80032f0:	f7fc ff12 	bl	8000118 <__udivsi3>
 80032f4:	0003      	movs	r3, r0
 80032f6:	0019      	movs	r1, r3
 80032f8:	4b1f      	ldr	r3, [pc, #124]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	227f      	movs	r2, #127	; 0x7f
 8003300:	4013      	ands	r3, r2
 8003302:	434b      	muls	r3, r1
 8003304:	617b      	str	r3, [r7, #20]
        break;
 8003306:	e00d      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	481c      	ldr	r0, [pc, #112]	; (800337c <HAL_RCC_GetSysClockFreq+0xfc>)
 800330c:	f7fc ff04 	bl	8000118 <__udivsi3>
 8003310:	0003      	movs	r3, r0
 8003312:	0019      	movs	r1, r3
 8003314:	4b18      	ldr	r3, [pc, #96]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	0a1b      	lsrs	r3, r3, #8
 800331a:	227f      	movs	r2, #127	; 0x7f
 800331c:	4013      	ands	r3, r2
 800331e:	434b      	muls	r3, r1
 8003320:	617b      	str	r3, [r7, #20]
        break;
 8003322:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003324:	4b14      	ldr	r3, [pc, #80]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	0f5b      	lsrs	r3, r3, #29
 800332a:	2207      	movs	r2, #7
 800332c:	4013      	ands	r3, r2
 800332e:	3301      	adds	r3, #1
 8003330:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	6978      	ldr	r0, [r7, #20]
 8003336:	f7fc feef 	bl	8000118 <__udivsi3>
 800333a:	0003      	movs	r3, r0
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	e015      	b.n	800336c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003340:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2238      	movs	r2, #56	; 0x38
 8003346:	4013      	ands	r3, r2
 8003348:	2b20      	cmp	r3, #32
 800334a:	d103      	bne.n	8003354 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	e00b      	b.n	800336c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2238      	movs	r2, #56	; 0x38
 800335a:	4013      	ands	r3, r2
 800335c:	2b18      	cmp	r3, #24
 800335e:	d103      	bne.n	8003368 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003360:	23fa      	movs	r3, #250	; 0xfa
 8003362:	01db      	lsls	r3, r3, #7
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	e001      	b.n	800336c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800336c:	693b      	ldr	r3, [r7, #16]
}
 800336e:	0018      	movs	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	b006      	add	sp, #24
 8003374:	bd80      	pop	{r7, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	40021000 	.word	0x40021000
 800337c:	00f42400 	.word	0x00f42400
 8003380:	007a1200 	.word	0x007a1200

08003384 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003388:	4b02      	ldr	r3, [pc, #8]	; (8003394 <HAL_RCC_GetHCLKFreq+0x10>)
 800338a:	681b      	ldr	r3, [r3, #0]
}
 800338c:	0018      	movs	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	2000001c 	.word	0x2000001c

08003398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003398:	b5b0      	push	{r4, r5, r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800339c:	f7ff fff2 	bl	8003384 <HAL_RCC_GetHCLKFreq>
 80033a0:	0004      	movs	r4, r0
 80033a2:	f7ff fb3f 	bl	8002a24 <LL_RCC_GetAPB1Prescaler>
 80033a6:	0003      	movs	r3, r0
 80033a8:	0b1a      	lsrs	r2, r3, #12
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033ac:	0092      	lsls	r2, r2, #2
 80033ae:	58d3      	ldr	r3, [r2, r3]
 80033b0:	221f      	movs	r2, #31
 80033b2:	4013      	ands	r3, r2
 80033b4:	40dc      	lsrs	r4, r3
 80033b6:	0023      	movs	r3, r4
}
 80033b8:	0018      	movs	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bdb0      	pop	{r4, r5, r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	08005a58 	.word	0x08005a58

080033c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80033cc:	2313      	movs	r3, #19
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	2200      	movs	r2, #0
 80033d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033d4:	2312      	movs	r3, #18
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	029b      	lsls	r3, r3, #10
 80033e4:	4013      	ands	r3, r2
 80033e6:	d100      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x26>
 80033e8:	e0a3      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ea:	2011      	movs	r0, #17
 80033ec:	183b      	adds	r3, r7, r0
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f2:	4ba5      	ldr	r3, [pc, #660]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	055b      	lsls	r3, r3, #21
 80033fa:	4013      	ands	r3, r2
 80033fc:	d110      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fe:	4ba2      	ldr	r3, [pc, #648]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003400:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003402:	4ba1      	ldr	r3, [pc, #644]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003404:	2180      	movs	r1, #128	; 0x80
 8003406:	0549      	lsls	r1, r1, #21
 8003408:	430a      	orrs	r2, r1
 800340a:	63da      	str	r2, [r3, #60]	; 0x3c
 800340c:	4b9e      	ldr	r3, [pc, #632]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800340e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	055b      	lsls	r3, r3, #21
 8003414:	4013      	ands	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341a:	183b      	adds	r3, r7, r0
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003420:	4b9a      	ldr	r3, [pc, #616]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b99      	ldr	r3, [pc, #612]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003426:	2180      	movs	r1, #128	; 0x80
 8003428:	0049      	lsls	r1, r1, #1
 800342a:	430a      	orrs	r2, r1
 800342c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800342e:	f7fd fd8b 	bl	8000f48 <HAL_GetTick>
 8003432:	0003      	movs	r3, r0
 8003434:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003436:	e00b      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003438:	f7fd fd86 	bl	8000f48 <HAL_GetTick>
 800343c:	0002      	movs	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d904      	bls.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003446:	2313      	movs	r3, #19
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	2203      	movs	r2, #3
 800344c:	701a      	strb	r2, [r3, #0]
        break;
 800344e:	e005      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003450:	4b8e      	ldr	r3, [pc, #568]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4013      	ands	r3, r2
 800345a:	d0ed      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800345c:	2313      	movs	r3, #19
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d154      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003466:	4b88      	ldr	r3, [pc, #544]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003468:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800346a:	23c0      	movs	r3, #192	; 0xc0
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4013      	ands	r3, r2
 8003470:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d019      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	429a      	cmp	r2, r3
 8003480:	d014      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003482:	4b81      	ldr	r3, [pc, #516]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	4a82      	ldr	r2, [pc, #520]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003488:	4013      	ands	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800348c:	4b7e      	ldr	r3, [pc, #504]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800348e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003490:	4b7d      	ldr	r3, [pc, #500]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003492:	2180      	movs	r1, #128	; 0x80
 8003494:	0249      	lsls	r1, r1, #9
 8003496:	430a      	orrs	r2, r1
 8003498:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800349a:	4b7b      	ldr	r3, [pc, #492]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800349c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800349e:	4b7a      	ldr	r3, [pc, #488]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034a0:	497c      	ldr	r1, [pc, #496]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80034a2:	400a      	ands	r2, r1
 80034a4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034a6:	4b78      	ldr	r3, [pc, #480]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2201      	movs	r2, #1
 80034b0:	4013      	ands	r3, r2
 80034b2:	d016      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fd fd48 	bl	8000f48 <HAL_GetTick>
 80034b8:	0003      	movs	r3, r0
 80034ba:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034bc:	e00c      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034be:	f7fd fd43 	bl	8000f48 <HAL_GetTick>
 80034c2:	0002      	movs	r2, r0
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	4a73      	ldr	r2, [pc, #460]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d904      	bls.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80034ce:	2313      	movs	r3, #19
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	2203      	movs	r2, #3
 80034d4:	701a      	strb	r2, [r3, #0]
            break;
 80034d6:	e004      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d8:	4b6b      	ldr	r3, [pc, #428]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034dc:	2202      	movs	r2, #2
 80034de:	4013      	ands	r3, r2
 80034e0:	d0ed      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80034e2:	2313      	movs	r3, #19
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ec:	4b66      	ldr	r3, [pc, #408]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	4a67      	ldr	r2, [pc, #412]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	0019      	movs	r1, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034fa:	4b63      	ldr	r3, [pc, #396]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034fc:	430a      	orrs	r2, r1
 80034fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003500:	e00c      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003502:	2312      	movs	r3, #18
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	2213      	movs	r2, #19
 8003508:	18ba      	adds	r2, r7, r2
 800350a:	7812      	ldrb	r2, [r2, #0]
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	e005      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003510:	2312      	movs	r3, #18
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	2213      	movs	r2, #19
 8003516:	18ba      	adds	r2, r7, r2
 8003518:	7812      	ldrb	r2, [r2, #0]
 800351a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800351c:	2311      	movs	r3, #17
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d105      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003526:	4b58      	ldr	r3, [pc, #352]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352a:	4b57      	ldr	r3, [pc, #348]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800352c:	495b      	ldr	r1, [pc, #364]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800352e:	400a      	ands	r2, r1
 8003530:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2201      	movs	r2, #1
 8003538:	4013      	ands	r3, r2
 800353a:	d009      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800353c:	4b52      	ldr	r3, [pc, #328]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800353e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003540:	2203      	movs	r2, #3
 8003542:	4393      	bics	r3, r2
 8003544:	0019      	movs	r1, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	4b4f      	ldr	r3, [pc, #316]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800354c:	430a      	orrs	r2, r1
 800354e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2210      	movs	r2, #16
 8003556:	4013      	ands	r3, r2
 8003558:	d009      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800355a:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	4a50      	ldr	r2, [pc, #320]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003560:	4013      	ands	r3, r2
 8003562:	0019      	movs	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	4b47      	ldr	r3, [pc, #284]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800356a:	430a      	orrs	r2, r1
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4013      	ands	r3, r2
 8003578:	d009      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800357a:	4b43      	ldr	r3, [pc, #268]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	4a49      	ldr	r2, [pc, #292]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003580:	4013      	ands	r3, r2
 8003582:	0019      	movs	r1, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	695a      	ldr	r2, [r3, #20]
 8003588:	4b3f      	ldr	r3, [pc, #252]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800358a:	430a      	orrs	r2, r1
 800358c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4013      	ands	r3, r2
 8003598:	d009      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800359a:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	4a42      	ldr	r2, [pc, #264]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	0019      	movs	r1, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699a      	ldr	r2, [r3, #24]
 80035a8:	4b37      	ldr	r3, [pc, #220]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035aa:	430a      	orrs	r2, r1
 80035ac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2220      	movs	r2, #32
 80035b4:	4013      	ands	r3, r2
 80035b6:	d009      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035b8:	4b33      	ldr	r3, [pc, #204]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	4a3b      	ldr	r2, [pc, #236]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035be:	4013      	ands	r3, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	4b30      	ldr	r3, [pc, #192]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035c8:	430a      	orrs	r2, r1
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	01db      	lsls	r3, r3, #7
 80035d4:	4013      	ands	r3, r2
 80035d6:	d015      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035d8:	4b2b      	ldr	r3, [pc, #172]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	0899      	lsrs	r1, r3, #2
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69da      	ldr	r2, [r3, #28]
 80035e4:	4b28      	ldr	r3, [pc, #160]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035e6:	430a      	orrs	r2, r1
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	05db      	lsls	r3, r3, #23
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d106      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	4b23      	ldr	r3, [pc, #140]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035fc:	2180      	movs	r1, #128	; 0x80
 80035fe:	0249      	lsls	r1, r1, #9
 8003600:	430a      	orrs	r2, r1
 8003602:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	039b      	lsls	r3, r3, #14
 800360c:	4013      	ands	r3, r2
 800360e:	d016      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003610:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003614:	4a26      	ldr	r2, [pc, #152]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003616:	4013      	ands	r3, r2
 8003618:	0019      	movs	r1, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1a      	ldr	r2, [r3, #32]
 800361e:	4b1a      	ldr	r3, [pc, #104]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003620:	430a      	orrs	r2, r1
 8003622:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1a      	ldr	r2, [r3, #32]
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	03db      	lsls	r3, r3, #15
 800362c:	429a      	cmp	r2, r3
 800362e:	d106      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003630:	4b15      	ldr	r3, [pc, #84]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	4b14      	ldr	r3, [pc, #80]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003636:	2180      	movs	r1, #128	; 0x80
 8003638:	0449      	lsls	r1, r1, #17
 800363a:	430a      	orrs	r2, r1
 800363c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	2380      	movs	r3, #128	; 0x80
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	4013      	ands	r3, r2
 8003648:	d016      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800364a:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800364c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364e:	4a19      	ldr	r2, [pc, #100]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003650:	4013      	ands	r3, r2
 8003652:	0019      	movs	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800365a:	430a      	orrs	r2, r1
 800365c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	01db      	lsls	r3, r3, #7
 8003666:	429a      	cmp	r2, r3
 8003668:	d106      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800366a:	4b07      	ldr	r3, [pc, #28]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003670:	2180      	movs	r1, #128	; 0x80
 8003672:	0249      	lsls	r1, r1, #9
 8003674:	430a      	orrs	r2, r1
 8003676:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003678:	2312      	movs	r3, #18
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	781b      	ldrb	r3, [r3, #0]
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b006      	add	sp, #24
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	40021000 	.word	0x40021000
 800368c:	40007000 	.word	0x40007000
 8003690:	fffffcff 	.word	0xfffffcff
 8003694:	fffeffff 	.word	0xfffeffff
 8003698:	00001388 	.word	0x00001388
 800369c:	efffffff 	.word	0xefffffff
 80036a0:	fffff3ff 	.word	0xfffff3ff
 80036a4:	fff3ffff 	.word	0xfff3ffff
 80036a8:	ffcfffff 	.word	0xffcfffff
 80036ac:	ffffcfff 	.word	0xffffcfff
 80036b0:	ffbfffff 	.word	0xffbfffff
 80036b4:	ffff3fff 	.word	0xffff3fff

080036b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80036b8:	b5b0      	push	{r4, r5, r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036c0:	230f      	movs	r3, #15
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d100      	bne.n	80036d0 <HAL_RTC_Init+0x18>
 80036ce:	e08c      	b.n	80037ea <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2229      	movs	r2, #41	; 0x29
 80036d4:	5c9b      	ldrb	r3, [r3, r2]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10b      	bne.n	80036f4 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2228      	movs	r2, #40	; 0x28
 80036e0:	2100      	movs	r1, #0
 80036e2:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2288      	movs	r2, #136	; 0x88
 80036e8:	0212      	lsls	r2, r2, #8
 80036ea:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	0018      	movs	r0, r3
 80036f0:	f7fd fa2a 	bl	8000b48 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2229      	movs	r2, #41	; 0x29
 80036f8:	2102      	movs	r1, #2
 80036fa:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	2210      	movs	r2, #16
 8003704:	4013      	ands	r3, r2
 8003706:	2b10      	cmp	r3, #16
 8003708:	d062      	beq.n	80037d0 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	22ca      	movs	r2, #202	; 0xca
 8003710:	625a      	str	r2, [r3, #36]	; 0x24
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2253      	movs	r2, #83	; 0x53
 8003718:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800371a:	250f      	movs	r5, #15
 800371c:	197c      	adds	r4, r7, r5
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	0018      	movs	r0, r3
 8003722:	f000 faf2 	bl	8003d0a <RTC_EnterInitMode>
 8003726:	0003      	movs	r3, r0
 8003728:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800372a:	0028      	movs	r0, r5
 800372c:	183b      	adds	r3, r7, r0
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d12c      	bne.n	800378e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	492e      	ldr	r1, [pc, #184]	; (80037f8 <HAL_RTC_Init+0x140>)
 8003740:	400a      	ands	r2, r1
 8003742:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6999      	ldr	r1, [r3, #24]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6912      	ldr	r2, [r2, #16]
 800376a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6919      	ldr	r1, [r3, #16]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	041a      	lsls	r2, r3, #16
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003780:	183c      	adds	r4, r7, r0
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	0018      	movs	r0, r3
 8003786:	f000 fb03 	bl	8003d90 <RTC_ExitInitMode>
 800378a:	0003      	movs	r3, r0
 800378c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800378e:	230f      	movs	r3, #15
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d116      	bne.n	80037c6 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699a      	ldr	r2, [r3, #24]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	00d2      	lsls	r2, r2, #3
 80037a4:	08d2      	lsrs	r2, r2, #3
 80037a6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6999      	ldr	r1, [r3, #24]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	22ff      	movs	r2, #255	; 0xff
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24
 80037ce:	e003      	b.n	80037d8 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80037d0:	230f      	movs	r3, #15
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80037d8:	230f      	movs	r3, #15
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2229      	movs	r2, #41	; 0x29
 80037e6:	2101      	movs	r1, #1
 80037e8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80037ea:	230f      	movs	r3, #15
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	781b      	ldrb	r3, [r3, #0]
}
 80037f0:	0018      	movs	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b004      	add	sp, #16
 80037f6:	bdb0      	pop	{r4, r5, r7, pc}
 80037f8:	fb8fffbf 	.word	0xfb8fffbf

080037fc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037fc:	b5b0      	push	{r4, r5, r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2228      	movs	r2, #40	; 0x28
 800380c:	5c9b      	ldrb	r3, [r3, r2]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_RTC_SetTime+0x1a>
 8003812:	2302      	movs	r3, #2
 8003814:	e092      	b.n	800393c <HAL_RTC_SetTime+0x140>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2228      	movs	r2, #40	; 0x28
 800381a:	2101      	movs	r1, #1
 800381c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2229      	movs	r2, #41	; 0x29
 8003822:	2102      	movs	r1, #2
 8003824:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	22ca      	movs	r2, #202	; 0xca
 800382c:	625a      	str	r2, [r3, #36]	; 0x24
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2253      	movs	r2, #83	; 0x53
 8003834:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003836:	2513      	movs	r5, #19
 8003838:	197c      	adds	r4, r7, r5
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	0018      	movs	r0, r3
 800383e:	f000 fa64 	bl	8003d0a <RTC_EnterInitMode>
 8003842:	0003      	movs	r3, r0
 8003844:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003846:	197b      	adds	r3, r7, r5
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d162      	bne.n	8003914 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d125      	bne.n	80038a0 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2240      	movs	r2, #64	; 0x40
 800385c:	4013      	ands	r3, r2
 800385e:	d102      	bne.n	8003866 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2200      	movs	r2, #0
 8003864:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	0018      	movs	r0, r3
 800386c:	f000 fad4 	bl	8003e18 <RTC_ByteToBcd2>
 8003870:	0003      	movs	r3, r0
 8003872:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	785b      	ldrb	r3, [r3, #1]
 8003878:	0018      	movs	r0, r3
 800387a:	f000 facd 	bl	8003e18 <RTC_ByteToBcd2>
 800387e:	0003      	movs	r3, r0
 8003880:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003882:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	789b      	ldrb	r3, [r3, #2]
 8003888:	0018      	movs	r0, r3
 800388a:	f000 fac5 	bl	8003e18 <RTC_ByteToBcd2>
 800388e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003890:	0022      	movs	r2, r4
 8003892:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	78db      	ldrb	r3, [r3, #3]
 8003898:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	e017      	b.n	80038d0 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2240      	movs	r2, #64	; 0x40
 80038a8:	4013      	ands	r3, r2
 80038aa:	d102      	bne.n	80038b2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2200      	movs	r2, #0
 80038b0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	785b      	ldrb	r3, [r3, #1]
 80038bc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80038be:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80038c4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	78db      	ldrb	r3, [r3, #3]
 80038ca:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	491b      	ldr	r1, [pc, #108]	; (8003944 <HAL_RTC_SetTime+0x148>)
 80038d8:	400a      	ands	r2, r1
 80038da:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699a      	ldr	r2, [r3, #24]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4918      	ldr	r1, [pc, #96]	; (8003948 <HAL_RTC_SetTime+0x14c>)
 80038e8:	400a      	ands	r2, r1
 80038ea:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6999      	ldr	r1, [r3, #24]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003904:	2313      	movs	r3, #19
 8003906:	18fc      	adds	r4, r7, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	0018      	movs	r0, r3
 800390c:	f000 fa40 	bl	8003d90 <RTC_ExitInitMode>
 8003910:	0003      	movs	r3, r0
 8003912:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	22ff      	movs	r2, #255	; 0xff
 800391a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 800391c:	2313      	movs	r3, #19
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d103      	bne.n	800392e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2229      	movs	r2, #41	; 0x29
 800392a:	2101      	movs	r1, #1
 800392c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2228      	movs	r2, #40	; 0x28
 8003932:	2100      	movs	r1, #0
 8003934:	5499      	strb	r1, [r3, r2]

  return status;
 8003936:	2313      	movs	r3, #19
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	781b      	ldrb	r3, [r3, #0]
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b006      	add	sp, #24
 8003942:	bdb0      	pop	{r4, r5, r7, pc}
 8003944:	007f7f7f 	.word	0x007f7f7f
 8003948:	fffbffff 	.word	0xfffbffff

0800394c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800394c:	b5b0      	push	{r4, r5, r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2228      	movs	r2, #40	; 0x28
 800395c:	5c9b      	ldrb	r3, [r3, r2]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_RTC_SetDate+0x1a>
 8003962:	2302      	movs	r3, #2
 8003964:	e07e      	b.n	8003a64 <HAL_RTC_SetDate+0x118>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2228      	movs	r2, #40	; 0x28
 800396a:	2101      	movs	r1, #1
 800396c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2229      	movs	r2, #41	; 0x29
 8003972:	2102      	movs	r1, #2
 8003974:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10e      	bne.n	800399a <HAL_RTC_SetDate+0x4e>
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	785b      	ldrb	r3, [r3, #1]
 8003980:	001a      	movs	r2, r3
 8003982:	2310      	movs	r3, #16
 8003984:	4013      	ands	r3, r2
 8003986:	d008      	beq.n	800399a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	785b      	ldrb	r3, [r3, #1]
 800398c:	2210      	movs	r2, #16
 800398e:	4393      	bics	r3, r2
 8003990:	b2db      	uxtb	r3, r3
 8003992:	330a      	adds	r3, #10
 8003994:	b2da      	uxtb	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d11c      	bne.n	80039da <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	78db      	ldrb	r3, [r3, #3]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f000 fa37 	bl	8003e18 <RTC_ByteToBcd2>
 80039aa:	0003      	movs	r3, r0
 80039ac:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	785b      	ldrb	r3, [r3, #1]
 80039b2:	0018      	movs	r0, r3
 80039b4:	f000 fa30 	bl	8003e18 <RTC_ByteToBcd2>
 80039b8:	0003      	movs	r3, r0
 80039ba:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80039bc:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	789b      	ldrb	r3, [r3, #2]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f000 fa28 	bl	8003e18 <RTC_ByteToBcd2>
 80039c8:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80039ca:	0022      	movs	r2, r4
 80039cc:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	e00e      	b.n	80039f8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	78db      	ldrb	r3, [r3, #3]
 80039de:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	785b      	ldrb	r3, [r3, #1]
 80039e4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039e6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80039ec:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	22ca      	movs	r2, #202	; 0xca
 80039fe:	625a      	str	r2, [r3, #36]	; 0x24
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2253      	movs	r2, #83	; 0x53
 8003a06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a08:	2513      	movs	r5, #19
 8003a0a:	197c      	adds	r4, r7, r5
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f000 f97b 	bl	8003d0a <RTC_EnterInitMode>
 8003a14:	0003      	movs	r3, r0
 8003a16:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003a18:	0028      	movs	r0, r5
 8003a1a:	183b      	adds	r3, r7, r0
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10c      	bne.n	8003a3c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4910      	ldr	r1, [pc, #64]	; (8003a6c <HAL_RTC_SetDate+0x120>)
 8003a2a:	400a      	ands	r2, r1
 8003a2c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a2e:	183c      	adds	r4, r7, r0
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	0018      	movs	r0, r3
 8003a34:	f000 f9ac 	bl	8003d90 <RTC_ExitInitMode>
 8003a38:	0003      	movs	r3, r0
 8003a3a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	22ff      	movs	r2, #255	; 0xff
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003a44:	2313      	movs	r3, #19
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2229      	movs	r2, #41	; 0x29
 8003a52:	2101      	movs	r1, #1
 8003a54:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2228      	movs	r2, #40	; 0x28
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	5499      	strb	r1, [r3, r2]

  return status;
 8003a5e:	2313      	movs	r3, #19
 8003a60:	18fb      	adds	r3, r7, r3
 8003a62:	781b      	ldrb	r3, [r3, #0]
}
 8003a64:	0018      	movs	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b006      	add	sp, #24
 8003a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a6c:	00ffff3f 	.word	0x00ffff3f

08003a70 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003a70:	b590      	push	{r4, r7, lr}
 8003a72:	b089      	sub	sp, #36	; 0x24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2228      	movs	r2, #40	; 0x28
 8003a80:	5c9b      	ldrb	r3, [r3, r2]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_RTC_SetAlarm+0x1a>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e10c      	b.n	8003ca4 <HAL_RTC_SetAlarm+0x234>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2228      	movs	r2, #40	; 0x28
 8003a8e:	2101      	movs	r1, #1
 8003a90:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2229      	movs	r2, #41	; 0x29
 8003a96:	2102      	movs	r1, #2
 8003a98:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d136      	bne.n	8003b0e <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	2240      	movs	r2, #64	; 0x40
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d102      	bne.n	8003ab2 <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f000 f9ae 	bl	8003e18 <RTC_ByteToBcd2>
 8003abc:	0003      	movs	r3, r0
 8003abe:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	785b      	ldrb	r3, [r3, #1]
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f000 f9a7 	bl	8003e18 <RTC_ByteToBcd2>
 8003aca:	0003      	movs	r3, r0
 8003acc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ace:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	789b      	ldrb	r3, [r3, #2]
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f000 f99f 	bl	8003e18 <RTC_ByteToBcd2>
 8003ada:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003adc:	0022      	movs	r2, r4
 8003ade:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	78db      	ldrb	r3, [r3, #3]
 8003ae4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2220      	movs	r2, #32
 8003aee:	5c9b      	ldrb	r3, [r3, r2]
 8003af0:	0018      	movs	r0, r3
 8003af2:	f000 f991 	bl	8003e18 <RTC_ByteToBcd2>
 8003af6:	0003      	movs	r3, r0
 8003af8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003afa:	0022      	movs	r2, r4
 8003afc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b02:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	61fb      	str	r3, [r7, #28]
 8003b0c:	e022      	b.n	8003b54 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	2240      	movs	r2, #64	; 0x40
 8003b16:	4013      	ands	r3, r2
 8003b18:	d102      	bne.n	8003b20 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	785b      	ldrb	r3, [r3, #1]
 8003b2a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b2c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b32:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	78db      	ldrb	r3, [r3, #3]
 8003b38:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b3a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2120      	movs	r1, #32
 8003b40:	5c5b      	ldrb	r3, [r3, r1]
 8003b42:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b44:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b4a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	22ca      	movs	r2, #202	; 0xca
 8003b66:	625a      	str	r2, [r3, #36]	; 0x24
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2253      	movs	r2, #83	; 0x53
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d143      	bne.n	8003c04 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699a      	ldr	r2, [r3, #24]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4949      	ldr	r1, [pc, #292]	; (8003cac <HAL_RTC_SetAlarm+0x23c>)
 8003b88:	400a      	ands	r2, r1
 8003b8a:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4946      	ldr	r1, [pc, #280]	; (8003cb0 <HAL_RTC_SetAlarm+0x240>)
 8003b98:	400a      	ands	r2, r1
 8003b9a:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8003b9c:	f7fd f9d4 	bl	8000f48 <HAL_GetTick>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003ba4:	e016      	b.n	8003bd4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003ba6:	f7fd f9cf 	bl	8000f48 <HAL_GetTick>
 8003baa:	0002      	movs	r2, r0
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	1ad2      	subs	r2, r2, r3
 8003bb0:	23fa      	movs	r3, #250	; 0xfa
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d90d      	bls.n	8003bd4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	22ff      	movs	r2, #255	; 0xff
 8003bbe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2229      	movs	r2, #41	; 0x29
 8003bc4:	2103      	movs	r1, #3
 8003bc6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2228      	movs	r2, #40	; 0x28
 8003bcc:	2100      	movs	r1, #0
 8003bce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e067      	b.n	8003ca4 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d0e2      	beq.n	8003ba6 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2180      	movs	r1, #128	; 0x80
 8003bfc:	0049      	lsls	r1, r1, #1
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	619a      	str	r2, [r3, #24]
 8003c02:	e042      	b.n	8003c8a <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4929      	ldr	r1, [pc, #164]	; (8003cb4 <HAL_RTC_SetAlarm+0x244>)
 8003c10:	400a      	ands	r2, r1
 8003c12:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4926      	ldr	r1, [pc, #152]	; (8003cb8 <HAL_RTC_SetAlarm+0x248>)
 8003c20:	400a      	ands	r2, r1
 8003c22:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8003c24:	f7fd f990 	bl	8000f48 <HAL_GetTick>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003c2c:	e016      	b.n	8003c5c <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003c2e:	f7fd f98b 	bl	8000f48 <HAL_GetTick>
 8003c32:	0002      	movs	r2, r0
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	1ad2      	subs	r2, r2, r3
 8003c38:	23fa      	movs	r3, #250	; 0xfa
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d90d      	bls.n	8003c5c <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	22ff      	movs	r2, #255	; 0xff
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2229      	movs	r2, #41	; 0x29
 8003c4c:	2103      	movs	r1, #3
 8003c4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2228      	movs	r2, #40	; 0x28
 8003c54:	2100      	movs	r1, #0
 8003c56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e023      	b.n	8003ca4 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	2202      	movs	r2, #2
 8003c64:	4013      	ands	r3, r2
 8003c66:	d0e2      	beq.n	8003c2e <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69fa      	ldr	r2, [r7, #28]
 8003c6e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2180      	movs	r1, #128	; 0x80
 8003c84:	0089      	lsls	r1, r1, #2
 8003c86:	430a      	orrs	r2, r1
 8003c88:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	22ff      	movs	r2, #255	; 0xff
 8003c90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2229      	movs	r2, #41	; 0x29
 8003c96:	2101      	movs	r1, #1
 8003c98:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2228      	movs	r2, #40	; 0x28
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b009      	add	sp, #36	; 0x24
 8003caa:	bd90      	pop	{r4, r7, pc}
 8003cac:	fffffeff 	.word	0xfffffeff
 8003cb0:	ffffefff 	.word	0xffffefff
 8003cb4:	fffffdff 	.word	0xfffffdff
 8003cb8:	ffffdfff 	.word	0xffffdfff

08003cbc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	21a0      	movs	r1, #160	; 0xa0
 8003cd0:	438a      	bics	r2, r1
 8003cd2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003cd4:	f7fd f938 	bl	8000f48 <HAL_GetTick>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003cdc:	e00a      	b.n	8003cf4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003cde:	f7fd f933 	bl	8000f48 <HAL_GetTick>
 8003ce2:	0002      	movs	r2, r0
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1ad2      	subs	r2, r2, r3
 8003ce8:	23fa      	movs	r3, #250	; 0xfa
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d901      	bls.n	8003cf4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e006      	b.n	8003d02 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d0ee      	beq.n	8003cde <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	0018      	movs	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b004      	add	sp, #16
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8003d12:	230f      	movs	r3, #15
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	2240      	movs	r2, #64	; 0x40
 8003d22:	4013      	ands	r3, r2
 8003d24:	d12c      	bne.n	8003d80 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2180      	movs	r1, #128	; 0x80
 8003d32:	430a      	orrs	r2, r1
 8003d34:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003d36:	f7fd f907 	bl	8000f48 <HAL_GetTick>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003d3e:	e014      	b.n	8003d6a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003d40:	f7fd f902 	bl	8000f48 <HAL_GetTick>
 8003d44:	0002      	movs	r2, r0
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	1ad2      	subs	r2, r2, r3
 8003d4a:	200f      	movs	r0, #15
 8003d4c:	183b      	adds	r3, r7, r0
 8003d4e:	1839      	adds	r1, r7, r0
 8003d50:	7809      	ldrb	r1, [r1, #0]
 8003d52:	7019      	strb	r1, [r3, #0]
 8003d54:	23fa      	movs	r3, #250	; 0xfa
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d906      	bls.n	8003d6a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8003d5c:	183b      	adds	r3, r7, r0
 8003d5e:	2203      	movs	r2, #3
 8003d60:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2229      	movs	r2, #41	; 0x29
 8003d66:	2103      	movs	r1, #3
 8003d68:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2240      	movs	r2, #64	; 0x40
 8003d72:	4013      	ands	r3, r2
 8003d74:	d104      	bne.n	8003d80 <RTC_EnterInitMode+0x76>
 8003d76:	230f      	movs	r3, #15
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d1df      	bne.n	8003d40 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003d80:	230f      	movs	r3, #15
 8003d82:	18fb      	adds	r3, r7, r3
 8003d84:	781b      	ldrb	r3, [r3, #0]
}
 8003d86:	0018      	movs	r0, r3
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b004      	add	sp, #16
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d90:	b590      	push	{r4, r7, lr}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d98:	240f      	movs	r4, #15
 8003d9a:	193b      	adds	r3, r7, r4
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003da0:	4b1c      	ldr	r3, [pc, #112]	; (8003e14 <RTC_ExitInitMode+0x84>)
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <RTC_ExitInitMode+0x84>)
 8003da6:	2180      	movs	r1, #128	; 0x80
 8003da8:	438a      	bics	r2, r1
 8003daa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003dac:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <RTC_ExitInitMode+0x84>)
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2220      	movs	r2, #32
 8003db2:	4013      	ands	r3, r2
 8003db4:	d10d      	bne.n	8003dd2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7ff ff7f 	bl	8003cbc <HAL_RTC_WaitForSynchro>
 8003dbe:	1e03      	subs	r3, r0, #0
 8003dc0:	d021      	beq.n	8003e06 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2229      	movs	r2, #41	; 0x29
 8003dc6:	2103      	movs	r1, #3
 8003dc8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003dca:	193b      	adds	r3, r7, r4
 8003dcc:	2203      	movs	r2, #3
 8003dce:	701a      	strb	r2, [r3, #0]
 8003dd0:	e019      	b.n	8003e06 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003dd2:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <RTC_ExitInitMode+0x84>)
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <RTC_ExitInitMode+0x84>)
 8003dd8:	2120      	movs	r1, #32
 8003dda:	438a      	bics	r2, r1
 8003ddc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f7ff ff6b 	bl	8003cbc <HAL_RTC_WaitForSynchro>
 8003de6:	1e03      	subs	r3, r0, #0
 8003de8:	d007      	beq.n	8003dfa <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2229      	movs	r2, #41	; 0x29
 8003dee:	2103      	movs	r1, #3
 8003df0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003df2:	230f      	movs	r3, #15
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	2203      	movs	r2, #3
 8003df8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003dfa:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <RTC_ExitInitMode+0x84>)
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <RTC_ExitInitMode+0x84>)
 8003e00:	2120      	movs	r1, #32
 8003e02:	430a      	orrs	r2, r1
 8003e04:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003e06:	230f      	movs	r3, #15
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	781b      	ldrb	r3, [r3, #0]
}
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b005      	add	sp, #20
 8003e12:	bd90      	pop	{r4, r7, pc}
 8003e14:	40002800 	.word	0x40002800

08003e18 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	0002      	movs	r2, r0
 8003e20:	1dfb      	adds	r3, r7, #7
 8003e22:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003e28:	230b      	movs	r3, #11
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	1dfa      	adds	r2, r7, #7
 8003e2e:	7812      	ldrb	r2, [r2, #0]
 8003e30:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8003e32:	e008      	b.n	8003e46 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3301      	adds	r3, #1
 8003e38:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003e3a:	220b      	movs	r2, #11
 8003e3c:	18bb      	adds	r3, r7, r2
 8003e3e:	18ba      	adds	r2, r7, r2
 8003e40:	7812      	ldrb	r2, [r2, #0]
 8003e42:	3a0a      	subs	r2, #10
 8003e44:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003e46:	210b      	movs	r1, #11
 8003e48:	187b      	adds	r3, r7, r1
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b09      	cmp	r3, #9
 8003e4e:	d8f1      	bhi.n	8003e34 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	187b      	adds	r3, r7, r1
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	b2db      	uxtb	r3, r3
}
 8003e60:	0018      	movs	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b004      	add	sp, #16
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e046      	b.n	8003f08 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2288      	movs	r2, #136	; 0x88
 8003e7e:	589b      	ldr	r3, [r3, r2]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d107      	bne.n	8003e94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2284      	movs	r2, #132	; 0x84
 8003e88:	2100      	movs	r1, #0
 8003e8a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f7fc fe98 	bl	8000bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2288      	movs	r2, #136	; 0x88
 8003e98:	2124      	movs	r1, #36	; 0x24
 8003e9a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	438a      	bics	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f000 f8cc 	bl	800404c <UART_SetConfig>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e024      	b.n	8003f08 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f000 fb37 	bl	800453c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	490d      	ldr	r1, [pc, #52]	; (8003f10 <HAL_UART_Init+0xa8>)
 8003eda:	400a      	ands	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	212a      	movs	r1, #42	; 0x2a
 8003eea:	438a      	bics	r2, r1
 8003eec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2101      	movs	r1, #1
 8003efa:	430a      	orrs	r2, r1
 8003efc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	0018      	movs	r0, r3
 8003f02:	f000 fbcf 	bl	80046a4 <UART_CheckIdleState>
 8003f06:	0003      	movs	r3, r0
}
 8003f08:	0018      	movs	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b002      	add	sp, #8
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	ffffb7ff 	.word	0xffffb7ff

08003f14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	; 0x28
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	1dbb      	adds	r3, r7, #6
 8003f22:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2288      	movs	r2, #136	; 0x88
 8003f28:	589b      	ldr	r3, [r3, r2]
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d000      	beq.n	8003f30 <HAL_UART_Transmit+0x1c>
 8003f2e:	e088      	b.n	8004042 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_UART_Transmit+0x2a>
 8003f36:	1dbb      	adds	r3, r7, #6
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e080      	b.n	8004044 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	2380      	movs	r3, #128	; 0x80
 8003f48:	015b      	lsls	r3, r3, #5
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d109      	bne.n	8003f62 <HAL_UART_Transmit+0x4e>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d105      	bne.n	8003f62 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d001      	beq.n	8003f62 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e070      	b.n	8004044 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2290      	movs	r2, #144	; 0x90
 8003f66:	2100      	movs	r1, #0
 8003f68:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2288      	movs	r2, #136	; 0x88
 8003f6e:	2121      	movs	r1, #33	; 0x21
 8003f70:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f72:	f7fc ffe9 	bl	8000f48 <HAL_GetTick>
 8003f76:	0003      	movs	r3, r0
 8003f78:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1dba      	adds	r2, r7, #6
 8003f7e:	2154      	movs	r1, #84	; 0x54
 8003f80:	8812      	ldrh	r2, [r2, #0]
 8003f82:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	1dba      	adds	r2, r7, #6
 8003f88:	2156      	movs	r1, #86	; 0x56
 8003f8a:	8812      	ldrh	r2, [r2, #0]
 8003f8c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	2380      	movs	r3, #128	; 0x80
 8003f94:	015b      	lsls	r3, r3, #5
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d108      	bne.n	8003fac <HAL_UART_Transmit+0x98>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d104      	bne.n	8003fac <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	e003      	b.n	8003fb4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fb4:	e02c      	b.n	8004010 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	0013      	movs	r3, r2
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2180      	movs	r1, #128	; 0x80
 8003fc4:	f000 fbbc 	bl	8004740 <UART_WaitOnFlagUntilTimeout>
 8003fc8:	1e03      	subs	r3, r0, #0
 8003fca:	d001      	beq.n	8003fd0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e039      	b.n	8004044 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10b      	bne.n	8003fee <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	001a      	movs	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	05d2      	lsls	r2, r2, #23
 8003fe2:	0dd2      	lsrs	r2, r2, #23
 8003fe4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	3302      	adds	r3, #2
 8003fea:	61bb      	str	r3, [r7, #24]
 8003fec:	e007      	b.n	8003ffe <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	781a      	ldrb	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2256      	movs	r2, #86	; 0x56
 8004002:	5a9b      	ldrh	r3, [r3, r2]
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b299      	uxth	r1, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2256      	movs	r2, #86	; 0x56
 800400e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2256      	movs	r2, #86	; 0x56
 8004014:	5a9b      	ldrh	r3, [r3, r2]
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1cc      	bne.n	8003fb6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	0013      	movs	r3, r2
 8004026:	2200      	movs	r2, #0
 8004028:	2140      	movs	r1, #64	; 0x40
 800402a:	f000 fb89 	bl	8004740 <UART_WaitOnFlagUntilTimeout>
 800402e:	1e03      	subs	r3, r0, #0
 8004030:	d001      	beq.n	8004036 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e006      	b.n	8004044 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2288      	movs	r2, #136	; 0x88
 800403a:	2120      	movs	r1, #32
 800403c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	e000      	b.n	8004044 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004042:	2302      	movs	r3, #2
  }
}
 8004044:	0018      	movs	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	b008      	add	sp, #32
 800404a:	bd80      	pop	{r7, pc}

0800404c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800404c:	b5b0      	push	{r4, r5, r7, lr}
 800404e:	b090      	sub	sp, #64	; 0x40
 8004050:	af00      	add	r7, sp, #0
 8004052:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004054:	231a      	movs	r3, #26
 8004056:	2220      	movs	r2, #32
 8004058:	189b      	adds	r3, r3, r2
 800405a:	19db      	adds	r3, r3, r7
 800405c:	2200      	movs	r2, #0
 800405e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	431a      	orrs	r2, r3
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	431a      	orrs	r2, r3
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	4313      	orrs	r3, r2
 8004076:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4ac4      	ldr	r2, [pc, #784]	; (8004390 <UART_SetConfig+0x344>)
 8004080:	4013      	ands	r3, r2
 8004082:	0019      	movs	r1, r3
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408a:	430b      	orrs	r3, r1
 800408c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	4abf      	ldr	r2, [pc, #764]	; (8004394 <UART_SetConfig+0x348>)
 8004096:	4013      	ands	r3, r2
 8004098:	0018      	movs	r0, r3
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	68d9      	ldr	r1, [r3, #12]
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	0003      	movs	r3, r0
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4ab9      	ldr	r2, [pc, #740]	; (8004398 <UART_SetConfig+0x34c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d004      	beq.n	80040c2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040be:	4313      	orrs	r3, r2
 80040c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4ab4      	ldr	r2, [pc, #720]	; (800439c <UART_SetConfig+0x350>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	0019      	movs	r1, r3
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	220f      	movs	r2, #15
 80040e0:	4393      	bics	r3, r2
 80040e2:	0018      	movs	r0, r3
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	0003      	movs	r3, r0
 80040ee:	430b      	orrs	r3, r1
 80040f0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4aaa      	ldr	r2, [pc, #680]	; (80043a0 <UART_SetConfig+0x354>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d131      	bne.n	8004160 <UART_SetConfig+0x114>
 80040fc:	4ba9      	ldr	r3, [pc, #676]	; (80043a4 <UART_SetConfig+0x358>)
 80040fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004100:	2203      	movs	r2, #3
 8004102:	4013      	ands	r3, r2
 8004104:	2b03      	cmp	r3, #3
 8004106:	d01d      	beq.n	8004144 <UART_SetConfig+0xf8>
 8004108:	d823      	bhi.n	8004152 <UART_SetConfig+0x106>
 800410a:	2b02      	cmp	r3, #2
 800410c:	d00c      	beq.n	8004128 <UART_SetConfig+0xdc>
 800410e:	d820      	bhi.n	8004152 <UART_SetConfig+0x106>
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <UART_SetConfig+0xce>
 8004114:	2b01      	cmp	r3, #1
 8004116:	d00e      	beq.n	8004136 <UART_SetConfig+0xea>
 8004118:	e01b      	b.n	8004152 <UART_SetConfig+0x106>
 800411a:	231b      	movs	r3, #27
 800411c:	2220      	movs	r2, #32
 800411e:	189b      	adds	r3, r3, r2
 8004120:	19db      	adds	r3, r3, r7
 8004122:	2200      	movs	r2, #0
 8004124:	701a      	strb	r2, [r3, #0]
 8004126:	e071      	b.n	800420c <UART_SetConfig+0x1c0>
 8004128:	231b      	movs	r3, #27
 800412a:	2220      	movs	r2, #32
 800412c:	189b      	adds	r3, r3, r2
 800412e:	19db      	adds	r3, r3, r7
 8004130:	2202      	movs	r2, #2
 8004132:	701a      	strb	r2, [r3, #0]
 8004134:	e06a      	b.n	800420c <UART_SetConfig+0x1c0>
 8004136:	231b      	movs	r3, #27
 8004138:	2220      	movs	r2, #32
 800413a:	189b      	adds	r3, r3, r2
 800413c:	19db      	adds	r3, r3, r7
 800413e:	2204      	movs	r2, #4
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	e063      	b.n	800420c <UART_SetConfig+0x1c0>
 8004144:	231b      	movs	r3, #27
 8004146:	2220      	movs	r2, #32
 8004148:	189b      	adds	r3, r3, r2
 800414a:	19db      	adds	r3, r3, r7
 800414c:	2208      	movs	r2, #8
 800414e:	701a      	strb	r2, [r3, #0]
 8004150:	e05c      	b.n	800420c <UART_SetConfig+0x1c0>
 8004152:	231b      	movs	r3, #27
 8004154:	2220      	movs	r2, #32
 8004156:	189b      	adds	r3, r3, r2
 8004158:	19db      	adds	r3, r3, r7
 800415a:	2210      	movs	r2, #16
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	e055      	b.n	800420c <UART_SetConfig+0x1c0>
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a90      	ldr	r2, [pc, #576]	; (80043a8 <UART_SetConfig+0x35c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d106      	bne.n	8004178 <UART_SetConfig+0x12c>
 800416a:	231b      	movs	r3, #27
 800416c:	2220      	movs	r2, #32
 800416e:	189b      	adds	r3, r3, r2
 8004170:	19db      	adds	r3, r3, r7
 8004172:	2200      	movs	r2, #0
 8004174:	701a      	strb	r2, [r3, #0]
 8004176:	e049      	b.n	800420c <UART_SetConfig+0x1c0>
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a86      	ldr	r2, [pc, #536]	; (8004398 <UART_SetConfig+0x34c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d13e      	bne.n	8004200 <UART_SetConfig+0x1b4>
 8004182:	4b88      	ldr	r3, [pc, #544]	; (80043a4 <UART_SetConfig+0x358>)
 8004184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004186:	23c0      	movs	r3, #192	; 0xc0
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	4013      	ands	r3, r2
 800418c:	22c0      	movs	r2, #192	; 0xc0
 800418e:	0112      	lsls	r2, r2, #4
 8004190:	4293      	cmp	r3, r2
 8004192:	d027      	beq.n	80041e4 <UART_SetConfig+0x198>
 8004194:	22c0      	movs	r2, #192	; 0xc0
 8004196:	0112      	lsls	r2, r2, #4
 8004198:	4293      	cmp	r3, r2
 800419a:	d82a      	bhi.n	80041f2 <UART_SetConfig+0x1a6>
 800419c:	2280      	movs	r2, #128	; 0x80
 800419e:	0112      	lsls	r2, r2, #4
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d011      	beq.n	80041c8 <UART_SetConfig+0x17c>
 80041a4:	2280      	movs	r2, #128	; 0x80
 80041a6:	0112      	lsls	r2, r2, #4
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d822      	bhi.n	80041f2 <UART_SetConfig+0x1a6>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d004      	beq.n	80041ba <UART_SetConfig+0x16e>
 80041b0:	2280      	movs	r2, #128	; 0x80
 80041b2:	00d2      	lsls	r2, r2, #3
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00e      	beq.n	80041d6 <UART_SetConfig+0x18a>
 80041b8:	e01b      	b.n	80041f2 <UART_SetConfig+0x1a6>
 80041ba:	231b      	movs	r3, #27
 80041bc:	2220      	movs	r2, #32
 80041be:	189b      	adds	r3, r3, r2
 80041c0:	19db      	adds	r3, r3, r7
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
 80041c6:	e021      	b.n	800420c <UART_SetConfig+0x1c0>
 80041c8:	231b      	movs	r3, #27
 80041ca:	2220      	movs	r2, #32
 80041cc:	189b      	adds	r3, r3, r2
 80041ce:	19db      	adds	r3, r3, r7
 80041d0:	2202      	movs	r2, #2
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	e01a      	b.n	800420c <UART_SetConfig+0x1c0>
 80041d6:	231b      	movs	r3, #27
 80041d8:	2220      	movs	r2, #32
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	19db      	adds	r3, r3, r7
 80041de:	2204      	movs	r2, #4
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	e013      	b.n	800420c <UART_SetConfig+0x1c0>
 80041e4:	231b      	movs	r3, #27
 80041e6:	2220      	movs	r2, #32
 80041e8:	189b      	adds	r3, r3, r2
 80041ea:	19db      	adds	r3, r3, r7
 80041ec:	2208      	movs	r2, #8
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e00c      	b.n	800420c <UART_SetConfig+0x1c0>
 80041f2:	231b      	movs	r3, #27
 80041f4:	2220      	movs	r2, #32
 80041f6:	189b      	adds	r3, r3, r2
 80041f8:	19db      	adds	r3, r3, r7
 80041fa:	2210      	movs	r2, #16
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e005      	b.n	800420c <UART_SetConfig+0x1c0>
 8004200:	231b      	movs	r3, #27
 8004202:	2220      	movs	r2, #32
 8004204:	189b      	adds	r3, r3, r2
 8004206:	19db      	adds	r3, r3, r7
 8004208:	2210      	movs	r2, #16
 800420a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a61      	ldr	r2, [pc, #388]	; (8004398 <UART_SetConfig+0x34c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d000      	beq.n	8004218 <UART_SetConfig+0x1cc>
 8004216:	e092      	b.n	800433e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004218:	231b      	movs	r3, #27
 800421a:	2220      	movs	r2, #32
 800421c:	189b      	adds	r3, r3, r2
 800421e:	19db      	adds	r3, r3, r7
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b08      	cmp	r3, #8
 8004224:	d015      	beq.n	8004252 <UART_SetConfig+0x206>
 8004226:	dc18      	bgt.n	800425a <UART_SetConfig+0x20e>
 8004228:	2b04      	cmp	r3, #4
 800422a:	d00d      	beq.n	8004248 <UART_SetConfig+0x1fc>
 800422c:	dc15      	bgt.n	800425a <UART_SetConfig+0x20e>
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <UART_SetConfig+0x1ec>
 8004232:	2b02      	cmp	r3, #2
 8004234:	d005      	beq.n	8004242 <UART_SetConfig+0x1f6>
 8004236:	e010      	b.n	800425a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004238:	f7ff f8ae 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 800423c:	0003      	movs	r3, r0
 800423e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004240:	e014      	b.n	800426c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004242:	4b5a      	ldr	r3, [pc, #360]	; (80043ac <UART_SetConfig+0x360>)
 8004244:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004246:	e011      	b.n	800426c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004248:	f7ff f81a 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 800424c:	0003      	movs	r3, r0
 800424e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004250:	e00c      	b.n	800426c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004252:	2380      	movs	r3, #128	; 0x80
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004258:	e008      	b.n	800426c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800425e:	231a      	movs	r3, #26
 8004260:	2220      	movs	r2, #32
 8004262:	189b      	adds	r3, r3, r2
 8004264:	19db      	adds	r3, r3, r7
 8004266:	2201      	movs	r2, #1
 8004268:	701a      	strb	r2, [r3, #0]
        break;
 800426a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426e:	2b00      	cmp	r3, #0
 8004270:	d100      	bne.n	8004274 <UART_SetConfig+0x228>
 8004272:	e147      	b.n	8004504 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004278:	4b4d      	ldr	r3, [pc, #308]	; (80043b0 <UART_SetConfig+0x364>)
 800427a:	0052      	lsls	r2, r2, #1
 800427c:	5ad3      	ldrh	r3, [r2, r3]
 800427e:	0019      	movs	r1, r3
 8004280:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004282:	f7fb ff49 	bl	8000118 <__udivsi3>
 8004286:	0003      	movs	r3, r0
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	0013      	movs	r3, r2
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	189b      	adds	r3, r3, r2
 8004294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004296:	429a      	cmp	r2, r3
 8004298:	d305      	bcc.n	80042a6 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d906      	bls.n	80042b4 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80042a6:	231a      	movs	r3, #26
 80042a8:	2220      	movs	r2, #32
 80042aa:	189b      	adds	r3, r3, r2
 80042ac:	19db      	adds	r3, r3, r7
 80042ae:	2201      	movs	r2, #1
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	e127      	b.n	8004504 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042c0:	4b3b      	ldr	r3, [pc, #236]	; (80043b0 <UART_SetConfig+0x364>)
 80042c2:	0052      	lsls	r2, r2, #1
 80042c4:	5ad3      	ldrh	r3, [r2, r3]
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	69b8      	ldr	r0, [r7, #24]
 80042d2:	69f9      	ldr	r1, [r7, #28]
 80042d4:	f7fb ffac 	bl	8000230 <__aeabi_uldivmod>
 80042d8:	0002      	movs	r2, r0
 80042da:	000b      	movs	r3, r1
 80042dc:	0e11      	lsrs	r1, r2, #24
 80042de:	021d      	lsls	r5, r3, #8
 80042e0:	430d      	orrs	r5, r1
 80042e2:	0214      	lsls	r4, r2, #8
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	085b      	lsrs	r3, r3, #1
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	68b8      	ldr	r0, [r7, #8]
 80042f2:	68f9      	ldr	r1, [r7, #12]
 80042f4:	1900      	adds	r0, r0, r4
 80042f6:	4169      	adcs	r1, r5
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	603b      	str	r3, [r7, #0]
 80042fe:	2300      	movs	r3, #0
 8004300:	607b      	str	r3, [r7, #4]
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f7fb ff93 	bl	8000230 <__aeabi_uldivmod>
 800430a:	0002      	movs	r2, r0
 800430c:	000b      	movs	r3, r1
 800430e:	0013      	movs	r3, r2
 8004310:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004314:	23c0      	movs	r3, #192	; 0xc0
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	429a      	cmp	r2, r3
 800431a:	d309      	bcc.n	8004330 <UART_SetConfig+0x2e4>
 800431c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800431e:	2380      	movs	r3, #128	; 0x80
 8004320:	035b      	lsls	r3, r3, #13
 8004322:	429a      	cmp	r2, r3
 8004324:	d204      	bcs.n	8004330 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432c:	60da      	str	r2, [r3, #12]
 800432e:	e0e9      	b.n	8004504 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004330:	231a      	movs	r3, #26
 8004332:	2220      	movs	r2, #32
 8004334:	189b      	adds	r3, r3, r2
 8004336:	19db      	adds	r3, r3, r7
 8004338:	2201      	movs	r2, #1
 800433a:	701a      	strb	r2, [r3, #0]
 800433c:	e0e2      	b.n	8004504 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	69da      	ldr	r2, [r3, #28]
 8004342:	2380      	movs	r3, #128	; 0x80
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	429a      	cmp	r2, r3
 8004348:	d000      	beq.n	800434c <UART_SetConfig+0x300>
 800434a:	e083      	b.n	8004454 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800434c:	231b      	movs	r3, #27
 800434e:	2220      	movs	r2, #32
 8004350:	189b      	adds	r3, r3, r2
 8004352:	19db      	adds	r3, r3, r7
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b08      	cmp	r3, #8
 8004358:	d015      	beq.n	8004386 <UART_SetConfig+0x33a>
 800435a:	dc2b      	bgt.n	80043b4 <UART_SetConfig+0x368>
 800435c:	2b04      	cmp	r3, #4
 800435e:	d00d      	beq.n	800437c <UART_SetConfig+0x330>
 8004360:	dc28      	bgt.n	80043b4 <UART_SetConfig+0x368>
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <UART_SetConfig+0x320>
 8004366:	2b02      	cmp	r3, #2
 8004368:	d005      	beq.n	8004376 <UART_SetConfig+0x32a>
 800436a:	e023      	b.n	80043b4 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800436c:	f7ff f814 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8004370:	0003      	movs	r3, r0
 8004372:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004374:	e027      	b.n	80043c6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004376:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <UART_SetConfig+0x360>)
 8004378:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800437a:	e024      	b.n	80043c6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800437c:	f7fe ff80 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 8004380:	0003      	movs	r3, r0
 8004382:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004384:	e01f      	b.n	80043c6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800438c:	e01b      	b.n	80043c6 <UART_SetConfig+0x37a>
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	cfff69f3 	.word	0xcfff69f3
 8004394:	ffffcfff 	.word	0xffffcfff
 8004398:	40008000 	.word	0x40008000
 800439c:	11fff4ff 	.word	0x11fff4ff
 80043a0:	40013800 	.word	0x40013800
 80043a4:	40021000 	.word	0x40021000
 80043a8:	40004400 	.word	0x40004400
 80043ac:	00f42400 	.word	0x00f42400
 80043b0:	08005a78 	.word	0x08005a78
      default:
        pclk = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80043b8:	231a      	movs	r3, #26
 80043ba:	2220      	movs	r2, #32
 80043bc:	189b      	adds	r3, r3, r2
 80043be:	19db      	adds	r3, r3, r7
 80043c0:	2201      	movs	r2, #1
 80043c2:	701a      	strb	r2, [r3, #0]
        break;
 80043c4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d100      	bne.n	80043ce <UART_SetConfig+0x382>
 80043cc:	e09a      	b.n	8004504 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d2:	4b58      	ldr	r3, [pc, #352]	; (8004534 <UART_SetConfig+0x4e8>)
 80043d4:	0052      	lsls	r2, r2, #1
 80043d6:	5ad3      	ldrh	r3, [r2, r3]
 80043d8:	0019      	movs	r1, r3
 80043da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80043dc:	f7fb fe9c 	bl	8000118 <__udivsi3>
 80043e0:	0003      	movs	r3, r0
 80043e2:	005a      	lsls	r2, r3, #1
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	085b      	lsrs	r3, r3, #1
 80043ea:	18d2      	adds	r2, r2, r3
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	0019      	movs	r1, r3
 80043f2:	0010      	movs	r0, r2
 80043f4:	f7fb fe90 	bl	8000118 <__udivsi3>
 80043f8:	0003      	movs	r3, r0
 80043fa:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	2b0f      	cmp	r3, #15
 8004400:	d921      	bls.n	8004446 <UART_SetConfig+0x3fa>
 8004402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004404:	2380      	movs	r3, #128	; 0x80
 8004406:	025b      	lsls	r3, r3, #9
 8004408:	429a      	cmp	r2, r3
 800440a:	d21c      	bcs.n	8004446 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	b29a      	uxth	r2, r3
 8004410:	200e      	movs	r0, #14
 8004412:	2420      	movs	r4, #32
 8004414:	1903      	adds	r3, r0, r4
 8004416:	19db      	adds	r3, r3, r7
 8004418:	210f      	movs	r1, #15
 800441a:	438a      	bics	r2, r1
 800441c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	085b      	lsrs	r3, r3, #1
 8004422:	b29b      	uxth	r3, r3
 8004424:	2207      	movs	r2, #7
 8004426:	4013      	ands	r3, r2
 8004428:	b299      	uxth	r1, r3
 800442a:	1903      	adds	r3, r0, r4
 800442c:	19db      	adds	r3, r3, r7
 800442e:	1902      	adds	r2, r0, r4
 8004430:	19d2      	adds	r2, r2, r7
 8004432:	8812      	ldrh	r2, [r2, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	1902      	adds	r2, r0, r4
 800443e:	19d2      	adds	r2, r2, r7
 8004440:	8812      	ldrh	r2, [r2, #0]
 8004442:	60da      	str	r2, [r3, #12]
 8004444:	e05e      	b.n	8004504 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004446:	231a      	movs	r3, #26
 8004448:	2220      	movs	r2, #32
 800444a:	189b      	adds	r3, r3, r2
 800444c:	19db      	adds	r3, r3, r7
 800444e:	2201      	movs	r2, #1
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	e057      	b.n	8004504 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004454:	231b      	movs	r3, #27
 8004456:	2220      	movs	r2, #32
 8004458:	189b      	adds	r3, r3, r2
 800445a:	19db      	adds	r3, r3, r7
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b08      	cmp	r3, #8
 8004460:	d015      	beq.n	800448e <UART_SetConfig+0x442>
 8004462:	dc18      	bgt.n	8004496 <UART_SetConfig+0x44a>
 8004464:	2b04      	cmp	r3, #4
 8004466:	d00d      	beq.n	8004484 <UART_SetConfig+0x438>
 8004468:	dc15      	bgt.n	8004496 <UART_SetConfig+0x44a>
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <UART_SetConfig+0x428>
 800446e:	2b02      	cmp	r3, #2
 8004470:	d005      	beq.n	800447e <UART_SetConfig+0x432>
 8004472:	e010      	b.n	8004496 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004474:	f7fe ff90 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8004478:	0003      	movs	r3, r0
 800447a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800447c:	e014      	b.n	80044a8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800447e:	4b2e      	ldr	r3, [pc, #184]	; (8004538 <UART_SetConfig+0x4ec>)
 8004480:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004482:	e011      	b.n	80044a8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004484:	f7fe fefc 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 8004488:	0003      	movs	r3, r0
 800448a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800448c:	e00c      	b.n	80044a8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800448e:	2380      	movs	r3, #128	; 0x80
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004494:	e008      	b.n	80044a8 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800449a:	231a      	movs	r3, #26
 800449c:	2220      	movs	r2, #32
 800449e:	189b      	adds	r3, r3, r2
 80044a0:	19db      	adds	r3, r3, r7
 80044a2:	2201      	movs	r2, #1
 80044a4:	701a      	strb	r2, [r3, #0]
        break;
 80044a6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80044a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d02a      	beq.n	8004504 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044b2:	4b20      	ldr	r3, [pc, #128]	; (8004534 <UART_SetConfig+0x4e8>)
 80044b4:	0052      	lsls	r2, r2, #1
 80044b6:	5ad3      	ldrh	r3, [r2, r3]
 80044b8:	0019      	movs	r1, r3
 80044ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044bc:	f7fb fe2c 	bl	8000118 <__udivsi3>
 80044c0:	0003      	movs	r3, r0
 80044c2:	001a      	movs	r2, r3
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	085b      	lsrs	r3, r3, #1
 80044ca:	18d2      	adds	r2, r2, r3
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	0019      	movs	r1, r3
 80044d2:	0010      	movs	r0, r2
 80044d4:	f7fb fe20 	bl	8000118 <__udivsi3>
 80044d8:	0003      	movs	r3, r0
 80044da:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044de:	2b0f      	cmp	r3, #15
 80044e0:	d90a      	bls.n	80044f8 <UART_SetConfig+0x4ac>
 80044e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e4:	2380      	movs	r3, #128	; 0x80
 80044e6:	025b      	lsls	r3, r3, #9
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d205      	bcs.n	80044f8 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60da      	str	r2, [r3, #12]
 80044f6:	e005      	b.n	8004504 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80044f8:	231a      	movs	r3, #26
 80044fa:	2220      	movs	r2, #32
 80044fc:	189b      	adds	r3, r3, r2
 80044fe:	19db      	adds	r3, r3, r7
 8004500:	2201      	movs	r2, #1
 8004502:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	226a      	movs	r2, #106	; 0x6a
 8004508:	2101      	movs	r1, #1
 800450a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	2268      	movs	r2, #104	; 0x68
 8004510:	2101      	movs	r1, #1
 8004512:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	2200      	movs	r2, #0
 8004518:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	2200      	movs	r2, #0
 800451e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004520:	231a      	movs	r3, #26
 8004522:	2220      	movs	r2, #32
 8004524:	189b      	adds	r3, r3, r2
 8004526:	19db      	adds	r3, r3, r7
 8004528:	781b      	ldrb	r3, [r3, #0]
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b010      	add	sp, #64	; 0x40
 8004530:	bdb0      	pop	{r4, r5, r7, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	08005a78 	.word	0x08005a78
 8004538:	00f42400 	.word	0x00f42400

0800453c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004548:	2201      	movs	r2, #1
 800454a:	4013      	ands	r3, r2
 800454c:	d00b      	beq.n	8004566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4a4a      	ldr	r2, [pc, #296]	; (8004680 <UART_AdvFeatureConfig+0x144>)
 8004556:	4013      	ands	r3, r2
 8004558:	0019      	movs	r1, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	2202      	movs	r2, #2
 800456c:	4013      	ands	r3, r2
 800456e:	d00b      	beq.n	8004588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	4a43      	ldr	r2, [pc, #268]	; (8004684 <UART_AdvFeatureConfig+0x148>)
 8004578:	4013      	ands	r3, r2
 800457a:	0019      	movs	r1, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	2204      	movs	r2, #4
 800458e:	4013      	ands	r3, r2
 8004590:	d00b      	beq.n	80045aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4a3b      	ldr	r2, [pc, #236]	; (8004688 <UART_AdvFeatureConfig+0x14c>)
 800459a:	4013      	ands	r3, r2
 800459c:	0019      	movs	r1, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	2208      	movs	r2, #8
 80045b0:	4013      	ands	r3, r2
 80045b2:	d00b      	beq.n	80045cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	4a34      	ldr	r2, [pc, #208]	; (800468c <UART_AdvFeatureConfig+0x150>)
 80045bc:	4013      	ands	r3, r2
 80045be:	0019      	movs	r1, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d0:	2210      	movs	r2, #16
 80045d2:	4013      	ands	r3, r2
 80045d4:	d00b      	beq.n	80045ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4a2c      	ldr	r2, [pc, #176]	; (8004690 <UART_AdvFeatureConfig+0x154>)
 80045de:	4013      	ands	r3, r2
 80045e0:	0019      	movs	r1, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	2220      	movs	r2, #32
 80045f4:	4013      	ands	r3, r2
 80045f6:	d00b      	beq.n	8004610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	4a25      	ldr	r2, [pc, #148]	; (8004694 <UART_AdvFeatureConfig+0x158>)
 8004600:	4013      	ands	r3, r2
 8004602:	0019      	movs	r1, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	2240      	movs	r2, #64	; 0x40
 8004616:	4013      	ands	r3, r2
 8004618:	d01d      	beq.n	8004656 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4a1d      	ldr	r2, [pc, #116]	; (8004698 <UART_AdvFeatureConfig+0x15c>)
 8004622:	4013      	ands	r3, r2
 8004624:	0019      	movs	r1, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004636:	2380      	movs	r3, #128	; 0x80
 8004638:	035b      	lsls	r3, r3, #13
 800463a:	429a      	cmp	r2, r3
 800463c:	d10b      	bne.n	8004656 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	4a15      	ldr	r2, [pc, #84]	; (800469c <UART_AdvFeatureConfig+0x160>)
 8004646:	4013      	ands	r3, r2
 8004648:	0019      	movs	r1, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	2280      	movs	r2, #128	; 0x80
 800465c:	4013      	ands	r3, r2
 800465e:	d00b      	beq.n	8004678 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	4a0e      	ldr	r2, [pc, #56]	; (80046a0 <UART_AdvFeatureConfig+0x164>)
 8004668:	4013      	ands	r3, r2
 800466a:	0019      	movs	r1, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	605a      	str	r2, [r3, #4]
  }
}
 8004678:	46c0      	nop			; (mov r8, r8)
 800467a:	46bd      	mov	sp, r7
 800467c:	b002      	add	sp, #8
 800467e:	bd80      	pop	{r7, pc}
 8004680:	fffdffff 	.word	0xfffdffff
 8004684:	fffeffff 	.word	0xfffeffff
 8004688:	fffbffff 	.word	0xfffbffff
 800468c:	ffff7fff 	.word	0xffff7fff
 8004690:	ffffefff 	.word	0xffffefff
 8004694:	ffffdfff 	.word	0xffffdfff
 8004698:	ffefffff 	.word	0xffefffff
 800469c:	ff9fffff 	.word	0xff9fffff
 80046a0:	fff7ffff 	.word	0xfff7ffff

080046a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2290      	movs	r2, #144	; 0x90
 80046b0:	2100      	movs	r1, #0
 80046b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046b4:	f7fc fc48 	bl	8000f48 <HAL_GetTick>
 80046b8:	0003      	movs	r3, r0
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2208      	movs	r2, #8
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d10c      	bne.n	80046e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2280      	movs	r2, #128	; 0x80
 80046ce:	0391      	lsls	r1, r2, #14
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	4a1a      	ldr	r2, [pc, #104]	; (800473c <UART_CheckIdleState+0x98>)
 80046d4:	9200      	str	r2, [sp, #0]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f000 f832 	bl	8004740 <UART_WaitOnFlagUntilTimeout>
 80046dc:	1e03      	subs	r3, r0, #0
 80046de:	d001      	beq.n	80046e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e026      	b.n	8004732 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2204      	movs	r2, #4
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d10c      	bne.n	800470c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2280      	movs	r2, #128	; 0x80
 80046f6:	03d1      	lsls	r1, r2, #15
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	4a10      	ldr	r2, [pc, #64]	; (800473c <UART_CheckIdleState+0x98>)
 80046fc:	9200      	str	r2, [sp, #0]
 80046fe:	2200      	movs	r2, #0
 8004700:	f000 f81e 	bl	8004740 <UART_WaitOnFlagUntilTimeout>
 8004704:	1e03      	subs	r3, r0, #0
 8004706:	d001      	beq.n	800470c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e012      	b.n	8004732 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2288      	movs	r2, #136	; 0x88
 8004710:	2120      	movs	r1, #32
 8004712:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	228c      	movs	r2, #140	; 0x8c
 8004718:	2120      	movs	r1, #32
 800471a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2284      	movs	r2, #132	; 0x84
 800472c:	2100      	movs	r1, #0
 800472e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	0018      	movs	r0, r3
 8004734:	46bd      	mov	sp, r7
 8004736:	b004      	add	sp, #16
 8004738:	bd80      	pop	{r7, pc}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	01ffffff 	.word	0x01ffffff

08004740 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b094      	sub	sp, #80	; 0x50
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	1dfb      	adds	r3, r7, #7
 800474e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004750:	e0a7      	b.n	80048a2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004754:	3301      	adds	r3, #1
 8004756:	d100      	bne.n	800475a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004758:	e0a3      	b.n	80048a2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800475a:	f7fc fbf5 	bl	8000f48 <HAL_GetTick>
 800475e:	0002      	movs	r2, r0
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004766:	429a      	cmp	r2, r3
 8004768:	d302      	bcc.n	8004770 <UART_WaitOnFlagUntilTimeout+0x30>
 800476a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800476c:	2b00      	cmp	r3, #0
 800476e:	d13f      	bne.n	80047f0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004770:	f3ef 8310 	mrs	r3, PRIMASK
 8004774:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004776:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004778:	647b      	str	r3, [r7, #68]	; 0x44
 800477a:	2301      	movs	r3, #1
 800477c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	f383 8810 	msr	PRIMASK, r3
}
 8004784:	46c0      	nop			; (mov r8, r8)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	494e      	ldr	r1, [pc, #312]	; (80048cc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004792:	400a      	ands	r2, r1
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004798:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	f383 8810 	msr	PRIMASK, r3
}
 80047a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047a2:	f3ef 8310 	mrs	r3, PRIMASK
 80047a6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80047a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047aa:	643b      	str	r3, [r7, #64]	; 0x40
 80047ac:	2301      	movs	r3, #1
 80047ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b2:	f383 8810 	msr	PRIMASK, r3
}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2101      	movs	r1, #1
 80047c4:	438a      	bics	r2, r1
 80047c6:	609a      	str	r2, [r3, #8]
 80047c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ce:	f383 8810 	msr	PRIMASK, r3
}
 80047d2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2288      	movs	r2, #136	; 0x88
 80047d8:	2120      	movs	r1, #32
 80047da:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	228c      	movs	r2, #140	; 0x8c
 80047e0:	2120      	movs	r1, #32
 80047e2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2284      	movs	r2, #132	; 0x84
 80047e8:	2100      	movs	r1, #0
 80047ea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e069      	b.n	80048c4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2204      	movs	r2, #4
 80047f8:	4013      	ands	r3, r2
 80047fa:	d052      	beq.n	80048a2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	69da      	ldr	r2, [r3, #28]
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	401a      	ands	r2, r3
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	429a      	cmp	r2, r3
 800480e:	d148      	bne.n	80048a2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2280      	movs	r2, #128	; 0x80
 8004816:	0112      	lsls	r2, r2, #4
 8004818:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800481a:	f3ef 8310 	mrs	r3, PRIMASK
 800481e:	613b      	str	r3, [r7, #16]
  return(result);
 8004820:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004824:	2301      	movs	r3, #1
 8004826:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f383 8810 	msr	PRIMASK, r3
}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4924      	ldr	r1, [pc, #144]	; (80048cc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800483c:	400a      	ands	r2, r1
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004842:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	f383 8810 	msr	PRIMASK, r3
}
 800484a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800484c:	f3ef 8310 	mrs	r3, PRIMASK
 8004850:	61fb      	str	r3, [r7, #28]
  return(result);
 8004852:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004854:	64bb      	str	r3, [r7, #72]	; 0x48
 8004856:	2301      	movs	r3, #1
 8004858:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	f383 8810 	msr	PRIMASK, r3
}
 8004860:	46c0      	nop			; (mov r8, r8)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2101      	movs	r1, #1
 800486e:	438a      	bics	r2, r1
 8004870:	609a      	str	r2, [r3, #8]
 8004872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	f383 8810 	msr	PRIMASK, r3
}
 800487c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2288      	movs	r2, #136	; 0x88
 8004882:	2120      	movs	r1, #32
 8004884:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	228c      	movs	r2, #140	; 0x8c
 800488a:	2120      	movs	r1, #32
 800488c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2290      	movs	r2, #144	; 0x90
 8004892:	2120      	movs	r1, #32
 8004894:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2284      	movs	r2, #132	; 0x84
 800489a:	2100      	movs	r1, #0
 800489c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e010      	b.n	80048c4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	4013      	ands	r3, r2
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	425a      	negs	r2, r3
 80048b2:	4153      	adcs	r3, r2
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	001a      	movs	r2, r3
 80048b8:	1dfb      	adds	r3, r7, #7
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d100      	bne.n	80048c2 <UART_WaitOnFlagUntilTimeout+0x182>
 80048c0:	e747      	b.n	8004752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	0018      	movs	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b014      	add	sp, #80	; 0x50
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	fffffe5f 	.word	0xfffffe5f

080048d0 <__errno>:
 80048d0:	4b01      	ldr	r3, [pc, #4]	; (80048d8 <__errno+0x8>)
 80048d2:	6818      	ldr	r0, [r3, #0]
 80048d4:	4770      	bx	lr
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	20000028 	.word	0x20000028

080048dc <__libc_init_array>:
 80048dc:	b570      	push	{r4, r5, r6, lr}
 80048de:	2600      	movs	r6, #0
 80048e0:	4d0c      	ldr	r5, [pc, #48]	; (8004914 <__libc_init_array+0x38>)
 80048e2:	4c0d      	ldr	r4, [pc, #52]	; (8004918 <__libc_init_array+0x3c>)
 80048e4:	1b64      	subs	r4, r4, r5
 80048e6:	10a4      	asrs	r4, r4, #2
 80048e8:	42a6      	cmp	r6, r4
 80048ea:	d109      	bne.n	8004900 <__libc_init_array+0x24>
 80048ec:	2600      	movs	r6, #0
 80048ee:	f000 fff9 	bl	80058e4 <_init>
 80048f2:	4d0a      	ldr	r5, [pc, #40]	; (800491c <__libc_init_array+0x40>)
 80048f4:	4c0a      	ldr	r4, [pc, #40]	; (8004920 <__libc_init_array+0x44>)
 80048f6:	1b64      	subs	r4, r4, r5
 80048f8:	10a4      	asrs	r4, r4, #2
 80048fa:	42a6      	cmp	r6, r4
 80048fc:	d105      	bne.n	800490a <__libc_init_array+0x2e>
 80048fe:	bd70      	pop	{r4, r5, r6, pc}
 8004900:	00b3      	lsls	r3, r6, #2
 8004902:	58eb      	ldr	r3, [r5, r3]
 8004904:	4798      	blx	r3
 8004906:	3601      	adds	r6, #1
 8004908:	e7ee      	b.n	80048e8 <__libc_init_array+0xc>
 800490a:	00b3      	lsls	r3, r6, #2
 800490c:	58eb      	ldr	r3, [r5, r3]
 800490e:	4798      	blx	r3
 8004910:	3601      	adds	r6, #1
 8004912:	e7f2      	b.n	80048fa <__libc_init_array+0x1e>
 8004914:	08005b30 	.word	0x08005b30
 8004918:	08005b30 	.word	0x08005b30
 800491c:	08005b30 	.word	0x08005b30
 8004920:	08005b34 	.word	0x08005b34

08004924 <memset>:
 8004924:	0003      	movs	r3, r0
 8004926:	1882      	adds	r2, r0, r2
 8004928:	4293      	cmp	r3, r2
 800492a:	d100      	bne.n	800492e <memset+0xa>
 800492c:	4770      	bx	lr
 800492e:	7019      	strb	r1, [r3, #0]
 8004930:	3301      	adds	r3, #1
 8004932:	e7f9      	b.n	8004928 <memset+0x4>

08004934 <iprintf>:
 8004934:	b40f      	push	{r0, r1, r2, r3}
 8004936:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <iprintf+0x30>)
 8004938:	b513      	push	{r0, r1, r4, lr}
 800493a:	681c      	ldr	r4, [r3, #0]
 800493c:	2c00      	cmp	r4, #0
 800493e:	d005      	beq.n	800494c <iprintf+0x18>
 8004940:	69a3      	ldr	r3, [r4, #24]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d102      	bne.n	800494c <iprintf+0x18>
 8004946:	0020      	movs	r0, r4
 8004948:	f000 f870 	bl	8004a2c <__sinit>
 800494c:	ab05      	add	r3, sp, #20
 800494e:	0020      	movs	r0, r4
 8004950:	9a04      	ldr	r2, [sp, #16]
 8004952:	68a1      	ldr	r1, [r4, #8]
 8004954:	9301      	str	r3, [sp, #4]
 8004956:	f000 f9cd 	bl	8004cf4 <_vfiprintf_r>
 800495a:	bc16      	pop	{r1, r2, r4}
 800495c:	bc08      	pop	{r3}
 800495e:	b004      	add	sp, #16
 8004960:	4718      	bx	r3
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	20000028 	.word	0x20000028

08004968 <std>:
 8004968:	2300      	movs	r3, #0
 800496a:	b510      	push	{r4, lr}
 800496c:	0004      	movs	r4, r0
 800496e:	6003      	str	r3, [r0, #0]
 8004970:	6043      	str	r3, [r0, #4]
 8004972:	6083      	str	r3, [r0, #8]
 8004974:	8181      	strh	r1, [r0, #12]
 8004976:	6643      	str	r3, [r0, #100]	; 0x64
 8004978:	0019      	movs	r1, r3
 800497a:	81c2      	strh	r2, [r0, #14]
 800497c:	6103      	str	r3, [r0, #16]
 800497e:	6143      	str	r3, [r0, #20]
 8004980:	6183      	str	r3, [r0, #24]
 8004982:	2208      	movs	r2, #8
 8004984:	305c      	adds	r0, #92	; 0x5c
 8004986:	f7ff ffcd 	bl	8004924 <memset>
 800498a:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <std+0x38>)
 800498c:	6224      	str	r4, [r4, #32]
 800498e:	6263      	str	r3, [r4, #36]	; 0x24
 8004990:	4b04      	ldr	r3, [pc, #16]	; (80049a4 <std+0x3c>)
 8004992:	62a3      	str	r3, [r4, #40]	; 0x28
 8004994:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <std+0x40>)
 8004996:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004998:	4b04      	ldr	r3, [pc, #16]	; (80049ac <std+0x44>)
 800499a:	6323      	str	r3, [r4, #48]	; 0x30
 800499c:	bd10      	pop	{r4, pc}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	08005291 	.word	0x08005291
 80049a4:	080052b9 	.word	0x080052b9
 80049a8:	080052f1 	.word	0x080052f1
 80049ac:	0800531d 	.word	0x0800531d

080049b0 <_cleanup_r>:
 80049b0:	b510      	push	{r4, lr}
 80049b2:	4902      	ldr	r1, [pc, #8]	; (80049bc <_cleanup_r+0xc>)
 80049b4:	f000 f8ba 	bl	8004b2c <_fwalk_reent>
 80049b8:	bd10      	pop	{r4, pc}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	08005629 	.word	0x08005629

080049c0 <__sfmoreglue>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	2568      	movs	r5, #104	; 0x68
 80049c4:	1e4a      	subs	r2, r1, #1
 80049c6:	4355      	muls	r5, r2
 80049c8:	000e      	movs	r6, r1
 80049ca:	0029      	movs	r1, r5
 80049cc:	3174      	adds	r1, #116	; 0x74
 80049ce:	f000 f8f3 	bl	8004bb8 <_malloc_r>
 80049d2:	1e04      	subs	r4, r0, #0
 80049d4:	d008      	beq.n	80049e8 <__sfmoreglue+0x28>
 80049d6:	2100      	movs	r1, #0
 80049d8:	002a      	movs	r2, r5
 80049da:	6001      	str	r1, [r0, #0]
 80049dc:	6046      	str	r6, [r0, #4]
 80049de:	300c      	adds	r0, #12
 80049e0:	60a0      	str	r0, [r4, #8]
 80049e2:	3268      	adds	r2, #104	; 0x68
 80049e4:	f7ff ff9e 	bl	8004924 <memset>
 80049e8:	0020      	movs	r0, r4
 80049ea:	bd70      	pop	{r4, r5, r6, pc}

080049ec <__sfp_lock_acquire>:
 80049ec:	b510      	push	{r4, lr}
 80049ee:	4802      	ldr	r0, [pc, #8]	; (80049f8 <__sfp_lock_acquire+0xc>)
 80049f0:	f000 f8bd 	bl	8004b6e <__retarget_lock_acquire_recursive>
 80049f4:	bd10      	pop	{r4, pc}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	200001c5 	.word	0x200001c5

080049fc <__sfp_lock_release>:
 80049fc:	b510      	push	{r4, lr}
 80049fe:	4802      	ldr	r0, [pc, #8]	; (8004a08 <__sfp_lock_release+0xc>)
 8004a00:	f000 f8b6 	bl	8004b70 <__retarget_lock_release_recursive>
 8004a04:	bd10      	pop	{r4, pc}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	200001c5 	.word	0x200001c5

08004a0c <__sinit_lock_acquire>:
 8004a0c:	b510      	push	{r4, lr}
 8004a0e:	4802      	ldr	r0, [pc, #8]	; (8004a18 <__sinit_lock_acquire+0xc>)
 8004a10:	f000 f8ad 	bl	8004b6e <__retarget_lock_acquire_recursive>
 8004a14:	bd10      	pop	{r4, pc}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	200001c6 	.word	0x200001c6

08004a1c <__sinit_lock_release>:
 8004a1c:	b510      	push	{r4, lr}
 8004a1e:	4802      	ldr	r0, [pc, #8]	; (8004a28 <__sinit_lock_release+0xc>)
 8004a20:	f000 f8a6 	bl	8004b70 <__retarget_lock_release_recursive>
 8004a24:	bd10      	pop	{r4, pc}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	200001c6 	.word	0x200001c6

08004a2c <__sinit>:
 8004a2c:	b513      	push	{r0, r1, r4, lr}
 8004a2e:	0004      	movs	r4, r0
 8004a30:	f7ff ffec 	bl	8004a0c <__sinit_lock_acquire>
 8004a34:	69a3      	ldr	r3, [r4, #24]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <__sinit+0x14>
 8004a3a:	f7ff ffef 	bl	8004a1c <__sinit_lock_release>
 8004a3e:	bd13      	pop	{r0, r1, r4, pc}
 8004a40:	64a3      	str	r3, [r4, #72]	; 0x48
 8004a42:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004a44:	6523      	str	r3, [r4, #80]	; 0x50
 8004a46:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <__sinit+0x68>)
 8004a48:	4a13      	ldr	r2, [pc, #76]	; (8004a98 <__sinit+0x6c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a4e:	9301      	str	r3, [sp, #4]
 8004a50:	42a3      	cmp	r3, r4
 8004a52:	d101      	bne.n	8004a58 <__sinit+0x2c>
 8004a54:	2301      	movs	r3, #1
 8004a56:	61a3      	str	r3, [r4, #24]
 8004a58:	0020      	movs	r0, r4
 8004a5a:	f000 f81f 	bl	8004a9c <__sfp>
 8004a5e:	6060      	str	r0, [r4, #4]
 8004a60:	0020      	movs	r0, r4
 8004a62:	f000 f81b 	bl	8004a9c <__sfp>
 8004a66:	60a0      	str	r0, [r4, #8]
 8004a68:	0020      	movs	r0, r4
 8004a6a:	f000 f817 	bl	8004a9c <__sfp>
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2104      	movs	r1, #4
 8004a72:	60e0      	str	r0, [r4, #12]
 8004a74:	6860      	ldr	r0, [r4, #4]
 8004a76:	f7ff ff77 	bl	8004968 <std>
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	2109      	movs	r1, #9
 8004a7e:	68a0      	ldr	r0, [r4, #8]
 8004a80:	f7ff ff72 	bl	8004968 <std>
 8004a84:	2202      	movs	r2, #2
 8004a86:	2112      	movs	r1, #18
 8004a88:	68e0      	ldr	r0, [r4, #12]
 8004a8a:	f7ff ff6d 	bl	8004968 <std>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	61a3      	str	r3, [r4, #24]
 8004a92:	e7d2      	b.n	8004a3a <__sinit+0xe>
 8004a94:	08005a90 	.word	0x08005a90
 8004a98:	080049b1 	.word	0x080049b1

08004a9c <__sfp>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	0007      	movs	r7, r0
 8004aa0:	f7ff ffa4 	bl	80049ec <__sfp_lock_acquire>
 8004aa4:	4b1f      	ldr	r3, [pc, #124]	; (8004b24 <__sfp+0x88>)
 8004aa6:	681e      	ldr	r6, [r3, #0]
 8004aa8:	69b3      	ldr	r3, [r6, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <__sfp+0x18>
 8004aae:	0030      	movs	r0, r6
 8004ab0:	f7ff ffbc 	bl	8004a2c <__sinit>
 8004ab4:	3648      	adds	r6, #72	; 0x48
 8004ab6:	68b4      	ldr	r4, [r6, #8]
 8004ab8:	6873      	ldr	r3, [r6, #4]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	d504      	bpl.n	8004ac8 <__sfp+0x2c>
 8004abe:	6833      	ldr	r3, [r6, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d022      	beq.n	8004b0a <__sfp+0x6e>
 8004ac4:	6836      	ldr	r6, [r6, #0]
 8004ac6:	e7f6      	b.n	8004ab6 <__sfp+0x1a>
 8004ac8:	220c      	movs	r2, #12
 8004aca:	5ea5      	ldrsh	r5, [r4, r2]
 8004acc:	2d00      	cmp	r5, #0
 8004ace:	d11a      	bne.n	8004b06 <__sfp+0x6a>
 8004ad0:	0020      	movs	r0, r4
 8004ad2:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <__sfp+0x8c>)
 8004ad4:	3058      	adds	r0, #88	; 0x58
 8004ad6:	60e3      	str	r3, [r4, #12]
 8004ad8:	6665      	str	r5, [r4, #100]	; 0x64
 8004ada:	f000 f847 	bl	8004b6c <__retarget_lock_init_recursive>
 8004ade:	f7ff ff8d 	bl	80049fc <__sfp_lock_release>
 8004ae2:	0020      	movs	r0, r4
 8004ae4:	2208      	movs	r2, #8
 8004ae6:	0029      	movs	r1, r5
 8004ae8:	6025      	str	r5, [r4, #0]
 8004aea:	60a5      	str	r5, [r4, #8]
 8004aec:	6065      	str	r5, [r4, #4]
 8004aee:	6125      	str	r5, [r4, #16]
 8004af0:	6165      	str	r5, [r4, #20]
 8004af2:	61a5      	str	r5, [r4, #24]
 8004af4:	305c      	adds	r0, #92	; 0x5c
 8004af6:	f7ff ff15 	bl	8004924 <memset>
 8004afa:	6365      	str	r5, [r4, #52]	; 0x34
 8004afc:	63a5      	str	r5, [r4, #56]	; 0x38
 8004afe:	64a5      	str	r5, [r4, #72]	; 0x48
 8004b00:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004b02:	0020      	movs	r0, r4
 8004b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b06:	3468      	adds	r4, #104	; 0x68
 8004b08:	e7d7      	b.n	8004aba <__sfp+0x1e>
 8004b0a:	2104      	movs	r1, #4
 8004b0c:	0038      	movs	r0, r7
 8004b0e:	f7ff ff57 	bl	80049c0 <__sfmoreglue>
 8004b12:	1e04      	subs	r4, r0, #0
 8004b14:	6030      	str	r0, [r6, #0]
 8004b16:	d1d5      	bne.n	8004ac4 <__sfp+0x28>
 8004b18:	f7ff ff70 	bl	80049fc <__sfp_lock_release>
 8004b1c:	230c      	movs	r3, #12
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	e7ef      	b.n	8004b02 <__sfp+0x66>
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	08005a90 	.word	0x08005a90
 8004b28:	ffff0001 	.word	0xffff0001

08004b2c <_fwalk_reent>:
 8004b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b2e:	0004      	movs	r4, r0
 8004b30:	0006      	movs	r6, r0
 8004b32:	2700      	movs	r7, #0
 8004b34:	9101      	str	r1, [sp, #4]
 8004b36:	3448      	adds	r4, #72	; 0x48
 8004b38:	6863      	ldr	r3, [r4, #4]
 8004b3a:	68a5      	ldr	r5, [r4, #8]
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	9b00      	ldr	r3, [sp, #0]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	d504      	bpl.n	8004b50 <_fwalk_reent+0x24>
 8004b46:	6824      	ldr	r4, [r4, #0]
 8004b48:	2c00      	cmp	r4, #0
 8004b4a:	d1f5      	bne.n	8004b38 <_fwalk_reent+0xc>
 8004b4c:	0038      	movs	r0, r7
 8004b4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b50:	89ab      	ldrh	r3, [r5, #12]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d908      	bls.n	8004b68 <_fwalk_reent+0x3c>
 8004b56:	220e      	movs	r2, #14
 8004b58:	5eab      	ldrsh	r3, [r5, r2]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	d004      	beq.n	8004b68 <_fwalk_reent+0x3c>
 8004b5e:	0029      	movs	r1, r5
 8004b60:	0030      	movs	r0, r6
 8004b62:	9b01      	ldr	r3, [sp, #4]
 8004b64:	4798      	blx	r3
 8004b66:	4307      	orrs	r7, r0
 8004b68:	3568      	adds	r5, #104	; 0x68
 8004b6a:	e7e8      	b.n	8004b3e <_fwalk_reent+0x12>

08004b6c <__retarget_lock_init_recursive>:
 8004b6c:	4770      	bx	lr

08004b6e <__retarget_lock_acquire_recursive>:
 8004b6e:	4770      	bx	lr

08004b70 <__retarget_lock_release_recursive>:
 8004b70:	4770      	bx	lr
	...

08004b74 <sbrk_aligned>:
 8004b74:	b570      	push	{r4, r5, r6, lr}
 8004b76:	4e0f      	ldr	r6, [pc, #60]	; (8004bb4 <sbrk_aligned+0x40>)
 8004b78:	000d      	movs	r5, r1
 8004b7a:	6831      	ldr	r1, [r6, #0]
 8004b7c:	0004      	movs	r4, r0
 8004b7e:	2900      	cmp	r1, #0
 8004b80:	d102      	bne.n	8004b88 <sbrk_aligned+0x14>
 8004b82:	f000 fb73 	bl	800526c <_sbrk_r>
 8004b86:	6030      	str	r0, [r6, #0]
 8004b88:	0029      	movs	r1, r5
 8004b8a:	0020      	movs	r0, r4
 8004b8c:	f000 fb6e 	bl	800526c <_sbrk_r>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d00a      	beq.n	8004baa <sbrk_aligned+0x36>
 8004b94:	2303      	movs	r3, #3
 8004b96:	1cc5      	adds	r5, r0, #3
 8004b98:	439d      	bics	r5, r3
 8004b9a:	42a8      	cmp	r0, r5
 8004b9c:	d007      	beq.n	8004bae <sbrk_aligned+0x3a>
 8004b9e:	1a29      	subs	r1, r5, r0
 8004ba0:	0020      	movs	r0, r4
 8004ba2:	f000 fb63 	bl	800526c <_sbrk_r>
 8004ba6:	1c43      	adds	r3, r0, #1
 8004ba8:	d101      	bne.n	8004bae <sbrk_aligned+0x3a>
 8004baa:	2501      	movs	r5, #1
 8004bac:	426d      	negs	r5, r5
 8004bae:	0028      	movs	r0, r5
 8004bb0:	bd70      	pop	{r4, r5, r6, pc}
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	200001cc 	.word	0x200001cc

08004bb8 <_malloc_r>:
 8004bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bba:	2203      	movs	r2, #3
 8004bbc:	1ccb      	adds	r3, r1, #3
 8004bbe:	4393      	bics	r3, r2
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	0006      	movs	r6, r0
 8004bc4:	001f      	movs	r7, r3
 8004bc6:	2b0c      	cmp	r3, #12
 8004bc8:	d232      	bcs.n	8004c30 <_malloc_r+0x78>
 8004bca:	270c      	movs	r7, #12
 8004bcc:	42b9      	cmp	r1, r7
 8004bce:	d831      	bhi.n	8004c34 <_malloc_r+0x7c>
 8004bd0:	0030      	movs	r0, r6
 8004bd2:	f000 fdf5 	bl	80057c0 <__malloc_lock>
 8004bd6:	4d32      	ldr	r5, [pc, #200]	; (8004ca0 <_malloc_r+0xe8>)
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	001c      	movs	r4, r3
 8004bdc:	2c00      	cmp	r4, #0
 8004bde:	d12e      	bne.n	8004c3e <_malloc_r+0x86>
 8004be0:	0039      	movs	r1, r7
 8004be2:	0030      	movs	r0, r6
 8004be4:	f7ff ffc6 	bl	8004b74 <sbrk_aligned>
 8004be8:	0004      	movs	r4, r0
 8004bea:	1c43      	adds	r3, r0, #1
 8004bec:	d11e      	bne.n	8004c2c <_malloc_r+0x74>
 8004bee:	682c      	ldr	r4, [r5, #0]
 8004bf0:	0025      	movs	r5, r4
 8004bf2:	2d00      	cmp	r5, #0
 8004bf4:	d14a      	bne.n	8004c8c <_malloc_r+0xd4>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	0029      	movs	r1, r5
 8004bfa:	18e3      	adds	r3, r4, r3
 8004bfc:	0030      	movs	r0, r6
 8004bfe:	9301      	str	r3, [sp, #4]
 8004c00:	f000 fb34 	bl	800526c <_sbrk_r>
 8004c04:	9b01      	ldr	r3, [sp, #4]
 8004c06:	4283      	cmp	r3, r0
 8004c08:	d143      	bne.n	8004c92 <_malloc_r+0xda>
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	3703      	adds	r7, #3
 8004c0e:	1aff      	subs	r7, r7, r3
 8004c10:	2303      	movs	r3, #3
 8004c12:	439f      	bics	r7, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	2f0c      	cmp	r7, #12
 8004c18:	d200      	bcs.n	8004c1c <_malloc_r+0x64>
 8004c1a:	270c      	movs	r7, #12
 8004c1c:	0039      	movs	r1, r7
 8004c1e:	0030      	movs	r0, r6
 8004c20:	f7ff ffa8 	bl	8004b74 <sbrk_aligned>
 8004c24:	1c43      	adds	r3, r0, #1
 8004c26:	d034      	beq.n	8004c92 <_malloc_r+0xda>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	19df      	adds	r7, r3, r7
 8004c2c:	6027      	str	r7, [r4, #0]
 8004c2e:	e013      	b.n	8004c58 <_malloc_r+0xa0>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	dacb      	bge.n	8004bcc <_malloc_r+0x14>
 8004c34:	230c      	movs	r3, #12
 8004c36:	2500      	movs	r5, #0
 8004c38:	6033      	str	r3, [r6, #0]
 8004c3a:	0028      	movs	r0, r5
 8004c3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c3e:	6822      	ldr	r2, [r4, #0]
 8004c40:	1bd1      	subs	r1, r2, r7
 8004c42:	d420      	bmi.n	8004c86 <_malloc_r+0xce>
 8004c44:	290b      	cmp	r1, #11
 8004c46:	d917      	bls.n	8004c78 <_malloc_r+0xc0>
 8004c48:	19e2      	adds	r2, r4, r7
 8004c4a:	6027      	str	r7, [r4, #0]
 8004c4c:	42a3      	cmp	r3, r4
 8004c4e:	d111      	bne.n	8004c74 <_malloc_r+0xbc>
 8004c50:	602a      	str	r2, [r5, #0]
 8004c52:	6863      	ldr	r3, [r4, #4]
 8004c54:	6011      	str	r1, [r2, #0]
 8004c56:	6053      	str	r3, [r2, #4]
 8004c58:	0030      	movs	r0, r6
 8004c5a:	0025      	movs	r5, r4
 8004c5c:	f000 fdb8 	bl	80057d0 <__malloc_unlock>
 8004c60:	2207      	movs	r2, #7
 8004c62:	350b      	adds	r5, #11
 8004c64:	1d23      	adds	r3, r4, #4
 8004c66:	4395      	bics	r5, r2
 8004c68:	1aea      	subs	r2, r5, r3
 8004c6a:	429d      	cmp	r5, r3
 8004c6c:	d0e5      	beq.n	8004c3a <_malloc_r+0x82>
 8004c6e:	1b5b      	subs	r3, r3, r5
 8004c70:	50a3      	str	r3, [r4, r2]
 8004c72:	e7e2      	b.n	8004c3a <_malloc_r+0x82>
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	e7ec      	b.n	8004c52 <_malloc_r+0x9a>
 8004c78:	6862      	ldr	r2, [r4, #4]
 8004c7a:	42a3      	cmp	r3, r4
 8004c7c:	d101      	bne.n	8004c82 <_malloc_r+0xca>
 8004c7e:	602a      	str	r2, [r5, #0]
 8004c80:	e7ea      	b.n	8004c58 <_malloc_r+0xa0>
 8004c82:	605a      	str	r2, [r3, #4]
 8004c84:	e7e8      	b.n	8004c58 <_malloc_r+0xa0>
 8004c86:	0023      	movs	r3, r4
 8004c88:	6864      	ldr	r4, [r4, #4]
 8004c8a:	e7a7      	b.n	8004bdc <_malloc_r+0x24>
 8004c8c:	002c      	movs	r4, r5
 8004c8e:	686d      	ldr	r5, [r5, #4]
 8004c90:	e7af      	b.n	8004bf2 <_malloc_r+0x3a>
 8004c92:	230c      	movs	r3, #12
 8004c94:	0030      	movs	r0, r6
 8004c96:	6033      	str	r3, [r6, #0]
 8004c98:	f000 fd9a 	bl	80057d0 <__malloc_unlock>
 8004c9c:	e7cd      	b.n	8004c3a <_malloc_r+0x82>
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	200001c8 	.word	0x200001c8

08004ca4 <__sfputc_r>:
 8004ca4:	6893      	ldr	r3, [r2, #8]
 8004ca6:	b510      	push	{r4, lr}
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	6093      	str	r3, [r2, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	da04      	bge.n	8004cba <__sfputc_r+0x16>
 8004cb0:	6994      	ldr	r4, [r2, #24]
 8004cb2:	42a3      	cmp	r3, r4
 8004cb4:	db07      	blt.n	8004cc6 <__sfputc_r+0x22>
 8004cb6:	290a      	cmp	r1, #10
 8004cb8:	d005      	beq.n	8004cc6 <__sfputc_r+0x22>
 8004cba:	6813      	ldr	r3, [r2, #0]
 8004cbc:	1c58      	adds	r0, r3, #1
 8004cbe:	6010      	str	r0, [r2, #0]
 8004cc0:	7019      	strb	r1, [r3, #0]
 8004cc2:	0008      	movs	r0, r1
 8004cc4:	bd10      	pop	{r4, pc}
 8004cc6:	f000 fb2f 	bl	8005328 <__swbuf_r>
 8004cca:	0001      	movs	r1, r0
 8004ccc:	e7f9      	b.n	8004cc2 <__sfputc_r+0x1e>

08004cce <__sfputs_r>:
 8004cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd0:	0006      	movs	r6, r0
 8004cd2:	000f      	movs	r7, r1
 8004cd4:	0014      	movs	r4, r2
 8004cd6:	18d5      	adds	r5, r2, r3
 8004cd8:	42ac      	cmp	r4, r5
 8004cda:	d101      	bne.n	8004ce0 <__sfputs_r+0x12>
 8004cdc:	2000      	movs	r0, #0
 8004cde:	e007      	b.n	8004cf0 <__sfputs_r+0x22>
 8004ce0:	7821      	ldrb	r1, [r4, #0]
 8004ce2:	003a      	movs	r2, r7
 8004ce4:	0030      	movs	r0, r6
 8004ce6:	f7ff ffdd 	bl	8004ca4 <__sfputc_r>
 8004cea:	3401      	adds	r4, #1
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	d1f3      	bne.n	8004cd8 <__sfputs_r+0xa>
 8004cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cf4 <_vfiprintf_r>:
 8004cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cf6:	b0a1      	sub	sp, #132	; 0x84
 8004cf8:	0006      	movs	r6, r0
 8004cfa:	000c      	movs	r4, r1
 8004cfc:	001f      	movs	r7, r3
 8004cfe:	9203      	str	r2, [sp, #12]
 8004d00:	2800      	cmp	r0, #0
 8004d02:	d004      	beq.n	8004d0e <_vfiprintf_r+0x1a>
 8004d04:	6983      	ldr	r3, [r0, #24]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <_vfiprintf_r+0x1a>
 8004d0a:	f7ff fe8f 	bl	8004a2c <__sinit>
 8004d0e:	4b8e      	ldr	r3, [pc, #568]	; (8004f48 <_vfiprintf_r+0x254>)
 8004d10:	429c      	cmp	r4, r3
 8004d12:	d11c      	bne.n	8004d4e <_vfiprintf_r+0x5a>
 8004d14:	6874      	ldr	r4, [r6, #4]
 8004d16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d18:	07db      	lsls	r3, r3, #31
 8004d1a:	d405      	bmi.n	8004d28 <_vfiprintf_r+0x34>
 8004d1c:	89a3      	ldrh	r3, [r4, #12]
 8004d1e:	059b      	lsls	r3, r3, #22
 8004d20:	d402      	bmi.n	8004d28 <_vfiprintf_r+0x34>
 8004d22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d24:	f7ff ff23 	bl	8004b6e <__retarget_lock_acquire_recursive>
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	071b      	lsls	r3, r3, #28
 8004d2c:	d502      	bpl.n	8004d34 <_vfiprintf_r+0x40>
 8004d2e:	6923      	ldr	r3, [r4, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d11d      	bne.n	8004d70 <_vfiprintf_r+0x7c>
 8004d34:	0021      	movs	r1, r4
 8004d36:	0030      	movs	r0, r6
 8004d38:	f000 fb60 	bl	80053fc <__swsetup_r>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	d017      	beq.n	8004d70 <_vfiprintf_r+0x7c>
 8004d40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d42:	07db      	lsls	r3, r3, #31
 8004d44:	d50d      	bpl.n	8004d62 <_vfiprintf_r+0x6e>
 8004d46:	2001      	movs	r0, #1
 8004d48:	4240      	negs	r0, r0
 8004d4a:	b021      	add	sp, #132	; 0x84
 8004d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d4e:	4b7f      	ldr	r3, [pc, #508]	; (8004f4c <_vfiprintf_r+0x258>)
 8004d50:	429c      	cmp	r4, r3
 8004d52:	d101      	bne.n	8004d58 <_vfiprintf_r+0x64>
 8004d54:	68b4      	ldr	r4, [r6, #8]
 8004d56:	e7de      	b.n	8004d16 <_vfiprintf_r+0x22>
 8004d58:	4b7d      	ldr	r3, [pc, #500]	; (8004f50 <_vfiprintf_r+0x25c>)
 8004d5a:	429c      	cmp	r4, r3
 8004d5c:	d1db      	bne.n	8004d16 <_vfiprintf_r+0x22>
 8004d5e:	68f4      	ldr	r4, [r6, #12]
 8004d60:	e7d9      	b.n	8004d16 <_vfiprintf_r+0x22>
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	059b      	lsls	r3, r3, #22
 8004d66:	d4ee      	bmi.n	8004d46 <_vfiprintf_r+0x52>
 8004d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d6a:	f7ff ff01 	bl	8004b70 <__retarget_lock_release_recursive>
 8004d6e:	e7ea      	b.n	8004d46 <_vfiprintf_r+0x52>
 8004d70:	2300      	movs	r3, #0
 8004d72:	ad08      	add	r5, sp, #32
 8004d74:	616b      	str	r3, [r5, #20]
 8004d76:	3320      	adds	r3, #32
 8004d78:	766b      	strb	r3, [r5, #25]
 8004d7a:	3310      	adds	r3, #16
 8004d7c:	76ab      	strb	r3, [r5, #26]
 8004d7e:	9707      	str	r7, [sp, #28]
 8004d80:	9f03      	ldr	r7, [sp, #12]
 8004d82:	783b      	ldrb	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <_vfiprintf_r+0x98>
 8004d88:	2b25      	cmp	r3, #37	; 0x25
 8004d8a:	d14e      	bne.n	8004e2a <_vfiprintf_r+0x136>
 8004d8c:	9b03      	ldr	r3, [sp, #12]
 8004d8e:	1afb      	subs	r3, r7, r3
 8004d90:	9305      	str	r3, [sp, #20]
 8004d92:	9b03      	ldr	r3, [sp, #12]
 8004d94:	429f      	cmp	r7, r3
 8004d96:	d00d      	beq.n	8004db4 <_vfiprintf_r+0xc0>
 8004d98:	9b05      	ldr	r3, [sp, #20]
 8004d9a:	0021      	movs	r1, r4
 8004d9c:	0030      	movs	r0, r6
 8004d9e:	9a03      	ldr	r2, [sp, #12]
 8004da0:	f7ff ff95 	bl	8004cce <__sfputs_r>
 8004da4:	1c43      	adds	r3, r0, #1
 8004da6:	d100      	bne.n	8004daa <_vfiprintf_r+0xb6>
 8004da8:	e0b5      	b.n	8004f16 <_vfiprintf_r+0x222>
 8004daa:	696a      	ldr	r2, [r5, #20]
 8004dac:	9b05      	ldr	r3, [sp, #20]
 8004dae:	4694      	mov	ip, r2
 8004db0:	4463      	add	r3, ip
 8004db2:	616b      	str	r3, [r5, #20]
 8004db4:	783b      	ldrb	r3, [r7, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d100      	bne.n	8004dbc <_vfiprintf_r+0xc8>
 8004dba:	e0ac      	b.n	8004f16 <_vfiprintf_r+0x222>
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	1c7b      	adds	r3, r7, #1
 8004dc0:	9303      	str	r3, [sp, #12]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	4252      	negs	r2, r2
 8004dc6:	606a      	str	r2, [r5, #4]
 8004dc8:	a904      	add	r1, sp, #16
 8004dca:	3254      	adds	r2, #84	; 0x54
 8004dcc:	1852      	adds	r2, r2, r1
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	60eb      	str	r3, [r5, #12]
 8004dd2:	60ab      	str	r3, [r5, #8]
 8004dd4:	7013      	strb	r3, [r2, #0]
 8004dd6:	65ab      	str	r3, [r5, #88]	; 0x58
 8004dd8:	9b03      	ldr	r3, [sp, #12]
 8004dda:	2205      	movs	r2, #5
 8004ddc:	7819      	ldrb	r1, [r3, #0]
 8004dde:	485d      	ldr	r0, [pc, #372]	; (8004f54 <_vfiprintf_r+0x260>)
 8004de0:	f000 fce2 	bl	80057a8 <memchr>
 8004de4:	9b03      	ldr	r3, [sp, #12]
 8004de6:	1c5f      	adds	r7, r3, #1
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d120      	bne.n	8004e2e <_vfiprintf_r+0x13a>
 8004dec:	682a      	ldr	r2, [r5, #0]
 8004dee:	06d3      	lsls	r3, r2, #27
 8004df0:	d504      	bpl.n	8004dfc <_vfiprintf_r+0x108>
 8004df2:	2353      	movs	r3, #83	; 0x53
 8004df4:	a904      	add	r1, sp, #16
 8004df6:	185b      	adds	r3, r3, r1
 8004df8:	2120      	movs	r1, #32
 8004dfa:	7019      	strb	r1, [r3, #0]
 8004dfc:	0713      	lsls	r3, r2, #28
 8004dfe:	d504      	bpl.n	8004e0a <_vfiprintf_r+0x116>
 8004e00:	2353      	movs	r3, #83	; 0x53
 8004e02:	a904      	add	r1, sp, #16
 8004e04:	185b      	adds	r3, r3, r1
 8004e06:	212b      	movs	r1, #43	; 0x2b
 8004e08:	7019      	strb	r1, [r3, #0]
 8004e0a:	9b03      	ldr	r3, [sp, #12]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e10:	d016      	beq.n	8004e40 <_vfiprintf_r+0x14c>
 8004e12:	2100      	movs	r1, #0
 8004e14:	68eb      	ldr	r3, [r5, #12]
 8004e16:	9f03      	ldr	r7, [sp, #12]
 8004e18:	783a      	ldrb	r2, [r7, #0]
 8004e1a:	1c78      	adds	r0, r7, #1
 8004e1c:	3a30      	subs	r2, #48	; 0x30
 8004e1e:	4684      	mov	ip, r0
 8004e20:	2a09      	cmp	r2, #9
 8004e22:	d94f      	bls.n	8004ec4 <_vfiprintf_r+0x1d0>
 8004e24:	2900      	cmp	r1, #0
 8004e26:	d111      	bne.n	8004e4c <_vfiprintf_r+0x158>
 8004e28:	e017      	b.n	8004e5a <_vfiprintf_r+0x166>
 8004e2a:	3701      	adds	r7, #1
 8004e2c:	e7a9      	b.n	8004d82 <_vfiprintf_r+0x8e>
 8004e2e:	4b49      	ldr	r3, [pc, #292]	; (8004f54 <_vfiprintf_r+0x260>)
 8004e30:	682a      	ldr	r2, [r5, #0]
 8004e32:	1ac0      	subs	r0, r0, r3
 8004e34:	2301      	movs	r3, #1
 8004e36:	4083      	lsls	r3, r0
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	602b      	str	r3, [r5, #0]
 8004e3c:	9703      	str	r7, [sp, #12]
 8004e3e:	e7cb      	b.n	8004dd8 <_vfiprintf_r+0xe4>
 8004e40:	9b07      	ldr	r3, [sp, #28]
 8004e42:	1d19      	adds	r1, r3, #4
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	9107      	str	r1, [sp, #28]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	db01      	blt.n	8004e50 <_vfiprintf_r+0x15c>
 8004e4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e4e:	e004      	b.n	8004e5a <_vfiprintf_r+0x166>
 8004e50:	425b      	negs	r3, r3
 8004e52:	60eb      	str	r3, [r5, #12]
 8004e54:	2302      	movs	r3, #2
 8004e56:	4313      	orrs	r3, r2
 8004e58:	602b      	str	r3, [r5, #0]
 8004e5a:	783b      	ldrb	r3, [r7, #0]
 8004e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8004e5e:	d10a      	bne.n	8004e76 <_vfiprintf_r+0x182>
 8004e60:	787b      	ldrb	r3, [r7, #1]
 8004e62:	2b2a      	cmp	r3, #42	; 0x2a
 8004e64:	d137      	bne.n	8004ed6 <_vfiprintf_r+0x1e2>
 8004e66:	9b07      	ldr	r3, [sp, #28]
 8004e68:	3702      	adds	r7, #2
 8004e6a:	1d1a      	adds	r2, r3, #4
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	9207      	str	r2, [sp, #28]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	db2d      	blt.n	8004ed0 <_vfiprintf_r+0x1dc>
 8004e74:	9309      	str	r3, [sp, #36]	; 0x24
 8004e76:	2203      	movs	r2, #3
 8004e78:	7839      	ldrb	r1, [r7, #0]
 8004e7a:	4837      	ldr	r0, [pc, #220]	; (8004f58 <_vfiprintf_r+0x264>)
 8004e7c:	f000 fc94 	bl	80057a8 <memchr>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d007      	beq.n	8004e94 <_vfiprintf_r+0x1a0>
 8004e84:	4b34      	ldr	r3, [pc, #208]	; (8004f58 <_vfiprintf_r+0x264>)
 8004e86:	682a      	ldr	r2, [r5, #0]
 8004e88:	1ac0      	subs	r0, r0, r3
 8004e8a:	2340      	movs	r3, #64	; 0x40
 8004e8c:	4083      	lsls	r3, r0
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	3701      	adds	r7, #1
 8004e92:	602b      	str	r3, [r5, #0]
 8004e94:	7839      	ldrb	r1, [r7, #0]
 8004e96:	1c7b      	adds	r3, r7, #1
 8004e98:	2206      	movs	r2, #6
 8004e9a:	4830      	ldr	r0, [pc, #192]	; (8004f5c <_vfiprintf_r+0x268>)
 8004e9c:	9303      	str	r3, [sp, #12]
 8004e9e:	7629      	strb	r1, [r5, #24]
 8004ea0:	f000 fc82 	bl	80057a8 <memchr>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d045      	beq.n	8004f34 <_vfiprintf_r+0x240>
 8004ea8:	4b2d      	ldr	r3, [pc, #180]	; (8004f60 <_vfiprintf_r+0x26c>)
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d127      	bne.n	8004efe <_vfiprintf_r+0x20a>
 8004eae:	2207      	movs	r2, #7
 8004eb0:	9b07      	ldr	r3, [sp, #28]
 8004eb2:	3307      	adds	r3, #7
 8004eb4:	4393      	bics	r3, r2
 8004eb6:	3308      	adds	r3, #8
 8004eb8:	9307      	str	r3, [sp, #28]
 8004eba:	696b      	ldr	r3, [r5, #20]
 8004ebc:	9a04      	ldr	r2, [sp, #16]
 8004ebe:	189b      	adds	r3, r3, r2
 8004ec0:	616b      	str	r3, [r5, #20]
 8004ec2:	e75d      	b.n	8004d80 <_vfiprintf_r+0x8c>
 8004ec4:	210a      	movs	r1, #10
 8004ec6:	434b      	muls	r3, r1
 8004ec8:	4667      	mov	r7, ip
 8004eca:	189b      	adds	r3, r3, r2
 8004ecc:	3909      	subs	r1, #9
 8004ece:	e7a3      	b.n	8004e18 <_vfiprintf_r+0x124>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	425b      	negs	r3, r3
 8004ed4:	e7ce      	b.n	8004e74 <_vfiprintf_r+0x180>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	001a      	movs	r2, r3
 8004eda:	3701      	adds	r7, #1
 8004edc:	606b      	str	r3, [r5, #4]
 8004ede:	7839      	ldrb	r1, [r7, #0]
 8004ee0:	1c78      	adds	r0, r7, #1
 8004ee2:	3930      	subs	r1, #48	; 0x30
 8004ee4:	4684      	mov	ip, r0
 8004ee6:	2909      	cmp	r1, #9
 8004ee8:	d903      	bls.n	8004ef2 <_vfiprintf_r+0x1fe>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0c3      	beq.n	8004e76 <_vfiprintf_r+0x182>
 8004eee:	9209      	str	r2, [sp, #36]	; 0x24
 8004ef0:	e7c1      	b.n	8004e76 <_vfiprintf_r+0x182>
 8004ef2:	230a      	movs	r3, #10
 8004ef4:	435a      	muls	r2, r3
 8004ef6:	4667      	mov	r7, ip
 8004ef8:	1852      	adds	r2, r2, r1
 8004efa:	3b09      	subs	r3, #9
 8004efc:	e7ef      	b.n	8004ede <_vfiprintf_r+0x1ea>
 8004efe:	ab07      	add	r3, sp, #28
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	0022      	movs	r2, r4
 8004f04:	0029      	movs	r1, r5
 8004f06:	0030      	movs	r0, r6
 8004f08:	4b16      	ldr	r3, [pc, #88]	; (8004f64 <_vfiprintf_r+0x270>)
 8004f0a:	e000      	b.n	8004f0e <_vfiprintf_r+0x21a>
 8004f0c:	bf00      	nop
 8004f0e:	9004      	str	r0, [sp, #16]
 8004f10:	9b04      	ldr	r3, [sp, #16]
 8004f12:	3301      	adds	r3, #1
 8004f14:	d1d1      	bne.n	8004eba <_vfiprintf_r+0x1c6>
 8004f16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f18:	07db      	lsls	r3, r3, #31
 8004f1a:	d405      	bmi.n	8004f28 <_vfiprintf_r+0x234>
 8004f1c:	89a3      	ldrh	r3, [r4, #12]
 8004f1e:	059b      	lsls	r3, r3, #22
 8004f20:	d402      	bmi.n	8004f28 <_vfiprintf_r+0x234>
 8004f22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f24:	f7ff fe24 	bl	8004b70 <__retarget_lock_release_recursive>
 8004f28:	89a3      	ldrh	r3, [r4, #12]
 8004f2a:	065b      	lsls	r3, r3, #25
 8004f2c:	d500      	bpl.n	8004f30 <_vfiprintf_r+0x23c>
 8004f2e:	e70a      	b.n	8004d46 <_vfiprintf_r+0x52>
 8004f30:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004f32:	e70a      	b.n	8004d4a <_vfiprintf_r+0x56>
 8004f34:	ab07      	add	r3, sp, #28
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	0022      	movs	r2, r4
 8004f3a:	0029      	movs	r1, r5
 8004f3c:	0030      	movs	r0, r6
 8004f3e:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <_vfiprintf_r+0x270>)
 8004f40:	f000 f882 	bl	8005048 <_printf_i>
 8004f44:	e7e3      	b.n	8004f0e <_vfiprintf_r+0x21a>
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	08005ab4 	.word	0x08005ab4
 8004f4c:	08005ad4 	.word	0x08005ad4
 8004f50:	08005a94 	.word	0x08005a94
 8004f54:	08005af4 	.word	0x08005af4
 8004f58:	08005afa 	.word	0x08005afa
 8004f5c:	08005afe 	.word	0x08005afe
 8004f60:	00000000 	.word	0x00000000
 8004f64:	08004ccf 	.word	0x08004ccf

08004f68 <_printf_common>:
 8004f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f6a:	0015      	movs	r5, r2
 8004f6c:	9301      	str	r3, [sp, #4]
 8004f6e:	688a      	ldr	r2, [r1, #8]
 8004f70:	690b      	ldr	r3, [r1, #16]
 8004f72:	000c      	movs	r4, r1
 8004f74:	9000      	str	r0, [sp, #0]
 8004f76:	4293      	cmp	r3, r2
 8004f78:	da00      	bge.n	8004f7c <_printf_common+0x14>
 8004f7a:	0013      	movs	r3, r2
 8004f7c:	0022      	movs	r2, r4
 8004f7e:	602b      	str	r3, [r5, #0]
 8004f80:	3243      	adds	r2, #67	; 0x43
 8004f82:	7812      	ldrb	r2, [r2, #0]
 8004f84:	2a00      	cmp	r2, #0
 8004f86:	d001      	beq.n	8004f8c <_printf_common+0x24>
 8004f88:	3301      	adds	r3, #1
 8004f8a:	602b      	str	r3, [r5, #0]
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	069b      	lsls	r3, r3, #26
 8004f90:	d502      	bpl.n	8004f98 <_printf_common+0x30>
 8004f92:	682b      	ldr	r3, [r5, #0]
 8004f94:	3302      	adds	r3, #2
 8004f96:	602b      	str	r3, [r5, #0]
 8004f98:	6822      	ldr	r2, [r4, #0]
 8004f9a:	2306      	movs	r3, #6
 8004f9c:	0017      	movs	r7, r2
 8004f9e:	401f      	ands	r7, r3
 8004fa0:	421a      	tst	r2, r3
 8004fa2:	d027      	beq.n	8004ff4 <_printf_common+0x8c>
 8004fa4:	0023      	movs	r3, r4
 8004fa6:	3343      	adds	r3, #67	; 0x43
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	1e5a      	subs	r2, r3, #1
 8004fac:	4193      	sbcs	r3, r2
 8004fae:	6822      	ldr	r2, [r4, #0]
 8004fb0:	0692      	lsls	r2, r2, #26
 8004fb2:	d430      	bmi.n	8005016 <_printf_common+0xae>
 8004fb4:	0022      	movs	r2, r4
 8004fb6:	9901      	ldr	r1, [sp, #4]
 8004fb8:	9800      	ldr	r0, [sp, #0]
 8004fba:	9e08      	ldr	r6, [sp, #32]
 8004fbc:	3243      	adds	r2, #67	; 0x43
 8004fbe:	47b0      	blx	r6
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d025      	beq.n	8005010 <_printf_common+0xa8>
 8004fc4:	2306      	movs	r3, #6
 8004fc6:	6820      	ldr	r0, [r4, #0]
 8004fc8:	682a      	ldr	r2, [r5, #0]
 8004fca:	68e1      	ldr	r1, [r4, #12]
 8004fcc:	2500      	movs	r5, #0
 8004fce:	4003      	ands	r3, r0
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d103      	bne.n	8004fdc <_printf_common+0x74>
 8004fd4:	1a8d      	subs	r5, r1, r2
 8004fd6:	43eb      	mvns	r3, r5
 8004fd8:	17db      	asrs	r3, r3, #31
 8004fda:	401d      	ands	r5, r3
 8004fdc:	68a3      	ldr	r3, [r4, #8]
 8004fde:	6922      	ldr	r2, [r4, #16]
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	dd01      	ble.n	8004fe8 <_printf_common+0x80>
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	18ed      	adds	r5, r5, r3
 8004fe8:	2700      	movs	r7, #0
 8004fea:	42bd      	cmp	r5, r7
 8004fec:	d120      	bne.n	8005030 <_printf_common+0xc8>
 8004fee:	2000      	movs	r0, #0
 8004ff0:	e010      	b.n	8005014 <_printf_common+0xac>
 8004ff2:	3701      	adds	r7, #1
 8004ff4:	68e3      	ldr	r3, [r4, #12]
 8004ff6:	682a      	ldr	r2, [r5, #0]
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	42bb      	cmp	r3, r7
 8004ffc:	ddd2      	ble.n	8004fa4 <_printf_common+0x3c>
 8004ffe:	0022      	movs	r2, r4
 8005000:	2301      	movs	r3, #1
 8005002:	9901      	ldr	r1, [sp, #4]
 8005004:	9800      	ldr	r0, [sp, #0]
 8005006:	9e08      	ldr	r6, [sp, #32]
 8005008:	3219      	adds	r2, #25
 800500a:	47b0      	blx	r6
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d1f0      	bne.n	8004ff2 <_printf_common+0x8a>
 8005010:	2001      	movs	r0, #1
 8005012:	4240      	negs	r0, r0
 8005014:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005016:	2030      	movs	r0, #48	; 0x30
 8005018:	18e1      	adds	r1, r4, r3
 800501a:	3143      	adds	r1, #67	; 0x43
 800501c:	7008      	strb	r0, [r1, #0]
 800501e:	0021      	movs	r1, r4
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	3145      	adds	r1, #69	; 0x45
 8005024:	7809      	ldrb	r1, [r1, #0]
 8005026:	18a2      	adds	r2, r4, r2
 8005028:	3243      	adds	r2, #67	; 0x43
 800502a:	3302      	adds	r3, #2
 800502c:	7011      	strb	r1, [r2, #0]
 800502e:	e7c1      	b.n	8004fb4 <_printf_common+0x4c>
 8005030:	0022      	movs	r2, r4
 8005032:	2301      	movs	r3, #1
 8005034:	9901      	ldr	r1, [sp, #4]
 8005036:	9800      	ldr	r0, [sp, #0]
 8005038:	9e08      	ldr	r6, [sp, #32]
 800503a:	321a      	adds	r2, #26
 800503c:	47b0      	blx	r6
 800503e:	1c43      	adds	r3, r0, #1
 8005040:	d0e6      	beq.n	8005010 <_printf_common+0xa8>
 8005042:	3701      	adds	r7, #1
 8005044:	e7d1      	b.n	8004fea <_printf_common+0x82>
	...

08005048 <_printf_i>:
 8005048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800504a:	b08b      	sub	sp, #44	; 0x2c
 800504c:	9206      	str	r2, [sp, #24]
 800504e:	000a      	movs	r2, r1
 8005050:	3243      	adds	r2, #67	; 0x43
 8005052:	9307      	str	r3, [sp, #28]
 8005054:	9005      	str	r0, [sp, #20]
 8005056:	9204      	str	r2, [sp, #16]
 8005058:	7e0a      	ldrb	r2, [r1, #24]
 800505a:	000c      	movs	r4, r1
 800505c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800505e:	2a78      	cmp	r2, #120	; 0x78
 8005060:	d807      	bhi.n	8005072 <_printf_i+0x2a>
 8005062:	2a62      	cmp	r2, #98	; 0x62
 8005064:	d809      	bhi.n	800507a <_printf_i+0x32>
 8005066:	2a00      	cmp	r2, #0
 8005068:	d100      	bne.n	800506c <_printf_i+0x24>
 800506a:	e0c1      	b.n	80051f0 <_printf_i+0x1a8>
 800506c:	2a58      	cmp	r2, #88	; 0x58
 800506e:	d100      	bne.n	8005072 <_printf_i+0x2a>
 8005070:	e08c      	b.n	800518c <_printf_i+0x144>
 8005072:	0026      	movs	r6, r4
 8005074:	3642      	adds	r6, #66	; 0x42
 8005076:	7032      	strb	r2, [r6, #0]
 8005078:	e022      	b.n	80050c0 <_printf_i+0x78>
 800507a:	0010      	movs	r0, r2
 800507c:	3863      	subs	r0, #99	; 0x63
 800507e:	2815      	cmp	r0, #21
 8005080:	d8f7      	bhi.n	8005072 <_printf_i+0x2a>
 8005082:	f7fb f83f 	bl	8000104 <__gnu_thumb1_case_shi>
 8005086:	0016      	.short	0x0016
 8005088:	fff6001f 	.word	0xfff6001f
 800508c:	fff6fff6 	.word	0xfff6fff6
 8005090:	001ffff6 	.word	0x001ffff6
 8005094:	fff6fff6 	.word	0xfff6fff6
 8005098:	fff6fff6 	.word	0xfff6fff6
 800509c:	003600a8 	.word	0x003600a8
 80050a0:	fff6009a 	.word	0xfff6009a
 80050a4:	00b9fff6 	.word	0x00b9fff6
 80050a8:	0036fff6 	.word	0x0036fff6
 80050ac:	fff6fff6 	.word	0xfff6fff6
 80050b0:	009e      	.short	0x009e
 80050b2:	0026      	movs	r6, r4
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	3642      	adds	r6, #66	; 0x42
 80050b8:	1d11      	adds	r1, r2, #4
 80050ba:	6019      	str	r1, [r3, #0]
 80050bc:	6813      	ldr	r3, [r2, #0]
 80050be:	7033      	strb	r3, [r6, #0]
 80050c0:	2301      	movs	r3, #1
 80050c2:	e0a7      	b.n	8005214 <_printf_i+0x1cc>
 80050c4:	6808      	ldr	r0, [r1, #0]
 80050c6:	6819      	ldr	r1, [r3, #0]
 80050c8:	1d0a      	adds	r2, r1, #4
 80050ca:	0605      	lsls	r5, r0, #24
 80050cc:	d50b      	bpl.n	80050e6 <_printf_i+0x9e>
 80050ce:	680d      	ldr	r5, [r1, #0]
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	2d00      	cmp	r5, #0
 80050d4:	da03      	bge.n	80050de <_printf_i+0x96>
 80050d6:	232d      	movs	r3, #45	; 0x2d
 80050d8:	9a04      	ldr	r2, [sp, #16]
 80050da:	426d      	negs	r5, r5
 80050dc:	7013      	strb	r3, [r2, #0]
 80050de:	4b61      	ldr	r3, [pc, #388]	; (8005264 <_printf_i+0x21c>)
 80050e0:	270a      	movs	r7, #10
 80050e2:	9303      	str	r3, [sp, #12]
 80050e4:	e01b      	b.n	800511e <_printf_i+0xd6>
 80050e6:	680d      	ldr	r5, [r1, #0]
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	0641      	lsls	r1, r0, #25
 80050ec:	d5f1      	bpl.n	80050d2 <_printf_i+0x8a>
 80050ee:	b22d      	sxth	r5, r5
 80050f0:	e7ef      	b.n	80050d2 <_printf_i+0x8a>
 80050f2:	680d      	ldr	r5, [r1, #0]
 80050f4:	6819      	ldr	r1, [r3, #0]
 80050f6:	1d08      	adds	r0, r1, #4
 80050f8:	6018      	str	r0, [r3, #0]
 80050fa:	062e      	lsls	r6, r5, #24
 80050fc:	d501      	bpl.n	8005102 <_printf_i+0xba>
 80050fe:	680d      	ldr	r5, [r1, #0]
 8005100:	e003      	b.n	800510a <_printf_i+0xc2>
 8005102:	066d      	lsls	r5, r5, #25
 8005104:	d5fb      	bpl.n	80050fe <_printf_i+0xb6>
 8005106:	680d      	ldr	r5, [r1, #0]
 8005108:	b2ad      	uxth	r5, r5
 800510a:	4b56      	ldr	r3, [pc, #344]	; (8005264 <_printf_i+0x21c>)
 800510c:	2708      	movs	r7, #8
 800510e:	9303      	str	r3, [sp, #12]
 8005110:	2a6f      	cmp	r2, #111	; 0x6f
 8005112:	d000      	beq.n	8005116 <_printf_i+0xce>
 8005114:	3702      	adds	r7, #2
 8005116:	0023      	movs	r3, r4
 8005118:	2200      	movs	r2, #0
 800511a:	3343      	adds	r3, #67	; 0x43
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	6863      	ldr	r3, [r4, #4]
 8005120:	60a3      	str	r3, [r4, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	db03      	blt.n	800512e <_printf_i+0xe6>
 8005126:	2204      	movs	r2, #4
 8005128:	6821      	ldr	r1, [r4, #0]
 800512a:	4391      	bics	r1, r2
 800512c:	6021      	str	r1, [r4, #0]
 800512e:	2d00      	cmp	r5, #0
 8005130:	d102      	bne.n	8005138 <_printf_i+0xf0>
 8005132:	9e04      	ldr	r6, [sp, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00c      	beq.n	8005152 <_printf_i+0x10a>
 8005138:	9e04      	ldr	r6, [sp, #16]
 800513a:	0028      	movs	r0, r5
 800513c:	0039      	movs	r1, r7
 800513e:	f7fb f871 	bl	8000224 <__aeabi_uidivmod>
 8005142:	9b03      	ldr	r3, [sp, #12]
 8005144:	3e01      	subs	r6, #1
 8005146:	5c5b      	ldrb	r3, [r3, r1]
 8005148:	7033      	strb	r3, [r6, #0]
 800514a:	002b      	movs	r3, r5
 800514c:	0005      	movs	r5, r0
 800514e:	429f      	cmp	r7, r3
 8005150:	d9f3      	bls.n	800513a <_printf_i+0xf2>
 8005152:	2f08      	cmp	r7, #8
 8005154:	d109      	bne.n	800516a <_printf_i+0x122>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	07db      	lsls	r3, r3, #31
 800515a:	d506      	bpl.n	800516a <_printf_i+0x122>
 800515c:	6863      	ldr	r3, [r4, #4]
 800515e:	6922      	ldr	r2, [r4, #16]
 8005160:	4293      	cmp	r3, r2
 8005162:	dc02      	bgt.n	800516a <_printf_i+0x122>
 8005164:	2330      	movs	r3, #48	; 0x30
 8005166:	3e01      	subs	r6, #1
 8005168:	7033      	strb	r3, [r6, #0]
 800516a:	9b04      	ldr	r3, [sp, #16]
 800516c:	1b9b      	subs	r3, r3, r6
 800516e:	6123      	str	r3, [r4, #16]
 8005170:	9b07      	ldr	r3, [sp, #28]
 8005172:	0021      	movs	r1, r4
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	9805      	ldr	r0, [sp, #20]
 8005178:	9b06      	ldr	r3, [sp, #24]
 800517a:	aa09      	add	r2, sp, #36	; 0x24
 800517c:	f7ff fef4 	bl	8004f68 <_printf_common>
 8005180:	1c43      	adds	r3, r0, #1
 8005182:	d14c      	bne.n	800521e <_printf_i+0x1d6>
 8005184:	2001      	movs	r0, #1
 8005186:	4240      	negs	r0, r0
 8005188:	b00b      	add	sp, #44	; 0x2c
 800518a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800518c:	3145      	adds	r1, #69	; 0x45
 800518e:	700a      	strb	r2, [r1, #0]
 8005190:	4a34      	ldr	r2, [pc, #208]	; (8005264 <_printf_i+0x21c>)
 8005192:	9203      	str	r2, [sp, #12]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	6821      	ldr	r1, [r4, #0]
 8005198:	ca20      	ldmia	r2!, {r5}
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	0608      	lsls	r0, r1, #24
 800519e:	d516      	bpl.n	80051ce <_printf_i+0x186>
 80051a0:	07cb      	lsls	r3, r1, #31
 80051a2:	d502      	bpl.n	80051aa <_printf_i+0x162>
 80051a4:	2320      	movs	r3, #32
 80051a6:	4319      	orrs	r1, r3
 80051a8:	6021      	str	r1, [r4, #0]
 80051aa:	2710      	movs	r7, #16
 80051ac:	2d00      	cmp	r5, #0
 80051ae:	d1b2      	bne.n	8005116 <_printf_i+0xce>
 80051b0:	2320      	movs	r3, #32
 80051b2:	6822      	ldr	r2, [r4, #0]
 80051b4:	439a      	bics	r2, r3
 80051b6:	6022      	str	r2, [r4, #0]
 80051b8:	e7ad      	b.n	8005116 <_printf_i+0xce>
 80051ba:	2220      	movs	r2, #32
 80051bc:	6809      	ldr	r1, [r1, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	6022      	str	r2, [r4, #0]
 80051c2:	0022      	movs	r2, r4
 80051c4:	2178      	movs	r1, #120	; 0x78
 80051c6:	3245      	adds	r2, #69	; 0x45
 80051c8:	7011      	strb	r1, [r2, #0]
 80051ca:	4a27      	ldr	r2, [pc, #156]	; (8005268 <_printf_i+0x220>)
 80051cc:	e7e1      	b.n	8005192 <_printf_i+0x14a>
 80051ce:	0648      	lsls	r0, r1, #25
 80051d0:	d5e6      	bpl.n	80051a0 <_printf_i+0x158>
 80051d2:	b2ad      	uxth	r5, r5
 80051d4:	e7e4      	b.n	80051a0 <_printf_i+0x158>
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	680d      	ldr	r5, [r1, #0]
 80051da:	1d10      	adds	r0, r2, #4
 80051dc:	6949      	ldr	r1, [r1, #20]
 80051de:	6018      	str	r0, [r3, #0]
 80051e0:	6813      	ldr	r3, [r2, #0]
 80051e2:	062e      	lsls	r6, r5, #24
 80051e4:	d501      	bpl.n	80051ea <_printf_i+0x1a2>
 80051e6:	6019      	str	r1, [r3, #0]
 80051e8:	e002      	b.n	80051f0 <_printf_i+0x1a8>
 80051ea:	066d      	lsls	r5, r5, #25
 80051ec:	d5fb      	bpl.n	80051e6 <_printf_i+0x19e>
 80051ee:	8019      	strh	r1, [r3, #0]
 80051f0:	2300      	movs	r3, #0
 80051f2:	9e04      	ldr	r6, [sp, #16]
 80051f4:	6123      	str	r3, [r4, #16]
 80051f6:	e7bb      	b.n	8005170 <_printf_i+0x128>
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	1d11      	adds	r1, r2, #4
 80051fc:	6019      	str	r1, [r3, #0]
 80051fe:	6816      	ldr	r6, [r2, #0]
 8005200:	2100      	movs	r1, #0
 8005202:	0030      	movs	r0, r6
 8005204:	6862      	ldr	r2, [r4, #4]
 8005206:	f000 facf 	bl	80057a8 <memchr>
 800520a:	2800      	cmp	r0, #0
 800520c:	d001      	beq.n	8005212 <_printf_i+0x1ca>
 800520e:	1b80      	subs	r0, r0, r6
 8005210:	6060      	str	r0, [r4, #4]
 8005212:	6863      	ldr	r3, [r4, #4]
 8005214:	6123      	str	r3, [r4, #16]
 8005216:	2300      	movs	r3, #0
 8005218:	9a04      	ldr	r2, [sp, #16]
 800521a:	7013      	strb	r3, [r2, #0]
 800521c:	e7a8      	b.n	8005170 <_printf_i+0x128>
 800521e:	6923      	ldr	r3, [r4, #16]
 8005220:	0032      	movs	r2, r6
 8005222:	9906      	ldr	r1, [sp, #24]
 8005224:	9805      	ldr	r0, [sp, #20]
 8005226:	9d07      	ldr	r5, [sp, #28]
 8005228:	47a8      	blx	r5
 800522a:	1c43      	adds	r3, r0, #1
 800522c:	d0aa      	beq.n	8005184 <_printf_i+0x13c>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	079b      	lsls	r3, r3, #30
 8005232:	d415      	bmi.n	8005260 <_printf_i+0x218>
 8005234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005236:	68e0      	ldr	r0, [r4, #12]
 8005238:	4298      	cmp	r0, r3
 800523a:	daa5      	bge.n	8005188 <_printf_i+0x140>
 800523c:	0018      	movs	r0, r3
 800523e:	e7a3      	b.n	8005188 <_printf_i+0x140>
 8005240:	0022      	movs	r2, r4
 8005242:	2301      	movs	r3, #1
 8005244:	9906      	ldr	r1, [sp, #24]
 8005246:	9805      	ldr	r0, [sp, #20]
 8005248:	9e07      	ldr	r6, [sp, #28]
 800524a:	3219      	adds	r2, #25
 800524c:	47b0      	blx	r6
 800524e:	1c43      	adds	r3, r0, #1
 8005250:	d098      	beq.n	8005184 <_printf_i+0x13c>
 8005252:	3501      	adds	r5, #1
 8005254:	68e3      	ldr	r3, [r4, #12]
 8005256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005258:	1a9b      	subs	r3, r3, r2
 800525a:	42ab      	cmp	r3, r5
 800525c:	dcf0      	bgt.n	8005240 <_printf_i+0x1f8>
 800525e:	e7e9      	b.n	8005234 <_printf_i+0x1ec>
 8005260:	2500      	movs	r5, #0
 8005262:	e7f7      	b.n	8005254 <_printf_i+0x20c>
 8005264:	08005b05 	.word	0x08005b05
 8005268:	08005b16 	.word	0x08005b16

0800526c <_sbrk_r>:
 800526c:	2300      	movs	r3, #0
 800526e:	b570      	push	{r4, r5, r6, lr}
 8005270:	4d06      	ldr	r5, [pc, #24]	; (800528c <_sbrk_r+0x20>)
 8005272:	0004      	movs	r4, r0
 8005274:	0008      	movs	r0, r1
 8005276:	602b      	str	r3, [r5, #0]
 8005278:	f7fb fd84 	bl	8000d84 <_sbrk>
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	d103      	bne.n	8005288 <_sbrk_r+0x1c>
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d000      	beq.n	8005288 <_sbrk_r+0x1c>
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	bd70      	pop	{r4, r5, r6, pc}
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	200001d0 	.word	0x200001d0

08005290 <__sread>:
 8005290:	b570      	push	{r4, r5, r6, lr}
 8005292:	000c      	movs	r4, r1
 8005294:	250e      	movs	r5, #14
 8005296:	5f49      	ldrsh	r1, [r1, r5]
 8005298:	f000 faec 	bl	8005874 <_read_r>
 800529c:	2800      	cmp	r0, #0
 800529e:	db03      	blt.n	80052a8 <__sread+0x18>
 80052a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052a2:	181b      	adds	r3, r3, r0
 80052a4:	6563      	str	r3, [r4, #84]	; 0x54
 80052a6:	bd70      	pop	{r4, r5, r6, pc}
 80052a8:	89a3      	ldrh	r3, [r4, #12]
 80052aa:	4a02      	ldr	r2, [pc, #8]	; (80052b4 <__sread+0x24>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	81a3      	strh	r3, [r4, #12]
 80052b0:	e7f9      	b.n	80052a6 <__sread+0x16>
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	ffffefff 	.word	0xffffefff

080052b8 <__swrite>:
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ba:	001f      	movs	r7, r3
 80052bc:	898b      	ldrh	r3, [r1, #12]
 80052be:	0005      	movs	r5, r0
 80052c0:	000c      	movs	r4, r1
 80052c2:	0016      	movs	r6, r2
 80052c4:	05db      	lsls	r3, r3, #23
 80052c6:	d505      	bpl.n	80052d4 <__swrite+0x1c>
 80052c8:	230e      	movs	r3, #14
 80052ca:	5ec9      	ldrsh	r1, [r1, r3]
 80052cc:	2200      	movs	r2, #0
 80052ce:	2302      	movs	r3, #2
 80052d0:	f000 f9ea 	bl	80056a8 <_lseek_r>
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	4a05      	ldr	r2, [pc, #20]	; (80052ec <__swrite+0x34>)
 80052d8:	0028      	movs	r0, r5
 80052da:	4013      	ands	r3, r2
 80052dc:	81a3      	strh	r3, [r4, #12]
 80052de:	0032      	movs	r2, r6
 80052e0:	230e      	movs	r3, #14
 80052e2:	5ee1      	ldrsh	r1, [r4, r3]
 80052e4:	003b      	movs	r3, r7
 80052e6:	f000 f875 	bl	80053d4 <_write_r>
 80052ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052ec:	ffffefff 	.word	0xffffefff

080052f0 <__sseek>:
 80052f0:	b570      	push	{r4, r5, r6, lr}
 80052f2:	000c      	movs	r4, r1
 80052f4:	250e      	movs	r5, #14
 80052f6:	5f49      	ldrsh	r1, [r1, r5]
 80052f8:	f000 f9d6 	bl	80056a8 <_lseek_r>
 80052fc:	89a3      	ldrh	r3, [r4, #12]
 80052fe:	1c42      	adds	r2, r0, #1
 8005300:	d103      	bne.n	800530a <__sseek+0x1a>
 8005302:	4a05      	ldr	r2, [pc, #20]	; (8005318 <__sseek+0x28>)
 8005304:	4013      	ands	r3, r2
 8005306:	81a3      	strh	r3, [r4, #12]
 8005308:	bd70      	pop	{r4, r5, r6, pc}
 800530a:	2280      	movs	r2, #128	; 0x80
 800530c:	0152      	lsls	r2, r2, #5
 800530e:	4313      	orrs	r3, r2
 8005310:	81a3      	strh	r3, [r4, #12]
 8005312:	6560      	str	r0, [r4, #84]	; 0x54
 8005314:	e7f8      	b.n	8005308 <__sseek+0x18>
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	ffffefff 	.word	0xffffefff

0800531c <__sclose>:
 800531c:	b510      	push	{r4, lr}
 800531e:	230e      	movs	r3, #14
 8005320:	5ec9      	ldrsh	r1, [r1, r3]
 8005322:	f000 f8e3 	bl	80054ec <_close_r>
 8005326:	bd10      	pop	{r4, pc}

08005328 <__swbuf_r>:
 8005328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532a:	0005      	movs	r5, r0
 800532c:	000e      	movs	r6, r1
 800532e:	0014      	movs	r4, r2
 8005330:	2800      	cmp	r0, #0
 8005332:	d004      	beq.n	800533e <__swbuf_r+0x16>
 8005334:	6983      	ldr	r3, [r0, #24]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <__swbuf_r+0x16>
 800533a:	f7ff fb77 	bl	8004a2c <__sinit>
 800533e:	4b22      	ldr	r3, [pc, #136]	; (80053c8 <__swbuf_r+0xa0>)
 8005340:	429c      	cmp	r4, r3
 8005342:	d12e      	bne.n	80053a2 <__swbuf_r+0x7a>
 8005344:	686c      	ldr	r4, [r5, #4]
 8005346:	69a3      	ldr	r3, [r4, #24]
 8005348:	60a3      	str	r3, [r4, #8]
 800534a:	89a3      	ldrh	r3, [r4, #12]
 800534c:	071b      	lsls	r3, r3, #28
 800534e:	d532      	bpl.n	80053b6 <__swbuf_r+0x8e>
 8005350:	6923      	ldr	r3, [r4, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d02f      	beq.n	80053b6 <__swbuf_r+0x8e>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	6922      	ldr	r2, [r4, #16]
 800535a:	b2f7      	uxtb	r7, r6
 800535c:	1a98      	subs	r0, r3, r2
 800535e:	6963      	ldr	r3, [r4, #20]
 8005360:	b2f6      	uxtb	r6, r6
 8005362:	4283      	cmp	r3, r0
 8005364:	dc05      	bgt.n	8005372 <__swbuf_r+0x4a>
 8005366:	0021      	movs	r1, r4
 8005368:	0028      	movs	r0, r5
 800536a:	f000 f95d 	bl	8005628 <_fflush_r>
 800536e:	2800      	cmp	r0, #0
 8005370:	d127      	bne.n	80053c2 <__swbuf_r+0x9a>
 8005372:	68a3      	ldr	r3, [r4, #8]
 8005374:	3001      	adds	r0, #1
 8005376:	3b01      	subs	r3, #1
 8005378:	60a3      	str	r3, [r4, #8]
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	6022      	str	r2, [r4, #0]
 8005380:	701f      	strb	r7, [r3, #0]
 8005382:	6963      	ldr	r3, [r4, #20]
 8005384:	4283      	cmp	r3, r0
 8005386:	d004      	beq.n	8005392 <__swbuf_r+0x6a>
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	07db      	lsls	r3, r3, #31
 800538c:	d507      	bpl.n	800539e <__swbuf_r+0x76>
 800538e:	2e0a      	cmp	r6, #10
 8005390:	d105      	bne.n	800539e <__swbuf_r+0x76>
 8005392:	0021      	movs	r1, r4
 8005394:	0028      	movs	r0, r5
 8005396:	f000 f947 	bl	8005628 <_fflush_r>
 800539a:	2800      	cmp	r0, #0
 800539c:	d111      	bne.n	80053c2 <__swbuf_r+0x9a>
 800539e:	0030      	movs	r0, r6
 80053a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a2:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <__swbuf_r+0xa4>)
 80053a4:	429c      	cmp	r4, r3
 80053a6:	d101      	bne.n	80053ac <__swbuf_r+0x84>
 80053a8:	68ac      	ldr	r4, [r5, #8]
 80053aa:	e7cc      	b.n	8005346 <__swbuf_r+0x1e>
 80053ac:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <__swbuf_r+0xa8>)
 80053ae:	429c      	cmp	r4, r3
 80053b0:	d1c9      	bne.n	8005346 <__swbuf_r+0x1e>
 80053b2:	68ec      	ldr	r4, [r5, #12]
 80053b4:	e7c7      	b.n	8005346 <__swbuf_r+0x1e>
 80053b6:	0021      	movs	r1, r4
 80053b8:	0028      	movs	r0, r5
 80053ba:	f000 f81f 	bl	80053fc <__swsetup_r>
 80053be:	2800      	cmp	r0, #0
 80053c0:	d0c9      	beq.n	8005356 <__swbuf_r+0x2e>
 80053c2:	2601      	movs	r6, #1
 80053c4:	4276      	negs	r6, r6
 80053c6:	e7ea      	b.n	800539e <__swbuf_r+0x76>
 80053c8:	08005ab4 	.word	0x08005ab4
 80053cc:	08005ad4 	.word	0x08005ad4
 80053d0:	08005a94 	.word	0x08005a94

080053d4 <_write_r>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	0004      	movs	r4, r0
 80053d8:	0008      	movs	r0, r1
 80053da:	0011      	movs	r1, r2
 80053dc:	001a      	movs	r2, r3
 80053de:	2300      	movs	r3, #0
 80053e0:	4d05      	ldr	r5, [pc, #20]	; (80053f8 <_write_r+0x24>)
 80053e2:	602b      	str	r3, [r5, #0]
 80053e4:	f7fb fc85 	bl	8000cf2 <_write>
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	d103      	bne.n	80053f4 <_write_r+0x20>
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d000      	beq.n	80053f4 <_write_r+0x20>
 80053f2:	6023      	str	r3, [r4, #0]
 80053f4:	bd70      	pop	{r4, r5, r6, pc}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	200001d0 	.word	0x200001d0

080053fc <__swsetup_r>:
 80053fc:	4b37      	ldr	r3, [pc, #220]	; (80054dc <__swsetup_r+0xe0>)
 80053fe:	b570      	push	{r4, r5, r6, lr}
 8005400:	681d      	ldr	r5, [r3, #0]
 8005402:	0006      	movs	r6, r0
 8005404:	000c      	movs	r4, r1
 8005406:	2d00      	cmp	r5, #0
 8005408:	d005      	beq.n	8005416 <__swsetup_r+0x1a>
 800540a:	69ab      	ldr	r3, [r5, #24]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d102      	bne.n	8005416 <__swsetup_r+0x1a>
 8005410:	0028      	movs	r0, r5
 8005412:	f7ff fb0b 	bl	8004a2c <__sinit>
 8005416:	4b32      	ldr	r3, [pc, #200]	; (80054e0 <__swsetup_r+0xe4>)
 8005418:	429c      	cmp	r4, r3
 800541a:	d10f      	bne.n	800543c <__swsetup_r+0x40>
 800541c:	686c      	ldr	r4, [r5, #4]
 800541e:	230c      	movs	r3, #12
 8005420:	5ee2      	ldrsh	r2, [r4, r3]
 8005422:	b293      	uxth	r3, r2
 8005424:	0711      	lsls	r1, r2, #28
 8005426:	d42d      	bmi.n	8005484 <__swsetup_r+0x88>
 8005428:	06d9      	lsls	r1, r3, #27
 800542a:	d411      	bmi.n	8005450 <__swsetup_r+0x54>
 800542c:	2309      	movs	r3, #9
 800542e:	2001      	movs	r0, #1
 8005430:	6033      	str	r3, [r6, #0]
 8005432:	3337      	adds	r3, #55	; 0x37
 8005434:	4313      	orrs	r3, r2
 8005436:	81a3      	strh	r3, [r4, #12]
 8005438:	4240      	negs	r0, r0
 800543a:	bd70      	pop	{r4, r5, r6, pc}
 800543c:	4b29      	ldr	r3, [pc, #164]	; (80054e4 <__swsetup_r+0xe8>)
 800543e:	429c      	cmp	r4, r3
 8005440:	d101      	bne.n	8005446 <__swsetup_r+0x4a>
 8005442:	68ac      	ldr	r4, [r5, #8]
 8005444:	e7eb      	b.n	800541e <__swsetup_r+0x22>
 8005446:	4b28      	ldr	r3, [pc, #160]	; (80054e8 <__swsetup_r+0xec>)
 8005448:	429c      	cmp	r4, r3
 800544a:	d1e8      	bne.n	800541e <__swsetup_r+0x22>
 800544c:	68ec      	ldr	r4, [r5, #12]
 800544e:	e7e6      	b.n	800541e <__swsetup_r+0x22>
 8005450:	075b      	lsls	r3, r3, #29
 8005452:	d513      	bpl.n	800547c <__swsetup_r+0x80>
 8005454:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005456:	2900      	cmp	r1, #0
 8005458:	d008      	beq.n	800546c <__swsetup_r+0x70>
 800545a:	0023      	movs	r3, r4
 800545c:	3344      	adds	r3, #68	; 0x44
 800545e:	4299      	cmp	r1, r3
 8005460:	d002      	beq.n	8005468 <__swsetup_r+0x6c>
 8005462:	0030      	movs	r0, r6
 8005464:	f000 f9bc 	bl	80057e0 <_free_r>
 8005468:	2300      	movs	r3, #0
 800546a:	6363      	str	r3, [r4, #52]	; 0x34
 800546c:	2224      	movs	r2, #36	; 0x24
 800546e:	89a3      	ldrh	r3, [r4, #12]
 8005470:	4393      	bics	r3, r2
 8005472:	81a3      	strh	r3, [r4, #12]
 8005474:	2300      	movs	r3, #0
 8005476:	6063      	str	r3, [r4, #4]
 8005478:	6923      	ldr	r3, [r4, #16]
 800547a:	6023      	str	r3, [r4, #0]
 800547c:	2308      	movs	r3, #8
 800547e:	89a2      	ldrh	r2, [r4, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	81a3      	strh	r3, [r4, #12]
 8005484:	6923      	ldr	r3, [r4, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10b      	bne.n	80054a2 <__swsetup_r+0xa6>
 800548a:	21a0      	movs	r1, #160	; 0xa0
 800548c:	2280      	movs	r2, #128	; 0x80
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	0089      	lsls	r1, r1, #2
 8005492:	0092      	lsls	r2, r2, #2
 8005494:	400b      	ands	r3, r1
 8005496:	4293      	cmp	r3, r2
 8005498:	d003      	beq.n	80054a2 <__swsetup_r+0xa6>
 800549a:	0021      	movs	r1, r4
 800549c:	0030      	movs	r0, r6
 800549e:	f000 f93f 	bl	8005720 <__smakebuf_r>
 80054a2:	220c      	movs	r2, #12
 80054a4:	5ea3      	ldrsh	r3, [r4, r2]
 80054a6:	2001      	movs	r0, #1
 80054a8:	001a      	movs	r2, r3
 80054aa:	b299      	uxth	r1, r3
 80054ac:	4002      	ands	r2, r0
 80054ae:	4203      	tst	r3, r0
 80054b0:	d00f      	beq.n	80054d2 <__swsetup_r+0xd6>
 80054b2:	2200      	movs	r2, #0
 80054b4:	60a2      	str	r2, [r4, #8]
 80054b6:	6962      	ldr	r2, [r4, #20]
 80054b8:	4252      	negs	r2, r2
 80054ba:	61a2      	str	r2, [r4, #24]
 80054bc:	2000      	movs	r0, #0
 80054be:	6922      	ldr	r2, [r4, #16]
 80054c0:	4282      	cmp	r2, r0
 80054c2:	d1ba      	bne.n	800543a <__swsetup_r+0x3e>
 80054c4:	060a      	lsls	r2, r1, #24
 80054c6:	d5b8      	bpl.n	800543a <__swsetup_r+0x3e>
 80054c8:	2240      	movs	r2, #64	; 0x40
 80054ca:	4313      	orrs	r3, r2
 80054cc:	81a3      	strh	r3, [r4, #12]
 80054ce:	3801      	subs	r0, #1
 80054d0:	e7b3      	b.n	800543a <__swsetup_r+0x3e>
 80054d2:	0788      	lsls	r0, r1, #30
 80054d4:	d400      	bmi.n	80054d8 <__swsetup_r+0xdc>
 80054d6:	6962      	ldr	r2, [r4, #20]
 80054d8:	60a2      	str	r2, [r4, #8]
 80054da:	e7ef      	b.n	80054bc <__swsetup_r+0xc0>
 80054dc:	20000028 	.word	0x20000028
 80054e0:	08005ab4 	.word	0x08005ab4
 80054e4:	08005ad4 	.word	0x08005ad4
 80054e8:	08005a94 	.word	0x08005a94

080054ec <_close_r>:
 80054ec:	2300      	movs	r3, #0
 80054ee:	b570      	push	{r4, r5, r6, lr}
 80054f0:	4d06      	ldr	r5, [pc, #24]	; (800550c <_close_r+0x20>)
 80054f2:	0004      	movs	r4, r0
 80054f4:	0008      	movs	r0, r1
 80054f6:	602b      	str	r3, [r5, #0]
 80054f8:	f7fb fc17 	bl	8000d2a <_close>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d103      	bne.n	8005508 <_close_r+0x1c>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d000      	beq.n	8005508 <_close_r+0x1c>
 8005506:	6023      	str	r3, [r4, #0]
 8005508:	bd70      	pop	{r4, r5, r6, pc}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	200001d0 	.word	0x200001d0

08005510 <__sflush_r>:
 8005510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005512:	898b      	ldrh	r3, [r1, #12]
 8005514:	0005      	movs	r5, r0
 8005516:	000c      	movs	r4, r1
 8005518:	071a      	lsls	r2, r3, #28
 800551a:	d45f      	bmi.n	80055dc <__sflush_r+0xcc>
 800551c:	684a      	ldr	r2, [r1, #4]
 800551e:	2a00      	cmp	r2, #0
 8005520:	dc04      	bgt.n	800552c <__sflush_r+0x1c>
 8005522:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005524:	2a00      	cmp	r2, #0
 8005526:	dc01      	bgt.n	800552c <__sflush_r+0x1c>
 8005528:	2000      	movs	r0, #0
 800552a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800552c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800552e:	2f00      	cmp	r7, #0
 8005530:	d0fa      	beq.n	8005528 <__sflush_r+0x18>
 8005532:	2200      	movs	r2, #0
 8005534:	2180      	movs	r1, #128	; 0x80
 8005536:	682e      	ldr	r6, [r5, #0]
 8005538:	602a      	str	r2, [r5, #0]
 800553a:	001a      	movs	r2, r3
 800553c:	0149      	lsls	r1, r1, #5
 800553e:	400a      	ands	r2, r1
 8005540:	420b      	tst	r3, r1
 8005542:	d034      	beq.n	80055ae <__sflush_r+0x9e>
 8005544:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005546:	89a3      	ldrh	r3, [r4, #12]
 8005548:	075b      	lsls	r3, r3, #29
 800554a:	d506      	bpl.n	800555a <__sflush_r+0x4a>
 800554c:	6863      	ldr	r3, [r4, #4]
 800554e:	1ac0      	subs	r0, r0, r3
 8005550:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <__sflush_r+0x4a>
 8005556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005558:	1ac0      	subs	r0, r0, r3
 800555a:	0002      	movs	r2, r0
 800555c:	6a21      	ldr	r1, [r4, #32]
 800555e:	2300      	movs	r3, #0
 8005560:	0028      	movs	r0, r5
 8005562:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005564:	47b8      	blx	r7
 8005566:	89a1      	ldrh	r1, [r4, #12]
 8005568:	1c43      	adds	r3, r0, #1
 800556a:	d106      	bne.n	800557a <__sflush_r+0x6a>
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	2b1d      	cmp	r3, #29
 8005570:	d831      	bhi.n	80055d6 <__sflush_r+0xc6>
 8005572:	4a2c      	ldr	r2, [pc, #176]	; (8005624 <__sflush_r+0x114>)
 8005574:	40da      	lsrs	r2, r3
 8005576:	07d3      	lsls	r3, r2, #31
 8005578:	d52d      	bpl.n	80055d6 <__sflush_r+0xc6>
 800557a:	2300      	movs	r3, #0
 800557c:	6063      	str	r3, [r4, #4]
 800557e:	6923      	ldr	r3, [r4, #16]
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	04cb      	lsls	r3, r1, #19
 8005584:	d505      	bpl.n	8005592 <__sflush_r+0x82>
 8005586:	1c43      	adds	r3, r0, #1
 8005588:	d102      	bne.n	8005590 <__sflush_r+0x80>
 800558a:	682b      	ldr	r3, [r5, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d100      	bne.n	8005592 <__sflush_r+0x82>
 8005590:	6560      	str	r0, [r4, #84]	; 0x54
 8005592:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005594:	602e      	str	r6, [r5, #0]
 8005596:	2900      	cmp	r1, #0
 8005598:	d0c6      	beq.n	8005528 <__sflush_r+0x18>
 800559a:	0023      	movs	r3, r4
 800559c:	3344      	adds	r3, #68	; 0x44
 800559e:	4299      	cmp	r1, r3
 80055a0:	d002      	beq.n	80055a8 <__sflush_r+0x98>
 80055a2:	0028      	movs	r0, r5
 80055a4:	f000 f91c 	bl	80057e0 <_free_r>
 80055a8:	2000      	movs	r0, #0
 80055aa:	6360      	str	r0, [r4, #52]	; 0x34
 80055ac:	e7bd      	b.n	800552a <__sflush_r+0x1a>
 80055ae:	2301      	movs	r3, #1
 80055b0:	0028      	movs	r0, r5
 80055b2:	6a21      	ldr	r1, [r4, #32]
 80055b4:	47b8      	blx	r7
 80055b6:	1c43      	adds	r3, r0, #1
 80055b8:	d1c5      	bne.n	8005546 <__sflush_r+0x36>
 80055ba:	682b      	ldr	r3, [r5, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0c2      	beq.n	8005546 <__sflush_r+0x36>
 80055c0:	2b1d      	cmp	r3, #29
 80055c2:	d001      	beq.n	80055c8 <__sflush_r+0xb8>
 80055c4:	2b16      	cmp	r3, #22
 80055c6:	d101      	bne.n	80055cc <__sflush_r+0xbc>
 80055c8:	602e      	str	r6, [r5, #0]
 80055ca:	e7ad      	b.n	8005528 <__sflush_r+0x18>
 80055cc:	2340      	movs	r3, #64	; 0x40
 80055ce:	89a2      	ldrh	r2, [r4, #12]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	81a3      	strh	r3, [r4, #12]
 80055d4:	e7a9      	b.n	800552a <__sflush_r+0x1a>
 80055d6:	2340      	movs	r3, #64	; 0x40
 80055d8:	430b      	orrs	r3, r1
 80055da:	e7fa      	b.n	80055d2 <__sflush_r+0xc2>
 80055dc:	690f      	ldr	r7, [r1, #16]
 80055de:	2f00      	cmp	r7, #0
 80055e0:	d0a2      	beq.n	8005528 <__sflush_r+0x18>
 80055e2:	680a      	ldr	r2, [r1, #0]
 80055e4:	600f      	str	r7, [r1, #0]
 80055e6:	1bd2      	subs	r2, r2, r7
 80055e8:	9201      	str	r2, [sp, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	079b      	lsls	r3, r3, #30
 80055ee:	d100      	bne.n	80055f2 <__sflush_r+0xe2>
 80055f0:	694a      	ldr	r2, [r1, #20]
 80055f2:	60a2      	str	r2, [r4, #8]
 80055f4:	9b01      	ldr	r3, [sp, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	dc00      	bgt.n	80055fc <__sflush_r+0xec>
 80055fa:	e795      	b.n	8005528 <__sflush_r+0x18>
 80055fc:	003a      	movs	r2, r7
 80055fe:	0028      	movs	r0, r5
 8005600:	9b01      	ldr	r3, [sp, #4]
 8005602:	6a21      	ldr	r1, [r4, #32]
 8005604:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005606:	47b0      	blx	r6
 8005608:	2800      	cmp	r0, #0
 800560a:	dc06      	bgt.n	800561a <__sflush_r+0x10a>
 800560c:	2340      	movs	r3, #64	; 0x40
 800560e:	2001      	movs	r0, #1
 8005610:	89a2      	ldrh	r2, [r4, #12]
 8005612:	4240      	negs	r0, r0
 8005614:	4313      	orrs	r3, r2
 8005616:	81a3      	strh	r3, [r4, #12]
 8005618:	e787      	b.n	800552a <__sflush_r+0x1a>
 800561a:	9b01      	ldr	r3, [sp, #4]
 800561c:	183f      	adds	r7, r7, r0
 800561e:	1a1b      	subs	r3, r3, r0
 8005620:	9301      	str	r3, [sp, #4]
 8005622:	e7e7      	b.n	80055f4 <__sflush_r+0xe4>
 8005624:	20400001 	.word	0x20400001

08005628 <_fflush_r>:
 8005628:	690b      	ldr	r3, [r1, #16]
 800562a:	b570      	push	{r4, r5, r6, lr}
 800562c:	0005      	movs	r5, r0
 800562e:	000c      	movs	r4, r1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d102      	bne.n	800563a <_fflush_r+0x12>
 8005634:	2500      	movs	r5, #0
 8005636:	0028      	movs	r0, r5
 8005638:	bd70      	pop	{r4, r5, r6, pc}
 800563a:	2800      	cmp	r0, #0
 800563c:	d004      	beq.n	8005648 <_fflush_r+0x20>
 800563e:	6983      	ldr	r3, [r0, #24]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <_fflush_r+0x20>
 8005644:	f7ff f9f2 	bl	8004a2c <__sinit>
 8005648:	4b14      	ldr	r3, [pc, #80]	; (800569c <_fflush_r+0x74>)
 800564a:	429c      	cmp	r4, r3
 800564c:	d11b      	bne.n	8005686 <_fflush_r+0x5e>
 800564e:	686c      	ldr	r4, [r5, #4]
 8005650:	220c      	movs	r2, #12
 8005652:	5ea3      	ldrsh	r3, [r4, r2]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0ed      	beq.n	8005634 <_fflush_r+0xc>
 8005658:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800565a:	07d2      	lsls	r2, r2, #31
 800565c:	d404      	bmi.n	8005668 <_fflush_r+0x40>
 800565e:	059b      	lsls	r3, r3, #22
 8005660:	d402      	bmi.n	8005668 <_fflush_r+0x40>
 8005662:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005664:	f7ff fa83 	bl	8004b6e <__retarget_lock_acquire_recursive>
 8005668:	0028      	movs	r0, r5
 800566a:	0021      	movs	r1, r4
 800566c:	f7ff ff50 	bl	8005510 <__sflush_r>
 8005670:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005672:	0005      	movs	r5, r0
 8005674:	07db      	lsls	r3, r3, #31
 8005676:	d4de      	bmi.n	8005636 <_fflush_r+0xe>
 8005678:	89a3      	ldrh	r3, [r4, #12]
 800567a:	059b      	lsls	r3, r3, #22
 800567c:	d4db      	bmi.n	8005636 <_fflush_r+0xe>
 800567e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005680:	f7ff fa76 	bl	8004b70 <__retarget_lock_release_recursive>
 8005684:	e7d7      	b.n	8005636 <_fflush_r+0xe>
 8005686:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <_fflush_r+0x78>)
 8005688:	429c      	cmp	r4, r3
 800568a:	d101      	bne.n	8005690 <_fflush_r+0x68>
 800568c:	68ac      	ldr	r4, [r5, #8]
 800568e:	e7df      	b.n	8005650 <_fflush_r+0x28>
 8005690:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <_fflush_r+0x7c>)
 8005692:	429c      	cmp	r4, r3
 8005694:	d1dc      	bne.n	8005650 <_fflush_r+0x28>
 8005696:	68ec      	ldr	r4, [r5, #12]
 8005698:	e7da      	b.n	8005650 <_fflush_r+0x28>
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	08005ab4 	.word	0x08005ab4
 80056a0:	08005ad4 	.word	0x08005ad4
 80056a4:	08005a94 	.word	0x08005a94

080056a8 <_lseek_r>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	0004      	movs	r4, r0
 80056ac:	0008      	movs	r0, r1
 80056ae:	0011      	movs	r1, r2
 80056b0:	001a      	movs	r2, r3
 80056b2:	2300      	movs	r3, #0
 80056b4:	4d05      	ldr	r5, [pc, #20]	; (80056cc <_lseek_r+0x24>)
 80056b6:	602b      	str	r3, [r5, #0]
 80056b8:	f7fb fb58 	bl	8000d6c <_lseek>
 80056bc:	1c43      	adds	r3, r0, #1
 80056be:	d103      	bne.n	80056c8 <_lseek_r+0x20>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d000      	beq.n	80056c8 <_lseek_r+0x20>
 80056c6:	6023      	str	r3, [r4, #0]
 80056c8:	bd70      	pop	{r4, r5, r6, pc}
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	200001d0 	.word	0x200001d0

080056d0 <__swhatbuf_r>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	000e      	movs	r6, r1
 80056d4:	001d      	movs	r5, r3
 80056d6:	230e      	movs	r3, #14
 80056d8:	5ec9      	ldrsh	r1, [r1, r3]
 80056da:	0014      	movs	r4, r2
 80056dc:	b096      	sub	sp, #88	; 0x58
 80056de:	2900      	cmp	r1, #0
 80056e0:	da08      	bge.n	80056f4 <__swhatbuf_r+0x24>
 80056e2:	220c      	movs	r2, #12
 80056e4:	5eb3      	ldrsh	r3, [r6, r2]
 80056e6:	2200      	movs	r2, #0
 80056e8:	602a      	str	r2, [r5, #0]
 80056ea:	061b      	lsls	r3, r3, #24
 80056ec:	d411      	bmi.n	8005712 <__swhatbuf_r+0x42>
 80056ee:	2380      	movs	r3, #128	; 0x80
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	e00f      	b.n	8005714 <__swhatbuf_r+0x44>
 80056f4:	466a      	mov	r2, sp
 80056f6:	f000 f8d1 	bl	800589c <_fstat_r>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	dbf1      	blt.n	80056e2 <__swhatbuf_r+0x12>
 80056fe:	23f0      	movs	r3, #240	; 0xf0
 8005700:	9901      	ldr	r1, [sp, #4]
 8005702:	021b      	lsls	r3, r3, #8
 8005704:	4019      	ands	r1, r3
 8005706:	4b05      	ldr	r3, [pc, #20]	; (800571c <__swhatbuf_r+0x4c>)
 8005708:	18c9      	adds	r1, r1, r3
 800570a:	424b      	negs	r3, r1
 800570c:	4159      	adcs	r1, r3
 800570e:	6029      	str	r1, [r5, #0]
 8005710:	e7ed      	b.n	80056ee <__swhatbuf_r+0x1e>
 8005712:	2340      	movs	r3, #64	; 0x40
 8005714:	2000      	movs	r0, #0
 8005716:	6023      	str	r3, [r4, #0]
 8005718:	b016      	add	sp, #88	; 0x58
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	ffffe000 	.word	0xffffe000

08005720 <__smakebuf_r>:
 8005720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005722:	2602      	movs	r6, #2
 8005724:	898b      	ldrh	r3, [r1, #12]
 8005726:	0005      	movs	r5, r0
 8005728:	000c      	movs	r4, r1
 800572a:	4233      	tst	r3, r6
 800572c:	d006      	beq.n	800573c <__smakebuf_r+0x1c>
 800572e:	0023      	movs	r3, r4
 8005730:	3347      	adds	r3, #71	; 0x47
 8005732:	6023      	str	r3, [r4, #0]
 8005734:	6123      	str	r3, [r4, #16]
 8005736:	2301      	movs	r3, #1
 8005738:	6163      	str	r3, [r4, #20]
 800573a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800573c:	466a      	mov	r2, sp
 800573e:	ab01      	add	r3, sp, #4
 8005740:	f7ff ffc6 	bl	80056d0 <__swhatbuf_r>
 8005744:	9900      	ldr	r1, [sp, #0]
 8005746:	0007      	movs	r7, r0
 8005748:	0028      	movs	r0, r5
 800574a:	f7ff fa35 	bl	8004bb8 <_malloc_r>
 800574e:	2800      	cmp	r0, #0
 8005750:	d108      	bne.n	8005764 <__smakebuf_r+0x44>
 8005752:	220c      	movs	r2, #12
 8005754:	5ea3      	ldrsh	r3, [r4, r2]
 8005756:	059a      	lsls	r2, r3, #22
 8005758:	d4ef      	bmi.n	800573a <__smakebuf_r+0x1a>
 800575a:	2203      	movs	r2, #3
 800575c:	4393      	bics	r3, r2
 800575e:	431e      	orrs	r6, r3
 8005760:	81a6      	strh	r6, [r4, #12]
 8005762:	e7e4      	b.n	800572e <__smakebuf_r+0xe>
 8005764:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <__smakebuf_r+0x84>)
 8005766:	62ab      	str	r3, [r5, #40]	; 0x28
 8005768:	2380      	movs	r3, #128	; 0x80
 800576a:	89a2      	ldrh	r2, [r4, #12]
 800576c:	6020      	str	r0, [r4, #0]
 800576e:	4313      	orrs	r3, r2
 8005770:	81a3      	strh	r3, [r4, #12]
 8005772:	9b00      	ldr	r3, [sp, #0]
 8005774:	6120      	str	r0, [r4, #16]
 8005776:	6163      	str	r3, [r4, #20]
 8005778:	9b01      	ldr	r3, [sp, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00d      	beq.n	800579a <__smakebuf_r+0x7a>
 800577e:	0028      	movs	r0, r5
 8005780:	230e      	movs	r3, #14
 8005782:	5ee1      	ldrsh	r1, [r4, r3]
 8005784:	f000 f89c 	bl	80058c0 <_isatty_r>
 8005788:	2800      	cmp	r0, #0
 800578a:	d006      	beq.n	800579a <__smakebuf_r+0x7a>
 800578c:	2203      	movs	r2, #3
 800578e:	89a3      	ldrh	r3, [r4, #12]
 8005790:	4393      	bics	r3, r2
 8005792:	001a      	movs	r2, r3
 8005794:	2301      	movs	r3, #1
 8005796:	4313      	orrs	r3, r2
 8005798:	81a3      	strh	r3, [r4, #12]
 800579a:	89a0      	ldrh	r0, [r4, #12]
 800579c:	4307      	orrs	r7, r0
 800579e:	81a7      	strh	r7, [r4, #12]
 80057a0:	e7cb      	b.n	800573a <__smakebuf_r+0x1a>
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	080049b1 	.word	0x080049b1

080057a8 <memchr>:
 80057a8:	b2c9      	uxtb	r1, r1
 80057aa:	1882      	adds	r2, r0, r2
 80057ac:	4290      	cmp	r0, r2
 80057ae:	d101      	bne.n	80057b4 <memchr+0xc>
 80057b0:	2000      	movs	r0, #0
 80057b2:	4770      	bx	lr
 80057b4:	7803      	ldrb	r3, [r0, #0]
 80057b6:	428b      	cmp	r3, r1
 80057b8:	d0fb      	beq.n	80057b2 <memchr+0xa>
 80057ba:	3001      	adds	r0, #1
 80057bc:	e7f6      	b.n	80057ac <memchr+0x4>
	...

080057c0 <__malloc_lock>:
 80057c0:	b510      	push	{r4, lr}
 80057c2:	4802      	ldr	r0, [pc, #8]	; (80057cc <__malloc_lock+0xc>)
 80057c4:	f7ff f9d3 	bl	8004b6e <__retarget_lock_acquire_recursive>
 80057c8:	bd10      	pop	{r4, pc}
 80057ca:	46c0      	nop			; (mov r8, r8)
 80057cc:	200001c4 	.word	0x200001c4

080057d0 <__malloc_unlock>:
 80057d0:	b510      	push	{r4, lr}
 80057d2:	4802      	ldr	r0, [pc, #8]	; (80057dc <__malloc_unlock+0xc>)
 80057d4:	f7ff f9cc 	bl	8004b70 <__retarget_lock_release_recursive>
 80057d8:	bd10      	pop	{r4, pc}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	200001c4 	.word	0x200001c4

080057e0 <_free_r>:
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	0005      	movs	r5, r0
 80057e4:	2900      	cmp	r1, #0
 80057e6:	d010      	beq.n	800580a <_free_r+0x2a>
 80057e8:	1f0c      	subs	r4, r1, #4
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	da00      	bge.n	80057f2 <_free_r+0x12>
 80057f0:	18e4      	adds	r4, r4, r3
 80057f2:	0028      	movs	r0, r5
 80057f4:	f7ff ffe4 	bl	80057c0 <__malloc_lock>
 80057f8:	4a1d      	ldr	r2, [pc, #116]	; (8005870 <_free_r+0x90>)
 80057fa:	6813      	ldr	r3, [r2, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d105      	bne.n	800580c <_free_r+0x2c>
 8005800:	6063      	str	r3, [r4, #4]
 8005802:	6014      	str	r4, [r2, #0]
 8005804:	0028      	movs	r0, r5
 8005806:	f7ff ffe3 	bl	80057d0 <__malloc_unlock>
 800580a:	bd70      	pop	{r4, r5, r6, pc}
 800580c:	42a3      	cmp	r3, r4
 800580e:	d908      	bls.n	8005822 <_free_r+0x42>
 8005810:	6821      	ldr	r1, [r4, #0]
 8005812:	1860      	adds	r0, r4, r1
 8005814:	4283      	cmp	r3, r0
 8005816:	d1f3      	bne.n	8005800 <_free_r+0x20>
 8005818:	6818      	ldr	r0, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	1841      	adds	r1, r0, r1
 800581e:	6021      	str	r1, [r4, #0]
 8005820:	e7ee      	b.n	8005800 <_free_r+0x20>
 8005822:	001a      	movs	r2, r3
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <_free_r+0x4e>
 800582a:	42a3      	cmp	r3, r4
 800582c:	d9f9      	bls.n	8005822 <_free_r+0x42>
 800582e:	6811      	ldr	r1, [r2, #0]
 8005830:	1850      	adds	r0, r2, r1
 8005832:	42a0      	cmp	r0, r4
 8005834:	d10b      	bne.n	800584e <_free_r+0x6e>
 8005836:	6820      	ldr	r0, [r4, #0]
 8005838:	1809      	adds	r1, r1, r0
 800583a:	1850      	adds	r0, r2, r1
 800583c:	6011      	str	r1, [r2, #0]
 800583e:	4283      	cmp	r3, r0
 8005840:	d1e0      	bne.n	8005804 <_free_r+0x24>
 8005842:	6818      	ldr	r0, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	1841      	adds	r1, r0, r1
 8005848:	6011      	str	r1, [r2, #0]
 800584a:	6053      	str	r3, [r2, #4]
 800584c:	e7da      	b.n	8005804 <_free_r+0x24>
 800584e:	42a0      	cmp	r0, r4
 8005850:	d902      	bls.n	8005858 <_free_r+0x78>
 8005852:	230c      	movs	r3, #12
 8005854:	602b      	str	r3, [r5, #0]
 8005856:	e7d5      	b.n	8005804 <_free_r+0x24>
 8005858:	6821      	ldr	r1, [r4, #0]
 800585a:	1860      	adds	r0, r4, r1
 800585c:	4283      	cmp	r3, r0
 800585e:	d103      	bne.n	8005868 <_free_r+0x88>
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	1841      	adds	r1, r0, r1
 8005866:	6021      	str	r1, [r4, #0]
 8005868:	6063      	str	r3, [r4, #4]
 800586a:	6054      	str	r4, [r2, #4]
 800586c:	e7ca      	b.n	8005804 <_free_r+0x24>
 800586e:	46c0      	nop			; (mov r8, r8)
 8005870:	200001c8 	.word	0x200001c8

08005874 <_read_r>:
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	0004      	movs	r4, r0
 8005878:	0008      	movs	r0, r1
 800587a:	0011      	movs	r1, r2
 800587c:	001a      	movs	r2, r3
 800587e:	2300      	movs	r3, #0
 8005880:	4d05      	ldr	r5, [pc, #20]	; (8005898 <_read_r+0x24>)
 8005882:	602b      	str	r3, [r5, #0]
 8005884:	f7fb fa18 	bl	8000cb8 <_read>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	d103      	bne.n	8005894 <_read_r+0x20>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d000      	beq.n	8005894 <_read_r+0x20>
 8005892:	6023      	str	r3, [r4, #0]
 8005894:	bd70      	pop	{r4, r5, r6, pc}
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	200001d0 	.word	0x200001d0

0800589c <_fstat_r>:
 800589c:	2300      	movs	r3, #0
 800589e:	b570      	push	{r4, r5, r6, lr}
 80058a0:	4d06      	ldr	r5, [pc, #24]	; (80058bc <_fstat_r+0x20>)
 80058a2:	0004      	movs	r4, r0
 80058a4:	0008      	movs	r0, r1
 80058a6:	0011      	movs	r1, r2
 80058a8:	602b      	str	r3, [r5, #0]
 80058aa:	f7fb fa48 	bl	8000d3e <_fstat>
 80058ae:	1c43      	adds	r3, r0, #1
 80058b0:	d103      	bne.n	80058ba <_fstat_r+0x1e>
 80058b2:	682b      	ldr	r3, [r5, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d000      	beq.n	80058ba <_fstat_r+0x1e>
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
 80058bc:	200001d0 	.word	0x200001d0

080058c0 <_isatty_r>:
 80058c0:	2300      	movs	r3, #0
 80058c2:	b570      	push	{r4, r5, r6, lr}
 80058c4:	4d06      	ldr	r5, [pc, #24]	; (80058e0 <_isatty_r+0x20>)
 80058c6:	0004      	movs	r4, r0
 80058c8:	0008      	movs	r0, r1
 80058ca:	602b      	str	r3, [r5, #0]
 80058cc:	f7fb fa45 	bl	8000d5a <_isatty>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d103      	bne.n	80058dc <_isatty_r+0x1c>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d000      	beq.n	80058dc <_isatty_r+0x1c>
 80058da:	6023      	str	r3, [r4, #0]
 80058dc:	bd70      	pop	{r4, r5, r6, pc}
 80058de:	46c0      	nop			; (mov r8, r8)
 80058e0:	200001d0 	.word	0x200001d0

080058e4 <_init>:
 80058e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e6:	46c0      	nop			; (mov r8, r8)
 80058e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ea:	bc08      	pop	{r3}
 80058ec:	469e      	mov	lr, r3
 80058ee:	4770      	bx	lr

080058f0 <_fini>:
 80058f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f6:	bc08      	pop	{r3}
 80058f8:	469e      	mov	lr, r3
 80058fa:	4770      	bx	lr
