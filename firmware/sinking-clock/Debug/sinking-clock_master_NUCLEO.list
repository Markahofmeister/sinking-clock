
sinking-clock_master_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006388  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08006444  08006444  00016444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006968  08006968  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08006968  08006968  00016968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006970  08006970  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006970  08006970  00016970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006974  08006974  00016974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08006978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200000a8  08006a20  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08006a20  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fbf  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002803  00000000  00000000  0003408f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00036898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  000379e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a90  00000000  00000000  00038a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001450e  00000000  00000000  000514c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b224  00000000  00000000  000659ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100bf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000468c  00000000  00000000  00100c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000a8 	.word	0x200000a8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800642c 	.word	0x0800642c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000ac 	.word	0x200000ac
 8000100:	0800642c 	.word	0x0800642c

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	469b      	mov	fp, r3
 80002a6:	d433      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a8:	465a      	mov	r2, fp
 80002aa:	4653      	mov	r3, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83a      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e078      	b.n	80003b4 <__udivmoddi4+0x144>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e075      	b.n	80003ba <__udivmoddi4+0x14a>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e028      	b.n	800033a <__udivmoddi4+0xca>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	2320      	movs	r3, #32
 8000314:	1a9b      	subs	r3, r3, r2
 8000316:	4652      	mov	r2, sl
 8000318:	40da      	lsrs	r2, r3
 800031a:	4641      	mov	r1, r8
 800031c:	0013      	movs	r3, r2
 800031e:	464a      	mov	r2, r9
 8000320:	408a      	lsls	r2, r1
 8000322:	0017      	movs	r7, r2
 8000324:	4642      	mov	r2, r8
 8000326:	431f      	orrs	r7, r3
 8000328:	4653      	mov	r3, sl
 800032a:	4093      	lsls	r3, r2
 800032c:	001e      	movs	r6, r3
 800032e:	42af      	cmp	r7, r5
 8000330:	d9c4      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0d9      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000340:	07fb      	lsls	r3, r7, #31
 8000342:	0872      	lsrs	r2, r6, #1
 8000344:	431a      	orrs	r2, r3
 8000346:	4646      	mov	r6, r8
 8000348:	087b      	lsrs	r3, r7, #1
 800034a:	e00e      	b.n	800036a <__udivmoddi4+0xfa>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d101      	bne.n	8000354 <__udivmoddi4+0xe4>
 8000350:	42a2      	cmp	r2, r4
 8000352:	d80c      	bhi.n	800036e <__udivmoddi4+0xfe>
 8000354:	1aa4      	subs	r4, r4, r2
 8000356:	419d      	sbcs	r5, r3
 8000358:	2001      	movs	r0, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2100      	movs	r1, #0
 8000360:	3e01      	subs	r6, #1
 8000362:	1824      	adds	r4, r4, r0
 8000364:	414d      	adcs	r5, r1
 8000366:	2e00      	cmp	r6, #0
 8000368:	d006      	beq.n	8000378 <__udivmoddi4+0x108>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d9ee      	bls.n	800034c <__udivmoddi4+0xdc>
 800036e:	3e01      	subs	r6, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2e00      	cmp	r6, #0
 8000376:	d1f8      	bne.n	800036a <__udivmoddi4+0xfa>
 8000378:	9800      	ldr	r0, [sp, #0]
 800037a:	9901      	ldr	r1, [sp, #4]
 800037c:	465b      	mov	r3, fp
 800037e:	1900      	adds	r0, r0, r4
 8000380:	4169      	adcs	r1, r5
 8000382:	2b00      	cmp	r3, #0
 8000384:	db24      	blt.n	80003d0 <__udivmoddi4+0x160>
 8000386:	002b      	movs	r3, r5
 8000388:	465a      	mov	r2, fp
 800038a:	4644      	mov	r4, r8
 800038c:	40d3      	lsrs	r3, r2
 800038e:	002a      	movs	r2, r5
 8000390:	40e2      	lsrs	r2, r4
 8000392:	001c      	movs	r4, r3
 8000394:	465b      	mov	r3, fp
 8000396:	0015      	movs	r5, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	db2a      	blt.n	80003f2 <__udivmoddi4+0x182>
 800039c:	0026      	movs	r6, r4
 800039e:	409e      	lsls	r6, r3
 80003a0:	0033      	movs	r3, r6
 80003a2:	0026      	movs	r6, r4
 80003a4:	4647      	mov	r7, r8
 80003a6:	40be      	lsls	r6, r7
 80003a8:	0032      	movs	r2, r6
 80003aa:	1a80      	subs	r0, r0, r2
 80003ac:	4199      	sbcs	r1, r3
 80003ae:	9000      	str	r0, [sp, #0]
 80003b0:	9101      	str	r1, [sp, #4]
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b4:	42a3      	cmp	r3, r4
 80003b6:	d8bc      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80003b8:	e783      	b.n	80002c2 <__udivmoddi4+0x52>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	2100      	movs	r1, #0
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	2200      	movs	r2, #0
 80003c4:	9100      	str	r1, [sp, #0]
 80003c6:	9201      	str	r2, [sp, #4]
 80003c8:	2201      	movs	r2, #1
 80003ca:	40da      	lsrs	r2, r3
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	e786      	b.n	80002de <__udivmoddi4+0x6e>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	4646      	mov	r6, r8
 80003da:	409a      	lsls	r2, r3
 80003dc:	0023      	movs	r3, r4
 80003de:	40f3      	lsrs	r3, r6
 80003e0:	4644      	mov	r4, r8
 80003e2:	4313      	orrs	r3, r2
 80003e4:	002a      	movs	r2, r5
 80003e6:	40e2      	lsrs	r2, r4
 80003e8:	001c      	movs	r4, r3
 80003ea:	465b      	mov	r3, fp
 80003ec:	0015      	movs	r5, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dad4      	bge.n	800039c <__udivmoddi4+0x12c>
 80003f2:	4642      	mov	r2, r8
 80003f4:	002f      	movs	r7, r5
 80003f6:	2320      	movs	r3, #32
 80003f8:	0026      	movs	r6, r4
 80003fa:	4097      	lsls	r7, r2
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	40de      	lsrs	r6, r3
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7cd      	b.n	80003a2 <__udivmoddi4+0x132>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <getRTCTime>:
				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
	}

}

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000468:	68b9      	ldr	r1, [r7, #8]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	2200      	movs	r2, #0
 800046e:	0018      	movs	r0, r3
 8000470:	f002 fede 	bl	8003230 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000474:	6879      	ldr	r1, [r7, #4]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2200      	movs	r2, #0
 800047a:	0018      	movs	r0, r3
 800047c:	f002 ffc6 	bl	800340c <HAL_RTC_GetDate>

}
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b004      	add	sp, #16
 8000486:	bd80      	pop	{r7, pc}

08000488 <getUserAlarmTime>:

void getUserAlarmTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *userAlarmTime) {
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b08d      	sub	sp, #52	; 0x34
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]

	// Store alarm data in alarm object pointer and extract alarm time data from alarm object
	RTC_AlarmTypeDef userAlarmObj;
	HAL_RTC_GetAlarm(hrtc, &userAlarmObj, userAlarm, RTCTimeFormat);
 8000492:	2380      	movs	r3, #128	; 0x80
 8000494:	009a      	lsls	r2, r3, #2
 8000496:	2408      	movs	r4, #8
 8000498:	1939      	adds	r1, r7, r4
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	2300      	movs	r3, #0
 800049e:	f003 f943 	bl	8003728 <HAL_RTC_GetAlarm>
	*userAlarmTime = userAlarmObj.AlarmTime;
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	193a      	adds	r2, r7, r4
 80004a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004a8:	c313      	stmia	r3!, {r0, r1, r4}
 80004aa:	ca03      	ldmia	r2!, {r0, r1}
 80004ac:	c303      	stmia	r3!, {r0, r1}

}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b00d      	add	sp, #52	; 0x34
 80004b4:	bd90      	pop	{r4, r7, pc}

080004b6 <getUserAlarmObj>:

void getUserAlarmObj(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *userAlarmObj) {
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	6039      	str	r1, [r7, #0]

	// Store alarm data in alarm object pointer
	HAL_RTC_GetAlarm(hrtc, userAlarmObj, internalAlarm, FORMAT_BIN);
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	005a      	lsls	r2, r3, #1
 80004c4:	6839      	ldr	r1, [r7, #0]
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	2300      	movs	r3, #0
 80004ca:	f003 f92d 	bl	8003728 <HAL_RTC_GetAlarm>

}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b002      	add	sp, #8
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80004e0:	2301      	movs	r3, #1
 80004e2:	425b      	negs	r3, r3
 80004e4:	1d39      	adds	r1, r7, #4
 80004e6:	4804      	ldr	r0, [pc, #16]	; (80004f8 <__io_putchar+0x20>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	f004 fab7 	bl	8004a5c <HAL_UART_Transmit>
  return ch;
 80004ee:	687b      	ldr	r3, [r7, #4]
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	2000018c 	.word	0x2000018c

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f001 fb61 	bl	8001bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f851 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 fa87 	bl	8000a1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050e:	f000 fa51 	bl	80009b4 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000512:	f000 f897 	bl	8000644 <MX_RTC_Init>
  MX_TIM16_Init();
 8000516:	f000 fa25 	bl	8000964 <MX_TIM16_Init>
  MX_TIM1_Init();
 800051a:	f000 f977 	bl	800080c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  displayToggle = 2; 		// Display at 100% intensity for next display toggle
 800051e:	4b17      	ldr	r3, [pc, #92]	; (800057c <main+0x80>)
 8000520:	2202      	movs	r2, #2
 8000522:	701a      	strb	r2, [r3, #0]

  // Initialize all GPIOs to be used with 7 segment display
  sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <main+0x84>)
 8000526:	8818      	ldrh	r0, [r3, #0]
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <main+0x88>)
 800052a:	8819      	ldrh	r1, [r3, #0]
 800052c:	4b16      	ldr	r3, [pc, #88]	; (8000588 <main+0x8c>)
 800052e:	881c      	ldrh	r4, [r3, #0]
 8000530:	4b16      	ldr	r3, [pc, #88]	; (800058c <main+0x90>)
 8000532:	881d      	ldrh	r5, [r3, #0]
 8000534:	4b16      	ldr	r3, [pc, #88]	; (8000590 <main+0x94>)
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	4a16      	ldr	r2, [pc, #88]	; (8000594 <main+0x98>)
 800053a:	9203      	str	r2, [sp, #12]
 800053c:	4a16      	ldr	r2, [pc, #88]	; (8000598 <main+0x9c>)
 800053e:	9202      	str	r2, [sp, #8]
 8000540:	4a16      	ldr	r2, [pc, #88]	; (800059c <main+0xa0>)
 8000542:	9201      	str	r2, [sp, #4]
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	002b      	movs	r3, r5
 8000548:	0022      	movs	r2, r4
 800054a:	f000 ff11 	bl	8001370 <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, &htim16, &htim1);

  	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 800054e:	1dfc      	adds	r4, r7, #7
 8000550:	f000 fb48 	bl	8000be4 <updateAndDisplayTime>
 8000554:	0003      	movs	r3, r0
 8000556:	7023      	strb	r3, [r4, #0]

  	if(halRet != HAL_OK) {		//check HAL
 8000558:	1dfb      	adds	r3, r7, #7
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d004      	beq.n	800056a <main+0x6e>
  		printf("HAL Error - TX current time\n\r");
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <main+0xa4>)
 8000562:	0018      	movs	r0, r3
 8000564:	f004 ff8a 	bl	800547c <iprintf>
 8000568:	e003      	b.n	8000572 <main+0x76>
  	} else {
  		printf("Display Updated with current time\n\r");
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <main+0xa8>)
 800056c:	0018      	movs	r0, r3
 800056e:	f004 ff85 	bl	800547c <iprintf>
  	}

  userAlarmToggle = false;			//Default to off
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <main+0xac>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	e7fe      	b.n	8000578 <main+0x7c>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	200000c4 	.word	0x200000c4
 8000580:	20000000 	.word	0x20000000
 8000584:	20000002 	.word	0x20000002
 8000588:	20000004 	.word	0x20000004
 800058c:	20000006 	.word	0x20000006
 8000590:	20000008 	.word	0x20000008
 8000594:	200000f4 	.word	0x200000f4
 8000598:	20000140 	.word	0x20000140
 800059c:	2000000c 	.word	0x2000000c
 80005a0:	08006444 	.word	0x08006444
 80005a4:	08006464 	.word	0x08006464
 80005a8:	200000c5 	.word	0x200000c5

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b093      	sub	sp, #76	; 0x4c
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	2410      	movs	r4, #16
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	0018      	movs	r0, r3
 80005b8:	2338      	movs	r3, #56	; 0x38
 80005ba:	001a      	movs	r2, r3
 80005bc:	2100      	movs	r1, #0
 80005be:	f004 ff55 	bl	800546c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c2:	003b      	movs	r3, r7
 80005c4:	0018      	movs	r0, r3
 80005c6:	2310      	movs	r3, #16
 80005c8:	001a      	movs	r2, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	f004 ff4e 	bl	800546c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	0018      	movs	r0, r3
 80005d6:	f001 fe2d 	bl	8002234 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	220a      	movs	r2, #10
 80005de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	0052      	lsls	r2, r2, #1
 80005e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005e8:	0021      	movs	r1, r4
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2240      	movs	r2, #64	; 0x40
 80005f4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2201      	movs	r2, #1
 80005fa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	187b      	adds	r3, r7, r1
 8000604:	0018      	movs	r0, r3
 8000606:	f001 fe8b 	bl	8002320 <HAL_RCC_OscConfig>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800060e:	f000 fea9 	bl	8001364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	003b      	movs	r3, r7
 8000614:	2207      	movs	r2, #7
 8000616:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000618:	003b      	movs	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	003b      	movs	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000624:	003b      	movs	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800062a:	003b      	movs	r3, r7
 800062c:	2100      	movs	r1, #0
 800062e:	0018      	movs	r0, r3
 8000630:	f002 f990 	bl	8002954 <HAL_RCC_ClockConfig>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000638:	f000 fe94 	bl	8001364 <Error_Handler>
  }
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b013      	add	sp, #76	; 0x4c
 8000642:	bd90      	pop	{r4, r7, pc}

08000644 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b091      	sub	sp, #68	; 0x44
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800064a:	232c      	movs	r3, #44	; 0x2c
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	0018      	movs	r0, r3
 8000650:	2314      	movs	r3, #20
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f004 ff09 	bl	800546c <memset>
  RTC_DateTypeDef sDate = {0};
 800065a:	2328      	movs	r3, #40	; 0x28
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000662:	003b      	movs	r3, r7
 8000664:	0018      	movs	r0, r3
 8000666:	2328      	movs	r3, #40	; 0x28
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f004 fefe 	bl	800546c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000670:	4b5f      	ldr	r3, [pc, #380]	; (80007f0 <MX_RTC_Init+0x1ac>)
 8000672:	4a60      	ldr	r2, [pc, #384]	; (80007f4 <MX_RTC_Init+0x1b0>)
 8000674:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000676:	4b5e      	ldr	r3, [pc, #376]	; (80007f0 <MX_RTC_Init+0x1ac>)
 8000678:	2240      	movs	r2, #64	; 0x40
 800067a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800067c:	4b5c      	ldr	r3, [pc, #368]	; (80007f0 <MX_RTC_Init+0x1ac>)
 800067e:	227f      	movs	r2, #127	; 0x7f
 8000680:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000682:	4b5b      	ldr	r3, [pc, #364]	; (80007f0 <MX_RTC_Init+0x1ac>)
 8000684:	22ff      	movs	r2, #255	; 0xff
 8000686:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000688:	4b59      	ldr	r3, [pc, #356]	; (80007f0 <MX_RTC_Init+0x1ac>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800068e:	4b58      	ldr	r3, [pc, #352]	; (80007f0 <MX_RTC_Init+0x1ac>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000694:	4b56      	ldr	r3, [pc, #344]	; (80007f0 <MX_RTC_Init+0x1ac>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800069a:	4b55      	ldr	r3, [pc, #340]	; (80007f0 <MX_RTC_Init+0x1ac>)
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	05d2      	lsls	r2, r2, #23
 80006a0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80006a2:	4b53      	ldr	r3, [pc, #332]	; (80007f0 <MX_RTC_Init+0x1ac>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006a8:	4b51      	ldr	r3, [pc, #324]	; (80007f0 <MX_RTC_Init+0x1ac>)
 80006aa:	0018      	movs	r0, r3
 80006ac:	f002 fc76 	bl	8002f9c <HAL_RTC_Init>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80006b4:	f000 fe56 	bl	8001364 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 80006b8:	212c      	movs	r1, #44	; 0x2c
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2200      	movs	r2, #0
 80006ca:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80006e4:	1879      	adds	r1, r7, r1
 80006e6:	4b42      	ldr	r3, [pc, #264]	; (80007f0 <MX_RTC_Init+0x1ac>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	0018      	movs	r0, r3
 80006ec:	f002 fcf8 	bl	80030e0 <HAL_RTC_SetTime>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 80006f4:	f000 fe36 	bl	8001364 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006f8:	2128      	movs	r1, #40	; 0x28
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2201      	movs	r2, #1
 80006fe:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2201      	movs	r2, #1
 8000704:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2201      	movs	r2, #1
 800070a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000712:	1879      	adds	r1, r7, r1
 8000714:	4b36      	ldr	r3, [pc, #216]	; (80007f0 <MX_RTC_Init+0x1ac>)
 8000716:	2200      	movs	r2, #0
 8000718:	0018      	movs	r0, r3
 800071a:	f002 fde5 	bl	80032e8 <HAL_RTC_SetDate>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 8000722:	f000 fe1f 	bl	8001364 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 1;
 8000726:	003b      	movs	r3, r7
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 1;
 800072c:	003b      	movs	r3, r7
 800072e:	2201      	movs	r2, #1
 8000730:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8000732:	003b      	movs	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000738:	003b      	movs	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800073e:	003b      	movs	r3, r7
 8000740:	2200      	movs	r2, #0
 8000742:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000744:	003b      	movs	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800074a:	003b      	movs	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000750:	003b      	movs	r3, r7
 8000752:	4a29      	ldr	r2, [pc, #164]	; (80007f8 <MX_RTC_Init+0x1b4>)
 8000754:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000756:	003b      	movs	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800075c:	003b      	movs	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000762:	003b      	movs	r3, r7
 8000764:	2220      	movs	r2, #32
 8000766:	2101      	movs	r1, #1
 8000768:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800076a:	003b      	movs	r3, r7
 800076c:	2280      	movs	r2, #128	; 0x80
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000772:	0039      	movs	r1, r7
 8000774:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <MX_RTC_Init+0x1ac>)
 8000776:	2200      	movs	r2, #0
 8000778:	0018      	movs	r0, r3
 800077a:	f002 fe95 	bl	80034a8 <HAL_RTC_SetAlarm_IT>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d001      	beq.n	8000786 <MX_RTC_Init+0x142>
  {
    Error_Handler();
 8000782:	f000 fdef 	bl	8001364 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Seconds = 10;
 8000786:	003b      	movs	r3, r7
 8000788:	220a      	movs	r2, #10
 800078a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 800078c:	003b      	movs	r3, r7
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	0612      	lsls	r2, r2, #24
 8000792:	615a      	str	r2, [r3, #20]
  sAlarm.Alarm = RTC_ALARM_B;
 8000794:	003b      	movs	r3, r7
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	0092      	lsls	r2, r2, #2
 800079a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800079c:	0039      	movs	r1, r7
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_RTC_Init+0x1ac>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	0018      	movs	r0, r3
 80007a4:	f002 fe80 	bl	80034a8 <HAL_RTC_SetAlarm_IT>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_RTC_Init+0x16c>
  {
    Error_Handler();
 80007ac:	f000 fdda 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  currTime = sTime;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_RTC_Init+0x1b8>)
 80007b2:	222c      	movs	r2, #44	; 0x2c
 80007b4:	18ba      	adds	r2, r7, r2
 80007b6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007b8:	c313      	stmia	r3!, {r0, r1, r4}
 80007ba:	ca03      	ldmia	r2!, {r0, r1}
 80007bc:	c303      	stmia	r3!, {r0, r1}
  currDate = sDate;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_RTC_Init+0x1bc>)
 80007c0:	2228      	movs	r2, #40	; 0x28
 80007c2:	18ba      	adds	r2, r7, r2
 80007c4:	6812      	ldr	r2, [r2, #0]
 80007c6:	601a      	str	r2, [r3, #0]
  userAlarmObj = sAlarm;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_RTC_Init+0x1c0>)
 80007ca:	003a      	movs	r2, r7
 80007cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007ce:	c313      	stmia	r3!, {r0, r1, r4}
 80007d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007d2:	c313      	stmia	r3!, {r0, r1, r4}
 80007d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007d6:	c313      	stmia	r3!, {r0, r1, r4}
 80007d8:	6812      	ldr	r2, [r2, #0]
 80007da:	601a      	str	r2, [r3, #0]
  userAlarmTime = userAlarmObj.AlarmTime;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_RTC_Init+0x1c4>)
 80007de:	4a09      	ldr	r2, [pc, #36]	; (8000804 <MX_RTC_Init+0x1c0>)
 80007e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007e2:	c313      	stmia	r3!, {r0, r1, r4}
 80007e4:	ca03      	ldmia	r2!, {r0, r1}
 80007e6:	c303      	stmia	r3!, {r0, r1}

  /* USER CODE END RTC_Init 2 */

}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b011      	add	sp, #68	; 0x44
 80007ee:	bd90      	pop	{r4, r7, pc}
 80007f0:	200000c8 	.word	0x200000c8
 80007f4:	40002800 	.word	0x40002800
 80007f8:	80800080 	.word	0x80800080
 80007fc:	20000220 	.word	0x20000220
 8000800:	20000234 	.word	0x20000234
 8000804:	2000024c 	.word	0x2000024c
 8000808:	20000238 	.word	0x20000238

0800080c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b098      	sub	sp, #96	; 0x60
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000812:	2354      	movs	r3, #84	; 0x54
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	0018      	movs	r0, r3
 8000818:	230c      	movs	r3, #12
 800081a:	001a      	movs	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	f004 fe25 	bl	800546c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000822:	2338      	movs	r3, #56	; 0x38
 8000824:	18fb      	adds	r3, r7, r3
 8000826:	0018      	movs	r0, r3
 8000828:	231c      	movs	r3, #28
 800082a:	001a      	movs	r2, r3
 800082c:	2100      	movs	r1, #0
 800082e:	f004 fe1d 	bl	800546c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	0018      	movs	r0, r3
 8000836:	2334      	movs	r3, #52	; 0x34
 8000838:	001a      	movs	r2, r3
 800083a:	2100      	movs	r1, #0
 800083c:	f004 fe16 	bl	800546c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000840:	4b45      	ldr	r3, [pc, #276]	; (8000958 <MX_TIM1_Init+0x14c>)
 8000842:	4a46      	ldr	r2, [pc, #280]	; (800095c <MX_TIM1_Init+0x150>)
 8000844:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1600-1;
 8000846:	4b44      	ldr	r3, [pc, #272]	; (8000958 <MX_TIM1_Init+0x14c>)
 8000848:	4a45      	ldr	r2, [pc, #276]	; (8000960 <MX_TIM1_Init+0x154>)
 800084a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b42      	ldr	r3, [pc, #264]	; (8000958 <MX_TIM1_Init+0x14c>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000852:	4b41      	ldr	r3, [pc, #260]	; (8000958 <MX_TIM1_Init+0x14c>)
 8000854:	2263      	movs	r2, #99	; 0x63
 8000856:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000858:	4b3f      	ldr	r3, [pc, #252]	; (8000958 <MX_TIM1_Init+0x14c>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800085e:	4b3e      	ldr	r3, [pc, #248]	; (8000958 <MX_TIM1_Init+0x14c>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000864:	4b3c      	ldr	r3, [pc, #240]	; (8000958 <MX_TIM1_Init+0x14c>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800086a:	4b3b      	ldr	r3, [pc, #236]	; (8000958 <MX_TIM1_Init+0x14c>)
 800086c:	0018      	movs	r0, r3
 800086e:	f003 fa25 	bl	8003cbc <HAL_TIM_PWM_Init>
 8000872:	1e03      	subs	r3, r0, #0
 8000874:	d001      	beq.n	800087a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000876:	f000 fd75 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087a:	2154      	movs	r1, #84	; 0x54
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800088e:	187a      	adds	r2, r7, r1
 8000890:	4b31      	ldr	r3, [pc, #196]	; (8000958 <MX_TIM1_Init+0x14c>)
 8000892:	0011      	movs	r1, r2
 8000894:	0018      	movs	r0, r3
 8000896:	f003 ff7d 	bl	8004794 <HAL_TIMEx_MasterConfigSynchronization>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800089e:	f000 fd61 	bl	8001364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a2:	2138      	movs	r1, #56	; 0x38
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2260      	movs	r2, #96	; 0x60
 80008a8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008ce:	1879      	adds	r1, r7, r1
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <MX_TIM1_Init+0x14c>)
 80008d2:	2204      	movs	r2, #4
 80008d4:	0018      	movs	r0, r3
 80008d6:	f003 fb27 	bl	8003f28 <HAL_TIM_PWM_ConfigChannel>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80008de:	f000 fd41 	bl	8001364 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2280      	movs	r2, #128	; 0x80
 8000904:	0192      	lsls	r2, r2, #6
 8000906:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2280      	movs	r2, #128	; 0x80
 800091e:	0492      	lsls	r2, r2, #18
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2200      	movs	r2, #0
 800092c:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2200      	movs	r2, #0
 8000932:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000934:	1d3a      	adds	r2, r7, #4
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_TIM1_Init+0x14c>)
 8000938:	0011      	movs	r1, r2
 800093a:	0018      	movs	r0, r3
 800093c:	f003 ff92 	bl	8004864 <HAL_TIMEx_ConfigBreakDeadTime>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000944:	f000 fd0e 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <MX_TIM1_Init+0x14c>)
 800094a:	0018      	movs	r0, r3
 800094c:	f000 ff9c 	bl	8001888 <HAL_TIM_MspPostInit>

}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b018      	add	sp, #96	; 0x60
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200000f4 	.word	0x200000f4
 800095c:	40012c00 	.word	0x40012c00
 8000960:	0000063f 	.word	0x0000063f

08000964 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_TIM16_Init+0x44>)
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <MX_TIM16_Init+0x48>)
 800096c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 244;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_TIM16_Init+0x44>)
 8000970:	22f4      	movs	r2, #244	; 0xf4
 8000972:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_TIM16_Init+0x44>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_TIM16_Init+0x44>)
 800097c:	4a0c      	ldr	r2, [pc, #48]	; (80009b0 <MX_TIM16_Init+0x4c>)
 800097e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_TIM16_Init+0x44>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_TIM16_Init+0x44>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_TIM16_Init+0x44>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <MX_TIM16_Init+0x44>)
 8000994:	0018      	movs	r0, r3
 8000996:	f003 f8c6 	bl	8003b26 <HAL_TIM_Base_Init>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800099e:	f000 fce1 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000140 	.word	0x20000140
 80009ac:	40014400 	.word	0x40014400
 80009b0:	0000ffff 	.word	0x0000ffff

080009b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_USART2_UART_Init+0x60>)
 80009ba:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <MX_USART2_UART_Init+0x64>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_USART2_UART_Init+0x60>)
 80009c0:	22e1      	movs	r2, #225	; 0xe1
 80009c2:	0252      	lsls	r2, r2, #9
 80009c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_USART2_UART_Init+0x60>)
 80009c8:	2280      	movs	r2, #128	; 0x80
 80009ca:	0152      	lsls	r2, r2, #5
 80009cc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USART2_UART_Init+0x60>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_USART2_UART_Init+0x60>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USART2_UART_Init+0x60>)
 80009dc:	220c      	movs	r2, #12
 80009de:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USART2_UART_Init+0x60>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USART2_UART_Init+0x60>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USART2_UART_Init+0x60>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_USART2_UART_Init+0x60>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USART2_UART_Init+0x60>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <MX_USART2_UART_Init+0x60>)
 8000a00:	0018      	movs	r0, r3
 8000a02:	f003 ffd5 	bl	80049b0 <HAL_UART_Init>
 8000a06:	1e03      	subs	r3, r0, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000a0a:	f000 fcab 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2000018c 	.word	0x2000018c
 8000a18:	40004400 	.word	0x40004400

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b08b      	sub	sp, #44	; 0x2c
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	2414      	movs	r4, #20
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	0018      	movs	r0, r3
 8000a28:	2314      	movs	r3, #20
 8000a2a:	001a      	movs	r2, r3
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	f004 fd1d 	bl	800546c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	4b66      	ldr	r3, [pc, #408]	; (8000bcc <MX_GPIO_Init+0x1b0>)
 8000a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a36:	4b65      	ldr	r3, [pc, #404]	; (8000bcc <MX_GPIO_Init+0x1b0>)
 8000a38:	2102      	movs	r1, #2
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a3e:	4b63      	ldr	r3, [pc, #396]	; (8000bcc <MX_GPIO_Init+0x1b0>)
 8000a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a42:	2202      	movs	r2, #2
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b60      	ldr	r3, [pc, #384]	; (8000bcc <MX_GPIO_Init+0x1b0>)
 8000a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a4e:	4b5f      	ldr	r3, [pc, #380]	; (8000bcc <MX_GPIO_Init+0x1b0>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	430a      	orrs	r2, r1
 8000a54:	635a      	str	r2, [r3, #52]	; 0x34
 8000a56:	4b5d      	ldr	r3, [pc, #372]	; (8000bcc <MX_GPIO_Init+0x1b0>)
 8000a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a62:	4b5a      	ldr	r3, [pc, #360]	; (8000bcc <MX_GPIO_Init+0x1b0>)
 8000a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a66:	4b59      	ldr	r3, [pc, #356]	; (8000bcc <MX_GPIO_Init+0x1b0>)
 8000a68:	2120      	movs	r1, #32
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a6e:	4b57      	ldr	r3, [pc, #348]	; (8000bcc <MX_GPIO_Init+0x1b0>)
 8000a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a72:	2220      	movs	r2, #32
 8000a74:	4013      	ands	r3, r2
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b54      	ldr	r3, [pc, #336]	; (8000bcc <MX_GPIO_Init+0x1b0>)
 8000a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a7e:	4b53      	ldr	r3, [pc, #332]	; (8000bcc <MX_GPIO_Init+0x1b0>)
 8000a80:	2101      	movs	r1, #1
 8000a82:	430a      	orrs	r2, r1
 8000a84:	635a      	str	r2, [r3, #52]	; 0x34
 8000a86:	4b51      	ldr	r3, [pc, #324]	; (8000bcc <MX_GPIO_Init+0x1b0>)
 8000a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Shift_Data_In_ALTERNATE_Pin|Buzzer_Output_Pin|Shift_Store_Clock_Pin|Shift_Data_Clock_Pin
 8000a92:	494f      	ldr	r1, [pc, #316]	; (8000bd0 <MX_GPIO_Init+0x1b4>)
 8000a94:	4b4f      	ldr	r3, [pc, #316]	; (8000bd4 <MX_GPIO_Init+0x1b8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f001 fb7a 	bl	8002192 <HAL_GPIO_WritePin>
                          |Shift_Master_Clear_Pin|AM_PM_LED_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a9e:	4b4e      	ldr	r3, [pc, #312]	; (8000bd8 <MX_GPIO_Init+0x1bc>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f001 fb74 	bl	8002192 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Shift_Data_In_GPIO_Port, Shift_Data_In_Pin, GPIO_PIN_RESET);
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	0219      	lsls	r1, r3, #8
 8000aae:	23a0      	movs	r3, #160	; 0xa0
 8000ab0:	05db      	lsls	r3, r3, #23
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f001 fb6c 	bl	8002192 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Shift_Data_In_ALTERNATE_Pin Buzzer_Output_Pin Shift_Store_Clock_Pin Shift_Data_Clock_Pin
                           Shift_Master_Clear_Pin AM_PM_LED_Pin Alarm_LED_Pin */
  GPIO_InitStruct.Pin = Shift_Data_In_ALTERNATE_Pin|Buzzer_Output_Pin|Shift_Store_Clock_Pin|Shift_Data_Clock_Pin
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	4a44      	ldr	r2, [pc, #272]	; (8000bd0 <MX_GPIO_Init+0x1b4>)
 8000abe:	601a      	str	r2, [r3, #0]
                          |Shift_Master_Clear_Pin|AM_PM_LED_Pin|Alarm_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	4a3f      	ldr	r2, [pc, #252]	; (8000bd4 <MX_GPIO_Init+0x1b8>)
 8000ad6:	0019      	movs	r1, r3
 8000ad8:	0010      	movs	r0, r2
 8000ada:	f001 f9d9 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000ade:	0021      	movs	r1, r4
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2288      	movs	r2, #136	; 0x88
 8000aea:	0352      	lsls	r2, r2, #13
 8000aec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	000c      	movs	r4, r1
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	4a38      	ldr	r2, [pc, #224]	; (8000bdc <MX_GPIO_Init+0x1c0>)
 8000afa:	0019      	movs	r1, r3
 8000afc:	0010      	movs	r0, r2
 8000afe:	f001 f9c7 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_Button_Pin Alarm_Set_Button_Pin Hour_Set_Button_Pin Alarm_Enable_Button_Pin
                           Minute_Set_Button_Pin */
  GPIO_InitStruct.Pin = Display_Button_Pin|Alarm_Set_Button_Pin|Hour_Set_Button_Pin|Alarm_Enable_Button_Pin
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	4a36      	ldr	r2, [pc, #216]	; (8000be0 <MX_GPIO_Init+0x1c4>)
 8000b06:	601a      	str	r2, [r3, #0]
                          |Minute_Set_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	2284      	movs	r2, #132	; 0x84
 8000b0c:	0392      	lsls	r2, r2, #14
 8000b0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b10:	193b      	adds	r3, r7, r4
 8000b12:	2201      	movs	r2, #1
 8000b14:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	193a      	adds	r2, r7, r4
 8000b18:	23a0      	movs	r3, #160	; 0xa0
 8000b1a:	05db      	lsls	r3, r3, #23
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f001 f9b6 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	2240      	movs	r2, #64	; 0x40
 8000b28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	4a26      	ldr	r2, [pc, #152]	; (8000bd8 <MX_GPIO_Init+0x1bc>)
 8000b40:	0019      	movs	r1, r3
 8000b42:	0010      	movs	r0, r2
 8000b44:	f001 f9a4 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : Snooze_Button_Pin */
  GPIO_InitStruct.Pin = Snooze_Button_Pin;
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	2280      	movs	r2, #128	; 0x80
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	2200      	movs	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	2201      	movs	r2, #1
 8000b5a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Snooze_Button_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	193a      	adds	r2, r7, r4
 8000b5e:	23a0      	movs	r3, #160	; 0xa0
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	0011      	movs	r1, r2
 8000b64:	0018      	movs	r0, r3
 8000b66:	f001 f993 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : Shift_Data_In_Pin */
  GPIO_InitStruct.Pin = Shift_Data_In_Pin;
 8000b6a:	0021      	movs	r1, r4
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2280      	movs	r2, #128	; 0x80
 8000b70:	0212      	lsls	r2, r2, #8
 8000b72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2201      	movs	r2, #1
 8000b78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Shift_Data_In_GPIO_Port, &GPIO_InitStruct);
 8000b86:	187a      	adds	r2, r7, r1
 8000b88:	23a0      	movs	r3, #160	; 0xa0
 8000b8a:	05db      	lsls	r3, r3, #23
 8000b8c:	0011      	movs	r1, r2
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f001 f97e 	bl	8001e90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2101      	movs	r1, #1
 8000b98:	2005      	movs	r0, #5
 8000b9a:	f001 f947 	bl	8001e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000b9e:	2005      	movs	r0, #5
 8000ba0:	f001 f959 	bl	8001e56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2006      	movs	r0, #6
 8000baa:	f001 f93f 	bl	8001e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000bae:	2006      	movs	r0, #6
 8000bb0:	f001 f951 	bl	8001e56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2007      	movs	r0, #7
 8000bba:	f001 f937 	bl	8001e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000bbe:	2007      	movs	r0, #7
 8000bc0:	f001 f949 	bl	8001e56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b00b      	add	sp, #44	; 0x2c
 8000bca:	bd90      	pop	{r4, r7, pc}
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	000003f2 	.word	0x000003f2
 8000bd4:	50000400 	.word	0x50000400
 8000bd8:	50000800 	.word	0x50000800
 8000bdc:	50001400 	.word	0x50001400
 8000be0:	00001063 	.word	0x00001063

08000be4 <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8000bf0:	4a10      	ldr	r2, [pc, #64]	; (8000c34 <updateAndDisplayTime+0x50>)
 8000bf2:	4911      	ldr	r1, [pc, #68]	; (8000c38 <updateAndDisplayTime+0x54>)
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <updateAndDisplayTime+0x58>)
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f7ff fc30 	bl	800045c <getRTCTime>
	sevSeg_updateDigits(&currTime);
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <updateAndDisplayTime+0x54>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 fcce 	bl	80015a0 <sevSeg_updateDigits>

	if(currTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <updateAndDisplayTime+0x54>)
 8000c06:	78db      	ldrb	r3, [r3, #3]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d106      	bne.n	8000c1a <updateAndDisplayTime+0x36>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <updateAndDisplayTime+0x5c>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	0018      	movs	r0, r3
 8000c14:	f001 fabd 	bl	8002192 <HAL_GPIO_WritePin>
 8000c18:	e005      	b.n	8000c26 <updateAndDisplayTime+0x42>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000c1a:	2180      	movs	r1, #128	; 0x80
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <updateAndDisplayTime+0x5c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 fab6 	bl	8002192 <HAL_GPIO_WritePin>
	}

	return halRet;
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]

}
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b002      	add	sp, #8
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	20000234 	.word	0x20000234
 8000c38:	20000220 	.word	0x20000220
 8000c3c:	200000c8 	.word	0x200000c8
 8000c40:	50000400 	.word	0x50000400

08000c44 <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]

	getUserAlarmTime(&hrtc, &userAlarmTime);
 8000c50:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <updateAndDisplayAlarm+0x50>)
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <updateAndDisplayAlarm+0x54>)
 8000c54:	0011      	movs	r1, r2
 8000c56:	0018      	movs	r0, r3
 8000c58:	f7ff fc16 	bl	8000488 <getUserAlarmTime>
	sevSeg_updateDigits(&userAlarmTime);
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <updateAndDisplayAlarm+0x50>)
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f000 fc9e 	bl	80015a0 <sevSeg_updateDigits>

	if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <updateAndDisplayAlarm+0x50>)
 8000c66:	78db      	ldrb	r3, [r3, #3]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d106      	bne.n	8000c7a <updateAndDisplayAlarm+0x36>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <updateAndDisplayAlarm+0x58>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	0018      	movs	r0, r3
 8000c74:	f001 fa8d 	bl	8002192 <HAL_GPIO_WritePin>
 8000c78:	e005      	b.n	8000c86 <updateAndDisplayAlarm+0x42>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000c7a:	2180      	movs	r1, #128	; 0x80
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <updateAndDisplayAlarm+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	0018      	movs	r0, r3
 8000c82:	f001 fa86 	bl	8002192 <HAL_GPIO_WritePin>
	}

	return halRet;
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]

}
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	20000238 	.word	0x20000238
 8000c98:	200000c8 	.word	0x200000c8
 8000c9c:	50000400 	.word	0x50000400

08000ca0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b08d      	sub	sp, #52	; 0x34
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

	  printf("Enter current time minute increment interrupt\n\r");
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000caa:	0018      	movs	r0, r3
 8000cac:	f004 fbe6 	bl	800547c <iprintf>

	  RTC_AlarmTypeDef sAlarm;
	  getUserAlarmObj(hrtc, &sAlarm);
 8000cb0:	2408      	movs	r4, #8
 8000cb2:	193a      	adds	r2, r7, r4
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f7ff fbfc 	bl	80004b6 <getUserAlarmObj>
	  getRTCTime(hrtc, &currTime, &currDate);
 8000cbe:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <HAL_RTC_AlarmAEventCallback+0x8c>)
 8000cc0:	491b      	ldr	r1, [pc, #108]	; (8000d30 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff fbc9 	bl	800045c <getRTCTime>

	  if(sAlarm.AlarmTime.Minutes>58) {
 8000cca:	0022      	movs	r2, r4
 8000ccc:	18bb      	adds	r3, r7, r2
 8000cce:	785b      	ldrb	r3, [r3, #1]
 8000cd0:	2b3a      	cmp	r3, #58	; 0x3a
 8000cd2:	d907      	bls.n	8000ce4 <HAL_RTC_AlarmAEventCallback+0x44>
		sAlarm.AlarmTime.Minutes=0;
 8000cd4:	18bb      	adds	r3, r7, r2
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	705a      	strb	r2, [r3, #1]
		printf("Reset alarm time\n\r");
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <HAL_RTC_AlarmAEventCallback+0x94>)
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f004 fbcd 	bl	800547c <iprintf>
 8000ce2:	e006      	b.n	8000cf2 <HAL_RTC_AlarmAEventCallback+0x52>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8000ce4:	2108      	movs	r1, #8
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	785b      	ldrb	r3, [r3, #1]
 8000cea:	3301      	adds	r3, #1
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	18f9      	adds	r1, r7, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f002 fbd3 	bl	80034a8 <HAL_RTC_SetAlarm_IT>
 8000d02:	1e03      	subs	r3, r0, #0
 8000d04:	d1f6      	bne.n	8000cf4 <HAL_RTC_AlarmAEventCallback+0x54>

	  updateAndDisplayTime();
 8000d06:	f7ff ff6d 	bl	8000be4 <updateAndDisplayTime>

	  printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	0019      	movs	r1, r3
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	001a      	movs	r2, r3
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000d18:	789b      	ldrb	r3, [r3, #2]
 8000d1a:	4807      	ldr	r0, [pc, #28]	; (8000d38 <HAL_RTC_AlarmAEventCallback+0x98>)
 8000d1c:	f004 fbae 	bl	800547c <iprintf>

}
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b00d      	add	sp, #52	; 0x34
 8000d26:	bd90      	pop	{r4, r7, pc}
 8000d28:	08006488 	.word	0x08006488
 8000d2c:	20000234 	.word	0x20000234
 8000d30:	20000220 	.word	0x20000220
 8000d34:	080064b8 	.word	0x080064b8
 8000d38:	080064cc 	.word	0x080064cc

08000d3c <HAL_GPIO_EXTI_Falling_Callback>:

	HAL_TIM_Base_Stop(&htim16);

}

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000d3c:	b5b0      	push	{r4, r5, r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	0002      	movs	r2, r0
 8000d44:	1dbb      	adds	r3, r7, #6
 8000d46:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8000d48:	2201      	movs	r2, #1
 8000d4a:	1dbb      	adds	r3, r7, #6
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d113      	bne.n	8000d7a <HAL_GPIO_EXTI_Falling_Callback+0x3e>
		halRet = displayButtonISR();
 8000d52:	250f      	movs	r5, #15
 8000d54:	197c      	adds	r4, r7, r5
 8000d56:	f000 f88f 	bl	8000e78 <displayButtonISR>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000d5e:	197b      	adds	r3, r7, r5
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d004      	beq.n	8000d70 <HAL_GPIO_EXTI_Falling_Callback+0x34>
			printf("Error toggling display.\n\r");
 8000d66:	4b3a      	ldr	r3, [pc, #232]	; (8000e50 <HAL_GPIO_EXTI_Falling_Callback+0x114>)
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f004 fb87 	bl	800547c <iprintf>
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8000d6e:	e06a      	b.n	8000e46 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Display intensity toggled.\n\r");
 8000d70:	4b38      	ldr	r3, [pc, #224]	; (8000e54 <HAL_GPIO_EXTI_Falling_Callback+0x118>)
 8000d72:	0018      	movs	r0, r3
 8000d74:	f004 fb82 	bl	800547c <iprintf>
}
 8000d78:	e065      	b.n	8000e46 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8000d7a:	2240      	movs	r2, #64	; 0x40
 8000d7c:	1dbb      	adds	r3, r7, #6
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d113      	bne.n	8000dac <HAL_GPIO_EXTI_Falling_Callback+0x70>
		halRet = alarmEnableISR();
 8000d84:	250f      	movs	r5, #15
 8000d86:	197c      	adds	r4, r7, r5
 8000d88:	f000 f8a2 	bl	8000ed0 <alarmEnableISR>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000d90:	197b      	adds	r3, r7, r5
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d004      	beq.n	8000da2 <HAL_GPIO_EXTI_Falling_Callback+0x66>
			printf("Error toggling user alarm.\n\r");
 8000d98:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <HAL_GPIO_EXTI_Falling_Callback+0x11c>)
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f004 fb6e 	bl	800547c <iprintf>
}
 8000da0:	e051      	b.n	8000e46 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm toggled.\n\r");
 8000da2:	4b2e      	ldr	r3, [pc, #184]	; (8000e5c <HAL_GPIO_EXTI_Falling_Callback+0x120>)
 8000da4:	0018      	movs	r0, r3
 8000da6:	f004 fb69 	bl	800547c <iprintf>
}
 8000daa:	e04c      	b.n	8000e46 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8000dac:	2202      	movs	r2, #2
 8000dae:	1dbb      	adds	r3, r7, #6
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d113      	bne.n	8000dde <HAL_GPIO_EXTI_Falling_Callback+0xa2>
		halRet = alarmSetISR();
 8000db6:	250f      	movs	r5, #15
 8000db8:	197c      	adds	r4, r7, r5
 8000dba:	f000 f8d7 	bl	8000f6c <alarmSetISR>
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000dc2:	197b      	adds	r3, r7, r5
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d004      	beq.n	8000dd4 <HAL_GPIO_EXTI_Falling_Callback+0x98>
			printf("Error setting user alarm.\n\r");
 8000dca:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <HAL_GPIO_EXTI_Falling_Callback+0x124>)
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f004 fb55 	bl	800547c <iprintf>
}
 8000dd2:	e038      	b.n	8000e46 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm set.\n\r");
 8000dd4:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <HAL_GPIO_EXTI_Falling_Callback+0x128>)
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f004 fb50 	bl	800547c <iprintf>
}
 8000ddc:	e033      	b.n	8000e46 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == hourSetButtonPin) {
 8000dde:	2220      	movs	r2, #32
 8000de0:	1dbb      	adds	r3, r7, #6
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d113      	bne.n	8000e10 <HAL_GPIO_EXTI_Falling_Callback+0xd4>
		halRet = hourSetISR();
 8000de8:	250f      	movs	r5, #15
 8000dea:	197c      	adds	r4, r7, r5
 8000dec:	f000 f934 	bl	8001058 <hourSetISR>
 8000df0:	0003      	movs	r3, r0
 8000df2:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000df4:	197b      	adds	r3, r7, r5
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d004      	beq.n	8000e06 <HAL_GPIO_EXTI_Falling_Callback+0xca>
			printf("Error incrementing hour.\n\r");
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f004 fb3c 	bl	800547c <iprintf>
}
 8000e04:	e01f      	b.n	8000e46 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Hour increment ISR success.\n\r");
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_GPIO_EXTI_Falling_Callback+0x130>)
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f004 fb37 	bl	800547c <iprintf>
}
 8000e0e:	e01a      	b.n	8000e46 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	015b      	lsls	r3, r3, #5
 8000e14:	1dba      	adds	r2, r7, #6
 8000e16:	8812      	ldrh	r2, [r2, #0]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d113      	bne.n	8000e44 <HAL_GPIO_EXTI_Falling_Callback+0x108>
		halRet = minuteSetISR();
 8000e1c:	250f      	movs	r5, #15
 8000e1e:	197c      	adds	r4, r7, r5
 8000e20:	f000 f9c6 	bl	80011b0 <minuteSetISR>
 8000e24:	0003      	movs	r3, r0
 8000e26:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000e28:	197b      	adds	r3, r7, r5
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d004      	beq.n	8000e3a <HAL_GPIO_EXTI_Falling_Callback+0xfe>
			printf("Error incrementing minute.\n\r");
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <HAL_GPIO_EXTI_Falling_Callback+0x134>)
 8000e32:	0018      	movs	r0, r3
 8000e34:	f004 fb22 	bl	800547c <iprintf>
}
 8000e38:	e005      	b.n	8000e46 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Minute increment ISR success.\n\r");
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_GPIO_EXTI_Falling_Callback+0x138>)
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f004 fb1d 	bl	800547c <iprintf>
}
 8000e42:	e000      	b.n	8000e46 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
		__NOP();
 8000e44:	46c0      	nop			; (mov r8, r8)
}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b004      	add	sp, #16
 8000e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	0800650c 	.word	0x0800650c
 8000e54:	08006528 	.word	0x08006528
 8000e58:	08006548 	.word	0x08006548
 8000e5c:	08006568 	.word	0x08006568
 8000e60:	08006580 	.word	0x08006580
 8000e64:	0800659c 	.word	0x0800659c
 8000e68:	080065b0 	.word	0x080065b0
 8000e6c:	080065cc 	.word	0x080065cc
 8000e70:	080065ec 	.word	0x080065ec
 8000e74:	0800660c 	.word	0x0800660c

08000e78 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0

	printf("Entered display toggle ISR\n\r");
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <displayButtonISR+0x4c>)
 8000e80:	0018      	movs	r0, r3
 8000e82:	f004 fafb 	bl	800547c <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 8000e8c:	f7ff feaa 	bl	8000be4 <updateAndDisplayTime>

	//sevSeg_setIntensity(&htim1, sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <displayButtonISR+0x50>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d909      	bls.n	8000eac <displayButtonISR+0x34>
		displayToggle = 0;
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <displayButtonISR+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
 8000e9e:	2180      	movs	r1, #128	; 0x80
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <displayButtonISR+0x54>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f001 f974 	bl	8002192 <HAL_GPIO_WritePin>
 8000eaa:	e005      	b.n	8000eb8 <displayButtonISR+0x40>
	} else {
		displayToggle++;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <displayButtonISR+0x50>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <displayButtonISR+0x50>)
 8000eb6:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8000eb8:	1dfb      	adds	r3, r7, #7
 8000eba:	781b      	ldrb	r3, [r3, #0]

}
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b002      	add	sp, #8
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	0800662c 	.word	0x0800662c
 8000ec8:	200000c4 	.word	0x200000c4
 8000ecc:	50000400 	.word	0x50000400

08000ed0 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0

	printf("Entered alarm toggle ISR\n\r");
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <alarmEnableISR+0x84>)
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f004 facf 	bl	800547c <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <alarmEnableISR+0x88>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	4053      	eors	r3, r2
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d015      	beq.n	8000f1e <alarmEnableISR+0x4e>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_SET);			// Turn on alarm LED
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4819      	ldr	r0, [pc, #100]	; (8000f5c <alarmEnableISR+0x8c>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	0019      	movs	r1, r3
 8000efc:	f001 f949 	bl	8002192 <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <alarmEnableISR+0x88>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]

		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <alarmEnableISR+0x90>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	0019      	movs	r1, r3
								userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <alarmEnableISR+0x90>)
 8000f0e:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000f10:	001a      	movs	r2, r3
								userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <alarmEnableISR+0x90>)
 8000f14:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000f16:	4813      	ldr	r0, [pc, #76]	; (8000f64 <alarmEnableISR+0x94>)
 8000f18:	f004 fab0 	bl	800547c <iprintf>
 8000f1c:	e013      	b.n	8000f46 <alarmEnableISR+0x76>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <alarmEnableISR+0x88>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00e      	beq.n	8000f44 <alarmEnableISR+0x74>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_RESET);			// Turn off alarm LED
 8000f26:	2380      	movs	r3, #128	; 0x80
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	480c      	ldr	r0, [pc, #48]	; (8000f5c <alarmEnableISR+0x8c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	0019      	movs	r1, r3
 8000f30:	f001 f92f 	bl	8002192 <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <alarmEnableISR+0x88>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]

		printf("User alarm disabled.\n\r");
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <alarmEnableISR+0x98>)
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f004 fa9d 	bl	800547c <iprintf>
 8000f42:	e000      	b.n	8000f46 <alarmEnableISR+0x76>
	}
	else {
		__NOP();							//Code should never reach here.
 8000f44:	46c0      	nop			; (mov r8, r8)
	}

	return halRet;
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	781b      	ldrb	r3, [r3, #0]

}
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b002      	add	sp, #8
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	0800664c 	.word	0x0800664c
 8000f58:	200000c5 	.word	0x200000c5
 8000f5c:	50000400 	.word	0x50000400
 8000f60:	20000238 	.word	0x20000238
 8000f64:	08006668 	.word	0x08006668
 8000f68:	08006688 	.word	0x08006688

08000f6c <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0

	printf("Enter user alarm set ISR.\n\r");
 8000f72:	4b32      	ldr	r3, [pc, #200]	; (800103c <alarmSetISR+0xd0>)
 8000f74:	0018      	movs	r0, r3
 8000f76:	f004 fa81 	bl	800547c <iprintf>

	getUserAlarmTime(&hrtc, &userAlarmTime);
 8000f7a:	4a31      	ldr	r2, [pc, #196]	; (8001040 <alarmSetISR+0xd4>)
 8000f7c:	4b31      	ldr	r3, [pc, #196]	; (8001044 <alarmSetISR+0xd8>)
 8000f7e:	0011      	movs	r1, r2
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff fa81 	bl	8000488 <getUserAlarmTime>
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000f86:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <alarmSetISR+0xd4>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	0019      	movs	r1, r3
			userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000f8c:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <alarmSetISR+0xd4>)
 8000f8e:	785b      	ldrb	r3, [r3, #1]
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000f90:	001a      	movs	r2, r3
			userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000f92:	4b2b      	ldr	r3, [pc, #172]	; (8001040 <alarmSetISR+0xd4>)
 8000f94:	789b      	ldrb	r3, [r3, #2]
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000f96:	482c      	ldr	r0, [pc, #176]	; (8001048 <alarmSetISR+0xdc>)
 8000f98:	f004 fa70 	bl	800547c <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim16);						// Begin timer 16 counting (to 500 ms)
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	; (800104c <alarmSetISR+0xe0>)
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f002 fe17 	bl	8003bd8 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(&htim16);	// Get initial timer value to compare to
 8000faa:	4b28      	ldr	r3, [pc, #160]	; (800104c <alarmSetISR+0xe0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fb0:	1dbb      	adds	r3, r7, #6
 8000fb2:	801a      	strh	r2, [r3, #0]
	bool displayBlink = false;
 8000fb4:	1d7b      	adds	r3, r7, #5
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]

	do {											// while the alarm set button is not held down, blink display.

		updateAndDisplayAlarm();
 8000fba:	f7ff fe43 	bl	8000c44 <updateAndDisplayAlarm>

		if(__HAL_TIM_GET_COUNTER(&htim16) - timerVal >= (65536 / 2)) {
 8000fbe:	4b23      	ldr	r3, [pc, #140]	; (800104c <alarmSetISR+0xe0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc4:	1dbb      	adds	r3, r7, #6
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	1ad2      	subs	r2, r2, r3
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d313      	bcc.n	8000ffa <alarmSetISR+0x8e>

			//sevSeg_setIntensity (&htim1, sevSeg_intensityDuty[displayBlink + 1]);		// Initialize to whatever duty cycle

			timerVal = __HAL_TIM_GET_COUNTER(&htim16);
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	; (800104c <alarmSetISR+0xe0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fd8:	1dbb      	adds	r3, r7, #6
 8000fda:	801a      	strh	r2, [r3, #0]
			displayBlink = !displayBlink;
 8000fdc:	1d7b      	adds	r3, r7, #5
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	4193      	sbcs	r3, r2
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4053      	eors	r3, r2
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	001a      	movs	r2, r3
 8000fee:	1d7b      	adds	r3, r7, #5
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	781a      	ldrb	r2, [r3, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	400a      	ands	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]

		}

	}while(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == GPIO_PIN_RESET);
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	23a0      	movs	r3, #160	; 0xa0
 8000ffe:	05db      	lsls	r3, r3, #23
 8001000:	0011      	movs	r1, r2
 8001002:	0018      	movs	r0, r3
 8001004:	f001 f8a8 	bl	8002158 <HAL_GPIO_ReadPin>
 8001008:	1e03      	subs	r3, r0, #0
 800100a:	d0d6      	beq.n	8000fba <alarmSetISR+0x4e>

	//sevSeg_setIntensity(&htim1, sevSeg_intensityDuty[0]);			// Turn display back to full intensity

	HAL_TIM_Base_Stop(&htim16);
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <alarmSetISR+0xe0>)
 800100e:	0018      	movs	r0, r3
 8001010:	f002 fe2e 	bl	8003c70 <HAL_TIM_Base_Stop>

	updateAndDisplayTime();
 8001014:	f7ff fde6 	bl	8000be4 <updateAndDisplayTime>
	printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <alarmSetISR+0xe4>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	0019      	movs	r1, r3
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <alarmSetISR+0xe4>)
 8001020:	785b      	ldrb	r3, [r3, #1]
 8001022:	001a      	movs	r2, r3
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <alarmSetISR+0xe4>)
 8001026:	789b      	ldrb	r3, [r3, #2]
 8001028:	480a      	ldr	r0, [pc, #40]	; (8001054 <alarmSetISR+0xe8>)
 800102a:	f004 fa27 	bl	800547c <iprintf>

	return halRet;
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	781b      	ldrb	r3, [r3, #0]

}
 8001032:	0018      	movs	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	b002      	add	sp, #8
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	080066a0 	.word	0x080066a0
 8001040:	20000238 	.word	0x20000238
 8001044:	200000c8 	.word	0x200000c8
 8001048:	080066bc 	.word	0x080066bc
 800104c:	20000140 	.word	0x20000140
 8001050:	20000220 	.word	0x20000220
 8001054:	080066e4 	.word	0x080066e4

08001058 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0

	printf("Entered hour set ISR.\n\r");
 800105e:	4b4c      	ldr	r3, [pc, #304]	; (8001190 <hourSetISR+0x138>)
 8001060:	0018      	movs	r0, r3
 8001062:	f004 fa0b 	bl	800547c <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) != GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 800106c:	2202      	movs	r2, #2
 800106e:	23a0      	movs	r3, #160	; 0xa0
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	0011      	movs	r1, r2
 8001074:	0018      	movs	r0, r3
 8001076:	f001 f86f 	bl	8002158 <HAL_GPIO_ReadPin>
 800107a:	0003      	movs	r3, r0
 800107c:	2b01      	cmp	r3, #1
 800107e:	d042      	beq.n	8001106 <hourSetISR+0xae>

		getUserAlarmTime(&hrtc, &userAlarmTime);
 8001080:	4a44      	ldr	r2, [pc, #272]	; (8001194 <hourSetISR+0x13c>)
 8001082:	4b45      	ldr	r3, [pc, #276]	; (8001198 <hourSetISR+0x140>)
 8001084:	0011      	movs	r1, r2
 8001086:	0018      	movs	r0, r3
 8001088:	f7ff f9fe 	bl	8000488 <getUserAlarmTime>

		if(userAlarmTime.Hours >= 12) {
 800108c:	4b41      	ldr	r3, [pc, #260]	; (8001194 <hourSetISR+0x13c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b0b      	cmp	r3, #11
 8001092:	d90e      	bls.n	80010b2 <hourSetISR+0x5a>
			userAlarmTime.Hours = 1;
 8001094:	4b3f      	ldr	r3, [pc, #252]	; (8001194 <hourSetISR+0x13c>)
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800109a:	4b3e      	ldr	r3, [pc, #248]	; (8001194 <hourSetISR+0x13c>)
 800109c:	78db      	ldrb	r3, [r3, #3]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d103      	bne.n	80010aa <hourSetISR+0x52>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80010a2:	4b3c      	ldr	r3, [pc, #240]	; (8001194 <hourSetISR+0x13c>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	70da      	strb	r2, [r3, #3]
 80010a8:	e00f      	b.n	80010ca <hourSetISR+0x72>
			} else {
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80010aa:	4b3a      	ldr	r3, [pc, #232]	; (8001194 <hourSetISR+0x13c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	70da      	strb	r2, [r3, #3]
 80010b0:	e00b      	b.n	80010ca <hourSetISR+0x72>
			}
		}
		else if(userAlarmTime.Hours < 12) {
 80010b2:	4b38      	ldr	r3, [pc, #224]	; (8001194 <hourSetISR+0x13c>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b0b      	cmp	r3, #11
 80010b8:	d806      	bhi.n	80010c8 <hourSetISR+0x70>
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 80010ba:	4b36      	ldr	r3, [pc, #216]	; (8001194 <hourSetISR+0x13c>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b34      	ldr	r3, [pc, #208]	; (8001194 <hourSetISR+0x13c>)
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e000      	b.n	80010ca <hourSetISR+0x72>
		}
		else {
			__NOP();
 80010c8:	46c0      	nop			; (mov r8, r8)
		}

		userAlarmObj.AlarmTime = userAlarmTime;
 80010ca:	4b34      	ldr	r3, [pc, #208]	; (800119c <hourSetISR+0x144>)
 80010cc:	4a31      	ldr	r2, [pc, #196]	; (8001194 <hourSetISR+0x13c>)
 80010ce:	ca13      	ldmia	r2!, {r0, r1, r4}
 80010d0:	c313      	stmia	r3!, {r0, r1, r4}
 80010d2:	ca03      	ldmia	r2!, {r0, r1}
 80010d4:	c303      	stmia	r3!, {r0, r1}

		HAL_RTC_SetAlarm_IT(&hrtc, &userAlarmObj, RTCTimeFormat);
 80010d6:	4931      	ldr	r1, [pc, #196]	; (800119c <hourSetISR+0x144>)
 80010d8:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <hourSetISR+0x140>)
 80010da:	2200      	movs	r2, #0
 80010dc:	0018      	movs	r0, r3
 80010de:	f002 f9e3 	bl	80034a8 <HAL_RTC_SetAlarm_IT>
		getUserAlarmTime(&hrtc, &userAlarmTime);
 80010e2:	4a2c      	ldr	r2, [pc, #176]	; (8001194 <hourSetISR+0x13c>)
 80010e4:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <hourSetISR+0x140>)
 80010e6:	0011      	movs	r1, r2
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff f9cd 	bl	8000488 <getUserAlarmTime>

		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <hourSetISR+0x13c>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	0019      	movs	r1, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <hourSetISR+0x13c>)
 80010f6:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 80010f8:	001a      	movs	r2, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 80010fa:	4b26      	ldr	r3, [pc, #152]	; (8001194 <hourSetISR+0x13c>)
 80010fc:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 80010fe:	4828      	ldr	r0, [pc, #160]	; (80011a0 <hourSetISR+0x148>)
 8001100:	f004 f9bc 	bl	800547c <iprintf>
 8001104:	e03d      	b.n	8001182 <hourSetISR+0x12a>

	}
	else {									// Otherwise, change current time hour.

		getRTCTime(&hrtc, &currTime, &currDate);
 8001106:	4a27      	ldr	r2, [pc, #156]	; (80011a4 <hourSetISR+0x14c>)
 8001108:	4927      	ldr	r1, [pc, #156]	; (80011a8 <hourSetISR+0x150>)
 800110a:	4b23      	ldr	r3, [pc, #140]	; (8001198 <hourSetISR+0x140>)
 800110c:	0018      	movs	r0, r3
 800110e:	f7ff f9a5 	bl	800045c <getRTCTime>
		if(currTime.Hours >= 12) {
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <hourSetISR+0x150>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b0b      	cmp	r3, #11
 8001118:	d90e      	bls.n	8001138 <hourSetISR+0xe0>
			currTime.Hours = 1;
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <hourSetISR+0x150>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
			if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <hourSetISR+0x150>)
 8001122:	78db      	ldrb	r3, [r3, #3]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <hourSetISR+0xd8>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <hourSetISR+0x150>)
 800112a:	2201      	movs	r2, #1
 800112c:	70da      	strb	r2, [r3, #3]
 800112e:	e00f      	b.n	8001150 <hourSetISR+0xf8>
			} else {
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <hourSetISR+0x150>)
 8001132:	2200      	movs	r2, #0
 8001134:	70da      	strb	r2, [r3, #3]
 8001136:	e00b      	b.n	8001150 <hourSetISR+0xf8>
			}
		}
		else if(currTime.Hours < 12) {
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <hourSetISR+0x150>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b0b      	cmp	r3, #11
 800113e:	d806      	bhi.n	800114e <hourSetISR+0xf6>
			currTime.Hours = currTime.Hours + 1;
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <hourSetISR+0x150>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	3301      	adds	r3, #1
 8001146:	b2da      	uxtb	r2, r3
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <hourSetISR+0x150>)
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	e000      	b.n	8001150 <hourSetISR+0xf8>
		}
		else {
			__NOP();
 800114e:	46c0      	nop			; (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001150:	4915      	ldr	r1, [pc, #84]	; (80011a8 <hourSetISR+0x150>)
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <hourSetISR+0x140>)
 8001154:	2200      	movs	r2, #0
 8001156:	0018      	movs	r0, r3
 8001158:	f001 ffc2 	bl	80030e0 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 800115c:	f7ff fd42 	bl	8000be4 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001160:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <hourSetISR+0x14c>)
 8001162:	4911      	ldr	r1, [pc, #68]	; (80011a8 <hourSetISR+0x150>)
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <hourSetISR+0x140>)
 8001166:	0018      	movs	r0, r3
 8001168:	f7ff f978 	bl	800045c <getRTCTime>

		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <hourSetISR+0x150>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <hourSetISR+0x150>)
 8001174:	785b      	ldrb	r3, [r3, #1]
		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001176:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <hourSetISR+0x150>)
 800117a:	789b      	ldrb	r3, [r3, #2]
		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <hourSetISR+0x154>)
 800117e:	f004 f97d 	bl	800547c <iprintf>
	}

	return halRet;
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
}
 8001186:	0018      	movs	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	b003      	add	sp, #12
 800118c:	bd90      	pop	{r4, r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	08006708 	.word	0x08006708
 8001194:	20000238 	.word	0x20000238
 8001198:	200000c8 	.word	0x200000c8
 800119c:	2000024c 	.word	0x2000024c
 80011a0:	08006720 	.word	0x08006720
 80011a4:	20000234 	.word	0x20000234
 80011a8:	20000220 	.word	0x20000220
 80011ac:	0800674c 	.word	0x0800674c

080011b0 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0

	printf("Entered minute set ISR.\n\r");
 80011b6:	4b63      	ldr	r3, [pc, #396]	; (8001344 <minuteSetISR+0x194>)
 80011b8:	0018      	movs	r0, r3
 80011ba:	f004 f95f 	bl	800547c <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 80011be:	1dfb      	adds	r3, r7, #7
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == !GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 80011c4:	2202      	movs	r2, #2
 80011c6:	23a0      	movs	r3, #160	; 0xa0
 80011c8:	05db      	lsls	r3, r3, #23
 80011ca:	0011      	movs	r1, r2
 80011cc:	0018      	movs	r0, r3
 80011ce:	f000 ffc3 	bl	8002158 <HAL_GPIO_ReadPin>
 80011d2:	1e03      	subs	r3, r0, #0
 80011d4:	d157      	bne.n	8001286 <minuteSetISR+0xd6>

		getUserAlarmTime(&hrtc, &userAlarmTime);
 80011d6:	4a5c      	ldr	r2, [pc, #368]	; (8001348 <minuteSetISR+0x198>)
 80011d8:	4b5c      	ldr	r3, [pc, #368]	; (800134c <minuteSetISR+0x19c>)
 80011da:	0011      	movs	r1, r2
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff f953 	bl	8000488 <getUserAlarmTime>

		if(userAlarmTime.Minutes >= 59) {
 80011e2:	4b59      	ldr	r3, [pc, #356]	; (8001348 <minuteSetISR+0x198>)
 80011e4:	785b      	ldrb	r3, [r3, #1]
 80011e6:	2b3a      	cmp	r3, #58	; 0x3a
 80011e8:	d929      	bls.n	800123e <minuteSetISR+0x8e>
			userAlarmTime.Minutes = 0;
 80011ea:	4b57      	ldr	r3, [pc, #348]	; (8001348 <minuteSetISR+0x198>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	705a      	strb	r2, [r3, #1]
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 80011f0:	4b55      	ldr	r3, [pc, #340]	; (8001348 <minuteSetISR+0x198>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b53      	ldr	r3, [pc, #332]	; (8001348 <minuteSetISR+0x198>)
 80011fa:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.Hours > 12) {
 80011fc:	4b52      	ldr	r3, [pc, #328]	; (8001348 <minuteSetISR+0x198>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b0c      	cmp	r3, #12
 8001202:	d902      	bls.n	800120a <minuteSetISR+0x5a>
				userAlarmTime.Hours = 1;
 8001204:	4b50      	ldr	r3, [pc, #320]	; (8001348 <minuteSetISR+0x198>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
			}
			if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800120a:	4b4f      	ldr	r3, [pc, #316]	; (8001348 <minuteSetISR+0x198>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b0c      	cmp	r3, #12
 8001210:	d107      	bne.n	8001222 <minuteSetISR+0x72>
 8001212:	4b4d      	ldr	r3, [pc, #308]	; (8001348 <minuteSetISR+0x198>)
 8001214:	78db      	ldrb	r3, [r3, #3]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d103      	bne.n	8001222 <minuteSetISR+0x72>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800121a:	4b4b      	ldr	r3, [pc, #300]	; (8001348 <minuteSetISR+0x198>)
 800121c:	2201      	movs	r2, #1
 800121e:	70da      	strb	r2, [r3, #3]
 8001220:	e019      	b.n	8001256 <minuteSetISR+0xa6>
			} else if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 8001222:	4b49      	ldr	r3, [pc, #292]	; (8001348 <minuteSetISR+0x198>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b0c      	cmp	r3, #12
 8001228:	d107      	bne.n	800123a <minuteSetISR+0x8a>
 800122a:	4b47      	ldr	r3, [pc, #284]	; (8001348 <minuteSetISR+0x198>)
 800122c:	78db      	ldrb	r3, [r3, #3]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d103      	bne.n	800123a <minuteSetISR+0x8a>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001232:	4b45      	ldr	r3, [pc, #276]	; (8001348 <minuteSetISR+0x198>)
 8001234:	2200      	movs	r2, #0
 8001236:	70da      	strb	r2, [r3, #3]
 8001238:	e00d      	b.n	8001256 <minuteSetISR+0xa6>
			}
			else {
				__NOP();
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	e00b      	b.n	8001256 <minuteSetISR+0xa6>
			}
		}
		else if(userAlarmTime.Minutes < 59) {
 800123e:	4b42      	ldr	r3, [pc, #264]	; (8001348 <minuteSetISR+0x198>)
 8001240:	785b      	ldrb	r3, [r3, #1]
 8001242:	2b3a      	cmp	r3, #58	; 0x3a
 8001244:	d806      	bhi.n	8001254 <minuteSetISR+0xa4>
			userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001246:	4b40      	ldr	r3, [pc, #256]	; (8001348 <minuteSetISR+0x198>)
 8001248:	785b      	ldrb	r3, [r3, #1]
 800124a:	3301      	adds	r3, #1
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <minuteSetISR+0x198>)
 8001250:	705a      	strb	r2, [r3, #1]
 8001252:	e000      	b.n	8001256 <minuteSetISR+0xa6>
		}
		else {
			__NOP();
 8001254:	46c0      	nop			; (mov r8, r8)
		}

		userAlarmObj.AlarmTime = userAlarmTime;
 8001256:	4b3e      	ldr	r3, [pc, #248]	; (8001350 <minuteSetISR+0x1a0>)
 8001258:	4a3b      	ldr	r2, [pc, #236]	; (8001348 <minuteSetISR+0x198>)
 800125a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800125c:	c313      	stmia	r3!, {r0, r1, r4}
 800125e:	ca03      	ldmia	r2!, {r0, r1}
 8001260:	c303      	stmia	r3!, {r0, r1}

		HAL_RTC_SetAlarm_IT(&hrtc, &userAlarmObj, RTCTimeFormat);
 8001262:	493b      	ldr	r1, [pc, #236]	; (8001350 <minuteSetISR+0x1a0>)
 8001264:	4b39      	ldr	r3, [pc, #228]	; (800134c <minuteSetISR+0x19c>)
 8001266:	2200      	movs	r2, #0
 8001268:	0018      	movs	r0, r3
 800126a:	f002 f91d 	bl	80034a8 <HAL_RTC_SetAlarm_IT>

		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmObj.AlarmTime.Hours,
 800126e:	4b38      	ldr	r3, [pc, #224]	; (8001350 <minuteSetISR+0x1a0>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	0019      	movs	r1, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 8001274:	4b36      	ldr	r3, [pc, #216]	; (8001350 <minuteSetISR+0x1a0>)
 8001276:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmObj.AlarmTime.Hours,
 8001278:	001a      	movs	r2, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 800127a:	4b35      	ldr	r3, [pc, #212]	; (8001350 <minuteSetISR+0x1a0>)
 800127c:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmObj.AlarmTime.Hours,
 800127e:	4835      	ldr	r0, [pc, #212]	; (8001354 <minuteSetISR+0x1a4>)
 8001280:	f004 f8fc 	bl	800547c <iprintf>
 8001284:	e058      	b.n	8001338 <minuteSetISR+0x188>

	}
	else {									// Otherwise, change current time hour.

		getRTCTime(&hrtc, &currTime, &currDate);
 8001286:	4a34      	ldr	r2, [pc, #208]	; (8001358 <minuteSetISR+0x1a8>)
 8001288:	4934      	ldr	r1, [pc, #208]	; (800135c <minuteSetISR+0x1ac>)
 800128a:	4b30      	ldr	r3, [pc, #192]	; (800134c <minuteSetISR+0x19c>)
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff f8e5 	bl	800045c <getRTCTime>

		if(currTime.Minutes >= 59) {
 8001292:	4b32      	ldr	r3, [pc, #200]	; (800135c <minuteSetISR+0x1ac>)
 8001294:	785b      	ldrb	r3, [r3, #1]
 8001296:	2b3a      	cmp	r3, #58	; 0x3a
 8001298:	d929      	bls.n	80012ee <minuteSetISR+0x13e>
			currTime.Minutes = 0;
 800129a:	4b30      	ldr	r3, [pc, #192]	; (800135c <minuteSetISR+0x1ac>)
 800129c:	2200      	movs	r2, #0
 800129e:	705a      	strb	r2, [r3, #1]
			currTime.Hours = currTime.Hours + 1;
 80012a0:	4b2e      	ldr	r3, [pc, #184]	; (800135c <minuteSetISR+0x1ac>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	3301      	adds	r3, #1
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	4b2c      	ldr	r3, [pc, #176]	; (800135c <minuteSetISR+0x1ac>)
 80012aa:	701a      	strb	r2, [r3, #0]
			if(currTime.Hours > 12) {
 80012ac:	4b2b      	ldr	r3, [pc, #172]	; (800135c <minuteSetISR+0x1ac>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b0c      	cmp	r3, #12
 80012b2:	d902      	bls.n	80012ba <minuteSetISR+0x10a>
				currTime.Hours = 1;
 80012b4:	4b29      	ldr	r3, [pc, #164]	; (800135c <minuteSetISR+0x1ac>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
			}
			if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80012ba:	4b28      	ldr	r3, [pc, #160]	; (800135c <minuteSetISR+0x1ac>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b0c      	cmp	r3, #12
 80012c0:	d107      	bne.n	80012d2 <minuteSetISR+0x122>
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <minuteSetISR+0x1ac>)
 80012c4:	78db      	ldrb	r3, [r3, #3]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d103      	bne.n	80012d2 <minuteSetISR+0x122>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <minuteSetISR+0x1ac>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	70da      	strb	r2, [r3, #3]
 80012d0:	e019      	b.n	8001306 <minuteSetISR+0x156>
			} else if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <minuteSetISR+0x1ac>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b0c      	cmp	r3, #12
 80012d8:	d107      	bne.n	80012ea <minuteSetISR+0x13a>
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <minuteSetISR+0x1ac>)
 80012dc:	78db      	ldrb	r3, [r3, #3]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d103      	bne.n	80012ea <minuteSetISR+0x13a>
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80012e2:	4b1e      	ldr	r3, [pc, #120]	; (800135c <minuteSetISR+0x1ac>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	70da      	strb	r2, [r3, #3]
 80012e8:	e00d      	b.n	8001306 <minuteSetISR+0x156>
			}
			else {
				__NOP();
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	e00b      	b.n	8001306 <minuteSetISR+0x156>
			}
		}
		else if(currTime.Minutes < 59) {
 80012ee:	4b1b      	ldr	r3, [pc, #108]	; (800135c <minuteSetISR+0x1ac>)
 80012f0:	785b      	ldrb	r3, [r3, #1]
 80012f2:	2b3a      	cmp	r3, #58	; 0x3a
 80012f4:	d806      	bhi.n	8001304 <minuteSetISR+0x154>
			currTime.Minutes = currTime.Minutes + 1;
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <minuteSetISR+0x1ac>)
 80012f8:	785b      	ldrb	r3, [r3, #1]
 80012fa:	3301      	adds	r3, #1
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <minuteSetISR+0x1ac>)
 8001300:	705a      	strb	r2, [r3, #1]
 8001302:	e000      	b.n	8001306 <minuteSetISR+0x156>
		}
		else {
			__NOP();
 8001304:	46c0      	nop			; (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001306:	4915      	ldr	r1, [pc, #84]	; (800135c <minuteSetISR+0x1ac>)
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <minuteSetISR+0x19c>)
 800130a:	2200      	movs	r2, #0
 800130c:	0018      	movs	r0, r3
 800130e:	f001 fee7 	bl	80030e0 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8001312:	f7ff fc67 	bl	8000be4 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001316:	4a10      	ldr	r2, [pc, #64]	; (8001358 <minuteSetISR+0x1a8>)
 8001318:	4910      	ldr	r1, [pc, #64]	; (800135c <minuteSetISR+0x1ac>)
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <minuteSetISR+0x19c>)
 800131c:	0018      	movs	r0, r3
 800131e:	f7ff f89d 	bl	800045c <getRTCTime>

		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <minuteSetISR+0x1ac>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <minuteSetISR+0x1ac>)
 800132a:	785b      	ldrb	r3, [r3, #1]
		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 800132c:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <minuteSetISR+0x1ac>)
 8001330:	789b      	ldrb	r3, [r3, #2]
		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001332:	480b      	ldr	r0, [pc, #44]	; (8001360 <minuteSetISR+0x1b0>)
 8001334:	f004 f8a2 	bl	800547c <iprintf>
	}

	return halRet;
 8001338:	1dfb      	adds	r3, r7, #7
 800133a:	781b      	ldrb	r3, [r3, #0]
}
 800133c:	0018      	movs	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	b003      	add	sp, #12
 8001342:	bd90      	pop	{r4, r7, pc}
 8001344:	0800677c 	.word	0x0800677c
 8001348:	20000238 	.word	0x20000238
 800134c:	200000c8 	.word	0x200000c8
 8001350:	2000024c 	.word	0x2000024c
 8001354:	08006798 	.word	0x08006798
 8001358:	20000234 	.word	0x20000234
 800135c:	20000220 	.word	0x20000220
 8001360:	080067c4 	.word	0x080067c4

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136c:	e7fe      	b.n	800136c <Error_Handler+0x8>
	...

08001370 <sevSeg_Init>:
GPIO_PinState GPIOPinSet[2] = {GPIO_PIN_RESET, GPIO_PIN_SET};


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM) {
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	0005      	movs	r5, r0
 8001378:	000c      	movs	r4, r1
 800137a:	0010      	movs	r0, r2
 800137c:	0019      	movs	r1, r3
 800137e:	1dbb      	adds	r3, r7, #6
 8001380:	1c2a      	adds	r2, r5, #0
 8001382:	801a      	strh	r2, [r3, #0]
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	1c22      	adds	r2, r4, #0
 8001388:	801a      	strh	r2, [r3, #0]
 800138a:	1cbb      	adds	r3, r7, #2
 800138c:	1c02      	adds	r2, r0, #0
 800138e:	801a      	strh	r2, [r3, #0]
 8001390:	003b      	movs	r3, r7
 8001392:	1c0a      	adds	r2, r1, #0
 8001394:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001396:	4b7a      	ldr	r3, [pc, #488]	; (8001580 <sevSeg_Init+0x210>)
 8001398:	1dba      	adds	r2, r7, #6
 800139a:	8812      	ldrh	r2, [r2, #0]
 800139c:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 800139e:	4b79      	ldr	r3, [pc, #484]	; (8001584 <sevSeg_Init+0x214>)
 80013a0:	1d3a      	adds	r2, r7, #4
 80013a2:	8812      	ldrh	r2, [r2, #0]
 80013a4:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 80013a6:	4b78      	ldr	r3, [pc, #480]	; (8001588 <sevSeg_Init+0x218>)
 80013a8:	1cba      	adds	r2, r7, #2
 80013aa:	8812      	ldrh	r2, [r2, #0]
 80013ac:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 80013ae:	4b77      	ldr	r3, [pc, #476]	; (800158c <sevSeg_Init+0x21c>)
 80013b0:	003a      	movs	r2, r7
 80013b2:	8812      	ldrh	r2, [r2, #0]
 80013b4:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 80013b6:	4a76      	ldr	r2, [pc, #472]	; (8001590 <sevSeg_Init+0x220>)
 80013b8:	2330      	movs	r3, #48	; 0x30
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	8013      	strh	r3, [r2, #0]

	for(int i = 0; i < 5; i++) {
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	e00b      	b.n	80013de <sevSeg_Init+0x6e>
		portArray[i] = GPIOPortArray[i];
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013cc:	18d3      	adds	r3, r2, r3
 80013ce:	6819      	ldr	r1, [r3, #0]
 80013d0:	4b70      	ldr	r3, [pc, #448]	; (8001594 <sevSeg_Init+0x224>)
 80013d2:	69fa      	ldr	r2, [r7, #28]
 80013d4:	0092      	lsls	r2, r2, #2
 80013d6:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	3301      	adds	r3, #1
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	ddf0      	ble.n	80013c6 <sevSeg_Init+0x56>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 80013e4:	4b6b      	ldr	r3, [pc, #428]	; (8001594 <sevSeg_Init+0x224>)
 80013e6:	6918      	ldr	r0, [r3, #16]
 80013e8:	4b69      	ldr	r3, [pc, #420]	; (8001590 <sevSeg_Init+0x220>)
 80013ea:	8819      	ldrh	r1, [r3, #0]
 80013ec:	4b6a      	ldr	r3, [pc, #424]	; (8001598 <sevSeg_Init+0x228>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	001a      	movs	r2, r3
 80013f2:	f000 fece 	bl	8002192 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 80013f6:	4b67      	ldr	r3, [pc, #412]	; (8001594 <sevSeg_Init+0x224>)
 80013f8:	6918      	ldr	r0, [r3, #16]
 80013fa:	4b65      	ldr	r3, [pc, #404]	; (8001590 <sevSeg_Init+0x220>)
 80013fc:	8819      	ldrh	r1, [r3, #0]
 80013fe:	4b66      	ldr	r3, [pc, #408]	; (8001598 <sevSeg_Init+0x228>)
 8001400:	785b      	ldrb	r3, [r3, #1]
 8001402:	001a      	movs	r2, r3
 8001404:	f000 fec5 	bl	8002192 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001408:	4b62      	ldr	r3, [pc, #392]	; (8001594 <sevSeg_Init+0x224>)
 800140a:	6898      	ldr	r0, [r3, #8]
 800140c:	4b5e      	ldr	r3, [pc, #376]	; (8001588 <sevSeg_Init+0x218>)
 800140e:	8819      	ldrh	r1, [r3, #0]
 8001410:	4b61      	ldr	r3, [pc, #388]	; (8001598 <sevSeg_Init+0x228>)
 8001412:	785b      	ldrb	r3, [r3, #1]
 8001414:	001a      	movs	r2, r3
 8001416:	f000 febc 	bl	8002192 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800141a:	4b5e      	ldr	r3, [pc, #376]	; (8001594 <sevSeg_Init+0x224>)
 800141c:	6898      	ldr	r0, [r3, #8]
 800141e:	4b5a      	ldr	r3, [pc, #360]	; (8001588 <sevSeg_Init+0x218>)
 8001420:	8819      	ldrh	r1, [r3, #0]
 8001422:	4b5d      	ldr	r3, [pc, #372]	; (8001598 <sevSeg_Init+0x228>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	001a      	movs	r2, r3
 8001428:	f000 feb3 	bl	8002192 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 800142c:	4b59      	ldr	r3, [pc, #356]	; (8001594 <sevSeg_Init+0x224>)
 800142e:	68d8      	ldr	r0, [r3, #12]
 8001430:	4b56      	ldr	r3, [pc, #344]	; (800158c <sevSeg_Init+0x21c>)
 8001432:	8819      	ldrh	r1, [r3, #0]
 8001434:	4b58      	ldr	r3, [pc, #352]	; (8001598 <sevSeg_Init+0x228>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	001a      	movs	r2, r3
 800143a:	f000 feaa 	bl	8002192 <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(htim_PWM, 90);
 800143e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001440:	215a      	movs	r1, #90	; 0x5a
 8001442:	0018      	movs	r0, r3
 8001444:	f000 f942 	bl	80016cc <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8001448:	2308      	movs	r3, #8
 800144a:	18fb      	adds	r3, r7, r3
 800144c:	4a53      	ldr	r2, [pc, #332]	; (800159c <sevSeg_Init+0x22c>)
 800144e:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	e038      	b.n	80014c8 <sevSeg_Init+0x158>

		sendByte = hofSymb[i];
 8001456:	231b      	movs	r3, #27
 8001458:	18fb      	adds	r3, r7, r3
 800145a:	2208      	movs	r2, #8
 800145c:	18b9      	adds	r1, r7, r2
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	188a      	adds	r2, r1, r2
 8001462:	7812      	ldrb	r2, [r2, #0]
 8001464:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	e027      	b.n	80014bc <sevSeg_Init+0x14c>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 800146c:	4b49      	ldr	r3, [pc, #292]	; (8001594 <sevSeg_Init+0x224>)
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	4b43      	ldr	r3, [pc, #268]	; (8001580 <sevSeg_Init+0x210>)
 8001472:	8819      	ldrh	r1, [r3, #0]
 8001474:	241b      	movs	r4, #27
 8001476:	193b      	adds	r3, r7, r4
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2201      	movs	r2, #1
 800147c:	4013      	ands	r3, r2
 800147e:	4a46      	ldr	r2, [pc, #280]	; (8001598 <sevSeg_Init+0x228>)
 8001480:	5cd3      	ldrb	r3, [r2, r3]
 8001482:	001a      	movs	r2, r3
 8001484:	f000 fe85 	bl	8002192 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001488:	4b42      	ldr	r3, [pc, #264]	; (8001594 <sevSeg_Init+0x224>)
 800148a:	6858      	ldr	r0, [r3, #4]
 800148c:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <sevSeg_Init+0x214>)
 800148e:	8819      	ldrh	r1, [r3, #0]
 8001490:	4b41      	ldr	r3, [pc, #260]	; (8001598 <sevSeg_Init+0x228>)
 8001492:	785b      	ldrb	r3, [r3, #1]
 8001494:	001a      	movs	r2, r3
 8001496:	f000 fe7c 	bl	8002192 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 800149a:	4b3e      	ldr	r3, [pc, #248]	; (8001594 <sevSeg_Init+0x224>)
 800149c:	6858      	ldr	r0, [r3, #4]
 800149e:	4b39      	ldr	r3, [pc, #228]	; (8001584 <sevSeg_Init+0x214>)
 80014a0:	8819      	ldrh	r1, [r3, #0]
 80014a2:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <sevSeg_Init+0x228>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	001a      	movs	r2, r3
 80014a8:	f000 fe73 	bl	8002192 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 80014ac:	193b      	adds	r3, r7, r4
 80014ae:	193a      	adds	r2, r7, r4
 80014b0:	7812      	ldrb	r2, [r2, #0]
 80014b2:	0852      	lsrs	r2, r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	3301      	adds	r3, #1
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	2b07      	cmp	r3, #7
 80014c0:	ddd4      	ble.n	800146c <sevSeg_Init+0xfc>
	for(int i = 0; i <= 3; i++) {
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	ddc3      	ble.n	8001456 <sevSeg_Init+0xe6>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80014ce:	4b31      	ldr	r3, [pc, #196]	; (8001594 <sevSeg_Init+0x224>)
 80014d0:	6898      	ldr	r0, [r3, #8]
 80014d2:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <sevSeg_Init+0x218>)
 80014d4:	8819      	ldrh	r1, [r3, #0]
 80014d6:	4b30      	ldr	r3, [pc, #192]	; (8001598 <sevSeg_Init+0x228>)
 80014d8:	785b      	ldrb	r3, [r3, #1]
 80014da:	001a      	movs	r2, r3
 80014dc:	f000 fe59 	bl	8002192 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80014e0:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <sevSeg_Init+0x224>)
 80014e2:	6898      	ldr	r0, [r3, #8]
 80014e4:	4b28      	ldr	r3, [pc, #160]	; (8001588 <sevSeg_Init+0x218>)
 80014e6:	8819      	ldrh	r1, [r3, #0]
 80014e8:	4b2b      	ldr	r3, [pc, #172]	; (8001598 <sevSeg_Init+0x228>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	001a      	movs	r2, r3
 80014ee:	f000 fe50 	bl	8002192 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 80014f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f4:	0018      	movs	r0, r3
 80014f6:	f002 fbbb 	bl	8003c70 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 80014fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014fc:	0018      	movs	r0, r3
 80014fe:	f002 fb6b 	bl	8003bd8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8001502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001508:	60fb      	str	r3, [r7, #12]
	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 2)){ timerVal = __HAL_TIM_GET_COUNTER(htim); }
 800150a:	e003      	b.n	8001514 <sevSeg_Init+0x1a4>
 800150c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1ad2      	subs	r2, r2, r3
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	429a      	cmp	r2, r3
 8001524:	d3f2      	bcc.n	800150c <sevSeg_Init+0x19c>

	HAL_TIM_Base_Stop(htim);
 8001526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001528:	0018      	movs	r0, r3
 800152a:	f002 fba1 	bl	8003c70 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <sevSeg_Init+0x224>)
 8001530:	6918      	ldr	r0, [r3, #16]
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <sevSeg_Init+0x220>)
 8001534:	8819      	ldrh	r1, [r3, #0]
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <sevSeg_Init+0x228>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	001a      	movs	r2, r3
 800153c:	f000 fe29 	bl	8002192 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <sevSeg_Init+0x224>)
 8001542:	6918      	ldr	r0, [r3, #16]
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <sevSeg_Init+0x220>)
 8001546:	8819      	ldrh	r1, [r3, #0]
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <sevSeg_Init+0x228>)
 800154a:	785b      	ldrb	r3, [r3, #1]
 800154c:	001a      	movs	r2, r3
 800154e:	f000 fe20 	bl	8002192 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <sevSeg_Init+0x224>)
 8001554:	6898      	ldr	r0, [r3, #8]
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <sevSeg_Init+0x218>)
 8001558:	8819      	ldrh	r1, [r3, #0]
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <sevSeg_Init+0x228>)
 800155c:	785b      	ldrb	r3, [r3, #1]
 800155e:	001a      	movs	r2, r3
 8001560:	f000 fe17 	bl	8002192 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <sevSeg_Init+0x224>)
 8001566:	6898      	ldr	r0, [r3, #8]
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <sevSeg_Init+0x218>)
 800156a:	8819      	ldrh	r1, [r3, #0]
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <sevSeg_Init+0x228>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	001a      	movs	r2, r3
 8001572:	f000 fe0e 	bl	8002192 <HAL_GPIO_WritePin>

}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b008      	add	sp, #32
 800157c:	bdb0      	pop	{r4, r5, r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	20000274 	.word	0x20000274
 8001584:	20000276 	.word	0x20000276
 8001588:	20000278 	.word	0x20000278
 800158c:	2000027a 	.word	0x2000027a
 8001590:	2000027c 	.word	0x2000027c
 8001594:	20000020 	.word	0x20000020
 8001598:	20000034 	.word	0x20000034
 800159c:	471d3700 	.word	0x471d3700

080015a0 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {dig3Seg[updateTime->Hours / 10], updateTime->Hours % 10,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	210a      	movs	r1, #10
 80015ae:	0018      	movs	r0, r3
 80015b0:	f7fe fdb2 	bl	8000118 <__udivsi3>
 80015b4:	0003      	movs	r3, r0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	001a      	movs	r2, r3
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <sevSeg_updateDigits+0x110>)
 80015bc:	5c9a      	ldrb	r2, [r3, r2]
 80015be:	2408      	movs	r4, #8
 80015c0:	193b      	adds	r3, r7, r4
 80015c2:	701a      	strb	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	210a      	movs	r1, #10
 80015ca:	0018      	movs	r0, r3
 80015cc:	f7fe fe2a 	bl	8000224 <__aeabi_uidivmod>
 80015d0:	000b      	movs	r3, r1
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	193b      	adds	r3, r7, r4
 80015d6:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {dig3Seg[updateTime->Hours / 10], updateTime->Hours % 10,
 80015dc:	210a      	movs	r1, #10
 80015de:	0018      	movs	r0, r3
 80015e0:	f7fe fd9a 	bl	8000118 <__udivsi3>
 80015e4:	0003      	movs	r3, r0
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	193b      	adds	r3, r7, r4
 80015ea:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {dig3Seg[updateTime->Hours / 10], updateTime->Hours % 10,
 80015f0:	210a      	movs	r1, #10
 80015f2:	0018      	movs	r0, r3
 80015f4:	f7fe fe16 	bl	8000224 <__aeabi_uidivmod>
 80015f8:	000b      	movs	r3, r1
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	193b      	adds	r3, r7, r4
 80015fe:	70da      	strb	r2, [r3, #3]

	//uint8_t sendTime[4] = {8, 8, 8, 8};

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	e03b      	b.n	800167e <sevSeg_updateDigits+0xde>

		sendByte = dispDigits[sendTime[i]];
 8001606:	2308      	movs	r3, #8
 8001608:	18fa      	adds	r2, r7, r3
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	18d3      	adds	r3, r2, r3
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	0019      	movs	r1, r3
 8001612:	2317      	movs	r3, #23
 8001614:	18fb      	adds	r3, r7, r3
 8001616:	4a27      	ldr	r2, [pc, #156]	; (80016b4 <sevSeg_updateDigits+0x114>)
 8001618:	5c52      	ldrb	r2, [r2, r1]
 800161a:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	e027      	b.n	8001672 <sevSeg_updateDigits+0xd2>

			// Write data pin with LSB of data
			//HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001622:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <sevSeg_updateDigits+0x118>)
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	4b25      	ldr	r3, [pc, #148]	; (80016bc <sevSeg_updateDigits+0x11c>)
 8001628:	8819      	ldrh	r1, [r3, #0]
 800162a:	2417      	movs	r4, #23
 800162c:	193b      	adds	r3, r7, r4
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2201      	movs	r2, #1
 8001632:	4013      	ands	r3, r2
 8001634:	4a22      	ldr	r2, [pc, #136]	; (80016c0 <sevSeg_updateDigits+0x120>)
 8001636:	5cd3      	ldrb	r3, [r2, r3]
 8001638:	001a      	movs	r2, r3
 800163a:	f000 fdaa 	bl	8002192 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <sevSeg_updateDigits+0x118>)
 8001640:	6858      	ldr	r0, [r3, #4]
 8001642:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <sevSeg_updateDigits+0x124>)
 8001644:	8819      	ldrh	r1, [r3, #0]
 8001646:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <sevSeg_updateDigits+0x120>)
 8001648:	785b      	ldrb	r3, [r3, #1]
 800164a:	001a      	movs	r2, r3
 800164c:	f000 fda1 	bl	8002192 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <sevSeg_updateDigits+0x118>)
 8001652:	6858      	ldr	r0, [r3, #4]
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <sevSeg_updateDigits+0x124>)
 8001656:	8819      	ldrh	r1, [r3, #0]
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <sevSeg_updateDigits+0x120>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	001a      	movs	r2, r3
 800165e:	f000 fd98 	bl	8002192 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001662:	193b      	adds	r3, r7, r4
 8001664:	193a      	adds	r2, r7, r4
 8001666:	7812      	ldrb	r2, [r2, #0]
 8001668:	0852      	lsrs	r2, r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3301      	adds	r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2b07      	cmp	r3, #7
 8001676:	ddd4      	ble.n	8001622 <sevSeg_updateDigits+0x82>
	for(int i = 0; i <= 3; i++) {
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	3301      	adds	r3, #1
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	2b03      	cmp	r3, #3
 8001682:	ddc0      	ble.n	8001606 <sevSeg_updateDigits+0x66>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <sevSeg_updateDigits+0x118>)
 8001686:	6898      	ldr	r0, [r3, #8]
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <sevSeg_updateDigits+0x128>)
 800168a:	8819      	ldrh	r1, [r3, #0]
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <sevSeg_updateDigits+0x120>)
 800168e:	785b      	ldrb	r3, [r3, #1]
 8001690:	001a      	movs	r2, r3
 8001692:	f000 fd7e 	bl	8002192 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <sevSeg_updateDigits+0x118>)
 8001698:	6898      	ldr	r0, [r3, #8]
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <sevSeg_updateDigits+0x128>)
 800169c:	8819      	ldrh	r1, [r3, #0]
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <sevSeg_updateDigits+0x120>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	001a      	movs	r2, r3
 80016a4:	f000 fd75 	bl	8002192 <HAL_GPIO_WritePin>

	return;
 80016a8:	46c0      	nop			; (mov r8, r8)

}
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b007      	add	sp, #28
 80016ae:	bd90      	pop	{r4, r7, pc}
 80016b0:	08006800 	.word	0x08006800
 80016b4:	080067f4 	.word	0x080067f4
 80016b8:	20000020 	.word	0x20000020
 80016bc:	20000274 	.word	0x20000274
 80016c0:	20000034 	.word	0x20000034
 80016c4:	20000276 	.word	0x20000276
 80016c8:	20000278 	.word	0x20000278

080016cc <sevSeg_setIntensity>:

void sevSeg_setIntensity(TIM_HandleTypeDef *htim_PWM, uint16_t dutyCycle) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	000a      	movs	r2, r1
 80016d6:	1cbb      	adds	r3, r7, #2
 80016d8:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(htim_PWM, TIM_CHANNEL_2, dutyCycle);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	1cba      	adds	r2, r7, #2
 80016e0:	8812      	ldrh	r2, [r2, #0]
 80016e2:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(htim_PWM, TIM_CHANNEL_2);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2104      	movs	r1, #4
 80016e8:	0018      	movs	r0, r3
 80016ea:	f002 fb3f 	bl	8003d6c <HAL_TIM_PWM_Start>

}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b002      	add	sp, #8
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <HAL_MspInit+0x54>)
 8001700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_MspInit+0x54>)
 8001704:	2101      	movs	r1, #1
 8001706:	430a      	orrs	r2, r1
 8001708:	641a      	str	r2, [r3, #64]	; 0x40
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_MspInit+0x54>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	2201      	movs	r2, #1
 8001710:	4013      	ands	r3, r2
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_MspInit+0x54>)
 8001718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <HAL_MspInit+0x54>)
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	0549      	lsls	r1, r1, #21
 8001720:	430a      	orrs	r2, r1
 8001722:	63da      	str	r2, [r3, #60]	; 0x3c
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_MspInit+0x54>)
 8001726:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	055b      	lsls	r3, r3, #21
 800172c:	4013      	ands	r3, r2
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	2001      	movs	r0, #1
 8001738:	f000 fb78 	bl	8001e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800173c:	2001      	movs	r0, #1
 800173e:	f000 fb8a 	bl	8001e56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	46bd      	mov	sp, r7
 8001746:	b002      	add	sp, #8
 8001748:	bd80      	pop	{r7, pc}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	40021000 	.word	0x40021000

08001750 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b08f      	sub	sp, #60	; 0x3c
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001758:	2410      	movs	r4, #16
 800175a:	193b      	adds	r3, r7, r4
 800175c:	0018      	movs	r0, r3
 800175e:	2328      	movs	r3, #40	; 0x28
 8001760:	001a      	movs	r2, r3
 8001762:	2100      	movs	r1, #0
 8001764:	f003 fe82 	bl	800546c <memset>
  if(hrtc->Instance==RTC)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <HAL_RTC_MspInit+0x84>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d12c      	bne.n	80017cc <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001772:	193b      	adds	r3, r7, r4
 8001774:	2280      	movs	r2, #128	; 0x80
 8001776:	0292      	lsls	r2, r2, #10
 8001778:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800177a:	193b      	adds	r3, r7, r4
 800177c:	2280      	movs	r2, #128	; 0x80
 800177e:	0092      	lsls	r2, r2, #2
 8001780:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001782:	193b      	adds	r3, r7, r4
 8001784:	0018      	movs	r0, r3
 8001786:	f001 fa8f 	bl	8002ca8 <HAL_RCCEx_PeriphCLKConfig>
 800178a:	1e03      	subs	r3, r0, #0
 800178c:	d001      	beq.n	8001792 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800178e:	f7ff fde9 	bl	8001364 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_RTC_MspInit+0x88>)
 8001794:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <HAL_RTC_MspInit+0x88>)
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	0209      	lsls	r1, r1, #8
 800179c:	430a      	orrs	r2, r1
 800179e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <HAL_RTC_MspInit+0x88>)
 80017a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_RTC_MspInit+0x88>)
 80017a6:	2180      	movs	r1, #128	; 0x80
 80017a8:	00c9      	lsls	r1, r1, #3
 80017aa:	430a      	orrs	r2, r1
 80017ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_RTC_MspInit+0x88>)
 80017b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4013      	ands	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	2100      	movs	r1, #0
 80017c0:	2002      	movs	r0, #2
 80017c2:	f000 fb33 	bl	8001e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80017c6:	2002      	movs	r0, #2
 80017c8:	f000 fb45 	bl	8001e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b00f      	add	sp, #60	; 0x3c
 80017d2:	bd90      	pop	{r4, r7, pc}
 80017d4:	40002800 	.word	0x40002800
 80017d8:	40021000 	.word	0x40021000

080017dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b08f      	sub	sp, #60	; 0x3c
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e4:	2410      	movs	r4, #16
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	0018      	movs	r0, r3
 80017ea:	2328      	movs	r3, #40	; 0x28
 80017ec:	001a      	movs	r2, r3
 80017ee:	2100      	movs	r1, #0
 80017f0:	f003 fe3c 	bl	800546c <memset>
  if(htim_pwm->Instance==TIM1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a11      	ldr	r2, [pc, #68]	; (8001840 <HAL_TIM_PWM_MspInit+0x64>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d11c      	bne.n	8001838 <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80017fe:	193b      	adds	r3, r7, r4
 8001800:	2280      	movs	r2, #128	; 0x80
 8001802:	0392      	lsls	r2, r2, #14
 8001804:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001806:	193b      	adds	r3, r7, r4
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800180c:	193b      	adds	r3, r7, r4
 800180e:	0018      	movs	r0, r3
 8001810:	f001 fa4a 	bl	8002ca8 <HAL_RCCEx_PeriphCLKConfig>
 8001814:	1e03      	subs	r3, r0, #0
 8001816:	d001      	beq.n	800181c <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8001818:	f7ff fda4 	bl	8001364 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_TIM_PWM_MspInit+0x68>)
 800181e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_TIM_PWM_MspInit+0x68>)
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	0109      	lsls	r1, r1, #4
 8001826:	430a      	orrs	r2, r1
 8001828:	641a      	str	r2, [r3, #64]	; 0x40
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_TIM_PWM_MspInit+0x68>)
 800182c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4013      	ands	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b00f      	add	sp, #60	; 0x3c
 800183e:	bd90      	pop	{r4, r7, pc}
 8001840:	40012c00 	.word	0x40012c00
 8001844:	40021000 	.word	0x40021000

08001848 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <HAL_TIM_Base_MspInit+0x38>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d10d      	bne.n	8001876 <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_TIM_Base_MspInit+0x3c>)
 800185c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_TIM_Base_MspInit+0x3c>)
 8001860:	2180      	movs	r1, #128	; 0x80
 8001862:	0289      	lsls	r1, r1, #10
 8001864:	430a      	orrs	r2, r1
 8001866:	641a      	str	r2, [r3, #64]	; 0x40
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_TIM_Base_MspInit+0x3c>)
 800186a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	029b      	lsls	r3, r3, #10
 8001870:	4013      	ands	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	b004      	add	sp, #16
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	40014400 	.word	0x40014400
 8001884:	40021000 	.word	0x40021000

08001888 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	240c      	movs	r4, #12
 8001892:	193b      	adds	r3, r7, r4
 8001894:	0018      	movs	r0, r3
 8001896:	2314      	movs	r3, #20
 8001898:	001a      	movs	r2, r3
 800189a:	2100      	movs	r1, #0
 800189c:	f003 fde6 	bl	800546c <memset>
  if(htim->Instance==TIM1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <HAL_TIM_MspPostInit+0x70>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d121      	bne.n	80018ee <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_TIM_MspPostInit+0x74>)
 80018ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ae:	4b13      	ldr	r3, [pc, #76]	; (80018fc <HAL_TIM_MspPostInit+0x74>)
 80018b0:	2102      	movs	r1, #2
 80018b2:	430a      	orrs	r2, r1
 80018b4:	635a      	str	r2, [r3, #52]	; 0x34
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_TIM_MspPostInit+0x74>)
 80018b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ba:	2202      	movs	r2, #2
 80018bc:	4013      	ands	r3, r2
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Shift_Output_En_Pin;
 80018c2:	0021      	movs	r1, r4
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	2208      	movs	r2, #8
 80018c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	2202      	movs	r2, #2
 80018ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	187b      	adds	r3, r7, r1
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	2201      	movs	r2, #1
 80018e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Shift_Output_En_GPIO_Port, &GPIO_InitStruct);
 80018e2:	187b      	adds	r3, r7, r1
 80018e4:	4a06      	ldr	r2, [pc, #24]	; (8001900 <HAL_TIM_MspPostInit+0x78>)
 80018e6:	0019      	movs	r1, r3
 80018e8:	0010      	movs	r0, r2
 80018ea:	f000 fad1 	bl	8001e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b009      	add	sp, #36	; 0x24
 80018f4:	bd90      	pop	{r4, r7, pc}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	40012c00 	.word	0x40012c00
 80018fc:	40021000 	.word	0x40021000
 8001900:	50000400 	.word	0x50000400

08001904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b08b      	sub	sp, #44	; 0x2c
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	2414      	movs	r4, #20
 800190e:	193b      	adds	r3, r7, r4
 8001910:	0018      	movs	r0, r3
 8001912:	2314      	movs	r3, #20
 8001914:	001a      	movs	r2, r3
 8001916:	2100      	movs	r1, #0
 8001918:	f003 fda8 	bl	800546c <memset>
  if(huart->Instance==USART2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <HAL_UART_MspInit+0x8c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d130      	bne.n	8001988 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <HAL_UART_MspInit+0x90>)
 8001928:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800192a:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <HAL_UART_MspInit+0x90>)
 800192c:	2180      	movs	r1, #128	; 0x80
 800192e:	0289      	lsls	r1, r1, #10
 8001930:	430a      	orrs	r2, r1
 8001932:	63da      	str	r2, [r3, #60]	; 0x3c
 8001934:	4b17      	ldr	r3, [pc, #92]	; (8001994 <HAL_UART_MspInit+0x90>)
 8001936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	029b      	lsls	r3, r3, #10
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <HAL_UART_MspInit+0x90>)
 8001944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <HAL_UART_MspInit+0x90>)
 8001948:	2101      	movs	r1, #1
 800194a:	430a      	orrs	r2, r1
 800194c:	635a      	str	r2, [r3, #52]	; 0x34
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_UART_MspInit+0x90>)
 8001950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001952:	2201      	movs	r2, #1
 8001954:	4013      	ands	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800195a:	0021      	movs	r1, r4
 800195c:	187b      	adds	r3, r7, r1
 800195e:	220c      	movs	r2, #12
 8001960:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	187b      	adds	r3, r7, r1
 8001964:	2202      	movs	r2, #2
 8001966:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001968:	187b      	adds	r3, r7, r1
 800196a:	2201      	movs	r2, #1
 800196c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	187b      	adds	r3, r7, r1
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001974:	187b      	adds	r3, r7, r1
 8001976:	2201      	movs	r2, #1
 8001978:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	187a      	adds	r2, r7, r1
 800197c:	23a0      	movs	r3, #160	; 0xa0
 800197e:	05db      	lsls	r3, r3, #23
 8001980:	0011      	movs	r1, r2
 8001982:	0018      	movs	r0, r3
 8001984:	f000 fa84 	bl	8001e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001988:	46c0      	nop			; (mov r8, r8)
 800198a:	46bd      	mov	sp, r7
 800198c:	b00b      	add	sp, #44	; 0x2c
 800198e:	bd90      	pop	{r4, r7, pc}
 8001990:	40004400 	.word	0x40004400
 8001994:	40021000 	.word	0x40021000

08001998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800199c:	e7fe      	b.n	800199c <NMI_Handler+0x4>

0800199e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <HardFault_Handler+0x4>

080019a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019bc:	f000 f96e 	bl	8001c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80019ca:	f000 fc73 	bl	80022b4 <HAL_PWREx_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <RTC_TAMP_IRQHandler+0x14>)
 80019da:	0018      	movs	r0, r3
 80019dc:	f001 ff6a 	bl	80038b4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80019e0:	46c0      	nop			; (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	200000c8 	.word	0x200000c8

080019ec <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Display_Button_Pin);
 80019f0:	2001      	movs	r0, #1
 80019f2:	f000 fbeb 	bl	80021cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Set_Button_Pin);
 80019f6:	2002      	movs	r0, #2
 80019f8:	f000 fbe8 	bl	80021cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_NRST_Pin);
 8001a06:	2004      	movs	r0, #4
 8001a08:	f000 fbe0 	bl	80021cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Hour_Set_Button_Pin);
 8001a16:	2020      	movs	r0, #32
 8001a18:	f000 fbd8 	bl	80021cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Enable_Button_Pin);
 8001a1c:	2040      	movs	r0, #64	; 0x40
 8001a1e:	f000 fbd5 	bl	80021cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Minute_Set_Button_Pin);
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	015b      	lsls	r3, r3, #5
 8001a26:	0018      	movs	r0, r3
 8001a28:	f000 fbd0 	bl	80021cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	e00a      	b.n	8001a5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a44:	e000      	b.n	8001a48 <_read+0x16>
 8001a46:	bf00      	nop
 8001a48:	0001      	movs	r1, r0
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	60ba      	str	r2, [r7, #8]
 8001a50:	b2ca      	uxtb	r2, r1
 8001a52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3301      	adds	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	dbf0      	blt.n	8001a44 <_read+0x12>
  }

  return len;
 8001a62:	687b      	ldr	r3, [r7, #4]
}
 8001a64:	0018      	movs	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b006      	add	sp, #24
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	e009      	b.n	8001a92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	60ba      	str	r2, [r7, #8]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	0018      	movs	r0, r3
 8001a88:	f7fe fd26 	bl	80004d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	dbf1      	blt.n	8001a7e <_write+0x12>
  }
  return len;
 8001a9a:	687b      	ldr	r3, [r7, #4]
}
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b006      	add	sp, #24
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <_close>:

int _close(int file)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aac:	2301      	movs	r3, #1
 8001aae:	425b      	negs	r3, r3
}
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b002      	add	sp, #8
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	0192      	lsls	r2, r2, #6
 8001ac8:	605a      	str	r2, [r3, #4]
  return 0;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b002      	add	sp, #8
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_isatty>:

int _isatty(int file)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001adc:	2301      	movs	r3, #1
}
 8001ade:	0018      	movs	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b002      	add	sp, #8
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b004      	add	sp, #16
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b04:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <_sbrk+0x5c>)
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <_sbrk+0x60>)
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <_sbrk+0x64>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <_sbrk+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	18d3      	adds	r3, r2, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d207      	bcs.n	8001b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b2c:	f003 fc74 	bl	8005418 <__errno>
 8001b30:	0003      	movs	r3, r0
 8001b32:	220c      	movs	r2, #12
 8001b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	425b      	negs	r3, r3
 8001b3a:	e009      	b.n	8001b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	18d2      	adds	r2, r2, r3
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <_sbrk+0x64>)
 8001b4c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	0018      	movs	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b006      	add	sp, #24
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20002000 	.word	0x20002000
 8001b5c:	00000400 	.word	0x00000400
 8001b60:	20000280 	.word	0x20000280
 8001b64:	20000298 	.word	0x20000298

08001b68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b6c:	46c0      	nop			; (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b74:	480d      	ldr	r0, [pc, #52]	; (8001bac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b78:	f7ff fff6 	bl	8001b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b7e:	490d      	ldr	r1, [pc, #52]	; (8001bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b80:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <LoopForever+0xe>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b94:	4c0a      	ldr	r4, [pc, #40]	; (8001bc0 <LoopForever+0x16>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ba2:	f003 fc3f 	bl	8005424 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001ba6:	f7fe fca9 	bl	80004fc <main>

08001baa <LoopForever>:

LoopForever:
  b LoopForever
 8001baa:	e7fe      	b.n	8001baa <LoopForever>
  ldr   r0, =_estack
 8001bac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb4:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001bb8:	08006978 	.word	0x08006978
  ldr r2, =_sbss
 8001bbc:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001bc0:	20000298 	.word	0x20000298

08001bc4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC1_IRQHandler>
	...

08001bc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_Init+0x3c>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_Init+0x3c>)
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	0049      	lsls	r1, r1, #1
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001be2:	2000      	movs	r0, #0
 8001be4:	f000 f810 	bl	8001c08 <HAL_InitTick>
 8001be8:	1e03      	subs	r3, r0, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001bec:	1dfb      	adds	r3, r7, #7
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	e001      	b.n	8001bf8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001bf4:	f7ff fd80 	bl	80016f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bf8:	1dfb      	adds	r3, r7, #7
 8001bfa:	781b      	ldrb	r3, [r3, #0]
}
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b002      	add	sp, #8
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40022000 	.word	0x40022000

08001c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c10:	230f      	movs	r3, #15
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_InitTick+0x88>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d02b      	beq.n	8001c78 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001c20:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <HAL_InitTick+0x8c>)
 8001c22:	681c      	ldr	r4, [r3, #0]
 8001c24:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <HAL_InitTick+0x88>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	0019      	movs	r1, r3
 8001c2a:	23fa      	movs	r3, #250	; 0xfa
 8001c2c:	0098      	lsls	r0, r3, #2
 8001c2e:	f7fe fa73 	bl	8000118 <__udivsi3>
 8001c32:	0003      	movs	r3, r0
 8001c34:	0019      	movs	r1, r3
 8001c36:	0020      	movs	r0, r4
 8001c38:	f7fe fa6e 	bl	8000118 <__udivsi3>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f000 f919 	bl	8001e76 <HAL_SYSTICK_Config>
 8001c44:	1e03      	subs	r3, r0, #0
 8001c46:	d112      	bne.n	8001c6e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d80a      	bhi.n	8001c64 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	2301      	movs	r3, #1
 8001c52:	425b      	negs	r3, r3
 8001c54:	2200      	movs	r2, #0
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 f8e8 	bl	8001e2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_InitTick+0x90>)
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	e00d      	b.n	8001c80 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001c64:	230f      	movs	r3, #15
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]
 8001c6c:	e008      	b.n	8001c80 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c6e:	230f      	movs	r3, #15
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]
 8001c76:	e003      	b.n	8001c80 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c78:	230f      	movs	r3, #15
 8001c7a:	18fb      	adds	r3, r7, r3
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001c80:	230f      	movs	r3, #15
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	781b      	ldrb	r3, [r3, #0]
}
 8001c86:	0018      	movs	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b005      	add	sp, #20
 8001c8c:	bd90      	pop	{r4, r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	20000040 	.word	0x20000040
 8001c94:	20000038 	.word	0x20000038
 8001c98:	2000003c 	.word	0x2000003c

08001c9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_IncTick+0x1c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_IncTick+0x20>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	18d2      	adds	r2, r2, r3
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_IncTick+0x20>)
 8001cae:	601a      	str	r2, [r3, #0]
}
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	20000040 	.word	0x20000040
 8001cbc:	20000284 	.word	0x20000284

08001cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc4:	4b02      	ldr	r3, [pc, #8]	; (8001cd0 <HAL_GetTick+0x10>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	20000284 	.word	0x20000284

08001cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	0002      	movs	r2, r0
 8001cdc:	1dfb      	adds	r3, r7, #7
 8001cde:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	1dfb      	adds	r3, r7, #7
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ce6:	d809      	bhi.n	8001cfc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce8:	1dfb      	adds	r3, r7, #7
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	001a      	movs	r2, r3
 8001cee:	231f      	movs	r3, #31
 8001cf0:	401a      	ands	r2, r3
 8001cf2:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <__NVIC_EnableIRQ+0x30>)
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	4091      	lsls	r1, r2
 8001cf8:	000a      	movs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001cfc:	46c0      	nop			; (mov r8, r8)
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b002      	add	sp, #8
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	0002      	movs	r2, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	1dfb      	adds	r3, r7, #7
 8001d14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	1dfb      	adds	r3, r7, #7
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d1c:	d828      	bhi.n	8001d70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d1e:	4a2f      	ldr	r2, [pc, #188]	; (8001ddc <__NVIC_SetPriority+0xd4>)
 8001d20:	1dfb      	adds	r3, r7, #7
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b25b      	sxtb	r3, r3
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	33c0      	adds	r3, #192	; 0xc0
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	589b      	ldr	r3, [r3, r2]
 8001d2e:	1dfa      	adds	r2, r7, #7
 8001d30:	7812      	ldrb	r2, [r2, #0]
 8001d32:	0011      	movs	r1, r2
 8001d34:	2203      	movs	r2, #3
 8001d36:	400a      	ands	r2, r1
 8001d38:	00d2      	lsls	r2, r2, #3
 8001d3a:	21ff      	movs	r1, #255	; 0xff
 8001d3c:	4091      	lsls	r1, r2
 8001d3e:	000a      	movs	r2, r1
 8001d40:	43d2      	mvns	r2, r2
 8001d42:	401a      	ands	r2, r3
 8001d44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	019b      	lsls	r3, r3, #6
 8001d4a:	22ff      	movs	r2, #255	; 0xff
 8001d4c:	401a      	ands	r2, r3
 8001d4e:	1dfb      	adds	r3, r7, #7
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	0018      	movs	r0, r3
 8001d54:	2303      	movs	r3, #3
 8001d56:	4003      	ands	r3, r0
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d5c:	481f      	ldr	r0, [pc, #124]	; (8001ddc <__NVIC_SetPriority+0xd4>)
 8001d5e:	1dfb      	adds	r3, r7, #7
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	b25b      	sxtb	r3, r3
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	430a      	orrs	r2, r1
 8001d68:	33c0      	adds	r3, #192	; 0xc0
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d6e:	e031      	b.n	8001dd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d70:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <__NVIC_SetPriority+0xd8>)
 8001d72:	1dfb      	adds	r3, r7, #7
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	0019      	movs	r1, r3
 8001d78:	230f      	movs	r3, #15
 8001d7a:	400b      	ands	r3, r1
 8001d7c:	3b08      	subs	r3, #8
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	3306      	adds	r3, #6
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	18d3      	adds	r3, r2, r3
 8001d86:	3304      	adds	r3, #4
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	1dfa      	adds	r2, r7, #7
 8001d8c:	7812      	ldrb	r2, [r2, #0]
 8001d8e:	0011      	movs	r1, r2
 8001d90:	2203      	movs	r2, #3
 8001d92:	400a      	ands	r2, r1
 8001d94:	00d2      	lsls	r2, r2, #3
 8001d96:	21ff      	movs	r1, #255	; 0xff
 8001d98:	4091      	lsls	r1, r2
 8001d9a:	000a      	movs	r2, r1
 8001d9c:	43d2      	mvns	r2, r2
 8001d9e:	401a      	ands	r2, r3
 8001da0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	019b      	lsls	r3, r3, #6
 8001da6:	22ff      	movs	r2, #255	; 0xff
 8001da8:	401a      	ands	r2, r3
 8001daa:	1dfb      	adds	r3, r7, #7
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	0018      	movs	r0, r3
 8001db0:	2303      	movs	r3, #3
 8001db2:	4003      	ands	r3, r0
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001db8:	4809      	ldr	r0, [pc, #36]	; (8001de0 <__NVIC_SetPriority+0xd8>)
 8001dba:	1dfb      	adds	r3, r7, #7
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	001c      	movs	r4, r3
 8001dc0:	230f      	movs	r3, #15
 8001dc2:	4023      	ands	r3, r4
 8001dc4:	3b08      	subs	r3, #8
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	3306      	adds	r3, #6
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	18c3      	adds	r3, r0, r3
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	601a      	str	r2, [r3, #0]
}
 8001dd4:	46c0      	nop			; (mov r8, r8)
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b003      	add	sp, #12
 8001dda:	bd90      	pop	{r4, r7, pc}
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	1e5a      	subs	r2, r3, #1
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	045b      	lsls	r3, r3, #17
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d301      	bcc.n	8001dfc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e010      	b.n	8001e1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <SysTick_Config+0x44>)
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	3a01      	subs	r2, #1
 8001e02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e04:	2301      	movs	r3, #1
 8001e06:	425b      	negs	r3, r3
 8001e08:	2103      	movs	r1, #3
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f7ff ff7c 	bl	8001d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <SysTick_Config+0x44>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <SysTick_Config+0x44>)
 8001e18:	2207      	movs	r2, #7
 8001e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	0018      	movs	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b002      	add	sp, #8
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	e000e010 	.word	0xe000e010

08001e2c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	210f      	movs	r1, #15
 8001e38:	187b      	adds	r3, r7, r1
 8001e3a:	1c02      	adds	r2, r0, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	b25b      	sxtb	r3, r3
 8001e46:	0011      	movs	r1, r2
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7ff ff5d 	bl	8001d08 <__NVIC_SetPriority>
}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	46bd      	mov	sp, r7
 8001e52:	b004      	add	sp, #16
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	0002      	movs	r2, r0
 8001e5e:	1dfb      	adds	r3, r7, #7
 8001e60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e62:	1dfb      	adds	r3, r7, #7
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	b25b      	sxtb	r3, r3
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f7ff ff33 	bl	8001cd4 <__NVIC_EnableIRQ>
}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b002      	add	sp, #8
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7ff ffaf 	bl	8001de4 <SysTick_Config>
 8001e86:	0003      	movs	r3, r0
}
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b002      	add	sp, #8
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9e:	e147      	b.n	8002130 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4091      	lsls	r1, r2
 8001eaa:	000a      	movs	r2, r1
 8001eac:	4013      	ands	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d100      	bne.n	8001eb8 <HAL_GPIO_Init+0x28>
 8001eb6:	e138      	b.n	800212a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d005      	beq.n	8001ed0 <HAL_GPIO_Init+0x40>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2203      	movs	r2, #3
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d130      	bne.n	8001f32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	2203      	movs	r2, #3
 8001edc:	409a      	lsls	r2, r3
 8001ede:	0013      	movs	r3, r2
 8001ee0:	43da      	mvns	r2, r3
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	0013      	movs	r3, r2
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f06:	2201      	movs	r2, #1
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	0013      	movs	r3, r2
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	401a      	ands	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	409a      	lsls	r2, r3
 8001f24:	0013      	movs	r3, r2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2203      	movs	r2, #3
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d017      	beq.n	8001f6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	0013      	movs	r3, r2
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	0013      	movs	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2203      	movs	r2, #3
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d123      	bne.n	8001fc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	08da      	lsrs	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3208      	adds	r2, #8
 8001f82:	0092      	lsls	r2, r2, #2
 8001f84:	58d3      	ldr	r3, [r2, r3]
 8001f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2207      	movs	r2, #7
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	220f      	movs	r2, #15
 8001f92:	409a      	lsls	r2, r3
 8001f94:	0013      	movs	r3, r2
 8001f96:	43da      	mvns	r2, r3
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2107      	movs	r1, #7
 8001fa6:	400b      	ands	r3, r1
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	409a      	lsls	r2, r3
 8001fac:	0013      	movs	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	08da      	lsrs	r2, r3, #3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3208      	adds	r2, #8
 8001fbc:	0092      	lsls	r2, r2, #2
 8001fbe:	6939      	ldr	r1, [r7, #16]
 8001fc0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	2203      	movs	r2, #3
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	0013      	movs	r3, r2
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2203      	movs	r2, #3
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	0013      	movs	r3, r2
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	23c0      	movs	r3, #192	; 0xc0
 8001ffc:	029b      	lsls	r3, r3, #10
 8001ffe:	4013      	ands	r3, r2
 8002000:	d100      	bne.n	8002004 <HAL_GPIO_Init+0x174>
 8002002:	e092      	b.n	800212a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002004:	4a50      	ldr	r2, [pc, #320]	; (8002148 <HAL_GPIO_Init+0x2b8>)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3318      	adds	r3, #24
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	589b      	ldr	r3, [r3, r2]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2203      	movs	r2, #3
 8002016:	4013      	ands	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	220f      	movs	r2, #15
 800201c:	409a      	lsls	r2, r3
 800201e:	0013      	movs	r3, r2
 8002020:	43da      	mvns	r2, r3
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	23a0      	movs	r3, #160	; 0xa0
 800202c:	05db      	lsls	r3, r3, #23
 800202e:	429a      	cmp	r2, r3
 8002030:	d013      	beq.n	800205a <HAL_GPIO_Init+0x1ca>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a45      	ldr	r2, [pc, #276]	; (800214c <HAL_GPIO_Init+0x2bc>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00d      	beq.n	8002056 <HAL_GPIO_Init+0x1c6>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a44      	ldr	r2, [pc, #272]	; (8002150 <HAL_GPIO_Init+0x2c0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <HAL_GPIO_Init+0x1c2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a43      	ldr	r2, [pc, #268]	; (8002154 <HAL_GPIO_Init+0x2c4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_GPIO_Init+0x1be>
 800204a:	2303      	movs	r3, #3
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x1cc>
 800204e:	2305      	movs	r3, #5
 8002050:	e004      	b.n	800205c <HAL_GPIO_Init+0x1cc>
 8002052:	2302      	movs	r3, #2
 8002054:	e002      	b.n	800205c <HAL_GPIO_Init+0x1cc>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_GPIO_Init+0x1cc>
 800205a:	2300      	movs	r3, #0
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	2103      	movs	r1, #3
 8002060:	400a      	ands	r2, r1
 8002062:	00d2      	lsls	r2, r2, #3
 8002064:	4093      	lsls	r3, r2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800206c:	4936      	ldr	r1, [pc, #216]	; (8002148 <HAL_GPIO_Init+0x2b8>)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3318      	adds	r3, #24
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800207a:	4b33      	ldr	r3, [pc, #204]	; (8002148 <HAL_GPIO_Init+0x2b8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	43da      	mvns	r2, r3
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	035b      	lsls	r3, r3, #13
 8002092:	4013      	ands	r3, r2
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800209e:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <HAL_GPIO_Init+0x2b8>)
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80020a4:	4b28      	ldr	r3, [pc, #160]	; (8002148 <HAL_GPIO_Init+0x2b8>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	43da      	mvns	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	039b      	lsls	r3, r3, #14
 80020bc:	4013      	ands	r3, r2
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <HAL_GPIO_Init+0x2b8>)
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020ce:	4a1e      	ldr	r2, [pc, #120]	; (8002148 <HAL_GPIO_Init+0x2b8>)
 80020d0:	2384      	movs	r3, #132	; 0x84
 80020d2:	58d3      	ldr	r3, [r2, r3]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	43da      	mvns	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	029b      	lsls	r3, r3, #10
 80020e8:	4013      	ands	r3, r2
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020f4:	4914      	ldr	r1, [pc, #80]	; (8002148 <HAL_GPIO_Init+0x2b8>)
 80020f6:	2284      	movs	r2, #132	; 0x84
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80020fc:	4a12      	ldr	r2, [pc, #72]	; (8002148 <HAL_GPIO_Init+0x2b8>)
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	58d3      	ldr	r3, [r2, r3]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	43da      	mvns	r2, r3
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	025b      	lsls	r3, r3, #9
 8002116:	4013      	ands	r3, r2
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002122:	4909      	ldr	r1, [pc, #36]	; (8002148 <HAL_GPIO_Init+0x2b8>)
 8002124:	2280      	movs	r2, #128	; 0x80
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3301      	adds	r3, #1
 800212e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	40da      	lsrs	r2, r3
 8002138:	1e13      	subs	r3, r2, #0
 800213a:	d000      	beq.n	800213e <HAL_GPIO_Init+0x2ae>
 800213c:	e6b0      	b.n	8001ea0 <HAL_GPIO_Init+0x10>
  }
}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b006      	add	sp, #24
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40021800 	.word	0x40021800
 800214c:	50000400 	.word	0x50000400
 8002150:	50000800 	.word	0x50000800
 8002154:	50000c00 	.word	0x50000c00

08002158 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	000a      	movs	r2, r1
 8002162:	1cbb      	adds	r3, r7, #2
 8002164:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	1cba      	adds	r2, r7, #2
 800216c:	8812      	ldrh	r2, [r2, #0]
 800216e:	4013      	ands	r3, r2
 8002170:	d004      	beq.n	800217c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002172:	230f      	movs	r3, #15
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	e003      	b.n	8002184 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800217c:	230f      	movs	r3, #15
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002184:	230f      	movs	r3, #15
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	781b      	ldrb	r3, [r3, #0]
}
 800218a:	0018      	movs	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	b004      	add	sp, #16
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	0008      	movs	r0, r1
 800219c:	0011      	movs	r1, r2
 800219e:	1cbb      	adds	r3, r7, #2
 80021a0:	1c02      	adds	r2, r0, #0
 80021a2:	801a      	strh	r2, [r3, #0]
 80021a4:	1c7b      	adds	r3, r7, #1
 80021a6:	1c0a      	adds	r2, r1, #0
 80021a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021aa:	1c7b      	adds	r3, r7, #1
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021b2:	1cbb      	adds	r3, r7, #2
 80021b4:	881a      	ldrh	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021ba:	e003      	b.n	80021c4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021bc:	1cbb      	adds	r3, r7, #2
 80021be:	881a      	ldrh	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b002      	add	sp, #8
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	0002      	movs	r2, r0
 80021d4:	1dbb      	adds	r3, r7, #6
 80021d6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80021d8:	4b10      	ldr	r3, [pc, #64]	; (800221c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	1dba      	adds	r2, r7, #6
 80021de:	8812      	ldrh	r2, [r2, #0]
 80021e0:	4013      	ands	r3, r2
 80021e2:	d008      	beq.n	80021f6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021e6:	1dba      	adds	r2, r7, #6
 80021e8:	8812      	ldrh	r2, [r2, #0]
 80021ea:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80021ec:	1dbb      	adds	r3, r7, #6
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	0018      	movs	r0, r3
 80021f2:	f000 f815 	bl	8002220 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	1dba      	adds	r2, r7, #6
 80021fc:	8812      	ldrh	r2, [r2, #0]
 80021fe:	4013      	ands	r3, r2
 8002200:	d008      	beq.n	8002214 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002204:	1dba      	adds	r2, r7, #6
 8002206:	8812      	ldrh	r2, [r2, #0]
 8002208:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800220a:	1dbb      	adds	r3, r7, #6
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	0018      	movs	r0, r3
 8002210:	f7fe fd94 	bl	8000d3c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002214:	46c0      	nop			; (mov r8, r8)
 8002216:	46bd      	mov	sp, r7
 8002218:	b002      	add	sp, #8
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021800 	.word	0x40021800

08002220 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	0002      	movs	r2, r0
 8002228:	1dbb      	adds	r3, r7, #6
 800222a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a19      	ldr	r2, [pc, #100]	; (80022a8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002242:	4013      	ands	r3, r2
 8002244:	0019      	movs	r1, r3
 8002246:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	430a      	orrs	r2, r1
 800224c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	429a      	cmp	r2, r3
 8002256:	d11f      	bne.n	8002298 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002258:	4b14      	ldr	r3, [pc, #80]	; (80022ac <HAL_PWREx_ControlVoltageScaling+0x78>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	0013      	movs	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	189b      	adds	r3, r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4912      	ldr	r1, [pc, #72]	; (80022b0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002266:	0018      	movs	r0, r3
 8002268:	f7fd ff56 	bl	8000118 <__udivsi3>
 800226c:	0003      	movs	r3, r0
 800226e:	3301      	adds	r3, #1
 8002270:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002272:	e008      	b.n	8002286 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	3b01      	subs	r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	e001      	b.n	8002286 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e009      	b.n	800229a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002286:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	401a      	ands	r2, r3
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	429a      	cmp	r2, r3
 8002296:	d0ed      	beq.n	8002274 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	0018      	movs	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	b004      	add	sp, #16
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	40007000 	.word	0x40007000
 80022a8:	fffff9ff 	.word	0xfffff9ff
 80022ac:	20000038 	.word	0x20000038
 80022b0:	000f4240 	.word	0x000f4240

080022b4 <HAL_PWREx_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Check PWR exti Rising flag */
  if (__HAL_PWR_PVD_EXTI_GET_RISING_FLAG() != 0x0U)
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	025b      	lsls	r3, r3, #9
 80022c0:	4013      	ands	r3, r2
 80022c2:	d005      	beq.n	80022d0 <HAL_PWREx_PVD_IRQHandler+0x1c>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_RISING_FLAG();
 80022c4:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80022c6:	2280      	movs	r2, #128	; 0x80
 80022c8:	0252      	lsls	r2, r2, #9
 80022ca:	60da      	str	r2, [r3, #12]

    /* PWR PVD interrupt rising user callback */
    HAL_PWREx_PVD_Rising_Callback();
 80022cc:	f000 f812 	bl	80022f4 <HAL_PWREx_PVD_Rising_Callback>
  }

  /* Check PWR exti fallling flag */
  if (__HAL_PWR_PVD_EXTI_GET_FALLING_FLAG() != 0x0U)
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	025b      	lsls	r3, r3, #9
 80022d8:	4013      	ands	r3, r2
 80022da:	d005      	beq.n	80022e8 <HAL_PWREx_PVD_IRQHandler+0x34>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FALLING_FLAG();
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80022de:	2280      	movs	r2, #128	; 0x80
 80022e0:	0252      	lsls	r2, r2, #9
 80022e2:	611a      	str	r2, [r3, #16]

    /* PWR PVD interrupt falling user callback */
    HAL_PWREx_PVD_Falling_Callback();
 80022e4:	f000 f80b 	bl	80022fe <HAL_PWREx_PVD_Falling_Callback>
  }
}
 80022e8:	46c0      	nop			; (mov r8, r8)
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	40021800 	.word	0x40021800

080022f4 <HAL_PWREx_PVD_Rising_Callback>:
/**
  * @brief  PWR PVD interrupt rising callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Rising_Callback(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Rising_Callback can be implemented in the user file
  */
}
 80022f8:	46c0      	nop			; (mov r8, r8)
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_PWREx_PVD_Falling_Callback>:
/**
  * @brief  PWR PVD interrupt Falling callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Falling_Callback(void)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Falling_Callback can be implemented in the user file
  */
}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <LL_RCC_GetAPB1Prescaler+0x14>)
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	23e0      	movs	r3, #224	; 0xe0
 8002312:	01db      	lsls	r3, r3, #7
 8002314:	4013      	ands	r3, r2
}
 8002316:	0018      	movs	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000

08002320 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e2fe      	b.n	8002930 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2201      	movs	r2, #1
 8002338:	4013      	ands	r3, r2
 800233a:	d100      	bne.n	800233e <HAL_RCC_OscConfig+0x1e>
 800233c:	e07c      	b.n	8002438 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800233e:	4bc3      	ldr	r3, [pc, #780]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2238      	movs	r2, #56	; 0x38
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002348:	4bc0      	ldr	r3, [pc, #768]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2203      	movs	r2, #3
 800234e:	4013      	ands	r3, r2
 8002350:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2b10      	cmp	r3, #16
 8002356:	d102      	bne.n	800235e <HAL_RCC_OscConfig+0x3e>
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2b03      	cmp	r3, #3
 800235c:	d002      	beq.n	8002364 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	2b08      	cmp	r3, #8
 8002362:	d10b      	bne.n	800237c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002364:	4bb9      	ldr	r3, [pc, #740]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	029b      	lsls	r3, r3, #10
 800236c:	4013      	ands	r3, r2
 800236e:	d062      	beq.n	8002436 <HAL_RCC_OscConfig+0x116>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d15e      	bne.n	8002436 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e2d9      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	025b      	lsls	r3, r3, #9
 8002384:	429a      	cmp	r2, r3
 8002386:	d107      	bne.n	8002398 <HAL_RCC_OscConfig+0x78>
 8002388:	4bb0      	ldr	r3, [pc, #704]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4baf      	ldr	r3, [pc, #700]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 800238e:	2180      	movs	r1, #128	; 0x80
 8002390:	0249      	lsls	r1, r1, #9
 8002392:	430a      	orrs	r2, r1
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	e020      	b.n	80023da <HAL_RCC_OscConfig+0xba>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	23a0      	movs	r3, #160	; 0xa0
 800239e:	02db      	lsls	r3, r3, #11
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d10e      	bne.n	80023c2 <HAL_RCC_OscConfig+0xa2>
 80023a4:	4ba9      	ldr	r3, [pc, #676]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4ba8      	ldr	r3, [pc, #672]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	02c9      	lsls	r1, r1, #11
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	4ba6      	ldr	r3, [pc, #664]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4ba5      	ldr	r3, [pc, #660]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80023b8:	2180      	movs	r1, #128	; 0x80
 80023ba:	0249      	lsls	r1, r1, #9
 80023bc:	430a      	orrs	r2, r1
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e00b      	b.n	80023da <HAL_RCC_OscConfig+0xba>
 80023c2:	4ba2      	ldr	r3, [pc, #648]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	4ba1      	ldr	r3, [pc, #644]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80023c8:	49a1      	ldr	r1, [pc, #644]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 80023ca:	400a      	ands	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	4b9f      	ldr	r3, [pc, #636]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	4b9e      	ldr	r3, [pc, #632]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80023d4:	499f      	ldr	r1, [pc, #636]	; (8002654 <HAL_RCC_OscConfig+0x334>)
 80023d6:	400a      	ands	r2, r1
 80023d8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d014      	beq.n	800240c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e2:	f7ff fc6d 	bl	8001cc0 <HAL_GetTick>
 80023e6:	0003      	movs	r3, r0
 80023e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ec:	f7ff fc68 	bl	8001cc0 <HAL_GetTick>
 80023f0:	0002      	movs	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	; 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e298      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fe:	4b93      	ldr	r3, [pc, #588]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	029b      	lsls	r3, r3, #10
 8002406:	4013      	ands	r3, r2
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0xcc>
 800240a:	e015      	b.n	8002438 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7ff fc58 	bl	8001cc0 <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002416:	f7ff fc53 	bl	8001cc0 <HAL_GetTick>
 800241a:	0002      	movs	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b64      	cmp	r3, #100	; 0x64
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e283      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002428:	4b88      	ldr	r3, [pc, #544]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	029b      	lsls	r3, r3, #10
 8002430:	4013      	ands	r3, r2
 8002432:	d1f0      	bne.n	8002416 <HAL_RCC_OscConfig+0xf6>
 8002434:	e000      	b.n	8002438 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002436:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2202      	movs	r2, #2
 800243e:	4013      	ands	r3, r2
 8002440:	d100      	bne.n	8002444 <HAL_RCC_OscConfig+0x124>
 8002442:	e099      	b.n	8002578 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002444:	4b81      	ldr	r3, [pc, #516]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2238      	movs	r2, #56	; 0x38
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800244e:	4b7f      	ldr	r3, [pc, #508]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2203      	movs	r2, #3
 8002454:	4013      	ands	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2b10      	cmp	r3, #16
 800245c:	d102      	bne.n	8002464 <HAL_RCC_OscConfig+0x144>
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d002      	beq.n	800246a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d135      	bne.n	80024d6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800246a:	4b78      	ldr	r3, [pc, #480]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4013      	ands	r3, r2
 8002474:	d005      	beq.n	8002482 <HAL_RCC_OscConfig+0x162>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e256      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002482:	4b72      	ldr	r3, [pc, #456]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4a74      	ldr	r2, [pc, #464]	; (8002658 <HAL_RCC_OscConfig+0x338>)
 8002488:	4013      	ands	r3, r2
 800248a:	0019      	movs	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	021a      	lsls	r2, r3, #8
 8002492:	4b6e      	ldr	r3, [pc, #440]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 8002494:	430a      	orrs	r2, r1
 8002496:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d112      	bne.n	80024c4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800249e:	4b6b      	ldr	r3, [pc, #428]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a6e      	ldr	r2, [pc, #440]	; (800265c <HAL_RCC_OscConfig+0x33c>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	4b67      	ldr	r3, [pc, #412]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80024ae:	430a      	orrs	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80024b2:	4b66      	ldr	r3, [pc, #408]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0adb      	lsrs	r3, r3, #11
 80024b8:	2207      	movs	r2, #7
 80024ba:	4013      	ands	r3, r2
 80024bc:	4a68      	ldr	r2, [pc, #416]	; (8002660 <HAL_RCC_OscConfig+0x340>)
 80024be:	40da      	lsrs	r2, r3
 80024c0:	4b68      	ldr	r3, [pc, #416]	; (8002664 <HAL_RCC_OscConfig+0x344>)
 80024c2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024c4:	4b68      	ldr	r3, [pc, #416]	; (8002668 <HAL_RCC_OscConfig+0x348>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7ff fb9d 	bl	8001c08 <HAL_InitTick>
 80024ce:	1e03      	subs	r3, r0, #0
 80024d0:	d051      	beq.n	8002576 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e22c      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d030      	beq.n	8002540 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024de:	4b5b      	ldr	r3, [pc, #364]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a5e      	ldr	r2, [pc, #376]	; (800265c <HAL_RCC_OscConfig+0x33c>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	0019      	movs	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	4b57      	ldr	r3, [pc, #348]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80024ee:	430a      	orrs	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80024f2:	4b56      	ldr	r3, [pc, #344]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4b55      	ldr	r3, [pc, #340]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80024f8:	2180      	movs	r1, #128	; 0x80
 80024fa:	0049      	lsls	r1, r1, #1
 80024fc:	430a      	orrs	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7ff fbde 	bl	8001cc0 <HAL_GetTick>
 8002504:	0003      	movs	r3, r0
 8002506:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800250a:	f7ff fbd9 	bl	8001cc0 <HAL_GetTick>
 800250e:	0002      	movs	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e209      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800251c:	4b4b      	ldr	r3, [pc, #300]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4013      	ands	r3, r2
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002528:	4b48      	ldr	r3, [pc, #288]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a4a      	ldr	r2, [pc, #296]	; (8002658 <HAL_RCC_OscConfig+0x338>)
 800252e:	4013      	ands	r3, r2
 8002530:	0019      	movs	r1, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	021a      	lsls	r2, r3, #8
 8002538:	4b44      	ldr	r3, [pc, #272]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 800253a:	430a      	orrs	r2, r1
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	e01b      	b.n	8002578 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002540:	4b42      	ldr	r3, [pc, #264]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b41      	ldr	r3, [pc, #260]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 8002546:	4949      	ldr	r1, [pc, #292]	; (800266c <HAL_RCC_OscConfig+0x34c>)
 8002548:	400a      	ands	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7ff fbb8 	bl	8001cc0 <HAL_GetTick>
 8002550:	0003      	movs	r3, r0
 8002552:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002556:	f7ff fbb3 	bl	8001cc0 <HAL_GetTick>
 800255a:	0002      	movs	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e1e3      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002568:	4b38      	ldr	r3, [pc, #224]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4013      	ands	r3, r2
 8002572:	d1f0      	bne.n	8002556 <HAL_RCC_OscConfig+0x236>
 8002574:	e000      	b.n	8002578 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002576:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2208      	movs	r2, #8
 800257e:	4013      	ands	r3, r2
 8002580:	d047      	beq.n	8002612 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002582:	4b32      	ldr	r3, [pc, #200]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2238      	movs	r2, #56	; 0x38
 8002588:	4013      	ands	r3, r2
 800258a:	2b18      	cmp	r3, #24
 800258c:	d10a      	bne.n	80025a4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800258e:	4b2f      	ldr	r3, [pc, #188]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 8002590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002592:	2202      	movs	r2, #2
 8002594:	4013      	ands	r3, r2
 8002596:	d03c      	beq.n	8002612 <HAL_RCC_OscConfig+0x2f2>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d138      	bne.n	8002612 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e1c5      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d019      	beq.n	80025e0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80025ac:	4b27      	ldr	r3, [pc, #156]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80025ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025b0:	4b26      	ldr	r3, [pc, #152]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80025b2:	2101      	movs	r1, #1
 80025b4:	430a      	orrs	r2, r1
 80025b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7ff fb82 	bl	8001cc0 <HAL_GetTick>
 80025bc:	0003      	movs	r3, r0
 80025be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c2:	f7ff fb7d 	bl	8001cc0 <HAL_GetTick>
 80025c6:	0002      	movs	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e1ad      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80025d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d8:	2202      	movs	r2, #2
 80025da:	4013      	ands	r3, r2
 80025dc:	d0f1      	beq.n	80025c2 <HAL_RCC_OscConfig+0x2a2>
 80025de:	e018      	b.n	8002612 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80025e0:	4b1a      	ldr	r3, [pc, #104]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80025e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80025e6:	2101      	movs	r1, #1
 80025e8:	438a      	bics	r2, r1
 80025ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7ff fb68 	bl	8001cc0 <HAL_GetTick>
 80025f0:	0003      	movs	r3, r0
 80025f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f6:	f7ff fb63 	bl	8001cc0 <HAL_GetTick>
 80025fa:	0002      	movs	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e193      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002608:	4b10      	ldr	r3, [pc, #64]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 800260a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260c:	2202      	movs	r2, #2
 800260e:	4013      	ands	r3, r2
 8002610:	d1f1      	bne.n	80025f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2204      	movs	r2, #4
 8002618:	4013      	ands	r3, r2
 800261a:	d100      	bne.n	800261e <HAL_RCC_OscConfig+0x2fe>
 800261c:	e0c6      	b.n	80027ac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261e:	231f      	movs	r3, #31
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2238      	movs	r2, #56	; 0x38
 800262c:	4013      	ands	r3, r2
 800262e:	2b20      	cmp	r3, #32
 8002630:	d11e      	bne.n	8002670 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 8002634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002636:	2202      	movs	r2, #2
 8002638:	4013      	ands	r3, r2
 800263a:	d100      	bne.n	800263e <HAL_RCC_OscConfig+0x31e>
 800263c:	e0b6      	b.n	80027ac <HAL_RCC_OscConfig+0x48c>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d000      	beq.n	8002648 <HAL_RCC_OscConfig+0x328>
 8002646:	e0b1      	b.n	80027ac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e171      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
 800264c:	40021000 	.word	0x40021000
 8002650:	fffeffff 	.word	0xfffeffff
 8002654:	fffbffff 	.word	0xfffbffff
 8002658:	ffff80ff 	.word	0xffff80ff
 800265c:	ffffc7ff 	.word	0xffffc7ff
 8002660:	00f42400 	.word	0x00f42400
 8002664:	20000038 	.word	0x20000038
 8002668:	2000003c 	.word	0x2000003c
 800266c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002670:	4bb1      	ldr	r3, [pc, #708]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 8002672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	055b      	lsls	r3, r3, #21
 8002678:	4013      	ands	r3, r2
 800267a:	d101      	bne.n	8002680 <HAL_RCC_OscConfig+0x360>
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x362>
 8002680:	2300      	movs	r3, #0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d011      	beq.n	80026aa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	4bac      	ldr	r3, [pc, #688]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 8002688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800268a:	4bab      	ldr	r3, [pc, #684]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 800268c:	2180      	movs	r1, #128	; 0x80
 800268e:	0549      	lsls	r1, r1, #21
 8002690:	430a      	orrs	r2, r1
 8002692:	63da      	str	r2, [r3, #60]	; 0x3c
 8002694:	4ba8      	ldr	r3, [pc, #672]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 8002696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	055b      	lsls	r3, r3, #21
 800269c:	4013      	ands	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80026a2:	231f      	movs	r3, #31
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026aa:	4ba4      	ldr	r3, [pc, #656]	; (800293c <HAL_RCC_OscConfig+0x61c>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4013      	ands	r3, r2
 80026b4:	d11a      	bne.n	80026ec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026b6:	4ba1      	ldr	r3, [pc, #644]	; (800293c <HAL_RCC_OscConfig+0x61c>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4ba0      	ldr	r3, [pc, #640]	; (800293c <HAL_RCC_OscConfig+0x61c>)
 80026bc:	2180      	movs	r1, #128	; 0x80
 80026be:	0049      	lsls	r1, r1, #1
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80026c4:	f7ff fafc 	bl	8001cc0 <HAL_GetTick>
 80026c8:	0003      	movs	r3, r0
 80026ca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ce:	f7ff faf7 	bl	8001cc0 <HAL_GetTick>
 80026d2:	0002      	movs	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e127      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e0:	4b96      	ldr	r3, [pc, #600]	; (800293c <HAL_RCC_OscConfig+0x61c>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4013      	ands	r3, r2
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x3e2>
 80026f4:	4b90      	ldr	r3, [pc, #576]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 80026f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026f8:	4b8f      	ldr	r3, [pc, #572]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 80026fa:	2101      	movs	r1, #1
 80026fc:	430a      	orrs	r2, r1
 80026fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002700:	e01c      	b.n	800273c <HAL_RCC_OscConfig+0x41c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b05      	cmp	r3, #5
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x404>
 800270a:	4b8b      	ldr	r3, [pc, #556]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 800270c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800270e:	4b8a      	ldr	r3, [pc, #552]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 8002710:	2104      	movs	r1, #4
 8002712:	430a      	orrs	r2, r1
 8002714:	65da      	str	r2, [r3, #92]	; 0x5c
 8002716:	4b88      	ldr	r3, [pc, #544]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 8002718:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800271a:	4b87      	ldr	r3, [pc, #540]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 800271c:	2101      	movs	r1, #1
 800271e:	430a      	orrs	r2, r1
 8002720:	65da      	str	r2, [r3, #92]	; 0x5c
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0x41c>
 8002724:	4b84      	ldr	r3, [pc, #528]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 8002726:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002728:	4b83      	ldr	r3, [pc, #524]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 800272a:	2101      	movs	r1, #1
 800272c:	438a      	bics	r2, r1
 800272e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002730:	4b81      	ldr	r3, [pc, #516]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 8002732:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002734:	4b80      	ldr	r3, [pc, #512]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 8002736:	2104      	movs	r1, #4
 8002738:	438a      	bics	r2, r1
 800273a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d014      	beq.n	800276e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7ff fabc 	bl	8001cc0 <HAL_GetTick>
 8002748:	0003      	movs	r3, r0
 800274a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274c:	e009      	b.n	8002762 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7ff fab7 	bl	8001cc0 <HAL_GetTick>
 8002752:	0002      	movs	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	4a79      	ldr	r2, [pc, #484]	; (8002940 <HAL_RCC_OscConfig+0x620>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e0e6      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002762:	4b75      	ldr	r3, [pc, #468]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	2202      	movs	r2, #2
 8002768:	4013      	ands	r3, r2
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x42e>
 800276c:	e013      	b.n	8002796 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7ff faa7 	bl	8001cc0 <HAL_GetTick>
 8002772:	0003      	movs	r3, r0
 8002774:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002776:	e009      	b.n	800278c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002778:	f7ff faa2 	bl	8001cc0 <HAL_GetTick>
 800277c:	0002      	movs	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	4a6f      	ldr	r2, [pc, #444]	; (8002940 <HAL_RCC_OscConfig+0x620>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e0d1      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800278c:	4b6a      	ldr	r3, [pc, #424]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 800278e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002790:	2202      	movs	r2, #2
 8002792:	4013      	ands	r3, r2
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002796:	231f      	movs	r3, #31
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80027a0:	4b65      	ldr	r3, [pc, #404]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 80027a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027a4:	4b64      	ldr	r3, [pc, #400]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 80027a6:	4967      	ldr	r1, [pc, #412]	; (8002944 <HAL_RCC_OscConfig+0x624>)
 80027a8:	400a      	ands	r2, r1
 80027aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d100      	bne.n	80027b6 <HAL_RCC_OscConfig+0x496>
 80027b4:	e0bb      	b.n	800292e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b6:	4b60      	ldr	r3, [pc, #384]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2238      	movs	r2, #56	; 0x38
 80027bc:	4013      	ands	r3, r2
 80027be:	2b10      	cmp	r3, #16
 80027c0:	d100      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4a4>
 80027c2:	e07b      	b.n	80028bc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d156      	bne.n	800287a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027cc:	4b5a      	ldr	r3, [pc, #360]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b59      	ldr	r3, [pc, #356]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 80027d2:	495d      	ldr	r1, [pc, #372]	; (8002948 <HAL_RCC_OscConfig+0x628>)
 80027d4:	400a      	ands	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7ff fa72 	bl	8001cc0 <HAL_GetTick>
 80027dc:	0003      	movs	r3, r0
 80027de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e2:	f7ff fa6d 	bl	8001cc0 <HAL_GetTick>
 80027e6:	0002      	movs	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e09d      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f4:	4b50      	ldr	r3, [pc, #320]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	049b      	lsls	r3, r3, #18
 80027fc:	4013      	ands	r3, r2
 80027fe:	d1f0      	bne.n	80027e2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002800:	4b4d      	ldr	r3, [pc, #308]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4a51      	ldr	r2, [pc, #324]	; (800294c <HAL_RCC_OscConfig+0x62c>)
 8002806:	4013      	ands	r3, r2
 8002808:	0019      	movs	r1, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1a      	ldr	r2, [r3, #32]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282c:	431a      	orrs	r2, r3
 800282e:	4b42      	ldr	r3, [pc, #264]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 8002830:	430a      	orrs	r2, r1
 8002832:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002834:	4b40      	ldr	r3, [pc, #256]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b3f      	ldr	r3, [pc, #252]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 800283a:	2180      	movs	r1, #128	; 0x80
 800283c:	0449      	lsls	r1, r1, #17
 800283e:	430a      	orrs	r2, r1
 8002840:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002842:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	4b3c      	ldr	r3, [pc, #240]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 8002848:	2180      	movs	r1, #128	; 0x80
 800284a:	0549      	lsls	r1, r1, #21
 800284c:	430a      	orrs	r2, r1
 800284e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7ff fa36 	bl	8001cc0 <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285a:	f7ff fa31 	bl	8001cc0 <HAL_GetTick>
 800285e:	0002      	movs	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e061      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286c:	4b32      	ldr	r3, [pc, #200]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	049b      	lsls	r3, r3, #18
 8002874:	4013      	ands	r3, r2
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x53a>
 8002878:	e059      	b.n	800292e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287a:	4b2f      	ldr	r3, [pc, #188]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 8002880:	4931      	ldr	r1, [pc, #196]	; (8002948 <HAL_RCC_OscConfig+0x628>)
 8002882:	400a      	ands	r2, r1
 8002884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7ff fa1b 	bl	8001cc0 <HAL_GetTick>
 800288a:	0003      	movs	r3, r0
 800288c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002890:	f7ff fa16 	bl	8001cc0 <HAL_GetTick>
 8002894:	0002      	movs	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e046      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a2:	4b25      	ldr	r3, [pc, #148]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	049b      	lsls	r3, r3, #18
 80028aa:	4013      	ands	r3, r2
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80028ae:	4b22      	ldr	r3, [pc, #136]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 80028b4:	4926      	ldr	r1, [pc, #152]	; (8002950 <HAL_RCC_OscConfig+0x630>)
 80028b6:	400a      	ands	r2, r1
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	e038      	b.n	800292e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e033      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <HAL_RCC_OscConfig+0x618>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2203      	movs	r2, #3
 80028d2:	401a      	ands	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d126      	bne.n	800292a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2270      	movs	r2, #112	; 0x70
 80028e0:	401a      	ands	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d11f      	bne.n	800292a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	23fe      	movs	r3, #254	; 0xfe
 80028ee:	01db      	lsls	r3, r3, #7
 80028f0:	401a      	ands	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d116      	bne.n	800292a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	23f8      	movs	r3, #248	; 0xf8
 8002900:	039b      	lsls	r3, r3, #14
 8002902:	401a      	ands	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d10e      	bne.n	800292a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	23e0      	movs	r3, #224	; 0xe0
 8002910:	051b      	lsls	r3, r3, #20
 8002912:	401a      	ands	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d106      	bne.n	800292a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	0f5b      	lsrs	r3, r3, #29
 8002920:	075a      	lsls	r2, r3, #29
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d001      	beq.n	800292e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b008      	add	sp, #32
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	40007000 	.word	0x40007000
 8002940:	00001388 	.word	0x00001388
 8002944:	efffffff 	.word	0xefffffff
 8002948:	feffffff 	.word	0xfeffffff
 800294c:	11c1808c 	.word	0x11c1808c
 8002950:	eefefffc 	.word	0xeefefffc

08002954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0e9      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002968:	4b76      	ldr	r3, [pc, #472]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2207      	movs	r2, #7
 800296e:	4013      	ands	r3, r2
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d91e      	bls.n	80029b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002976:	4b73      	ldr	r3, [pc, #460]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2207      	movs	r2, #7
 800297c:	4393      	bics	r3, r2
 800297e:	0019      	movs	r1, r3
 8002980:	4b70      	ldr	r3, [pc, #448]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002988:	f7ff f99a 	bl	8001cc0 <HAL_GetTick>
 800298c:	0003      	movs	r3, r0
 800298e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002990:	e009      	b.n	80029a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002992:	f7ff f995 	bl	8001cc0 <HAL_GetTick>
 8002996:	0002      	movs	r2, r0
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	4a6a      	ldr	r2, [pc, #424]	; (8002b48 <HAL_RCC_ClockConfig+0x1f4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e0ca      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029a6:	4b67      	ldr	r3, [pc, #412]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2207      	movs	r2, #7
 80029ac:	4013      	ands	r3, r2
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d1ee      	bne.n	8002992 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2202      	movs	r2, #2
 80029ba:	4013      	ands	r3, r2
 80029bc:	d015      	beq.n	80029ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2204      	movs	r2, #4
 80029c4:	4013      	ands	r3, r2
 80029c6:	d006      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80029c8:	4b60      	ldr	r3, [pc, #384]	; (8002b4c <HAL_RCC_ClockConfig+0x1f8>)
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	4b5f      	ldr	r3, [pc, #380]	; (8002b4c <HAL_RCC_ClockConfig+0x1f8>)
 80029ce:	21e0      	movs	r1, #224	; 0xe0
 80029d0:	01c9      	lsls	r1, r1, #7
 80029d2:	430a      	orrs	r2, r1
 80029d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d6:	4b5d      	ldr	r3, [pc, #372]	; (8002b4c <HAL_RCC_ClockConfig+0x1f8>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	4a5d      	ldr	r2, [pc, #372]	; (8002b50 <HAL_RCC_ClockConfig+0x1fc>)
 80029dc:	4013      	ands	r3, r2
 80029de:	0019      	movs	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	4b59      	ldr	r3, [pc, #356]	; (8002b4c <HAL_RCC_ClockConfig+0x1f8>)
 80029e6:	430a      	orrs	r2, r1
 80029e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2201      	movs	r2, #1
 80029f0:	4013      	ands	r3, r2
 80029f2:	d057      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d107      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029fc:	4b53      	ldr	r3, [pc, #332]	; (8002b4c <HAL_RCC_ClockConfig+0x1f8>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	029b      	lsls	r3, r3, #10
 8002a04:	4013      	ands	r3, r2
 8002a06:	d12b      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e097      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d107      	bne.n	8002a24 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a14:	4b4d      	ldr	r3, [pc, #308]	; (8002b4c <HAL_RCC_ClockConfig+0x1f8>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	049b      	lsls	r3, r3, #18
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d11f      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e08b      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d107      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a2c:	4b47      	ldr	r3, [pc, #284]	; (8002b4c <HAL_RCC_ClockConfig+0x1f8>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4013      	ands	r3, r2
 8002a36:	d113      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e07f      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d106      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a44:	4b41      	ldr	r3, [pc, #260]	; (8002b4c <HAL_RCC_ClockConfig+0x1f8>)
 8002a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a48:	2202      	movs	r2, #2
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d108      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e074      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a52:	4b3e      	ldr	r3, [pc, #248]	; (8002b4c <HAL_RCC_ClockConfig+0x1f8>)
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	2202      	movs	r2, #2
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e06d      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a60:	4b3a      	ldr	r3, [pc, #232]	; (8002b4c <HAL_RCC_ClockConfig+0x1f8>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2207      	movs	r2, #7
 8002a66:	4393      	bics	r3, r2
 8002a68:	0019      	movs	r1, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	4b37      	ldr	r3, [pc, #220]	; (8002b4c <HAL_RCC_ClockConfig+0x1f8>)
 8002a70:	430a      	orrs	r2, r1
 8002a72:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a74:	f7ff f924 	bl	8001cc0 <HAL_GetTick>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7c:	e009      	b.n	8002a92 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7e:	f7ff f91f 	bl	8001cc0 <HAL_GetTick>
 8002a82:	0002      	movs	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	4a2f      	ldr	r2, [pc, #188]	; (8002b48 <HAL_RCC_ClockConfig+0x1f4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e054      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	4b2e      	ldr	r3, [pc, #184]	; (8002b4c <HAL_RCC_ClockConfig+0x1f8>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2238      	movs	r2, #56	; 0x38
 8002a98:	401a      	ands	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1ec      	bne.n	8002a7e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2207      	movs	r2, #7
 8002aaa:	4013      	ands	r3, r2
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d21e      	bcs.n	8002af0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	4393      	bics	r3, r2
 8002aba:	0019      	movs	r1, r3
 8002abc:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ac4:	f7ff f8fc 	bl	8001cc0 <HAL_GetTick>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002acc:	e009      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ace:	f7ff f8f7 	bl	8001cc0 <HAL_GetTick>
 8002ad2:	0002      	movs	r2, r0
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	4a1b      	ldr	r2, [pc, #108]	; (8002b48 <HAL_RCC_ClockConfig+0x1f4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e02c      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ae2:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2207      	movs	r2, #7
 8002ae8:	4013      	ands	r3, r2
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d1ee      	bne.n	8002ace <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2204      	movs	r2, #4
 8002af6:	4013      	ands	r3, r2
 8002af8:	d009      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002afa:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <HAL_RCC_ClockConfig+0x1f8>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	4a15      	ldr	r2, [pc, #84]	; (8002b54 <HAL_RCC_ClockConfig+0x200>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	0019      	movs	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <HAL_RCC_ClockConfig+0x1f8>)
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002b0e:	f000 f829 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8002b12:	0001      	movs	r1, r0
 8002b14:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <HAL_RCC_ClockConfig+0x1f8>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	0a1b      	lsrs	r3, r3, #8
 8002b1a:	220f      	movs	r2, #15
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <HAL_RCC_ClockConfig+0x204>)
 8002b20:	0092      	lsls	r2, r2, #2
 8002b22:	58d3      	ldr	r3, [r2, r3]
 8002b24:	221f      	movs	r2, #31
 8002b26:	4013      	ands	r3, r2
 8002b28:	000a      	movs	r2, r1
 8002b2a:	40da      	lsrs	r2, r3
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_RCC_ClockConfig+0x208>)
 8002b2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCC_ClockConfig+0x20c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7ff f867 	bl	8001c08 <HAL_InitTick>
 8002b3a:	0003      	movs	r3, r0
}
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b004      	add	sp, #16
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40022000 	.word	0x40022000
 8002b48:	00001388 	.word	0x00001388
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	fffff0ff 	.word	0xfffff0ff
 8002b54:	ffff8fff 	.word	0xffff8fff
 8002b58:	08006804 	.word	0x08006804
 8002b5c:	20000038 	.word	0x20000038
 8002b60:	2000003c 	.word	0x2000003c

08002b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b6a:	4b3c      	ldr	r3, [pc, #240]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2238      	movs	r2, #56	; 0x38
 8002b70:	4013      	ands	r3, r2
 8002b72:	d10f      	bne.n	8002b94 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002b74:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	0adb      	lsrs	r3, r3, #11
 8002b7a:	2207      	movs	r2, #7
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2201      	movs	r2, #1
 8002b80:	409a      	lsls	r2, r3
 8002b82:	0013      	movs	r3, r2
 8002b84:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b86:	6839      	ldr	r1, [r7, #0]
 8002b88:	4835      	ldr	r0, [pc, #212]	; (8002c60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b8a:	f7fd fac5 	bl	8000118 <__udivsi3>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	e05d      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b94:	4b31      	ldr	r3, [pc, #196]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2238      	movs	r2, #56	; 0x38
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d102      	bne.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ba0:	4b30      	ldr	r3, [pc, #192]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	e054      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ba6:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2238      	movs	r2, #56	; 0x38
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b10      	cmp	r3, #16
 8002bb0:	d138      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bbc:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d10d      	bne.n	8002bec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	4824      	ldr	r0, [pc, #144]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x100>)
 8002bd4:	f7fd faa0 	bl	8000118 <__udivsi3>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	0019      	movs	r1, r3
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	227f      	movs	r2, #127	; 0x7f
 8002be4:	4013      	ands	r3, r2
 8002be6:	434b      	muls	r3, r1
 8002be8:	617b      	str	r3, [r7, #20]
        break;
 8002bea:	e00d      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	481c      	ldr	r0, [pc, #112]	; (8002c60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002bf0:	f7fd fa92 	bl	8000118 <__udivsi3>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	227f      	movs	r2, #127	; 0x7f
 8002c00:	4013      	ands	r3, r2
 8002c02:	434b      	muls	r3, r1
 8002c04:	617b      	str	r3, [r7, #20]
        break;
 8002c06:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002c08:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	0f5b      	lsrs	r3, r3, #29
 8002c0e:	2207      	movs	r2, #7
 8002c10:	4013      	ands	r3, r2
 8002c12:	3301      	adds	r3, #1
 8002c14:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	6978      	ldr	r0, [r7, #20]
 8002c1a:	f7fd fa7d 	bl	8000118 <__udivsi3>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	e015      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c24:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2238      	movs	r2, #56	; 0x38
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d103      	bne.n	8002c38 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	e00b      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c38:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2238      	movs	r2, #56	; 0x38
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b18      	cmp	r3, #24
 8002c42:	d103      	bne.n	8002c4c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002c44:	23fa      	movs	r3, #250	; 0xfa
 8002c46:	01db      	lsls	r3, r3, #7
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	e001      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c50:	693b      	ldr	r3, [r7, #16]
}
 8002c52:	0018      	movs	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b006      	add	sp, #24
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	00f42400 	.word	0x00f42400
 8002c64:	007a1200 	.word	0x007a1200

08002c68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c6c:	4b02      	ldr	r3, [pc, #8]	; (8002c78 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
}
 8002c70:	0018      	movs	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	20000038 	.word	0x20000038

08002c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c7c:	b5b0      	push	{r4, r5, r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c80:	f7ff fff2 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002c84:	0004      	movs	r4, r0
 8002c86:	f7ff fb3f 	bl	8002308 <LL_RCC_GetAPB1Prescaler>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	0b1a      	lsrs	r2, r3, #12
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c90:	0092      	lsls	r2, r2, #2
 8002c92:	58d3      	ldr	r3, [r2, r3]
 8002c94:	221f      	movs	r2, #31
 8002c96:	4013      	ands	r3, r2
 8002c98:	40dc      	lsrs	r4, r3
 8002c9a:	0023      	movs	r3, r4
}
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	08006844 	.word	0x08006844

08002ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002cb0:	2313      	movs	r3, #19
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cb8:	2312      	movs	r3, #18
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	029b      	lsls	r3, r3, #10
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d100      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002ccc:	e0a3      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cce:	2011      	movs	r0, #17
 8002cd0:	183b      	adds	r3, r7, r0
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd6:	4ba5      	ldr	r3, [pc, #660]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	055b      	lsls	r3, r3, #21
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d110      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce2:	4ba2      	ldr	r3, [pc, #648]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ce4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ce6:	4ba1      	ldr	r3, [pc, #644]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ce8:	2180      	movs	r1, #128	; 0x80
 8002cea:	0549      	lsls	r1, r1, #21
 8002cec:	430a      	orrs	r2, r1
 8002cee:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cf0:	4b9e      	ldr	r3, [pc, #632]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	055b      	lsls	r3, r3, #21
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfe:	183b      	adds	r3, r7, r0
 8002d00:	2201      	movs	r2, #1
 8002d02:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d04:	4b9a      	ldr	r3, [pc, #616]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b99      	ldr	r3, [pc, #612]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002d0a:	2180      	movs	r1, #128	; 0x80
 8002d0c:	0049      	lsls	r1, r1, #1
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d12:	f7fe ffd5 	bl	8001cc0 <HAL_GetTick>
 8002d16:	0003      	movs	r3, r0
 8002d18:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d1a:	e00b      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1c:	f7fe ffd0 	bl	8001cc0 <HAL_GetTick>
 8002d20:	0002      	movs	r2, r0
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d904      	bls.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002d2a:	2313      	movs	r3, #19
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	2203      	movs	r2, #3
 8002d30:	701a      	strb	r2, [r3, #0]
        break;
 8002d32:	e005      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d34:	4b8e      	ldr	r3, [pc, #568]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d0ed      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002d40:	2313      	movs	r3, #19
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d154      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d4a:	4b88      	ldr	r3, [pc, #544]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d4e:	23c0      	movs	r3, #192	; 0xc0
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4013      	ands	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d019      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d014      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d66:	4b81      	ldr	r3, [pc, #516]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6a:	4a82      	ldr	r2, [pc, #520]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d70:	4b7e      	ldr	r3, [pc, #504]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d74:	4b7d      	ldr	r3, [pc, #500]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d76:	2180      	movs	r1, #128	; 0x80
 8002d78:	0249      	lsls	r1, r1, #9
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d7e:	4b7b      	ldr	r3, [pc, #492]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d82:	4b7a      	ldr	r3, [pc, #488]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d84:	497c      	ldr	r1, [pc, #496]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002d86:	400a      	ands	r2, r1
 8002d88:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d8a:	4b78      	ldr	r3, [pc, #480]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2201      	movs	r2, #1
 8002d94:	4013      	ands	r3, r2
 8002d96:	d016      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe ff92 	bl	8001cc0 <HAL_GetTick>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da0:	e00c      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7fe ff8d 	bl	8001cc0 <HAL_GetTick>
 8002da6:	0002      	movs	r2, r0
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	4a73      	ldr	r2, [pc, #460]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d904      	bls.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002db2:	2313      	movs	r3, #19
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	2203      	movs	r2, #3
 8002db8:	701a      	strb	r2, [r3, #0]
            break;
 8002dba:	e004      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dbc:	4b6b      	ldr	r3, [pc, #428]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d0ed      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002dc6:	2313      	movs	r3, #19
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10a      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd0:	4b66      	ldr	r3, [pc, #408]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd4:	4a67      	ldr	r2, [pc, #412]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	0019      	movs	r1, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dde:	4b63      	ldr	r3, [pc, #396]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002de0:	430a      	orrs	r2, r1
 8002de2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002de4:	e00c      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002de6:	2312      	movs	r3, #18
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	2213      	movs	r2, #19
 8002dec:	18ba      	adds	r2, r7, r2
 8002dee:	7812      	ldrb	r2, [r2, #0]
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	e005      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df4:	2312      	movs	r3, #18
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	2213      	movs	r2, #19
 8002dfa:	18ba      	adds	r2, r7, r2
 8002dfc:	7812      	ldrb	r2, [r2, #0]
 8002dfe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e00:	2311      	movs	r3, #17
 8002e02:	18fb      	adds	r3, r7, r3
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d105      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0a:	4b58      	ldr	r3, [pc, #352]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e0e:	4b57      	ldr	r3, [pc, #348]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e10:	495b      	ldr	r1, [pc, #364]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002e12:	400a      	ands	r2, r1
 8002e14:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d009      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e20:	4b52      	ldr	r3, [pc, #328]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	2203      	movs	r2, #3
 8002e26:	4393      	bics	r3, r2
 8002e28:	0019      	movs	r1, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	4b4f      	ldr	r3, [pc, #316]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e30:	430a      	orrs	r2, r1
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2210      	movs	r2, #16
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e3e:	4b4b      	ldr	r3, [pc, #300]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e42:	4a50      	ldr	r2, [pc, #320]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	0019      	movs	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d009      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e5e:	4b43      	ldr	r3, [pc, #268]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	4a49      	ldr	r2, [pc, #292]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d009      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e7e:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	4a42      	ldr	r2, [pc, #264]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	0019      	movs	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	4b37      	ldr	r3, [pc, #220]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2220      	movs	r2, #32
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d009      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e9c:	4b33      	ldr	r3, [pc, #204]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	4a3b      	ldr	r2, [pc, #236]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002eac:	430a      	orrs	r2, r1
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	01db      	lsls	r3, r3, #7
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d015      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ebc:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	0899      	lsrs	r1, r3, #2
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69da      	ldr	r2, [r3, #28]
 8002ec8:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69da      	ldr	r2, [r3, #28]
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	05db      	lsls	r3, r3, #23
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d106      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002eda:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	0249      	lsls	r1, r1, #9
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	039b      	lsls	r3, r3, #14
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d016      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef8:	4a26      	ldr	r2, [pc, #152]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	0019      	movs	r1, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f04:	430a      	orrs	r2, r1
 8002f06:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1a      	ldr	r2, [r3, #32]
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	03db      	lsls	r3, r3, #15
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d106      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f14:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f1a:	2180      	movs	r1, #128	; 0x80
 8002f1c:	0449      	lsls	r1, r1, #17
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d016      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002f2e:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	4a19      	ldr	r2, [pc, #100]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	0019      	movs	r1, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	01db      	lsls	r3, r3, #7
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d106      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f4e:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f54:	2180      	movs	r1, #128	; 0x80
 8002f56:	0249      	lsls	r1, r1, #9
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002f5c:	2312      	movs	r3, #18
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	781b      	ldrb	r3, [r3, #0]
}
 8002f62:	0018      	movs	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b006      	add	sp, #24
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40007000 	.word	0x40007000
 8002f74:	fffffcff 	.word	0xfffffcff
 8002f78:	fffeffff 	.word	0xfffeffff
 8002f7c:	00001388 	.word	0x00001388
 8002f80:	efffffff 	.word	0xefffffff
 8002f84:	fffff3ff 	.word	0xfffff3ff
 8002f88:	fff3ffff 	.word	0xfff3ffff
 8002f8c:	ffcfffff 	.word	0xffcfffff
 8002f90:	ffffcfff 	.word	0xffffcfff
 8002f94:	ffbfffff 	.word	0xffbfffff
 8002f98:	ffff3fff 	.word	0xffff3fff

08002f9c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f9c:	b5b0      	push	{r4, r5, r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002fa4:	230f      	movs	r3, #15
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d100      	bne.n	8002fb4 <HAL_RTC_Init+0x18>
 8002fb2:	e08c      	b.n	80030ce <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2229      	movs	r2, #41	; 0x29
 8002fb8:	5c9b      	ldrb	r3, [r3, r2]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10b      	bne.n	8002fd8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2228      	movs	r2, #40	; 0x28
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2288      	movs	r2, #136	; 0x88
 8002fcc:	0212      	lsls	r2, r2, #8
 8002fce:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f7fe fbbc 	bl	8001750 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2229      	movs	r2, #41	; 0x29
 8002fdc:	2102      	movs	r1, #2
 8002fde:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2210      	movs	r2, #16
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b10      	cmp	r3, #16
 8002fec:	d062      	beq.n	80030b4 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	22ca      	movs	r2, #202	; 0xca
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2253      	movs	r2, #83	; 0x53
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002ffe:	250f      	movs	r5, #15
 8003000:	197c      	adds	r4, r7, r5
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	0018      	movs	r0, r3
 8003006:	f000 fcba 	bl	800397e <RTC_EnterInitMode>
 800300a:	0003      	movs	r3, r0
 800300c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800300e:	0028      	movs	r0, r5
 8003010:	183b      	adds	r3, r7, r0
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d12c      	bne.n	8003072 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	492e      	ldr	r1, [pc, #184]	; (80030dc <HAL_RTC_Init+0x140>)
 8003024:	400a      	ands	r2, r1
 8003026:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6999      	ldr	r1, [r3, #24]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6912      	ldr	r2, [r2, #16]
 800304e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6919      	ldr	r1, [r3, #16]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	041a      	lsls	r2, r3, #16
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003064:	183c      	adds	r4, r7, r0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	0018      	movs	r0, r3
 800306a:	f000 fccb 	bl	8003a04 <RTC_ExitInitMode>
 800306e:	0003      	movs	r3, r0
 8003070:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8003072:	230f      	movs	r3, #15
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d116      	bne.n	80030aa <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	00d2      	lsls	r2, r2, #3
 8003088:	08d2      	lsrs	r2, r2, #3
 800308a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6999      	ldr	r1, [r3, #24]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	22ff      	movs	r2, #255	; 0xff
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24
 80030b2:	e003      	b.n	80030bc <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80030b4:	230f      	movs	r3, #15
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80030bc:	230f      	movs	r3, #15
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2229      	movs	r2, #41	; 0x29
 80030ca:	2101      	movs	r1, #1
 80030cc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80030ce:	230f      	movs	r3, #15
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	781b      	ldrb	r3, [r3, #0]
}
 80030d4:	0018      	movs	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b004      	add	sp, #16
 80030da:	bdb0      	pop	{r4, r5, r7, pc}
 80030dc:	fb8fffbf 	.word	0xfb8fffbf

080030e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030e0:	b5b0      	push	{r4, r5, r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2228      	movs	r2, #40	; 0x28
 80030f0:	5c9b      	ldrb	r3, [r3, r2]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_RTC_SetTime+0x1a>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e092      	b.n	8003220 <HAL_RTC_SetTime+0x140>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2228      	movs	r2, #40	; 0x28
 80030fe:	2101      	movs	r1, #1
 8003100:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2229      	movs	r2, #41	; 0x29
 8003106:	2102      	movs	r1, #2
 8003108:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	22ca      	movs	r2, #202	; 0xca
 8003110:	625a      	str	r2, [r3, #36]	; 0x24
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2253      	movs	r2, #83	; 0x53
 8003118:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800311a:	2513      	movs	r5, #19
 800311c:	197c      	adds	r4, r7, r5
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	0018      	movs	r0, r3
 8003122:	f000 fc2c 	bl	800397e <RTC_EnterInitMode>
 8003126:	0003      	movs	r3, r0
 8003128:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800312a:	197b      	adds	r3, r7, r5
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d162      	bne.n	80031f8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d125      	bne.n	8003184 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2240      	movs	r2, #64	; 0x40
 8003140:	4013      	ands	r3, r2
 8003142:	d102      	bne.n	800314a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2200      	movs	r2, #0
 8003148:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	0018      	movs	r0, r3
 8003150:	f000 fc9c 	bl	8003a8c <RTC_ByteToBcd2>
 8003154:	0003      	movs	r3, r0
 8003156:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	785b      	ldrb	r3, [r3, #1]
 800315c:	0018      	movs	r0, r3
 800315e:	f000 fc95 	bl	8003a8c <RTC_ByteToBcd2>
 8003162:	0003      	movs	r3, r0
 8003164:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003166:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	789b      	ldrb	r3, [r3, #2]
 800316c:	0018      	movs	r0, r3
 800316e:	f000 fc8d 	bl	8003a8c <RTC_ByteToBcd2>
 8003172:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003174:	0022      	movs	r2, r4
 8003176:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	78db      	ldrb	r3, [r3, #3]
 800317c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	e017      	b.n	80031b4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	2240      	movs	r2, #64	; 0x40
 800318c:	4013      	ands	r3, r2
 800318e:	d102      	bne.n	8003196 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2200      	movs	r2, #0
 8003194:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	785b      	ldrb	r3, [r3, #1]
 80031a0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80031a2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031a8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	78db      	ldrb	r3, [r3, #3]
 80031ae:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	491b      	ldr	r1, [pc, #108]	; (8003228 <HAL_RTC_SetTime+0x148>)
 80031bc:	400a      	ands	r2, r1
 80031be:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4918      	ldr	r1, [pc, #96]	; (800322c <HAL_RTC_SetTime+0x14c>)
 80031cc:	400a      	ands	r2, r1
 80031ce:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6999      	ldr	r1, [r3, #24]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	431a      	orrs	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80031e8:	2313      	movs	r3, #19
 80031ea:	18fc      	adds	r4, r7, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 fc08 	bl	8003a04 <RTC_ExitInitMode>
 80031f4:	0003      	movs	r3, r0
 80031f6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	22ff      	movs	r2, #255	; 0xff
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8003200:	2313      	movs	r3, #19
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d103      	bne.n	8003212 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2229      	movs	r2, #41	; 0x29
 800320e:	2101      	movs	r1, #1
 8003210:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2228      	movs	r2, #40	; 0x28
 8003216:	2100      	movs	r1, #0
 8003218:	5499      	strb	r1, [r3, r2]

  return status;
 800321a:	2313      	movs	r3, #19
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	781b      	ldrb	r3, [r3, #0]
}
 8003220:	0018      	movs	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	b006      	add	sp, #24
 8003226:	bdb0      	pop	{r4, r5, r7, pc}
 8003228:	007f7f7f 	.word	0x007f7f7f
 800322c:	fffbffff 	.word	0xfffbffff

08003230 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	045b      	lsls	r3, r3, #17
 800324e:	0c5a      	lsrs	r2, r3, #17
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <HAL_RTC_GetTime+0xb4>)
 800325c:	4013      	ands	r3, r2
 800325e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	0c1b      	lsrs	r3, r3, #16
 8003264:	b2db      	uxtb	r3, r3
 8003266:	223f      	movs	r2, #63	; 0x3f
 8003268:	4013      	ands	r3, r2
 800326a:	b2da      	uxtb	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	0a1b      	lsrs	r3, r3, #8
 8003274:	b2db      	uxtb	r3, r3
 8003276:	227f      	movs	r2, #127	; 0x7f
 8003278:	4013      	ands	r3, r2
 800327a:	b2da      	uxtb	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	227f      	movs	r2, #127	; 0x7f
 8003286:	4013      	ands	r3, r2
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	0d9b      	lsrs	r3, r3, #22
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2201      	movs	r2, #1
 8003296:	4013      	ands	r3, r2
 8003298:	b2da      	uxtb	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d11a      	bne.n	80032da <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	0018      	movs	r0, r3
 80032aa:	f000 fc17 	bl	8003adc <RTC_Bcd2ToByte>
 80032ae:	0003      	movs	r3, r0
 80032b0:	001a      	movs	r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	785b      	ldrb	r3, [r3, #1]
 80032ba:	0018      	movs	r0, r3
 80032bc:	f000 fc0e 	bl	8003adc <RTC_Bcd2ToByte>
 80032c0:	0003      	movs	r3, r0
 80032c2:	001a      	movs	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	789b      	ldrb	r3, [r3, #2]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f000 fc05 	bl	8003adc <RTC_Bcd2ToByte>
 80032d2:	0003      	movs	r3, r0
 80032d4:	001a      	movs	r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	0018      	movs	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	b006      	add	sp, #24
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	007f7f7f 	.word	0x007f7f7f

080032e8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032e8:	b5b0      	push	{r4, r5, r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2228      	movs	r2, #40	; 0x28
 80032f8:	5c9b      	ldrb	r3, [r3, r2]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_RTC_SetDate+0x1a>
 80032fe:	2302      	movs	r3, #2
 8003300:	e07e      	b.n	8003400 <HAL_RTC_SetDate+0x118>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2228      	movs	r2, #40	; 0x28
 8003306:	2101      	movs	r1, #1
 8003308:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2229      	movs	r2, #41	; 0x29
 800330e:	2102      	movs	r1, #2
 8003310:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10e      	bne.n	8003336 <HAL_RTC_SetDate+0x4e>
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	785b      	ldrb	r3, [r3, #1]
 800331c:	001a      	movs	r2, r3
 800331e:	2310      	movs	r3, #16
 8003320:	4013      	ands	r3, r2
 8003322:	d008      	beq.n	8003336 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	785b      	ldrb	r3, [r3, #1]
 8003328:	2210      	movs	r2, #16
 800332a:	4393      	bics	r3, r2
 800332c:	b2db      	uxtb	r3, r3
 800332e:	330a      	adds	r3, #10
 8003330:	b2da      	uxtb	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d11c      	bne.n	8003376 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	78db      	ldrb	r3, [r3, #3]
 8003340:	0018      	movs	r0, r3
 8003342:	f000 fba3 	bl	8003a8c <RTC_ByteToBcd2>
 8003346:	0003      	movs	r3, r0
 8003348:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	785b      	ldrb	r3, [r3, #1]
 800334e:	0018      	movs	r0, r3
 8003350:	f000 fb9c 	bl	8003a8c <RTC_ByteToBcd2>
 8003354:	0003      	movs	r3, r0
 8003356:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003358:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	789b      	ldrb	r3, [r3, #2]
 800335e:	0018      	movs	r0, r3
 8003360:	f000 fb94 	bl	8003a8c <RTC_ByteToBcd2>
 8003364:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003366:	0022      	movs	r2, r4
 8003368:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e00e      	b.n	8003394 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	78db      	ldrb	r3, [r3, #3]
 800337a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	785b      	ldrb	r3, [r3, #1]
 8003380:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003382:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003388:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	22ca      	movs	r2, #202	; 0xca
 800339a:	625a      	str	r2, [r3, #36]	; 0x24
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2253      	movs	r2, #83	; 0x53
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80033a4:	2513      	movs	r5, #19
 80033a6:	197c      	adds	r4, r7, r5
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	0018      	movs	r0, r3
 80033ac:	f000 fae7 	bl	800397e <RTC_EnterInitMode>
 80033b0:	0003      	movs	r3, r0
 80033b2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80033b4:	0028      	movs	r0, r5
 80033b6:	183b      	adds	r3, r7, r0
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10c      	bne.n	80033d8 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4910      	ldr	r1, [pc, #64]	; (8003408 <HAL_RTC_SetDate+0x120>)
 80033c6:	400a      	ands	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80033ca:	183c      	adds	r4, r7, r0
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	0018      	movs	r0, r3
 80033d0:	f000 fb18 	bl	8003a04 <RTC_ExitInitMode>
 80033d4:	0003      	movs	r3, r0
 80033d6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	22ff      	movs	r2, #255	; 0xff
 80033de:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80033e0:	2313      	movs	r3, #19
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d103      	bne.n	80033f2 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2229      	movs	r2, #41	; 0x29
 80033ee:	2101      	movs	r1, #1
 80033f0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2228      	movs	r2, #40	; 0x28
 80033f6:	2100      	movs	r1, #0
 80033f8:	5499      	strb	r1, [r3, r2]

  return status;
 80033fa:	2313      	movs	r3, #19
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	781b      	ldrb	r3, [r3, #0]
}
 8003400:	0018      	movs	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	b006      	add	sp, #24
 8003406:	bdb0      	pop	{r4, r5, r7, pc}
 8003408:	00ffff3f 	.word	0x00ffff3f

0800340c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	4a21      	ldr	r2, [pc, #132]	; (80034a4 <HAL_RTC_GetDate+0x98>)
 8003420:	4013      	ands	r3, r2
 8003422:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	0c1b      	lsrs	r3, r3, #16
 8003428:	b2da      	uxtb	r2, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	0a1b      	lsrs	r3, r3, #8
 8003432:	b2db      	uxtb	r3, r3
 8003434:	221f      	movs	r2, #31
 8003436:	4013      	ands	r3, r2
 8003438:	b2da      	uxtb	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	223f      	movs	r2, #63	; 0x3f
 8003444:	4013      	ands	r3, r2
 8003446:	b2da      	uxtb	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	0b5b      	lsrs	r3, r3, #13
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2207      	movs	r2, #7
 8003454:	4013      	ands	r3, r2
 8003456:	b2da      	uxtb	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d11a      	bne.n	8003498 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	78db      	ldrb	r3, [r3, #3]
 8003466:	0018      	movs	r0, r3
 8003468:	f000 fb38 	bl	8003adc <RTC_Bcd2ToByte>
 800346c:	0003      	movs	r3, r0
 800346e:	001a      	movs	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	785b      	ldrb	r3, [r3, #1]
 8003478:	0018      	movs	r0, r3
 800347a:	f000 fb2f 	bl	8003adc <RTC_Bcd2ToByte>
 800347e:	0003      	movs	r3, r0
 8003480:	001a      	movs	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	789b      	ldrb	r3, [r3, #2]
 800348a:	0018      	movs	r0, r3
 800348c:	f000 fb26 	bl	8003adc <RTC_Bcd2ToByte>
 8003490:	0003      	movs	r3, r0
 8003492:	001a      	movs	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	0018      	movs	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	b006      	add	sp, #24
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	00ffff3f 	.word	0x00ffff3f

080034a8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	b089      	sub	sp, #36	; 0x24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2228      	movs	r2, #40	; 0x28
 80034b8:	5c9b      	ldrb	r3, [r3, r2]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_RTC_SetAlarm_IT+0x1a>
 80034be:	2302      	movs	r3, #2
 80034c0:	e127      	b.n	8003712 <HAL_RTC_SetAlarm_IT+0x26a>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2228      	movs	r2, #40	; 0x28
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2229      	movs	r2, #41	; 0x29
 80034ce:	2102      	movs	r1, #2
 80034d0:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d136      	bne.n	8003546 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	2240      	movs	r2, #64	; 0x40
 80034e0:	4013      	ands	r3, r2
 80034e2:	d102      	bne.n	80034ea <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2200      	movs	r2, #0
 80034e8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	0018      	movs	r0, r3
 80034f0:	f000 facc 	bl	8003a8c <RTC_ByteToBcd2>
 80034f4:	0003      	movs	r3, r0
 80034f6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	785b      	ldrb	r3, [r3, #1]
 80034fc:	0018      	movs	r0, r3
 80034fe:	f000 fac5 	bl	8003a8c <RTC_ByteToBcd2>
 8003502:	0003      	movs	r3, r0
 8003504:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003506:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	789b      	ldrb	r3, [r3, #2]
 800350c:	0018      	movs	r0, r3
 800350e:	f000 fabd 	bl	8003a8c <RTC_ByteToBcd2>
 8003512:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003514:	0022      	movs	r2, r4
 8003516:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	78db      	ldrb	r3, [r3, #3]
 800351c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800351e:	431a      	orrs	r2, r3
 8003520:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2220      	movs	r2, #32
 8003526:	5c9b      	ldrb	r3, [r3, r2]
 8003528:	0018      	movs	r0, r3
 800352a:	f000 faaf 	bl	8003a8c <RTC_ByteToBcd2>
 800352e:	0003      	movs	r3, r0
 8003530:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003532:	0022      	movs	r2, r4
 8003534:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800353a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003540:	4313      	orrs	r3, r2
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	e022      	b.n	800358c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2240      	movs	r2, #64	; 0x40
 800354e:	4013      	ands	r3, r2
 8003550:	d102      	bne.n	8003558 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2200      	movs	r2, #0
 8003556:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	785b      	ldrb	r3, [r3, #1]
 8003562:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003564:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800356a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	78db      	ldrb	r3, [r3, #3]
 8003570:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003572:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2120      	movs	r1, #32
 8003578:	5c5b      	ldrb	r3, [r3, r1]
 800357a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800357c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003582:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003588:	4313      	orrs	r3, r2
 800358a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	22ca      	movs	r2, #202	; 0xca
 800359e:	625a      	str	r2, [r3, #36]	; 0x24
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2253      	movs	r2, #83	; 0x53
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d14c      	bne.n	800364e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4957      	ldr	r1, [pc, #348]	; (800371c <HAL_RTC_SetAlarm_IT+0x274>)
 80035c0:	400a      	ands	r2, r1
 80035c2:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2101      	movs	r1, #1
 80035d0:	430a      	orrs	r2, r1
 80035d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80035d4:	f7fe fb74 	bl	8001cc0 <HAL_GetTick>
 80035d8:	0003      	movs	r3, r0
 80035da:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80035dc:	e016      	b.n	800360c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80035de:	f7fe fb6f 	bl	8001cc0 <HAL_GetTick>
 80035e2:	0002      	movs	r2, r0
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	1ad2      	subs	r2, r2, r3
 80035e8:	23fa      	movs	r3, #250	; 0xfa
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d90d      	bls.n	800360c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	22ff      	movs	r2, #255	; 0xff
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2229      	movs	r2, #41	; 0x29
 80035fc:	2103      	movs	r1, #3
 80035fe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2228      	movs	r2, #40	; 0x28
 8003604:	2100      	movs	r1, #0
 8003606:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e082      	b.n	8003712 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2201      	movs	r2, #1
 8003614:	4013      	ands	r3, r2
 8003616:	d0e2      	beq.n	80035de <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69fa      	ldr	r2, [r7, #28]
 800361e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699a      	ldr	r2, [r3, #24]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2180      	movs	r1, #128	; 0x80
 8003634:	0049      	lsls	r1, r1, #1
 8003636:	430a      	orrs	r2, r1
 8003638:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699a      	ldr	r2, [r3, #24]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2180      	movs	r1, #128	; 0x80
 8003646:	0149      	lsls	r1, r1, #5
 8003648:	430a      	orrs	r2, r1
 800364a:	619a      	str	r2, [r3, #24]
 800364c:	e04b      	b.n	80036e6 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699a      	ldr	r2, [r3, #24]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4931      	ldr	r1, [pc, #196]	; (8003720 <HAL_RTC_SetAlarm_IT+0x278>)
 800365a:	400a      	ands	r2, r1
 800365c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2102      	movs	r1, #2
 800366a:	430a      	orrs	r2, r1
 800366c:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800366e:	f7fe fb27 	bl	8001cc0 <HAL_GetTick>
 8003672:	0003      	movs	r3, r0
 8003674:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003676:	e016      	b.n	80036a6 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003678:	f7fe fb22 	bl	8001cc0 <HAL_GetTick>
 800367c:	0002      	movs	r2, r0
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	1ad2      	subs	r2, r2, r3
 8003682:	23fa      	movs	r3, #250	; 0xfa
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	429a      	cmp	r2, r3
 8003688:	d90d      	bls.n	80036a6 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	22ff      	movs	r2, #255	; 0xff
 8003690:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2229      	movs	r2, #41	; 0x29
 8003696:	2103      	movs	r1, #3
 8003698:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2228      	movs	r2, #40	; 0x28
 800369e:	2100      	movs	r1, #0
 80036a0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e035      	b.n	8003712 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2202      	movs	r2, #2
 80036ae:	4013      	ands	r3, r2
 80036b0:	d0e2      	beq.n	8003678 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699a      	ldr	r2, [r3, #24]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2180      	movs	r1, #128	; 0x80
 80036ce:	0089      	lsls	r1, r1, #2
 80036d0:	430a      	orrs	r2, r1
 80036d2:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2180      	movs	r1, #128	; 0x80
 80036e0:	0189      	lsls	r1, r1, #6
 80036e2:	430a      	orrs	r2, r1
 80036e4:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80036e6:	4a0f      	ldr	r2, [pc, #60]	; (8003724 <HAL_RTC_SetAlarm_IT+0x27c>)
 80036e8:	2380      	movs	r3, #128	; 0x80
 80036ea:	58d3      	ldr	r3, [r2, r3]
 80036ec:	490d      	ldr	r1, [pc, #52]	; (8003724 <HAL_RTC_SetAlarm_IT+0x27c>)
 80036ee:	2280      	movs	r2, #128	; 0x80
 80036f0:	0312      	lsls	r2, r2, #12
 80036f2:	4313      	orrs	r3, r2
 80036f4:	2280      	movs	r2, #128	; 0x80
 80036f6:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	22ff      	movs	r2, #255	; 0xff
 80036fe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2229      	movs	r2, #41	; 0x29
 8003704:	2101      	movs	r1, #1
 8003706:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2228      	movs	r2, #40	; 0x28
 800370c:	2100      	movs	r1, #0
 800370e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	0018      	movs	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	b009      	add	sp, #36	; 0x24
 8003718:	bd90      	pop	{r4, r7, pc}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	fffffeff 	.word	0xfffffeff
 8003720:	fffffdff 	.word	0xfffffdff
 8003724:	40021800 	.word	0x40021800

08003728 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
 8003734:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	429a      	cmp	r2, r3
 800373e:	d144      	bne.n	80037ca <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2280      	movs	r2, #128	; 0x80
 8003744:	0052      	lsls	r2, r2, #1
 8003746:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	045b      	lsls	r3, r3, #17
 8003758:	0c5b      	lsrs	r3, r3, #17
 800375a:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	0c1b      	lsrs	r3, r3, #16
 8003760:	b2db      	uxtb	r3, r3
 8003762:	223f      	movs	r2, #63	; 0x3f
 8003764:	4013      	ands	r3, r2
 8003766:	b2da      	uxtb	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	0a1b      	lsrs	r3, r3, #8
 8003770:	b2db      	uxtb	r3, r3
 8003772:	227f      	movs	r2, #127	; 0x7f
 8003774:	4013      	ands	r3, r2
 8003776:	b2da      	uxtb	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	227f      	movs	r2, #127	; 0x7f
 8003782:	4013      	ands	r3, r2
 8003784:	b2da      	uxtb	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	0d9b      	lsrs	r3, r3, #22
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2201      	movs	r2, #1
 8003792:	4013      	ands	r3, r2
 8003794:	b2da      	uxtb	r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	0e1b      	lsrs	r3, r3, #24
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	223f      	movs	r2, #63	; 0x3f
 80037a8:	4013      	ands	r3, r2
 80037aa:	b2d9      	uxtb	r1, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2220      	movs	r2, #32
 80037b0:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	2380      	movs	r3, #128	; 0x80
 80037b6:	05db      	lsls	r3, r3, #23
 80037b8:	401a      	ands	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	4a3b      	ldr	r2, [pc, #236]	; (80038b0 <HAL_RTC_GetAlarm+0x188>)
 80037c2:	401a      	ands	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	615a      	str	r2, [r3, #20]
 80037c8:	e043      	b.n	8003852 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2280      	movs	r2, #128	; 0x80
 80037ce:	0092      	lsls	r2, r2, #2
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d8:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e0:	045b      	lsls	r3, r3, #17
 80037e2:	0c5b      	lsrs	r3, r3, #17
 80037e4:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	0c1b      	lsrs	r3, r3, #16
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	223f      	movs	r2, #63	; 0x3f
 80037ee:	4013      	ands	r3, r2
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	0a1b      	lsrs	r3, r3, #8
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	227f      	movs	r2, #127	; 0x7f
 80037fe:	4013      	ands	r3, r2
 8003800:	b2da      	uxtb	r2, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	227f      	movs	r2, #127	; 0x7f
 800380c:	4013      	ands	r3, r2
 800380e:	b2da      	uxtb	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	0d9b      	lsrs	r3, r3, #22
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2201      	movs	r2, #1
 800381c:	4013      	ands	r3, r2
 800381e:	b2da      	uxtb	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	0e1b      	lsrs	r3, r3, #24
 800382e:	b2db      	uxtb	r3, r3
 8003830:	223f      	movs	r2, #63	; 0x3f
 8003832:	4013      	ands	r3, r2
 8003834:	b2d9      	uxtb	r1, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2220      	movs	r2, #32
 800383a:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	05db      	lsls	r3, r3, #23
 8003842:	401a      	ands	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	4a19      	ldr	r2, [pc, #100]	; (80038b0 <HAL_RTC_GetAlarm+0x188>)
 800384c:	401a      	ands	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d125      	bne.n	80038a4 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	0018      	movs	r0, r3
 800385e:	f000 f93d 	bl	8003adc <RTC_Bcd2ToByte>
 8003862:	0003      	movs	r3, r0
 8003864:	001a      	movs	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	785b      	ldrb	r3, [r3, #1]
 800386e:	0018      	movs	r0, r3
 8003870:	f000 f934 	bl	8003adc <RTC_Bcd2ToByte>
 8003874:	0003      	movs	r3, r0
 8003876:	001a      	movs	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	789b      	ldrb	r3, [r3, #2]
 8003880:	0018      	movs	r0, r3
 8003882:	f000 f92b 	bl	8003adc <RTC_Bcd2ToByte>
 8003886:	0003      	movs	r3, r0
 8003888:	001a      	movs	r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2220      	movs	r2, #32
 8003892:	5c9b      	ldrb	r3, [r3, r2]
 8003894:	0018      	movs	r0, r3
 8003896:	f000 f921 	bl	8003adc <RTC_Bcd2ToByte>
 800389a:	0003      	movs	r3, r0
 800389c:	0019      	movs	r1, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2220      	movs	r2, #32
 80038a2:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b006      	add	sp, #24
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	80808080 	.word	0x80808080

080038b4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699a      	ldr	r2, [r3, #24]
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	015b      	lsls	r3, r3, #5
 80038c6:	4013      	ands	r3, r2
 80038c8:	d011      	beq.n	80038ee <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d0:	2201      	movs	r2, #1
 80038d2:	4013      	ands	r3, r2
 80038d4:	d00b      	beq.n	80038ee <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2101      	movs	r1, #1
 80038e2:	430a      	orrs	r2, r1
 80038e4:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	0018      	movs	r0, r3
 80038ea:	f7fd f9d9 	bl	8000ca0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699a      	ldr	r2, [r3, #24]
 80038f4:	2380      	movs	r3, #128	; 0x80
 80038f6:	019b      	lsls	r3, r3, #6
 80038f8:	4013      	ands	r3, r2
 80038fa:	d011      	beq.n	8003920 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003902:	2202      	movs	r2, #2
 8003904:	4013      	ands	r3, r2
 8003906:	d00b      	beq.n	8003920 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2102      	movs	r1, #2
 8003914:	430a      	orrs	r2, r1
 8003916:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	0018      	movs	r0, r3
 800391c:	f000 f8fb 	bl	8003b16 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2229      	movs	r2, #41	; 0x29
 8003924:	2101      	movs	r1, #1
 8003926:	5499      	strb	r1, [r3, r2]
}
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	b002      	add	sp, #8
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	21a0      	movs	r1, #160	; 0xa0
 8003944:	438a      	bics	r2, r1
 8003946:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003948:	f7fe f9ba 	bl	8001cc0 <HAL_GetTick>
 800394c:	0003      	movs	r3, r0
 800394e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003950:	e00a      	b.n	8003968 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003952:	f7fe f9b5 	bl	8001cc0 <HAL_GetTick>
 8003956:	0002      	movs	r2, r0
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1ad2      	subs	r2, r2, r3
 800395c:	23fa      	movs	r3, #250	; 0xfa
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	429a      	cmp	r2, r3
 8003962:	d901      	bls.n	8003968 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e006      	b.n	8003976 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	4013      	ands	r3, r2
 8003972:	d0ee      	beq.n	8003952 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	0018      	movs	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	b004      	add	sp, #16
 800397c:	bd80      	pop	{r7, pc}

0800397e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8003986:	230f      	movs	r3, #15
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	2200      	movs	r2, #0
 800398c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2240      	movs	r2, #64	; 0x40
 8003996:	4013      	ands	r3, r2
 8003998:	d12c      	bne.n	80039f4 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2180      	movs	r1, #128	; 0x80
 80039a6:	430a      	orrs	r2, r1
 80039a8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80039aa:	f7fe f989 	bl	8001cc0 <HAL_GetTick>
 80039ae:	0003      	movs	r3, r0
 80039b0:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80039b2:	e014      	b.n	80039de <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80039b4:	f7fe f984 	bl	8001cc0 <HAL_GetTick>
 80039b8:	0002      	movs	r2, r0
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	1ad2      	subs	r2, r2, r3
 80039be:	200f      	movs	r0, #15
 80039c0:	183b      	adds	r3, r7, r0
 80039c2:	1839      	adds	r1, r7, r0
 80039c4:	7809      	ldrb	r1, [r1, #0]
 80039c6:	7019      	strb	r1, [r3, #0]
 80039c8:	23fa      	movs	r3, #250	; 0xfa
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d906      	bls.n	80039de <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80039d0:	183b      	adds	r3, r7, r0
 80039d2:	2203      	movs	r2, #3
 80039d4:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2229      	movs	r2, #41	; 0x29
 80039da:	2103      	movs	r1, #3
 80039dc:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2240      	movs	r2, #64	; 0x40
 80039e6:	4013      	ands	r3, r2
 80039e8:	d104      	bne.n	80039f4 <RTC_EnterInitMode+0x76>
 80039ea:	230f      	movs	r3, #15
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d1df      	bne.n	80039b4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80039f4:	230f      	movs	r3, #15
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	781b      	ldrb	r3, [r3, #0]
}
 80039fa:	0018      	movs	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b004      	add	sp, #16
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a04:	b590      	push	{r4, r7, lr}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0c:	240f      	movs	r4, #15
 8003a0e:	193b      	adds	r3, r7, r4
 8003a10:	2200      	movs	r2, #0
 8003a12:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003a14:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <RTC_ExitInitMode+0x84>)
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <RTC_ExitInitMode+0x84>)
 8003a1a:	2180      	movs	r1, #128	; 0x80
 8003a1c:	438a      	bics	r2, r1
 8003a1e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003a20:	4b19      	ldr	r3, [pc, #100]	; (8003a88 <RTC_ExitInitMode+0x84>)
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2220      	movs	r2, #32
 8003a26:	4013      	ands	r3, r2
 8003a28:	d10d      	bne.n	8003a46 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f7ff ff7f 	bl	8003930 <HAL_RTC_WaitForSynchro>
 8003a32:	1e03      	subs	r3, r0, #0
 8003a34:	d021      	beq.n	8003a7a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2229      	movs	r2, #41	; 0x29
 8003a3a:	2103      	movs	r1, #3
 8003a3c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003a3e:	193b      	adds	r3, r7, r4
 8003a40:	2203      	movs	r2, #3
 8003a42:	701a      	strb	r2, [r3, #0]
 8003a44:	e019      	b.n	8003a7a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <RTC_ExitInitMode+0x84>)
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <RTC_ExitInitMode+0x84>)
 8003a4c:	2120      	movs	r1, #32
 8003a4e:	438a      	bics	r2, r1
 8003a50:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	0018      	movs	r0, r3
 8003a56:	f7ff ff6b 	bl	8003930 <HAL_RTC_WaitForSynchro>
 8003a5a:	1e03      	subs	r3, r0, #0
 8003a5c:	d007      	beq.n	8003a6e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2229      	movs	r2, #41	; 0x29
 8003a62:	2103      	movs	r1, #3
 8003a64:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003a66:	230f      	movs	r3, #15
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003a6e:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <RTC_ExitInitMode+0x84>)
 8003a70:	699a      	ldr	r2, [r3, #24]
 8003a72:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <RTC_ExitInitMode+0x84>)
 8003a74:	2120      	movs	r1, #32
 8003a76:	430a      	orrs	r2, r1
 8003a78:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003a7a:	230f      	movs	r3, #15
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	781b      	ldrb	r3, [r3, #0]
}
 8003a80:	0018      	movs	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b005      	add	sp, #20
 8003a86:	bd90      	pop	{r4, r7, pc}
 8003a88:	40002800 	.word	0x40002800

08003a8c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	0002      	movs	r2, r0
 8003a94:	1dfb      	adds	r3, r7, #7
 8003a96:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003a9c:	230b      	movs	r3, #11
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	1dfa      	adds	r2, r7, #7
 8003aa2:	7812      	ldrb	r2, [r2, #0]
 8003aa4:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8003aa6:	e008      	b.n	8003aba <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003aae:	220b      	movs	r2, #11
 8003ab0:	18bb      	adds	r3, r7, r2
 8003ab2:	18ba      	adds	r2, r7, r2
 8003ab4:	7812      	ldrb	r2, [r2, #0]
 8003ab6:	3a0a      	subs	r2, #10
 8003ab8:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003aba:	210b      	movs	r1, #11
 8003abc:	187b      	adds	r3, r7, r1
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b09      	cmp	r3, #9
 8003ac2:	d8f1      	bhi.n	8003aa8 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	187b      	adds	r3, r7, r1
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	b2db      	uxtb	r3, r3
}
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b004      	add	sp, #16
 8003ada:	bd80      	pop	{r7, pc}

08003adc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	0002      	movs	r2, r0
 8003ae4:	1dfb      	adds	r3, r7, #7
 8003ae6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003ae8:	1dfb      	adds	r3, r7, #7
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	001a      	movs	r2, r3
 8003af2:	0013      	movs	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	189b      	adds	r3, r3, r2
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	1dfb      	adds	r3, r7, #7
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	210f      	movs	r1, #15
 8003b06:	400b      	ands	r3, r1
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	18d3      	adds	r3, r2, r3
 8003b0c:	b2db      	uxtb	r3, r3
}
 8003b0e:	0018      	movs	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	b004      	add	sp, #16
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b002      	add	sp, #8
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e04a      	b.n	8003bce <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	223d      	movs	r2, #61	; 0x3d
 8003b3c:	5c9b      	ldrb	r3, [r3, r2]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d107      	bne.n	8003b54 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	223c      	movs	r2, #60	; 0x3c
 8003b48:	2100      	movs	r1, #0
 8003b4a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f7fd fe7a 	bl	8001848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	223d      	movs	r2, #61	; 0x3d
 8003b58:	2102      	movs	r1, #2
 8003b5a:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3304      	adds	r3, #4
 8003b64:	0019      	movs	r1, r3
 8003b66:	0010      	movs	r0, r2
 8003b68:	f000 fade 	bl	8004128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2248      	movs	r2, #72	; 0x48
 8003b70:	2101      	movs	r1, #1
 8003b72:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	223e      	movs	r2, #62	; 0x3e
 8003b78:	2101      	movs	r1, #1
 8003b7a:	5499      	strb	r1, [r3, r2]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	223f      	movs	r2, #63	; 0x3f
 8003b80:	2101      	movs	r1, #1
 8003b82:	5499      	strb	r1, [r3, r2]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2240      	movs	r2, #64	; 0x40
 8003b88:	2101      	movs	r1, #1
 8003b8a:	5499      	strb	r1, [r3, r2]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2241      	movs	r2, #65	; 0x41
 8003b90:	2101      	movs	r1, #1
 8003b92:	5499      	strb	r1, [r3, r2]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2242      	movs	r2, #66	; 0x42
 8003b98:	2101      	movs	r1, #1
 8003b9a:	5499      	strb	r1, [r3, r2]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2243      	movs	r2, #67	; 0x43
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2244      	movs	r2, #68	; 0x44
 8003ba8:	2101      	movs	r1, #1
 8003baa:	5499      	strb	r1, [r3, r2]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2245      	movs	r2, #69	; 0x45
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	5499      	strb	r1, [r3, r2]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2246      	movs	r2, #70	; 0x46
 8003bb8:	2101      	movs	r1, #1
 8003bba:	5499      	strb	r1, [r3, r2]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2247      	movs	r2, #71	; 0x47
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	223d      	movs	r2, #61	; 0x3d
 8003bc8:	2101      	movs	r1, #1
 8003bca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	0018      	movs	r0, r3
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b002      	add	sp, #8
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	223d      	movs	r2, #61	; 0x3d
 8003be4:	5c9b      	ldrb	r3, [r3, r2]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d001      	beq.n	8003bf0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e035      	b.n	8003c5c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	223d      	movs	r2, #61	; 0x3d
 8003bf4:	2102      	movs	r1, #2
 8003bf6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a19      	ldr	r2, [pc, #100]	; (8003c64 <HAL_TIM_Base_Start+0x8c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00a      	beq.n	8003c18 <HAL_TIM_Base_Start+0x40>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	05db      	lsls	r3, r3, #23
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d004      	beq.n	8003c18 <HAL_TIM_Base_Start+0x40>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <HAL_TIM_Base_Start+0x90>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d116      	bne.n	8003c46 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <HAL_TIM_Base_Start+0x94>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b06      	cmp	r3, #6
 8003c28:	d016      	beq.n	8003c58 <HAL_TIM_Base_Start+0x80>
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	2380      	movs	r3, #128	; 0x80
 8003c2e:	025b      	lsls	r3, r3, #9
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d011      	beq.n	8003c58 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2101      	movs	r1, #1
 8003c40:	430a      	orrs	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c44:	e008      	b.n	8003c58 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2101      	movs	r1, #1
 8003c52:	430a      	orrs	r2, r1
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	e000      	b.n	8003c5a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c58:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b004      	add	sp, #16
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40012c00 	.word	0x40012c00
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	00010007 	.word	0x00010007

08003c70 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	4a0d      	ldr	r2, [pc, #52]	; (8003cb4 <HAL_TIM_Base_Stop+0x44>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	d10d      	bne.n	8003ca0 <HAL_TIM_Base_Stop+0x30>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	4a0b      	ldr	r2, [pc, #44]	; (8003cb8 <HAL_TIM_Base_Stop+0x48>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d107      	bne.n	8003ca0 <HAL_TIM_Base_Stop+0x30>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	438a      	bics	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	223d      	movs	r2, #61	; 0x3d
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	0018      	movs	r0, r3
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b002      	add	sp, #8
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	00001111 	.word	0x00001111
 8003cb8:	00000444 	.word	0x00000444

08003cbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e04a      	b.n	8003d64 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	223d      	movs	r2, #61	; 0x3d
 8003cd2:	5c9b      	ldrb	r3, [r3, r2]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d107      	bne.n	8003cea <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	223c      	movs	r2, #60	; 0x3c
 8003cde:	2100      	movs	r1, #0
 8003ce0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f7fd fd79 	bl	80017dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	223d      	movs	r2, #61	; 0x3d
 8003cee:	2102      	movs	r1, #2
 8003cf0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	0019      	movs	r1, r3
 8003cfc:	0010      	movs	r0, r2
 8003cfe:	f000 fa13 	bl	8004128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2248      	movs	r2, #72	; 0x48
 8003d06:	2101      	movs	r1, #1
 8003d08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	223e      	movs	r2, #62	; 0x3e
 8003d0e:	2101      	movs	r1, #1
 8003d10:	5499      	strb	r1, [r3, r2]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	223f      	movs	r2, #63	; 0x3f
 8003d16:	2101      	movs	r1, #1
 8003d18:	5499      	strb	r1, [r3, r2]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2240      	movs	r2, #64	; 0x40
 8003d1e:	2101      	movs	r1, #1
 8003d20:	5499      	strb	r1, [r3, r2]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2241      	movs	r2, #65	; 0x41
 8003d26:	2101      	movs	r1, #1
 8003d28:	5499      	strb	r1, [r3, r2]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2242      	movs	r2, #66	; 0x42
 8003d2e:	2101      	movs	r1, #1
 8003d30:	5499      	strb	r1, [r3, r2]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2243      	movs	r2, #67	; 0x43
 8003d36:	2101      	movs	r1, #1
 8003d38:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2244      	movs	r2, #68	; 0x44
 8003d3e:	2101      	movs	r1, #1
 8003d40:	5499      	strb	r1, [r3, r2]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2245      	movs	r2, #69	; 0x45
 8003d46:	2101      	movs	r1, #1
 8003d48:	5499      	strb	r1, [r3, r2]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2246      	movs	r2, #70	; 0x46
 8003d4e:	2101      	movs	r1, #1
 8003d50:	5499      	strb	r1, [r3, r2]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2247      	movs	r2, #71	; 0x47
 8003d56:	2101      	movs	r1, #1
 8003d58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	223d      	movs	r2, #61	; 0x3d
 8003d5e:	2101      	movs	r1, #1
 8003d60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	0018      	movs	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b002      	add	sp, #8
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d108      	bne.n	8003d8e <HAL_TIM_PWM_Start+0x22>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	223e      	movs	r2, #62	; 0x3e
 8003d80:	5c9b      	ldrb	r3, [r3, r2]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	1e5a      	subs	r2, r3, #1
 8003d88:	4193      	sbcs	r3, r2
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	e037      	b.n	8003dfe <HAL_TIM_PWM_Start+0x92>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d108      	bne.n	8003da6 <HAL_TIM_PWM_Start+0x3a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	223f      	movs	r2, #63	; 0x3f
 8003d98:	5c9b      	ldrb	r3, [r3, r2]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	1e5a      	subs	r2, r3, #1
 8003da0:	4193      	sbcs	r3, r2
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	e02b      	b.n	8003dfe <HAL_TIM_PWM_Start+0x92>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d108      	bne.n	8003dbe <HAL_TIM_PWM_Start+0x52>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2240      	movs	r2, #64	; 0x40
 8003db0:	5c9b      	ldrb	r3, [r3, r2]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	1e5a      	subs	r2, r3, #1
 8003db8:	4193      	sbcs	r3, r2
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	e01f      	b.n	8003dfe <HAL_TIM_PWM_Start+0x92>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b0c      	cmp	r3, #12
 8003dc2:	d108      	bne.n	8003dd6 <HAL_TIM_PWM_Start+0x6a>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2241      	movs	r2, #65	; 0x41
 8003dc8:	5c9b      	ldrb	r3, [r3, r2]
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	1e5a      	subs	r2, r3, #1
 8003dd0:	4193      	sbcs	r3, r2
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	e013      	b.n	8003dfe <HAL_TIM_PWM_Start+0x92>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d108      	bne.n	8003dee <HAL_TIM_PWM_Start+0x82>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2242      	movs	r2, #66	; 0x42
 8003de0:	5c9b      	ldrb	r3, [r3, r2]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	1e5a      	subs	r2, r3, #1
 8003de8:	4193      	sbcs	r3, r2
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	e007      	b.n	8003dfe <HAL_TIM_PWM_Start+0x92>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2243      	movs	r2, #67	; 0x43
 8003df2:	5c9b      	ldrb	r3, [r3, r2]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	1e5a      	subs	r2, r3, #1
 8003dfa:	4193      	sbcs	r3, r2
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e081      	b.n	8003f0a <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d104      	bne.n	8003e16 <HAL_TIM_PWM_Start+0xaa>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	223e      	movs	r2, #62	; 0x3e
 8003e10:	2102      	movs	r1, #2
 8003e12:	5499      	strb	r1, [r3, r2]
 8003e14:	e023      	b.n	8003e5e <HAL_TIM_PWM_Start+0xf2>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d104      	bne.n	8003e26 <HAL_TIM_PWM_Start+0xba>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	223f      	movs	r2, #63	; 0x3f
 8003e20:	2102      	movs	r1, #2
 8003e22:	5499      	strb	r1, [r3, r2]
 8003e24:	e01b      	b.n	8003e5e <HAL_TIM_PWM_Start+0xf2>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d104      	bne.n	8003e36 <HAL_TIM_PWM_Start+0xca>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2240      	movs	r2, #64	; 0x40
 8003e30:	2102      	movs	r1, #2
 8003e32:	5499      	strb	r1, [r3, r2]
 8003e34:	e013      	b.n	8003e5e <HAL_TIM_PWM_Start+0xf2>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b0c      	cmp	r3, #12
 8003e3a:	d104      	bne.n	8003e46 <HAL_TIM_PWM_Start+0xda>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2241      	movs	r2, #65	; 0x41
 8003e40:	2102      	movs	r1, #2
 8003e42:	5499      	strb	r1, [r3, r2]
 8003e44:	e00b      	b.n	8003e5e <HAL_TIM_PWM_Start+0xf2>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b10      	cmp	r3, #16
 8003e4a:	d104      	bne.n	8003e56 <HAL_TIM_PWM_Start+0xea>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2242      	movs	r2, #66	; 0x42
 8003e50:	2102      	movs	r1, #2
 8003e52:	5499      	strb	r1, [r3, r2]
 8003e54:	e003      	b.n	8003e5e <HAL_TIM_PWM_Start+0xf2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2243      	movs	r2, #67	; 0x43
 8003e5a:	2102      	movs	r1, #2
 8003e5c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6839      	ldr	r1, [r7, #0]
 8003e64:	2201      	movs	r2, #1
 8003e66:	0018      	movs	r0, r3
 8003e68:	f000 fc70 	bl	800474c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a28      	ldr	r2, [pc, #160]	; (8003f14 <HAL_TIM_PWM_Start+0x1a8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d009      	beq.n	8003e8a <HAL_TIM_PWM_Start+0x11e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a27      	ldr	r2, [pc, #156]	; (8003f18 <HAL_TIM_PWM_Start+0x1ac>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <HAL_TIM_PWM_Start+0x11e>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a25      	ldr	r2, [pc, #148]	; (8003f1c <HAL_TIM_PWM_Start+0x1b0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <HAL_TIM_PWM_Start+0x122>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <HAL_TIM_PWM_Start+0x124>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2180      	movs	r1, #128	; 0x80
 8003ea0:	0209      	lsls	r1, r1, #8
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1a      	ldr	r2, [pc, #104]	; (8003f14 <HAL_TIM_PWM_Start+0x1a8>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00a      	beq.n	8003ec6 <HAL_TIM_PWM_Start+0x15a>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	2380      	movs	r3, #128	; 0x80
 8003eb6:	05db      	lsls	r3, r3, #23
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d004      	beq.n	8003ec6 <HAL_TIM_PWM_Start+0x15a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a17      	ldr	r2, [pc, #92]	; (8003f20 <HAL_TIM_PWM_Start+0x1b4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d116      	bne.n	8003ef4 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4a15      	ldr	r2, [pc, #84]	; (8003f24 <HAL_TIM_PWM_Start+0x1b8>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b06      	cmp	r3, #6
 8003ed6:	d016      	beq.n	8003f06 <HAL_TIM_PWM_Start+0x19a>
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	025b      	lsls	r3, r3, #9
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d011      	beq.n	8003f06 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2101      	movs	r1, #1
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef2:	e008      	b.n	8003f06 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2101      	movs	r1, #1
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e000      	b.n	8003f08 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f06:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b004      	add	sp, #16
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	40012c00 	.word	0x40012c00
 8003f18:	40014400 	.word	0x40014400
 8003f1c:	40014800 	.word	0x40014800
 8003f20:	40000400 	.word	0x40000400
 8003f24:	00010007 	.word	0x00010007

08003f28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f34:	2317      	movs	r3, #23
 8003f36:	18fb      	adds	r3, r7, r3
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	223c      	movs	r2, #60	; 0x3c
 8003f40:	5c9b      	ldrb	r3, [r3, r2]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e0e5      	b.n	8004116 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	223c      	movs	r2, #60	; 0x3c
 8003f4e:	2101      	movs	r1, #1
 8003f50:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b14      	cmp	r3, #20
 8003f56:	d900      	bls.n	8003f5a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003f58:	e0d1      	b.n	80040fe <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	009a      	lsls	r2, r3, #2
 8003f5e:	4b70      	ldr	r3, [pc, #448]	; (8004120 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003f60:	18d3      	adds	r3, r2, r3
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	0011      	movs	r1, r2
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f000 f950 	bl	8004214 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699a      	ldr	r2, [r3, #24]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2108      	movs	r1, #8
 8003f80:	430a      	orrs	r2, r1
 8003f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2104      	movs	r1, #4
 8003f90:	438a      	bics	r2, r1
 8003f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6999      	ldr	r1, [r3, #24]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	619a      	str	r2, [r3, #24]
      break;
 8003fa6:	e0af      	b.n	8004108 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	0011      	movs	r1, r2
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f000 f9af 	bl	8004314 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	699a      	ldr	r2, [r3, #24]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2180      	movs	r1, #128	; 0x80
 8003fc2:	0109      	lsls	r1, r1, #4
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4954      	ldr	r1, [pc, #336]	; (8004124 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003fd4:	400a      	ands	r2, r1
 8003fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6999      	ldr	r1, [r3, #24]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	021a      	lsls	r2, r3, #8
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	619a      	str	r2, [r3, #24]
      break;
 8003fec:	e08c      	b.n	8004108 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	0011      	movs	r1, r2
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f000 fa0a 	bl	8004410 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	69da      	ldr	r2, [r3, #28]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2108      	movs	r1, #8
 8004008:	430a      	orrs	r2, r1
 800400a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2104      	movs	r1, #4
 8004018:	438a      	bics	r2, r1
 800401a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	69d9      	ldr	r1, [r3, #28]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	61da      	str	r2, [r3, #28]
      break;
 800402e:	e06b      	b.n	8004108 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	0011      	movs	r1, r2
 8004038:	0018      	movs	r0, r3
 800403a:	f000 fa6b 	bl	8004514 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2180      	movs	r1, #128	; 0x80
 800404a:	0109      	lsls	r1, r1, #4
 800404c:	430a      	orrs	r2, r1
 800404e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69da      	ldr	r2, [r3, #28]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4932      	ldr	r1, [pc, #200]	; (8004124 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800405c:	400a      	ands	r2, r1
 800405e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69d9      	ldr	r1, [r3, #28]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	021a      	lsls	r2, r3, #8
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	61da      	str	r2, [r3, #28]
      break;
 8004074:	e048      	b.n	8004108 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	0011      	movs	r1, r2
 800407e:	0018      	movs	r0, r3
 8004080:	f000 faac 	bl	80045dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2108      	movs	r1, #8
 8004090:	430a      	orrs	r2, r1
 8004092:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2104      	movs	r1, #4
 80040a0:	438a      	bics	r2, r1
 80040a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040b6:	e027      	b.n	8004108 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	0011      	movs	r1, r2
 80040c0:	0018      	movs	r0, r3
 80040c2:	f000 fae5 	bl	8004690 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2180      	movs	r1, #128	; 0x80
 80040d2:	0109      	lsls	r1, r1, #4
 80040d4:	430a      	orrs	r2, r1
 80040d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4910      	ldr	r1, [pc, #64]	; (8004124 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80040e4:	400a      	ands	r2, r1
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	021a      	lsls	r2, r3, #8
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040fc:	e004      	b.n	8004108 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80040fe:	2317      	movs	r3, #23
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	2201      	movs	r2, #1
 8004104:	701a      	strb	r2, [r3, #0]
      break;
 8004106:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	223c      	movs	r2, #60	; 0x3c
 800410c:	2100      	movs	r1, #0
 800410e:	5499      	strb	r1, [r3, r2]

  return status;
 8004110:	2317      	movs	r3, #23
 8004112:	18fb      	adds	r3, r7, r3
 8004114:	781b      	ldrb	r3, [r3, #0]
}
 8004116:	0018      	movs	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	b006      	add	sp, #24
 800411c:	bd80      	pop	{r7, pc}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	08006864 	.word	0x08006864
 8004124:	fffffbff 	.word	0xfffffbff

08004128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a30      	ldr	r2, [pc, #192]	; (80041fc <TIM_Base_SetConfig+0xd4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d008      	beq.n	8004152 <TIM_Base_SetConfig+0x2a>
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	2380      	movs	r3, #128	; 0x80
 8004144:	05db      	lsls	r3, r3, #23
 8004146:	429a      	cmp	r2, r3
 8004148:	d003      	beq.n	8004152 <TIM_Base_SetConfig+0x2a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a2c      	ldr	r2, [pc, #176]	; (8004200 <TIM_Base_SetConfig+0xd8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d108      	bne.n	8004164 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2270      	movs	r2, #112	; 0x70
 8004156:	4393      	bics	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4313      	orrs	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a25      	ldr	r2, [pc, #148]	; (80041fc <TIM_Base_SetConfig+0xd4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d014      	beq.n	8004196 <TIM_Base_SetConfig+0x6e>
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	05db      	lsls	r3, r3, #23
 8004172:	429a      	cmp	r2, r3
 8004174:	d00f      	beq.n	8004196 <TIM_Base_SetConfig+0x6e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a21      	ldr	r2, [pc, #132]	; (8004200 <TIM_Base_SetConfig+0xd8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00b      	beq.n	8004196 <TIM_Base_SetConfig+0x6e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a20      	ldr	r2, [pc, #128]	; (8004204 <TIM_Base_SetConfig+0xdc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d007      	beq.n	8004196 <TIM_Base_SetConfig+0x6e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a1f      	ldr	r2, [pc, #124]	; (8004208 <TIM_Base_SetConfig+0xe0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_Base_SetConfig+0x6e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a1e      	ldr	r2, [pc, #120]	; (800420c <TIM_Base_SetConfig+0xe4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d108      	bne.n	80041a8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4a1d      	ldr	r2, [pc, #116]	; (8004210 <TIM_Base_SetConfig+0xe8>)
 800419a:	4013      	ands	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2280      	movs	r2, #128	; 0x80
 80041ac:	4393      	bics	r3, r2
 80041ae:	001a      	movs	r2, r3
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <TIM_Base_SetConfig+0xd4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d007      	beq.n	80041e6 <TIM_Base_SetConfig+0xbe>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a0b      	ldr	r2, [pc, #44]	; (8004208 <TIM_Base_SetConfig+0xe0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_Base_SetConfig+0xbe>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a0a      	ldr	r2, [pc, #40]	; (800420c <TIM_Base_SetConfig+0xe4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d103      	bne.n	80041ee <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	615a      	str	r2, [r3, #20]
}
 80041f4:	46c0      	nop			; (mov r8, r8)
 80041f6:	46bd      	mov	sp, r7
 80041f8:	b004      	add	sp, #16
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40012c00 	.word	0x40012c00
 8004200:	40000400 	.word	0x40000400
 8004204:	40002000 	.word	0x40002000
 8004208:	40014400 	.word	0x40014400
 800420c:	40014800 	.word	0x40014800
 8004210:	fffffcff 	.word	0xfffffcff

08004214 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	2201      	movs	r2, #1
 8004224:	4393      	bics	r3, r2
 8004226:	001a      	movs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4a2e      	ldr	r2, [pc, #184]	; (80042fc <TIM_OC1_SetConfig+0xe8>)
 8004242:	4013      	ands	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2203      	movs	r2, #3
 800424a:	4393      	bics	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2202      	movs	r2, #2
 800425c:	4393      	bics	r3, r2
 800425e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a24      	ldr	r2, [pc, #144]	; (8004300 <TIM_OC1_SetConfig+0xec>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d007      	beq.n	8004282 <TIM_OC1_SetConfig+0x6e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a23      	ldr	r2, [pc, #140]	; (8004304 <TIM_OC1_SetConfig+0xf0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d003      	beq.n	8004282 <TIM_OC1_SetConfig+0x6e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a22      	ldr	r2, [pc, #136]	; (8004308 <TIM_OC1_SetConfig+0xf4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d10c      	bne.n	800429c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2208      	movs	r2, #8
 8004286:	4393      	bics	r3, r2
 8004288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2204      	movs	r2, #4
 8004298:	4393      	bics	r3, r2
 800429a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a18      	ldr	r2, [pc, #96]	; (8004300 <TIM_OC1_SetConfig+0xec>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d007      	beq.n	80042b4 <TIM_OC1_SetConfig+0xa0>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a17      	ldr	r2, [pc, #92]	; (8004304 <TIM_OC1_SetConfig+0xf0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d003      	beq.n	80042b4 <TIM_OC1_SetConfig+0xa0>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a16      	ldr	r2, [pc, #88]	; (8004308 <TIM_OC1_SetConfig+0xf4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d111      	bne.n	80042d8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4a15      	ldr	r2, [pc, #84]	; (800430c <TIM_OC1_SetConfig+0xf8>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4a14      	ldr	r2, [pc, #80]	; (8004310 <TIM_OC1_SetConfig+0xfc>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	621a      	str	r2, [r3, #32]
}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b006      	add	sp, #24
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	fffeff8f 	.word	0xfffeff8f
 8004300:	40012c00 	.word	0x40012c00
 8004304:	40014400 	.word	0x40014400
 8004308:	40014800 	.word	0x40014800
 800430c:	fffffeff 	.word	0xfffffeff
 8004310:	fffffdff 	.word	0xfffffdff

08004314 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	2210      	movs	r2, #16
 8004324:	4393      	bics	r3, r2
 8004326:	001a      	movs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4a2c      	ldr	r2, [pc, #176]	; (80043f4 <TIM_OC2_SetConfig+0xe0>)
 8004342:	4013      	ands	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4a2b      	ldr	r2, [pc, #172]	; (80043f8 <TIM_OC2_SetConfig+0xe4>)
 800434a:	4013      	ands	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2220      	movs	r2, #32
 800435e:	4393      	bics	r3, r2
 8004360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a22      	ldr	r2, [pc, #136]	; (80043fc <TIM_OC2_SetConfig+0xe8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d10d      	bne.n	8004392 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2280      	movs	r2, #128	; 0x80
 800437a:	4393      	bics	r3, r2
 800437c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2240      	movs	r2, #64	; 0x40
 800438e:	4393      	bics	r3, r2
 8004390:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a19      	ldr	r2, [pc, #100]	; (80043fc <TIM_OC2_SetConfig+0xe8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d007      	beq.n	80043aa <TIM_OC2_SetConfig+0x96>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a18      	ldr	r2, [pc, #96]	; (8004400 <TIM_OC2_SetConfig+0xec>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d003      	beq.n	80043aa <TIM_OC2_SetConfig+0x96>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a17      	ldr	r2, [pc, #92]	; (8004404 <TIM_OC2_SetConfig+0xf0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d113      	bne.n	80043d2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4a16      	ldr	r2, [pc, #88]	; (8004408 <TIM_OC2_SetConfig+0xf4>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4a15      	ldr	r2, [pc, #84]	; (800440c <TIM_OC2_SetConfig+0xf8>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	621a      	str	r2, [r3, #32]
}
 80043ec:	46c0      	nop			; (mov r8, r8)
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b006      	add	sp, #24
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	feff8fff 	.word	0xfeff8fff
 80043f8:	fffffcff 	.word	0xfffffcff
 80043fc:	40012c00 	.word	0x40012c00
 8004400:	40014400 	.word	0x40014400
 8004404:	40014800 	.word	0x40014800
 8004408:	fffffbff 	.word	0xfffffbff
 800440c:	fffff7ff 	.word	0xfffff7ff

08004410 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	4a33      	ldr	r2, [pc, #204]	; (80044ec <TIM_OC3_SetConfig+0xdc>)
 8004420:	401a      	ands	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a2d      	ldr	r2, [pc, #180]	; (80044f0 <TIM_OC3_SetConfig+0xe0>)
 800443c:	4013      	ands	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2203      	movs	r2, #3
 8004444:	4393      	bics	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	4a27      	ldr	r2, [pc, #156]	; (80044f4 <TIM_OC3_SetConfig+0xe4>)
 8004456:	4013      	ands	r3, r2
 8004458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a23      	ldr	r2, [pc, #140]	; (80044f8 <TIM_OC3_SetConfig+0xe8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d10d      	bne.n	800448a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	4a22      	ldr	r2, [pc, #136]	; (80044fc <TIM_OC3_SetConfig+0xec>)
 8004472:	4013      	ands	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	4a1e      	ldr	r2, [pc, #120]	; (8004500 <TIM_OC3_SetConfig+0xf0>)
 8004486:	4013      	ands	r3, r2
 8004488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a1a      	ldr	r2, [pc, #104]	; (80044f8 <TIM_OC3_SetConfig+0xe8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d007      	beq.n	80044a2 <TIM_OC3_SetConfig+0x92>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a1b      	ldr	r2, [pc, #108]	; (8004504 <TIM_OC3_SetConfig+0xf4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d003      	beq.n	80044a2 <TIM_OC3_SetConfig+0x92>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a1a      	ldr	r2, [pc, #104]	; (8004508 <TIM_OC3_SetConfig+0xf8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d113      	bne.n	80044ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4a19      	ldr	r2, [pc, #100]	; (800450c <TIM_OC3_SetConfig+0xfc>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4a18      	ldr	r2, [pc, #96]	; (8004510 <TIM_OC3_SetConfig+0x100>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	621a      	str	r2, [r3, #32]
}
 80044e4:	46c0      	nop			; (mov r8, r8)
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b006      	add	sp, #24
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	fffffeff 	.word	0xfffffeff
 80044f0:	fffeff8f 	.word	0xfffeff8f
 80044f4:	fffffdff 	.word	0xfffffdff
 80044f8:	40012c00 	.word	0x40012c00
 80044fc:	fffff7ff 	.word	0xfffff7ff
 8004500:	fffffbff 	.word	0xfffffbff
 8004504:	40014400 	.word	0x40014400
 8004508:	40014800 	.word	0x40014800
 800450c:	ffffefff 	.word	0xffffefff
 8004510:	ffffdfff 	.word	0xffffdfff

08004514 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	4a26      	ldr	r2, [pc, #152]	; (80045bc <TIM_OC4_SetConfig+0xa8>)
 8004524:	401a      	ands	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4a20      	ldr	r2, [pc, #128]	; (80045c0 <TIM_OC4_SetConfig+0xac>)
 8004540:	4013      	ands	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4a1f      	ldr	r2, [pc, #124]	; (80045c4 <TIM_OC4_SetConfig+0xb0>)
 8004548:	4013      	ands	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4a1b      	ldr	r2, [pc, #108]	; (80045c8 <TIM_OC4_SetConfig+0xb4>)
 800455c:	4013      	ands	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	031b      	lsls	r3, r3, #12
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a17      	ldr	r2, [pc, #92]	; (80045cc <TIM_OC4_SetConfig+0xb8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d007      	beq.n	8004584 <TIM_OC4_SetConfig+0x70>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a16      	ldr	r2, [pc, #88]	; (80045d0 <TIM_OC4_SetConfig+0xbc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d003      	beq.n	8004584 <TIM_OC4_SetConfig+0x70>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a15      	ldr	r2, [pc, #84]	; (80045d4 <TIM_OC4_SetConfig+0xc0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d109      	bne.n	8004598 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	4a14      	ldr	r2, [pc, #80]	; (80045d8 <TIM_OC4_SetConfig+0xc4>)
 8004588:	4013      	ands	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	019b      	lsls	r3, r3, #6
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	621a      	str	r2, [r3, #32]
}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b006      	add	sp, #24
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	ffffefff 	.word	0xffffefff
 80045c0:	feff8fff 	.word	0xfeff8fff
 80045c4:	fffffcff 	.word	0xfffffcff
 80045c8:	ffffdfff 	.word	0xffffdfff
 80045cc:	40012c00 	.word	0x40012c00
 80045d0:	40014400 	.word	0x40014400
 80045d4:	40014800 	.word	0x40014800
 80045d8:	ffffbfff 	.word	0xffffbfff

080045dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	4a23      	ldr	r2, [pc, #140]	; (8004678 <TIM_OC5_SetConfig+0x9c>)
 80045ec:	401a      	ands	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4a1d      	ldr	r2, [pc, #116]	; (800467c <TIM_OC5_SetConfig+0xa0>)
 8004608:	4013      	ands	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4a19      	ldr	r2, [pc, #100]	; (8004680 <TIM_OC5_SetConfig+0xa4>)
 800461a:	4013      	ands	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	041b      	lsls	r3, r3, #16
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a15      	ldr	r2, [pc, #84]	; (8004684 <TIM_OC5_SetConfig+0xa8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d007      	beq.n	8004642 <TIM_OC5_SetConfig+0x66>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a14      	ldr	r2, [pc, #80]	; (8004688 <TIM_OC5_SetConfig+0xac>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d003      	beq.n	8004642 <TIM_OC5_SetConfig+0x66>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a13      	ldr	r2, [pc, #76]	; (800468c <TIM_OC5_SetConfig+0xb0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d109      	bne.n	8004656 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	4a0c      	ldr	r2, [pc, #48]	; (8004678 <TIM_OC5_SetConfig+0x9c>)
 8004646:	4013      	ands	r3, r2
 8004648:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	621a      	str	r2, [r3, #32]
}
 8004670:	46c0      	nop			; (mov r8, r8)
 8004672:	46bd      	mov	sp, r7
 8004674:	b006      	add	sp, #24
 8004676:	bd80      	pop	{r7, pc}
 8004678:	fffeffff 	.word	0xfffeffff
 800467c:	fffeff8f 	.word	0xfffeff8f
 8004680:	fffdffff 	.word	0xfffdffff
 8004684:	40012c00 	.word	0x40012c00
 8004688:	40014400 	.word	0x40014400
 800468c:	40014800 	.word	0x40014800

08004690 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	4a24      	ldr	r2, [pc, #144]	; (8004730 <TIM_OC6_SetConfig+0xa0>)
 80046a0:	401a      	ands	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4a1e      	ldr	r2, [pc, #120]	; (8004734 <TIM_OC6_SetConfig+0xa4>)
 80046bc:	4013      	ands	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	021b      	lsls	r3, r3, #8
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4a1a      	ldr	r2, [pc, #104]	; (8004738 <TIM_OC6_SetConfig+0xa8>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	051b      	lsls	r3, r3, #20
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a16      	ldr	r2, [pc, #88]	; (800473c <TIM_OC6_SetConfig+0xac>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d007      	beq.n	80046f8 <TIM_OC6_SetConfig+0x68>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a15      	ldr	r2, [pc, #84]	; (8004740 <TIM_OC6_SetConfig+0xb0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_OC6_SetConfig+0x68>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a14      	ldr	r2, [pc, #80]	; (8004744 <TIM_OC6_SetConfig+0xb4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d109      	bne.n	800470c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	4a13      	ldr	r2, [pc, #76]	; (8004748 <TIM_OC6_SetConfig+0xb8>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	029b      	lsls	r3, r3, #10
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	621a      	str	r2, [r3, #32]
}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	46bd      	mov	sp, r7
 800472a:	b006      	add	sp, #24
 800472c:	bd80      	pop	{r7, pc}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	ffefffff 	.word	0xffefffff
 8004734:	feff8fff 	.word	0xfeff8fff
 8004738:	ffdfffff 	.word	0xffdfffff
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40014400 	.word	0x40014400
 8004744:	40014800 	.word	0x40014800
 8004748:	fffbffff 	.word	0xfffbffff

0800474c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	221f      	movs	r2, #31
 800475c:	4013      	ands	r3, r2
 800475e:	2201      	movs	r2, #1
 8004760:	409a      	lsls	r2, r3
 8004762:	0013      	movs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	43d2      	mvns	r2, r2
 800476e:	401a      	ands	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a1a      	ldr	r2, [r3, #32]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	211f      	movs	r1, #31
 800477c:	400b      	ands	r3, r1
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	4099      	lsls	r1, r3
 8004782:	000b      	movs	r3, r1
 8004784:	431a      	orrs	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	621a      	str	r2, [r3, #32]
}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	46bd      	mov	sp, r7
 800478e:	b006      	add	sp, #24
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	223c      	movs	r2, #60	; 0x3c
 80047a2:	5c9b      	ldrb	r3, [r3, r2]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e050      	b.n	800484e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	223c      	movs	r2, #60	; 0x3c
 80047b0:	2101      	movs	r1, #1
 80047b2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	223d      	movs	r2, #61	; 0x3d
 80047b8:	2102      	movs	r1, #2
 80047ba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a21      	ldr	r2, [pc, #132]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d108      	bne.n	80047e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4a20      	ldr	r2, [pc, #128]	; (800485c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047da:	4013      	ands	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2270      	movs	r2, #112	; 0x70
 80047ec:	4393      	bics	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a14      	ldr	r2, [pc, #80]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00a      	beq.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	2380      	movs	r3, #128	; 0x80
 8004812:	05db      	lsls	r3, r3, #23
 8004814:	429a      	cmp	r2, r3
 8004816:	d004      	beq.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a10      	ldr	r2, [pc, #64]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d10c      	bne.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2280      	movs	r2, #128	; 0x80
 8004826:	4393      	bics	r3, r2
 8004828:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	4313      	orrs	r3, r2
 8004832:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	223d      	movs	r2, #61	; 0x3d
 8004840:	2101      	movs	r1, #1
 8004842:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	223c      	movs	r2, #60	; 0x3c
 8004848:	2100      	movs	r1, #0
 800484a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	0018      	movs	r0, r3
 8004850:	46bd      	mov	sp, r7
 8004852:	b004      	add	sp, #16
 8004854:	bd80      	pop	{r7, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	40012c00 	.word	0x40012c00
 800485c:	ff0fffff 	.word	0xff0fffff
 8004860:	40000400 	.word	0x40000400

08004864 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	223c      	movs	r2, #60	; 0x3c
 8004876:	5c9b      	ldrb	r3, [r3, r2]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800487c:	2302      	movs	r3, #2
 800487e:	e079      	b.n	8004974 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	223c      	movs	r2, #60	; 0x3c
 8004884:	2101      	movs	r1, #1
 8004886:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	22ff      	movs	r2, #255	; 0xff
 800488c:	4393      	bics	r3, r2
 800488e:	001a      	movs	r2, r3
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4a38      	ldr	r2, [pc, #224]	; (800497c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800489c:	401a      	ands	r2, r3
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4a35      	ldr	r2, [pc, #212]	; (8004980 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80048aa:	401a      	ands	r2, r3
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a33      	ldr	r2, [pc, #204]	; (8004984 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80048b8:	401a      	ands	r2, r3
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4a30      	ldr	r2, [pc, #192]	; (8004988 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80048c6:	401a      	ands	r2, r3
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a2e      	ldr	r2, [pc, #184]	; (800498c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80048d4:	401a      	ands	r2, r3
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4a2b      	ldr	r2, [pc, #172]	; (8004990 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80048e2:	401a      	ands	r2, r3
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4a29      	ldr	r2, [pc, #164]	; (8004994 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80048f0:	401a      	ands	r2, r3
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	041b      	lsls	r3, r3, #16
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a25      	ldr	r2, [pc, #148]	; (8004998 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d106      	bne.n	8004914 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4a24      	ldr	r2, [pc, #144]	; (800499c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800490a:	401a      	ands	r2, r3
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	4313      	orrs	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1f      	ldr	r2, [pc, #124]	; (8004998 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d121      	bne.n	8004962 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4a1f      	ldr	r2, [pc, #124]	; (80049a0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004922:	401a      	ands	r2, r3
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004928:	051b      	lsls	r3, r3, #20
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a1c      	ldr	r2, [pc, #112]	; (80049a4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004932:	401a      	ands	r2, r3
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4a1a      	ldr	r2, [pc, #104]	; (80049a8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004940:	401a      	ands	r2, r3
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a12      	ldr	r2, [pc, #72]	; (8004998 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d106      	bne.n	8004962 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4a15      	ldr	r2, [pc, #84]	; (80049ac <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004958:	401a      	ands	r2, r3
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	223c      	movs	r2, #60	; 0x3c
 800496e:	2100      	movs	r1, #0
 8004970:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	0018      	movs	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	b004      	add	sp, #16
 800497a:	bd80      	pop	{r7, pc}
 800497c:	fffffcff 	.word	0xfffffcff
 8004980:	fffffbff 	.word	0xfffffbff
 8004984:	fffff7ff 	.word	0xfffff7ff
 8004988:	ffffefff 	.word	0xffffefff
 800498c:	ffffdfff 	.word	0xffffdfff
 8004990:	ffffbfff 	.word	0xffffbfff
 8004994:	fff0ffff 	.word	0xfff0ffff
 8004998:	40012c00 	.word	0x40012c00
 800499c:	efffffff 	.word	0xefffffff
 80049a0:	ff0fffff 	.word	0xff0fffff
 80049a4:	feffffff 	.word	0xfeffffff
 80049a8:	fdffffff 	.word	0xfdffffff
 80049ac:	dfffffff 	.word	0xdfffffff

080049b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e046      	b.n	8004a50 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2288      	movs	r2, #136	; 0x88
 80049c6:	589b      	ldr	r3, [r3, r2]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d107      	bne.n	80049dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2284      	movs	r2, #132	; 0x84
 80049d0:	2100      	movs	r1, #0
 80049d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	0018      	movs	r0, r3
 80049d8:	f7fc ff94 	bl	8001904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2288      	movs	r2, #136	; 0x88
 80049e0:	2124      	movs	r1, #36	; 0x24
 80049e2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2101      	movs	r1, #1
 80049f0:	438a      	bics	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	0018      	movs	r0, r3
 80049f8:	f000 f8cc 	bl	8004b94 <UART_SetConfig>
 80049fc:	0003      	movs	r3, r0
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e024      	b.n	8004a50 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	0018      	movs	r0, r3
 8004a12:	f000 fb37 	bl	8005084 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	490d      	ldr	r1, [pc, #52]	; (8004a58 <HAL_UART_Init+0xa8>)
 8004a22:	400a      	ands	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	212a      	movs	r1, #42	; 0x2a
 8004a32:	438a      	bics	r2, r1
 8004a34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2101      	movs	r1, #1
 8004a42:	430a      	orrs	r2, r1
 8004a44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f000 fbcf 	bl	80051ec <UART_CheckIdleState>
 8004a4e:	0003      	movs	r3, r0
}
 8004a50:	0018      	movs	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	b002      	add	sp, #8
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	ffffb7ff 	.word	0xffffb7ff

08004a5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08a      	sub	sp, #40	; 0x28
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	1dbb      	adds	r3, r7, #6
 8004a6a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2288      	movs	r2, #136	; 0x88
 8004a70:	589b      	ldr	r3, [r3, r2]
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	d000      	beq.n	8004a78 <HAL_UART_Transmit+0x1c>
 8004a76:	e088      	b.n	8004b8a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_UART_Transmit+0x2a>
 8004a7e:	1dbb      	adds	r3, r7, #6
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e080      	b.n	8004b8c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	2380      	movs	r3, #128	; 0x80
 8004a90:	015b      	lsls	r3, r3, #5
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d109      	bne.n	8004aaa <HAL_UART_Transmit+0x4e>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d105      	bne.n	8004aaa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d001      	beq.n	8004aaa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e070      	b.n	8004b8c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2290      	movs	r2, #144	; 0x90
 8004aae:	2100      	movs	r1, #0
 8004ab0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2288      	movs	r2, #136	; 0x88
 8004ab6:	2121      	movs	r1, #33	; 0x21
 8004ab8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aba:	f7fd f901 	bl	8001cc0 <HAL_GetTick>
 8004abe:	0003      	movs	r3, r0
 8004ac0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1dba      	adds	r2, r7, #6
 8004ac6:	2154      	movs	r1, #84	; 0x54
 8004ac8:	8812      	ldrh	r2, [r2, #0]
 8004aca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1dba      	adds	r2, r7, #6
 8004ad0:	2156      	movs	r1, #86	; 0x56
 8004ad2:	8812      	ldrh	r2, [r2, #0]
 8004ad4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	2380      	movs	r3, #128	; 0x80
 8004adc:	015b      	lsls	r3, r3, #5
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d108      	bne.n	8004af4 <HAL_UART_Transmit+0x98>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d104      	bne.n	8004af4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	61bb      	str	r3, [r7, #24]
 8004af2:	e003      	b.n	8004afc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004afc:	e02c      	b.n	8004b58 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	0013      	movs	r3, r2
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2180      	movs	r1, #128	; 0x80
 8004b0c:	f000 fbbc 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 8004b10:	1e03      	subs	r3, r0, #0
 8004b12:	d001      	beq.n	8004b18 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e039      	b.n	8004b8c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10b      	bne.n	8004b36 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	001a      	movs	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	05d2      	lsls	r2, r2, #23
 8004b2a:	0dd2      	lsrs	r2, r2, #23
 8004b2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	3302      	adds	r3, #2
 8004b32:	61bb      	str	r3, [r7, #24]
 8004b34:	e007      	b.n	8004b46 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	781a      	ldrb	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	3301      	adds	r3, #1
 8004b44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2256      	movs	r2, #86	; 0x56
 8004b4a:	5a9b      	ldrh	r3, [r3, r2]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b299      	uxth	r1, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2256      	movs	r2, #86	; 0x56
 8004b56:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2256      	movs	r2, #86	; 0x56
 8004b5c:	5a9b      	ldrh	r3, [r3, r2]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1cc      	bne.n	8004afe <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	0013      	movs	r3, r2
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2140      	movs	r1, #64	; 0x40
 8004b72:	f000 fb89 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 8004b76:	1e03      	subs	r3, r0, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e006      	b.n	8004b8c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2288      	movs	r2, #136	; 0x88
 8004b82:	2120      	movs	r1, #32
 8004b84:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	e000      	b.n	8004b8c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004b8a:	2302      	movs	r3, #2
  }
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b008      	add	sp, #32
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b94:	b5b0      	push	{r4, r5, r7, lr}
 8004b96:	b090      	sub	sp, #64	; 0x40
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b9c:	231a      	movs	r3, #26
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	189b      	adds	r3, r3, r2
 8004ba2:	19db      	adds	r3, r3, r7
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4ac4      	ldr	r2, [pc, #784]	; (8004ed8 <UART_SetConfig+0x344>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	0019      	movs	r1, r3
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd2:	430b      	orrs	r3, r1
 8004bd4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	4abf      	ldr	r2, [pc, #764]	; (8004edc <UART_SetConfig+0x348>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	0018      	movs	r0, r3
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	68d9      	ldr	r1, [r3, #12]
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	0003      	movs	r3, r0
 8004bec:	430b      	orrs	r3, r1
 8004bee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4ab9      	ldr	r2, [pc, #740]	; (8004ee0 <UART_SetConfig+0x34c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c06:	4313      	orrs	r3, r2
 8004c08:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	4ab4      	ldr	r2, [pc, #720]	; (8004ee4 <UART_SetConfig+0x350>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	0019      	movs	r1, r3
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	220f      	movs	r2, #15
 8004c28:	4393      	bics	r3, r2
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	0003      	movs	r3, r0
 8004c36:	430b      	orrs	r3, r1
 8004c38:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4aaa      	ldr	r2, [pc, #680]	; (8004ee8 <UART_SetConfig+0x354>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d131      	bne.n	8004ca8 <UART_SetConfig+0x114>
 8004c44:	4ba9      	ldr	r3, [pc, #676]	; (8004eec <UART_SetConfig+0x358>)
 8004c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c48:	2203      	movs	r2, #3
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d01d      	beq.n	8004c8c <UART_SetConfig+0xf8>
 8004c50:	d823      	bhi.n	8004c9a <UART_SetConfig+0x106>
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d00c      	beq.n	8004c70 <UART_SetConfig+0xdc>
 8004c56:	d820      	bhi.n	8004c9a <UART_SetConfig+0x106>
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <UART_SetConfig+0xce>
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d00e      	beq.n	8004c7e <UART_SetConfig+0xea>
 8004c60:	e01b      	b.n	8004c9a <UART_SetConfig+0x106>
 8004c62:	231b      	movs	r3, #27
 8004c64:	2220      	movs	r2, #32
 8004c66:	189b      	adds	r3, r3, r2
 8004c68:	19db      	adds	r3, r3, r7
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	701a      	strb	r2, [r3, #0]
 8004c6e:	e071      	b.n	8004d54 <UART_SetConfig+0x1c0>
 8004c70:	231b      	movs	r3, #27
 8004c72:	2220      	movs	r2, #32
 8004c74:	189b      	adds	r3, r3, r2
 8004c76:	19db      	adds	r3, r3, r7
 8004c78:	2202      	movs	r2, #2
 8004c7a:	701a      	strb	r2, [r3, #0]
 8004c7c:	e06a      	b.n	8004d54 <UART_SetConfig+0x1c0>
 8004c7e:	231b      	movs	r3, #27
 8004c80:	2220      	movs	r2, #32
 8004c82:	189b      	adds	r3, r3, r2
 8004c84:	19db      	adds	r3, r3, r7
 8004c86:	2204      	movs	r2, #4
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	e063      	b.n	8004d54 <UART_SetConfig+0x1c0>
 8004c8c:	231b      	movs	r3, #27
 8004c8e:	2220      	movs	r2, #32
 8004c90:	189b      	adds	r3, r3, r2
 8004c92:	19db      	adds	r3, r3, r7
 8004c94:	2208      	movs	r2, #8
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	e05c      	b.n	8004d54 <UART_SetConfig+0x1c0>
 8004c9a:	231b      	movs	r3, #27
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	189b      	adds	r3, r3, r2
 8004ca0:	19db      	adds	r3, r3, r7
 8004ca2:	2210      	movs	r2, #16
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	e055      	b.n	8004d54 <UART_SetConfig+0x1c0>
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a90      	ldr	r2, [pc, #576]	; (8004ef0 <UART_SetConfig+0x35c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d106      	bne.n	8004cc0 <UART_SetConfig+0x12c>
 8004cb2:	231b      	movs	r3, #27
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	189b      	adds	r3, r3, r2
 8004cb8:	19db      	adds	r3, r3, r7
 8004cba:	2200      	movs	r2, #0
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	e049      	b.n	8004d54 <UART_SetConfig+0x1c0>
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a86      	ldr	r2, [pc, #536]	; (8004ee0 <UART_SetConfig+0x34c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d13e      	bne.n	8004d48 <UART_SetConfig+0x1b4>
 8004cca:	4b88      	ldr	r3, [pc, #544]	; (8004eec <UART_SetConfig+0x358>)
 8004ccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cce:	23c0      	movs	r3, #192	; 0xc0
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	22c0      	movs	r2, #192	; 0xc0
 8004cd6:	0112      	lsls	r2, r2, #4
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d027      	beq.n	8004d2c <UART_SetConfig+0x198>
 8004cdc:	22c0      	movs	r2, #192	; 0xc0
 8004cde:	0112      	lsls	r2, r2, #4
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d82a      	bhi.n	8004d3a <UART_SetConfig+0x1a6>
 8004ce4:	2280      	movs	r2, #128	; 0x80
 8004ce6:	0112      	lsls	r2, r2, #4
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d011      	beq.n	8004d10 <UART_SetConfig+0x17c>
 8004cec:	2280      	movs	r2, #128	; 0x80
 8004cee:	0112      	lsls	r2, r2, #4
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d822      	bhi.n	8004d3a <UART_SetConfig+0x1a6>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d004      	beq.n	8004d02 <UART_SetConfig+0x16e>
 8004cf8:	2280      	movs	r2, #128	; 0x80
 8004cfa:	00d2      	lsls	r2, r2, #3
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00e      	beq.n	8004d1e <UART_SetConfig+0x18a>
 8004d00:	e01b      	b.n	8004d3a <UART_SetConfig+0x1a6>
 8004d02:	231b      	movs	r3, #27
 8004d04:	2220      	movs	r2, #32
 8004d06:	189b      	adds	r3, r3, r2
 8004d08:	19db      	adds	r3, r3, r7
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	e021      	b.n	8004d54 <UART_SetConfig+0x1c0>
 8004d10:	231b      	movs	r3, #27
 8004d12:	2220      	movs	r2, #32
 8004d14:	189b      	adds	r3, r3, r2
 8004d16:	19db      	adds	r3, r3, r7
 8004d18:	2202      	movs	r2, #2
 8004d1a:	701a      	strb	r2, [r3, #0]
 8004d1c:	e01a      	b.n	8004d54 <UART_SetConfig+0x1c0>
 8004d1e:	231b      	movs	r3, #27
 8004d20:	2220      	movs	r2, #32
 8004d22:	189b      	adds	r3, r3, r2
 8004d24:	19db      	adds	r3, r3, r7
 8004d26:	2204      	movs	r2, #4
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	e013      	b.n	8004d54 <UART_SetConfig+0x1c0>
 8004d2c:	231b      	movs	r3, #27
 8004d2e:	2220      	movs	r2, #32
 8004d30:	189b      	adds	r3, r3, r2
 8004d32:	19db      	adds	r3, r3, r7
 8004d34:	2208      	movs	r2, #8
 8004d36:	701a      	strb	r2, [r3, #0]
 8004d38:	e00c      	b.n	8004d54 <UART_SetConfig+0x1c0>
 8004d3a:	231b      	movs	r3, #27
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	19db      	adds	r3, r3, r7
 8004d42:	2210      	movs	r2, #16
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	e005      	b.n	8004d54 <UART_SetConfig+0x1c0>
 8004d48:	231b      	movs	r3, #27
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	189b      	adds	r3, r3, r2
 8004d4e:	19db      	adds	r3, r3, r7
 8004d50:	2210      	movs	r2, #16
 8004d52:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a61      	ldr	r2, [pc, #388]	; (8004ee0 <UART_SetConfig+0x34c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d000      	beq.n	8004d60 <UART_SetConfig+0x1cc>
 8004d5e:	e092      	b.n	8004e86 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d60:	231b      	movs	r3, #27
 8004d62:	2220      	movs	r2, #32
 8004d64:	189b      	adds	r3, r3, r2
 8004d66:	19db      	adds	r3, r3, r7
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d015      	beq.n	8004d9a <UART_SetConfig+0x206>
 8004d6e:	dc18      	bgt.n	8004da2 <UART_SetConfig+0x20e>
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d00d      	beq.n	8004d90 <UART_SetConfig+0x1fc>
 8004d74:	dc15      	bgt.n	8004da2 <UART_SetConfig+0x20e>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <UART_SetConfig+0x1ec>
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d005      	beq.n	8004d8a <UART_SetConfig+0x1f6>
 8004d7e:	e010      	b.n	8004da2 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d80:	f7fd ff7c 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 8004d84:	0003      	movs	r3, r0
 8004d86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d88:	e014      	b.n	8004db4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d8a:	4b5a      	ldr	r3, [pc, #360]	; (8004ef4 <UART_SetConfig+0x360>)
 8004d8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d8e:	e011      	b.n	8004db4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d90:	f7fd fee8 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8004d94:	0003      	movs	r3, r0
 8004d96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d98:	e00c      	b.n	8004db4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004da0:	e008      	b.n	8004db4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004da6:	231a      	movs	r3, #26
 8004da8:	2220      	movs	r2, #32
 8004daa:	189b      	adds	r3, r3, r2
 8004dac:	19db      	adds	r3, r3, r7
 8004dae:	2201      	movs	r2, #1
 8004db0:	701a      	strb	r2, [r3, #0]
        break;
 8004db2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d100      	bne.n	8004dbc <UART_SetConfig+0x228>
 8004dba:	e147      	b.n	800504c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dc0:	4b4d      	ldr	r3, [pc, #308]	; (8004ef8 <UART_SetConfig+0x364>)
 8004dc2:	0052      	lsls	r2, r2, #1
 8004dc4:	5ad3      	ldrh	r3, [r2, r3]
 8004dc6:	0019      	movs	r1, r3
 8004dc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004dca:	f7fb f9a5 	bl	8000118 <__udivsi3>
 8004dce:	0003      	movs	r3, r0
 8004dd0:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	0013      	movs	r3, r2
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	189b      	adds	r3, r3, r2
 8004ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d305      	bcc.n	8004dee <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d906      	bls.n	8004dfc <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004dee:	231a      	movs	r3, #26
 8004df0:	2220      	movs	r2, #32
 8004df2:	189b      	adds	r3, r3, r2
 8004df4:	19db      	adds	r3, r3, r7
 8004df6:	2201      	movs	r2, #1
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	e127      	b.n	800504c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfe:	61bb      	str	r3, [r7, #24]
 8004e00:	2300      	movs	r3, #0
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e08:	4b3b      	ldr	r3, [pc, #236]	; (8004ef8 <UART_SetConfig+0x364>)
 8004e0a:	0052      	lsls	r2, r2, #1
 8004e0c:	5ad3      	ldrh	r3, [r2, r3]
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	69b8      	ldr	r0, [r7, #24]
 8004e1a:	69f9      	ldr	r1, [r7, #28]
 8004e1c:	f7fb fa08 	bl	8000230 <__aeabi_uldivmod>
 8004e20:	0002      	movs	r2, r0
 8004e22:	000b      	movs	r3, r1
 8004e24:	0e11      	lsrs	r1, r2, #24
 8004e26:	021d      	lsls	r5, r3, #8
 8004e28:	430d      	orrs	r5, r1
 8004e2a:	0214      	lsls	r4, r2, #8
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	085b      	lsrs	r3, r3, #1
 8004e32:	60bb      	str	r3, [r7, #8]
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	68b8      	ldr	r0, [r7, #8]
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	1900      	adds	r0, r0, r4
 8004e3e:	4169      	adcs	r1, r5
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	603b      	str	r3, [r7, #0]
 8004e46:	2300      	movs	r3, #0
 8004e48:	607b      	str	r3, [r7, #4]
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f7fb f9ef 	bl	8000230 <__aeabi_uldivmod>
 8004e52:	0002      	movs	r2, r0
 8004e54:	000b      	movs	r3, r1
 8004e56:	0013      	movs	r3, r2
 8004e58:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e5c:	23c0      	movs	r3, #192	; 0xc0
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d309      	bcc.n	8004e78 <UART_SetConfig+0x2e4>
 8004e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e66:	2380      	movs	r3, #128	; 0x80
 8004e68:	035b      	lsls	r3, r3, #13
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d204      	bcs.n	8004e78 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e74:	60da      	str	r2, [r3, #12]
 8004e76:	e0e9      	b.n	800504c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004e78:	231a      	movs	r3, #26
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	189b      	adds	r3, r3, r2
 8004e7e:	19db      	adds	r3, r3, r7
 8004e80:	2201      	movs	r2, #1
 8004e82:	701a      	strb	r2, [r3, #0]
 8004e84:	e0e2      	b.n	800504c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	69da      	ldr	r2, [r3, #28]
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	021b      	lsls	r3, r3, #8
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d000      	beq.n	8004e94 <UART_SetConfig+0x300>
 8004e92:	e083      	b.n	8004f9c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004e94:	231b      	movs	r3, #27
 8004e96:	2220      	movs	r2, #32
 8004e98:	189b      	adds	r3, r3, r2
 8004e9a:	19db      	adds	r3, r3, r7
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d015      	beq.n	8004ece <UART_SetConfig+0x33a>
 8004ea2:	dc2b      	bgt.n	8004efc <UART_SetConfig+0x368>
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d00d      	beq.n	8004ec4 <UART_SetConfig+0x330>
 8004ea8:	dc28      	bgt.n	8004efc <UART_SetConfig+0x368>
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <UART_SetConfig+0x320>
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d005      	beq.n	8004ebe <UART_SetConfig+0x32a>
 8004eb2:	e023      	b.n	8004efc <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eb4:	f7fd fee2 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 8004eb8:	0003      	movs	r3, r0
 8004eba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ebc:	e027      	b.n	8004f0e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <UART_SetConfig+0x360>)
 8004ec0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ec2:	e024      	b.n	8004f0e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ec4:	f7fd fe4e 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ecc:	e01f      	b.n	8004f0e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ece:	2380      	movs	r3, #128	; 0x80
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ed4:	e01b      	b.n	8004f0e <UART_SetConfig+0x37a>
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	cfff69f3 	.word	0xcfff69f3
 8004edc:	ffffcfff 	.word	0xffffcfff
 8004ee0:	40008000 	.word	0x40008000
 8004ee4:	11fff4ff 	.word	0x11fff4ff
 8004ee8:	40013800 	.word	0x40013800
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	40004400 	.word	0x40004400
 8004ef4:	00f42400 	.word	0x00f42400
 8004ef8:	080068b8 	.word	0x080068b8
      default:
        pclk = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004f00:	231a      	movs	r3, #26
 8004f02:	2220      	movs	r2, #32
 8004f04:	189b      	adds	r3, r3, r2
 8004f06:	19db      	adds	r3, r3, r7
 8004f08:	2201      	movs	r2, #1
 8004f0a:	701a      	strb	r2, [r3, #0]
        break;
 8004f0c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d100      	bne.n	8004f16 <UART_SetConfig+0x382>
 8004f14:	e09a      	b.n	800504c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f1a:	4b58      	ldr	r3, [pc, #352]	; (800507c <UART_SetConfig+0x4e8>)
 8004f1c:	0052      	lsls	r2, r2, #1
 8004f1e:	5ad3      	ldrh	r3, [r2, r3]
 8004f20:	0019      	movs	r1, r3
 8004f22:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004f24:	f7fb f8f8 	bl	8000118 <__udivsi3>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	005a      	lsls	r2, r3, #1
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	085b      	lsrs	r3, r3, #1
 8004f32:	18d2      	adds	r2, r2, r3
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	0019      	movs	r1, r3
 8004f3a:	0010      	movs	r0, r2
 8004f3c:	f7fb f8ec 	bl	8000118 <__udivsi3>
 8004f40:	0003      	movs	r3, r0
 8004f42:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	2b0f      	cmp	r3, #15
 8004f48:	d921      	bls.n	8004f8e <UART_SetConfig+0x3fa>
 8004f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f4c:	2380      	movs	r3, #128	; 0x80
 8004f4e:	025b      	lsls	r3, r3, #9
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d21c      	bcs.n	8004f8e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	200e      	movs	r0, #14
 8004f5a:	2420      	movs	r4, #32
 8004f5c:	1903      	adds	r3, r0, r4
 8004f5e:	19db      	adds	r3, r3, r7
 8004f60:	210f      	movs	r1, #15
 8004f62:	438a      	bics	r2, r1
 8004f64:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	085b      	lsrs	r3, r3, #1
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2207      	movs	r2, #7
 8004f6e:	4013      	ands	r3, r2
 8004f70:	b299      	uxth	r1, r3
 8004f72:	1903      	adds	r3, r0, r4
 8004f74:	19db      	adds	r3, r3, r7
 8004f76:	1902      	adds	r2, r0, r4
 8004f78:	19d2      	adds	r2, r2, r7
 8004f7a:	8812      	ldrh	r2, [r2, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	1902      	adds	r2, r0, r4
 8004f86:	19d2      	adds	r2, r2, r7
 8004f88:	8812      	ldrh	r2, [r2, #0]
 8004f8a:	60da      	str	r2, [r3, #12]
 8004f8c:	e05e      	b.n	800504c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f8e:	231a      	movs	r3, #26
 8004f90:	2220      	movs	r2, #32
 8004f92:	189b      	adds	r3, r3, r2
 8004f94:	19db      	adds	r3, r3, r7
 8004f96:	2201      	movs	r2, #1
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	e057      	b.n	800504c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f9c:	231b      	movs	r3, #27
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	189b      	adds	r3, r3, r2
 8004fa2:	19db      	adds	r3, r3, r7
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	d015      	beq.n	8004fd6 <UART_SetConfig+0x442>
 8004faa:	dc18      	bgt.n	8004fde <UART_SetConfig+0x44a>
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	d00d      	beq.n	8004fcc <UART_SetConfig+0x438>
 8004fb0:	dc15      	bgt.n	8004fde <UART_SetConfig+0x44a>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <UART_SetConfig+0x428>
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d005      	beq.n	8004fc6 <UART_SetConfig+0x432>
 8004fba:	e010      	b.n	8004fde <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fbc:	f7fd fe5e 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fc4:	e014      	b.n	8004ff0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fc6:	4b2e      	ldr	r3, [pc, #184]	; (8005080 <UART_SetConfig+0x4ec>)
 8004fc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fca:	e011      	b.n	8004ff0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fcc:	f7fd fdca 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8004fd0:	0003      	movs	r3, r0
 8004fd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fd4:	e00c      	b.n	8004ff0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd6:	2380      	movs	r3, #128	; 0x80
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fdc:	e008      	b.n	8004ff0 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004fe2:	231a      	movs	r3, #26
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	189b      	adds	r3, r3, r2
 8004fe8:	19db      	adds	r3, r3, r7
 8004fea:	2201      	movs	r2, #1
 8004fec:	701a      	strb	r2, [r3, #0]
        break;
 8004fee:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d02a      	beq.n	800504c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ffa:	4b20      	ldr	r3, [pc, #128]	; (800507c <UART_SetConfig+0x4e8>)
 8004ffc:	0052      	lsls	r2, r2, #1
 8004ffe:	5ad3      	ldrh	r3, [r2, r3]
 8005000:	0019      	movs	r1, r3
 8005002:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005004:	f7fb f888 	bl	8000118 <__udivsi3>
 8005008:	0003      	movs	r3, r0
 800500a:	001a      	movs	r2, r3
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	085b      	lsrs	r3, r3, #1
 8005012:	18d2      	adds	r2, r2, r3
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	0019      	movs	r1, r3
 800501a:	0010      	movs	r0, r2
 800501c:	f7fb f87c 	bl	8000118 <__udivsi3>
 8005020:	0003      	movs	r3, r0
 8005022:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	2b0f      	cmp	r3, #15
 8005028:	d90a      	bls.n	8005040 <UART_SetConfig+0x4ac>
 800502a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800502c:	2380      	movs	r3, #128	; 0x80
 800502e:	025b      	lsls	r3, r3, #9
 8005030:	429a      	cmp	r2, r3
 8005032:	d205      	bcs.n	8005040 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	b29a      	uxth	r2, r3
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	60da      	str	r2, [r3, #12]
 800503e:	e005      	b.n	800504c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005040:	231a      	movs	r3, #26
 8005042:	2220      	movs	r2, #32
 8005044:	189b      	adds	r3, r3, r2
 8005046:	19db      	adds	r3, r3, r7
 8005048:	2201      	movs	r2, #1
 800504a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	226a      	movs	r2, #106	; 0x6a
 8005050:	2101      	movs	r1, #1
 8005052:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	2268      	movs	r2, #104	; 0x68
 8005058:	2101      	movs	r1, #1
 800505a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	2200      	movs	r2, #0
 8005060:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	2200      	movs	r2, #0
 8005066:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005068:	231a      	movs	r3, #26
 800506a:	2220      	movs	r2, #32
 800506c:	189b      	adds	r3, r3, r2
 800506e:	19db      	adds	r3, r3, r7
 8005070:	781b      	ldrb	r3, [r3, #0]
}
 8005072:	0018      	movs	r0, r3
 8005074:	46bd      	mov	sp, r7
 8005076:	b010      	add	sp, #64	; 0x40
 8005078:	bdb0      	pop	{r4, r5, r7, pc}
 800507a:	46c0      	nop			; (mov r8, r8)
 800507c:	080068b8 	.word	0x080068b8
 8005080:	00f42400 	.word	0x00f42400

08005084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	2201      	movs	r2, #1
 8005092:	4013      	ands	r3, r2
 8005094:	d00b      	beq.n	80050ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4a4a      	ldr	r2, [pc, #296]	; (80051c8 <UART_AdvFeatureConfig+0x144>)
 800509e:	4013      	ands	r3, r2
 80050a0:	0019      	movs	r1, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	2202      	movs	r2, #2
 80050b4:	4013      	ands	r3, r2
 80050b6:	d00b      	beq.n	80050d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4a43      	ldr	r2, [pc, #268]	; (80051cc <UART_AdvFeatureConfig+0x148>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	0019      	movs	r1, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	2204      	movs	r2, #4
 80050d6:	4013      	ands	r3, r2
 80050d8:	d00b      	beq.n	80050f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	4a3b      	ldr	r2, [pc, #236]	; (80051d0 <UART_AdvFeatureConfig+0x14c>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	0019      	movs	r1, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	2208      	movs	r2, #8
 80050f8:	4013      	ands	r3, r2
 80050fa:	d00b      	beq.n	8005114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	4a34      	ldr	r2, [pc, #208]	; (80051d4 <UART_AdvFeatureConfig+0x150>)
 8005104:	4013      	ands	r3, r2
 8005106:	0019      	movs	r1, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	2210      	movs	r2, #16
 800511a:	4013      	ands	r3, r2
 800511c:	d00b      	beq.n	8005136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4a2c      	ldr	r2, [pc, #176]	; (80051d8 <UART_AdvFeatureConfig+0x154>)
 8005126:	4013      	ands	r3, r2
 8005128:	0019      	movs	r1, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	2220      	movs	r2, #32
 800513c:	4013      	ands	r3, r2
 800513e:	d00b      	beq.n	8005158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	4a25      	ldr	r2, [pc, #148]	; (80051dc <UART_AdvFeatureConfig+0x158>)
 8005148:	4013      	ands	r3, r2
 800514a:	0019      	movs	r1, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515c:	2240      	movs	r2, #64	; 0x40
 800515e:	4013      	ands	r3, r2
 8005160:	d01d      	beq.n	800519e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	4a1d      	ldr	r2, [pc, #116]	; (80051e0 <UART_AdvFeatureConfig+0x15c>)
 800516a:	4013      	ands	r3, r2
 800516c:	0019      	movs	r1, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800517e:	2380      	movs	r3, #128	; 0x80
 8005180:	035b      	lsls	r3, r3, #13
 8005182:	429a      	cmp	r2, r3
 8005184:	d10b      	bne.n	800519e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	4a15      	ldr	r2, [pc, #84]	; (80051e4 <UART_AdvFeatureConfig+0x160>)
 800518e:	4013      	ands	r3, r2
 8005190:	0019      	movs	r1, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	2280      	movs	r2, #128	; 0x80
 80051a4:	4013      	ands	r3, r2
 80051a6:	d00b      	beq.n	80051c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	4a0e      	ldr	r2, [pc, #56]	; (80051e8 <UART_AdvFeatureConfig+0x164>)
 80051b0:	4013      	ands	r3, r2
 80051b2:	0019      	movs	r1, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	605a      	str	r2, [r3, #4]
  }
}
 80051c0:	46c0      	nop			; (mov r8, r8)
 80051c2:	46bd      	mov	sp, r7
 80051c4:	b002      	add	sp, #8
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	fffdffff 	.word	0xfffdffff
 80051cc:	fffeffff 	.word	0xfffeffff
 80051d0:	fffbffff 	.word	0xfffbffff
 80051d4:	ffff7fff 	.word	0xffff7fff
 80051d8:	ffffefff 	.word	0xffffefff
 80051dc:	ffffdfff 	.word	0xffffdfff
 80051e0:	ffefffff 	.word	0xffefffff
 80051e4:	ff9fffff 	.word	0xff9fffff
 80051e8:	fff7ffff 	.word	0xfff7ffff

080051ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2290      	movs	r2, #144	; 0x90
 80051f8:	2100      	movs	r1, #0
 80051fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051fc:	f7fc fd60 	bl	8001cc0 <HAL_GetTick>
 8005200:	0003      	movs	r3, r0
 8005202:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2208      	movs	r2, #8
 800520c:	4013      	ands	r3, r2
 800520e:	2b08      	cmp	r3, #8
 8005210:	d10c      	bne.n	800522c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2280      	movs	r2, #128	; 0x80
 8005216:	0391      	lsls	r1, r2, #14
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	4a1a      	ldr	r2, [pc, #104]	; (8005284 <UART_CheckIdleState+0x98>)
 800521c:	9200      	str	r2, [sp, #0]
 800521e:	2200      	movs	r2, #0
 8005220:	f000 f832 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 8005224:	1e03      	subs	r3, r0, #0
 8005226:	d001      	beq.n	800522c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e026      	b.n	800527a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2204      	movs	r2, #4
 8005234:	4013      	ands	r3, r2
 8005236:	2b04      	cmp	r3, #4
 8005238:	d10c      	bne.n	8005254 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2280      	movs	r2, #128	; 0x80
 800523e:	03d1      	lsls	r1, r2, #15
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	4a10      	ldr	r2, [pc, #64]	; (8005284 <UART_CheckIdleState+0x98>)
 8005244:	9200      	str	r2, [sp, #0]
 8005246:	2200      	movs	r2, #0
 8005248:	f000 f81e 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 800524c:	1e03      	subs	r3, r0, #0
 800524e:	d001      	beq.n	8005254 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e012      	b.n	800527a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2288      	movs	r2, #136	; 0x88
 8005258:	2120      	movs	r1, #32
 800525a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	228c      	movs	r2, #140	; 0x8c
 8005260:	2120      	movs	r1, #32
 8005262:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2284      	movs	r2, #132	; 0x84
 8005274:	2100      	movs	r1, #0
 8005276:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	0018      	movs	r0, r3
 800527c:	46bd      	mov	sp, r7
 800527e:	b004      	add	sp, #16
 8005280:	bd80      	pop	{r7, pc}
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	01ffffff 	.word	0x01ffffff

08005288 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b094      	sub	sp, #80	; 0x50
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	1dfb      	adds	r3, r7, #7
 8005296:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005298:	e0a7      	b.n	80053ea <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800529a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800529c:	3301      	adds	r3, #1
 800529e:	d100      	bne.n	80052a2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80052a0:	e0a3      	b.n	80053ea <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a2:	f7fc fd0d 	bl	8001cc0 <HAL_GetTick>
 80052a6:	0002      	movs	r2, r0
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d302      	bcc.n	80052b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d13f      	bne.n	8005338 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052b8:	f3ef 8310 	mrs	r3, PRIMASK
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80052c0:	647b      	str	r3, [r7, #68]	; 0x44
 80052c2:	2301      	movs	r3, #1
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	f383 8810 	msr	PRIMASK, r3
}
 80052cc:	46c0      	nop			; (mov r8, r8)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	494e      	ldr	r1, [pc, #312]	; (8005414 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80052da:	400a      	ands	r2, r1
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	f383 8810 	msr	PRIMASK, r3
}
 80052e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ea:	f3ef 8310 	mrs	r3, PRIMASK
 80052ee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80052f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f2:	643b      	str	r3, [r7, #64]	; 0x40
 80052f4:	2301      	movs	r3, #1
 80052f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fa:	f383 8810 	msr	PRIMASK, r3
}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2101      	movs	r1, #1
 800530c:	438a      	bics	r2, r1
 800530e:	609a      	str	r2, [r3, #8]
 8005310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005312:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005316:	f383 8810 	msr	PRIMASK, r3
}
 800531a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2288      	movs	r2, #136	; 0x88
 8005320:	2120      	movs	r1, #32
 8005322:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	228c      	movs	r2, #140	; 0x8c
 8005328:	2120      	movs	r1, #32
 800532a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2284      	movs	r2, #132	; 0x84
 8005330:	2100      	movs	r1, #0
 8005332:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e069      	b.n	800540c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2204      	movs	r2, #4
 8005340:	4013      	ands	r3, r2
 8005342:	d052      	beq.n	80053ea <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69da      	ldr	r2, [r3, #28]
 800534a:	2380      	movs	r3, #128	; 0x80
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	401a      	ands	r2, r3
 8005350:	2380      	movs	r3, #128	; 0x80
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	429a      	cmp	r2, r3
 8005356:	d148      	bne.n	80053ea <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2280      	movs	r2, #128	; 0x80
 800535e:	0112      	lsls	r2, r2, #4
 8005360:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005362:	f3ef 8310 	mrs	r3, PRIMASK
 8005366:	613b      	str	r3, [r7, #16]
  return(result);
 8005368:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800536a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800536c:	2301      	movs	r3, #1
 800536e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f383 8810 	msr	PRIMASK, r3
}
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4924      	ldr	r1, [pc, #144]	; (8005414 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005384:	400a      	ands	r2, r1
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800538a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	f383 8810 	msr	PRIMASK, r3
}
 8005392:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005394:	f3ef 8310 	mrs	r3, PRIMASK
 8005398:	61fb      	str	r3, [r7, #28]
  return(result);
 800539a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539c:	64bb      	str	r3, [r7, #72]	; 0x48
 800539e:	2301      	movs	r3, #1
 80053a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	f383 8810 	msr	PRIMASK, r3
}
 80053a8:	46c0      	nop			; (mov r8, r8)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2101      	movs	r1, #1
 80053b6:	438a      	bics	r2, r1
 80053b8:	609a      	str	r2, [r3, #8]
 80053ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	f383 8810 	msr	PRIMASK, r3
}
 80053c4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2288      	movs	r2, #136	; 0x88
 80053ca:	2120      	movs	r1, #32
 80053cc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	228c      	movs	r2, #140	; 0x8c
 80053d2:	2120      	movs	r1, #32
 80053d4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2290      	movs	r2, #144	; 0x90
 80053da:	2120      	movs	r1, #32
 80053dc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2284      	movs	r2, #132	; 0x84
 80053e2:	2100      	movs	r1, #0
 80053e4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e010      	b.n	800540c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	4013      	ands	r3, r2
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	425a      	negs	r2, r3
 80053fa:	4153      	adcs	r3, r2
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	001a      	movs	r2, r3
 8005400:	1dfb      	adds	r3, r7, #7
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d100      	bne.n	800540a <UART_WaitOnFlagUntilTimeout+0x182>
 8005408:	e747      	b.n	800529a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	0018      	movs	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	b014      	add	sp, #80	; 0x50
 8005412:	bd80      	pop	{r7, pc}
 8005414:	fffffe5f 	.word	0xfffffe5f

08005418 <__errno>:
 8005418:	4b01      	ldr	r3, [pc, #4]	; (8005420 <__errno+0x8>)
 800541a:	6818      	ldr	r0, [r3, #0]
 800541c:	4770      	bx	lr
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	20000044 	.word	0x20000044

08005424 <__libc_init_array>:
 8005424:	b570      	push	{r4, r5, r6, lr}
 8005426:	2600      	movs	r6, #0
 8005428:	4d0c      	ldr	r5, [pc, #48]	; (800545c <__libc_init_array+0x38>)
 800542a:	4c0d      	ldr	r4, [pc, #52]	; (8005460 <__libc_init_array+0x3c>)
 800542c:	1b64      	subs	r4, r4, r5
 800542e:	10a4      	asrs	r4, r4, #2
 8005430:	42a6      	cmp	r6, r4
 8005432:	d109      	bne.n	8005448 <__libc_init_array+0x24>
 8005434:	2600      	movs	r6, #0
 8005436:	f000 fff9 	bl	800642c <_init>
 800543a:	4d0a      	ldr	r5, [pc, #40]	; (8005464 <__libc_init_array+0x40>)
 800543c:	4c0a      	ldr	r4, [pc, #40]	; (8005468 <__libc_init_array+0x44>)
 800543e:	1b64      	subs	r4, r4, r5
 8005440:	10a4      	asrs	r4, r4, #2
 8005442:	42a6      	cmp	r6, r4
 8005444:	d105      	bne.n	8005452 <__libc_init_array+0x2e>
 8005446:	bd70      	pop	{r4, r5, r6, pc}
 8005448:	00b3      	lsls	r3, r6, #2
 800544a:	58eb      	ldr	r3, [r5, r3]
 800544c:	4798      	blx	r3
 800544e:	3601      	adds	r6, #1
 8005450:	e7ee      	b.n	8005430 <__libc_init_array+0xc>
 8005452:	00b3      	lsls	r3, r6, #2
 8005454:	58eb      	ldr	r3, [r5, r3]
 8005456:	4798      	blx	r3
 8005458:	3601      	adds	r6, #1
 800545a:	e7f2      	b.n	8005442 <__libc_init_array+0x1e>
 800545c:	08006970 	.word	0x08006970
 8005460:	08006970 	.word	0x08006970
 8005464:	08006970 	.word	0x08006970
 8005468:	08006974 	.word	0x08006974

0800546c <memset>:
 800546c:	0003      	movs	r3, r0
 800546e:	1882      	adds	r2, r0, r2
 8005470:	4293      	cmp	r3, r2
 8005472:	d100      	bne.n	8005476 <memset+0xa>
 8005474:	4770      	bx	lr
 8005476:	7019      	strb	r1, [r3, #0]
 8005478:	3301      	adds	r3, #1
 800547a:	e7f9      	b.n	8005470 <memset+0x4>

0800547c <iprintf>:
 800547c:	b40f      	push	{r0, r1, r2, r3}
 800547e:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <iprintf+0x30>)
 8005480:	b513      	push	{r0, r1, r4, lr}
 8005482:	681c      	ldr	r4, [r3, #0]
 8005484:	2c00      	cmp	r4, #0
 8005486:	d005      	beq.n	8005494 <iprintf+0x18>
 8005488:	69a3      	ldr	r3, [r4, #24]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d102      	bne.n	8005494 <iprintf+0x18>
 800548e:	0020      	movs	r0, r4
 8005490:	f000 f870 	bl	8005574 <__sinit>
 8005494:	ab05      	add	r3, sp, #20
 8005496:	0020      	movs	r0, r4
 8005498:	9a04      	ldr	r2, [sp, #16]
 800549a:	68a1      	ldr	r1, [r4, #8]
 800549c:	9301      	str	r3, [sp, #4]
 800549e:	f000 f9cd 	bl	800583c <_vfiprintf_r>
 80054a2:	bc16      	pop	{r1, r2, r4}
 80054a4:	bc08      	pop	{r3}
 80054a6:	b004      	add	sp, #16
 80054a8:	4718      	bx	r3
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	20000044 	.word	0x20000044

080054b0 <std>:
 80054b0:	2300      	movs	r3, #0
 80054b2:	b510      	push	{r4, lr}
 80054b4:	0004      	movs	r4, r0
 80054b6:	6003      	str	r3, [r0, #0]
 80054b8:	6043      	str	r3, [r0, #4]
 80054ba:	6083      	str	r3, [r0, #8]
 80054bc:	8181      	strh	r1, [r0, #12]
 80054be:	6643      	str	r3, [r0, #100]	; 0x64
 80054c0:	0019      	movs	r1, r3
 80054c2:	81c2      	strh	r2, [r0, #14]
 80054c4:	6103      	str	r3, [r0, #16]
 80054c6:	6143      	str	r3, [r0, #20]
 80054c8:	6183      	str	r3, [r0, #24]
 80054ca:	2208      	movs	r2, #8
 80054cc:	305c      	adds	r0, #92	; 0x5c
 80054ce:	f7ff ffcd 	bl	800546c <memset>
 80054d2:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <std+0x38>)
 80054d4:	6224      	str	r4, [r4, #32]
 80054d6:	6263      	str	r3, [r4, #36]	; 0x24
 80054d8:	4b04      	ldr	r3, [pc, #16]	; (80054ec <std+0x3c>)
 80054da:	62a3      	str	r3, [r4, #40]	; 0x28
 80054dc:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <std+0x40>)
 80054de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054e0:	4b04      	ldr	r3, [pc, #16]	; (80054f4 <std+0x44>)
 80054e2:	6323      	str	r3, [r4, #48]	; 0x30
 80054e4:	bd10      	pop	{r4, pc}
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	08005dd9 	.word	0x08005dd9
 80054ec:	08005e01 	.word	0x08005e01
 80054f0:	08005e39 	.word	0x08005e39
 80054f4:	08005e65 	.word	0x08005e65

080054f8 <_cleanup_r>:
 80054f8:	b510      	push	{r4, lr}
 80054fa:	4902      	ldr	r1, [pc, #8]	; (8005504 <_cleanup_r+0xc>)
 80054fc:	f000 f8ba 	bl	8005674 <_fwalk_reent>
 8005500:	bd10      	pop	{r4, pc}
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	08006171 	.word	0x08006171

08005508 <__sfmoreglue>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	2568      	movs	r5, #104	; 0x68
 800550c:	1e4a      	subs	r2, r1, #1
 800550e:	4355      	muls	r5, r2
 8005510:	000e      	movs	r6, r1
 8005512:	0029      	movs	r1, r5
 8005514:	3174      	adds	r1, #116	; 0x74
 8005516:	f000 f8f3 	bl	8005700 <_malloc_r>
 800551a:	1e04      	subs	r4, r0, #0
 800551c:	d008      	beq.n	8005530 <__sfmoreglue+0x28>
 800551e:	2100      	movs	r1, #0
 8005520:	002a      	movs	r2, r5
 8005522:	6001      	str	r1, [r0, #0]
 8005524:	6046      	str	r6, [r0, #4]
 8005526:	300c      	adds	r0, #12
 8005528:	60a0      	str	r0, [r4, #8]
 800552a:	3268      	adds	r2, #104	; 0x68
 800552c:	f7ff ff9e 	bl	800546c <memset>
 8005530:	0020      	movs	r0, r4
 8005532:	bd70      	pop	{r4, r5, r6, pc}

08005534 <__sfp_lock_acquire>:
 8005534:	b510      	push	{r4, lr}
 8005536:	4802      	ldr	r0, [pc, #8]	; (8005540 <__sfp_lock_acquire+0xc>)
 8005538:	f000 f8bd 	bl	80056b6 <__retarget_lock_acquire_recursive>
 800553c:	bd10      	pop	{r4, pc}
 800553e:	46c0      	nop			; (mov r8, r8)
 8005540:	20000289 	.word	0x20000289

08005544 <__sfp_lock_release>:
 8005544:	b510      	push	{r4, lr}
 8005546:	4802      	ldr	r0, [pc, #8]	; (8005550 <__sfp_lock_release+0xc>)
 8005548:	f000 f8b6 	bl	80056b8 <__retarget_lock_release_recursive>
 800554c:	bd10      	pop	{r4, pc}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	20000289 	.word	0x20000289

08005554 <__sinit_lock_acquire>:
 8005554:	b510      	push	{r4, lr}
 8005556:	4802      	ldr	r0, [pc, #8]	; (8005560 <__sinit_lock_acquire+0xc>)
 8005558:	f000 f8ad 	bl	80056b6 <__retarget_lock_acquire_recursive>
 800555c:	bd10      	pop	{r4, pc}
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	2000028a 	.word	0x2000028a

08005564 <__sinit_lock_release>:
 8005564:	b510      	push	{r4, lr}
 8005566:	4802      	ldr	r0, [pc, #8]	; (8005570 <__sinit_lock_release+0xc>)
 8005568:	f000 f8a6 	bl	80056b8 <__retarget_lock_release_recursive>
 800556c:	bd10      	pop	{r4, pc}
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	2000028a 	.word	0x2000028a

08005574 <__sinit>:
 8005574:	b513      	push	{r0, r1, r4, lr}
 8005576:	0004      	movs	r4, r0
 8005578:	f7ff ffec 	bl	8005554 <__sinit_lock_acquire>
 800557c:	69a3      	ldr	r3, [r4, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <__sinit+0x14>
 8005582:	f7ff ffef 	bl	8005564 <__sinit_lock_release>
 8005586:	bd13      	pop	{r0, r1, r4, pc}
 8005588:	64a3      	str	r3, [r4, #72]	; 0x48
 800558a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800558c:	6523      	str	r3, [r4, #80]	; 0x50
 800558e:	4b13      	ldr	r3, [pc, #76]	; (80055dc <__sinit+0x68>)
 8005590:	4a13      	ldr	r2, [pc, #76]	; (80055e0 <__sinit+0x6c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	62a2      	str	r2, [r4, #40]	; 0x28
 8005596:	9301      	str	r3, [sp, #4]
 8005598:	42a3      	cmp	r3, r4
 800559a:	d101      	bne.n	80055a0 <__sinit+0x2c>
 800559c:	2301      	movs	r3, #1
 800559e:	61a3      	str	r3, [r4, #24]
 80055a0:	0020      	movs	r0, r4
 80055a2:	f000 f81f 	bl	80055e4 <__sfp>
 80055a6:	6060      	str	r0, [r4, #4]
 80055a8:	0020      	movs	r0, r4
 80055aa:	f000 f81b 	bl	80055e4 <__sfp>
 80055ae:	60a0      	str	r0, [r4, #8]
 80055b0:	0020      	movs	r0, r4
 80055b2:	f000 f817 	bl	80055e4 <__sfp>
 80055b6:	2200      	movs	r2, #0
 80055b8:	2104      	movs	r1, #4
 80055ba:	60e0      	str	r0, [r4, #12]
 80055bc:	6860      	ldr	r0, [r4, #4]
 80055be:	f7ff ff77 	bl	80054b0 <std>
 80055c2:	2201      	movs	r2, #1
 80055c4:	2109      	movs	r1, #9
 80055c6:	68a0      	ldr	r0, [r4, #8]
 80055c8:	f7ff ff72 	bl	80054b0 <std>
 80055cc:	2202      	movs	r2, #2
 80055ce:	2112      	movs	r1, #18
 80055d0:	68e0      	ldr	r0, [r4, #12]
 80055d2:	f7ff ff6d 	bl	80054b0 <std>
 80055d6:	2301      	movs	r3, #1
 80055d8:	61a3      	str	r3, [r4, #24]
 80055da:	e7d2      	b.n	8005582 <__sinit+0xe>
 80055dc:	080068d0 	.word	0x080068d0
 80055e0:	080054f9 	.word	0x080054f9

080055e4 <__sfp>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	0007      	movs	r7, r0
 80055e8:	f7ff ffa4 	bl	8005534 <__sfp_lock_acquire>
 80055ec:	4b1f      	ldr	r3, [pc, #124]	; (800566c <__sfp+0x88>)
 80055ee:	681e      	ldr	r6, [r3, #0]
 80055f0:	69b3      	ldr	r3, [r6, #24]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d102      	bne.n	80055fc <__sfp+0x18>
 80055f6:	0030      	movs	r0, r6
 80055f8:	f7ff ffbc 	bl	8005574 <__sinit>
 80055fc:	3648      	adds	r6, #72	; 0x48
 80055fe:	68b4      	ldr	r4, [r6, #8]
 8005600:	6873      	ldr	r3, [r6, #4]
 8005602:	3b01      	subs	r3, #1
 8005604:	d504      	bpl.n	8005610 <__sfp+0x2c>
 8005606:	6833      	ldr	r3, [r6, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d022      	beq.n	8005652 <__sfp+0x6e>
 800560c:	6836      	ldr	r6, [r6, #0]
 800560e:	e7f6      	b.n	80055fe <__sfp+0x1a>
 8005610:	220c      	movs	r2, #12
 8005612:	5ea5      	ldrsh	r5, [r4, r2]
 8005614:	2d00      	cmp	r5, #0
 8005616:	d11a      	bne.n	800564e <__sfp+0x6a>
 8005618:	0020      	movs	r0, r4
 800561a:	4b15      	ldr	r3, [pc, #84]	; (8005670 <__sfp+0x8c>)
 800561c:	3058      	adds	r0, #88	; 0x58
 800561e:	60e3      	str	r3, [r4, #12]
 8005620:	6665      	str	r5, [r4, #100]	; 0x64
 8005622:	f000 f847 	bl	80056b4 <__retarget_lock_init_recursive>
 8005626:	f7ff ff8d 	bl	8005544 <__sfp_lock_release>
 800562a:	0020      	movs	r0, r4
 800562c:	2208      	movs	r2, #8
 800562e:	0029      	movs	r1, r5
 8005630:	6025      	str	r5, [r4, #0]
 8005632:	60a5      	str	r5, [r4, #8]
 8005634:	6065      	str	r5, [r4, #4]
 8005636:	6125      	str	r5, [r4, #16]
 8005638:	6165      	str	r5, [r4, #20]
 800563a:	61a5      	str	r5, [r4, #24]
 800563c:	305c      	adds	r0, #92	; 0x5c
 800563e:	f7ff ff15 	bl	800546c <memset>
 8005642:	6365      	str	r5, [r4, #52]	; 0x34
 8005644:	63a5      	str	r5, [r4, #56]	; 0x38
 8005646:	64a5      	str	r5, [r4, #72]	; 0x48
 8005648:	64e5      	str	r5, [r4, #76]	; 0x4c
 800564a:	0020      	movs	r0, r4
 800564c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800564e:	3468      	adds	r4, #104	; 0x68
 8005650:	e7d7      	b.n	8005602 <__sfp+0x1e>
 8005652:	2104      	movs	r1, #4
 8005654:	0038      	movs	r0, r7
 8005656:	f7ff ff57 	bl	8005508 <__sfmoreglue>
 800565a:	1e04      	subs	r4, r0, #0
 800565c:	6030      	str	r0, [r6, #0]
 800565e:	d1d5      	bne.n	800560c <__sfp+0x28>
 8005660:	f7ff ff70 	bl	8005544 <__sfp_lock_release>
 8005664:	230c      	movs	r3, #12
 8005666:	603b      	str	r3, [r7, #0]
 8005668:	e7ef      	b.n	800564a <__sfp+0x66>
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	080068d0 	.word	0x080068d0
 8005670:	ffff0001 	.word	0xffff0001

08005674 <_fwalk_reent>:
 8005674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005676:	0004      	movs	r4, r0
 8005678:	0006      	movs	r6, r0
 800567a:	2700      	movs	r7, #0
 800567c:	9101      	str	r1, [sp, #4]
 800567e:	3448      	adds	r4, #72	; 0x48
 8005680:	6863      	ldr	r3, [r4, #4]
 8005682:	68a5      	ldr	r5, [r4, #8]
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	9b00      	ldr	r3, [sp, #0]
 8005688:	3b01      	subs	r3, #1
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	d504      	bpl.n	8005698 <_fwalk_reent+0x24>
 800568e:	6824      	ldr	r4, [r4, #0]
 8005690:	2c00      	cmp	r4, #0
 8005692:	d1f5      	bne.n	8005680 <_fwalk_reent+0xc>
 8005694:	0038      	movs	r0, r7
 8005696:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005698:	89ab      	ldrh	r3, [r5, #12]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d908      	bls.n	80056b0 <_fwalk_reent+0x3c>
 800569e:	220e      	movs	r2, #14
 80056a0:	5eab      	ldrsh	r3, [r5, r2]
 80056a2:	3301      	adds	r3, #1
 80056a4:	d004      	beq.n	80056b0 <_fwalk_reent+0x3c>
 80056a6:	0029      	movs	r1, r5
 80056a8:	0030      	movs	r0, r6
 80056aa:	9b01      	ldr	r3, [sp, #4]
 80056ac:	4798      	blx	r3
 80056ae:	4307      	orrs	r7, r0
 80056b0:	3568      	adds	r5, #104	; 0x68
 80056b2:	e7e8      	b.n	8005686 <_fwalk_reent+0x12>

080056b4 <__retarget_lock_init_recursive>:
 80056b4:	4770      	bx	lr

080056b6 <__retarget_lock_acquire_recursive>:
 80056b6:	4770      	bx	lr

080056b8 <__retarget_lock_release_recursive>:
 80056b8:	4770      	bx	lr
	...

080056bc <sbrk_aligned>:
 80056bc:	b570      	push	{r4, r5, r6, lr}
 80056be:	4e0f      	ldr	r6, [pc, #60]	; (80056fc <sbrk_aligned+0x40>)
 80056c0:	000d      	movs	r5, r1
 80056c2:	6831      	ldr	r1, [r6, #0]
 80056c4:	0004      	movs	r4, r0
 80056c6:	2900      	cmp	r1, #0
 80056c8:	d102      	bne.n	80056d0 <sbrk_aligned+0x14>
 80056ca:	f000 fb73 	bl	8005db4 <_sbrk_r>
 80056ce:	6030      	str	r0, [r6, #0]
 80056d0:	0029      	movs	r1, r5
 80056d2:	0020      	movs	r0, r4
 80056d4:	f000 fb6e 	bl	8005db4 <_sbrk_r>
 80056d8:	1c43      	adds	r3, r0, #1
 80056da:	d00a      	beq.n	80056f2 <sbrk_aligned+0x36>
 80056dc:	2303      	movs	r3, #3
 80056de:	1cc5      	adds	r5, r0, #3
 80056e0:	439d      	bics	r5, r3
 80056e2:	42a8      	cmp	r0, r5
 80056e4:	d007      	beq.n	80056f6 <sbrk_aligned+0x3a>
 80056e6:	1a29      	subs	r1, r5, r0
 80056e8:	0020      	movs	r0, r4
 80056ea:	f000 fb63 	bl	8005db4 <_sbrk_r>
 80056ee:	1c43      	adds	r3, r0, #1
 80056f0:	d101      	bne.n	80056f6 <sbrk_aligned+0x3a>
 80056f2:	2501      	movs	r5, #1
 80056f4:	426d      	negs	r5, r5
 80056f6:	0028      	movs	r0, r5
 80056f8:	bd70      	pop	{r4, r5, r6, pc}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	20000290 	.word	0x20000290

08005700 <_malloc_r>:
 8005700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005702:	2203      	movs	r2, #3
 8005704:	1ccb      	adds	r3, r1, #3
 8005706:	4393      	bics	r3, r2
 8005708:	3308      	adds	r3, #8
 800570a:	0006      	movs	r6, r0
 800570c:	001f      	movs	r7, r3
 800570e:	2b0c      	cmp	r3, #12
 8005710:	d232      	bcs.n	8005778 <_malloc_r+0x78>
 8005712:	270c      	movs	r7, #12
 8005714:	42b9      	cmp	r1, r7
 8005716:	d831      	bhi.n	800577c <_malloc_r+0x7c>
 8005718:	0030      	movs	r0, r6
 800571a:	f000 fdf5 	bl	8006308 <__malloc_lock>
 800571e:	4d32      	ldr	r5, [pc, #200]	; (80057e8 <_malloc_r+0xe8>)
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	001c      	movs	r4, r3
 8005724:	2c00      	cmp	r4, #0
 8005726:	d12e      	bne.n	8005786 <_malloc_r+0x86>
 8005728:	0039      	movs	r1, r7
 800572a:	0030      	movs	r0, r6
 800572c:	f7ff ffc6 	bl	80056bc <sbrk_aligned>
 8005730:	0004      	movs	r4, r0
 8005732:	1c43      	adds	r3, r0, #1
 8005734:	d11e      	bne.n	8005774 <_malloc_r+0x74>
 8005736:	682c      	ldr	r4, [r5, #0]
 8005738:	0025      	movs	r5, r4
 800573a:	2d00      	cmp	r5, #0
 800573c:	d14a      	bne.n	80057d4 <_malloc_r+0xd4>
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	0029      	movs	r1, r5
 8005742:	18e3      	adds	r3, r4, r3
 8005744:	0030      	movs	r0, r6
 8005746:	9301      	str	r3, [sp, #4]
 8005748:	f000 fb34 	bl	8005db4 <_sbrk_r>
 800574c:	9b01      	ldr	r3, [sp, #4]
 800574e:	4283      	cmp	r3, r0
 8005750:	d143      	bne.n	80057da <_malloc_r+0xda>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	3703      	adds	r7, #3
 8005756:	1aff      	subs	r7, r7, r3
 8005758:	2303      	movs	r3, #3
 800575a:	439f      	bics	r7, r3
 800575c:	3708      	adds	r7, #8
 800575e:	2f0c      	cmp	r7, #12
 8005760:	d200      	bcs.n	8005764 <_malloc_r+0x64>
 8005762:	270c      	movs	r7, #12
 8005764:	0039      	movs	r1, r7
 8005766:	0030      	movs	r0, r6
 8005768:	f7ff ffa8 	bl	80056bc <sbrk_aligned>
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	d034      	beq.n	80057da <_malloc_r+0xda>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	19df      	adds	r7, r3, r7
 8005774:	6027      	str	r7, [r4, #0]
 8005776:	e013      	b.n	80057a0 <_malloc_r+0xa0>
 8005778:	2b00      	cmp	r3, #0
 800577a:	dacb      	bge.n	8005714 <_malloc_r+0x14>
 800577c:	230c      	movs	r3, #12
 800577e:	2500      	movs	r5, #0
 8005780:	6033      	str	r3, [r6, #0]
 8005782:	0028      	movs	r0, r5
 8005784:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005786:	6822      	ldr	r2, [r4, #0]
 8005788:	1bd1      	subs	r1, r2, r7
 800578a:	d420      	bmi.n	80057ce <_malloc_r+0xce>
 800578c:	290b      	cmp	r1, #11
 800578e:	d917      	bls.n	80057c0 <_malloc_r+0xc0>
 8005790:	19e2      	adds	r2, r4, r7
 8005792:	6027      	str	r7, [r4, #0]
 8005794:	42a3      	cmp	r3, r4
 8005796:	d111      	bne.n	80057bc <_malloc_r+0xbc>
 8005798:	602a      	str	r2, [r5, #0]
 800579a:	6863      	ldr	r3, [r4, #4]
 800579c:	6011      	str	r1, [r2, #0]
 800579e:	6053      	str	r3, [r2, #4]
 80057a0:	0030      	movs	r0, r6
 80057a2:	0025      	movs	r5, r4
 80057a4:	f000 fdb8 	bl	8006318 <__malloc_unlock>
 80057a8:	2207      	movs	r2, #7
 80057aa:	350b      	adds	r5, #11
 80057ac:	1d23      	adds	r3, r4, #4
 80057ae:	4395      	bics	r5, r2
 80057b0:	1aea      	subs	r2, r5, r3
 80057b2:	429d      	cmp	r5, r3
 80057b4:	d0e5      	beq.n	8005782 <_malloc_r+0x82>
 80057b6:	1b5b      	subs	r3, r3, r5
 80057b8:	50a3      	str	r3, [r4, r2]
 80057ba:	e7e2      	b.n	8005782 <_malloc_r+0x82>
 80057bc:	605a      	str	r2, [r3, #4]
 80057be:	e7ec      	b.n	800579a <_malloc_r+0x9a>
 80057c0:	6862      	ldr	r2, [r4, #4]
 80057c2:	42a3      	cmp	r3, r4
 80057c4:	d101      	bne.n	80057ca <_malloc_r+0xca>
 80057c6:	602a      	str	r2, [r5, #0]
 80057c8:	e7ea      	b.n	80057a0 <_malloc_r+0xa0>
 80057ca:	605a      	str	r2, [r3, #4]
 80057cc:	e7e8      	b.n	80057a0 <_malloc_r+0xa0>
 80057ce:	0023      	movs	r3, r4
 80057d0:	6864      	ldr	r4, [r4, #4]
 80057d2:	e7a7      	b.n	8005724 <_malloc_r+0x24>
 80057d4:	002c      	movs	r4, r5
 80057d6:	686d      	ldr	r5, [r5, #4]
 80057d8:	e7af      	b.n	800573a <_malloc_r+0x3a>
 80057da:	230c      	movs	r3, #12
 80057dc:	0030      	movs	r0, r6
 80057de:	6033      	str	r3, [r6, #0]
 80057e0:	f000 fd9a 	bl	8006318 <__malloc_unlock>
 80057e4:	e7cd      	b.n	8005782 <_malloc_r+0x82>
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	2000028c 	.word	0x2000028c

080057ec <__sfputc_r>:
 80057ec:	6893      	ldr	r3, [r2, #8]
 80057ee:	b510      	push	{r4, lr}
 80057f0:	3b01      	subs	r3, #1
 80057f2:	6093      	str	r3, [r2, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	da04      	bge.n	8005802 <__sfputc_r+0x16>
 80057f8:	6994      	ldr	r4, [r2, #24]
 80057fa:	42a3      	cmp	r3, r4
 80057fc:	db07      	blt.n	800580e <__sfputc_r+0x22>
 80057fe:	290a      	cmp	r1, #10
 8005800:	d005      	beq.n	800580e <__sfputc_r+0x22>
 8005802:	6813      	ldr	r3, [r2, #0]
 8005804:	1c58      	adds	r0, r3, #1
 8005806:	6010      	str	r0, [r2, #0]
 8005808:	7019      	strb	r1, [r3, #0]
 800580a:	0008      	movs	r0, r1
 800580c:	bd10      	pop	{r4, pc}
 800580e:	f000 fb2f 	bl	8005e70 <__swbuf_r>
 8005812:	0001      	movs	r1, r0
 8005814:	e7f9      	b.n	800580a <__sfputc_r+0x1e>

08005816 <__sfputs_r>:
 8005816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005818:	0006      	movs	r6, r0
 800581a:	000f      	movs	r7, r1
 800581c:	0014      	movs	r4, r2
 800581e:	18d5      	adds	r5, r2, r3
 8005820:	42ac      	cmp	r4, r5
 8005822:	d101      	bne.n	8005828 <__sfputs_r+0x12>
 8005824:	2000      	movs	r0, #0
 8005826:	e007      	b.n	8005838 <__sfputs_r+0x22>
 8005828:	7821      	ldrb	r1, [r4, #0]
 800582a:	003a      	movs	r2, r7
 800582c:	0030      	movs	r0, r6
 800582e:	f7ff ffdd 	bl	80057ec <__sfputc_r>
 8005832:	3401      	adds	r4, #1
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d1f3      	bne.n	8005820 <__sfputs_r+0xa>
 8005838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800583c <_vfiprintf_r>:
 800583c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800583e:	b0a1      	sub	sp, #132	; 0x84
 8005840:	0006      	movs	r6, r0
 8005842:	000c      	movs	r4, r1
 8005844:	001f      	movs	r7, r3
 8005846:	9203      	str	r2, [sp, #12]
 8005848:	2800      	cmp	r0, #0
 800584a:	d004      	beq.n	8005856 <_vfiprintf_r+0x1a>
 800584c:	6983      	ldr	r3, [r0, #24]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <_vfiprintf_r+0x1a>
 8005852:	f7ff fe8f 	bl	8005574 <__sinit>
 8005856:	4b8e      	ldr	r3, [pc, #568]	; (8005a90 <_vfiprintf_r+0x254>)
 8005858:	429c      	cmp	r4, r3
 800585a:	d11c      	bne.n	8005896 <_vfiprintf_r+0x5a>
 800585c:	6874      	ldr	r4, [r6, #4]
 800585e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005860:	07db      	lsls	r3, r3, #31
 8005862:	d405      	bmi.n	8005870 <_vfiprintf_r+0x34>
 8005864:	89a3      	ldrh	r3, [r4, #12]
 8005866:	059b      	lsls	r3, r3, #22
 8005868:	d402      	bmi.n	8005870 <_vfiprintf_r+0x34>
 800586a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800586c:	f7ff ff23 	bl	80056b6 <__retarget_lock_acquire_recursive>
 8005870:	89a3      	ldrh	r3, [r4, #12]
 8005872:	071b      	lsls	r3, r3, #28
 8005874:	d502      	bpl.n	800587c <_vfiprintf_r+0x40>
 8005876:	6923      	ldr	r3, [r4, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d11d      	bne.n	80058b8 <_vfiprintf_r+0x7c>
 800587c:	0021      	movs	r1, r4
 800587e:	0030      	movs	r0, r6
 8005880:	f000 fb60 	bl	8005f44 <__swsetup_r>
 8005884:	2800      	cmp	r0, #0
 8005886:	d017      	beq.n	80058b8 <_vfiprintf_r+0x7c>
 8005888:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800588a:	07db      	lsls	r3, r3, #31
 800588c:	d50d      	bpl.n	80058aa <_vfiprintf_r+0x6e>
 800588e:	2001      	movs	r0, #1
 8005890:	4240      	negs	r0, r0
 8005892:	b021      	add	sp, #132	; 0x84
 8005894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005896:	4b7f      	ldr	r3, [pc, #508]	; (8005a94 <_vfiprintf_r+0x258>)
 8005898:	429c      	cmp	r4, r3
 800589a:	d101      	bne.n	80058a0 <_vfiprintf_r+0x64>
 800589c:	68b4      	ldr	r4, [r6, #8]
 800589e:	e7de      	b.n	800585e <_vfiprintf_r+0x22>
 80058a0:	4b7d      	ldr	r3, [pc, #500]	; (8005a98 <_vfiprintf_r+0x25c>)
 80058a2:	429c      	cmp	r4, r3
 80058a4:	d1db      	bne.n	800585e <_vfiprintf_r+0x22>
 80058a6:	68f4      	ldr	r4, [r6, #12]
 80058a8:	e7d9      	b.n	800585e <_vfiprintf_r+0x22>
 80058aa:	89a3      	ldrh	r3, [r4, #12]
 80058ac:	059b      	lsls	r3, r3, #22
 80058ae:	d4ee      	bmi.n	800588e <_vfiprintf_r+0x52>
 80058b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058b2:	f7ff ff01 	bl	80056b8 <__retarget_lock_release_recursive>
 80058b6:	e7ea      	b.n	800588e <_vfiprintf_r+0x52>
 80058b8:	2300      	movs	r3, #0
 80058ba:	ad08      	add	r5, sp, #32
 80058bc:	616b      	str	r3, [r5, #20]
 80058be:	3320      	adds	r3, #32
 80058c0:	766b      	strb	r3, [r5, #25]
 80058c2:	3310      	adds	r3, #16
 80058c4:	76ab      	strb	r3, [r5, #26]
 80058c6:	9707      	str	r7, [sp, #28]
 80058c8:	9f03      	ldr	r7, [sp, #12]
 80058ca:	783b      	ldrb	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <_vfiprintf_r+0x98>
 80058d0:	2b25      	cmp	r3, #37	; 0x25
 80058d2:	d14e      	bne.n	8005972 <_vfiprintf_r+0x136>
 80058d4:	9b03      	ldr	r3, [sp, #12]
 80058d6:	1afb      	subs	r3, r7, r3
 80058d8:	9305      	str	r3, [sp, #20]
 80058da:	9b03      	ldr	r3, [sp, #12]
 80058dc:	429f      	cmp	r7, r3
 80058de:	d00d      	beq.n	80058fc <_vfiprintf_r+0xc0>
 80058e0:	9b05      	ldr	r3, [sp, #20]
 80058e2:	0021      	movs	r1, r4
 80058e4:	0030      	movs	r0, r6
 80058e6:	9a03      	ldr	r2, [sp, #12]
 80058e8:	f7ff ff95 	bl	8005816 <__sfputs_r>
 80058ec:	1c43      	adds	r3, r0, #1
 80058ee:	d100      	bne.n	80058f2 <_vfiprintf_r+0xb6>
 80058f0:	e0b5      	b.n	8005a5e <_vfiprintf_r+0x222>
 80058f2:	696a      	ldr	r2, [r5, #20]
 80058f4:	9b05      	ldr	r3, [sp, #20]
 80058f6:	4694      	mov	ip, r2
 80058f8:	4463      	add	r3, ip
 80058fa:	616b      	str	r3, [r5, #20]
 80058fc:	783b      	ldrb	r3, [r7, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d100      	bne.n	8005904 <_vfiprintf_r+0xc8>
 8005902:	e0ac      	b.n	8005a5e <_vfiprintf_r+0x222>
 8005904:	2201      	movs	r2, #1
 8005906:	1c7b      	adds	r3, r7, #1
 8005908:	9303      	str	r3, [sp, #12]
 800590a:	2300      	movs	r3, #0
 800590c:	4252      	negs	r2, r2
 800590e:	606a      	str	r2, [r5, #4]
 8005910:	a904      	add	r1, sp, #16
 8005912:	3254      	adds	r2, #84	; 0x54
 8005914:	1852      	adds	r2, r2, r1
 8005916:	602b      	str	r3, [r5, #0]
 8005918:	60eb      	str	r3, [r5, #12]
 800591a:	60ab      	str	r3, [r5, #8]
 800591c:	7013      	strb	r3, [r2, #0]
 800591e:	65ab      	str	r3, [r5, #88]	; 0x58
 8005920:	9b03      	ldr	r3, [sp, #12]
 8005922:	2205      	movs	r2, #5
 8005924:	7819      	ldrb	r1, [r3, #0]
 8005926:	485d      	ldr	r0, [pc, #372]	; (8005a9c <_vfiprintf_r+0x260>)
 8005928:	f000 fce2 	bl	80062f0 <memchr>
 800592c:	9b03      	ldr	r3, [sp, #12]
 800592e:	1c5f      	adds	r7, r3, #1
 8005930:	2800      	cmp	r0, #0
 8005932:	d120      	bne.n	8005976 <_vfiprintf_r+0x13a>
 8005934:	682a      	ldr	r2, [r5, #0]
 8005936:	06d3      	lsls	r3, r2, #27
 8005938:	d504      	bpl.n	8005944 <_vfiprintf_r+0x108>
 800593a:	2353      	movs	r3, #83	; 0x53
 800593c:	a904      	add	r1, sp, #16
 800593e:	185b      	adds	r3, r3, r1
 8005940:	2120      	movs	r1, #32
 8005942:	7019      	strb	r1, [r3, #0]
 8005944:	0713      	lsls	r3, r2, #28
 8005946:	d504      	bpl.n	8005952 <_vfiprintf_r+0x116>
 8005948:	2353      	movs	r3, #83	; 0x53
 800594a:	a904      	add	r1, sp, #16
 800594c:	185b      	adds	r3, r3, r1
 800594e:	212b      	movs	r1, #43	; 0x2b
 8005950:	7019      	strb	r1, [r3, #0]
 8005952:	9b03      	ldr	r3, [sp, #12]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	2b2a      	cmp	r3, #42	; 0x2a
 8005958:	d016      	beq.n	8005988 <_vfiprintf_r+0x14c>
 800595a:	2100      	movs	r1, #0
 800595c:	68eb      	ldr	r3, [r5, #12]
 800595e:	9f03      	ldr	r7, [sp, #12]
 8005960:	783a      	ldrb	r2, [r7, #0]
 8005962:	1c78      	adds	r0, r7, #1
 8005964:	3a30      	subs	r2, #48	; 0x30
 8005966:	4684      	mov	ip, r0
 8005968:	2a09      	cmp	r2, #9
 800596a:	d94f      	bls.n	8005a0c <_vfiprintf_r+0x1d0>
 800596c:	2900      	cmp	r1, #0
 800596e:	d111      	bne.n	8005994 <_vfiprintf_r+0x158>
 8005970:	e017      	b.n	80059a2 <_vfiprintf_r+0x166>
 8005972:	3701      	adds	r7, #1
 8005974:	e7a9      	b.n	80058ca <_vfiprintf_r+0x8e>
 8005976:	4b49      	ldr	r3, [pc, #292]	; (8005a9c <_vfiprintf_r+0x260>)
 8005978:	682a      	ldr	r2, [r5, #0]
 800597a:	1ac0      	subs	r0, r0, r3
 800597c:	2301      	movs	r3, #1
 800597e:	4083      	lsls	r3, r0
 8005980:	4313      	orrs	r3, r2
 8005982:	602b      	str	r3, [r5, #0]
 8005984:	9703      	str	r7, [sp, #12]
 8005986:	e7cb      	b.n	8005920 <_vfiprintf_r+0xe4>
 8005988:	9b07      	ldr	r3, [sp, #28]
 800598a:	1d19      	adds	r1, r3, #4
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	9107      	str	r1, [sp, #28]
 8005990:	2b00      	cmp	r3, #0
 8005992:	db01      	blt.n	8005998 <_vfiprintf_r+0x15c>
 8005994:	930b      	str	r3, [sp, #44]	; 0x2c
 8005996:	e004      	b.n	80059a2 <_vfiprintf_r+0x166>
 8005998:	425b      	negs	r3, r3
 800599a:	60eb      	str	r3, [r5, #12]
 800599c:	2302      	movs	r3, #2
 800599e:	4313      	orrs	r3, r2
 80059a0:	602b      	str	r3, [r5, #0]
 80059a2:	783b      	ldrb	r3, [r7, #0]
 80059a4:	2b2e      	cmp	r3, #46	; 0x2e
 80059a6:	d10a      	bne.n	80059be <_vfiprintf_r+0x182>
 80059a8:	787b      	ldrb	r3, [r7, #1]
 80059aa:	2b2a      	cmp	r3, #42	; 0x2a
 80059ac:	d137      	bne.n	8005a1e <_vfiprintf_r+0x1e2>
 80059ae:	9b07      	ldr	r3, [sp, #28]
 80059b0:	3702      	adds	r7, #2
 80059b2:	1d1a      	adds	r2, r3, #4
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	9207      	str	r2, [sp, #28]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	db2d      	blt.n	8005a18 <_vfiprintf_r+0x1dc>
 80059bc:	9309      	str	r3, [sp, #36]	; 0x24
 80059be:	2203      	movs	r2, #3
 80059c0:	7839      	ldrb	r1, [r7, #0]
 80059c2:	4837      	ldr	r0, [pc, #220]	; (8005aa0 <_vfiprintf_r+0x264>)
 80059c4:	f000 fc94 	bl	80062f0 <memchr>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d007      	beq.n	80059dc <_vfiprintf_r+0x1a0>
 80059cc:	4b34      	ldr	r3, [pc, #208]	; (8005aa0 <_vfiprintf_r+0x264>)
 80059ce:	682a      	ldr	r2, [r5, #0]
 80059d0:	1ac0      	subs	r0, r0, r3
 80059d2:	2340      	movs	r3, #64	; 0x40
 80059d4:	4083      	lsls	r3, r0
 80059d6:	4313      	orrs	r3, r2
 80059d8:	3701      	adds	r7, #1
 80059da:	602b      	str	r3, [r5, #0]
 80059dc:	7839      	ldrb	r1, [r7, #0]
 80059de:	1c7b      	adds	r3, r7, #1
 80059e0:	2206      	movs	r2, #6
 80059e2:	4830      	ldr	r0, [pc, #192]	; (8005aa4 <_vfiprintf_r+0x268>)
 80059e4:	9303      	str	r3, [sp, #12]
 80059e6:	7629      	strb	r1, [r5, #24]
 80059e8:	f000 fc82 	bl	80062f0 <memchr>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d045      	beq.n	8005a7c <_vfiprintf_r+0x240>
 80059f0:	4b2d      	ldr	r3, [pc, #180]	; (8005aa8 <_vfiprintf_r+0x26c>)
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d127      	bne.n	8005a46 <_vfiprintf_r+0x20a>
 80059f6:	2207      	movs	r2, #7
 80059f8:	9b07      	ldr	r3, [sp, #28]
 80059fa:	3307      	adds	r3, #7
 80059fc:	4393      	bics	r3, r2
 80059fe:	3308      	adds	r3, #8
 8005a00:	9307      	str	r3, [sp, #28]
 8005a02:	696b      	ldr	r3, [r5, #20]
 8005a04:	9a04      	ldr	r2, [sp, #16]
 8005a06:	189b      	adds	r3, r3, r2
 8005a08:	616b      	str	r3, [r5, #20]
 8005a0a:	e75d      	b.n	80058c8 <_vfiprintf_r+0x8c>
 8005a0c:	210a      	movs	r1, #10
 8005a0e:	434b      	muls	r3, r1
 8005a10:	4667      	mov	r7, ip
 8005a12:	189b      	adds	r3, r3, r2
 8005a14:	3909      	subs	r1, #9
 8005a16:	e7a3      	b.n	8005960 <_vfiprintf_r+0x124>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	425b      	negs	r3, r3
 8005a1c:	e7ce      	b.n	80059bc <_vfiprintf_r+0x180>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	001a      	movs	r2, r3
 8005a22:	3701      	adds	r7, #1
 8005a24:	606b      	str	r3, [r5, #4]
 8005a26:	7839      	ldrb	r1, [r7, #0]
 8005a28:	1c78      	adds	r0, r7, #1
 8005a2a:	3930      	subs	r1, #48	; 0x30
 8005a2c:	4684      	mov	ip, r0
 8005a2e:	2909      	cmp	r1, #9
 8005a30:	d903      	bls.n	8005a3a <_vfiprintf_r+0x1fe>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0c3      	beq.n	80059be <_vfiprintf_r+0x182>
 8005a36:	9209      	str	r2, [sp, #36]	; 0x24
 8005a38:	e7c1      	b.n	80059be <_vfiprintf_r+0x182>
 8005a3a:	230a      	movs	r3, #10
 8005a3c:	435a      	muls	r2, r3
 8005a3e:	4667      	mov	r7, ip
 8005a40:	1852      	adds	r2, r2, r1
 8005a42:	3b09      	subs	r3, #9
 8005a44:	e7ef      	b.n	8005a26 <_vfiprintf_r+0x1ea>
 8005a46:	ab07      	add	r3, sp, #28
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	0022      	movs	r2, r4
 8005a4c:	0029      	movs	r1, r5
 8005a4e:	0030      	movs	r0, r6
 8005a50:	4b16      	ldr	r3, [pc, #88]	; (8005aac <_vfiprintf_r+0x270>)
 8005a52:	e000      	b.n	8005a56 <_vfiprintf_r+0x21a>
 8005a54:	bf00      	nop
 8005a56:	9004      	str	r0, [sp, #16]
 8005a58:	9b04      	ldr	r3, [sp, #16]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	d1d1      	bne.n	8005a02 <_vfiprintf_r+0x1c6>
 8005a5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a60:	07db      	lsls	r3, r3, #31
 8005a62:	d405      	bmi.n	8005a70 <_vfiprintf_r+0x234>
 8005a64:	89a3      	ldrh	r3, [r4, #12]
 8005a66:	059b      	lsls	r3, r3, #22
 8005a68:	d402      	bmi.n	8005a70 <_vfiprintf_r+0x234>
 8005a6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a6c:	f7ff fe24 	bl	80056b8 <__retarget_lock_release_recursive>
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	065b      	lsls	r3, r3, #25
 8005a74:	d500      	bpl.n	8005a78 <_vfiprintf_r+0x23c>
 8005a76:	e70a      	b.n	800588e <_vfiprintf_r+0x52>
 8005a78:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005a7a:	e70a      	b.n	8005892 <_vfiprintf_r+0x56>
 8005a7c:	ab07      	add	r3, sp, #28
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	0022      	movs	r2, r4
 8005a82:	0029      	movs	r1, r5
 8005a84:	0030      	movs	r0, r6
 8005a86:	4b09      	ldr	r3, [pc, #36]	; (8005aac <_vfiprintf_r+0x270>)
 8005a88:	f000 f882 	bl	8005b90 <_printf_i>
 8005a8c:	e7e3      	b.n	8005a56 <_vfiprintf_r+0x21a>
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	080068f4 	.word	0x080068f4
 8005a94:	08006914 	.word	0x08006914
 8005a98:	080068d4 	.word	0x080068d4
 8005a9c:	08006934 	.word	0x08006934
 8005aa0:	0800693a 	.word	0x0800693a
 8005aa4:	0800693e 	.word	0x0800693e
 8005aa8:	00000000 	.word	0x00000000
 8005aac:	08005817 	.word	0x08005817

08005ab0 <_printf_common>:
 8005ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ab2:	0015      	movs	r5, r2
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	688a      	ldr	r2, [r1, #8]
 8005ab8:	690b      	ldr	r3, [r1, #16]
 8005aba:	000c      	movs	r4, r1
 8005abc:	9000      	str	r0, [sp, #0]
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	da00      	bge.n	8005ac4 <_printf_common+0x14>
 8005ac2:	0013      	movs	r3, r2
 8005ac4:	0022      	movs	r2, r4
 8005ac6:	602b      	str	r3, [r5, #0]
 8005ac8:	3243      	adds	r2, #67	; 0x43
 8005aca:	7812      	ldrb	r2, [r2, #0]
 8005acc:	2a00      	cmp	r2, #0
 8005ace:	d001      	beq.n	8005ad4 <_printf_common+0x24>
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	602b      	str	r3, [r5, #0]
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	069b      	lsls	r3, r3, #26
 8005ad8:	d502      	bpl.n	8005ae0 <_printf_common+0x30>
 8005ada:	682b      	ldr	r3, [r5, #0]
 8005adc:	3302      	adds	r3, #2
 8005ade:	602b      	str	r3, [r5, #0]
 8005ae0:	6822      	ldr	r2, [r4, #0]
 8005ae2:	2306      	movs	r3, #6
 8005ae4:	0017      	movs	r7, r2
 8005ae6:	401f      	ands	r7, r3
 8005ae8:	421a      	tst	r2, r3
 8005aea:	d027      	beq.n	8005b3c <_printf_common+0x8c>
 8005aec:	0023      	movs	r3, r4
 8005aee:	3343      	adds	r3, #67	; 0x43
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	1e5a      	subs	r2, r3, #1
 8005af4:	4193      	sbcs	r3, r2
 8005af6:	6822      	ldr	r2, [r4, #0]
 8005af8:	0692      	lsls	r2, r2, #26
 8005afa:	d430      	bmi.n	8005b5e <_printf_common+0xae>
 8005afc:	0022      	movs	r2, r4
 8005afe:	9901      	ldr	r1, [sp, #4]
 8005b00:	9800      	ldr	r0, [sp, #0]
 8005b02:	9e08      	ldr	r6, [sp, #32]
 8005b04:	3243      	adds	r2, #67	; 0x43
 8005b06:	47b0      	blx	r6
 8005b08:	1c43      	adds	r3, r0, #1
 8005b0a:	d025      	beq.n	8005b58 <_printf_common+0xa8>
 8005b0c:	2306      	movs	r3, #6
 8005b0e:	6820      	ldr	r0, [r4, #0]
 8005b10:	682a      	ldr	r2, [r5, #0]
 8005b12:	68e1      	ldr	r1, [r4, #12]
 8005b14:	2500      	movs	r5, #0
 8005b16:	4003      	ands	r3, r0
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d103      	bne.n	8005b24 <_printf_common+0x74>
 8005b1c:	1a8d      	subs	r5, r1, r2
 8005b1e:	43eb      	mvns	r3, r5
 8005b20:	17db      	asrs	r3, r3, #31
 8005b22:	401d      	ands	r5, r3
 8005b24:	68a3      	ldr	r3, [r4, #8]
 8005b26:	6922      	ldr	r2, [r4, #16]
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	dd01      	ble.n	8005b30 <_printf_common+0x80>
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	18ed      	adds	r5, r5, r3
 8005b30:	2700      	movs	r7, #0
 8005b32:	42bd      	cmp	r5, r7
 8005b34:	d120      	bne.n	8005b78 <_printf_common+0xc8>
 8005b36:	2000      	movs	r0, #0
 8005b38:	e010      	b.n	8005b5c <_printf_common+0xac>
 8005b3a:	3701      	adds	r7, #1
 8005b3c:	68e3      	ldr	r3, [r4, #12]
 8005b3e:	682a      	ldr	r2, [r5, #0]
 8005b40:	1a9b      	subs	r3, r3, r2
 8005b42:	42bb      	cmp	r3, r7
 8005b44:	ddd2      	ble.n	8005aec <_printf_common+0x3c>
 8005b46:	0022      	movs	r2, r4
 8005b48:	2301      	movs	r3, #1
 8005b4a:	9901      	ldr	r1, [sp, #4]
 8005b4c:	9800      	ldr	r0, [sp, #0]
 8005b4e:	9e08      	ldr	r6, [sp, #32]
 8005b50:	3219      	adds	r2, #25
 8005b52:	47b0      	blx	r6
 8005b54:	1c43      	adds	r3, r0, #1
 8005b56:	d1f0      	bne.n	8005b3a <_printf_common+0x8a>
 8005b58:	2001      	movs	r0, #1
 8005b5a:	4240      	negs	r0, r0
 8005b5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b5e:	2030      	movs	r0, #48	; 0x30
 8005b60:	18e1      	adds	r1, r4, r3
 8005b62:	3143      	adds	r1, #67	; 0x43
 8005b64:	7008      	strb	r0, [r1, #0]
 8005b66:	0021      	movs	r1, r4
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	3145      	adds	r1, #69	; 0x45
 8005b6c:	7809      	ldrb	r1, [r1, #0]
 8005b6e:	18a2      	adds	r2, r4, r2
 8005b70:	3243      	adds	r2, #67	; 0x43
 8005b72:	3302      	adds	r3, #2
 8005b74:	7011      	strb	r1, [r2, #0]
 8005b76:	e7c1      	b.n	8005afc <_printf_common+0x4c>
 8005b78:	0022      	movs	r2, r4
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	9901      	ldr	r1, [sp, #4]
 8005b7e:	9800      	ldr	r0, [sp, #0]
 8005b80:	9e08      	ldr	r6, [sp, #32]
 8005b82:	321a      	adds	r2, #26
 8005b84:	47b0      	blx	r6
 8005b86:	1c43      	adds	r3, r0, #1
 8005b88:	d0e6      	beq.n	8005b58 <_printf_common+0xa8>
 8005b8a:	3701      	adds	r7, #1
 8005b8c:	e7d1      	b.n	8005b32 <_printf_common+0x82>
	...

08005b90 <_printf_i>:
 8005b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b92:	b08b      	sub	sp, #44	; 0x2c
 8005b94:	9206      	str	r2, [sp, #24]
 8005b96:	000a      	movs	r2, r1
 8005b98:	3243      	adds	r2, #67	; 0x43
 8005b9a:	9307      	str	r3, [sp, #28]
 8005b9c:	9005      	str	r0, [sp, #20]
 8005b9e:	9204      	str	r2, [sp, #16]
 8005ba0:	7e0a      	ldrb	r2, [r1, #24]
 8005ba2:	000c      	movs	r4, r1
 8005ba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ba6:	2a78      	cmp	r2, #120	; 0x78
 8005ba8:	d807      	bhi.n	8005bba <_printf_i+0x2a>
 8005baa:	2a62      	cmp	r2, #98	; 0x62
 8005bac:	d809      	bhi.n	8005bc2 <_printf_i+0x32>
 8005bae:	2a00      	cmp	r2, #0
 8005bb0:	d100      	bne.n	8005bb4 <_printf_i+0x24>
 8005bb2:	e0c1      	b.n	8005d38 <_printf_i+0x1a8>
 8005bb4:	2a58      	cmp	r2, #88	; 0x58
 8005bb6:	d100      	bne.n	8005bba <_printf_i+0x2a>
 8005bb8:	e08c      	b.n	8005cd4 <_printf_i+0x144>
 8005bba:	0026      	movs	r6, r4
 8005bbc:	3642      	adds	r6, #66	; 0x42
 8005bbe:	7032      	strb	r2, [r6, #0]
 8005bc0:	e022      	b.n	8005c08 <_printf_i+0x78>
 8005bc2:	0010      	movs	r0, r2
 8005bc4:	3863      	subs	r0, #99	; 0x63
 8005bc6:	2815      	cmp	r0, #21
 8005bc8:	d8f7      	bhi.n	8005bba <_printf_i+0x2a>
 8005bca:	f7fa fa9b 	bl	8000104 <__gnu_thumb1_case_shi>
 8005bce:	0016      	.short	0x0016
 8005bd0:	fff6001f 	.word	0xfff6001f
 8005bd4:	fff6fff6 	.word	0xfff6fff6
 8005bd8:	001ffff6 	.word	0x001ffff6
 8005bdc:	fff6fff6 	.word	0xfff6fff6
 8005be0:	fff6fff6 	.word	0xfff6fff6
 8005be4:	003600a8 	.word	0x003600a8
 8005be8:	fff6009a 	.word	0xfff6009a
 8005bec:	00b9fff6 	.word	0x00b9fff6
 8005bf0:	0036fff6 	.word	0x0036fff6
 8005bf4:	fff6fff6 	.word	0xfff6fff6
 8005bf8:	009e      	.short	0x009e
 8005bfa:	0026      	movs	r6, r4
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	3642      	adds	r6, #66	; 0x42
 8005c00:	1d11      	adds	r1, r2, #4
 8005c02:	6019      	str	r1, [r3, #0]
 8005c04:	6813      	ldr	r3, [r2, #0]
 8005c06:	7033      	strb	r3, [r6, #0]
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0a7      	b.n	8005d5c <_printf_i+0x1cc>
 8005c0c:	6808      	ldr	r0, [r1, #0]
 8005c0e:	6819      	ldr	r1, [r3, #0]
 8005c10:	1d0a      	adds	r2, r1, #4
 8005c12:	0605      	lsls	r5, r0, #24
 8005c14:	d50b      	bpl.n	8005c2e <_printf_i+0x9e>
 8005c16:	680d      	ldr	r5, [r1, #0]
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	2d00      	cmp	r5, #0
 8005c1c:	da03      	bge.n	8005c26 <_printf_i+0x96>
 8005c1e:	232d      	movs	r3, #45	; 0x2d
 8005c20:	9a04      	ldr	r2, [sp, #16]
 8005c22:	426d      	negs	r5, r5
 8005c24:	7013      	strb	r3, [r2, #0]
 8005c26:	4b61      	ldr	r3, [pc, #388]	; (8005dac <_printf_i+0x21c>)
 8005c28:	270a      	movs	r7, #10
 8005c2a:	9303      	str	r3, [sp, #12]
 8005c2c:	e01b      	b.n	8005c66 <_printf_i+0xd6>
 8005c2e:	680d      	ldr	r5, [r1, #0]
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	0641      	lsls	r1, r0, #25
 8005c34:	d5f1      	bpl.n	8005c1a <_printf_i+0x8a>
 8005c36:	b22d      	sxth	r5, r5
 8005c38:	e7ef      	b.n	8005c1a <_printf_i+0x8a>
 8005c3a:	680d      	ldr	r5, [r1, #0]
 8005c3c:	6819      	ldr	r1, [r3, #0]
 8005c3e:	1d08      	adds	r0, r1, #4
 8005c40:	6018      	str	r0, [r3, #0]
 8005c42:	062e      	lsls	r6, r5, #24
 8005c44:	d501      	bpl.n	8005c4a <_printf_i+0xba>
 8005c46:	680d      	ldr	r5, [r1, #0]
 8005c48:	e003      	b.n	8005c52 <_printf_i+0xc2>
 8005c4a:	066d      	lsls	r5, r5, #25
 8005c4c:	d5fb      	bpl.n	8005c46 <_printf_i+0xb6>
 8005c4e:	680d      	ldr	r5, [r1, #0]
 8005c50:	b2ad      	uxth	r5, r5
 8005c52:	4b56      	ldr	r3, [pc, #344]	; (8005dac <_printf_i+0x21c>)
 8005c54:	2708      	movs	r7, #8
 8005c56:	9303      	str	r3, [sp, #12]
 8005c58:	2a6f      	cmp	r2, #111	; 0x6f
 8005c5a:	d000      	beq.n	8005c5e <_printf_i+0xce>
 8005c5c:	3702      	adds	r7, #2
 8005c5e:	0023      	movs	r3, r4
 8005c60:	2200      	movs	r2, #0
 8005c62:	3343      	adds	r3, #67	; 0x43
 8005c64:	701a      	strb	r2, [r3, #0]
 8005c66:	6863      	ldr	r3, [r4, #4]
 8005c68:	60a3      	str	r3, [r4, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	db03      	blt.n	8005c76 <_printf_i+0xe6>
 8005c6e:	2204      	movs	r2, #4
 8005c70:	6821      	ldr	r1, [r4, #0]
 8005c72:	4391      	bics	r1, r2
 8005c74:	6021      	str	r1, [r4, #0]
 8005c76:	2d00      	cmp	r5, #0
 8005c78:	d102      	bne.n	8005c80 <_printf_i+0xf0>
 8005c7a:	9e04      	ldr	r6, [sp, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00c      	beq.n	8005c9a <_printf_i+0x10a>
 8005c80:	9e04      	ldr	r6, [sp, #16]
 8005c82:	0028      	movs	r0, r5
 8005c84:	0039      	movs	r1, r7
 8005c86:	f7fa facd 	bl	8000224 <__aeabi_uidivmod>
 8005c8a:	9b03      	ldr	r3, [sp, #12]
 8005c8c:	3e01      	subs	r6, #1
 8005c8e:	5c5b      	ldrb	r3, [r3, r1]
 8005c90:	7033      	strb	r3, [r6, #0]
 8005c92:	002b      	movs	r3, r5
 8005c94:	0005      	movs	r5, r0
 8005c96:	429f      	cmp	r7, r3
 8005c98:	d9f3      	bls.n	8005c82 <_printf_i+0xf2>
 8005c9a:	2f08      	cmp	r7, #8
 8005c9c:	d109      	bne.n	8005cb2 <_printf_i+0x122>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	07db      	lsls	r3, r3, #31
 8005ca2:	d506      	bpl.n	8005cb2 <_printf_i+0x122>
 8005ca4:	6863      	ldr	r3, [r4, #4]
 8005ca6:	6922      	ldr	r2, [r4, #16]
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	dc02      	bgt.n	8005cb2 <_printf_i+0x122>
 8005cac:	2330      	movs	r3, #48	; 0x30
 8005cae:	3e01      	subs	r6, #1
 8005cb0:	7033      	strb	r3, [r6, #0]
 8005cb2:	9b04      	ldr	r3, [sp, #16]
 8005cb4:	1b9b      	subs	r3, r3, r6
 8005cb6:	6123      	str	r3, [r4, #16]
 8005cb8:	9b07      	ldr	r3, [sp, #28]
 8005cba:	0021      	movs	r1, r4
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	9805      	ldr	r0, [sp, #20]
 8005cc0:	9b06      	ldr	r3, [sp, #24]
 8005cc2:	aa09      	add	r2, sp, #36	; 0x24
 8005cc4:	f7ff fef4 	bl	8005ab0 <_printf_common>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d14c      	bne.n	8005d66 <_printf_i+0x1d6>
 8005ccc:	2001      	movs	r0, #1
 8005cce:	4240      	negs	r0, r0
 8005cd0:	b00b      	add	sp, #44	; 0x2c
 8005cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd4:	3145      	adds	r1, #69	; 0x45
 8005cd6:	700a      	strb	r2, [r1, #0]
 8005cd8:	4a34      	ldr	r2, [pc, #208]	; (8005dac <_printf_i+0x21c>)
 8005cda:	9203      	str	r2, [sp, #12]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	6821      	ldr	r1, [r4, #0]
 8005ce0:	ca20      	ldmia	r2!, {r5}
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	0608      	lsls	r0, r1, #24
 8005ce6:	d516      	bpl.n	8005d16 <_printf_i+0x186>
 8005ce8:	07cb      	lsls	r3, r1, #31
 8005cea:	d502      	bpl.n	8005cf2 <_printf_i+0x162>
 8005cec:	2320      	movs	r3, #32
 8005cee:	4319      	orrs	r1, r3
 8005cf0:	6021      	str	r1, [r4, #0]
 8005cf2:	2710      	movs	r7, #16
 8005cf4:	2d00      	cmp	r5, #0
 8005cf6:	d1b2      	bne.n	8005c5e <_printf_i+0xce>
 8005cf8:	2320      	movs	r3, #32
 8005cfa:	6822      	ldr	r2, [r4, #0]
 8005cfc:	439a      	bics	r2, r3
 8005cfe:	6022      	str	r2, [r4, #0]
 8005d00:	e7ad      	b.n	8005c5e <_printf_i+0xce>
 8005d02:	2220      	movs	r2, #32
 8005d04:	6809      	ldr	r1, [r1, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	6022      	str	r2, [r4, #0]
 8005d0a:	0022      	movs	r2, r4
 8005d0c:	2178      	movs	r1, #120	; 0x78
 8005d0e:	3245      	adds	r2, #69	; 0x45
 8005d10:	7011      	strb	r1, [r2, #0]
 8005d12:	4a27      	ldr	r2, [pc, #156]	; (8005db0 <_printf_i+0x220>)
 8005d14:	e7e1      	b.n	8005cda <_printf_i+0x14a>
 8005d16:	0648      	lsls	r0, r1, #25
 8005d18:	d5e6      	bpl.n	8005ce8 <_printf_i+0x158>
 8005d1a:	b2ad      	uxth	r5, r5
 8005d1c:	e7e4      	b.n	8005ce8 <_printf_i+0x158>
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	680d      	ldr	r5, [r1, #0]
 8005d22:	1d10      	adds	r0, r2, #4
 8005d24:	6949      	ldr	r1, [r1, #20]
 8005d26:	6018      	str	r0, [r3, #0]
 8005d28:	6813      	ldr	r3, [r2, #0]
 8005d2a:	062e      	lsls	r6, r5, #24
 8005d2c:	d501      	bpl.n	8005d32 <_printf_i+0x1a2>
 8005d2e:	6019      	str	r1, [r3, #0]
 8005d30:	e002      	b.n	8005d38 <_printf_i+0x1a8>
 8005d32:	066d      	lsls	r5, r5, #25
 8005d34:	d5fb      	bpl.n	8005d2e <_printf_i+0x19e>
 8005d36:	8019      	strh	r1, [r3, #0]
 8005d38:	2300      	movs	r3, #0
 8005d3a:	9e04      	ldr	r6, [sp, #16]
 8005d3c:	6123      	str	r3, [r4, #16]
 8005d3e:	e7bb      	b.n	8005cb8 <_printf_i+0x128>
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	1d11      	adds	r1, r2, #4
 8005d44:	6019      	str	r1, [r3, #0]
 8005d46:	6816      	ldr	r6, [r2, #0]
 8005d48:	2100      	movs	r1, #0
 8005d4a:	0030      	movs	r0, r6
 8005d4c:	6862      	ldr	r2, [r4, #4]
 8005d4e:	f000 facf 	bl	80062f0 <memchr>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d001      	beq.n	8005d5a <_printf_i+0x1ca>
 8005d56:	1b80      	subs	r0, r0, r6
 8005d58:	6060      	str	r0, [r4, #4]
 8005d5a:	6863      	ldr	r3, [r4, #4]
 8005d5c:	6123      	str	r3, [r4, #16]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	9a04      	ldr	r2, [sp, #16]
 8005d62:	7013      	strb	r3, [r2, #0]
 8005d64:	e7a8      	b.n	8005cb8 <_printf_i+0x128>
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	0032      	movs	r2, r6
 8005d6a:	9906      	ldr	r1, [sp, #24]
 8005d6c:	9805      	ldr	r0, [sp, #20]
 8005d6e:	9d07      	ldr	r5, [sp, #28]
 8005d70:	47a8      	blx	r5
 8005d72:	1c43      	adds	r3, r0, #1
 8005d74:	d0aa      	beq.n	8005ccc <_printf_i+0x13c>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	079b      	lsls	r3, r3, #30
 8005d7a:	d415      	bmi.n	8005da8 <_printf_i+0x218>
 8005d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d7e:	68e0      	ldr	r0, [r4, #12]
 8005d80:	4298      	cmp	r0, r3
 8005d82:	daa5      	bge.n	8005cd0 <_printf_i+0x140>
 8005d84:	0018      	movs	r0, r3
 8005d86:	e7a3      	b.n	8005cd0 <_printf_i+0x140>
 8005d88:	0022      	movs	r2, r4
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	9906      	ldr	r1, [sp, #24]
 8005d8e:	9805      	ldr	r0, [sp, #20]
 8005d90:	9e07      	ldr	r6, [sp, #28]
 8005d92:	3219      	adds	r2, #25
 8005d94:	47b0      	blx	r6
 8005d96:	1c43      	adds	r3, r0, #1
 8005d98:	d098      	beq.n	8005ccc <_printf_i+0x13c>
 8005d9a:	3501      	adds	r5, #1
 8005d9c:	68e3      	ldr	r3, [r4, #12]
 8005d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005da0:	1a9b      	subs	r3, r3, r2
 8005da2:	42ab      	cmp	r3, r5
 8005da4:	dcf0      	bgt.n	8005d88 <_printf_i+0x1f8>
 8005da6:	e7e9      	b.n	8005d7c <_printf_i+0x1ec>
 8005da8:	2500      	movs	r5, #0
 8005daa:	e7f7      	b.n	8005d9c <_printf_i+0x20c>
 8005dac:	08006945 	.word	0x08006945
 8005db0:	08006956 	.word	0x08006956

08005db4 <_sbrk_r>:
 8005db4:	2300      	movs	r3, #0
 8005db6:	b570      	push	{r4, r5, r6, lr}
 8005db8:	4d06      	ldr	r5, [pc, #24]	; (8005dd4 <_sbrk_r+0x20>)
 8005dba:	0004      	movs	r4, r0
 8005dbc:	0008      	movs	r0, r1
 8005dbe:	602b      	str	r3, [r5, #0]
 8005dc0:	f7fb fe9c 	bl	8001afc <_sbrk>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d103      	bne.n	8005dd0 <_sbrk_r+0x1c>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d000      	beq.n	8005dd0 <_sbrk_r+0x1c>
 8005dce:	6023      	str	r3, [r4, #0]
 8005dd0:	bd70      	pop	{r4, r5, r6, pc}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	20000294 	.word	0x20000294

08005dd8 <__sread>:
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	000c      	movs	r4, r1
 8005ddc:	250e      	movs	r5, #14
 8005dde:	5f49      	ldrsh	r1, [r1, r5]
 8005de0:	f000 faec 	bl	80063bc <_read_r>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	db03      	blt.n	8005df0 <__sread+0x18>
 8005de8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005dea:	181b      	adds	r3, r3, r0
 8005dec:	6563      	str	r3, [r4, #84]	; 0x54
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	4a02      	ldr	r2, [pc, #8]	; (8005dfc <__sread+0x24>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	81a3      	strh	r3, [r4, #12]
 8005df8:	e7f9      	b.n	8005dee <__sread+0x16>
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	ffffefff 	.word	0xffffefff

08005e00 <__swrite>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	001f      	movs	r7, r3
 8005e04:	898b      	ldrh	r3, [r1, #12]
 8005e06:	0005      	movs	r5, r0
 8005e08:	000c      	movs	r4, r1
 8005e0a:	0016      	movs	r6, r2
 8005e0c:	05db      	lsls	r3, r3, #23
 8005e0e:	d505      	bpl.n	8005e1c <__swrite+0x1c>
 8005e10:	230e      	movs	r3, #14
 8005e12:	5ec9      	ldrsh	r1, [r1, r3]
 8005e14:	2200      	movs	r2, #0
 8005e16:	2302      	movs	r3, #2
 8005e18:	f000 f9ea 	bl	80061f0 <_lseek_r>
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	4a05      	ldr	r2, [pc, #20]	; (8005e34 <__swrite+0x34>)
 8005e20:	0028      	movs	r0, r5
 8005e22:	4013      	ands	r3, r2
 8005e24:	81a3      	strh	r3, [r4, #12]
 8005e26:	0032      	movs	r2, r6
 8005e28:	230e      	movs	r3, #14
 8005e2a:	5ee1      	ldrsh	r1, [r4, r3]
 8005e2c:	003b      	movs	r3, r7
 8005e2e:	f000 f875 	bl	8005f1c <_write_r>
 8005e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e34:	ffffefff 	.word	0xffffefff

08005e38 <__sseek>:
 8005e38:	b570      	push	{r4, r5, r6, lr}
 8005e3a:	000c      	movs	r4, r1
 8005e3c:	250e      	movs	r5, #14
 8005e3e:	5f49      	ldrsh	r1, [r1, r5]
 8005e40:	f000 f9d6 	bl	80061f0 <_lseek_r>
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	1c42      	adds	r2, r0, #1
 8005e48:	d103      	bne.n	8005e52 <__sseek+0x1a>
 8005e4a:	4a05      	ldr	r2, [pc, #20]	; (8005e60 <__sseek+0x28>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	81a3      	strh	r3, [r4, #12]
 8005e50:	bd70      	pop	{r4, r5, r6, pc}
 8005e52:	2280      	movs	r2, #128	; 0x80
 8005e54:	0152      	lsls	r2, r2, #5
 8005e56:	4313      	orrs	r3, r2
 8005e58:	81a3      	strh	r3, [r4, #12]
 8005e5a:	6560      	str	r0, [r4, #84]	; 0x54
 8005e5c:	e7f8      	b.n	8005e50 <__sseek+0x18>
 8005e5e:	46c0      	nop			; (mov r8, r8)
 8005e60:	ffffefff 	.word	0xffffefff

08005e64 <__sclose>:
 8005e64:	b510      	push	{r4, lr}
 8005e66:	230e      	movs	r3, #14
 8005e68:	5ec9      	ldrsh	r1, [r1, r3]
 8005e6a:	f000 f8e3 	bl	8006034 <_close_r>
 8005e6e:	bd10      	pop	{r4, pc}

08005e70 <__swbuf_r>:
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	0005      	movs	r5, r0
 8005e74:	000e      	movs	r6, r1
 8005e76:	0014      	movs	r4, r2
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	d004      	beq.n	8005e86 <__swbuf_r+0x16>
 8005e7c:	6983      	ldr	r3, [r0, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <__swbuf_r+0x16>
 8005e82:	f7ff fb77 	bl	8005574 <__sinit>
 8005e86:	4b22      	ldr	r3, [pc, #136]	; (8005f10 <__swbuf_r+0xa0>)
 8005e88:	429c      	cmp	r4, r3
 8005e8a:	d12e      	bne.n	8005eea <__swbuf_r+0x7a>
 8005e8c:	686c      	ldr	r4, [r5, #4]
 8005e8e:	69a3      	ldr	r3, [r4, #24]
 8005e90:	60a3      	str	r3, [r4, #8]
 8005e92:	89a3      	ldrh	r3, [r4, #12]
 8005e94:	071b      	lsls	r3, r3, #28
 8005e96:	d532      	bpl.n	8005efe <__swbuf_r+0x8e>
 8005e98:	6923      	ldr	r3, [r4, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d02f      	beq.n	8005efe <__swbuf_r+0x8e>
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	6922      	ldr	r2, [r4, #16]
 8005ea2:	b2f7      	uxtb	r7, r6
 8005ea4:	1a98      	subs	r0, r3, r2
 8005ea6:	6963      	ldr	r3, [r4, #20]
 8005ea8:	b2f6      	uxtb	r6, r6
 8005eaa:	4283      	cmp	r3, r0
 8005eac:	dc05      	bgt.n	8005eba <__swbuf_r+0x4a>
 8005eae:	0021      	movs	r1, r4
 8005eb0:	0028      	movs	r0, r5
 8005eb2:	f000 f95d 	bl	8006170 <_fflush_r>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d127      	bne.n	8005f0a <__swbuf_r+0x9a>
 8005eba:	68a3      	ldr	r3, [r4, #8]
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	60a3      	str	r3, [r4, #8]
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	6022      	str	r2, [r4, #0]
 8005ec8:	701f      	strb	r7, [r3, #0]
 8005eca:	6963      	ldr	r3, [r4, #20]
 8005ecc:	4283      	cmp	r3, r0
 8005ece:	d004      	beq.n	8005eda <__swbuf_r+0x6a>
 8005ed0:	89a3      	ldrh	r3, [r4, #12]
 8005ed2:	07db      	lsls	r3, r3, #31
 8005ed4:	d507      	bpl.n	8005ee6 <__swbuf_r+0x76>
 8005ed6:	2e0a      	cmp	r6, #10
 8005ed8:	d105      	bne.n	8005ee6 <__swbuf_r+0x76>
 8005eda:	0021      	movs	r1, r4
 8005edc:	0028      	movs	r0, r5
 8005ede:	f000 f947 	bl	8006170 <_fflush_r>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d111      	bne.n	8005f0a <__swbuf_r+0x9a>
 8005ee6:	0030      	movs	r0, r6
 8005ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eea:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <__swbuf_r+0xa4>)
 8005eec:	429c      	cmp	r4, r3
 8005eee:	d101      	bne.n	8005ef4 <__swbuf_r+0x84>
 8005ef0:	68ac      	ldr	r4, [r5, #8]
 8005ef2:	e7cc      	b.n	8005e8e <__swbuf_r+0x1e>
 8005ef4:	4b08      	ldr	r3, [pc, #32]	; (8005f18 <__swbuf_r+0xa8>)
 8005ef6:	429c      	cmp	r4, r3
 8005ef8:	d1c9      	bne.n	8005e8e <__swbuf_r+0x1e>
 8005efa:	68ec      	ldr	r4, [r5, #12]
 8005efc:	e7c7      	b.n	8005e8e <__swbuf_r+0x1e>
 8005efe:	0021      	movs	r1, r4
 8005f00:	0028      	movs	r0, r5
 8005f02:	f000 f81f 	bl	8005f44 <__swsetup_r>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	d0c9      	beq.n	8005e9e <__swbuf_r+0x2e>
 8005f0a:	2601      	movs	r6, #1
 8005f0c:	4276      	negs	r6, r6
 8005f0e:	e7ea      	b.n	8005ee6 <__swbuf_r+0x76>
 8005f10:	080068f4 	.word	0x080068f4
 8005f14:	08006914 	.word	0x08006914
 8005f18:	080068d4 	.word	0x080068d4

08005f1c <_write_r>:
 8005f1c:	b570      	push	{r4, r5, r6, lr}
 8005f1e:	0004      	movs	r4, r0
 8005f20:	0008      	movs	r0, r1
 8005f22:	0011      	movs	r1, r2
 8005f24:	001a      	movs	r2, r3
 8005f26:	2300      	movs	r3, #0
 8005f28:	4d05      	ldr	r5, [pc, #20]	; (8005f40 <_write_r+0x24>)
 8005f2a:	602b      	str	r3, [r5, #0]
 8005f2c:	f7fb fd9e 	bl	8001a6c <_write>
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d103      	bne.n	8005f3c <_write_r+0x20>
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d000      	beq.n	8005f3c <_write_r+0x20>
 8005f3a:	6023      	str	r3, [r4, #0]
 8005f3c:	bd70      	pop	{r4, r5, r6, pc}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	20000294 	.word	0x20000294

08005f44 <__swsetup_r>:
 8005f44:	4b37      	ldr	r3, [pc, #220]	; (8006024 <__swsetup_r+0xe0>)
 8005f46:	b570      	push	{r4, r5, r6, lr}
 8005f48:	681d      	ldr	r5, [r3, #0]
 8005f4a:	0006      	movs	r6, r0
 8005f4c:	000c      	movs	r4, r1
 8005f4e:	2d00      	cmp	r5, #0
 8005f50:	d005      	beq.n	8005f5e <__swsetup_r+0x1a>
 8005f52:	69ab      	ldr	r3, [r5, #24]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d102      	bne.n	8005f5e <__swsetup_r+0x1a>
 8005f58:	0028      	movs	r0, r5
 8005f5a:	f7ff fb0b 	bl	8005574 <__sinit>
 8005f5e:	4b32      	ldr	r3, [pc, #200]	; (8006028 <__swsetup_r+0xe4>)
 8005f60:	429c      	cmp	r4, r3
 8005f62:	d10f      	bne.n	8005f84 <__swsetup_r+0x40>
 8005f64:	686c      	ldr	r4, [r5, #4]
 8005f66:	230c      	movs	r3, #12
 8005f68:	5ee2      	ldrsh	r2, [r4, r3]
 8005f6a:	b293      	uxth	r3, r2
 8005f6c:	0711      	lsls	r1, r2, #28
 8005f6e:	d42d      	bmi.n	8005fcc <__swsetup_r+0x88>
 8005f70:	06d9      	lsls	r1, r3, #27
 8005f72:	d411      	bmi.n	8005f98 <__swsetup_r+0x54>
 8005f74:	2309      	movs	r3, #9
 8005f76:	2001      	movs	r0, #1
 8005f78:	6033      	str	r3, [r6, #0]
 8005f7a:	3337      	adds	r3, #55	; 0x37
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	81a3      	strh	r3, [r4, #12]
 8005f80:	4240      	negs	r0, r0
 8005f82:	bd70      	pop	{r4, r5, r6, pc}
 8005f84:	4b29      	ldr	r3, [pc, #164]	; (800602c <__swsetup_r+0xe8>)
 8005f86:	429c      	cmp	r4, r3
 8005f88:	d101      	bne.n	8005f8e <__swsetup_r+0x4a>
 8005f8a:	68ac      	ldr	r4, [r5, #8]
 8005f8c:	e7eb      	b.n	8005f66 <__swsetup_r+0x22>
 8005f8e:	4b28      	ldr	r3, [pc, #160]	; (8006030 <__swsetup_r+0xec>)
 8005f90:	429c      	cmp	r4, r3
 8005f92:	d1e8      	bne.n	8005f66 <__swsetup_r+0x22>
 8005f94:	68ec      	ldr	r4, [r5, #12]
 8005f96:	e7e6      	b.n	8005f66 <__swsetup_r+0x22>
 8005f98:	075b      	lsls	r3, r3, #29
 8005f9a:	d513      	bpl.n	8005fc4 <__swsetup_r+0x80>
 8005f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f9e:	2900      	cmp	r1, #0
 8005fa0:	d008      	beq.n	8005fb4 <__swsetup_r+0x70>
 8005fa2:	0023      	movs	r3, r4
 8005fa4:	3344      	adds	r3, #68	; 0x44
 8005fa6:	4299      	cmp	r1, r3
 8005fa8:	d002      	beq.n	8005fb0 <__swsetup_r+0x6c>
 8005faa:	0030      	movs	r0, r6
 8005fac:	f000 f9bc 	bl	8006328 <_free_r>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	6363      	str	r3, [r4, #52]	; 0x34
 8005fb4:	2224      	movs	r2, #36	; 0x24
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	4393      	bics	r3, r2
 8005fba:	81a3      	strh	r3, [r4, #12]
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	6063      	str	r3, [r4, #4]
 8005fc0:	6923      	ldr	r3, [r4, #16]
 8005fc2:	6023      	str	r3, [r4, #0]
 8005fc4:	2308      	movs	r3, #8
 8005fc6:	89a2      	ldrh	r2, [r4, #12]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	81a3      	strh	r3, [r4, #12]
 8005fcc:	6923      	ldr	r3, [r4, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10b      	bne.n	8005fea <__swsetup_r+0xa6>
 8005fd2:	21a0      	movs	r1, #160	; 0xa0
 8005fd4:	2280      	movs	r2, #128	; 0x80
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	0089      	lsls	r1, r1, #2
 8005fda:	0092      	lsls	r2, r2, #2
 8005fdc:	400b      	ands	r3, r1
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d003      	beq.n	8005fea <__swsetup_r+0xa6>
 8005fe2:	0021      	movs	r1, r4
 8005fe4:	0030      	movs	r0, r6
 8005fe6:	f000 f93f 	bl	8006268 <__smakebuf_r>
 8005fea:	220c      	movs	r2, #12
 8005fec:	5ea3      	ldrsh	r3, [r4, r2]
 8005fee:	2001      	movs	r0, #1
 8005ff0:	001a      	movs	r2, r3
 8005ff2:	b299      	uxth	r1, r3
 8005ff4:	4002      	ands	r2, r0
 8005ff6:	4203      	tst	r3, r0
 8005ff8:	d00f      	beq.n	800601a <__swsetup_r+0xd6>
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	60a2      	str	r2, [r4, #8]
 8005ffe:	6962      	ldr	r2, [r4, #20]
 8006000:	4252      	negs	r2, r2
 8006002:	61a2      	str	r2, [r4, #24]
 8006004:	2000      	movs	r0, #0
 8006006:	6922      	ldr	r2, [r4, #16]
 8006008:	4282      	cmp	r2, r0
 800600a:	d1ba      	bne.n	8005f82 <__swsetup_r+0x3e>
 800600c:	060a      	lsls	r2, r1, #24
 800600e:	d5b8      	bpl.n	8005f82 <__swsetup_r+0x3e>
 8006010:	2240      	movs	r2, #64	; 0x40
 8006012:	4313      	orrs	r3, r2
 8006014:	81a3      	strh	r3, [r4, #12]
 8006016:	3801      	subs	r0, #1
 8006018:	e7b3      	b.n	8005f82 <__swsetup_r+0x3e>
 800601a:	0788      	lsls	r0, r1, #30
 800601c:	d400      	bmi.n	8006020 <__swsetup_r+0xdc>
 800601e:	6962      	ldr	r2, [r4, #20]
 8006020:	60a2      	str	r2, [r4, #8]
 8006022:	e7ef      	b.n	8006004 <__swsetup_r+0xc0>
 8006024:	20000044 	.word	0x20000044
 8006028:	080068f4 	.word	0x080068f4
 800602c:	08006914 	.word	0x08006914
 8006030:	080068d4 	.word	0x080068d4

08006034 <_close_r>:
 8006034:	2300      	movs	r3, #0
 8006036:	b570      	push	{r4, r5, r6, lr}
 8006038:	4d06      	ldr	r5, [pc, #24]	; (8006054 <_close_r+0x20>)
 800603a:	0004      	movs	r4, r0
 800603c:	0008      	movs	r0, r1
 800603e:	602b      	str	r3, [r5, #0]
 8006040:	f7fb fd30 	bl	8001aa4 <_close>
 8006044:	1c43      	adds	r3, r0, #1
 8006046:	d103      	bne.n	8006050 <_close_r+0x1c>
 8006048:	682b      	ldr	r3, [r5, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d000      	beq.n	8006050 <_close_r+0x1c>
 800604e:	6023      	str	r3, [r4, #0]
 8006050:	bd70      	pop	{r4, r5, r6, pc}
 8006052:	46c0      	nop			; (mov r8, r8)
 8006054:	20000294 	.word	0x20000294

08006058 <__sflush_r>:
 8006058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800605a:	898b      	ldrh	r3, [r1, #12]
 800605c:	0005      	movs	r5, r0
 800605e:	000c      	movs	r4, r1
 8006060:	071a      	lsls	r2, r3, #28
 8006062:	d45f      	bmi.n	8006124 <__sflush_r+0xcc>
 8006064:	684a      	ldr	r2, [r1, #4]
 8006066:	2a00      	cmp	r2, #0
 8006068:	dc04      	bgt.n	8006074 <__sflush_r+0x1c>
 800606a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800606c:	2a00      	cmp	r2, #0
 800606e:	dc01      	bgt.n	8006074 <__sflush_r+0x1c>
 8006070:	2000      	movs	r0, #0
 8006072:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006074:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006076:	2f00      	cmp	r7, #0
 8006078:	d0fa      	beq.n	8006070 <__sflush_r+0x18>
 800607a:	2200      	movs	r2, #0
 800607c:	2180      	movs	r1, #128	; 0x80
 800607e:	682e      	ldr	r6, [r5, #0]
 8006080:	602a      	str	r2, [r5, #0]
 8006082:	001a      	movs	r2, r3
 8006084:	0149      	lsls	r1, r1, #5
 8006086:	400a      	ands	r2, r1
 8006088:	420b      	tst	r3, r1
 800608a:	d034      	beq.n	80060f6 <__sflush_r+0x9e>
 800608c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800608e:	89a3      	ldrh	r3, [r4, #12]
 8006090:	075b      	lsls	r3, r3, #29
 8006092:	d506      	bpl.n	80060a2 <__sflush_r+0x4a>
 8006094:	6863      	ldr	r3, [r4, #4]
 8006096:	1ac0      	subs	r0, r0, r3
 8006098:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <__sflush_r+0x4a>
 800609e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060a0:	1ac0      	subs	r0, r0, r3
 80060a2:	0002      	movs	r2, r0
 80060a4:	6a21      	ldr	r1, [r4, #32]
 80060a6:	2300      	movs	r3, #0
 80060a8:	0028      	movs	r0, r5
 80060aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80060ac:	47b8      	blx	r7
 80060ae:	89a1      	ldrh	r1, [r4, #12]
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d106      	bne.n	80060c2 <__sflush_r+0x6a>
 80060b4:	682b      	ldr	r3, [r5, #0]
 80060b6:	2b1d      	cmp	r3, #29
 80060b8:	d831      	bhi.n	800611e <__sflush_r+0xc6>
 80060ba:	4a2c      	ldr	r2, [pc, #176]	; (800616c <__sflush_r+0x114>)
 80060bc:	40da      	lsrs	r2, r3
 80060be:	07d3      	lsls	r3, r2, #31
 80060c0:	d52d      	bpl.n	800611e <__sflush_r+0xc6>
 80060c2:	2300      	movs	r3, #0
 80060c4:	6063      	str	r3, [r4, #4]
 80060c6:	6923      	ldr	r3, [r4, #16]
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	04cb      	lsls	r3, r1, #19
 80060cc:	d505      	bpl.n	80060da <__sflush_r+0x82>
 80060ce:	1c43      	adds	r3, r0, #1
 80060d0:	d102      	bne.n	80060d8 <__sflush_r+0x80>
 80060d2:	682b      	ldr	r3, [r5, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d100      	bne.n	80060da <__sflush_r+0x82>
 80060d8:	6560      	str	r0, [r4, #84]	; 0x54
 80060da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060dc:	602e      	str	r6, [r5, #0]
 80060de:	2900      	cmp	r1, #0
 80060e0:	d0c6      	beq.n	8006070 <__sflush_r+0x18>
 80060e2:	0023      	movs	r3, r4
 80060e4:	3344      	adds	r3, #68	; 0x44
 80060e6:	4299      	cmp	r1, r3
 80060e8:	d002      	beq.n	80060f0 <__sflush_r+0x98>
 80060ea:	0028      	movs	r0, r5
 80060ec:	f000 f91c 	bl	8006328 <_free_r>
 80060f0:	2000      	movs	r0, #0
 80060f2:	6360      	str	r0, [r4, #52]	; 0x34
 80060f4:	e7bd      	b.n	8006072 <__sflush_r+0x1a>
 80060f6:	2301      	movs	r3, #1
 80060f8:	0028      	movs	r0, r5
 80060fa:	6a21      	ldr	r1, [r4, #32]
 80060fc:	47b8      	blx	r7
 80060fe:	1c43      	adds	r3, r0, #1
 8006100:	d1c5      	bne.n	800608e <__sflush_r+0x36>
 8006102:	682b      	ldr	r3, [r5, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0c2      	beq.n	800608e <__sflush_r+0x36>
 8006108:	2b1d      	cmp	r3, #29
 800610a:	d001      	beq.n	8006110 <__sflush_r+0xb8>
 800610c:	2b16      	cmp	r3, #22
 800610e:	d101      	bne.n	8006114 <__sflush_r+0xbc>
 8006110:	602e      	str	r6, [r5, #0]
 8006112:	e7ad      	b.n	8006070 <__sflush_r+0x18>
 8006114:	2340      	movs	r3, #64	; 0x40
 8006116:	89a2      	ldrh	r2, [r4, #12]
 8006118:	4313      	orrs	r3, r2
 800611a:	81a3      	strh	r3, [r4, #12]
 800611c:	e7a9      	b.n	8006072 <__sflush_r+0x1a>
 800611e:	2340      	movs	r3, #64	; 0x40
 8006120:	430b      	orrs	r3, r1
 8006122:	e7fa      	b.n	800611a <__sflush_r+0xc2>
 8006124:	690f      	ldr	r7, [r1, #16]
 8006126:	2f00      	cmp	r7, #0
 8006128:	d0a2      	beq.n	8006070 <__sflush_r+0x18>
 800612a:	680a      	ldr	r2, [r1, #0]
 800612c:	600f      	str	r7, [r1, #0]
 800612e:	1bd2      	subs	r2, r2, r7
 8006130:	9201      	str	r2, [sp, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	079b      	lsls	r3, r3, #30
 8006136:	d100      	bne.n	800613a <__sflush_r+0xe2>
 8006138:	694a      	ldr	r2, [r1, #20]
 800613a:	60a2      	str	r2, [r4, #8]
 800613c:	9b01      	ldr	r3, [sp, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	dc00      	bgt.n	8006144 <__sflush_r+0xec>
 8006142:	e795      	b.n	8006070 <__sflush_r+0x18>
 8006144:	003a      	movs	r2, r7
 8006146:	0028      	movs	r0, r5
 8006148:	9b01      	ldr	r3, [sp, #4]
 800614a:	6a21      	ldr	r1, [r4, #32]
 800614c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800614e:	47b0      	blx	r6
 8006150:	2800      	cmp	r0, #0
 8006152:	dc06      	bgt.n	8006162 <__sflush_r+0x10a>
 8006154:	2340      	movs	r3, #64	; 0x40
 8006156:	2001      	movs	r0, #1
 8006158:	89a2      	ldrh	r2, [r4, #12]
 800615a:	4240      	negs	r0, r0
 800615c:	4313      	orrs	r3, r2
 800615e:	81a3      	strh	r3, [r4, #12]
 8006160:	e787      	b.n	8006072 <__sflush_r+0x1a>
 8006162:	9b01      	ldr	r3, [sp, #4]
 8006164:	183f      	adds	r7, r7, r0
 8006166:	1a1b      	subs	r3, r3, r0
 8006168:	9301      	str	r3, [sp, #4]
 800616a:	e7e7      	b.n	800613c <__sflush_r+0xe4>
 800616c:	20400001 	.word	0x20400001

08006170 <_fflush_r>:
 8006170:	690b      	ldr	r3, [r1, #16]
 8006172:	b570      	push	{r4, r5, r6, lr}
 8006174:	0005      	movs	r5, r0
 8006176:	000c      	movs	r4, r1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d102      	bne.n	8006182 <_fflush_r+0x12>
 800617c:	2500      	movs	r5, #0
 800617e:	0028      	movs	r0, r5
 8006180:	bd70      	pop	{r4, r5, r6, pc}
 8006182:	2800      	cmp	r0, #0
 8006184:	d004      	beq.n	8006190 <_fflush_r+0x20>
 8006186:	6983      	ldr	r3, [r0, #24]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <_fflush_r+0x20>
 800618c:	f7ff f9f2 	bl	8005574 <__sinit>
 8006190:	4b14      	ldr	r3, [pc, #80]	; (80061e4 <_fflush_r+0x74>)
 8006192:	429c      	cmp	r4, r3
 8006194:	d11b      	bne.n	80061ce <_fflush_r+0x5e>
 8006196:	686c      	ldr	r4, [r5, #4]
 8006198:	220c      	movs	r2, #12
 800619a:	5ea3      	ldrsh	r3, [r4, r2]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0ed      	beq.n	800617c <_fflush_r+0xc>
 80061a0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061a2:	07d2      	lsls	r2, r2, #31
 80061a4:	d404      	bmi.n	80061b0 <_fflush_r+0x40>
 80061a6:	059b      	lsls	r3, r3, #22
 80061a8:	d402      	bmi.n	80061b0 <_fflush_r+0x40>
 80061aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ac:	f7ff fa83 	bl	80056b6 <__retarget_lock_acquire_recursive>
 80061b0:	0028      	movs	r0, r5
 80061b2:	0021      	movs	r1, r4
 80061b4:	f7ff ff50 	bl	8006058 <__sflush_r>
 80061b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061ba:	0005      	movs	r5, r0
 80061bc:	07db      	lsls	r3, r3, #31
 80061be:	d4de      	bmi.n	800617e <_fflush_r+0xe>
 80061c0:	89a3      	ldrh	r3, [r4, #12]
 80061c2:	059b      	lsls	r3, r3, #22
 80061c4:	d4db      	bmi.n	800617e <_fflush_r+0xe>
 80061c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061c8:	f7ff fa76 	bl	80056b8 <__retarget_lock_release_recursive>
 80061cc:	e7d7      	b.n	800617e <_fflush_r+0xe>
 80061ce:	4b06      	ldr	r3, [pc, #24]	; (80061e8 <_fflush_r+0x78>)
 80061d0:	429c      	cmp	r4, r3
 80061d2:	d101      	bne.n	80061d8 <_fflush_r+0x68>
 80061d4:	68ac      	ldr	r4, [r5, #8]
 80061d6:	e7df      	b.n	8006198 <_fflush_r+0x28>
 80061d8:	4b04      	ldr	r3, [pc, #16]	; (80061ec <_fflush_r+0x7c>)
 80061da:	429c      	cmp	r4, r3
 80061dc:	d1dc      	bne.n	8006198 <_fflush_r+0x28>
 80061de:	68ec      	ldr	r4, [r5, #12]
 80061e0:	e7da      	b.n	8006198 <_fflush_r+0x28>
 80061e2:	46c0      	nop			; (mov r8, r8)
 80061e4:	080068f4 	.word	0x080068f4
 80061e8:	08006914 	.word	0x08006914
 80061ec:	080068d4 	.word	0x080068d4

080061f0 <_lseek_r>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	0004      	movs	r4, r0
 80061f4:	0008      	movs	r0, r1
 80061f6:	0011      	movs	r1, r2
 80061f8:	001a      	movs	r2, r3
 80061fa:	2300      	movs	r3, #0
 80061fc:	4d05      	ldr	r5, [pc, #20]	; (8006214 <_lseek_r+0x24>)
 80061fe:	602b      	str	r3, [r5, #0]
 8006200:	f7fb fc71 	bl	8001ae6 <_lseek>
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	d103      	bne.n	8006210 <_lseek_r+0x20>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d000      	beq.n	8006210 <_lseek_r+0x20>
 800620e:	6023      	str	r3, [r4, #0]
 8006210:	bd70      	pop	{r4, r5, r6, pc}
 8006212:	46c0      	nop			; (mov r8, r8)
 8006214:	20000294 	.word	0x20000294

08006218 <__swhatbuf_r>:
 8006218:	b570      	push	{r4, r5, r6, lr}
 800621a:	000e      	movs	r6, r1
 800621c:	001d      	movs	r5, r3
 800621e:	230e      	movs	r3, #14
 8006220:	5ec9      	ldrsh	r1, [r1, r3]
 8006222:	0014      	movs	r4, r2
 8006224:	b096      	sub	sp, #88	; 0x58
 8006226:	2900      	cmp	r1, #0
 8006228:	da08      	bge.n	800623c <__swhatbuf_r+0x24>
 800622a:	220c      	movs	r2, #12
 800622c:	5eb3      	ldrsh	r3, [r6, r2]
 800622e:	2200      	movs	r2, #0
 8006230:	602a      	str	r2, [r5, #0]
 8006232:	061b      	lsls	r3, r3, #24
 8006234:	d411      	bmi.n	800625a <__swhatbuf_r+0x42>
 8006236:	2380      	movs	r3, #128	; 0x80
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	e00f      	b.n	800625c <__swhatbuf_r+0x44>
 800623c:	466a      	mov	r2, sp
 800623e:	f000 f8d1 	bl	80063e4 <_fstat_r>
 8006242:	2800      	cmp	r0, #0
 8006244:	dbf1      	blt.n	800622a <__swhatbuf_r+0x12>
 8006246:	23f0      	movs	r3, #240	; 0xf0
 8006248:	9901      	ldr	r1, [sp, #4]
 800624a:	021b      	lsls	r3, r3, #8
 800624c:	4019      	ands	r1, r3
 800624e:	4b05      	ldr	r3, [pc, #20]	; (8006264 <__swhatbuf_r+0x4c>)
 8006250:	18c9      	adds	r1, r1, r3
 8006252:	424b      	negs	r3, r1
 8006254:	4159      	adcs	r1, r3
 8006256:	6029      	str	r1, [r5, #0]
 8006258:	e7ed      	b.n	8006236 <__swhatbuf_r+0x1e>
 800625a:	2340      	movs	r3, #64	; 0x40
 800625c:	2000      	movs	r0, #0
 800625e:	6023      	str	r3, [r4, #0]
 8006260:	b016      	add	sp, #88	; 0x58
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	ffffe000 	.word	0xffffe000

08006268 <__smakebuf_r>:
 8006268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800626a:	2602      	movs	r6, #2
 800626c:	898b      	ldrh	r3, [r1, #12]
 800626e:	0005      	movs	r5, r0
 8006270:	000c      	movs	r4, r1
 8006272:	4233      	tst	r3, r6
 8006274:	d006      	beq.n	8006284 <__smakebuf_r+0x1c>
 8006276:	0023      	movs	r3, r4
 8006278:	3347      	adds	r3, #71	; 0x47
 800627a:	6023      	str	r3, [r4, #0]
 800627c:	6123      	str	r3, [r4, #16]
 800627e:	2301      	movs	r3, #1
 8006280:	6163      	str	r3, [r4, #20]
 8006282:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006284:	466a      	mov	r2, sp
 8006286:	ab01      	add	r3, sp, #4
 8006288:	f7ff ffc6 	bl	8006218 <__swhatbuf_r>
 800628c:	9900      	ldr	r1, [sp, #0]
 800628e:	0007      	movs	r7, r0
 8006290:	0028      	movs	r0, r5
 8006292:	f7ff fa35 	bl	8005700 <_malloc_r>
 8006296:	2800      	cmp	r0, #0
 8006298:	d108      	bne.n	80062ac <__smakebuf_r+0x44>
 800629a:	220c      	movs	r2, #12
 800629c:	5ea3      	ldrsh	r3, [r4, r2]
 800629e:	059a      	lsls	r2, r3, #22
 80062a0:	d4ef      	bmi.n	8006282 <__smakebuf_r+0x1a>
 80062a2:	2203      	movs	r2, #3
 80062a4:	4393      	bics	r3, r2
 80062a6:	431e      	orrs	r6, r3
 80062a8:	81a6      	strh	r6, [r4, #12]
 80062aa:	e7e4      	b.n	8006276 <__smakebuf_r+0xe>
 80062ac:	4b0f      	ldr	r3, [pc, #60]	; (80062ec <__smakebuf_r+0x84>)
 80062ae:	62ab      	str	r3, [r5, #40]	; 0x28
 80062b0:	2380      	movs	r3, #128	; 0x80
 80062b2:	89a2      	ldrh	r2, [r4, #12]
 80062b4:	6020      	str	r0, [r4, #0]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	81a3      	strh	r3, [r4, #12]
 80062ba:	9b00      	ldr	r3, [sp, #0]
 80062bc:	6120      	str	r0, [r4, #16]
 80062be:	6163      	str	r3, [r4, #20]
 80062c0:	9b01      	ldr	r3, [sp, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00d      	beq.n	80062e2 <__smakebuf_r+0x7a>
 80062c6:	0028      	movs	r0, r5
 80062c8:	230e      	movs	r3, #14
 80062ca:	5ee1      	ldrsh	r1, [r4, r3]
 80062cc:	f000 f89c 	bl	8006408 <_isatty_r>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d006      	beq.n	80062e2 <__smakebuf_r+0x7a>
 80062d4:	2203      	movs	r2, #3
 80062d6:	89a3      	ldrh	r3, [r4, #12]
 80062d8:	4393      	bics	r3, r2
 80062da:	001a      	movs	r2, r3
 80062dc:	2301      	movs	r3, #1
 80062de:	4313      	orrs	r3, r2
 80062e0:	81a3      	strh	r3, [r4, #12]
 80062e2:	89a0      	ldrh	r0, [r4, #12]
 80062e4:	4307      	orrs	r7, r0
 80062e6:	81a7      	strh	r7, [r4, #12]
 80062e8:	e7cb      	b.n	8006282 <__smakebuf_r+0x1a>
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	080054f9 	.word	0x080054f9

080062f0 <memchr>:
 80062f0:	b2c9      	uxtb	r1, r1
 80062f2:	1882      	adds	r2, r0, r2
 80062f4:	4290      	cmp	r0, r2
 80062f6:	d101      	bne.n	80062fc <memchr+0xc>
 80062f8:	2000      	movs	r0, #0
 80062fa:	4770      	bx	lr
 80062fc:	7803      	ldrb	r3, [r0, #0]
 80062fe:	428b      	cmp	r3, r1
 8006300:	d0fb      	beq.n	80062fa <memchr+0xa>
 8006302:	3001      	adds	r0, #1
 8006304:	e7f6      	b.n	80062f4 <memchr+0x4>
	...

08006308 <__malloc_lock>:
 8006308:	b510      	push	{r4, lr}
 800630a:	4802      	ldr	r0, [pc, #8]	; (8006314 <__malloc_lock+0xc>)
 800630c:	f7ff f9d3 	bl	80056b6 <__retarget_lock_acquire_recursive>
 8006310:	bd10      	pop	{r4, pc}
 8006312:	46c0      	nop			; (mov r8, r8)
 8006314:	20000288 	.word	0x20000288

08006318 <__malloc_unlock>:
 8006318:	b510      	push	{r4, lr}
 800631a:	4802      	ldr	r0, [pc, #8]	; (8006324 <__malloc_unlock+0xc>)
 800631c:	f7ff f9cc 	bl	80056b8 <__retarget_lock_release_recursive>
 8006320:	bd10      	pop	{r4, pc}
 8006322:	46c0      	nop			; (mov r8, r8)
 8006324:	20000288 	.word	0x20000288

08006328 <_free_r>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	0005      	movs	r5, r0
 800632c:	2900      	cmp	r1, #0
 800632e:	d010      	beq.n	8006352 <_free_r+0x2a>
 8006330:	1f0c      	subs	r4, r1, #4
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	da00      	bge.n	800633a <_free_r+0x12>
 8006338:	18e4      	adds	r4, r4, r3
 800633a:	0028      	movs	r0, r5
 800633c:	f7ff ffe4 	bl	8006308 <__malloc_lock>
 8006340:	4a1d      	ldr	r2, [pc, #116]	; (80063b8 <_free_r+0x90>)
 8006342:	6813      	ldr	r3, [r2, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d105      	bne.n	8006354 <_free_r+0x2c>
 8006348:	6063      	str	r3, [r4, #4]
 800634a:	6014      	str	r4, [r2, #0]
 800634c:	0028      	movs	r0, r5
 800634e:	f7ff ffe3 	bl	8006318 <__malloc_unlock>
 8006352:	bd70      	pop	{r4, r5, r6, pc}
 8006354:	42a3      	cmp	r3, r4
 8006356:	d908      	bls.n	800636a <_free_r+0x42>
 8006358:	6821      	ldr	r1, [r4, #0]
 800635a:	1860      	adds	r0, r4, r1
 800635c:	4283      	cmp	r3, r0
 800635e:	d1f3      	bne.n	8006348 <_free_r+0x20>
 8006360:	6818      	ldr	r0, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	1841      	adds	r1, r0, r1
 8006366:	6021      	str	r1, [r4, #0]
 8006368:	e7ee      	b.n	8006348 <_free_r+0x20>
 800636a:	001a      	movs	r2, r3
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <_free_r+0x4e>
 8006372:	42a3      	cmp	r3, r4
 8006374:	d9f9      	bls.n	800636a <_free_r+0x42>
 8006376:	6811      	ldr	r1, [r2, #0]
 8006378:	1850      	adds	r0, r2, r1
 800637a:	42a0      	cmp	r0, r4
 800637c:	d10b      	bne.n	8006396 <_free_r+0x6e>
 800637e:	6820      	ldr	r0, [r4, #0]
 8006380:	1809      	adds	r1, r1, r0
 8006382:	1850      	adds	r0, r2, r1
 8006384:	6011      	str	r1, [r2, #0]
 8006386:	4283      	cmp	r3, r0
 8006388:	d1e0      	bne.n	800634c <_free_r+0x24>
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	1841      	adds	r1, r0, r1
 8006390:	6011      	str	r1, [r2, #0]
 8006392:	6053      	str	r3, [r2, #4]
 8006394:	e7da      	b.n	800634c <_free_r+0x24>
 8006396:	42a0      	cmp	r0, r4
 8006398:	d902      	bls.n	80063a0 <_free_r+0x78>
 800639a:	230c      	movs	r3, #12
 800639c:	602b      	str	r3, [r5, #0]
 800639e:	e7d5      	b.n	800634c <_free_r+0x24>
 80063a0:	6821      	ldr	r1, [r4, #0]
 80063a2:	1860      	adds	r0, r4, r1
 80063a4:	4283      	cmp	r3, r0
 80063a6:	d103      	bne.n	80063b0 <_free_r+0x88>
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	1841      	adds	r1, r0, r1
 80063ae:	6021      	str	r1, [r4, #0]
 80063b0:	6063      	str	r3, [r4, #4]
 80063b2:	6054      	str	r4, [r2, #4]
 80063b4:	e7ca      	b.n	800634c <_free_r+0x24>
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	2000028c 	.word	0x2000028c

080063bc <_read_r>:
 80063bc:	b570      	push	{r4, r5, r6, lr}
 80063be:	0004      	movs	r4, r0
 80063c0:	0008      	movs	r0, r1
 80063c2:	0011      	movs	r1, r2
 80063c4:	001a      	movs	r2, r3
 80063c6:	2300      	movs	r3, #0
 80063c8:	4d05      	ldr	r5, [pc, #20]	; (80063e0 <_read_r+0x24>)
 80063ca:	602b      	str	r3, [r5, #0]
 80063cc:	f7fb fb31 	bl	8001a32 <_read>
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	d103      	bne.n	80063dc <_read_r+0x20>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d000      	beq.n	80063dc <_read_r+0x20>
 80063da:	6023      	str	r3, [r4, #0]
 80063dc:	bd70      	pop	{r4, r5, r6, pc}
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	20000294 	.word	0x20000294

080063e4 <_fstat_r>:
 80063e4:	2300      	movs	r3, #0
 80063e6:	b570      	push	{r4, r5, r6, lr}
 80063e8:	4d06      	ldr	r5, [pc, #24]	; (8006404 <_fstat_r+0x20>)
 80063ea:	0004      	movs	r4, r0
 80063ec:	0008      	movs	r0, r1
 80063ee:	0011      	movs	r1, r2
 80063f0:	602b      	str	r3, [r5, #0]
 80063f2:	f7fb fb61 	bl	8001ab8 <_fstat>
 80063f6:	1c43      	adds	r3, r0, #1
 80063f8:	d103      	bne.n	8006402 <_fstat_r+0x1e>
 80063fa:	682b      	ldr	r3, [r5, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d000      	beq.n	8006402 <_fstat_r+0x1e>
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	bd70      	pop	{r4, r5, r6, pc}
 8006404:	20000294 	.word	0x20000294

08006408 <_isatty_r>:
 8006408:	2300      	movs	r3, #0
 800640a:	b570      	push	{r4, r5, r6, lr}
 800640c:	4d06      	ldr	r5, [pc, #24]	; (8006428 <_isatty_r+0x20>)
 800640e:	0004      	movs	r4, r0
 8006410:	0008      	movs	r0, r1
 8006412:	602b      	str	r3, [r5, #0]
 8006414:	f7fb fb5e 	bl	8001ad4 <_isatty>
 8006418:	1c43      	adds	r3, r0, #1
 800641a:	d103      	bne.n	8006424 <_isatty_r+0x1c>
 800641c:	682b      	ldr	r3, [r5, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d000      	beq.n	8006424 <_isatty_r+0x1c>
 8006422:	6023      	str	r3, [r4, #0]
 8006424:	bd70      	pop	{r4, r5, r6, pc}
 8006426:	46c0      	nop			; (mov r8, r8)
 8006428:	20000294 	.word	0x20000294

0800642c <_init>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	46c0      	nop			; (mov r8, r8)
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr

08006438 <_fini>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643e:	bc08      	pop	{r3}
 8006440:	469e      	mov	lr, r3
 8006442:	4770      	bx	lr
