
sinking-clock_master_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003478  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003534  08003534  00013534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035ac  080035ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080035ac  080035ac  000135ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035b4  080035b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b4  080035b4  000135b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  080035c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080035c8  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e26c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e88  00000000  00000000  0002e2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  00030128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  00030c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001559f  00000000  00000000  000316a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e77b  00000000  00000000  00046c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000879fd  00000000  00000000  000553ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dcdb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002750  00000000  00000000  000dce08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800351c 	.word	0x0800351c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800351c 	.word	0x0800351c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	; (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	; (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	469b      	mov	fp, r3
 8000292:	d433      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000294:	465a      	mov	r2, fp
 8000296:	4653      	mov	r3, sl
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83a      	bhi.n	800031e <__udivmoddi4+0xc2>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e078      	b.n	80003a0 <__udivmoddi4+0x144>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e075      	b.n	80003a6 <__udivmoddi4+0x14a>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e028      	b.n	8000326 <__udivmoddi4+0xca>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	2320      	movs	r3, #32
 8000300:	1a9b      	subs	r3, r3, r2
 8000302:	4652      	mov	r2, sl
 8000304:	40da      	lsrs	r2, r3
 8000306:	4641      	mov	r1, r8
 8000308:	0013      	movs	r3, r2
 800030a:	464a      	mov	r2, r9
 800030c:	408a      	lsls	r2, r1
 800030e:	0017      	movs	r7, r2
 8000310:	4642      	mov	r2, r8
 8000312:	431f      	orrs	r7, r3
 8000314:	4653      	mov	r3, sl
 8000316:	4093      	lsls	r3, r2
 8000318:	001e      	movs	r6, r3
 800031a:	42af      	cmp	r7, r5
 800031c:	d9c4      	bls.n	80002a8 <__udivmoddi4+0x4c>
 800031e:	2200      	movs	r2, #0
 8000320:	2300      	movs	r3, #0
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	4643      	mov	r3, r8
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0d9      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032c:	07fb      	lsls	r3, r7, #31
 800032e:	0872      	lsrs	r2, r6, #1
 8000330:	431a      	orrs	r2, r3
 8000332:	4646      	mov	r6, r8
 8000334:	087b      	lsrs	r3, r7, #1
 8000336:	e00e      	b.n	8000356 <__udivmoddi4+0xfa>
 8000338:	42ab      	cmp	r3, r5
 800033a:	d101      	bne.n	8000340 <__udivmoddi4+0xe4>
 800033c:	42a2      	cmp	r2, r4
 800033e:	d80c      	bhi.n	800035a <__udivmoddi4+0xfe>
 8000340:	1aa4      	subs	r4, r4, r2
 8000342:	419d      	sbcs	r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	1924      	adds	r4, r4, r4
 8000348:	416d      	adcs	r5, r5
 800034a:	2100      	movs	r1, #0
 800034c:	3e01      	subs	r6, #1
 800034e:	1824      	adds	r4, r4, r0
 8000350:	414d      	adcs	r5, r1
 8000352:	2e00      	cmp	r6, #0
 8000354:	d006      	beq.n	8000364 <__udivmoddi4+0x108>
 8000356:	42ab      	cmp	r3, r5
 8000358:	d9ee      	bls.n	8000338 <__udivmoddi4+0xdc>
 800035a:	3e01      	subs	r6, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2e00      	cmp	r6, #0
 8000362:	d1f8      	bne.n	8000356 <__udivmoddi4+0xfa>
 8000364:	9800      	ldr	r0, [sp, #0]
 8000366:	9901      	ldr	r1, [sp, #4]
 8000368:	465b      	mov	r3, fp
 800036a:	1900      	adds	r0, r0, r4
 800036c:	4169      	adcs	r1, r5
 800036e:	2b00      	cmp	r3, #0
 8000370:	db24      	blt.n	80003bc <__udivmoddi4+0x160>
 8000372:	002b      	movs	r3, r5
 8000374:	465a      	mov	r2, fp
 8000376:	4644      	mov	r4, r8
 8000378:	40d3      	lsrs	r3, r2
 800037a:	002a      	movs	r2, r5
 800037c:	40e2      	lsrs	r2, r4
 800037e:	001c      	movs	r4, r3
 8000380:	465b      	mov	r3, fp
 8000382:	0015      	movs	r5, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	db2a      	blt.n	80003de <__udivmoddi4+0x182>
 8000388:	0026      	movs	r6, r4
 800038a:	409e      	lsls	r6, r3
 800038c:	0033      	movs	r3, r6
 800038e:	0026      	movs	r6, r4
 8000390:	4647      	mov	r7, r8
 8000392:	40be      	lsls	r6, r7
 8000394:	0032      	movs	r2, r6
 8000396:	1a80      	subs	r0, r0, r2
 8000398:	4199      	sbcs	r1, r3
 800039a:	9000      	str	r0, [sp, #0]
 800039c:	9101      	str	r1, [sp, #4]
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a0:	42a3      	cmp	r3, r4
 80003a2:	d8bc      	bhi.n	800031e <__udivmoddi4+0xc2>
 80003a4:	e783      	b.n	80002ae <__udivmoddi4+0x52>
 80003a6:	4642      	mov	r2, r8
 80003a8:	2320      	movs	r3, #32
 80003aa:	2100      	movs	r1, #0
 80003ac:	1a9b      	subs	r3, r3, r2
 80003ae:	2200      	movs	r2, #0
 80003b0:	9100      	str	r1, [sp, #0]
 80003b2:	9201      	str	r2, [sp, #4]
 80003b4:	2201      	movs	r2, #1
 80003b6:	40da      	lsrs	r2, r3
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	e786      	b.n	80002ca <__udivmoddi4+0x6e>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	002a      	movs	r2, r5
 80003c4:	4646      	mov	r6, r8
 80003c6:	409a      	lsls	r2, r3
 80003c8:	0023      	movs	r3, r4
 80003ca:	40f3      	lsrs	r3, r6
 80003cc:	4644      	mov	r4, r8
 80003ce:	4313      	orrs	r3, r2
 80003d0:	002a      	movs	r2, r5
 80003d2:	40e2      	lsrs	r2, r4
 80003d4:	001c      	movs	r4, r3
 80003d6:	465b      	mov	r3, fp
 80003d8:	0015      	movs	r5, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	dad4      	bge.n	8000388 <__udivmoddi4+0x12c>
 80003de:	4642      	mov	r2, r8
 80003e0:	002f      	movs	r7, r5
 80003e2:	2320      	movs	r3, #32
 80003e4:	0026      	movs	r6, r4
 80003e6:	4097      	lsls	r7, r2
 80003e8:	1a9b      	subs	r3, r3, r2
 80003ea:	40de      	lsrs	r6, r3
 80003ec:	003b      	movs	r3, r7
 80003ee:	4333      	orrs	r3, r6
 80003f0:	e7cd      	b.n	800038e <__udivmoddi4+0x132>
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	; (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f000 fa8e 	bl	800096c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f807 	bl	8000462 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f000 f8c2 	bl	80005dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000458:	f000 f88c 	bl	8000574 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800045c:	f000 f84a 	bl	80004f4 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000460:	e7fe      	b.n	8000460 <main+0x18>

08000462 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000462:	b590      	push	{r4, r7, lr}
 8000464:	b093      	sub	sp, #76	; 0x4c
 8000466:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000468:	2410      	movs	r4, #16
 800046a:	193b      	adds	r3, r7, r4
 800046c:	0018      	movs	r0, r3
 800046e:	2338      	movs	r3, #56	; 0x38
 8000470:	001a      	movs	r2, r3
 8000472:	2100      	movs	r1, #0
 8000474:	f003 f84a 	bl	800350c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000478:	003b      	movs	r3, r7
 800047a:	0018      	movs	r0, r3
 800047c:	2310      	movs	r3, #16
 800047e:	001a      	movs	r2, r3
 8000480:	2100      	movs	r1, #0
 8000482:	f003 f843 	bl	800350c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000486:	2380      	movs	r3, #128	; 0x80
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	0018      	movs	r0, r3
 800048c:	f001 fcf8 	bl	8001e80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	2202      	movs	r2, #2
 8000494:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	2280      	movs	r2, #128	; 0x80
 800049a:	0052      	lsls	r2, r2, #1
 800049c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2240      	movs	r2, #64	; 0x40
 80004a8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	2200      	movs	r2, #0
 80004ae:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	0018      	movs	r0, r3
 80004b4:	f001 fd30 	bl	8001f18 <HAL_RCC_OscConfig>
 80004b8:	1e03      	subs	r3, r0, #0
 80004ba:	d001      	beq.n	80004c0 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004bc:	f000 f918 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c0:	003b      	movs	r3, r7
 80004c2:	2207      	movs	r2, #7
 80004c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004c6:	003b      	movs	r3, r7
 80004c8:	2200      	movs	r2, #0
 80004ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004cc:	003b      	movs	r3, r7
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d2:	003b      	movs	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004d8:	003b      	movs	r3, r7
 80004da:	2100      	movs	r1, #0
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 f835 	bl	800254c <HAL_RCC_ClockConfig>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004e6:	f000 f903 	bl	80006f0 <Error_Handler>
  }
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b013      	add	sp, #76	; 0x4c
 80004f0:	bd90      	pop	{r4, r7, pc}
	...

080004f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MX_I2C1_Init+0x74>)
 80004fa:	4a1c      	ldr	r2, [pc, #112]	; (800056c <MX_I2C1_Init+0x78>)
 80004fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 80004fe:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <MX_I2C1_Init+0x74>)
 8000500:	4a1b      	ldr	r2, [pc, #108]	; (8000570 <MX_I2C1_Init+0x7c>)
 8000502:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_I2C1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800050a:	4b17      	ldr	r3, [pc, #92]	; (8000568 <MX_I2C1_Init+0x74>)
 800050c:	2201      	movs	r2, #1
 800050e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MX_I2C1_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000516:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_I2C1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <MX_I2C1_Init+0x74>)
 800051e:	2200      	movs	r2, #0
 8000520:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_I2C1_Init+0x74>)
 8000524:	2200      	movs	r2, #0
 8000526:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_I2C1_Init+0x74>)
 800052a:	2200      	movs	r2, #0
 800052c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_I2C1_Init+0x74>)
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fd77 	bl	8001024 <HAL_I2C_Init>
 8000536:	1e03      	subs	r3, r0, #0
 8000538:	d001      	beq.n	800053e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800053a:	f000 f8d9 	bl	80006f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <MX_I2C1_Init+0x74>)
 8000540:	2100      	movs	r1, #0
 8000542:	0018      	movs	r0, r3
 8000544:	f001 fc04 	bl	8001d50 <HAL_I2CEx_ConfigAnalogFilter>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800054c:	f000 f8d0 	bl	80006f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <MX_I2C1_Init+0x74>)
 8000552:	2100      	movs	r1, #0
 8000554:	0018      	movs	r0, r3
 8000556:	f001 fc47 	bl	8001de8 <HAL_I2CEx_ConfigDigitalFilter>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800055e:	f000 f8c7 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000028 	.word	0x20000028
 800056c:	40005400 	.word	0x40005400
 8000570:	0010061a 	.word	0x0010061a

08000574 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <MX_USART2_UART_Init+0x60>)
 800057a:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <MX_USART2_UART_Init+0x64>)
 800057c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <MX_USART2_UART_Init+0x60>)
 8000580:	22e1      	movs	r2, #225	; 0xe1
 8000582:	0252      	lsls	r2, r2, #9
 8000584:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <MX_USART2_UART_Init+0x60>)
 8000588:	2280      	movs	r2, #128	; 0x80
 800058a:	0552      	lsls	r2, r2, #21
 800058c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_USART2_UART_Init+0x60>)
 8000590:	2200      	movs	r2, #0
 8000592:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_USART2_UART_Init+0x60>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_USART2_UART_Init+0x60>)
 800059c:	220c      	movs	r2, #12
 800059e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_USART2_UART_Init+0x60>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_USART2_UART_Init+0x60>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_USART2_UART_Init+0x60>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <MX_USART2_UART_Init+0x60>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MX_USART2_UART_Init+0x60>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <MX_USART2_UART_Init+0x60>)
 80005c0:	0018      	movs	r0, r3
 80005c2:	f002 fae7 	bl	8002b94 <HAL_UART_Init>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80005ca:	f000 f891 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000007c 	.word	0x2000007c
 80005d8:	40004400 	.word	0x40004400

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b08b      	sub	sp, #44	; 0x2c
 80005e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	2414      	movs	r4, #20
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	0018      	movs	r0, r3
 80005e8:	2314      	movs	r3, #20
 80005ea:	001a      	movs	r2, r3
 80005ec:	2100      	movs	r1, #0
 80005ee:	f002 ff8d 	bl	800350c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	4b3b      	ldr	r3, [pc, #236]	; (80006e0 <MX_GPIO_Init+0x104>)
 80005f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f6:	4b3a      	ldr	r3, [pc, #232]	; (80006e0 <MX_GPIO_Init+0x104>)
 80005f8:	2102      	movs	r1, #2
 80005fa:	430a      	orrs	r2, r1
 80005fc:	635a      	str	r2, [r3, #52]	; 0x34
 80005fe:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <MX_GPIO_Init+0x104>)
 8000600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000602:	2202      	movs	r2, #2
 8000604:	4013      	ands	r3, r2
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4b35      	ldr	r3, [pc, #212]	; (80006e0 <MX_GPIO_Init+0x104>)
 800060c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800060e:	4b34      	ldr	r3, [pc, #208]	; (80006e0 <MX_GPIO_Init+0x104>)
 8000610:	2104      	movs	r1, #4
 8000612:	430a      	orrs	r2, r1
 8000614:	635a      	str	r2, [r3, #52]	; 0x34
 8000616:	4b32      	ldr	r3, [pc, #200]	; (80006e0 <MX_GPIO_Init+0x104>)
 8000618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061a:	2204      	movs	r2, #4
 800061c:	4013      	ands	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000622:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <MX_GPIO_Init+0x104>)
 8000624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000626:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <MX_GPIO_Init+0x104>)
 8000628:	2120      	movs	r1, #32
 800062a:	430a      	orrs	r2, r1
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
 800062e:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <MX_GPIO_Init+0x104>)
 8000630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000632:	2220      	movs	r2, #32
 8000634:	4013      	ands	r3, r2
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <MX_GPIO_Init+0x104>)
 800063c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <MX_GPIO_Init+0x104>)
 8000640:	2101      	movs	r1, #1
 8000642:	430a      	orrs	r2, r1
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
 8000646:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <MX_GPIO_Init+0x104>)
 8000648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800064a:	2201      	movs	r2, #1
 800064c:	4013      	ands	r3, r2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Display_Button_Pin|Alarm_Enable_Button_Pin|Alarm_Set_Button_Pin|Hour_Set_Button_Pin
 8000652:	4924      	ldr	r1, [pc, #144]	; (80006e4 <MX_GPIO_Init+0x108>)
 8000654:	23a0      	movs	r3, #160	; 0xa0
 8000656:	05db      	lsls	r3, r3, #23
 8000658:	2200      	movs	r2, #0
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fcc4 	bl	8000fe8 <HAL_GPIO_WritePin>
                          |Snooze_Button_Pin|Minute_Set_Button_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <MX_GPIO_Init+0x10c>)
 8000662:	2200      	movs	r2, #0
 8000664:	2140      	movs	r1, #64	; 0x40
 8000666:	0018      	movs	r0, r3
 8000668:	f000 fcbe 	bl	8000fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2204      	movs	r2, #4
 8000670:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000672:	193b      	adds	r3, r7, r4
 8000674:	2288      	movs	r2, #136	; 0x88
 8000676:	0352      	lsls	r2, r2, #13
 8000678:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	193b      	adds	r3, r7, r4
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000680:	193b      	adds	r3, r7, r4
 8000682:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <MX_GPIO_Init+0x110>)
 8000684:	0019      	movs	r1, r3
 8000686:	0010      	movs	r0, r2
 8000688:	f000 fb4a 	bl	8000d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_Button_Pin Alarm_Enable_Button_Pin Alarm_Set_Button_Pin Hour_Set_Button_Pin
                           Snooze_Button_Pin Minute_Set_Button_Pin */
  GPIO_InitStruct.Pin = Display_Button_Pin|Alarm_Enable_Button_Pin|Alarm_Set_Button_Pin|Hour_Set_Button_Pin
 800068c:	193b      	adds	r3, r7, r4
 800068e:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <MX_GPIO_Init+0x108>)
 8000690:	601a      	str	r2, [r3, #0]
                          |Snooze_Button_Pin|Minute_Set_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2201      	movs	r2, #1
 8000696:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	193a      	adds	r2, r7, r4
 80006a6:	23a0      	movs	r3, #160	; 0xa0
 80006a8:	05db      	lsls	r3, r3, #23
 80006aa:	0011      	movs	r1, r2
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 fb37 	bl	8000d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80006b2:	0021      	movs	r1, r4
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2240      	movs	r2, #64	; 0x40
 80006b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2201      	movs	r2, #1
 80006be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <MX_GPIO_Init+0x10c>)
 80006d0:	0019      	movs	r1, r3
 80006d2:	0010      	movs	r0, r2
 80006d4:	f000 fb24 	bl	8000d20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b00b      	add	sp, #44	; 0x2c
 80006de:	bd90      	pop	{r4, r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	00001833 	.word	0x00001833
 80006e8:	50000800 	.word	0x50000800
 80006ec:	50001400 	.word	0x50001400

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <Error_Handler+0x8>
	...

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <HAL_MspInit+0x44>)
 8000704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <HAL_MspInit+0x44>)
 8000708:	2101      	movs	r1, #1
 800070a:	430a      	orrs	r2, r1
 800070c:	641a      	str	r2, [r3, #64]	; 0x40
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_MspInit+0x44>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	2201      	movs	r2, #1
 8000714:	4013      	ands	r3, r2
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_MspInit+0x44>)
 800071c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <HAL_MspInit+0x44>)
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	0549      	lsls	r1, r1, #21
 8000724:	430a      	orrs	r2, r1
 8000726:	63da      	str	r2, [r3, #60]	; 0x3c
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <HAL_MspInit+0x44>)
 800072a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	055b      	lsls	r3, r3, #21
 8000730:	4013      	ands	r3, r2
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b002      	add	sp, #8
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	40021000 	.word	0x40021000

08000744 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b095      	sub	sp, #84	; 0x54
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	233c      	movs	r3, #60	; 0x3c
 800074e:	18fb      	adds	r3, r7, r3
 8000750:	0018      	movs	r0, r3
 8000752:	2314      	movs	r3, #20
 8000754:	001a      	movs	r2, r3
 8000756:	2100      	movs	r1, #0
 8000758:	f002 fed8 	bl	800350c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800075c:	2414      	movs	r4, #20
 800075e:	193b      	adds	r3, r7, r4
 8000760:	0018      	movs	r0, r3
 8000762:	2328      	movs	r3, #40	; 0x28
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f002 fed0 	bl	800350c <memset>
  if(hi2c->Instance==I2C1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a26      	ldr	r2, [pc, #152]	; (800080c <HAL_I2C_MspInit+0xc8>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d146      	bne.n	8000804 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000776:	193b      	adds	r3, r7, r4
 8000778:	2220      	movs	r2, #32
 800077a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800077c:	193b      	adds	r3, r7, r4
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000782:	193b      	adds	r3, r7, r4
 8000784:	0018      	movs	r0, r3
 8000786:	f002 f88b 	bl	80028a0 <HAL_RCCEx_PeriphCLKConfig>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800078e:	f7ff ffaf 	bl	80006f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <HAL_I2C_MspInit+0xcc>)
 8000794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000796:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <HAL_I2C_MspInit+0xcc>)
 8000798:	2102      	movs	r1, #2
 800079a:	430a      	orrs	r2, r1
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <HAL_I2C_MspInit+0xcc>)
 80007a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007a2:	2202      	movs	r2, #2
 80007a4:	4013      	ands	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80007aa:	213c      	movs	r1, #60	; 0x3c
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	22c0      	movs	r2, #192	; 0xc0
 80007b0:	0092      	lsls	r2, r2, #2
 80007b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2212      	movs	r2, #18
 80007b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2206      	movs	r2, #6
 80007ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	4a11      	ldr	r2, [pc, #68]	; (8000814 <HAL_I2C_MspInit+0xd0>)
 80007d0:	0019      	movs	r1, r3
 80007d2:	0010      	movs	r0, r2
 80007d4:	f000 faa4 	bl	8000d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007d8:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <HAL_I2C_MspInit+0xcc>)
 80007da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <HAL_I2C_MspInit+0xcc>)
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	0389      	lsls	r1, r1, #14
 80007e2:	430a      	orrs	r2, r1
 80007e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <HAL_I2C_MspInit+0xcc>)
 80007e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007ea:	2380      	movs	r3, #128	; 0x80
 80007ec:	039b      	lsls	r3, r3, #14
 80007ee:	4013      	ands	r3, r2
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2017      	movs	r0, #23
 80007fa:	f000 f9e9 	bl	8000bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80007fe:	2017      	movs	r0, #23
 8000800:	f000 f9fb 	bl	8000bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b015      	add	sp, #84	; 0x54
 800080a:	bd90      	pop	{r4, r7, pc}
 800080c:	40005400 	.word	0x40005400
 8000810:	40021000 	.word	0x40021000
 8000814:	50000400 	.word	0x50000400

08000818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b08b      	sub	sp, #44	; 0x2c
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	2414      	movs	r4, #20
 8000822:	193b      	adds	r3, r7, r4
 8000824:	0018      	movs	r0, r3
 8000826:	2314      	movs	r3, #20
 8000828:	001a      	movs	r2, r3
 800082a:	2100      	movs	r1, #0
 800082c:	f002 fe6e 	bl	800350c <memset>
  if(huart->Instance==USART2)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <HAL_UART_MspInit+0x8c>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d130      	bne.n	800089c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800083a:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <HAL_UART_MspInit+0x90>)
 800083c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <HAL_UART_MspInit+0x90>)
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	0289      	lsls	r1, r1, #10
 8000844:	430a      	orrs	r2, r1
 8000846:	63da      	str	r2, [r3, #60]	; 0x3c
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <HAL_UART_MspInit+0x90>)
 800084a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	029b      	lsls	r3, r3, #10
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <HAL_UART_MspInit+0x90>)
 8000858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <HAL_UART_MspInit+0x90>)
 800085c:	2101      	movs	r1, #1
 800085e:	430a      	orrs	r2, r1
 8000860:	635a      	str	r2, [r3, #52]	; 0x34
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <HAL_UART_MspInit+0x90>)
 8000864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000866:	2201      	movs	r2, #1
 8000868:	4013      	ands	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800086e:	0021      	movs	r1, r4
 8000870:	187b      	adds	r3, r7, r1
 8000872:	220c      	movs	r2, #12
 8000874:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2202      	movs	r2, #2
 800087a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2201      	movs	r2, #1
 8000880:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2201      	movs	r2, #1
 800088c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	187a      	adds	r2, r7, r1
 8000890:	23a0      	movs	r3, #160	; 0xa0
 8000892:	05db      	lsls	r3, r3, #23
 8000894:	0011      	movs	r1, r2
 8000896:	0018      	movs	r0, r3
 8000898:	f000 fa42 	bl	8000d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b00b      	add	sp, #44	; 0x2c
 80008a2:	bd90      	pop	{r4, r7, pc}
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40021000 	.word	0x40021000

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <NMI_Handler+0x4>

080008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <HardFault_Handler+0x4>

080008b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d0:	f000 f8b6 	bl	8000a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <I2C1_IRQHandler+0x2c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	699a      	ldr	r2, [r3, #24]
 80008e6:	23e0      	movs	r3, #224	; 0xe0
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	4013      	ands	r3, r2
 80008ec:	d004      	beq.n	80008f8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <I2C1_IRQHandler+0x2c>)
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 fc47 	bl	8001184 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80008f6:	e003      	b.n	8000900 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <I2C1_IRQHandler+0x2c>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 fc28 	bl	8001150 <HAL_I2C_EV_IRQHandler>
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	20000028 	.word	0x20000028

0800090c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800091a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800091c:	f7ff fff6 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000920:	480c      	ldr	r0, [pc, #48]	; (8000954 <LoopForever+0x6>)
  ldr r1, =_edata
 8000922:	490d      	ldr	r1, [pc, #52]	; (8000958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000924:	4a0d      	ldr	r2, [pc, #52]	; (800095c <LoopForever+0xe>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000938:	4c0a      	ldr	r4, [pc, #40]	; (8000964 <LoopForever+0x16>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000946:	f002 fdbd 	bl	80034c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800094a:	f7ff fd7d 	bl	8000448 <main>

0800094e <LoopForever>:

LoopForever:
  b LoopForever
 800094e:	e7fe      	b.n	800094e <LoopForever>
  ldr   r0, =_estack
 8000950:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800095c:	080035bc 	.word	0x080035bc
  ldr r2, =_sbss
 8000960:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000964:	20000114 	.word	0x20000114

08000968 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC1_IRQHandler>
	...

0800096c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_Init+0x3c>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_Init+0x3c>)
 800097e:	2180      	movs	r1, #128	; 0x80
 8000980:	0049      	lsls	r1, r1, #1
 8000982:	430a      	orrs	r2, r1
 8000984:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000986:	2000      	movs	r0, #0
 8000988:	f000 f810 	bl	80009ac <HAL_InitTick>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d003      	beq.n	8000998 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000990:	1dfb      	adds	r3, r7, #7
 8000992:	2201      	movs	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	e001      	b.n	800099c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff feb0 	bl	80006fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	781b      	ldrb	r3, [r3, #0]
}
 80009a0:	0018      	movs	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b002      	add	sp, #8
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40022000 	.word	0x40022000

080009ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009b4:	230f      	movs	r3, #15
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <HAL_InitTick+0x88>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d02b      	beq.n	8000a1c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_InitTick+0x8c>)
 80009c6:	681c      	ldr	r4, [r3, #0]
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <HAL_InitTick+0x88>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	0019      	movs	r1, r3
 80009ce:	23fa      	movs	r3, #250	; 0xfa
 80009d0:	0098      	lsls	r0, r3, #2
 80009d2:	f7ff fb97 	bl	8000104 <__udivsi3>
 80009d6:	0003      	movs	r3, r0
 80009d8:	0019      	movs	r1, r3
 80009da:	0020      	movs	r0, r4
 80009dc:	f7ff fb92 	bl	8000104 <__udivsi3>
 80009e0:	0003      	movs	r3, r0
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 f919 	bl	8000c1a <HAL_SYSTICK_Config>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d112      	bne.n	8000a12 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d80a      	bhi.n	8000a08 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	2301      	movs	r3, #1
 80009f6:	425b      	negs	r3, r3
 80009f8:	2200      	movs	r2, #0
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 f8e8 	bl	8000bd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_InitTick+0x90>)
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	e00d      	b.n	8000a24 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a08:	230f      	movs	r3, #15
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e008      	b.n	8000a24 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a12:	230f      	movs	r3, #15
 8000a14:	18fb      	adds	r3, r7, r3
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
 8000a1a:	e003      	b.n	8000a24 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	18fb      	adds	r3, r7, r3
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a24:	230f      	movs	r3, #15
 8000a26:	18fb      	adds	r3, r7, r3
 8000a28:	781b      	ldrb	r3, [r3, #0]
}
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b005      	add	sp, #20
 8000a30:	bd90      	pop	{r4, r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	20000004 	.word	0x20000004

08000a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_IncTick+0x1c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	001a      	movs	r2, r3
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_IncTick+0x20>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	18d2      	adds	r2, r2, r3
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <HAL_IncTick+0x20>)
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20000110 	.word	0x20000110

08000a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b02      	ldr	r3, [pc, #8]	; (8000a74 <HAL_GetTick+0x10>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	20000110 	.word	0x20000110

08000a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	0002      	movs	r2, r0
 8000a80:	1dfb      	adds	r3, r7, #7
 8000a82:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b7f      	cmp	r3, #127	; 0x7f
 8000a8a:	d809      	bhi.n	8000aa0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	001a      	movs	r2, r3
 8000a92:	231f      	movs	r3, #31
 8000a94:	401a      	ands	r2, r3
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <__NVIC_EnableIRQ+0x30>)
 8000a98:	2101      	movs	r1, #1
 8000a9a:	4091      	lsls	r1, r2
 8000a9c:	000a      	movs	r2, r1
 8000a9e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	0002      	movs	r2, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac0:	d828      	bhi.n	8000b14 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac2:	4a2f      	ldr	r2, [pc, #188]	; (8000b80 <__NVIC_SetPriority+0xd4>)
 8000ac4:	1dfb      	adds	r3, r7, #7
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	089b      	lsrs	r3, r3, #2
 8000acc:	33c0      	adds	r3, #192	; 0xc0
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	589b      	ldr	r3, [r3, r2]
 8000ad2:	1dfa      	adds	r2, r7, #7
 8000ad4:	7812      	ldrb	r2, [r2, #0]
 8000ad6:	0011      	movs	r1, r2
 8000ad8:	2203      	movs	r2, #3
 8000ada:	400a      	ands	r2, r1
 8000adc:	00d2      	lsls	r2, r2, #3
 8000ade:	21ff      	movs	r1, #255	; 0xff
 8000ae0:	4091      	lsls	r1, r2
 8000ae2:	000a      	movs	r2, r1
 8000ae4:	43d2      	mvns	r2, r2
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	019b      	lsls	r3, r3, #6
 8000aee:	22ff      	movs	r2, #255	; 0xff
 8000af0:	401a      	ands	r2, r3
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	0018      	movs	r0, r3
 8000af8:	2303      	movs	r3, #3
 8000afa:	4003      	ands	r3, r0
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b00:	481f      	ldr	r0, [pc, #124]	; (8000b80 <__NVIC_SetPriority+0xd4>)
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b25b      	sxtb	r3, r3
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	33c0      	adds	r3, #192	; 0xc0
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b12:	e031      	b.n	8000b78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b14:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <__NVIC_SetPriority+0xd8>)
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	400b      	ands	r3, r1
 8000b20:	3b08      	subs	r3, #8
 8000b22:	089b      	lsrs	r3, r3, #2
 8000b24:	3306      	adds	r3, #6
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	18d3      	adds	r3, r2, r3
 8000b2a:	3304      	adds	r3, #4
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	1dfa      	adds	r2, r7, #7
 8000b30:	7812      	ldrb	r2, [r2, #0]
 8000b32:	0011      	movs	r1, r2
 8000b34:	2203      	movs	r2, #3
 8000b36:	400a      	ands	r2, r1
 8000b38:	00d2      	lsls	r2, r2, #3
 8000b3a:	21ff      	movs	r1, #255	; 0xff
 8000b3c:	4091      	lsls	r1, r2
 8000b3e:	000a      	movs	r2, r1
 8000b40:	43d2      	mvns	r2, r2
 8000b42:	401a      	ands	r2, r3
 8000b44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	019b      	lsls	r3, r3, #6
 8000b4a:	22ff      	movs	r2, #255	; 0xff
 8000b4c:	401a      	ands	r2, r3
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	0018      	movs	r0, r3
 8000b54:	2303      	movs	r3, #3
 8000b56:	4003      	ands	r3, r0
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5c:	4809      	ldr	r0, [pc, #36]	; (8000b84 <__NVIC_SetPriority+0xd8>)
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	001c      	movs	r4, r3
 8000b64:	230f      	movs	r3, #15
 8000b66:	4023      	ands	r3, r4
 8000b68:	3b08      	subs	r3, #8
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	3306      	adds	r3, #6
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	18c3      	adds	r3, r0, r3
 8000b74:	3304      	adds	r3, #4
 8000b76:	601a      	str	r2, [r3, #0]
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b003      	add	sp, #12
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	1e5a      	subs	r2, r3, #1
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	045b      	lsls	r3, r3, #17
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d301      	bcc.n	8000ba0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e010      	b.n	8000bc2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <SysTick_Config+0x44>)
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba8:	2301      	movs	r3, #1
 8000baa:	425b      	negs	r3, r3
 8000bac:	2103      	movs	r1, #3
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff ff7c 	bl	8000aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <SysTick_Config+0x44>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <SysTick_Config+0x44>)
 8000bbc:	2207      	movs	r2, #7
 8000bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b002      	add	sp, #8
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	e000e010 	.word	0xe000e010

08000bd0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	210f      	movs	r1, #15
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	1c02      	adds	r2, r0, #0
 8000be0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	0011      	movs	r1, r2
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff ff5d 	bl	8000aac <__NVIC_SetPriority>
}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b004      	add	sp, #16
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	0002      	movs	r2, r0
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b25b      	sxtb	r3, r3
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff ff33 	bl	8000a78 <__NVIC_EnableIRQ>
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b002      	add	sp, #8
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	0018      	movs	r0, r3
 8000c26:	f7ff ffaf 	bl	8000b88 <SysTick_Config>
 8000c2a:	0003      	movs	r3, r0
}
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b002      	add	sp, #8
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c3c:	210f      	movs	r1, #15
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2225      	movs	r2, #37	; 0x25
 8000c48:	5c9b      	ldrb	r3, [r3, r2]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d006      	beq.n	8000c5e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2204      	movs	r2, #4
 8000c54:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	e049      	b.n	8000cf2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	210e      	movs	r1, #14
 8000c6a:	438a      	bics	r2, r1
 8000c6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2101      	movs	r1, #1
 8000c7a:	438a      	bics	r2, r1
 8000c7c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c88:	491d      	ldr	r1, [pc, #116]	; (8000d00 <HAL_DMA_Abort_IT+0xcc>)
 8000c8a:	400a      	ands	r2, r1
 8000c8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <HAL_DMA_Abort_IT+0xd0>)
 8000c90:	6859      	ldr	r1, [r3, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	221c      	movs	r2, #28
 8000c98:	4013      	ands	r3, r2
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	409a      	lsls	r2, r3
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_DMA_Abort_IT+0xd0>)
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000cac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00c      	beq.n	8000cd0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cc0:	490f      	ldr	r1, [pc, #60]	; (8000d00 <HAL_DMA_Abort_IT+0xcc>)
 8000cc2:	400a      	ands	r2, r1
 8000cc4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000cce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2225      	movs	r2, #37	; 0x25
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2224      	movs	r2, #36	; 0x24
 8000cdc:	2100      	movs	r1, #0
 8000cde:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d004      	beq.n	8000cf2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	0010      	movs	r0, r2
 8000cf0:	4798      	blx	r3
    }
  }
  return status;
 8000cf2:	230f      	movs	r3, #15
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	781b      	ldrb	r3, [r3, #0]
}
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b004      	add	sp, #16
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	fffffeff 	.word	0xfffffeff
 8000d04:	40020000 	.word	0x40020000

08000d08 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2225      	movs	r2, #37	; 0x25
 8000d14:	5c9b      	ldrb	r3, [r3, r2]
 8000d16:	b2db      	uxtb	r3, r3
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2e:	e147      	b.n	8000fc0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2101      	movs	r1, #1
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	4091      	lsls	r1, r2
 8000d3a:	000a      	movs	r2, r1
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d100      	bne.n	8000d48 <HAL_GPIO_Init+0x28>
 8000d46:	e138      	b.n	8000fba <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	4013      	ands	r3, r2
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d005      	beq.n	8000d60 <HAL_GPIO_Init+0x40>
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2203      	movs	r2, #3
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d130      	bne.n	8000dc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	409a      	lsls	r2, r3
 8000d6e:	0013      	movs	r3, r2
 8000d70:	43da      	mvns	r2, r3
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	409a      	lsls	r2, r3
 8000d82:	0013      	movs	r3, r2
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d96:	2201      	movs	r2, #1
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	0013      	movs	r3, r2
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	091b      	lsrs	r3, r3, #4
 8000dac:	2201      	movs	r2, #1
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	4013      	ands	r3, r2
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d017      	beq.n	8000dfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	43da      	mvns	r2, r3
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2203      	movs	r2, #3
 8000e04:	4013      	ands	r3, r2
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d123      	bne.n	8000e52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	08da      	lsrs	r2, r3, #3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3208      	adds	r2, #8
 8000e12:	0092      	lsls	r2, r2, #2
 8000e14:	58d3      	ldr	r3, [r2, r3]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	220f      	movs	r2, #15
 8000e22:	409a      	lsls	r2, r3
 8000e24:	0013      	movs	r3, r2
 8000e26:	43da      	mvns	r2, r3
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	691a      	ldr	r2, [r3, #16]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	2107      	movs	r1, #7
 8000e36:	400b      	ands	r3, r1
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	08da      	lsrs	r2, r3, #3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3208      	adds	r2, #8
 8000e4c:	0092      	lsls	r2, r2, #2
 8000e4e:	6939      	ldr	r1, [r7, #16]
 8000e50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	43da      	mvns	r2, r3
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2203      	movs	r2, #3
 8000e70:	401a      	ands	r2, r3
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	23c0      	movs	r3, #192	; 0xc0
 8000e8c:	029b      	lsls	r3, r3, #10
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d100      	bne.n	8000e94 <HAL_GPIO_Init+0x174>
 8000e92:	e092      	b.n	8000fba <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e94:	4a50      	ldr	r2, [pc, #320]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	089b      	lsrs	r3, r3, #2
 8000e9a:	3318      	adds	r3, #24
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	589b      	ldr	r3, [r3, r2]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	220f      	movs	r2, #15
 8000eac:	409a      	lsls	r2, r3
 8000eae:	0013      	movs	r3, r2
 8000eb0:	43da      	mvns	r2, r3
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	23a0      	movs	r3, #160	; 0xa0
 8000ebc:	05db      	lsls	r3, r3, #23
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d013      	beq.n	8000eea <HAL_GPIO_Init+0x1ca>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a45      	ldr	r2, [pc, #276]	; (8000fdc <HAL_GPIO_Init+0x2bc>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d00d      	beq.n	8000ee6 <HAL_GPIO_Init+0x1c6>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a44      	ldr	r2, [pc, #272]	; (8000fe0 <HAL_GPIO_Init+0x2c0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d007      	beq.n	8000ee2 <HAL_GPIO_Init+0x1c2>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a43      	ldr	r2, [pc, #268]	; (8000fe4 <HAL_GPIO_Init+0x2c4>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_GPIO_Init+0x1be>
 8000eda:	2303      	movs	r3, #3
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x1cc>
 8000ede:	2305      	movs	r3, #5
 8000ee0:	e004      	b.n	8000eec <HAL_GPIO_Init+0x1cc>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e002      	b.n	8000eec <HAL_GPIO_Init+0x1cc>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <HAL_GPIO_Init+0x1cc>
 8000eea:	2300      	movs	r3, #0
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	2103      	movs	r1, #3
 8000ef0:	400a      	ands	r2, r1
 8000ef2:	00d2      	lsls	r2, r2, #3
 8000ef4:	4093      	lsls	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000efc:	4936      	ldr	r1, [pc, #216]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	3318      	adds	r3, #24
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f0a:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	43da      	mvns	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	035b      	lsls	r3, r3, #13
 8000f22:	4013      	ands	r3, r2
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f34:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43da      	mvns	r2, r3
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	039b      	lsls	r3, r3, #14
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000f60:	2384      	movs	r3, #132	; 0x84
 8000f62:	58d3      	ldr	r3, [r2, r3]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43da      	mvns	r2, r3
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	029b      	lsls	r3, r3, #10
 8000f78:	4013      	ands	r3, r2
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f84:	4914      	ldr	r1, [pc, #80]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000f86:	2284      	movs	r2, #132	; 0x84
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000f8c:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	58d3      	ldr	r3, [r2, r3]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43da      	mvns	r2, r3
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	025b      	lsls	r3, r3, #9
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fb2:	4909      	ldr	r1, [pc, #36]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	40da      	lsrs	r2, r3
 8000fc8:	1e13      	subs	r3, r2, #0
 8000fca:	d000      	beq.n	8000fce <HAL_GPIO_Init+0x2ae>
 8000fcc:	e6b0      	b.n	8000d30 <HAL_GPIO_Init+0x10>
  }
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b006      	add	sp, #24
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021800 	.word	0x40021800
 8000fdc:	50000400 	.word	0x50000400
 8000fe0:	50000800 	.word	0x50000800
 8000fe4:	50000c00 	.word	0x50000c00

08000fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	0008      	movs	r0, r1
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	1cbb      	adds	r3, r7, #2
 8000ff6:	1c02      	adds	r2, r0, #0
 8000ff8:	801a      	strh	r2, [r3, #0]
 8000ffa:	1c7b      	adds	r3, r7, #1
 8000ffc:	1c0a      	adds	r2, r1, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001000:	1c7b      	adds	r3, r7, #1
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d004      	beq.n	8001012 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001008:	1cbb      	adds	r3, r7, #2
 800100a:	881a      	ldrh	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001010:	e003      	b.n	800101a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001012:	1cbb      	adds	r3, r7, #2
 8001014:	881a      	ldrh	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e082      	b.n	800113c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2241      	movs	r2, #65	; 0x41
 800103a:	5c9b      	ldrb	r3, [r3, r2]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d107      	bne.n	8001052 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2240      	movs	r2, #64	; 0x40
 8001046:	2100      	movs	r1, #0
 8001048:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff fb79 	bl	8000744 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2241      	movs	r2, #65	; 0x41
 8001056:	2124      	movs	r1, #36	; 0x24
 8001058:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2101      	movs	r1, #1
 8001066:	438a      	bics	r2, r1
 8001068:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4934      	ldr	r1, [pc, #208]	; (8001144 <HAL_I2C_Init+0x120>)
 8001074:	400a      	ands	r2, r1
 8001076:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4931      	ldr	r1, [pc, #196]	; (8001148 <HAL_I2C_Init+0x124>)
 8001084:	400a      	ands	r2, r1
 8001086:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d108      	bne.n	80010a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	0209      	lsls	r1, r1, #8
 800109c:	430a      	orrs	r2, r1
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	e007      	b.n	80010b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2184      	movs	r1, #132	; 0x84
 80010ac:	0209      	lsls	r1, r1, #8
 80010ae:	430a      	orrs	r2, r1
 80010b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d104      	bne.n	80010c4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	491f      	ldr	r1, [pc, #124]	; (800114c <HAL_I2C_Init+0x128>)
 80010d0:	430a      	orrs	r2, r1
 80010d2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	491a      	ldr	r1, [pc, #104]	; (8001148 <HAL_I2C_Init+0x124>)
 80010e0:	400a      	ands	r2, r1
 80010e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	431a      	orrs	r2, r3
 80010ee:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	430a      	orrs	r2, r1
 80010fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69d9      	ldr	r1, [r3, #28]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a1a      	ldr	r2, [r3, #32]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2101      	movs	r1, #1
 800111a:	430a      	orrs	r2, r1
 800111c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2241      	movs	r2, #65	; 0x41
 8001128:	2120      	movs	r1, #32
 800112a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2242      	movs	r2, #66	; 0x42
 8001136:	2100      	movs	r1, #0
 8001138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	0018      	movs	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	b002      	add	sp, #8
 8001142:	bd80      	pop	{r7, pc}
 8001144:	f0ffffff 	.word	0xf0ffffff
 8001148:	ffff7fff 	.word	0xffff7fff
 800114c:	02008000 	.word	0x02008000

08001150 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	68f9      	ldr	r1, [r7, #12]
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	4798      	blx	r3
  }
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	b004      	add	sp, #16
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	0a1b      	lsrs	r3, r3, #8
 80011a0:	001a      	movs	r2, r3
 80011a2:	2301      	movs	r3, #1
 80011a4:	4013      	ands	r3, r2
 80011a6:	d010      	beq.n	80011ca <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	09db      	lsrs	r3, r3, #7
 80011ac:	001a      	movs	r2, r3
 80011ae:	2301      	movs	r3, #1
 80011b0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80011b2:	d00a      	beq.n	80011ca <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b8:	2201      	movs	r2, #1
 80011ba:	431a      	orrs	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	0052      	lsls	r2, r2, #1
 80011c8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	0a9b      	lsrs	r3, r3, #10
 80011ce:	001a      	movs	r2, r3
 80011d0:	2301      	movs	r3, #1
 80011d2:	4013      	ands	r3, r2
 80011d4:	d010      	beq.n	80011f8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	09db      	lsrs	r3, r3, #7
 80011da:	001a      	movs	r2, r3
 80011dc:	2301      	movs	r3, #1
 80011de:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80011e0:	d00a      	beq.n	80011f8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	2208      	movs	r2, #8
 80011e8:	431a      	orrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	00d2      	lsls	r2, r2, #3
 80011f6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	0a5b      	lsrs	r3, r3, #9
 80011fc:	001a      	movs	r2, r3
 80011fe:	2301      	movs	r3, #1
 8001200:	4013      	ands	r3, r2
 8001202:	d010      	beq.n	8001226 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	09db      	lsrs	r3, r3, #7
 8001208:	001a      	movs	r2, r3
 800120a:	2301      	movs	r3, #1
 800120c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800120e:	d00a      	beq.n	8001226 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001214:	2202      	movs	r2, #2
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	0092      	lsls	r2, r2, #2
 8001224:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	220b      	movs	r2, #11
 8001230:	4013      	ands	r3, r2
 8001232:	d005      	beq.n	8001240 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	0011      	movs	r1, r2
 800123a:	0018      	movs	r0, r3
 800123c:	f000 fbd8 	bl	80019f0 <I2C_ITError>
  }
}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	b006      	add	sp, #24
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	b002      	add	sp, #8
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	b002      	add	sp, #8
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	0008      	movs	r0, r1
 8001272:	0011      	movs	r1, r2
 8001274:	1cfb      	adds	r3, r7, #3
 8001276:	1c02      	adds	r2, r0, #0
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	003b      	movs	r3, r7
 800127c:	1c0a      	adds	r2, r1, #0
 800127e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001280:	46c0      	nop			; (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	b002      	add	sp, #8
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b002      	add	sp, #8
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b002      	add	sp, #8
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b002      	add	sp, #8
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2240      	movs	r2, #64	; 0x40
 80012d2:	5c9b      	ldrb	r3, [r3, r2]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d101      	bne.n	80012dc <I2C_Slave_ISR_IT+0x24>
 80012d8:	2302      	movs	r3, #2
 80012da:	e0fa      	b.n	80014d2 <I2C_Slave_ISR_IT+0x21a>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2240      	movs	r2, #64	; 0x40
 80012e0:	2101      	movs	r1, #1
 80012e2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	001a      	movs	r2, r3
 80012ea:	2301      	movs	r3, #1
 80012ec:	4013      	ands	r3, r2
 80012ee:	d00b      	beq.n	8001308 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	001a      	movs	r2, r3
 80012f6:	2301      	movs	r3, #1
 80012f8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80012fa:	d005      	beq.n	8001308 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	0011      	movs	r1, r2
 8001302:	0018      	movs	r0, r3
 8001304:	f000 f9f6 	bl	80016f4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	001a      	movs	r2, r3
 800130e:	2301      	movs	r3, #1
 8001310:	4013      	ands	r3, r2
 8001312:	d054      	beq.n	80013be <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	001a      	movs	r2, r3
 800131a:	2301      	movs	r3, #1
 800131c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800131e:	d04e      	beq.n	80013be <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001324:	b29b      	uxth	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d12d      	bne.n	8001386 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2241      	movs	r2, #65	; 0x41
 800132e:	5c9b      	ldrb	r3, [r3, r2]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b28      	cmp	r3, #40	; 0x28
 8001334:	d10b      	bne.n	800134e <I2C_Slave_ISR_IT+0x96>
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	049b      	lsls	r3, r3, #18
 800133c:	429a      	cmp	r2, r3
 800133e:	d106      	bne.n	800134e <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	0011      	movs	r1, r2
 8001346:	0018      	movs	r0, r3
 8001348:	f000 faf8 	bl	800193c <I2C_ITListenCplt>
 800134c:	e036      	b.n	80013bc <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2241      	movs	r2, #65	; 0x41
 8001352:	5c9b      	ldrb	r3, [r3, r2]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b29      	cmp	r3, #41	; 0x29
 8001358:	d110      	bne.n	800137c <I2C_Slave_ISR_IT+0xc4>
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	4a5f      	ldr	r2, [pc, #380]	; (80014dc <I2C_Slave_ISR_IT+0x224>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00c      	beq.n	800137c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2210      	movs	r2, #16
 8001368:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	0018      	movs	r0, r3
 800136e:	f000 fc4a 	bl	8001c06 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	0018      	movs	r0, r3
 8001376:	f000 f957 	bl	8001628 <I2C_ITSlaveSeqCplt>
 800137a:	e01f      	b.n	80013bc <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2210      	movs	r2, #16
 8001382:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001384:	e09d      	b.n	80014c2 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2210      	movs	r2, #16
 800138c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	2204      	movs	r2, #4
 8001394:	431a      	orrs	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <I2C_Slave_ISR_IT+0xf4>
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	045b      	lsls	r3, r3, #17
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d000      	beq.n	80013ac <I2C_Slave_ISR_IT+0xf4>
 80013aa:	e08a      	b.n	80014c2 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	0011      	movs	r1, r2
 80013b4:	0018      	movs	r0, r3
 80013b6:	f000 fb1b 	bl	80019f0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80013ba:	e082      	b.n	80014c2 <I2C_Slave_ISR_IT+0x20a>
 80013bc:	e081      	b.n	80014c2 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	001a      	movs	r2, r3
 80013c4:	2301      	movs	r3, #1
 80013c6:	4013      	ands	r3, r2
 80013c8:	d031      	beq.n	800142e <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	001a      	movs	r2, r3
 80013d0:	2301      	movs	r3, #1
 80013d2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80013d4:	d02b      	beq.n	800142e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013da:	b29b      	uxth	r3, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d018      	beq.n	8001412 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b29a      	uxth	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001408:	b29b      	uxth	r3, r3
 800140a:	3b01      	subs	r3, #1
 800140c:	b29a      	uxth	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001416:	b29b      	uxth	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d154      	bne.n	80014c6 <I2C_Slave_ISR_IT+0x20e>
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	4a2f      	ldr	r2, [pc, #188]	; (80014dc <I2C_Slave_ISR_IT+0x224>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d050      	beq.n	80014c6 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	0018      	movs	r0, r3
 8001428:	f000 f8fe 	bl	8001628 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800142c:	e04b      	b.n	80014c6 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	08db      	lsrs	r3, r3, #3
 8001432:	001a      	movs	r2, r3
 8001434:	2301      	movs	r3, #1
 8001436:	4013      	ands	r3, r2
 8001438:	d00c      	beq.n	8001454 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	08db      	lsrs	r3, r3, #3
 800143e:	001a      	movs	r2, r3
 8001440:	2301      	movs	r3, #1
 8001442:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001444:	d006      	beq.n	8001454 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	0011      	movs	r1, r2
 800144c:	0018      	movs	r0, r3
 800144e:	f000 f847 	bl	80014e0 <I2C_ITAddrCplt>
 8001452:	e039      	b.n	80014c8 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	001a      	movs	r2, r3
 800145a:	2301      	movs	r3, #1
 800145c:	4013      	ands	r3, r2
 800145e:	d033      	beq.n	80014c8 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	001a      	movs	r2, r3
 8001466:	2301      	movs	r3, #1
 8001468:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800146a:	d02d      	beq.n	80014c8 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001470:	b29b      	uxth	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d018      	beq.n	80014a8 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001490:	b29b      	uxth	r3, r3
 8001492:	3b01      	subs	r3, #1
 8001494:	b29a      	uxth	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149e:	3b01      	subs	r3, #1
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	851a      	strh	r2, [r3, #40]	; 0x28
 80014a6:	e00f      	b.n	80014c8 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	045b      	lsls	r3, r3, #17
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d002      	beq.n	80014b8 <I2C_Slave_ISR_IT+0x200>
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d107      	bne.n	80014c8 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	0018      	movs	r0, r3
 80014bc:	f000 f8b4 	bl	8001628 <I2C_ITSlaveSeqCplt>
 80014c0:	e002      	b.n	80014c8 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	e000      	b.n	80014c8 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80014c6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2240      	movs	r2, #64	; 0x40
 80014cc:	2100      	movs	r1, #0
 80014ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	0018      	movs	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b006      	add	sp, #24
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	ffff0000 	.word	0xffff0000

080014e0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2241      	movs	r2, #65	; 0x41
 80014ee:	5c9b      	ldrb	r3, [r3, r2]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	001a      	movs	r2, r3
 80014f4:	2328      	movs	r3, #40	; 0x28
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b28      	cmp	r3, #40	; 0x28
 80014fa:	d000      	beq.n	80014fe <I2C_ITAddrCplt+0x1e>
 80014fc:	e088      	b.n	8001610 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	0c1b      	lsrs	r3, r3, #16
 8001506:	b2da      	uxtb	r2, r3
 8001508:	250f      	movs	r5, #15
 800150a:	197b      	adds	r3, r7, r5
 800150c:	2101      	movs	r1, #1
 800150e:	400a      	ands	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	0c1b      	lsrs	r3, r3, #16
 800151a:	b29a      	uxth	r2, r3
 800151c:	200c      	movs	r0, #12
 800151e:	183b      	adds	r3, r7, r0
 8001520:	21fe      	movs	r1, #254	; 0xfe
 8001522:	400a      	ands	r2, r1
 8001524:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	b29a      	uxth	r2, r3
 800152e:	240a      	movs	r4, #10
 8001530:	193b      	adds	r3, r7, r4
 8001532:	0592      	lsls	r2, r2, #22
 8001534:	0d92      	lsrs	r2, r2, #22
 8001536:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	b29a      	uxth	r2, r3
 8001540:	2308      	movs	r3, #8
 8001542:	18fb      	adds	r3, r7, r3
 8001544:	21fe      	movs	r1, #254	; 0xfe
 8001546:	400a      	ands	r2, r1
 8001548:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d148      	bne.n	80015e4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001552:	0021      	movs	r1, r4
 8001554:	187b      	adds	r3, r7, r1
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	09db      	lsrs	r3, r3, #7
 800155a:	b29a      	uxth	r2, r3
 800155c:	183b      	adds	r3, r7, r0
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	4053      	eors	r3, r2
 8001562:	b29b      	uxth	r3, r3
 8001564:	001a      	movs	r2, r3
 8001566:	2306      	movs	r3, #6
 8001568:	4013      	ands	r3, r2
 800156a:	d120      	bne.n	80015ae <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800156c:	183b      	adds	r3, r7, r0
 800156e:	187a      	adds	r2, r7, r1
 8001570:	8812      	ldrh	r2, [r2, #0]
 8001572:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001582:	2b02      	cmp	r3, #2
 8001584:	d14c      	bne.n	8001620 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2208      	movs	r2, #8
 8001592:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2240      	movs	r2, #64	; 0x40
 8001598:	2100      	movs	r1, #0
 800159a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800159c:	183b      	adds	r3, r7, r0
 800159e:	881a      	ldrh	r2, [r3, #0]
 80015a0:	197b      	adds	r3, r7, r5
 80015a2:	7819      	ldrb	r1, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	0018      	movs	r0, r3
 80015a8:	f7ff fe5e 	bl	8001268 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80015ac:	e038      	b.n	8001620 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80015ae:	240c      	movs	r4, #12
 80015b0:	193b      	adds	r3, r7, r4
 80015b2:	2208      	movs	r2, #8
 80015b4:	18ba      	adds	r2, r7, r2
 80015b6:	8812      	ldrh	r2, [r2, #0]
 80015b8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	021a      	lsls	r2, r3, #8
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	0011      	movs	r1, r2
 80015c2:	0018      	movs	r0, r3
 80015c4:	f000 fb60 	bl	8001c88 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	2100      	movs	r1, #0
 80015ce:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80015d0:	193b      	adds	r3, r7, r4
 80015d2:	881a      	ldrh	r2, [r3, #0]
 80015d4:	230f      	movs	r3, #15
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	7819      	ldrb	r1, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff fe43 	bl	8001268 <HAL_I2C_AddrCallback>
}
 80015e2:	e01d      	b.n	8001620 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	021a      	lsls	r2, r3, #8
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	0011      	movs	r1, r2
 80015ec:	0018      	movs	r0, r3
 80015ee:	f000 fb4b 	bl	8001c88 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2240      	movs	r2, #64	; 0x40
 80015f6:	2100      	movs	r1, #0
 80015f8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80015fa:	230c      	movs	r3, #12
 80015fc:	18fb      	adds	r3, r7, r3
 80015fe:	881a      	ldrh	r2, [r3, #0]
 8001600:	230f      	movs	r3, #15
 8001602:	18fb      	adds	r3, r7, r3
 8001604:	7819      	ldrb	r1, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff fe2d 	bl	8001268 <HAL_I2C_AddrCallback>
}
 800160e:	e007      	b.n	8001620 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2208      	movs	r2, #8
 8001616:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2240      	movs	r2, #64	; 0x40
 800161c:	2100      	movs	r1, #0
 800161e:	5499      	strb	r1, [r3, r2]
}
 8001620:	46c0      	nop			; (mov r8, r8)
 8001622:	46bd      	mov	sp, r7
 8001624:	b004      	add	sp, #16
 8001626:	bdb0      	pop	{r4, r5, r7, pc}

08001628 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2242      	movs	r2, #66	; 0x42
 800163c:	2100      	movs	r1, #0
 800163e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	0b9b      	lsrs	r3, r3, #14
 8001644:	001a      	movs	r2, r3
 8001646:	2301      	movs	r3, #1
 8001648:	4013      	ands	r3, r2
 800164a:	d008      	beq.n	800165e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4925      	ldr	r1, [pc, #148]	; (80016ec <I2C_ITSlaveSeqCplt+0xc4>)
 8001658:	400a      	ands	r2, r1
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	e00d      	b.n	800167a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	0bdb      	lsrs	r3, r3, #15
 8001662:	001a      	movs	r2, r3
 8001664:	2301      	movs	r3, #1
 8001666:	4013      	ands	r3, r2
 8001668:	d007      	beq.n	800167a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	491e      	ldr	r1, [pc, #120]	; (80016f0 <I2C_ITSlaveSeqCplt+0xc8>)
 8001676:	400a      	ands	r2, r1
 8001678:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2241      	movs	r2, #65	; 0x41
 800167e:	5c9b      	ldrb	r3, [r3, r2]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b29      	cmp	r3, #41	; 0x29
 8001684:	d114      	bne.n	80016b0 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2241      	movs	r2, #65	; 0x41
 800168a:	2128      	movs	r1, #40	; 0x28
 800168c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2221      	movs	r2, #33	; 0x21
 8001692:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2101      	movs	r1, #1
 8001698:	0018      	movs	r0, r3
 800169a:	f000 faf5 	bl	8001c88 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2240      	movs	r2, #64	; 0x40
 80016a2:	2100      	movs	r1, #0
 80016a4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	0018      	movs	r0, r3
 80016aa:	f7ff fdcd 	bl	8001248 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80016ae:	e019      	b.n	80016e4 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2241      	movs	r2, #65	; 0x41
 80016b4:	5c9b      	ldrb	r3, [r3, r2]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b2a      	cmp	r3, #42	; 0x2a
 80016ba:	d113      	bne.n	80016e4 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2241      	movs	r2, #65	; 0x41
 80016c0:	2128      	movs	r1, #40	; 0x28
 80016c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2222      	movs	r2, #34	; 0x22
 80016c8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2102      	movs	r1, #2
 80016ce:	0018      	movs	r0, r3
 80016d0:	f000 fada 	bl	8001c88 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2240      	movs	r2, #64	; 0x40
 80016d8:	2100      	movs	r1, #0
 80016da:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	0018      	movs	r0, r3
 80016e0:	f7ff fdba 	bl	8001258 <HAL_I2C_SlaveRxCpltCallback>
}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b004      	add	sp, #16
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	ffffbfff 	.word	0xffffbfff
 80016f0:	ffff7fff 	.word	0xffff7fff

080016f4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800170a:	200f      	movs	r0, #15
 800170c:	183b      	adds	r3, r7, r0
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	2141      	movs	r1, #65	; 0x41
 8001712:	5c52      	ldrb	r2, [r2, r1]
 8001714:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2220      	movs	r2, #32
 800171c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800171e:	183b      	adds	r3, r7, r0
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b21      	cmp	r3, #33	; 0x21
 8001724:	d003      	beq.n	800172e <I2C_ITSlaveCplt+0x3a>
 8001726:	183b      	adds	r3, r7, r0
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b29      	cmp	r3, #41	; 0x29
 800172c:	d109      	bne.n	8001742 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800172e:	4a7d      	ldr	r2, [pc, #500]	; (8001924 <I2C_ITSlaveCplt+0x230>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	0011      	movs	r1, r2
 8001734:	0018      	movs	r0, r3
 8001736:	f000 faa7 	bl	8001c88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2221      	movs	r2, #33	; 0x21
 800173e:	631a      	str	r2, [r3, #48]	; 0x30
 8001740:	e011      	b.n	8001766 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001742:	220f      	movs	r2, #15
 8001744:	18bb      	adds	r3, r7, r2
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b22      	cmp	r3, #34	; 0x22
 800174a:	d003      	beq.n	8001754 <I2C_ITSlaveCplt+0x60>
 800174c:	18bb      	adds	r3, r7, r2
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b2a      	cmp	r3, #42	; 0x2a
 8001752:	d108      	bne.n	8001766 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001754:	4a74      	ldr	r2, [pc, #464]	; (8001928 <I2C_ITSlaveCplt+0x234>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	0011      	movs	r1, r2
 800175a:	0018      	movs	r0, r3
 800175c:	f000 fa94 	bl	8001c88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2222      	movs	r2, #34	; 0x22
 8001764:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	0209      	lsls	r1, r1, #8
 8001774:	430a      	orrs	r2, r1
 8001776:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	496a      	ldr	r1, [pc, #424]	; (800192c <I2C_ITSlaveCplt+0x238>)
 8001784:	400a      	ands	r2, r1
 8001786:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	0018      	movs	r0, r3
 800178c:	f000 fa3b 	bl	8001c06 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	0b9b      	lsrs	r3, r3, #14
 8001794:	001a      	movs	r2, r3
 8001796:	2301      	movs	r3, #1
 8001798:	4013      	ands	r3, r2
 800179a:	d013      	beq.n	80017c4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4962      	ldr	r1, [pc, #392]	; (8001930 <I2C_ITSlaveCplt+0x23c>)
 80017a8:	400a      	ands	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d020      	beq.n	80017f6 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017c2:	e018      	b.n	80017f6 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	0bdb      	lsrs	r3, r3, #15
 80017c8:	001a      	movs	r2, r3
 80017ca:	2301      	movs	r3, #1
 80017cc:	4013      	ands	r3, r2
 80017ce:	d012      	beq.n	80017f6 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4956      	ldr	r1, [pc, #344]	; (8001934 <I2C_ITSlaveCplt+0x240>)
 80017dc:	400a      	ands	r2, r1
 80017de:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d006      	beq.n	80017f6 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	001a      	movs	r2, r3
 80017fc:	2301      	movs	r3, #1
 80017fe:	4013      	ands	r3, r2
 8001800:	d020      	beq.n	8001844 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2204      	movs	r2, #4
 8001806:	4393      	bics	r3, r2
 8001808:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00c      	beq.n	8001844 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182e:	3b01      	subs	r3, #1
 8001830:	b29a      	uxth	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183a:	b29b      	uxth	r3, r3
 800183c:	3b01      	subs	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001848:	b29b      	uxth	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	2204      	movs	r2, #4
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2242      	movs	r2, #66	; 0x42
 800185e:	2100      	movs	r1, #0
 8001860:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186c:	2b00      	cmp	r3, #0
 800186e:	d013      	beq.n	8001898 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	0011      	movs	r1, r2
 8001878:	0018      	movs	r0, r3
 800187a:	f000 f8b9 	bl	80019f0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2241      	movs	r2, #65	; 0x41
 8001882:	5c9b      	ldrb	r3, [r3, r2]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b28      	cmp	r3, #40	; 0x28
 8001888:	d147      	bne.n	800191a <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	0011      	movs	r1, r2
 8001890:	0018      	movs	r0, r3
 8001892:	f000 f853 	bl	800193c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001896:	e040      	b.n	800191a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	4a26      	ldr	r2, [pc, #152]	; (8001938 <I2C_ITSlaveCplt+0x244>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d016      	beq.n	80018d0 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	0018      	movs	r0, r3
 80018a6:	f7ff febf 	bl	8001628 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a22      	ldr	r2, [pc, #136]	; (8001938 <I2C_ITSlaveCplt+0x244>)
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2241      	movs	r2, #65	; 0x41
 80018b4:	2120      	movs	r1, #32
 80018b6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2240      	movs	r2, #64	; 0x40
 80018c2:	2100      	movs	r1, #0
 80018c4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7ff fcdd 	bl	8001288 <HAL_I2C_ListenCpltCallback>
}
 80018ce:	e024      	b.n	800191a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2241      	movs	r2, #65	; 0x41
 80018d4:	5c9b      	ldrb	r3, [r3, r2]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b22      	cmp	r3, #34	; 0x22
 80018da:	d10f      	bne.n	80018fc <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2241      	movs	r2, #65	; 0x41
 80018e0:	2120      	movs	r1, #32
 80018e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2240      	movs	r2, #64	; 0x40
 80018ee:	2100      	movs	r1, #0
 80018f0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff fcaf 	bl	8001258 <HAL_I2C_SlaveRxCpltCallback>
}
 80018fa:	e00e      	b.n	800191a <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2241      	movs	r2, #65	; 0x41
 8001900:	2120      	movs	r1, #32
 8001902:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2240      	movs	r2, #64	; 0x40
 800190e:	2100      	movs	r1, #0
 8001910:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	0018      	movs	r0, r3
 8001916:	f7ff fc97 	bl	8001248 <HAL_I2C_SlaveTxCpltCallback>
}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	46bd      	mov	sp, r7
 800191e:	b006      	add	sp, #24
 8001920:	bd80      	pop	{r7, pc}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	00008001 	.word	0x00008001
 8001928:	00008002 	.word	0x00008002
 800192c:	fe00e800 	.word	0xfe00e800
 8001930:	ffffbfff 	.word	0xffffbfff
 8001934:	ffff7fff 	.word	0xffff7fff
 8001938:	ffff0000 	.word	0xffff0000

0800193c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a27      	ldr	r2, [pc, #156]	; (80019e8 <I2C_ITListenCplt+0xac>)
 800194a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2241      	movs	r2, #65	; 0x41
 8001956:	2120      	movs	r1, #32
 8001958:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2242      	movs	r2, #66	; 0x42
 800195e:	2100      	movs	r1, #0
 8001960:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	001a      	movs	r2, r3
 800196e:	2301      	movs	r3, #1
 8001970:	4013      	ands	r3, r2
 8001972:	d022      	beq.n	80019ba <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001990:	2b00      	cmp	r3, #0
 8001992:	d012      	beq.n	80019ba <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001998:	3b01      	subs	r3, #1
 800199a:	b29a      	uxth	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	3b01      	subs	r3, #1
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	2204      	movs	r2, #4
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80019ba:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <I2C_ITListenCplt+0xb0>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	0011      	movs	r1, r2
 80019c0:	0018      	movs	r0, r3
 80019c2:	f000 f961 	bl	8001c88 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2210      	movs	r2, #16
 80019cc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2240      	movs	r2, #64	; 0x40
 80019d2:	2100      	movs	r1, #0
 80019d4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	0018      	movs	r0, r3
 80019da:	f7ff fc55 	bl	8001288 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b002      	add	sp, #8
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	ffff0000 	.word	0xffff0000
 80019ec:	00008003 	.word	0x00008003

080019f0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80019fa:	200f      	movs	r0, #15
 80019fc:	183b      	adds	r3, r7, r0
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	2141      	movs	r1, #65	; 0x41
 8001a02:	5c52      	ldrb	r2, [r2, r1]
 8001a04:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2242      	movs	r2, #66	; 0x42
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a62      	ldr	r2, [pc, #392]	; (8001b9c <I2C_ITError+0x1ac>)
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001a26:	183b      	adds	r3, r7, r0
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b28      	cmp	r3, #40	; 0x28
 8001a2c:	d007      	beq.n	8001a3e <I2C_ITError+0x4e>
 8001a2e:	183b      	adds	r3, r7, r0
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b29      	cmp	r3, #41	; 0x29
 8001a34:	d003      	beq.n	8001a3e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001a36:	183b      	adds	r3, r7, r0
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8001a3c:	d10c      	bne.n	8001a58 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2103      	movs	r1, #3
 8001a42:	0018      	movs	r0, r3
 8001a44:	f000 f920 	bl	8001c88 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2241      	movs	r2, #65	; 0x41
 8001a4c:	2128      	movs	r1, #40	; 0x28
 8001a4e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a53      	ldr	r2, [pc, #332]	; (8001ba0 <I2C_ITError+0x1b0>)
 8001a54:	635a      	str	r2, [r3, #52]	; 0x34
 8001a56:	e012      	b.n	8001a7e <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001a58:	4a52      	ldr	r2, [pc, #328]	; (8001ba4 <I2C_ITError+0x1b4>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	0011      	movs	r1, r2
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f000 f912 	bl	8001c88 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2241      	movs	r2, #65	; 0x41
 8001a68:	5c9b      	ldrb	r3, [r3, r2]
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b60      	cmp	r3, #96	; 0x60
 8001a6e:	d003      	beq.n	8001a78 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2241      	movs	r2, #65	; 0x41
 8001a74:	2120      	movs	r1, #32
 8001a76:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d03b      	beq.n	8001b04 <I2C_ITError+0x114>
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b11      	cmp	r3, #17
 8001a90:	d002      	beq.n	8001a98 <I2C_ITError+0xa8>
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2b21      	cmp	r3, #33	; 0x21
 8001a96:	d135      	bne.n	8001b04 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	01db      	lsls	r3, r3, #7
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	01db      	lsls	r3, r3, #7
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d107      	bne.n	8001abc <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	493c      	ldr	r1, [pc, #240]	; (8001ba8 <I2C_ITError+0x1b8>)
 8001ab8:	400a      	ands	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f7ff f921 	bl	8000d08 <HAL_DMA_GetState>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d016      	beq.n	8001afa <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad0:	4a36      	ldr	r2, [pc, #216]	; (8001bac <I2C_ITError+0x1bc>)
 8001ad2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2240      	movs	r2, #64	; 0x40
 8001ad8:	2100      	movs	r1, #0
 8001ada:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7ff f8a7 	bl	8000c34 <HAL_DMA_Abort_IT>
 8001ae6:	1e03      	subs	r3, r0, #0
 8001ae8:	d051      	beq.n	8001b8e <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af4:	0018      	movs	r0, r3
 8001af6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001af8:	e049      	b.n	8001b8e <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	0018      	movs	r0, r3
 8001afe:	f000 f859 	bl	8001bb4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001b02:	e044      	b.n	8001b8e <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d03b      	beq.n	8001b84 <I2C_ITError+0x194>
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b12      	cmp	r3, #18
 8001b10:	d002      	beq.n	8001b18 <I2C_ITError+0x128>
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2b22      	cmp	r3, #34	; 0x22
 8001b16:	d135      	bne.n	8001b84 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	401a      	ands	r2, r3
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d107      	bne.n	8001b3c <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	491e      	ldr	r1, [pc, #120]	; (8001bb0 <I2C_ITError+0x1c0>)
 8001b38:	400a      	ands	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b40:	0018      	movs	r0, r3
 8001b42:	f7ff f8e1 	bl	8000d08 <HAL_DMA_GetState>
 8001b46:	0003      	movs	r3, r0
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d016      	beq.n	8001b7a <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b50:	4a16      	ldr	r2, [pc, #88]	; (8001bac <I2C_ITError+0x1bc>)
 8001b52:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2240      	movs	r2, #64	; 0x40
 8001b58:	2100      	movs	r1, #0
 8001b5a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b60:	0018      	movs	r0, r3
 8001b62:	f7ff f867 	bl	8000c34 <HAL_DMA_Abort_IT>
 8001b66:	1e03      	subs	r3, r0, #0
 8001b68:	d013      	beq.n	8001b92 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b74:	0018      	movs	r0, r3
 8001b76:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001b78:	e00b      	b.n	8001b92 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f000 f819 	bl	8001bb4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001b82:	e006      	b.n	8001b92 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	0018      	movs	r0, r3
 8001b88:	f000 f814 	bl	8001bb4 <I2C_TreatErrorCallback>
  }
}
 8001b8c:	e002      	b.n	8001b94 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	e000      	b.n	8001b94 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001b92:	46c0      	nop			; (mov r8, r8)
}
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b004      	add	sp, #16
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	ffff0000 	.word	0xffff0000
 8001ba0:	080012b9 	.word	0x080012b9
 8001ba4:	00008003 	.word	0x00008003
 8001ba8:	ffffbfff 	.word	0xffffbfff
 8001bac:	08001c4b 	.word	0x08001c4b
 8001bb0:	ffff7fff 	.word	0xffff7fff

08001bb4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2241      	movs	r2, #65	; 0x41
 8001bc0:	5c9b      	ldrb	r3, [r3, r2]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b60      	cmp	r3, #96	; 0x60
 8001bc6:	d10f      	bne.n	8001be8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2241      	movs	r2, #65	; 0x41
 8001bcc:	2120      	movs	r1, #32
 8001bce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2240      	movs	r2, #64	; 0x40
 8001bda:	2100      	movs	r1, #0
 8001bdc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	0018      	movs	r0, r3
 8001be2:	f7ff fb61 	bl	80012a8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001be6:	e00a      	b.n	8001bfe <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2240      	movs	r2, #64	; 0x40
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7ff fb4d 	bl	8001298 <HAL_I2C_ErrorCallback>
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b002      	add	sp, #8
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2202      	movs	r2, #2
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d103      	bne.n	8001c24 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2200      	movs	r2, #0
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d007      	beq.n	8001c42 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	699a      	ldr	r2, [r3, #24]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	619a      	str	r2, [r3, #24]
  }
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b002      	add	sp, #8
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c64:	2200      	movs	r2, #0
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c74:	2200      	movs	r2, #0
 8001c76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f7ff ff9a 	bl	8001bb4 <I2C_TreatErrorCallback>
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b004      	add	sp, #16
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	000a      	movs	r2, r1
 8001c92:	1cbb      	adds	r3, r7, #2
 8001c94:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001c9a:	1cbb      	adds	r3, r7, #2
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d010      	beq.n	8001cc6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2242      	movs	r2, #66	; 0x42
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2241      	movs	r2, #65	; 0x41
 8001cb0:	5c9b      	ldrb	r3, [r3, r2]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	001a      	movs	r2, r3
 8001cb6:	2328      	movs	r3, #40	; 0x28
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b28      	cmp	r3, #40	; 0x28
 8001cbc:	d003      	beq.n	8001cc6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	22b0      	movs	r2, #176	; 0xb0
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001cc6:	1cbb      	adds	r3, r7, #2
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d010      	beq.n	8001cf2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2244      	movs	r2, #68	; 0x44
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2241      	movs	r2, #65	; 0x41
 8001cdc:	5c9b      	ldrb	r3, [r3, r2]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	001a      	movs	r2, r3
 8001ce2:	2328      	movs	r3, #40	; 0x28
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b28      	cmp	r3, #40	; 0x28
 8001ce8:	d003      	beq.n	8001cf2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	22b0      	movs	r2, #176	; 0xb0
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001cf2:	1cbb      	adds	r3, r7, #2
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	5e9b      	ldrsh	r3, [r3, r2]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	da03      	bge.n	8001d04 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	22b8      	movs	r2, #184	; 0xb8
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8001d04:	1cbb      	adds	r3, r7, #2
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	2b10      	cmp	r3, #16
 8001d0a:	d103      	bne.n	8001d14 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2290      	movs	r2, #144	; 0x90
 8001d10:	4313      	orrs	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8001d14:	1cbb      	adds	r3, r7, #2
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	2b20      	cmp	r3, #32
 8001d1a:	d103      	bne.n	8001d24 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8001d24:	1cbb      	adds	r3, r7, #2
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	2b40      	cmp	r3, #64	; 0x40
 8001d2a:	d103      	bne.n	8001d34 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2240      	movs	r2, #64	; 0x40
 8001d30:	4313      	orrs	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	43d9      	mvns	r1, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	400a      	ands	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]
}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b004      	add	sp, #16
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2241      	movs	r2, #65	; 0x41
 8001d5e:	5c9b      	ldrb	r3, [r3, r2]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d138      	bne.n	8001dd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2240      	movs	r2, #64	; 0x40
 8001d6a:	5c9b      	ldrb	r3, [r3, r2]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e032      	b.n	8001dda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2240      	movs	r2, #64	; 0x40
 8001d78:	2101      	movs	r1, #1
 8001d7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2241      	movs	r2, #65	; 0x41
 8001d80:	2124      	movs	r1, #36	; 0x24
 8001d82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2101      	movs	r1, #1
 8001d90:	438a      	bics	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4911      	ldr	r1, [pc, #68]	; (8001de4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001da0:	400a      	ands	r2, r1
 8001da2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6819      	ldr	r1, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2241      	movs	r2, #65	; 0x41
 8001dc8:	2120      	movs	r1, #32
 8001dca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2240      	movs	r2, #64	; 0x40
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e000      	b.n	8001dda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001dd8:	2302      	movs	r3, #2
  }
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	ffffefff 	.word	0xffffefff

08001de8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2241      	movs	r2, #65	; 0x41
 8001df6:	5c9b      	ldrb	r3, [r3, r2]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	d139      	bne.n	8001e72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2240      	movs	r2, #64	; 0x40
 8001e02:	5c9b      	ldrb	r3, [r3, r2]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e033      	b.n	8001e74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2240      	movs	r2, #64	; 0x40
 8001e10:	2101      	movs	r1, #1
 8001e12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2241      	movs	r2, #65	; 0x41
 8001e18:	2124      	movs	r1, #36	; 0x24
 8001e1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2101      	movs	r1, #1
 8001e28:	438a      	bics	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4a11      	ldr	r2, [pc, #68]	; (8001e7c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2101      	movs	r1, #1
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2241      	movs	r2, #65	; 0x41
 8001e62:	2120      	movs	r1, #32
 8001e64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2240      	movs	r2, #64	; 0x40
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e72:	2302      	movs	r3, #2
  }
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b004      	add	sp, #16
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	fffff0ff 	.word	0xfffff0ff

08001e80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d11f      	bne.n	8001ee4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	189b      	adds	r3, r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4912      	ldr	r1, [pc, #72]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f7fe f926 	bl	8000104 <__udivsi3>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	3301      	adds	r3, #1
 8001ebc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ebe:	e008      	b.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	e001      	b.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e009      	b.n	8001ee6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	401a      	ands	r2, r3
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d0ed      	beq.n	8001ec0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b004      	add	sp, #16
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	40007000 	.word	0x40007000
 8001ef4:	fffff9ff 	.word	0xfffff9ff
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	000f4240 	.word	0x000f4240

08001f00 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	23e0      	movs	r3, #224	; 0xe0
 8001f0a:	01db      	lsls	r3, r3, #7
 8001f0c:	4013      	ands	r3, r2
}
 8001f0e:	0018      	movs	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000

08001f18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e2fe      	b.n	8002528 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	4013      	ands	r3, r2
 8001f32:	d100      	bne.n	8001f36 <HAL_RCC_OscConfig+0x1e>
 8001f34:	e07c      	b.n	8002030 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f36:	4bc3      	ldr	r3, [pc, #780]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2238      	movs	r2, #56	; 0x38
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f40:	4bc0      	ldr	r3, [pc, #768]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2203      	movs	r2, #3
 8001f46:	4013      	ands	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b10      	cmp	r3, #16
 8001f4e:	d102      	bne.n	8001f56 <HAL_RCC_OscConfig+0x3e>
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d002      	beq.n	8001f5c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d10b      	bne.n	8001f74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5c:	4bb9      	ldr	r3, [pc, #740]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	029b      	lsls	r3, r3, #10
 8001f64:	4013      	ands	r3, r2
 8001f66:	d062      	beq.n	800202e <HAL_RCC_OscConfig+0x116>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d15e      	bne.n	800202e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e2d9      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	025b      	lsls	r3, r3, #9
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d107      	bne.n	8001f90 <HAL_RCC_OscConfig+0x78>
 8001f80:	4bb0      	ldr	r3, [pc, #704]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4baf      	ldr	r3, [pc, #700]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8001f86:	2180      	movs	r1, #128	; 0x80
 8001f88:	0249      	lsls	r1, r1, #9
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	e020      	b.n	8001fd2 <HAL_RCC_OscConfig+0xba>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	23a0      	movs	r3, #160	; 0xa0
 8001f96:	02db      	lsls	r3, r3, #11
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d10e      	bne.n	8001fba <HAL_RCC_OscConfig+0xa2>
 8001f9c:	4ba9      	ldr	r3, [pc, #676]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4ba8      	ldr	r3, [pc, #672]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8001fa2:	2180      	movs	r1, #128	; 0x80
 8001fa4:	02c9      	lsls	r1, r1, #11
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	4ba6      	ldr	r3, [pc, #664]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4ba5      	ldr	r3, [pc, #660]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8001fb0:	2180      	movs	r1, #128	; 0x80
 8001fb2:	0249      	lsls	r1, r1, #9
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	e00b      	b.n	8001fd2 <HAL_RCC_OscConfig+0xba>
 8001fba:	4ba2      	ldr	r3, [pc, #648]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	4ba1      	ldr	r3, [pc, #644]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8001fc0:	49a1      	ldr	r1, [pc, #644]	; (8002248 <HAL_RCC_OscConfig+0x330>)
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	4b9f      	ldr	r3, [pc, #636]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4b9e      	ldr	r3, [pc, #632]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8001fcc:	499f      	ldr	r1, [pc, #636]	; (800224c <HAL_RCC_OscConfig+0x334>)
 8001fce:	400a      	ands	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d014      	beq.n	8002004 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7fe fd43 	bl	8000a64 <HAL_GetTick>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7fe fd3e 	bl	8000a64 <HAL_GetTick>
 8001fe8:	0002      	movs	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	; 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e298      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff6:	4b93      	ldr	r3, [pc, #588]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	029b      	lsls	r3, r3, #10
 8001ffe:	4013      	ands	r3, r2
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0xcc>
 8002002:	e015      	b.n	8002030 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7fe fd2e 	bl	8000a64 <HAL_GetTick>
 8002008:	0003      	movs	r3, r0
 800200a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800200e:	f7fe fd29 	bl	8000a64 <HAL_GetTick>
 8002012:	0002      	movs	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b64      	cmp	r3, #100	; 0x64
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e283      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002020:	4b88      	ldr	r3, [pc, #544]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	029b      	lsls	r3, r3, #10
 8002028:	4013      	ands	r3, r2
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0xf6>
 800202c:	e000      	b.n	8002030 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2202      	movs	r2, #2
 8002036:	4013      	ands	r3, r2
 8002038:	d100      	bne.n	800203c <HAL_RCC_OscConfig+0x124>
 800203a:	e099      	b.n	8002170 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203c:	4b81      	ldr	r3, [pc, #516]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2238      	movs	r2, #56	; 0x38
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002046:	4b7f      	ldr	r3, [pc, #508]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2203      	movs	r2, #3
 800204c:	4013      	ands	r3, r2
 800204e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	2b10      	cmp	r3, #16
 8002054:	d102      	bne.n	800205c <HAL_RCC_OscConfig+0x144>
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d002      	beq.n	8002062 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d135      	bne.n	80020ce <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002062:	4b78      	ldr	r3, [pc, #480]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4013      	ands	r3, r2
 800206c:	d005      	beq.n	800207a <HAL_RCC_OscConfig+0x162>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e256      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207a:	4b72      	ldr	r3, [pc, #456]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4a74      	ldr	r2, [pc, #464]	; (8002250 <HAL_RCC_OscConfig+0x338>)
 8002080:	4013      	ands	r3, r2
 8002082:	0019      	movs	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	021a      	lsls	r2, r3, #8
 800208a:	4b6e      	ldr	r3, [pc, #440]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 800208c:	430a      	orrs	r2, r1
 800208e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d112      	bne.n	80020bc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002096:	4b6b      	ldr	r3, [pc, #428]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a6e      	ldr	r2, [pc, #440]	; (8002254 <HAL_RCC_OscConfig+0x33c>)
 800209c:	4013      	ands	r3, r2
 800209e:	0019      	movs	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	4b67      	ldr	r3, [pc, #412]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 80020a6:	430a      	orrs	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80020aa:	4b66      	ldr	r3, [pc, #408]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0adb      	lsrs	r3, r3, #11
 80020b0:	2207      	movs	r2, #7
 80020b2:	4013      	ands	r3, r2
 80020b4:	4a68      	ldr	r2, [pc, #416]	; (8002258 <HAL_RCC_OscConfig+0x340>)
 80020b6:	40da      	lsrs	r2, r3
 80020b8:	4b68      	ldr	r3, [pc, #416]	; (800225c <HAL_RCC_OscConfig+0x344>)
 80020ba:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020bc:	4b68      	ldr	r3, [pc, #416]	; (8002260 <HAL_RCC_OscConfig+0x348>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0018      	movs	r0, r3
 80020c2:	f7fe fc73 	bl	80009ac <HAL_InitTick>
 80020c6:	1e03      	subs	r3, r0, #0
 80020c8:	d051      	beq.n	800216e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e22c      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d030      	beq.n	8002138 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020d6:	4b5b      	ldr	r3, [pc, #364]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a5e      	ldr	r2, [pc, #376]	; (8002254 <HAL_RCC_OscConfig+0x33c>)
 80020dc:	4013      	ands	r3, r2
 80020de:	0019      	movs	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	4b57      	ldr	r3, [pc, #348]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 80020e6:	430a      	orrs	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80020ea:	4b56      	ldr	r3, [pc, #344]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4b55      	ldr	r3, [pc, #340]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	0049      	lsls	r1, r1, #1
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe fcb4 	bl	8000a64 <HAL_GetTick>
 80020fc:	0003      	movs	r3, r0
 80020fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002102:	f7fe fcaf 	bl	8000a64 <HAL_GetTick>
 8002106:	0002      	movs	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e209      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002114:	4b4b      	ldr	r3, [pc, #300]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4013      	ands	r3, r2
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002120:	4b48      	ldr	r3, [pc, #288]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4a4a      	ldr	r2, [pc, #296]	; (8002250 <HAL_RCC_OscConfig+0x338>)
 8002126:	4013      	ands	r3, r2
 8002128:	0019      	movs	r1, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	021a      	lsls	r2, r3, #8
 8002130:	4b44      	ldr	r3, [pc, #272]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8002132:	430a      	orrs	r2, r1
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	e01b      	b.n	8002170 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002138:	4b42      	ldr	r3, [pc, #264]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b41      	ldr	r3, [pc, #260]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 800213e:	4949      	ldr	r1, [pc, #292]	; (8002264 <HAL_RCC_OscConfig+0x34c>)
 8002140:	400a      	ands	r2, r1
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7fe fc8e 	bl	8000a64 <HAL_GetTick>
 8002148:	0003      	movs	r3, r0
 800214a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214e:	f7fe fc89 	bl	8000a64 <HAL_GetTick>
 8002152:	0002      	movs	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e1e3      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002160:	4b38      	ldr	r3, [pc, #224]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4013      	ands	r3, r2
 800216a:	d1f0      	bne.n	800214e <HAL_RCC_OscConfig+0x236>
 800216c:	e000      	b.n	8002170 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800216e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2208      	movs	r2, #8
 8002176:	4013      	ands	r3, r2
 8002178:	d047      	beq.n	800220a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800217a:	4b32      	ldr	r3, [pc, #200]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2238      	movs	r2, #56	; 0x38
 8002180:	4013      	ands	r3, r2
 8002182:	2b18      	cmp	r3, #24
 8002184:	d10a      	bne.n	800219c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002186:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8002188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218a:	2202      	movs	r2, #2
 800218c:	4013      	ands	r3, r2
 800218e:	d03c      	beq.n	800220a <HAL_RCC_OscConfig+0x2f2>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d138      	bne.n	800220a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e1c5      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d019      	beq.n	80021d8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80021a4:	4b27      	ldr	r3, [pc, #156]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 80021a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021a8:	4b26      	ldr	r3, [pc, #152]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 80021aa:	2101      	movs	r1, #1
 80021ac:	430a      	orrs	r2, r1
 80021ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7fe fc58 	bl	8000a64 <HAL_GetTick>
 80021b4:	0003      	movs	r3, r0
 80021b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ba:	f7fe fc53 	bl	8000a64 <HAL_GetTick>
 80021be:	0002      	movs	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1ad      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 80021ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d0:	2202      	movs	r2, #2
 80021d2:	4013      	ands	r3, r2
 80021d4:	d0f1      	beq.n	80021ba <HAL_RCC_OscConfig+0x2a2>
 80021d6:	e018      	b.n	800220a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 80021da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 80021de:	2101      	movs	r1, #1
 80021e0:	438a      	bics	r2, r1
 80021e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7fe fc3e 	bl	8000a64 <HAL_GetTick>
 80021e8:	0003      	movs	r3, r0
 80021ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ee:	f7fe fc39 	bl	8000a64 <HAL_GetTick>
 80021f2:	0002      	movs	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e193      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002200:	4b10      	ldr	r3, [pc, #64]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8002202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002204:	2202      	movs	r2, #2
 8002206:	4013      	ands	r3, r2
 8002208:	d1f1      	bne.n	80021ee <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2204      	movs	r2, #4
 8002210:	4013      	ands	r3, r2
 8002212:	d100      	bne.n	8002216 <HAL_RCC_OscConfig+0x2fe>
 8002214:	e0c6      	b.n	80023a4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002216:	231f      	movs	r3, #31
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2238      	movs	r2, #56	; 0x38
 8002224:	4013      	ands	r3, r2
 8002226:	2b20      	cmp	r3, #32
 8002228:	d11e      	bne.n	8002268 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_RCC_OscConfig+0x32c>)
 800222c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222e:	2202      	movs	r2, #2
 8002230:	4013      	ands	r3, r2
 8002232:	d100      	bne.n	8002236 <HAL_RCC_OscConfig+0x31e>
 8002234:	e0b6      	b.n	80023a4 <HAL_RCC_OscConfig+0x48c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d000      	beq.n	8002240 <HAL_RCC_OscConfig+0x328>
 800223e:	e0b1      	b.n	80023a4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e171      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
 8002244:	40021000 	.word	0x40021000
 8002248:	fffeffff 	.word	0xfffeffff
 800224c:	fffbffff 	.word	0xfffbffff
 8002250:	ffff80ff 	.word	0xffff80ff
 8002254:	ffffc7ff 	.word	0xffffc7ff
 8002258:	00f42400 	.word	0x00f42400
 800225c:	20000000 	.word	0x20000000
 8002260:	20000004 	.word	0x20000004
 8002264:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002268:	4bb1      	ldr	r3, [pc, #708]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 800226a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	055b      	lsls	r3, r3, #21
 8002270:	4013      	ands	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_RCC_OscConfig+0x360>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x362>
 8002278:	2300      	movs	r3, #0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d011      	beq.n	80022a2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	4bac      	ldr	r3, [pc, #688]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 8002280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002282:	4bab      	ldr	r3, [pc, #684]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 8002284:	2180      	movs	r1, #128	; 0x80
 8002286:	0549      	lsls	r1, r1, #21
 8002288:	430a      	orrs	r2, r1
 800228a:	63da      	str	r2, [r3, #60]	; 0x3c
 800228c:	4ba8      	ldr	r3, [pc, #672]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 800228e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	055b      	lsls	r3, r3, #21
 8002294:	4013      	ands	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800229a:	231f      	movs	r3, #31
 800229c:	18fb      	adds	r3, r7, r3
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a2:	4ba4      	ldr	r3, [pc, #656]	; (8002534 <HAL_RCC_OscConfig+0x61c>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4013      	ands	r3, r2
 80022ac:	d11a      	bne.n	80022e4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ae:	4ba1      	ldr	r3, [pc, #644]	; (8002534 <HAL_RCC_OscConfig+0x61c>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4ba0      	ldr	r3, [pc, #640]	; (8002534 <HAL_RCC_OscConfig+0x61c>)
 80022b4:	2180      	movs	r1, #128	; 0x80
 80022b6:	0049      	lsls	r1, r1, #1
 80022b8:	430a      	orrs	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80022bc:	f7fe fbd2 	bl	8000a64 <HAL_GetTick>
 80022c0:	0003      	movs	r3, r0
 80022c2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c6:	f7fe fbcd 	bl	8000a64 <HAL_GetTick>
 80022ca:	0002      	movs	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e127      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d8:	4b96      	ldr	r3, [pc, #600]	; (8002534 <HAL_RCC_OscConfig+0x61c>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4013      	ands	r3, r2
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x3e2>
 80022ec:	4b90      	ldr	r3, [pc, #576]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 80022ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022f0:	4b8f      	ldr	r3, [pc, #572]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 80022f2:	2101      	movs	r1, #1
 80022f4:	430a      	orrs	r2, r1
 80022f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80022f8:	e01c      	b.n	8002334 <HAL_RCC_OscConfig+0x41c>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b05      	cmp	r3, #5
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0x404>
 8002302:	4b8b      	ldr	r3, [pc, #556]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 8002304:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002306:	4b8a      	ldr	r3, [pc, #552]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 8002308:	2104      	movs	r1, #4
 800230a:	430a      	orrs	r2, r1
 800230c:	65da      	str	r2, [r3, #92]	; 0x5c
 800230e:	4b88      	ldr	r3, [pc, #544]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 8002310:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002312:	4b87      	ldr	r3, [pc, #540]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 8002314:	2101      	movs	r1, #1
 8002316:	430a      	orrs	r2, r1
 8002318:	65da      	str	r2, [r3, #92]	; 0x5c
 800231a:	e00b      	b.n	8002334 <HAL_RCC_OscConfig+0x41c>
 800231c:	4b84      	ldr	r3, [pc, #528]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 800231e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002320:	4b83      	ldr	r3, [pc, #524]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 8002322:	2101      	movs	r1, #1
 8002324:	438a      	bics	r2, r1
 8002326:	65da      	str	r2, [r3, #92]	; 0x5c
 8002328:	4b81      	ldr	r3, [pc, #516]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 800232a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800232c:	4b80      	ldr	r3, [pc, #512]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 800232e:	2104      	movs	r1, #4
 8002330:	438a      	bics	r2, r1
 8002332:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d014      	beq.n	8002366 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7fe fb92 	bl	8000a64 <HAL_GetTick>
 8002340:	0003      	movs	r3, r0
 8002342:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002344:	e009      	b.n	800235a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002346:	f7fe fb8d 	bl	8000a64 <HAL_GetTick>
 800234a:	0002      	movs	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	4a79      	ldr	r2, [pc, #484]	; (8002538 <HAL_RCC_OscConfig+0x620>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e0e6      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800235a:	4b75      	ldr	r3, [pc, #468]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 800235c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235e:	2202      	movs	r2, #2
 8002360:	4013      	ands	r3, r2
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x42e>
 8002364:	e013      	b.n	800238e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002366:	f7fe fb7d 	bl	8000a64 <HAL_GetTick>
 800236a:	0003      	movs	r3, r0
 800236c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800236e:	e009      	b.n	8002384 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002370:	f7fe fb78 	bl	8000a64 <HAL_GetTick>
 8002374:	0002      	movs	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	4a6f      	ldr	r2, [pc, #444]	; (8002538 <HAL_RCC_OscConfig+0x620>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e0d1      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002384:	4b6a      	ldr	r3, [pc, #424]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 8002386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002388:	2202      	movs	r2, #2
 800238a:	4013      	ands	r3, r2
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800238e:	231f      	movs	r3, #31
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d105      	bne.n	80023a4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002398:	4b65      	ldr	r3, [pc, #404]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 800239a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800239c:	4b64      	ldr	r3, [pc, #400]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 800239e:	4967      	ldr	r1, [pc, #412]	; (800253c <HAL_RCC_OscConfig+0x624>)
 80023a0:	400a      	ands	r2, r1
 80023a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d100      	bne.n	80023ae <HAL_RCC_OscConfig+0x496>
 80023ac:	e0bb      	b.n	8002526 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ae:	4b60      	ldr	r3, [pc, #384]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2238      	movs	r2, #56	; 0x38
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b10      	cmp	r3, #16
 80023b8:	d100      	bne.n	80023bc <HAL_RCC_OscConfig+0x4a4>
 80023ba:	e07b      	b.n	80024b4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d156      	bne.n	8002472 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c4:	4b5a      	ldr	r3, [pc, #360]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b59      	ldr	r3, [pc, #356]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 80023ca:	495d      	ldr	r1, [pc, #372]	; (8002540 <HAL_RCC_OscConfig+0x628>)
 80023cc:	400a      	ands	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe fb48 	bl	8000a64 <HAL_GetTick>
 80023d4:	0003      	movs	r3, r0
 80023d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023da:	f7fe fb43 	bl	8000a64 <HAL_GetTick>
 80023de:	0002      	movs	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e09d      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ec:	4b50      	ldr	r3, [pc, #320]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	049b      	lsls	r3, r3, #18
 80023f4:	4013      	ands	r3, r2
 80023f6:	d1f0      	bne.n	80023da <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f8:	4b4d      	ldr	r3, [pc, #308]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4a51      	ldr	r2, [pc, #324]	; (8002544 <HAL_RCC_OscConfig+0x62c>)
 80023fe:	4013      	ands	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1a      	ldr	r2, [r3, #32]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002424:	431a      	orrs	r2, r3
 8002426:	4b42      	ldr	r3, [pc, #264]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 8002428:	430a      	orrs	r2, r1
 800242a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800242c:	4b40      	ldr	r3, [pc, #256]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 8002432:	2180      	movs	r1, #128	; 0x80
 8002434:	0449      	lsls	r1, r1, #17
 8002436:	430a      	orrs	r2, r1
 8002438:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800243a:	4b3d      	ldr	r3, [pc, #244]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 8002440:	2180      	movs	r1, #128	; 0x80
 8002442:	0549      	lsls	r1, r1, #21
 8002444:	430a      	orrs	r2, r1
 8002446:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe fb0c 	bl	8000a64 <HAL_GetTick>
 800244c:	0003      	movs	r3, r0
 800244e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7fe fb07 	bl	8000a64 <HAL_GetTick>
 8002456:	0002      	movs	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e061      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002464:	4b32      	ldr	r3, [pc, #200]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	049b      	lsls	r3, r3, #18
 800246c:	4013      	ands	r3, r2
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x53a>
 8002470:	e059      	b.n	8002526 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002472:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 8002478:	4931      	ldr	r1, [pc, #196]	; (8002540 <HAL_RCC_OscConfig+0x628>)
 800247a:	400a      	ands	r2, r1
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247e:	f7fe faf1 	bl	8000a64 <HAL_GetTick>
 8002482:	0003      	movs	r3, r0
 8002484:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002488:	f7fe faec 	bl	8000a64 <HAL_GetTick>
 800248c:	0002      	movs	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e046      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800249a:	4b25      	ldr	r3, [pc, #148]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	049b      	lsls	r3, r3, #18
 80024a2:	4013      	ands	r3, r2
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80024a6:	4b22      	ldr	r3, [pc, #136]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	4b21      	ldr	r3, [pc, #132]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 80024ac:	4926      	ldr	r1, [pc, #152]	; (8002548 <HAL_RCC_OscConfig+0x630>)
 80024ae:	400a      	ands	r2, r1
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	e038      	b.n	8002526 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e033      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_RCC_OscConfig+0x618>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2203      	movs	r2, #3
 80024ca:	401a      	ands	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d126      	bne.n	8002522 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2270      	movs	r2, #112	; 0x70
 80024d8:	401a      	ands	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d11f      	bne.n	8002522 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	23fe      	movs	r3, #254	; 0xfe
 80024e6:	01db      	lsls	r3, r3, #7
 80024e8:	401a      	ands	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ee:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d116      	bne.n	8002522 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	23f8      	movs	r3, #248	; 0xf8
 80024f8:	039b      	lsls	r3, r3, #14
 80024fa:	401a      	ands	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d10e      	bne.n	8002522 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	23e0      	movs	r3, #224	; 0xe0
 8002508:	051b      	lsls	r3, r3, #20
 800250a:	401a      	ands	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002510:	429a      	cmp	r2, r3
 8002512:	d106      	bne.n	8002522 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	0f5b      	lsrs	r3, r3, #29
 8002518:	075a      	lsls	r2, r3, #29
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d001      	beq.n	8002526 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b008      	add	sp, #32
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	40007000 	.word	0x40007000
 8002538:	00001388 	.word	0x00001388
 800253c:	efffffff 	.word	0xefffffff
 8002540:	feffffff 	.word	0xfeffffff
 8002544:	11c1808c 	.word	0x11c1808c
 8002548:	eefefffc 	.word	0xeefefffc

0800254c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0e9      	b.n	8002734 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002560:	4b76      	ldr	r3, [pc, #472]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2207      	movs	r2, #7
 8002566:	4013      	ands	r3, r2
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d91e      	bls.n	80025ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b73      	ldr	r3, [pc, #460]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2207      	movs	r2, #7
 8002574:	4393      	bics	r3, r2
 8002576:	0019      	movs	r1, r3
 8002578:	4b70      	ldr	r3, [pc, #448]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002580:	f7fe fa70 	bl	8000a64 <HAL_GetTick>
 8002584:	0003      	movs	r3, r0
 8002586:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002588:	e009      	b.n	800259e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800258a:	f7fe fa6b 	bl	8000a64 <HAL_GetTick>
 800258e:	0002      	movs	r2, r0
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	4a6a      	ldr	r2, [pc, #424]	; (8002740 <HAL_RCC_ClockConfig+0x1f4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e0ca      	b.n	8002734 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800259e:	4b67      	ldr	r3, [pc, #412]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2207      	movs	r2, #7
 80025a4:	4013      	ands	r3, r2
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d1ee      	bne.n	800258a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2202      	movs	r2, #2
 80025b2:	4013      	ands	r3, r2
 80025b4:	d015      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2204      	movs	r2, #4
 80025bc:	4013      	ands	r3, r2
 80025be:	d006      	beq.n	80025ce <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025c0:	4b60      	ldr	r3, [pc, #384]	; (8002744 <HAL_RCC_ClockConfig+0x1f8>)
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	4b5f      	ldr	r3, [pc, #380]	; (8002744 <HAL_RCC_ClockConfig+0x1f8>)
 80025c6:	21e0      	movs	r1, #224	; 0xe0
 80025c8:	01c9      	lsls	r1, r1, #7
 80025ca:	430a      	orrs	r2, r1
 80025cc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ce:	4b5d      	ldr	r3, [pc, #372]	; (8002744 <HAL_RCC_ClockConfig+0x1f8>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	4a5d      	ldr	r2, [pc, #372]	; (8002748 <HAL_RCC_ClockConfig+0x1fc>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	4b59      	ldr	r3, [pc, #356]	; (8002744 <HAL_RCC_ClockConfig+0x1f8>)
 80025de:	430a      	orrs	r2, r1
 80025e0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2201      	movs	r2, #1
 80025e8:	4013      	ands	r3, r2
 80025ea:	d057      	beq.n	800269c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d107      	bne.n	8002604 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025f4:	4b53      	ldr	r3, [pc, #332]	; (8002744 <HAL_RCC_ClockConfig+0x1f8>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	029b      	lsls	r3, r3, #10
 80025fc:	4013      	ands	r3, r2
 80025fe:	d12b      	bne.n	8002658 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e097      	b.n	8002734 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d107      	bne.n	800261c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260c:	4b4d      	ldr	r3, [pc, #308]	; (8002744 <HAL_RCC_ClockConfig+0x1f8>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	049b      	lsls	r3, r3, #18
 8002614:	4013      	ands	r3, r2
 8002616:	d11f      	bne.n	8002658 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e08b      	b.n	8002734 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d107      	bne.n	8002634 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002624:	4b47      	ldr	r3, [pc, #284]	; (8002744 <HAL_RCC_ClockConfig+0x1f8>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4013      	ands	r3, r2
 800262e:	d113      	bne.n	8002658 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e07f      	b.n	8002734 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b03      	cmp	r3, #3
 800263a:	d106      	bne.n	800264a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800263c:	4b41      	ldr	r3, [pc, #260]	; (8002744 <HAL_RCC_ClockConfig+0x1f8>)
 800263e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002640:	2202      	movs	r2, #2
 8002642:	4013      	ands	r3, r2
 8002644:	d108      	bne.n	8002658 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e074      	b.n	8002734 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800264a:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <HAL_RCC_ClockConfig+0x1f8>)
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	2202      	movs	r2, #2
 8002650:	4013      	ands	r3, r2
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e06d      	b.n	8002734 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002658:	4b3a      	ldr	r3, [pc, #232]	; (8002744 <HAL_RCC_ClockConfig+0x1f8>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2207      	movs	r2, #7
 800265e:	4393      	bics	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	4b37      	ldr	r3, [pc, #220]	; (8002744 <HAL_RCC_ClockConfig+0x1f8>)
 8002668:	430a      	orrs	r2, r1
 800266a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800266c:	f7fe f9fa 	bl	8000a64 <HAL_GetTick>
 8002670:	0003      	movs	r3, r0
 8002672:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002674:	e009      	b.n	800268a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002676:	f7fe f9f5 	bl	8000a64 <HAL_GetTick>
 800267a:	0002      	movs	r2, r0
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	4a2f      	ldr	r2, [pc, #188]	; (8002740 <HAL_RCC_ClockConfig+0x1f4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e054      	b.n	8002734 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	4b2e      	ldr	r3, [pc, #184]	; (8002744 <HAL_RCC_ClockConfig+0x1f8>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2238      	movs	r2, #56	; 0x38
 8002690:	401a      	ands	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	429a      	cmp	r2, r3
 800269a:	d1ec      	bne.n	8002676 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800269c:	4b27      	ldr	r3, [pc, #156]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2207      	movs	r2, #7
 80026a2:	4013      	ands	r3, r2
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d21e      	bcs.n	80026e8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b24      	ldr	r3, [pc, #144]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2207      	movs	r2, #7
 80026b0:	4393      	bics	r3, r2
 80026b2:	0019      	movs	r1, r3
 80026b4:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026bc:	f7fe f9d2 	bl	8000a64 <HAL_GetTick>
 80026c0:	0003      	movs	r3, r0
 80026c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026c4:	e009      	b.n	80026da <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c6:	f7fe f9cd 	bl	8000a64 <HAL_GetTick>
 80026ca:	0002      	movs	r2, r0
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_RCC_ClockConfig+0x1f4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e02c      	b.n	8002734 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2207      	movs	r2, #7
 80026e0:	4013      	ands	r3, r2
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d1ee      	bne.n	80026c6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2204      	movs	r2, #4
 80026ee:	4013      	ands	r3, r2
 80026f0:	d009      	beq.n	8002706 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026f2:	4b14      	ldr	r3, [pc, #80]	; (8002744 <HAL_RCC_ClockConfig+0x1f8>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	4a15      	ldr	r2, [pc, #84]	; (800274c <HAL_RCC_ClockConfig+0x200>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	0019      	movs	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <HAL_RCC_ClockConfig+0x1f8>)
 8002702:	430a      	orrs	r2, r1
 8002704:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002706:	f000 f829 	bl	800275c <HAL_RCC_GetSysClockFreq>
 800270a:	0001      	movs	r1, r0
 800270c:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <HAL_RCC_ClockConfig+0x1f8>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	220f      	movs	r2, #15
 8002714:	401a      	ands	r2, r3
 8002716:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <HAL_RCC_ClockConfig+0x204>)
 8002718:	0092      	lsls	r2, r2, #2
 800271a:	58d3      	ldr	r3, [r2, r3]
 800271c:	221f      	movs	r2, #31
 800271e:	4013      	ands	r3, r2
 8002720:	000a      	movs	r2, r1
 8002722:	40da      	lsrs	r2, r3
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_RCC_ClockConfig+0x208>)
 8002726:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_ClockConfig+0x20c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	0018      	movs	r0, r3
 800272e:	f7fe f93d 	bl	80009ac <HAL_InitTick>
 8002732:	0003      	movs	r3, r0
}
 8002734:	0018      	movs	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	b004      	add	sp, #16
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40022000 	.word	0x40022000
 8002740:	00001388 	.word	0x00001388
 8002744:	40021000 	.word	0x40021000
 8002748:	fffff0ff 	.word	0xfffff0ff
 800274c:	ffff8fff 	.word	0xffff8fff
 8002750:	08003534 	.word	0x08003534
 8002754:	20000000 	.word	0x20000000
 8002758:	20000004 	.word	0x20000004

0800275c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002762:	4b3c      	ldr	r3, [pc, #240]	; (8002854 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2238      	movs	r2, #56	; 0x38
 8002768:	4013      	ands	r3, r2
 800276a:	d10f      	bne.n	800278c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800276c:	4b39      	ldr	r3, [pc, #228]	; (8002854 <HAL_RCC_GetSysClockFreq+0xf8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0adb      	lsrs	r3, r3, #11
 8002772:	2207      	movs	r2, #7
 8002774:	4013      	ands	r3, r2
 8002776:	2201      	movs	r2, #1
 8002778:	409a      	lsls	r2, r3
 800277a:	0013      	movs	r3, r2
 800277c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800277e:	6839      	ldr	r1, [r7, #0]
 8002780:	4835      	ldr	r0, [pc, #212]	; (8002858 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002782:	f7fd fcbf 	bl	8000104 <__udivsi3>
 8002786:	0003      	movs	r3, r0
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	e05d      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800278c:	4b31      	ldr	r3, [pc, #196]	; (8002854 <HAL_RCC_GetSysClockFreq+0xf8>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2238      	movs	r2, #56	; 0x38
 8002792:	4013      	ands	r3, r2
 8002794:	2b08      	cmp	r3, #8
 8002796:	d102      	bne.n	800279e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002798:	4b30      	ldr	r3, [pc, #192]	; (800285c <HAL_RCC_GetSysClockFreq+0x100>)
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	e054      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800279e:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2238      	movs	r2, #56	; 0x38
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b10      	cmp	r3, #16
 80027a8:	d138      	bne.n	800281c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80027aa:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2203      	movs	r2, #3
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027b4:	4b27      	ldr	r3, [pc, #156]	; (8002854 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	2207      	movs	r2, #7
 80027bc:	4013      	ands	r3, r2
 80027be:	3301      	adds	r3, #1
 80027c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d10d      	bne.n	80027e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	4824      	ldr	r0, [pc, #144]	; (800285c <HAL_RCC_GetSysClockFreq+0x100>)
 80027cc:	f7fd fc9a 	bl	8000104 <__udivsi3>
 80027d0:	0003      	movs	r3, r0
 80027d2:	0019      	movs	r1, r3
 80027d4:	4b1f      	ldr	r3, [pc, #124]	; (8002854 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	0a1b      	lsrs	r3, r3, #8
 80027da:	227f      	movs	r2, #127	; 0x7f
 80027dc:	4013      	ands	r3, r2
 80027de:	434b      	muls	r3, r1
 80027e0:	617b      	str	r3, [r7, #20]
        break;
 80027e2:	e00d      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	481c      	ldr	r0, [pc, #112]	; (8002858 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027e8:	f7fd fc8c 	bl	8000104 <__udivsi3>
 80027ec:	0003      	movs	r3, r0
 80027ee:	0019      	movs	r1, r3
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	227f      	movs	r2, #127	; 0x7f
 80027f8:	4013      	ands	r3, r2
 80027fa:	434b      	muls	r3, r1
 80027fc:	617b      	str	r3, [r7, #20]
        break;
 80027fe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002800:	4b14      	ldr	r3, [pc, #80]	; (8002854 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	0f5b      	lsrs	r3, r3, #29
 8002806:	2207      	movs	r2, #7
 8002808:	4013      	ands	r3, r2
 800280a:	3301      	adds	r3, #1
 800280c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	6978      	ldr	r0, [r7, #20]
 8002812:	f7fd fc77 	bl	8000104 <__udivsi3>
 8002816:	0003      	movs	r3, r0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	e015      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <HAL_RCC_GetSysClockFreq+0xf8>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2238      	movs	r2, #56	; 0x38
 8002822:	4013      	ands	r3, r2
 8002824:	2b20      	cmp	r3, #32
 8002826:	d103      	bne.n	8002830 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	021b      	lsls	r3, r3, #8
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	e00b      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2238      	movs	r2, #56	; 0x38
 8002836:	4013      	ands	r3, r2
 8002838:	2b18      	cmp	r3, #24
 800283a:	d103      	bne.n	8002844 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800283c:	23fa      	movs	r3, #250	; 0xfa
 800283e:	01db      	lsls	r3, r3, #7
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	e001      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002848:	693b      	ldr	r3, [r7, #16]
}
 800284a:	0018      	movs	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	b006      	add	sp, #24
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	40021000 	.word	0x40021000
 8002858:	00f42400 	.word	0x00f42400
 800285c:	007a1200 	.word	0x007a1200

08002860 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002864:	4b02      	ldr	r3, [pc, #8]	; (8002870 <HAL_RCC_GetHCLKFreq+0x10>)
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	0018      	movs	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	20000000 	.word	0x20000000

08002874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002874:	b5b0      	push	{r4, r5, r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002878:	f7ff fff2 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 800287c:	0004      	movs	r4, r0
 800287e:	f7ff fb3f 	bl	8001f00 <LL_RCC_GetAPB1Prescaler>
 8002882:	0003      	movs	r3, r0
 8002884:	0b1a      	lsrs	r2, r3, #12
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002888:	0092      	lsls	r2, r2, #2
 800288a:	58d3      	ldr	r3, [r2, r3]
 800288c:	221f      	movs	r2, #31
 800288e:	4013      	ands	r3, r2
 8002890:	40dc      	lsrs	r4, r3
 8002892:	0023      	movs	r3, r4
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	bdb0      	pop	{r4, r5, r7, pc}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	08003574 	.word	0x08003574

080028a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80028a8:	2313      	movs	r3, #19
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028b0:	2312      	movs	r3, #18
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	029b      	lsls	r3, r3, #10
 80028c0:	4013      	ands	r3, r2
 80028c2:	d100      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80028c4:	e0a3      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c6:	2011      	movs	r0, #17
 80028c8:	183b      	adds	r3, r7, r0
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ce:	4ba5      	ldr	r3, [pc, #660]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	055b      	lsls	r3, r3, #21
 80028d6:	4013      	ands	r3, r2
 80028d8:	d110      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028da:	4ba2      	ldr	r3, [pc, #648]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028de:	4ba1      	ldr	r3, [pc, #644]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028e0:	2180      	movs	r1, #128	; 0x80
 80028e2:	0549      	lsls	r1, r1, #21
 80028e4:	430a      	orrs	r2, r1
 80028e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80028e8:	4b9e      	ldr	r3, [pc, #632]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	055b      	lsls	r3, r3, #21
 80028f0:	4013      	ands	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f6:	183b      	adds	r3, r7, r0
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028fc:	4b9a      	ldr	r3, [pc, #616]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b99      	ldr	r3, [pc, #612]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002902:	2180      	movs	r1, #128	; 0x80
 8002904:	0049      	lsls	r1, r1, #1
 8002906:	430a      	orrs	r2, r1
 8002908:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800290a:	f7fe f8ab 	bl	8000a64 <HAL_GetTick>
 800290e:	0003      	movs	r3, r0
 8002910:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002912:	e00b      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002914:	f7fe f8a6 	bl	8000a64 <HAL_GetTick>
 8002918:	0002      	movs	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d904      	bls.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002922:	2313      	movs	r3, #19
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	2203      	movs	r2, #3
 8002928:	701a      	strb	r2, [r3, #0]
        break;
 800292a:	e005      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800292c:	4b8e      	ldr	r3, [pc, #568]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4013      	ands	r3, r2
 8002936:	d0ed      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002938:	2313      	movs	r3, #19
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d154      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002942:	4b88      	ldr	r3, [pc, #544]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002944:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002946:	23c0      	movs	r3, #192	; 0xc0
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4013      	ands	r3, r2
 800294c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d019      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	429a      	cmp	r2, r3
 800295c:	d014      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800295e:	4b81      	ldr	r3, [pc, #516]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002962:	4a82      	ldr	r2, [pc, #520]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002964:	4013      	ands	r3, r2
 8002966:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002968:	4b7e      	ldr	r3, [pc, #504]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800296a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800296c:	4b7d      	ldr	r3, [pc, #500]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	0249      	lsls	r1, r1, #9
 8002972:	430a      	orrs	r2, r1
 8002974:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002976:	4b7b      	ldr	r3, [pc, #492]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002978:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800297a:	4b7a      	ldr	r3, [pc, #488]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800297c:	497c      	ldr	r1, [pc, #496]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800297e:	400a      	ands	r2, r1
 8002980:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002982:	4b78      	ldr	r3, [pc, #480]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2201      	movs	r2, #1
 800298c:	4013      	ands	r3, r2
 800298e:	d016      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe f868 	bl	8000a64 <HAL_GetTick>
 8002994:	0003      	movs	r3, r0
 8002996:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002998:	e00c      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299a:	f7fe f863 	bl	8000a64 <HAL_GetTick>
 800299e:	0002      	movs	r2, r0
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	4a73      	ldr	r2, [pc, #460]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d904      	bls.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80029aa:	2313      	movs	r3, #19
 80029ac:	18fb      	adds	r3, r7, r3
 80029ae:	2203      	movs	r2, #3
 80029b0:	701a      	strb	r2, [r3, #0]
            break;
 80029b2:	e004      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b4:	4b6b      	ldr	r3, [pc, #428]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	2202      	movs	r2, #2
 80029ba:	4013      	ands	r3, r2
 80029bc:	d0ed      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80029be:	2313      	movs	r3, #19
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10a      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029c8:	4b66      	ldr	r3, [pc, #408]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029cc:	4a67      	ldr	r2, [pc, #412]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029d6:	4b63      	ldr	r3, [pc, #396]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029d8:	430a      	orrs	r2, r1
 80029da:	65da      	str	r2, [r3, #92]	; 0x5c
 80029dc:	e00c      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029de:	2312      	movs	r3, #18
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	2213      	movs	r2, #19
 80029e4:	18ba      	adds	r2, r7, r2
 80029e6:	7812      	ldrb	r2, [r2, #0]
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	e005      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ec:	2312      	movs	r3, #18
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	2213      	movs	r2, #19
 80029f2:	18ba      	adds	r2, r7, r2
 80029f4:	7812      	ldrb	r2, [r2, #0]
 80029f6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029f8:	2311      	movs	r3, #17
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d105      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a02:	4b58      	ldr	r3, [pc, #352]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a06:	4b57      	ldr	r3, [pc, #348]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a08:	495b      	ldr	r1, [pc, #364]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a0a:	400a      	ands	r2, r1
 8002a0c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2201      	movs	r2, #1
 8002a14:	4013      	ands	r3, r2
 8002a16:	d009      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a18:	4b52      	ldr	r3, [pc, #328]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	4393      	bics	r3, r2
 8002a20:	0019      	movs	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	4b4f      	ldr	r3, [pc, #316]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2210      	movs	r2, #16
 8002a32:	4013      	ands	r3, r2
 8002a34:	d009      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a36:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	4a50      	ldr	r2, [pc, #320]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	0019      	movs	r1, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a46:	430a      	orrs	r2, r1
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4013      	ands	r3, r2
 8002a54:	d009      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a56:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	4a49      	ldr	r2, [pc, #292]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	0019      	movs	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	4b3f      	ldr	r3, [pc, #252]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a66:	430a      	orrs	r2, r1
 8002a68:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4013      	ands	r3, r2
 8002a74:	d009      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a76:	4b3b      	ldr	r3, [pc, #236]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	4a42      	ldr	r2, [pc, #264]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	0019      	movs	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699a      	ldr	r2, [r3, #24]
 8002a84:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a86:	430a      	orrs	r2, r1
 8002a88:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	4013      	ands	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a94:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a98:	4a3b      	ldr	r2, [pc, #236]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	4b30      	ldr	r3, [pc, #192]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	01db      	lsls	r3, r3, #7
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d015      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	0899      	lsrs	r1, r3, #2
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69da      	ldr	r2, [r3, #28]
 8002ac0:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	2380      	movs	r3, #128	; 0x80
 8002acc:	05db      	lsls	r3, r3, #23
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d106      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002ad2:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ad8:	2180      	movs	r1, #128	; 0x80
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	430a      	orrs	r2, r1
 8002ade:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	039b      	lsls	r3, r3, #14
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d016      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002aec:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af0:	4a26      	ldr	r2, [pc, #152]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	0019      	movs	r1, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1a      	ldr	r2, [r3, #32]
 8002afa:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002afc:	430a      	orrs	r2, r1
 8002afe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1a      	ldr	r2, [r3, #32]
 8002b04:	2380      	movs	r3, #128	; 0x80
 8002b06:	03db      	lsls	r3, r3, #15
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b12:	2180      	movs	r1, #128	; 0x80
 8002b14:	0449      	lsls	r1, r1, #17
 8002b16:	430a      	orrs	r2, r1
 8002b18:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	4013      	ands	r3, r2
 8002b24:	d016      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002b26:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2a:	4a19      	ldr	r2, [pc, #100]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	0019      	movs	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b36:	430a      	orrs	r2, r1
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	01db      	lsls	r3, r3, #7
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d106      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b4c:	2180      	movs	r1, #128	; 0x80
 8002b4e:	0249      	lsls	r1, r1, #9
 8002b50:	430a      	orrs	r2, r1
 8002b52:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002b54:	2312      	movs	r3, #18
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	781b      	ldrb	r3, [r3, #0]
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b006      	add	sp, #24
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40007000 	.word	0x40007000
 8002b6c:	fffffcff 	.word	0xfffffcff
 8002b70:	fffeffff 	.word	0xfffeffff
 8002b74:	00001388 	.word	0x00001388
 8002b78:	efffffff 	.word	0xefffffff
 8002b7c:	fffff3ff 	.word	0xfffff3ff
 8002b80:	fff3ffff 	.word	0xfff3ffff
 8002b84:	ffcfffff 	.word	0xffcfffff
 8002b88:	ffffcfff 	.word	0xffffcfff
 8002b8c:	ffbfffff 	.word	0xffbfffff
 8002b90:	ffff3fff 	.word	0xffff3fff

08002b94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e046      	b.n	8002c34 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2288      	movs	r2, #136	; 0x88
 8002baa:	589b      	ldr	r3, [r3, r2]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d107      	bne.n	8002bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2284      	movs	r2, #132	; 0x84
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f7fd fe2c 	bl	8000818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2288      	movs	r2, #136	; 0x88
 8002bc4:	2124      	movs	r1, #36	; 0x24
 8002bc6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	438a      	bics	r2, r1
 8002bd6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f000 f830 	bl	8002c40 <UART_SetConfig>
 8002be0:	0003      	movs	r3, r0
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e024      	b.n	8002c34 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f000 fa9b 	bl	8003130 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	490d      	ldr	r1, [pc, #52]	; (8002c3c <HAL_UART_Init+0xa8>)
 8002c06:	400a      	ands	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	212a      	movs	r1, #42	; 0x2a
 8002c16:	438a      	bics	r2, r1
 8002c18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2101      	movs	r1, #1
 8002c26:	430a      	orrs	r2, r1
 8002c28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f000 fb33 	bl	8003298 <UART_CheckIdleState>
 8002c32:	0003      	movs	r3, r0
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	ffffb7ff 	.word	0xffffb7ff

08002c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c40:	b5b0      	push	{r4, r5, r7, lr}
 8002c42:	b090      	sub	sp, #64	; 0x40
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c48:	231a      	movs	r3, #26
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	189b      	adds	r3, r3, r2
 8002c4e:	19db      	adds	r3, r3, r7
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4ac4      	ldr	r2, [pc, #784]	; (8002f84 <UART_SetConfig+0x344>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	0019      	movs	r1, r3
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4abf      	ldr	r2, [pc, #764]	; (8002f88 <UART_SetConfig+0x348>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	68d9      	ldr	r1, [r3, #12]
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	0003      	movs	r3, r0
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4ab9      	ldr	r2, [pc, #740]	; (8002f8c <UART_SetConfig+0x34c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4ab4      	ldr	r2, [pc, #720]	; (8002f90 <UART_SetConfig+0x350>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	4393      	bics	r3, r2
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4aaa      	ldr	r2, [pc, #680]	; (8002f94 <UART_SetConfig+0x354>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d131      	bne.n	8002d54 <UART_SetConfig+0x114>
 8002cf0:	4ba9      	ldr	r3, [pc, #676]	; (8002f98 <UART_SetConfig+0x358>)
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d01d      	beq.n	8002d38 <UART_SetConfig+0xf8>
 8002cfc:	d823      	bhi.n	8002d46 <UART_SetConfig+0x106>
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d00c      	beq.n	8002d1c <UART_SetConfig+0xdc>
 8002d02:	d820      	bhi.n	8002d46 <UART_SetConfig+0x106>
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <UART_SetConfig+0xce>
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d00e      	beq.n	8002d2a <UART_SetConfig+0xea>
 8002d0c:	e01b      	b.n	8002d46 <UART_SetConfig+0x106>
 8002d0e:	231b      	movs	r3, #27
 8002d10:	2220      	movs	r2, #32
 8002d12:	189b      	adds	r3, r3, r2
 8002d14:	19db      	adds	r3, r3, r7
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	e071      	b.n	8002e00 <UART_SetConfig+0x1c0>
 8002d1c:	231b      	movs	r3, #27
 8002d1e:	2220      	movs	r2, #32
 8002d20:	189b      	adds	r3, r3, r2
 8002d22:	19db      	adds	r3, r3, r7
 8002d24:	2202      	movs	r2, #2
 8002d26:	701a      	strb	r2, [r3, #0]
 8002d28:	e06a      	b.n	8002e00 <UART_SetConfig+0x1c0>
 8002d2a:	231b      	movs	r3, #27
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	189b      	adds	r3, r3, r2
 8002d30:	19db      	adds	r3, r3, r7
 8002d32:	2204      	movs	r2, #4
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e063      	b.n	8002e00 <UART_SetConfig+0x1c0>
 8002d38:	231b      	movs	r3, #27
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	189b      	adds	r3, r3, r2
 8002d3e:	19db      	adds	r3, r3, r7
 8002d40:	2208      	movs	r2, #8
 8002d42:	701a      	strb	r2, [r3, #0]
 8002d44:	e05c      	b.n	8002e00 <UART_SetConfig+0x1c0>
 8002d46:	231b      	movs	r3, #27
 8002d48:	2220      	movs	r2, #32
 8002d4a:	189b      	adds	r3, r3, r2
 8002d4c:	19db      	adds	r3, r3, r7
 8002d4e:	2210      	movs	r2, #16
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e055      	b.n	8002e00 <UART_SetConfig+0x1c0>
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a90      	ldr	r2, [pc, #576]	; (8002f9c <UART_SetConfig+0x35c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d106      	bne.n	8002d6c <UART_SetConfig+0x12c>
 8002d5e:	231b      	movs	r3, #27
 8002d60:	2220      	movs	r2, #32
 8002d62:	189b      	adds	r3, r3, r2
 8002d64:	19db      	adds	r3, r3, r7
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
 8002d6a:	e049      	b.n	8002e00 <UART_SetConfig+0x1c0>
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a86      	ldr	r2, [pc, #536]	; (8002f8c <UART_SetConfig+0x34c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d13e      	bne.n	8002df4 <UART_SetConfig+0x1b4>
 8002d76:	4b88      	ldr	r3, [pc, #544]	; (8002f98 <UART_SetConfig+0x358>)
 8002d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d7a:	23c0      	movs	r3, #192	; 0xc0
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	4013      	ands	r3, r2
 8002d80:	22c0      	movs	r2, #192	; 0xc0
 8002d82:	0112      	lsls	r2, r2, #4
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d027      	beq.n	8002dd8 <UART_SetConfig+0x198>
 8002d88:	22c0      	movs	r2, #192	; 0xc0
 8002d8a:	0112      	lsls	r2, r2, #4
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d82a      	bhi.n	8002de6 <UART_SetConfig+0x1a6>
 8002d90:	2280      	movs	r2, #128	; 0x80
 8002d92:	0112      	lsls	r2, r2, #4
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d011      	beq.n	8002dbc <UART_SetConfig+0x17c>
 8002d98:	2280      	movs	r2, #128	; 0x80
 8002d9a:	0112      	lsls	r2, r2, #4
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d822      	bhi.n	8002de6 <UART_SetConfig+0x1a6>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d004      	beq.n	8002dae <UART_SetConfig+0x16e>
 8002da4:	2280      	movs	r2, #128	; 0x80
 8002da6:	00d2      	lsls	r2, r2, #3
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00e      	beq.n	8002dca <UART_SetConfig+0x18a>
 8002dac:	e01b      	b.n	8002de6 <UART_SetConfig+0x1a6>
 8002dae:	231b      	movs	r3, #27
 8002db0:	2220      	movs	r2, #32
 8002db2:	189b      	adds	r3, r3, r2
 8002db4:	19db      	adds	r3, r3, r7
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]
 8002dba:	e021      	b.n	8002e00 <UART_SetConfig+0x1c0>
 8002dbc:	231b      	movs	r3, #27
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	189b      	adds	r3, r3, r2
 8002dc2:	19db      	adds	r3, r3, r7
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	e01a      	b.n	8002e00 <UART_SetConfig+0x1c0>
 8002dca:	231b      	movs	r3, #27
 8002dcc:	2220      	movs	r2, #32
 8002dce:	189b      	adds	r3, r3, r2
 8002dd0:	19db      	adds	r3, r3, r7
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e013      	b.n	8002e00 <UART_SetConfig+0x1c0>
 8002dd8:	231b      	movs	r3, #27
 8002dda:	2220      	movs	r2, #32
 8002ddc:	189b      	adds	r3, r3, r2
 8002dde:	19db      	adds	r3, r3, r7
 8002de0:	2208      	movs	r2, #8
 8002de2:	701a      	strb	r2, [r3, #0]
 8002de4:	e00c      	b.n	8002e00 <UART_SetConfig+0x1c0>
 8002de6:	231b      	movs	r3, #27
 8002de8:	2220      	movs	r2, #32
 8002dea:	189b      	adds	r3, r3, r2
 8002dec:	19db      	adds	r3, r3, r7
 8002dee:	2210      	movs	r2, #16
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	e005      	b.n	8002e00 <UART_SetConfig+0x1c0>
 8002df4:	231b      	movs	r3, #27
 8002df6:	2220      	movs	r2, #32
 8002df8:	189b      	adds	r3, r3, r2
 8002dfa:	19db      	adds	r3, r3, r7
 8002dfc:	2210      	movs	r2, #16
 8002dfe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a61      	ldr	r2, [pc, #388]	; (8002f8c <UART_SetConfig+0x34c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d000      	beq.n	8002e0c <UART_SetConfig+0x1cc>
 8002e0a:	e092      	b.n	8002f32 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e0c:	231b      	movs	r3, #27
 8002e0e:	2220      	movs	r2, #32
 8002e10:	189b      	adds	r3, r3, r2
 8002e12:	19db      	adds	r3, r3, r7
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d015      	beq.n	8002e46 <UART_SetConfig+0x206>
 8002e1a:	dc18      	bgt.n	8002e4e <UART_SetConfig+0x20e>
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d00d      	beq.n	8002e3c <UART_SetConfig+0x1fc>
 8002e20:	dc15      	bgt.n	8002e4e <UART_SetConfig+0x20e>
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <UART_SetConfig+0x1ec>
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d005      	beq.n	8002e36 <UART_SetConfig+0x1f6>
 8002e2a:	e010      	b.n	8002e4e <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e2c:	f7ff fd22 	bl	8002874 <HAL_RCC_GetPCLK1Freq>
 8002e30:	0003      	movs	r3, r0
 8002e32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e34:	e014      	b.n	8002e60 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e36:	4b5a      	ldr	r3, [pc, #360]	; (8002fa0 <UART_SetConfig+0x360>)
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e3a:	e011      	b.n	8002e60 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e3c:	f7ff fc8e 	bl	800275c <HAL_RCC_GetSysClockFreq>
 8002e40:	0003      	movs	r3, r0
 8002e42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e44:	e00c      	b.n	8002e60 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	021b      	lsls	r3, r3, #8
 8002e4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e4c:	e008      	b.n	8002e60 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002e52:	231a      	movs	r3, #26
 8002e54:	2220      	movs	r2, #32
 8002e56:	189b      	adds	r3, r3, r2
 8002e58:	19db      	adds	r3, r3, r7
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
        break;
 8002e5e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d100      	bne.n	8002e68 <UART_SetConfig+0x228>
 8002e66:	e147      	b.n	80030f8 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e6c:	4b4d      	ldr	r3, [pc, #308]	; (8002fa4 <UART_SetConfig+0x364>)
 8002e6e:	0052      	lsls	r2, r2, #1
 8002e70:	5ad3      	ldrh	r3, [r2, r3]
 8002e72:	0019      	movs	r1, r3
 8002e74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e76:	f7fd f945 	bl	8000104 <__udivsi3>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	0013      	movs	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	189b      	adds	r3, r3, r2
 8002e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d305      	bcc.n	8002e9a <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d906      	bls.n	8002ea8 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8002e9a:	231a      	movs	r3, #26
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	189b      	adds	r3, r3, r2
 8002ea0:	19db      	adds	r3, r3, r7
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e127      	b.n	80030f8 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eaa:	61bb      	str	r3, [r7, #24]
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eb4:	4b3b      	ldr	r3, [pc, #236]	; (8002fa4 <UART_SetConfig+0x364>)
 8002eb6:	0052      	lsls	r2, r2, #1
 8002eb8:	5ad3      	ldrh	r3, [r2, r3]
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	69b8      	ldr	r0, [r7, #24]
 8002ec6:	69f9      	ldr	r1, [r7, #28]
 8002ec8:	f7fd f9a8 	bl	800021c <__aeabi_uldivmod>
 8002ecc:	0002      	movs	r2, r0
 8002ece:	000b      	movs	r3, r1
 8002ed0:	0e11      	lsrs	r1, r2, #24
 8002ed2:	021d      	lsls	r5, r3, #8
 8002ed4:	430d      	orrs	r5, r1
 8002ed6:	0214      	lsls	r4, r2, #8
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	085b      	lsrs	r3, r3, #1
 8002ede:	60bb      	str	r3, [r7, #8]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68b8      	ldr	r0, [r7, #8]
 8002ee6:	68f9      	ldr	r1, [r7, #12]
 8002ee8:	1900      	adds	r0, r0, r4
 8002eea:	4169      	adcs	r1, r5
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	607b      	str	r3, [r7, #4]
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f7fd f98f 	bl	800021c <__aeabi_uldivmod>
 8002efe:	0002      	movs	r2, r0
 8002f00:	000b      	movs	r3, r1
 8002f02:	0013      	movs	r3, r2
 8002f04:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f08:	23c0      	movs	r3, #192	; 0xc0
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d309      	bcc.n	8002f24 <UART_SetConfig+0x2e4>
 8002f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	035b      	lsls	r3, r3, #13
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d204      	bcs.n	8002f24 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	e0e9      	b.n	80030f8 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8002f24:	231a      	movs	r3, #26
 8002f26:	2220      	movs	r2, #32
 8002f28:	189b      	adds	r3, r3, r2
 8002f2a:	19db      	adds	r3, r3, r7
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	e0e2      	b.n	80030f8 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	021b      	lsls	r3, r3, #8
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d000      	beq.n	8002f40 <UART_SetConfig+0x300>
 8002f3e:	e083      	b.n	8003048 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8002f40:	231b      	movs	r3, #27
 8002f42:	2220      	movs	r2, #32
 8002f44:	189b      	adds	r3, r3, r2
 8002f46:	19db      	adds	r3, r3, r7
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d015      	beq.n	8002f7a <UART_SetConfig+0x33a>
 8002f4e:	dc2b      	bgt.n	8002fa8 <UART_SetConfig+0x368>
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d00d      	beq.n	8002f70 <UART_SetConfig+0x330>
 8002f54:	dc28      	bgt.n	8002fa8 <UART_SetConfig+0x368>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x320>
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d005      	beq.n	8002f6a <UART_SetConfig+0x32a>
 8002f5e:	e023      	b.n	8002fa8 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f60:	f7ff fc88 	bl	8002874 <HAL_RCC_GetPCLK1Freq>
 8002f64:	0003      	movs	r3, r0
 8002f66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f68:	e027      	b.n	8002fba <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <UART_SetConfig+0x360>)
 8002f6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f6e:	e024      	b.n	8002fba <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f70:	f7ff fbf4 	bl	800275c <HAL_RCC_GetSysClockFreq>
 8002f74:	0003      	movs	r3, r0
 8002f76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f78:	e01f      	b.n	8002fba <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f80:	e01b      	b.n	8002fba <UART_SetConfig+0x37a>
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	cfff69f3 	.word	0xcfff69f3
 8002f88:	ffffcfff 	.word	0xffffcfff
 8002f8c:	40008000 	.word	0x40008000
 8002f90:	11fff4ff 	.word	0x11fff4ff
 8002f94:	40013800 	.word	0x40013800
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40004400 	.word	0x40004400
 8002fa0:	00f42400 	.word	0x00f42400
 8002fa4:	08003594 	.word	0x08003594
      default:
        pclk = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002fac:	231a      	movs	r3, #26
 8002fae:	2220      	movs	r2, #32
 8002fb0:	189b      	adds	r3, r3, r2
 8002fb2:	19db      	adds	r3, r3, r7
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	701a      	strb	r2, [r3, #0]
        break;
 8002fb8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d100      	bne.n	8002fc2 <UART_SetConfig+0x382>
 8002fc0:	e09a      	b.n	80030f8 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc6:	4b58      	ldr	r3, [pc, #352]	; (8003128 <UART_SetConfig+0x4e8>)
 8002fc8:	0052      	lsls	r2, r2, #1
 8002fca:	5ad3      	ldrh	r3, [r2, r3]
 8002fcc:	0019      	movs	r1, r3
 8002fce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002fd0:	f7fd f898 	bl	8000104 <__udivsi3>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	005a      	lsls	r2, r3, #1
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	18d2      	adds	r2, r2, r3
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	0010      	movs	r0, r2
 8002fe8:	f7fd f88c 	bl	8000104 <__udivsi3>
 8002fec:	0003      	movs	r3, r0
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff2:	2b0f      	cmp	r3, #15
 8002ff4:	d921      	bls.n	800303a <UART_SetConfig+0x3fa>
 8002ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	025b      	lsls	r3, r3, #9
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d21c      	bcs.n	800303a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	b29a      	uxth	r2, r3
 8003004:	200e      	movs	r0, #14
 8003006:	2420      	movs	r4, #32
 8003008:	1903      	adds	r3, r0, r4
 800300a:	19db      	adds	r3, r3, r7
 800300c:	210f      	movs	r1, #15
 800300e:	438a      	bics	r2, r1
 8003010:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	085b      	lsrs	r3, r3, #1
 8003016:	b29b      	uxth	r3, r3
 8003018:	2207      	movs	r2, #7
 800301a:	4013      	ands	r3, r2
 800301c:	b299      	uxth	r1, r3
 800301e:	1903      	adds	r3, r0, r4
 8003020:	19db      	adds	r3, r3, r7
 8003022:	1902      	adds	r2, r0, r4
 8003024:	19d2      	adds	r2, r2, r7
 8003026:	8812      	ldrh	r2, [r2, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	1902      	adds	r2, r0, r4
 8003032:	19d2      	adds	r2, r2, r7
 8003034:	8812      	ldrh	r2, [r2, #0]
 8003036:	60da      	str	r2, [r3, #12]
 8003038:	e05e      	b.n	80030f8 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800303a:	231a      	movs	r3, #26
 800303c:	2220      	movs	r2, #32
 800303e:	189b      	adds	r3, r3, r2
 8003040:	19db      	adds	r3, r3, r7
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e057      	b.n	80030f8 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003048:	231b      	movs	r3, #27
 800304a:	2220      	movs	r2, #32
 800304c:	189b      	adds	r3, r3, r2
 800304e:	19db      	adds	r3, r3, r7
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b08      	cmp	r3, #8
 8003054:	d015      	beq.n	8003082 <UART_SetConfig+0x442>
 8003056:	dc18      	bgt.n	800308a <UART_SetConfig+0x44a>
 8003058:	2b04      	cmp	r3, #4
 800305a:	d00d      	beq.n	8003078 <UART_SetConfig+0x438>
 800305c:	dc15      	bgt.n	800308a <UART_SetConfig+0x44a>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <UART_SetConfig+0x428>
 8003062:	2b02      	cmp	r3, #2
 8003064:	d005      	beq.n	8003072 <UART_SetConfig+0x432>
 8003066:	e010      	b.n	800308a <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003068:	f7ff fc04 	bl	8002874 <HAL_RCC_GetPCLK1Freq>
 800306c:	0003      	movs	r3, r0
 800306e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003070:	e014      	b.n	800309c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003072:	4b2e      	ldr	r3, [pc, #184]	; (800312c <UART_SetConfig+0x4ec>)
 8003074:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003076:	e011      	b.n	800309c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003078:	f7ff fb70 	bl	800275c <HAL_RCC_GetSysClockFreq>
 800307c:	0003      	movs	r3, r0
 800307e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003080:	e00c      	b.n	800309c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	021b      	lsls	r3, r3, #8
 8003086:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003088:	e008      	b.n	800309c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800308e:	231a      	movs	r3, #26
 8003090:	2220      	movs	r2, #32
 8003092:	189b      	adds	r3, r3, r2
 8003094:	19db      	adds	r3, r3, r7
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
        break;
 800309a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800309c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d02a      	beq.n	80030f8 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <UART_SetConfig+0x4e8>)
 80030a8:	0052      	lsls	r2, r2, #1
 80030aa:	5ad3      	ldrh	r3, [r2, r3]
 80030ac:	0019      	movs	r1, r3
 80030ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030b0:	f7fd f828 	bl	8000104 <__udivsi3>
 80030b4:	0003      	movs	r3, r0
 80030b6:	001a      	movs	r2, r3
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	085b      	lsrs	r3, r3, #1
 80030be:	18d2      	adds	r2, r2, r3
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	0019      	movs	r1, r3
 80030c6:	0010      	movs	r0, r2
 80030c8:	f7fd f81c 	bl	8000104 <__udivsi3>
 80030cc:	0003      	movs	r3, r0
 80030ce:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	2b0f      	cmp	r3, #15
 80030d4:	d90a      	bls.n	80030ec <UART_SetConfig+0x4ac>
 80030d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	025b      	lsls	r3, r3, #9
 80030dc:	429a      	cmp	r2, r3
 80030de:	d205      	bcs.n	80030ec <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	e005      	b.n	80030f8 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80030ec:	231a      	movs	r3, #26
 80030ee:	2220      	movs	r2, #32
 80030f0:	189b      	adds	r3, r3, r2
 80030f2:	19db      	adds	r3, r3, r7
 80030f4:	2201      	movs	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	226a      	movs	r2, #106	; 0x6a
 80030fc:	2101      	movs	r1, #1
 80030fe:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	2268      	movs	r2, #104	; 0x68
 8003104:	2101      	movs	r1, #1
 8003106:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	2200      	movs	r2, #0
 800310c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	2200      	movs	r2, #0
 8003112:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003114:	231a      	movs	r3, #26
 8003116:	2220      	movs	r2, #32
 8003118:	189b      	adds	r3, r3, r2
 800311a:	19db      	adds	r3, r3, r7
 800311c:	781b      	ldrb	r3, [r3, #0]
}
 800311e:	0018      	movs	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	b010      	add	sp, #64	; 0x40
 8003124:	bdb0      	pop	{r4, r5, r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	08003594 	.word	0x08003594
 800312c:	00f42400 	.word	0x00f42400

08003130 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	2201      	movs	r2, #1
 800313e:	4013      	ands	r3, r2
 8003140:	d00b      	beq.n	800315a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a4a      	ldr	r2, [pc, #296]	; (8003274 <UART_AdvFeatureConfig+0x144>)
 800314a:	4013      	ands	r3, r2
 800314c:	0019      	movs	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	2202      	movs	r2, #2
 8003160:	4013      	ands	r3, r2
 8003162:	d00b      	beq.n	800317c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4a43      	ldr	r2, [pc, #268]	; (8003278 <UART_AdvFeatureConfig+0x148>)
 800316c:	4013      	ands	r3, r2
 800316e:	0019      	movs	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	2204      	movs	r2, #4
 8003182:	4013      	ands	r3, r2
 8003184:	d00b      	beq.n	800319e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4a3b      	ldr	r2, [pc, #236]	; (800327c <UART_AdvFeatureConfig+0x14c>)
 800318e:	4013      	ands	r3, r2
 8003190:	0019      	movs	r1, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	2208      	movs	r2, #8
 80031a4:	4013      	ands	r3, r2
 80031a6:	d00b      	beq.n	80031c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4a34      	ldr	r2, [pc, #208]	; (8003280 <UART_AdvFeatureConfig+0x150>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	0019      	movs	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	2210      	movs	r2, #16
 80031c6:	4013      	ands	r3, r2
 80031c8:	d00b      	beq.n	80031e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4a2c      	ldr	r2, [pc, #176]	; (8003284 <UART_AdvFeatureConfig+0x154>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	0019      	movs	r1, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	2220      	movs	r2, #32
 80031e8:	4013      	ands	r3, r2
 80031ea:	d00b      	beq.n	8003204 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	4a25      	ldr	r2, [pc, #148]	; (8003288 <UART_AdvFeatureConfig+0x158>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	0019      	movs	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	2240      	movs	r2, #64	; 0x40
 800320a:	4013      	ands	r3, r2
 800320c:	d01d      	beq.n	800324a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4a1d      	ldr	r2, [pc, #116]	; (800328c <UART_AdvFeatureConfig+0x15c>)
 8003216:	4013      	ands	r3, r2
 8003218:	0019      	movs	r1, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	035b      	lsls	r3, r3, #13
 800322e:	429a      	cmp	r2, r3
 8003230:	d10b      	bne.n	800324a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4a15      	ldr	r2, [pc, #84]	; (8003290 <UART_AdvFeatureConfig+0x160>)
 800323a:	4013      	ands	r3, r2
 800323c:	0019      	movs	r1, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	2280      	movs	r2, #128	; 0x80
 8003250:	4013      	ands	r3, r2
 8003252:	d00b      	beq.n	800326c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4a0e      	ldr	r2, [pc, #56]	; (8003294 <UART_AdvFeatureConfig+0x164>)
 800325c:	4013      	ands	r3, r2
 800325e:	0019      	movs	r1, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	605a      	str	r2, [r3, #4]
  }
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b002      	add	sp, #8
 8003272:	bd80      	pop	{r7, pc}
 8003274:	fffdffff 	.word	0xfffdffff
 8003278:	fffeffff 	.word	0xfffeffff
 800327c:	fffbffff 	.word	0xfffbffff
 8003280:	ffff7fff 	.word	0xffff7fff
 8003284:	ffffefff 	.word	0xffffefff
 8003288:	ffffdfff 	.word	0xffffdfff
 800328c:	ffefffff 	.word	0xffefffff
 8003290:	ff9fffff 	.word	0xff9fffff
 8003294:	fff7ffff 	.word	0xfff7ffff

08003298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af02      	add	r7, sp, #8
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2290      	movs	r2, #144	; 0x90
 80032a4:	2100      	movs	r1, #0
 80032a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032a8:	f7fd fbdc 	bl	8000a64 <HAL_GetTick>
 80032ac:	0003      	movs	r3, r0
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2208      	movs	r2, #8
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d10c      	bne.n	80032d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2280      	movs	r2, #128	; 0x80
 80032c2:	0391      	lsls	r1, r2, #14
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	4a1a      	ldr	r2, [pc, #104]	; (8003330 <UART_CheckIdleState+0x98>)
 80032c8:	9200      	str	r2, [sp, #0]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f000 f832 	bl	8003334 <UART_WaitOnFlagUntilTimeout>
 80032d0:	1e03      	subs	r3, r0, #0
 80032d2:	d001      	beq.n	80032d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e026      	b.n	8003326 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2204      	movs	r2, #4
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d10c      	bne.n	8003300 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2280      	movs	r2, #128	; 0x80
 80032ea:	03d1      	lsls	r1, r2, #15
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4a10      	ldr	r2, [pc, #64]	; (8003330 <UART_CheckIdleState+0x98>)
 80032f0:	9200      	str	r2, [sp, #0]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f000 f81e 	bl	8003334 <UART_WaitOnFlagUntilTimeout>
 80032f8:	1e03      	subs	r3, r0, #0
 80032fa:	d001      	beq.n	8003300 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e012      	b.n	8003326 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2288      	movs	r2, #136	; 0x88
 8003304:	2120      	movs	r1, #32
 8003306:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	228c      	movs	r2, #140	; 0x8c
 800330c:	2120      	movs	r1, #32
 800330e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2284      	movs	r2, #132	; 0x84
 8003320:	2100      	movs	r1, #0
 8003322:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b004      	add	sp, #16
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	01ffffff 	.word	0x01ffffff

08003334 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b094      	sub	sp, #80	; 0x50
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	1dfb      	adds	r3, r7, #7
 8003342:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003344:	e0a7      	b.n	8003496 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003348:	3301      	adds	r3, #1
 800334a:	d100      	bne.n	800334e <UART_WaitOnFlagUntilTimeout+0x1a>
 800334c:	e0a3      	b.n	8003496 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334e:	f7fd fb89 	bl	8000a64 <HAL_GetTick>
 8003352:	0002      	movs	r2, r0
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <UART_WaitOnFlagUntilTimeout+0x30>
 800335e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003360:	2b00      	cmp	r3, #0
 8003362:	d13f      	bne.n	80033e4 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003364:	f3ef 8310 	mrs	r3, PRIMASK
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800336c:	647b      	str	r3, [r7, #68]	; 0x44
 800336e:	2301      	movs	r3, #1
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	f383 8810 	msr	PRIMASK, r3
}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	494e      	ldr	r1, [pc, #312]	; (80034c0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003386:	400a      	ands	r2, r1
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800338c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	f383 8810 	msr	PRIMASK, r3
}
 8003394:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003396:	f3ef 8310 	mrs	r3, PRIMASK
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800339c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339e:	643b      	str	r3, [r7, #64]	; 0x40
 80033a0:	2301      	movs	r3, #1
 80033a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a6:	f383 8810 	msr	PRIMASK, r3
}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2101      	movs	r1, #1
 80033b8:	438a      	bics	r2, r1
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033be:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c2:	f383 8810 	msr	PRIMASK, r3
}
 80033c6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2288      	movs	r2, #136	; 0x88
 80033cc:	2120      	movs	r1, #32
 80033ce:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	228c      	movs	r2, #140	; 0x8c
 80033d4:	2120      	movs	r1, #32
 80033d6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2284      	movs	r2, #132	; 0x84
 80033dc:	2100      	movs	r1, #0
 80033de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e069      	b.n	80034b8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2204      	movs	r2, #4
 80033ec:	4013      	ands	r3, r2
 80033ee:	d052      	beq.n	8003496 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	69da      	ldr	r2, [r3, #28]
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	401a      	ands	r2, r3
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	429a      	cmp	r2, r3
 8003402:	d148      	bne.n	8003496 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2280      	movs	r2, #128	; 0x80
 800340a:	0112      	lsls	r2, r2, #4
 800340c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800340e:	f3ef 8310 	mrs	r3, PRIMASK
 8003412:	613b      	str	r3, [r7, #16]
  return(result);
 8003414:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003418:	2301      	movs	r3, #1
 800341a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f383 8810 	msr	PRIMASK, r3
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4924      	ldr	r1, [pc, #144]	; (80034c0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003430:	400a      	ands	r2, r1
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003436:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f383 8810 	msr	PRIMASK, r3
}
 800343e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003440:	f3ef 8310 	mrs	r3, PRIMASK
 8003444:	61fb      	str	r3, [r7, #28]
  return(result);
 8003446:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003448:	64bb      	str	r3, [r7, #72]	; 0x48
 800344a:	2301      	movs	r3, #1
 800344c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	f383 8810 	msr	PRIMASK, r3
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2101      	movs	r1, #1
 8003462:	438a      	bics	r2, r1
 8003464:	609a      	str	r2, [r3, #8]
 8003466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	f383 8810 	msr	PRIMASK, r3
}
 8003470:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2288      	movs	r2, #136	; 0x88
 8003476:	2120      	movs	r1, #32
 8003478:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	228c      	movs	r2, #140	; 0x8c
 800347e:	2120      	movs	r1, #32
 8003480:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2290      	movs	r2, #144	; 0x90
 8003486:	2120      	movs	r1, #32
 8003488:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2284      	movs	r2, #132	; 0x84
 800348e:	2100      	movs	r1, #0
 8003490:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e010      	b.n	80034b8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	4013      	ands	r3, r2
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	425a      	negs	r2, r3
 80034a6:	4153      	adcs	r3, r2
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	001a      	movs	r2, r3
 80034ac:	1dfb      	adds	r3, r7, #7
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d100      	bne.n	80034b6 <UART_WaitOnFlagUntilTimeout+0x182>
 80034b4:	e747      	b.n	8003346 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	0018      	movs	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b014      	add	sp, #80	; 0x50
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	fffffe5f 	.word	0xfffffe5f

080034c4 <__libc_init_array>:
 80034c4:	b570      	push	{r4, r5, r6, lr}
 80034c6:	2600      	movs	r6, #0
 80034c8:	4d0c      	ldr	r5, [pc, #48]	; (80034fc <__libc_init_array+0x38>)
 80034ca:	4c0d      	ldr	r4, [pc, #52]	; (8003500 <__libc_init_array+0x3c>)
 80034cc:	1b64      	subs	r4, r4, r5
 80034ce:	10a4      	asrs	r4, r4, #2
 80034d0:	42a6      	cmp	r6, r4
 80034d2:	d109      	bne.n	80034e8 <__libc_init_array+0x24>
 80034d4:	2600      	movs	r6, #0
 80034d6:	f000 f821 	bl	800351c <_init>
 80034da:	4d0a      	ldr	r5, [pc, #40]	; (8003504 <__libc_init_array+0x40>)
 80034dc:	4c0a      	ldr	r4, [pc, #40]	; (8003508 <__libc_init_array+0x44>)
 80034de:	1b64      	subs	r4, r4, r5
 80034e0:	10a4      	asrs	r4, r4, #2
 80034e2:	42a6      	cmp	r6, r4
 80034e4:	d105      	bne.n	80034f2 <__libc_init_array+0x2e>
 80034e6:	bd70      	pop	{r4, r5, r6, pc}
 80034e8:	00b3      	lsls	r3, r6, #2
 80034ea:	58eb      	ldr	r3, [r5, r3]
 80034ec:	4798      	blx	r3
 80034ee:	3601      	adds	r6, #1
 80034f0:	e7ee      	b.n	80034d0 <__libc_init_array+0xc>
 80034f2:	00b3      	lsls	r3, r6, #2
 80034f4:	58eb      	ldr	r3, [r5, r3]
 80034f6:	4798      	blx	r3
 80034f8:	3601      	adds	r6, #1
 80034fa:	e7f2      	b.n	80034e2 <__libc_init_array+0x1e>
 80034fc:	080035b4 	.word	0x080035b4
 8003500:	080035b4 	.word	0x080035b4
 8003504:	080035b4 	.word	0x080035b4
 8003508:	080035b8 	.word	0x080035b8

0800350c <memset>:
 800350c:	0003      	movs	r3, r0
 800350e:	1882      	adds	r2, r0, r2
 8003510:	4293      	cmp	r3, r2
 8003512:	d100      	bne.n	8003516 <memset+0xa>
 8003514:	4770      	bx	lr
 8003516:	7019      	strb	r1, [r3, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	e7f9      	b.n	8003510 <memset+0x4>

0800351c <_init>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003522:	bc08      	pop	{r3}
 8003524:	469e      	mov	lr, r3
 8003526:	4770      	bx	lr

08003528 <_fini>:
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352e:	bc08      	pop	{r3}
 8003530:	469e      	mov	lr, r3
 8003532:	4770      	bx	lr
