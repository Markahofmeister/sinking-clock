
sinking-clock_master_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061b8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08006274  08006274  00007274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006718  08006718  000080a8  2**0
                  CONTENTS
  4 .ARM          00000008  08006718  08006718  00007718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006720  08006720  000080a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006720  08006720  00007720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006724  08006724  00007724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08006728  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  200000a8  080067d0  000080a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  080067d0  000083d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138ab  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bae  00000000  00000000  0001b97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  0001e530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de5  00000000  00000000  0001f700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f36  00000000  00000000  000204e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160fd  00000000  00000000  0003941b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b767  00000000  00000000  0004f518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eac7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000474c  00000000  00000000  000eacc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ef410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000a8 	.word	0x200000a8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800625c 	.word	0x0800625c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000ac 	.word	0x200000ac
 8000100:	0800625c 	.word	0x0800625c

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	d434      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a6:	469b      	mov	fp, r3
 80002a8:	4653      	mov	r3, sl
 80002aa:	465a      	mov	r2, fp
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83b      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e079      	b.n	80003b6 <__udivmoddi4+0x146>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e076      	b.n	80003bc <__udivmoddi4+0x14c>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e029      	b.n	800033c <__udivmoddi4+0xcc>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	469b      	mov	fp, r3
 8000314:	2320      	movs	r3, #32
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	4652      	mov	r2, sl
 800031a:	40da      	lsrs	r2, r3
 800031c:	4641      	mov	r1, r8
 800031e:	0013      	movs	r3, r2
 8000320:	464a      	mov	r2, r9
 8000322:	408a      	lsls	r2, r1
 8000324:	0017      	movs	r7, r2
 8000326:	4642      	mov	r2, r8
 8000328:	431f      	orrs	r7, r3
 800032a:	4653      	mov	r3, sl
 800032c:	4093      	lsls	r3, r2
 800032e:	001e      	movs	r6, r3
 8000330:	42af      	cmp	r7, r5
 8000332:	d9c3      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	4643      	mov	r3, r8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0d8      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000342:	07fb      	lsls	r3, r7, #31
 8000344:	0872      	lsrs	r2, r6, #1
 8000346:	431a      	orrs	r2, r3
 8000348:	4646      	mov	r6, r8
 800034a:	087b      	lsrs	r3, r7, #1
 800034c:	e00e      	b.n	800036c <__udivmoddi4+0xfc>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d101      	bne.n	8000356 <__udivmoddi4+0xe6>
 8000352:	42a2      	cmp	r2, r4
 8000354:	d80c      	bhi.n	8000370 <__udivmoddi4+0x100>
 8000356:	1aa4      	subs	r4, r4, r2
 8000358:	419d      	sbcs	r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2100      	movs	r1, #0
 8000362:	3e01      	subs	r6, #1
 8000364:	1824      	adds	r4, r4, r0
 8000366:	414d      	adcs	r5, r1
 8000368:	2e00      	cmp	r6, #0
 800036a:	d006      	beq.n	800037a <__udivmoddi4+0x10a>
 800036c:	42ab      	cmp	r3, r5
 800036e:	d9ee      	bls.n	800034e <__udivmoddi4+0xde>
 8000370:	3e01      	subs	r6, #1
 8000372:	1924      	adds	r4, r4, r4
 8000374:	416d      	adcs	r5, r5
 8000376:	2e00      	cmp	r6, #0
 8000378:	d1f8      	bne.n	800036c <__udivmoddi4+0xfc>
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	465b      	mov	r3, fp
 8000380:	1900      	adds	r0, r0, r4
 8000382:	4169      	adcs	r1, r5
 8000384:	2b00      	cmp	r3, #0
 8000386:	db24      	blt.n	80003d2 <__udivmoddi4+0x162>
 8000388:	002b      	movs	r3, r5
 800038a:	465a      	mov	r2, fp
 800038c:	4644      	mov	r4, r8
 800038e:	40d3      	lsrs	r3, r2
 8000390:	002a      	movs	r2, r5
 8000392:	40e2      	lsrs	r2, r4
 8000394:	001c      	movs	r4, r3
 8000396:	465b      	mov	r3, fp
 8000398:	0015      	movs	r5, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	db2a      	blt.n	80003f4 <__udivmoddi4+0x184>
 800039e:	0026      	movs	r6, r4
 80003a0:	409e      	lsls	r6, r3
 80003a2:	0033      	movs	r3, r6
 80003a4:	0026      	movs	r6, r4
 80003a6:	4647      	mov	r7, r8
 80003a8:	40be      	lsls	r6, r7
 80003aa:	0032      	movs	r2, r6
 80003ac:	1a80      	subs	r0, r0, r2
 80003ae:	4199      	sbcs	r1, r3
 80003b0:	9000      	str	r0, [sp, #0]
 80003b2:	9101      	str	r1, [sp, #4]
 80003b4:	e79e      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b6:	42a3      	cmp	r3, r4
 80003b8:	d8bc      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80003ba:	e782      	b.n	80002c2 <__udivmoddi4+0x52>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	2100      	movs	r1, #0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	9100      	str	r1, [sp, #0]
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	e785      	b.n	80002de <__udivmoddi4+0x6e>
 80003d2:	4642      	mov	r2, r8
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	002a      	movs	r2, r5
 80003da:	4646      	mov	r6, r8
 80003dc:	409a      	lsls	r2, r3
 80003de:	0023      	movs	r3, r4
 80003e0:	40f3      	lsrs	r3, r6
 80003e2:	4644      	mov	r4, r8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	002a      	movs	r2, r5
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	001c      	movs	r4, r3
 80003ec:	465b      	mov	r3, fp
 80003ee:	0015      	movs	r5, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	dad4      	bge.n	800039e <__udivmoddi4+0x12e>
 80003f4:	4642      	mov	r2, r8
 80003f6:	002f      	movs	r7, r5
 80003f8:	2320      	movs	r3, #32
 80003fa:	0026      	movs	r6, r4
 80003fc:	4097      	lsls	r7, r2
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	40de      	lsrs	r6, r3
 8000402:	003b      	movs	r3, r7
 8000404:	4333      	orrs	r3, r6
 8000406:	e7cd      	b.n	80003a4 <__udivmoddi4+0x134>

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	@ (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <getRTCTime>:
				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
	}

}

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000468:	68b9      	ldr	r1, [r7, #8]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	2200      	movs	r2, #0
 800046e:	0018      	movs	r0, r3
 8000470:	f002 ff64 	bl	800333c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000474:	6879      	ldr	r1, [r7, #4]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2200      	movs	r2, #0
 800047a:	0018      	movs	r0, r3
 800047c:	f003 f84c 	bl	8003518 <HAL_RTC_GetDate>

}
 8000480:	46c0      	nop			@ (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b004      	add	sp, #16
 8000486:	bd80      	pop	{r7, pc}

08000488 <capTouchTrigger>:
 *      Author: marka
 */

#include "../Inc/ctouch.h"

bool capTouchTrigger(uint8_t buttonPin) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	0002      	movs	r2, r0
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, buttonPin) == GPIO_PIN_RESET) {		// If button is low, cap. touch has triggered.
 8000494:	1dfb      	adds	r3, r7, #7
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	b29a      	uxth	r2, r3
 800049a:	23a0      	movs	r3, #160	@ 0xa0
 800049c:	05db      	lsls	r3, r3, #23
 800049e:	0011      	movs	r1, r2
 80004a0:	0018      	movs	r0, r3
 80004a2:	f001 feb5 	bl	8002210 <HAL_GPIO_ReadPin>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d101      	bne.n	80004ae <capTouchTrigger+0x26>
		return true;
 80004aa:	2301      	movs	r3, #1
 80004ac:	e000      	b.n	80004b0 <capTouchTrigger+0x28>
		printf("Cap. touch triggered.\n\r");
	}

	return false;
 80004ae:	2300      	movs	r3, #0

}
 80004b0:	0018      	movs	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b002      	add	sp, #8
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80004c0:	2301      	movs	r3, #1
 80004c2:	425b      	negs	r3, r3
 80004c4:	1d39      	adds	r1, r7, #4
 80004c6:	4804      	ldr	r0, [pc, #16]	@ (80004d8 <__io_putchar+0x20>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	f004 fa87 	bl	80049dc <HAL_UART_Transmit>
  return ch;
 80004ce:	687b      	ldr	r3, [r7, #4]
}
 80004d0:	0018      	movs	r0, r3
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	2000018c 	.word	0x2000018c

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004de:	b087      	sub	sp, #28
 80004e0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f001 fbcd 	bl	8001c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f85f 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 fa89 	bl	8000a00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 fa53 	bl	8000998 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80004f2:	f000 f8af 	bl	8000654 <MX_RTC_Init>
  MX_TIM16_Init();
 80004f6:	f000 fa27 	bl	8000948 <MX_TIM16_Init>
  MX_TIM1_Init();
 80004fa:	f000 f97b 	bl	80007f4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  displayToggle = 2; 		// Display at 100% intensity for next display toggle
 80004fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000574 <main+0x98>)
 8000500:	2202      	movs	r2, #2
 8000502:	701a      	strb	r2, [r3, #0]

  // Initialize all GPIOs to be used with 7 segment display
  sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000504:	4b1c      	ldr	r3, [pc, #112]	@ (8000578 <main+0x9c>)
 8000506:	8818      	ldrh	r0, [r3, #0]
 8000508:	4b1c      	ldr	r3, [pc, #112]	@ (800057c <main+0xa0>)
 800050a:	881c      	ldrh	r4, [r3, #0]
 800050c:	4b1c      	ldr	r3, [pc, #112]	@ (8000580 <main+0xa4>)
 800050e:	881d      	ldrh	r5, [r3, #0]
 8000510:	4b1c      	ldr	r3, [pc, #112]	@ (8000584 <main+0xa8>)
 8000512:	881e      	ldrh	r6, [r3, #0]
 8000514:	4b1c      	ldr	r3, [pc, #112]	@ (8000588 <main+0xac>)
 8000516:	881a      	ldrh	r2, [r3, #0]
 8000518:	4b1c      	ldr	r3, [pc, #112]	@ (800058c <main+0xb0>)
 800051a:	6819      	ldr	r1, [r3, #0]
 800051c:	4b1c      	ldr	r3, [pc, #112]	@ (8000590 <main+0xb4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	9303      	str	r3, [sp, #12]
 8000522:	9102      	str	r1, [sp, #8]
 8000524:	4b1b      	ldr	r3, [pc, #108]	@ (8000594 <main+0xb8>)
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	0033      	movs	r3, r6
 800052c:	002a      	movs	r2, r5
 800052e:	0021      	movs	r1, r4
 8000530:	f000 ff5c 	bl	80013ec <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, timerDelay, timerPWM);

  	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 8000534:	1dfc      	adds	r4, r7, #7
 8000536:	f000 fb47 	bl	8000bc8 <updateAndDisplayTime>
 800053a:	0003      	movs	r3, r0
 800053c:	7023      	strb	r3, [r4, #0]

  	if(halRet != HAL_OK) {		//check HAL
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d004      	beq.n	8000550 <main+0x74>
  		printf("HAL Error - TX current time\n\r");
 8000546:	4b14      	ldr	r3, [pc, #80]	@ (8000598 <main+0xbc>)
 8000548:	0018      	movs	r0, r3
 800054a:	f004 ffe9 	bl	8005520 <iprintf>
 800054e:	e003      	b.n	8000558 <main+0x7c>
  	} else {
  		printf("Display Updated with current time\n\r");
 8000550:	4b12      	ldr	r3, [pc, #72]	@ (800059c <main+0xc0>)
 8000552:	0018      	movs	r0, r3
 8000554:	f004 ffe4 	bl	8005520 <iprintf>
  	}

  userAlarmToggle = false;			//Default to off
 8000558:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <main+0xc4>)
 800055a:	2200      	movs	r2, #0
 800055c:	701a      	strb	r2, [r3, #0]

  // User alarm default value
  userAlarmTime.Hours = 1;
 800055e:	4b11      	ldr	r3, [pc, #68]	@ (80005a4 <main+0xc8>)
 8000560:	2201      	movs	r2, #1
 8000562:	701a      	strb	r2, [r3, #0]
  userAlarmTime.Minutes = 1;
 8000564:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <main+0xc8>)
 8000566:	2201      	movs	r2, #1
 8000568:	705a      	strb	r2, [r3, #1]
  userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800056a:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <main+0xc8>)
 800056c:	2200      	movs	r2, #0
 800056e:	70da      	strb	r2, [r3, #3]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000570:	46c0      	nop			@ (mov r8, r8)
 8000572:	e7fd      	b.n	8000570 <main+0x94>
 8000574:	200000c4 	.word	0x200000c4
 8000578:	20000000 	.word	0x20000000
 800057c:	20000002 	.word	0x20000002
 8000580:	20000004 	.word	0x20000004
 8000584:	20000006 	.word	0x20000006
 8000588:	20000008 	.word	0x20000008
 800058c:	20000024 	.word	0x20000024
 8000590:	20000020 	.word	0x20000020
 8000594:	2000000c 	.word	0x2000000c
 8000598:	08006274 	.word	0x08006274
 800059c:	08006294 	.word	0x08006294
 80005a0:	200000c5 	.word	0x200000c5
 80005a4:	20000260 	.word	0x20000260

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b093      	sub	sp, #76	@ 0x4c
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	2410      	movs	r4, #16
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	0018      	movs	r0, r3
 80005b4:	2338      	movs	r3, #56	@ 0x38
 80005b6:	001a      	movs	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	f005 f80d 	bl	80055d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005be:	003b      	movs	r3, r7
 80005c0:	0018      	movs	r0, r3
 80005c2:	2310      	movs	r3, #16
 80005c4:	001a      	movs	r2, r3
 80005c6:	2100      	movs	r1, #0
 80005c8:	f005 f806 	bl	80055d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2380      	movs	r3, #128	@ 0x80
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	0018      	movs	r0, r3
 80005d2:	f001 feb5 	bl	8002340 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005d6:	f001 fea5 	bl	8002324 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005da:	4b1d      	ldr	r3, [pc, #116]	@ (8000650 <SystemClock_Config+0xa8>)
 80005dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80005de:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <SystemClock_Config+0xa8>)
 80005e0:	2118      	movs	r1, #24
 80005e2:	438a      	bics	r2, r1
 80005e4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	2206      	movs	r2, #6
 80005ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	2201      	movs	r2, #1
 80005f0:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	2280      	movs	r2, #128	@ 0x80
 80005f6:	0052      	lsls	r2, r2, #1
 80005f8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	193b      	adds	r3, r7, r4
 8000602:	2240      	movs	r2, #64	@ 0x40
 8000604:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000606:	193b      	adds	r3, r7, r4
 8000608:	2200      	movs	r2, #0
 800060a:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	193b      	adds	r3, r7, r4
 800060e:	0018      	movs	r0, r3
 8000610:	f001 ff0c 	bl	800242c <HAL_RCC_OscConfig>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000618:	f000 fee2 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	003b      	movs	r3, r7
 800061e:	2207      	movs	r2, #7
 8000620:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000622:	003b      	movs	r3, r7
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	003b      	movs	r3, r7
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062e:	003b      	movs	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000634:	003b      	movs	r3, r7
 8000636:	2100      	movs	r1, #0
 8000638:	0018      	movs	r0, r3
 800063a:	f002 fa11 	bl	8002a60 <HAL_RCC_ClockConfig>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000642:	f000 fecd 	bl	80013e0 <Error_Handler>
  }
}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b013      	add	sp, #76	@ 0x4c
 800064c:	bd90      	pop	{r4, r7, pc}
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	40021000 	.word	0x40021000

08000654 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b091      	sub	sp, #68	@ 0x44
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800065a:	232c      	movs	r3, #44	@ 0x2c
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	0018      	movs	r0, r3
 8000660:	2314      	movs	r3, #20
 8000662:	001a      	movs	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f004 ffb7 	bl	80055d8 <memset>
  RTC_DateTypeDef sDate = {0};
 800066a:	2328      	movs	r3, #40	@ 0x28
 800066c:	18fb      	adds	r3, r7, r3
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000672:	003b      	movs	r3, r7
 8000674:	0018      	movs	r0, r3
 8000676:	2328      	movs	r3, #40	@ 0x28
 8000678:	001a      	movs	r2, r3
 800067a:	2100      	movs	r1, #0
 800067c:	f004 ffac 	bl	80055d8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000680:	4b55      	ldr	r3, [pc, #340]	@ (80007d8 <MX_RTC_Init+0x184>)
 8000682:	4a56      	ldr	r2, [pc, #344]	@ (80007dc <MX_RTC_Init+0x188>)
 8000684:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000686:	4b54      	ldr	r3, [pc, #336]	@ (80007d8 <MX_RTC_Init+0x184>)
 8000688:	2240      	movs	r2, #64	@ 0x40
 800068a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800068c:	4b52      	ldr	r3, [pc, #328]	@ (80007d8 <MX_RTC_Init+0x184>)
 800068e:	227f      	movs	r2, #127	@ 0x7f
 8000690:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000692:	4b51      	ldr	r3, [pc, #324]	@ (80007d8 <MX_RTC_Init+0x184>)
 8000694:	22ff      	movs	r2, #255	@ 0xff
 8000696:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000698:	4b4f      	ldr	r3, [pc, #316]	@ (80007d8 <MX_RTC_Init+0x184>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800069e:	4b4e      	ldr	r3, [pc, #312]	@ (80007d8 <MX_RTC_Init+0x184>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006a4:	4b4c      	ldr	r3, [pc, #304]	@ (80007d8 <MX_RTC_Init+0x184>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006aa:	4b4b      	ldr	r3, [pc, #300]	@ (80007d8 <MX_RTC_Init+0x184>)
 80006ac:	2280      	movs	r2, #128	@ 0x80
 80006ae:	05d2      	lsls	r2, r2, #23
 80006b0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80006b2:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <MX_RTC_Init+0x184>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006b8:	4b47      	ldr	r3, [pc, #284]	@ (80007d8 <MX_RTC_Init+0x184>)
 80006ba:	0018      	movs	r0, r3
 80006bc:	f002 fcf4 	bl	80030a8 <HAL_RTC_Init>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80006c4:	f000 fe8c 	bl	80013e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 80006c8:	212c      	movs	r1, #44	@ 0x2c
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2200      	movs	r2, #0
 80006d4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80006f4:	1879      	adds	r1, r7, r1
 80006f6:	4b38      	ldr	r3, [pc, #224]	@ (80007d8 <MX_RTC_Init+0x184>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	0018      	movs	r0, r3
 80006fc:	f002 fd76 	bl	80031ec <HAL_RTC_SetTime>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000704:	f000 fe6c 	bl	80013e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000708:	2128      	movs	r1, #40	@ 0x28
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2201      	movs	r2, #1
 8000714:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2201      	movs	r2, #1
 800071a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000722:	1879      	adds	r1, r7, r1
 8000724:	4b2c      	ldr	r3, [pc, #176]	@ (80007d8 <MX_RTC_Init+0x184>)
 8000726:	2200      	movs	r2, #0
 8000728:	0018      	movs	r0, r3
 800072a:	f002 fe63 	bl	80033f4 <HAL_RTC_SetDate>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d001      	beq.n	8000736 <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 8000732:	f000 fe55 	bl	80013e0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 1;
 8000736:	003b      	movs	r3, r7
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 1;
 800073c:	003b      	movs	r3, r7
 800073e:	2201      	movs	r2, #1
 8000740:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8000742:	003b      	movs	r3, r7
 8000744:	2200      	movs	r2, #0
 8000746:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000748:	003b      	movs	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800074e:	003b      	movs	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000754:	003b      	movs	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800075a:	003b      	movs	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000760:	003b      	movs	r3, r7
 8000762:	4a1f      	ldr	r2, [pc, #124]	@ (80007e0 <MX_RTC_Init+0x18c>)
 8000764:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000766:	003b      	movs	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800076c:	003b      	movs	r3, r7
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000772:	003b      	movs	r3, r7
 8000774:	2220      	movs	r2, #32
 8000776:	2101      	movs	r1, #1
 8000778:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800077a:	003b      	movs	r3, r7
 800077c:	2280      	movs	r2, #128	@ 0x80
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000782:	0039      	movs	r1, r7
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_RTC_Init+0x184>)
 8000786:	2200      	movs	r2, #0
 8000788:	0018      	movs	r0, r3
 800078a:	f002 ff13 	bl	80035b4 <HAL_RTC_SetAlarm_IT>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <MX_RTC_Init+0x142>
  {
    Error_Handler();
 8000792:	f000 fe25 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  currTime = sTime;
 8000796:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <MX_RTC_Init+0x190>)
 8000798:	222c      	movs	r2, #44	@ 0x2c
 800079a:	18ba      	adds	r2, r7, r2
 800079c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800079e:	c313      	stmia	r3!, {r0, r1, r4}
 80007a0:	ca03      	ldmia	r2!, {r0, r1}
 80007a2:	c303      	stmia	r3!, {r0, r1}
  currDate = sDate;
 80007a4:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <MX_RTC_Init+0x194>)
 80007a6:	2228      	movs	r2, #40	@ 0x28
 80007a8:	18ba      	adds	r2, r7, r2
 80007aa:	6812      	ldr	r2, [r2, #0]
 80007ac:	601a      	str	r2, [r3, #0]
  userAlarmObj = sAlarm;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_RTC_Init+0x198>)
 80007b0:	003a      	movs	r2, r7
 80007b2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007b4:	c313      	stmia	r3!, {r0, r1, r4}
 80007b6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007b8:	c313      	stmia	r3!, {r0, r1, r4}
 80007ba:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007bc:	c313      	stmia	r3!, {r0, r1, r4}
 80007be:	6812      	ldr	r2, [r2, #0]
 80007c0:	601a      	str	r2, [r3, #0]
  userAlarmTime = userAlarmObj.AlarmTime;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_RTC_Init+0x19c>)
 80007c4:	4a09      	ldr	r2, [pc, #36]	@ (80007ec <MX_RTC_Init+0x198>)
 80007c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007c8:	c313      	stmia	r3!, {r0, r1, r4}
 80007ca:	ca03      	ldmia	r2!, {r0, r1}
 80007cc:	c303      	stmia	r3!, {r0, r1}

  /* USER CODE END RTC_Init 2 */

}
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b011      	add	sp, #68	@ 0x44
 80007d4:	bd90      	pop	{r4, r7, pc}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	200000c8 	.word	0x200000c8
 80007dc:	40002800 	.word	0x40002800
 80007e0:	80800080 	.word	0x80800080
 80007e4:	20000220 	.word	0x20000220
 80007e8:	20000234 	.word	0x20000234
 80007ec:	20000238 	.word	0x20000238
 80007f0:	20000260 	.word	0x20000260

080007f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b098      	sub	sp, #96	@ 0x60
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fa:	2354      	movs	r3, #84	@ 0x54
 80007fc:	18fb      	adds	r3, r7, r3
 80007fe:	0018      	movs	r0, r3
 8000800:	230c      	movs	r3, #12
 8000802:	001a      	movs	r2, r3
 8000804:	2100      	movs	r1, #0
 8000806:	f004 fee7 	bl	80055d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800080a:	2338      	movs	r3, #56	@ 0x38
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	0018      	movs	r0, r3
 8000810:	231c      	movs	r3, #28
 8000812:	001a      	movs	r2, r3
 8000814:	2100      	movs	r1, #0
 8000816:	f004 fedf 	bl	80055d8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	0018      	movs	r0, r3
 800081e:	2334      	movs	r3, #52	@ 0x34
 8000820:	001a      	movs	r2, r3
 8000822:	2100      	movs	r1, #0
 8000824:	f004 fed8 	bl	80055d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000828:	4b45      	ldr	r3, [pc, #276]	@ (8000940 <MX_TIM1_Init+0x14c>)
 800082a:	4a46      	ldr	r2, [pc, #280]	@ (8000944 <MX_TIM1_Init+0x150>)
 800082c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 800082e:	4b44      	ldr	r3, [pc, #272]	@ (8000940 <MX_TIM1_Init+0x14c>)
 8000830:	229f      	movs	r2, #159	@ 0x9f
 8000832:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000834:	4b42      	ldr	r3, [pc, #264]	@ (8000940 <MX_TIM1_Init+0x14c>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800083a:	4b41      	ldr	r3, [pc, #260]	@ (8000940 <MX_TIM1_Init+0x14c>)
 800083c:	2263      	movs	r2, #99	@ 0x63
 800083e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b3f      	ldr	r3, [pc, #252]	@ (8000940 <MX_TIM1_Init+0x14c>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000846:	4b3e      	ldr	r3, [pc, #248]	@ (8000940 <MX_TIM1_Init+0x14c>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084c:	4b3c      	ldr	r3, [pc, #240]	@ (8000940 <MX_TIM1_Init+0x14c>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000852:	4b3b      	ldr	r3, [pc, #236]	@ (8000940 <MX_TIM1_Init+0x14c>)
 8000854:	0018      	movs	r0, r3
 8000856:	f003 f9f1 	bl	8003c3c <HAL_TIM_PWM_Init>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800085e:	f000 fdbf 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000862:	2154      	movs	r1, #84	@ 0x54
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000876:	187a      	adds	r2, r7, r1
 8000878:	4b31      	ldr	r3, [pc, #196]	@ (8000940 <MX_TIM1_Init+0x14c>)
 800087a:	0011      	movs	r1, r2
 800087c:	0018      	movs	r0, r3
 800087e:	f003 ff49 	bl	8004714 <HAL_TIMEx_MasterConfigSynchronization>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000886:	f000 fdab 	bl	80013e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800088a:	2138      	movs	r1, #56	@ 0x38
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2260      	movs	r2, #96	@ 0x60
 8000890:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008b6:	1879      	adds	r1, r7, r1
 80008b8:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <MX_TIM1_Init+0x14c>)
 80008ba:	2204      	movs	r2, #4
 80008bc:	0018      	movs	r0, r3
 80008be:	f003 faf3 	bl	8003ea8 <HAL_TIM_PWM_ConfigChannel>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80008c6:	f000 fd8b 	bl	80013e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2280      	movs	r2, #128	@ 0x80
 80008ec:	0192      	lsls	r2, r2, #6
 80008ee:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2280      	movs	r2, #128	@ 0x80
 8000906:	0492      	lsls	r2, r2, #18
 8000908:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2200      	movs	r2, #0
 8000914:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800091c:	1d3a      	adds	r2, r7, #4
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <MX_TIM1_Init+0x14c>)
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f003 ff5e 	bl	80047e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 800092c:	f000 fd58 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000930:	4b03      	ldr	r3, [pc, #12]	@ (8000940 <MX_TIM1_Init+0x14c>)
 8000932:	0018      	movs	r0, r3
 8000934:	f001 f802 	bl	800193c <HAL_TIM_MspPostInit>

}
 8000938:	46c0      	nop			@ (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b018      	add	sp, #96	@ 0x60
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200000f4 	.word	0x200000f4
 8000944:	40012c00 	.word	0x40012c00

08000948 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800094c:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <MX_TIM16_Init+0x44>)
 800094e:	4a10      	ldr	r2, [pc, #64]	@ (8000990 <MX_TIM16_Init+0x48>)
 8000950:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 244;
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <MX_TIM16_Init+0x44>)
 8000954:	22f4      	movs	r2, #244	@ 0xf4
 8000956:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <MX_TIM16_Init+0x44>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800095e:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <MX_TIM16_Init+0x44>)
 8000960:	4a0c      	ldr	r2, [pc, #48]	@ (8000994 <MX_TIM16_Init+0x4c>)
 8000962:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b09      	ldr	r3, [pc, #36]	@ (800098c <MX_TIM16_Init+0x44>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800096a:	4b08      	ldr	r3, [pc, #32]	@ (800098c <MX_TIM16_Init+0x44>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <MX_TIM16_Init+0x44>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000976:	4b05      	ldr	r3, [pc, #20]	@ (800098c <MX_TIM16_Init+0x44>)
 8000978:	0018      	movs	r0, r3
 800097a:	f003 f894 	bl	8003aa6 <HAL_TIM_Base_Init>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000982:	f000 fd2d 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000140 	.word	0x20000140
 8000990:	40014400 	.word	0x40014400
 8000994:	0000ffff 	.word	0x0000ffff

08000998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <MX_USART2_UART_Init+0x60>)
 800099e:	4a17      	ldr	r2, [pc, #92]	@ (80009fc <MX_USART2_UART_Init+0x64>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a2:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <MX_USART2_UART_Init+0x60>)
 80009a4:	22e1      	movs	r2, #225	@ 0xe1
 80009a6:	0252      	lsls	r2, r2, #9
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80009aa:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <MX_USART2_UART_Init+0x60>)
 80009ac:	2280      	movs	r2, #128	@ 0x80
 80009ae:	0152      	lsls	r2, r2, #5
 80009b0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_USART2_UART_Init+0x60>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_USART2_UART_Init+0x60>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009be:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <MX_USART2_UART_Init+0x60>)
 80009c0:	220c      	movs	r2, #12
 80009c2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <MX_USART2_UART_Init+0x60>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <MX_USART2_UART_Init+0x60>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d0:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <MX_USART2_UART_Init+0x60>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d6:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <MX_USART2_UART_Init+0x60>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <MX_USART2_UART_Init+0x60>)
 80009de:	2200      	movs	r2, #0
 80009e0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e2:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <MX_USART2_UART_Init+0x60>)
 80009e4:	0018      	movs	r0, r3
 80009e6:	f003 ffa3 	bl	8004930 <HAL_UART_Init>
 80009ea:	1e03      	subs	r3, r0, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80009ee:	f000 fcf7 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000018c 	.word	0x2000018c
 80009fc:	40004400 	.word	0x40004400

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b08b      	sub	sp, #44	@ 0x2c
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	2414      	movs	r4, #20
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	2314      	movs	r3, #20
 8000a0e:	001a      	movs	r2, r3
 8000a10:	2100      	movs	r1, #0
 8000a12:	f004 fde1 	bl	80055d8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b67      	ldr	r3, [pc, #412]	@ (8000bb4 <MX_GPIO_Init+0x1b4>)
 8000a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a1a:	4b66      	ldr	r3, [pc, #408]	@ (8000bb4 <MX_GPIO_Init+0x1b4>)
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a22:	4b64      	ldr	r3, [pc, #400]	@ (8000bb4 <MX_GPIO_Init+0x1b4>)
 8000a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a26:	2204      	movs	r2, #4
 8000a28:	4013      	ands	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2e:	4b61      	ldr	r3, [pc, #388]	@ (8000bb4 <MX_GPIO_Init+0x1b4>)
 8000a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a32:	4b60      	ldr	r3, [pc, #384]	@ (8000bb4 <MX_GPIO_Init+0x1b4>)
 8000a34:	2120      	movs	r1, #32
 8000a36:	430a      	orrs	r2, r1
 8000a38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a3a:	4b5e      	ldr	r3, [pc, #376]	@ (8000bb4 <MX_GPIO_Init+0x1b4>)
 8000a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a3e:	2220      	movs	r2, #32
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b5b      	ldr	r3, [pc, #364]	@ (8000bb4 <MX_GPIO_Init+0x1b4>)
 8000a48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a4a:	4b5a      	ldr	r3, [pc, #360]	@ (8000bb4 <MX_GPIO_Init+0x1b4>)
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a52:	4b58      	ldr	r3, [pc, #352]	@ (8000bb4 <MX_GPIO_Init+0x1b4>)
 8000a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a56:	2201      	movs	r2, #1
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b55      	ldr	r3, [pc, #340]	@ (8000bb4 <MX_GPIO_Init+0x1b4>)
 8000a60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a62:	4b54      	ldr	r3, [pc, #336]	@ (8000bb4 <MX_GPIO_Init+0x1b4>)
 8000a64:	2102      	movs	r1, #2
 8000a66:	430a      	orrs	r2, r1
 8000a68:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a6a:	4b52      	ldr	r3, [pc, #328]	@ (8000bb4 <MX_GPIO_Init+0x1b4>)
 8000a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a6e:	2202      	movs	r2, #2
 8000a70:	4013      	ands	r3, r2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Output_Pin|Shift_Store_Clock_Pin|Shift_Data_Clock_Pin|Shift_Master_Clear_Pin
 8000a76:	23f9      	movs	r3, #249	@ 0xf9
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	484f      	ldr	r0, [pc, #316]	@ (8000bb8 <MX_GPIO_Init+0x1b8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	0019      	movs	r1, r3
 8000a80:	f001 fbe3 	bl	800224a <HAL_GPIO_WritePin>
                          |AM_PM_LED_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a84:	4b4d      	ldr	r3, [pc, #308]	@ (8000bbc <MX_GPIO_Init+0x1bc>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	2140      	movs	r1, #64	@ 0x40
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f001 fbdd 	bl	800224a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Shift_Data_In_GPIO_Port, Shift_Data_In_Pin, GPIO_PIN_RESET);
 8000a90:	2380      	movs	r3, #128	@ 0x80
 8000a92:	0219      	lsls	r1, r3, #8
 8000a94:	23a0      	movs	r3, #160	@ 0xa0
 8000a96:	05db      	lsls	r3, r3, #23
 8000a98:	2200      	movs	r2, #0
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f001 fbd5 	bl	800224a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	2288      	movs	r2, #136	@ 0x88
 8000aaa:	0352      	lsls	r2, r2, #13
 8000aac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	4a42      	ldr	r2, [pc, #264]	@ (8000bc0 <MX_GPIO_Init+0x1c0>)
 8000ab8:	0019      	movs	r1, r3
 8000aba:	0010      	movs	r0, r2
 8000abc:	f001 fa44 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_Button_Pin Alarm_Set_Button_Pin Hour_Set_Button_Pin Alarm_Enable_Button_Pin
                           Minute_Set_Button_Pin */
  GPIO_InitStruct.Pin = Display_Button_Pin|Alarm_Set_Button_Pin|Hour_Set_Button_Pin|Alarm_Enable_Button_Pin
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	4a40      	ldr	r2, [pc, #256]	@ (8000bc4 <MX_GPIO_Init+0x1c4>)
 8000ac4:	601a      	str	r2, [r3, #0]
                          |Minute_Set_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	2284      	movs	r2, #132	@ 0x84
 8000aca:	0392      	lsls	r2, r2, #14
 8000acc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	193a      	adds	r2, r7, r4
 8000ad6:	23a0      	movs	r3, #160	@ 0xa0
 8000ad8:	05db      	lsls	r3, r3, #23
 8000ada:	0011      	movs	r1, r2
 8000adc:	0018      	movs	r0, r3
 8000ade:	f001 fa33 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Output_Pin Shift_Store_Clock_Pin Shift_Data_Clock_Pin Shift_Master_Clear_Pin
                           AM_PM_LED_Pin Alarm_LED_Pin */
  GPIO_InitStruct.Pin = Buzzer_Output_Pin|Shift_Store_Clock_Pin|Shift_Data_Clock_Pin|Shift_Master_Clear_Pin
 8000ae2:	0021      	movs	r1, r4
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	22f9      	movs	r2, #249	@ 0xf9
 8000ae8:	0052      	lsls	r2, r2, #1
 8000aea:	601a      	str	r2, [r3, #0]
                          |AM_PM_LED_Pin|Alarm_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	000c      	movs	r4, r1
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2201      	movs	r2, #1
 8000af2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	4a2d      	ldr	r2, [pc, #180]	@ (8000bb8 <MX_GPIO_Init+0x1b8>)
 8000b04:	0019      	movs	r1, r3
 8000b06:	0010      	movs	r0, r2
 8000b08:	f001 fa1e 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	2240      	movs	r2, #64	@ 0x40
 8000b10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2201      	movs	r2, #1
 8000b16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	4a25      	ldr	r2, [pc, #148]	@ (8000bbc <MX_GPIO_Init+0x1bc>)
 8000b28:	0019      	movs	r1, r3
 8000b2a:	0010      	movs	r0, r2
 8000b2c:	f001 fa0c 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : Snooze_Button_Pin */
  GPIO_InitStruct.Pin = Snooze_Button_Pin;
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	2280      	movs	r2, #128	@ 0x80
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	2201      	movs	r2, #1
 8000b42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Snooze_Button_GPIO_Port, &GPIO_InitStruct);
 8000b44:	193a      	adds	r2, r7, r4
 8000b46:	23a0      	movs	r3, #160	@ 0xa0
 8000b48:	05db      	lsls	r3, r3, #23
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f001 f9fb 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : Shift_Data_In_Pin */
  GPIO_InitStruct.Pin = Shift_Data_In_Pin;
 8000b52:	0021      	movs	r1, r4
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2280      	movs	r2, #128	@ 0x80
 8000b58:	0212      	lsls	r2, r2, #8
 8000b5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2201      	movs	r2, #1
 8000b60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Shift_Data_In_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	187a      	adds	r2, r7, r1
 8000b70:	23a0      	movs	r3, #160	@ 0xa0
 8000b72:	05db      	lsls	r3, r3, #23
 8000b74:	0011      	movs	r1, r2
 8000b76:	0018      	movs	r0, r3
 8000b78:	f001 f9e6 	bl	8001f48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2101      	movs	r1, #1
 8000b80:	2005      	movs	r0, #5
 8000b82:	f001 f9af 	bl	8001ee4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000b86:	2005      	movs	r0, #5
 8000b88:	f001 f9c1 	bl	8001f0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2006      	movs	r0, #6
 8000b92:	f001 f9a7 	bl	8001ee4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000b96:	2006      	movs	r0, #6
 8000b98:	f001 f9b9 	bl	8001f0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2007      	movs	r0, #7
 8000ba2:	f001 f99f 	bl	8001ee4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000ba6:	2007      	movs	r0, #7
 8000ba8:	f001 f9b1 	bl	8001f0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bac:	46c0      	nop			@ (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b00b      	add	sp, #44	@ 0x2c
 8000bb2:	bd90      	pop	{r4, r7, pc}
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	50000400 	.word	0x50000400
 8000bbc:	50000800 	.word	0x50000800
 8000bc0:	50001400 	.word	0x50001400
 8000bc4:	00001063 	.word	0x00001063

08000bc8 <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8000bd4:	4a07      	ldr	r2, [pc, #28]	@ (8000bf4 <updateAndDisplayTime+0x2c>)
 8000bd6:	4908      	ldr	r1, [pc, #32]	@ (8000bf8 <updateAndDisplayTime+0x30>)
 8000bd8:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <updateAndDisplayTime+0x34>)
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff fc3e 	bl	800045c <getRTCTime>
	sevSeg_updateDigits(&currTime);
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <updateAndDisplayTime+0x30>)
 8000be2:	0018      	movs	r0, r3
 8000be4:	f000 fd1a 	bl	800161c <sevSeg_updateDigits>
//	}
//	else {
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
//	}

	return halRet;
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	781b      	ldrb	r3, [r3, #0]

}
 8000bec:	0018      	movs	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b002      	add	sp, #8
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000234 	.word	0x20000234
 8000bf8:	20000220 	.word	0x20000220
 8000bfc:	200000c8 	.word	0x200000c8

08000c00 <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c44 <updateAndDisplayAlarm+0x44>)
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 fd04 	bl	800161c <sevSeg_updateDigits>

	if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000c14:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <updateAndDisplayAlarm+0x44>)
 8000c16:	78db      	ldrb	r3, [r3, #3]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d106      	bne.n	8000c2a <updateAndDisplayAlarm+0x2a>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000c1c:	2180      	movs	r1, #128	@ 0x80
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <updateAndDisplayAlarm+0x48>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	0018      	movs	r0, r3
 8000c24:	f001 fb11 	bl	800224a <HAL_GPIO_WritePin>
 8000c28:	e005      	b.n	8000c36 <updateAndDisplayAlarm+0x36>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000c2a:	2180      	movs	r1, #128	@ 0x80
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <updateAndDisplayAlarm+0x48>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	0018      	movs	r0, r3
 8000c32:	f001 fb0a 	bl	800224a <HAL_GPIO_WritePin>
	}

	return halRet;
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]

}
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b002      	add	sp, #8
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	20000260 	.word	0x20000260
 8000c48:	50000400 	.word	0x50000400

08000c4c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	@ 0x30
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

	  printf("Enter current time minute increment interrupt\n\r");
 8000c54:	4b28      	ldr	r3, [pc, #160]	@ (8000cf8 <HAL_RTC_AlarmAEventCallback+0xac>)
 8000c56:	0018      	movs	r0, r3
 8000c58:	f004 fc62 	bl	8005520 <iprintf>

	  RTC_AlarmTypeDef sAlarm;
	  getRTCTime(hrtc, &currTime, &currDate);
 8000c5c:	4a27      	ldr	r2, [pc, #156]	@ (8000cfc <HAL_RTC_AlarmAEventCallback+0xb0>)
 8000c5e:	4928      	ldr	r1, [pc, #160]	@ (8000d00 <HAL_RTC_AlarmAEventCallback+0xb4>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	0018      	movs	r0, r3
 8000c64:	f7ff fbfa 	bl	800045c <getRTCTime>

	  if(sAlarm.AlarmTime.Minutes>58) {
 8000c68:	2208      	movs	r2, #8
 8000c6a:	18bb      	adds	r3, r7, r2
 8000c6c:	785b      	ldrb	r3, [r3, #1]
 8000c6e:	2b3a      	cmp	r3, #58	@ 0x3a
 8000c70:	d907      	bls.n	8000c82 <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 8000c72:	18bb      	adds	r3, r7, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	705a      	strb	r2, [r3, #1]
		printf("Reset alarm time\n\r");
 8000c78:	4b22      	ldr	r3, [pc, #136]	@ (8000d04 <HAL_RTC_AlarmAEventCallback+0xb8>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f004 fc50 	bl	8005520 <iprintf>
 8000c80:	e006      	b.n	8000c90 <HAL_RTC_AlarmAEventCallback+0x44>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8000c82:	2108      	movs	r1, #8
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	785b      	ldrb	r3, [r3, #1]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000c90:	46c0      	nop			@ (mov r8, r8)
 8000c92:	2308      	movs	r3, #8
 8000c94:	18f9      	adds	r1, r7, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f002 fc8a 	bl	80035b4 <HAL_RTC_SetAlarm_IT>
 8000ca0:	1e03      	subs	r3, r0, #0
 8000ca2:	d1f6      	bne.n	8000c92 <HAL_RTC_AlarmAEventCallback+0x46>

	  updateAndDisplayTime();
 8000ca4:	f7ff ff90 	bl	8000bc8 <updateAndDisplayTime>

	  printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000ca8:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <HAL_RTC_AlarmAEventCallback+0xb4>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	0019      	movs	r1, r3
 8000cae:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <HAL_RTC_AlarmAEventCallback+0xb4>)
 8000cb0:	785b      	ldrb	r3, [r3, #1]
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	4b12      	ldr	r3, [pc, #72]	@ (8000d00 <HAL_RTC_AlarmAEventCallback+0xb4>)
 8000cb6:	789b      	ldrb	r3, [r3, #2]
 8000cb8:	4813      	ldr	r0, [pc, #76]	@ (8000d08 <HAL_RTC_AlarmAEventCallback+0xbc>)
 8000cba:	f004 fc31 	bl	8005520 <iprintf>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 8000cbe:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <HAL_RTC_AlarmAEventCallback+0xc0>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d013      	beq.n	8000cee <HAL_RTC_AlarmAEventCallback+0xa2>
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <HAL_RTC_AlarmAEventCallback+0xc4>)
 8000cc8:	781a      	ldrb	r2, [r3, #0]
 8000cca:	4b0d      	ldr	r3, [pc, #52]	@ (8000d00 <HAL_RTC_AlarmAEventCallback+0xb4>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d10d      	bne.n	8000cee <HAL_RTC_AlarmAEventCallback+0xa2>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <HAL_RTC_AlarmAEventCallback+0xc4>)
 8000cd4:	785a      	ldrb	r2, [r3, #1]
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <HAL_RTC_AlarmAEventCallback+0xb4>)
 8000cd8:	785b      	ldrb	r3, [r3, #1]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d107      	bne.n	8000cee <HAL_RTC_AlarmAEventCallback+0xa2>
 8000cde:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <HAL_RTC_AlarmAEventCallback+0xc4>)
 8000ce0:	78da      	ldrb	r2, [r3, #3]
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <HAL_RTC_AlarmAEventCallback+0xb4>)
 8000ce4:	78db      	ldrb	r3, [r3, #3]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d101      	bne.n	8000cee <HAL_RTC_AlarmAEventCallback+0xa2>
		  userAlarmBeep();
 8000cea:	f000 f813 	bl	8000d14 <userAlarmBeep>
	  }

}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b00c      	add	sp, #48	@ 0x30
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	080062b8 	.word	0x080062b8
 8000cfc:	20000234 	.word	0x20000234
 8000d00:	20000220 	.word	0x20000220
 8000d04:	080062e8 	.word	0x080062e8
 8000d08:	080062fc 	.word	0x080062fc
 8000d0c:	200000c5 	.word	0x200000c5
 8000d10:	20000260 	.word	0x20000260

08000d14 <userAlarmBeep>:

void userAlarmBeep() {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8000d1a:	4b28      	ldr	r3, [pc, #160]	@ (8000dbc <userAlarmBeep+0xa8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f002 ff66 	bl	8003bf0 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8000d24:	4b25      	ldr	r3, [pc, #148]	@ (8000dbc <userAlarmBeep+0xa8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f002 ff15 	bl	8003b58 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8000d2e:	4b23      	ldr	r3, [pc, #140]	@ (8000dbc <userAlarmBeep+0xa8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d36:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8000d38:	1cfb      	adds	r3, r7, #3
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 8000d3e:	f7ff ff43 	bl	8000bc8 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 8000d42:	4b1e      	ldr	r3, [pc, #120]	@ (8000dbc <userAlarmBeep+0xa8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc0 <userAlarmBeep+0xac>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d922      	bls.n	8000d9a <userAlarmBeep+0x86>

			sevSeg_setIntensity(timerPWM, sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 8000d54:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <userAlarmBeep+0xb0>)
 8000d56:	6818      	ldr	r0, [r3, #0]
 8000d58:	1cfb      	adds	r3, r7, #3
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8000dc8 <userAlarmBeep+0xb4>)
 8000d5e:	5cd3      	ldrb	r3, [r2, r3]
 8000d60:	0019      	movs	r1, r3
 8000d62:	f000 fd0d 	bl	8001780 <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(GPIOB, buzzerPin);					// Toggle Buzzer
 8000d66:	2202      	movs	r2, #2
 8000d68:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <userAlarmBeep+0xb8>)
 8000d6a:	0011      	movs	r1, r2
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f001 fa89 	bl	8002284 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8000d72:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <userAlarmBeep+0xa8>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7a:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8000d7c:	1cfb      	adds	r3, r7, #3
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	1e5a      	subs	r2, r3, #1
 8000d82:	4193      	sbcs	r3, r2
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2201      	movs	r2, #1
 8000d88:	4053      	eors	r3, r2
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	001a      	movs	r2, r3
 8000d8e:	1cfb      	adds	r3, r7, #3
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	781a      	ldrb	r2, [r3, #0]
 8000d94:	2101      	movs	r1, #1
 8000d96:	400a      	ands	r2, r1
 8000d98:	701a      	strb	r2, [r3, #0]

			//printf("Display Blink = %u\n\r", displayBlink);

		}

	} while(capTouchTrigger(snoozeButtonPin));
 8000d9a:	2380      	movs	r3, #128	@ 0x80
 8000d9c:	011b      	lsls	r3, r3, #4
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff fb71 	bl	8000488 <capTouchTrigger>
 8000da6:	1e03      	subs	r3, r0, #0
 8000da8:	d1c9      	bne.n	8000d3e <userAlarmBeep+0x2a>

	HAL_TIM_Base_Stop(timerDelay);
 8000daa:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <userAlarmBeep+0xa8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	0018      	movs	r0, r3
 8000db0:	f002 ff1e 	bl	8003bf0 <HAL_TIM_Base_Stop>

}
 8000db4:	46c0      	nop			@ (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b002      	add	sp, #8
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000024 	.word	0x20000024
 8000dc0:	00007ffe 	.word	0x00007ffe
 8000dc4:	20000020 	.word	0x20000020
 8000dc8:	08006604 	.word	0x08006604
 8000dcc:	50000400 	.word	0x50000400

08000dd0 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000dd0:	b5b0      	push	{r4, r5, r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	1dbb      	adds	r3, r7, #6
 8000dda:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8000ddc:	2201      	movs	r2, #1
 8000dde:	1dbb      	adds	r3, r7, #6
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d113      	bne.n	8000e0e <HAL_GPIO_EXTI_Falling_Callback+0x3e>
		halRet = displayButtonISR();
 8000de6:	250f      	movs	r5, #15
 8000de8:	197c      	adds	r4, r7, r5
 8000dea:	f000 f88f 	bl	8000f0c <displayButtonISR>
 8000dee:	0003      	movs	r3, r0
 8000df0:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000df2:	197b      	adds	r3, r7, r5
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d004      	beq.n	8000e04 <HAL_GPIO_EXTI_Falling_Callback+0x34>
			printf("Error toggling display.\n\r");
 8000dfa:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee4 <HAL_GPIO_EXTI_Falling_Callback+0x114>)
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f004 fb8f 	bl	8005520 <iprintf>
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8000e02:	e06a      	b.n	8000eda <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Display intensity toggled.\n\r");
 8000e04:	4b38      	ldr	r3, [pc, #224]	@ (8000ee8 <HAL_GPIO_EXTI_Falling_Callback+0x118>)
 8000e06:	0018      	movs	r0, r3
 8000e08:	f004 fb8a 	bl	8005520 <iprintf>
}
 8000e0c:	e065      	b.n	8000eda <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8000e0e:	2240      	movs	r2, #64	@ 0x40
 8000e10:	1dbb      	adds	r3, r7, #6
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d113      	bne.n	8000e40 <HAL_GPIO_EXTI_Falling_Callback+0x70>
		halRet = alarmEnableISR();
 8000e18:	250f      	movs	r5, #15
 8000e1a:	197c      	adds	r4, r7, r5
 8000e1c:	f000 f8b2 	bl	8000f84 <alarmEnableISR>
 8000e20:	0003      	movs	r3, r0
 8000e22:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000e24:	197b      	adds	r3, r7, r5
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d004      	beq.n	8000e36 <HAL_GPIO_EXTI_Falling_Callback+0x66>
			printf("Error toggling user alarm.\n\r");
 8000e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000eec <HAL_GPIO_EXTI_Falling_Callback+0x11c>)
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f004 fb76 	bl	8005520 <iprintf>
}
 8000e34:	e051      	b.n	8000eda <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm toggled.\n\r");
 8000e36:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef0 <HAL_GPIO_EXTI_Falling_Callback+0x120>)
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f004 fb71 	bl	8005520 <iprintf>
}
 8000e3e:	e04c      	b.n	8000eda <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8000e40:	2202      	movs	r2, #2
 8000e42:	1dbb      	adds	r3, r7, #6
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d113      	bne.n	8000e72 <HAL_GPIO_EXTI_Falling_Callback+0xa2>
		halRet = alarmSetISR();
 8000e4a:	250f      	movs	r5, #15
 8000e4c:	197c      	adds	r4, r7, r5
 8000e4e:	f000 f8e7 	bl	8001020 <alarmSetISR>
 8000e52:	0003      	movs	r3, r0
 8000e54:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000e56:	197b      	adds	r3, r7, r5
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d004      	beq.n	8000e68 <HAL_GPIO_EXTI_Falling_Callback+0x98>
			printf("Error setting user alarm.\n\r");
 8000e5e:	4b25      	ldr	r3, [pc, #148]	@ (8000ef4 <HAL_GPIO_EXTI_Falling_Callback+0x124>)
 8000e60:	0018      	movs	r0, r3
 8000e62:	f004 fb5d 	bl	8005520 <iprintf>
}
 8000e66:	e038      	b.n	8000eda <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm set.\n\r");
 8000e68:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <HAL_GPIO_EXTI_Falling_Callback+0x128>)
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f004 fb58 	bl	8005520 <iprintf>
}
 8000e70:	e033      	b.n	8000eda <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == hourSetButtonPin) {
 8000e72:	2220      	movs	r2, #32
 8000e74:	1dbb      	adds	r3, r7, #6
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d113      	bne.n	8000ea4 <HAL_GPIO_EXTI_Falling_Callback+0xd4>
		halRet = hourSetISR();
 8000e7c:	250f      	movs	r5, #15
 8000e7e:	197c      	adds	r4, r7, r5
 8000e80:	f000 f956 	bl	8001130 <hourSetISR>
 8000e84:	0003      	movs	r3, r0
 8000e86:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000e88:	197b      	adds	r3, r7, r5
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <HAL_GPIO_EXTI_Falling_Callback+0xca>
			printf("Error incrementing hour.\n\r");
 8000e90:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 8000e92:	0018      	movs	r0, r3
 8000e94:	f004 fb44 	bl	8005520 <iprintf>
}
 8000e98:	e01f      	b.n	8000eda <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Hour increment ISR success.\n\r");
 8000e9a:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <HAL_GPIO_EXTI_Falling_Callback+0x130>)
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f004 fb3f 	bl	8005520 <iprintf>
}
 8000ea2:	e01a      	b.n	8000eda <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8000ea4:	2380      	movs	r3, #128	@ 0x80
 8000ea6:	015b      	lsls	r3, r3, #5
 8000ea8:	1dba      	adds	r2, r7, #6
 8000eaa:	8812      	ldrh	r2, [r2, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d113      	bne.n	8000ed8 <HAL_GPIO_EXTI_Falling_Callback+0x108>
		halRet = minuteSetISR();
 8000eb0:	250f      	movs	r5, #15
 8000eb2:	197c      	adds	r4, r7, r5
 8000eb4:	f000 f9ce 	bl	8001254 <minuteSetISR>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000ebc:	197b      	adds	r3, r7, r5
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d004      	beq.n	8000ece <HAL_GPIO_EXTI_Falling_Callback+0xfe>
			printf("Error incrementing minute.\n\r");
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <HAL_GPIO_EXTI_Falling_Callback+0x134>)
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f004 fb2a 	bl	8005520 <iprintf>
}
 8000ecc:	e005      	b.n	8000eda <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Minute increment ISR success.\n\r");
 8000ece:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <HAL_GPIO_EXTI_Falling_Callback+0x138>)
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f004 fb25 	bl	8005520 <iprintf>
}
 8000ed6:	e000      	b.n	8000eda <HAL_GPIO_EXTI_Falling_Callback+0x10a>
		__NOP();
 8000ed8:	46c0      	nop			@ (mov r8, r8)
}
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b004      	add	sp, #16
 8000ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	0800631c 	.word	0x0800631c
 8000ee8:	08006338 	.word	0x08006338
 8000eec:	08006358 	.word	0x08006358
 8000ef0:	08006378 	.word	0x08006378
 8000ef4:	08006390 	.word	0x08006390
 8000ef8:	080063ac 	.word	0x080063ac
 8000efc:	080063c0 	.word	0x080063c0
 8000f00:	080063dc 	.word	0x080063dc
 8000f04:	080063fc 	.word	0x080063fc
 8000f08:	0800641c 	.word	0x0800641c

08000f0c <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0

	printf("Entered display toggle ISR\n\r");
 8000f12:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <displayButtonISR+0x64>)
 8000f14:	0018      	movs	r0, r3
 8000f16:	f004 fb03 	bl	8005520 <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 8000f20:	f7ff fe52 	bl	8000bc8 <updateAndDisplayTime>

	sevSeg_setIntensity(timerPWM, sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8000f24:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <displayButtonISR+0x68>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <displayButtonISR+0x6c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	0019      	movs	r1, r3
 8000f2e:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <displayButtonISR+0x70>)
 8000f30:	5c5b      	ldrb	r3, [r3, r1]
 8000f32:	0019      	movs	r1, r3
 8000f34:	0010      	movs	r0, r2
 8000f36:	f000 fc23 	bl	8001780 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <displayButtonISR+0x6c>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d909      	bls.n	8000f56 <displayButtonISR+0x4a>
		displayToggle = 0;
 8000f42:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <displayButtonISR+0x6c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
 8000f48:	2180      	movs	r1, #128	@ 0x80
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f80 <displayButtonISR+0x74>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f001 f97b 	bl	800224a <HAL_GPIO_WritePin>
 8000f54:	e005      	b.n	8000f62 <displayButtonISR+0x56>
	} else {
		displayToggle++;
 8000f56:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <displayButtonISR+0x6c>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <displayButtonISR+0x6c>)
 8000f60:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	781b      	ldrb	r3, [r3, #0]

}
 8000f66:	0018      	movs	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b002      	add	sp, #8
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			@ (mov r8, r8)
 8000f70:	0800643c 	.word	0x0800643c
 8000f74:	20000020 	.word	0x20000020
 8000f78:	200000c4 	.word	0x200000c4
 8000f7c:	08006604 	.word	0x08006604
 8000f80:	50000400 	.word	0x50000400

08000f84 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

	printf("Entered alarm toggle ISR\n\r");
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <alarmEnableISR+0x84>)
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f004 fac7 	bl	8005520 <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8000f98:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <alarmEnableISR+0x88>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4053      	eors	r3, r2
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d015      	beq.n	8000fd2 <alarmEnableISR+0x4e>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_SET);			// Turn on alarm LED
 8000fa6:	2380      	movs	r3, #128	@ 0x80
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4819      	ldr	r0, [pc, #100]	@ (8001010 <alarmEnableISR+0x8c>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	0019      	movs	r1, r3
 8000fb0:	f001 f94b 	bl	800224a <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 8000fb4:	4b15      	ldr	r3, [pc, #84]	@ (800100c <alarmEnableISR+0x88>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]

		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000fba:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <alarmEnableISR+0x90>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	0019      	movs	r1, r3
								userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000fc0:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <alarmEnableISR+0x90>)
 8000fc2:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000fc4:	001a      	movs	r2, r3
								userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <alarmEnableISR+0x90>)
 8000fc8:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000fca:	4813      	ldr	r0, [pc, #76]	@ (8001018 <alarmEnableISR+0x94>)
 8000fcc:	f004 faa8 	bl	8005520 <iprintf>
 8000fd0:	e013      	b.n	8000ffa <alarmEnableISR+0x76>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <alarmEnableISR+0x88>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00e      	beq.n	8000ff8 <alarmEnableISR+0x74>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_RESET);			// Turn off alarm LED
 8000fda:	2380      	movs	r3, #128	@ 0x80
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	480c      	ldr	r0, [pc, #48]	@ (8001010 <alarmEnableISR+0x8c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	0019      	movs	r1, r3
 8000fe4:	f001 f931 	bl	800224a <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <alarmEnableISR+0x88>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]

		printf("User alarm disabled.\n\r");
 8000fee:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <alarmEnableISR+0x98>)
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f004 fa95 	bl	8005520 <iprintf>
 8000ff6:	e000      	b.n	8000ffa <alarmEnableISR+0x76>
	}
	else {
		__NOP();							//Code should never reach here.
 8000ff8:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	781b      	ldrb	r3, [r3, #0]

}
 8000ffe:	0018      	movs	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	b002      	add	sp, #8
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	0800645c 	.word	0x0800645c
 800100c:	200000c5 	.word	0x200000c5
 8001010:	50000400 	.word	0x50000400
 8001014:	20000260 	.word	0x20000260
 8001018:	08006478 	.word	0x08006478
 800101c:	08006498 	.word	0x08006498

08001020 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

	printf("Enter user alarm set ISR.\n\r");
 8001026:	4b3a      	ldr	r3, [pc, #232]	@ (8001110 <alarmSetISR+0xf0>)
 8001028:	0018      	movs	r0, r3
 800102a:	f004 fa79 	bl	8005520 <iprintf>

	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 800102e:	4b39      	ldr	r3, [pc, #228]	@ (8001114 <alarmSetISR+0xf4>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	0019      	movs	r1, r3
			userAlarmTime.Minutes, userAlarmTime.Seconds);
 8001034:	4b37      	ldr	r3, [pc, #220]	@ (8001114 <alarmSetISR+0xf4>)
 8001036:	785b      	ldrb	r3, [r3, #1]
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8001038:	001a      	movs	r2, r3
			userAlarmTime.Minutes, userAlarmTime.Seconds);
 800103a:	4b36      	ldr	r3, [pc, #216]	@ (8001114 <alarmSetISR+0xf4>)
 800103c:	789b      	ldrb	r3, [r3, #2]
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 800103e:	4836      	ldr	r0, [pc, #216]	@ (8001118 <alarmSetISR+0xf8>)
 8001040:	f004 fa6e 	bl	8005520 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 8001044:	1cbb      	adds	r3, r7, #2
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Stop(timerDelay);
 800104a:	4b34      	ldr	r3, [pc, #208]	@ (800111c <alarmSetISR+0xfc>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	0018      	movs	r0, r3
 8001050:	f002 fdce 	bl	8003bf0 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001054:	4b31      	ldr	r3, [pc, #196]	@ (800111c <alarmSetISR+0xfc>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	0018      	movs	r0, r3
 800105a:	f002 fd7d 	bl	8003b58 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 800105e:	4b2f      	ldr	r3, [pc, #188]	@ (800111c <alarmSetISR+0xfc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001066:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001068:	1cfb      	adds	r3, r7, #3
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]

	do {											// while the alarm set button is not held down, blink display.

		updateAndDisplayAlarm();
 800106e:	f7ff fdc7 	bl	8000c00 <updateAndDisplayAlarm>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 8001072:	4b2a      	ldr	r3, [pc, #168]	@ (800111c <alarmSetISR+0xfc>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	1ad2      	subs	r2, r2, r3
 800107e:	2380      	movs	r3, #128	@ 0x80
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	429a      	cmp	r2, r3
 8001084:	d31c      	bcc.n	80010c0 <alarmSetISR+0xa0>

			sevSeg_setIntensity (timerPWM, sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8001086:	4b26      	ldr	r3, [pc, #152]	@ (8001120 <alarmSetISR+0x100>)
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	1cfb      	adds	r3, r7, #3
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	4a25      	ldr	r2, [pc, #148]	@ (8001124 <alarmSetISR+0x104>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	0019      	movs	r1, r3
 8001094:	f000 fb74 	bl	8001780 <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 8001098:	4b20      	ldr	r3, [pc, #128]	@ (800111c <alarmSetISR+0xfc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a0:	607b      	str	r3, [r7, #4]
			displayBlink = !displayBlink;
 80010a2:	1cfb      	adds	r3, r7, #3
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	1e5a      	subs	r2, r3, #1
 80010a8:	4193      	sbcs	r3, r2
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2201      	movs	r2, #1
 80010ae:	4053      	eors	r3, r2
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	001a      	movs	r2, r3
 80010b4:	1cfb      	adds	r3, r7, #3
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	781a      	ldrb	r2, [r3, #0]
 80010ba:	2101      	movs	r1, #1
 80010bc:	400a      	ands	r2, r1
 80010be:	701a      	strb	r2, [r3, #0]

		}

	}while(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == GPIO_PIN_RESET);
 80010c0:	2202      	movs	r2, #2
 80010c2:	23a0      	movs	r3, #160	@ 0xa0
 80010c4:	05db      	lsls	r3, r3, #23
 80010c6:	0011      	movs	r1, r2
 80010c8:	0018      	movs	r0, r3
 80010ca:	f001 f8a1 	bl	8002210 <HAL_GPIO_ReadPin>
 80010ce:	1e03      	subs	r3, r0, #0
 80010d0:	d0cd      	beq.n	800106e <alarmSetISR+0x4e>

	sevSeg_setIntensity(timerPWM, sevSeg_intensityDuty[1]);			// Turn display back to full intensity
 80010d2:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <alarmSetISR+0x100>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	225a      	movs	r2, #90	@ 0x5a
 80010d8:	0011      	movs	r1, r2
 80010da:	0018      	movs	r0, r3
 80010dc:	f000 fb50 	bl	8001780 <sevSeg_setIntensity>

	HAL_TIM_Base_Stop(timerDelay);
 80010e0:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <alarmSetISR+0xfc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	0018      	movs	r0, r3
 80010e6:	f002 fd83 	bl	8003bf0 <HAL_TIM_Base_Stop>

	updateAndDisplayTime();
 80010ea:	f7ff fd6d 	bl	8000bc8 <updateAndDisplayTime>
	printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <alarmSetISR+0x108>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	0019      	movs	r1, r3
 80010f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <alarmSetISR+0x108>)
 80010f6:	785b      	ldrb	r3, [r3, #1]
 80010f8:	001a      	movs	r2, r3
 80010fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <alarmSetISR+0x108>)
 80010fc:	789b      	ldrb	r3, [r3, #2]
 80010fe:	480b      	ldr	r0, [pc, #44]	@ (800112c <alarmSetISR+0x10c>)
 8001100:	f004 fa0e 	bl	8005520 <iprintf>

	return halRet;
 8001104:	1cbb      	adds	r3, r7, #2
 8001106:	781b      	ldrb	r3, [r3, #0]

}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}
 8001110:	080064b0 	.word	0x080064b0
 8001114:	20000260 	.word	0x20000260
 8001118:	080064cc 	.word	0x080064cc
 800111c:	20000024 	.word	0x20000024
 8001120:	20000020 	.word	0x20000020
 8001124:	08006604 	.word	0x08006604
 8001128:	20000220 	.word	0x20000220
 800112c:	080064f4 	.word	0x080064f4

08001130 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

	printf("Entered hour set ISR.\n\r");
 8001136:	4b40      	ldr	r3, [pc, #256]	@ (8001238 <hourSetISR+0x108>)
 8001138:	0018      	movs	r0, r3
 800113a:	f004 f9f1 	bl	8005520 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) != GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 8001144:	2202      	movs	r2, #2
 8001146:	23a0      	movs	r3, #160	@ 0xa0
 8001148:	05db      	lsls	r3, r3, #23
 800114a:	0011      	movs	r1, r2
 800114c:	0018      	movs	r0, r3
 800114e:	f001 f85f 	bl	8002210 <HAL_GPIO_ReadPin>
 8001152:	0003      	movs	r3, r0
 8001154:	2b01      	cmp	r3, #1
 8001156:	d02a      	beq.n	80011ae <hourSetISR+0x7e>

		if(userAlarmTime.Hours >= 12) {
 8001158:	4b38      	ldr	r3, [pc, #224]	@ (800123c <hourSetISR+0x10c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b0b      	cmp	r3, #11
 800115e:	d90e      	bls.n	800117e <hourSetISR+0x4e>
			userAlarmTime.Hours = 1;
 8001160:	4b36      	ldr	r3, [pc, #216]	@ (800123c <hourSetISR+0x10c>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001166:	4b35      	ldr	r3, [pc, #212]	@ (800123c <hourSetISR+0x10c>)
 8001168:	78db      	ldrb	r3, [r3, #3]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d103      	bne.n	8001176 <hourSetISR+0x46>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800116e:	4b33      	ldr	r3, [pc, #204]	@ (800123c <hourSetISR+0x10c>)
 8001170:	2201      	movs	r2, #1
 8001172:	70da      	strb	r2, [r3, #3]
 8001174:	e00f      	b.n	8001196 <hourSetISR+0x66>
			} else {
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001176:	4b31      	ldr	r3, [pc, #196]	@ (800123c <hourSetISR+0x10c>)
 8001178:	2200      	movs	r2, #0
 800117a:	70da      	strb	r2, [r3, #3]
 800117c:	e00b      	b.n	8001196 <hourSetISR+0x66>
			}
		}
		else if(userAlarmTime.Hours < 12) {
 800117e:	4b2f      	ldr	r3, [pc, #188]	@ (800123c <hourSetISR+0x10c>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b0b      	cmp	r3, #11
 8001184:	d806      	bhi.n	8001194 <hourSetISR+0x64>
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001186:	4b2d      	ldr	r3, [pc, #180]	@ (800123c <hourSetISR+0x10c>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b2b      	ldr	r3, [pc, #172]	@ (800123c <hourSetISR+0x10c>)
 8001190:	701a      	strb	r2, [r3, #0]
 8001192:	e000      	b.n	8001196 <hourSetISR+0x66>
		}
		else {
			__NOP();
 8001194:	46c0      	nop			@ (mov r8, r8)
		}

		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 8001196:	4b29      	ldr	r3, [pc, #164]	@ (800123c <hourSetISR+0x10c>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	0019      	movs	r1, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 800119c:	4b27      	ldr	r3, [pc, #156]	@ (800123c <hourSetISR+0x10c>)
 800119e:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 80011a0:	001a      	movs	r2, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 80011a2:	4b26      	ldr	r3, [pc, #152]	@ (800123c <hourSetISR+0x10c>)
 80011a4:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 80011a6:	4826      	ldr	r0, [pc, #152]	@ (8001240 <hourSetISR+0x110>)
 80011a8:	f004 f9ba 	bl	8005520 <iprintf>
 80011ac:	e03d      	b.n	800122a <hourSetISR+0xfa>

	}
	else {									// Otherwise, change current time hour.

		getRTCTime(&hrtc, &currTime, &currDate);
 80011ae:	4a25      	ldr	r2, [pc, #148]	@ (8001244 <hourSetISR+0x114>)
 80011b0:	4925      	ldr	r1, [pc, #148]	@ (8001248 <hourSetISR+0x118>)
 80011b2:	4b26      	ldr	r3, [pc, #152]	@ (800124c <hourSetISR+0x11c>)
 80011b4:	0018      	movs	r0, r3
 80011b6:	f7ff f951 	bl	800045c <getRTCTime>
		if(currTime.Hours >= 12) {
 80011ba:	4b23      	ldr	r3, [pc, #140]	@ (8001248 <hourSetISR+0x118>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b0b      	cmp	r3, #11
 80011c0:	d90e      	bls.n	80011e0 <hourSetISR+0xb0>
			currTime.Hours = 1;
 80011c2:	4b21      	ldr	r3, [pc, #132]	@ (8001248 <hourSetISR+0x118>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]
			if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80011c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001248 <hourSetISR+0x118>)
 80011ca:	78db      	ldrb	r3, [r3, #3]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d103      	bne.n	80011d8 <hourSetISR+0xa8>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80011d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001248 <hourSetISR+0x118>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	70da      	strb	r2, [r3, #3]
 80011d6:	e00f      	b.n	80011f8 <hourSetISR+0xc8>
			} else {
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <hourSetISR+0x118>)
 80011da:	2200      	movs	r2, #0
 80011dc:	70da      	strb	r2, [r3, #3]
 80011de:	e00b      	b.n	80011f8 <hourSetISR+0xc8>
			}
		}
		else if(currTime.Hours < 12) {
 80011e0:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <hourSetISR+0x118>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b0b      	cmp	r3, #11
 80011e6:	d806      	bhi.n	80011f6 <hourSetISR+0xc6>
			currTime.Hours = currTime.Hours + 1;
 80011e8:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <hourSetISR+0x118>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <hourSetISR+0x118>)
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	e000      	b.n	80011f8 <hourSetISR+0xc8>
		}
		else {
			__NOP();
 80011f6:	46c0      	nop			@ (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80011f8:	4913      	ldr	r1, [pc, #76]	@ (8001248 <hourSetISR+0x118>)
 80011fa:	4b14      	ldr	r3, [pc, #80]	@ (800124c <hourSetISR+0x11c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	0018      	movs	r0, r3
 8001200:	f001 fff4 	bl	80031ec <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8001204:	f7ff fce0 	bl	8000bc8 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001208:	4a0e      	ldr	r2, [pc, #56]	@ (8001244 <hourSetISR+0x114>)
 800120a:	490f      	ldr	r1, [pc, #60]	@ (8001248 <hourSetISR+0x118>)
 800120c:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <hourSetISR+0x11c>)
 800120e:	0018      	movs	r0, r3
 8001210:	f7ff f924 	bl	800045c <getRTCTime>

		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001214:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <hourSetISR+0x118>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 800121a:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <hourSetISR+0x118>)
 800121c:	785b      	ldrb	r3, [r3, #1]
		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 800121e:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 8001220:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <hourSetISR+0x118>)
 8001222:	789b      	ldrb	r3, [r3, #2]
		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001224:	480a      	ldr	r0, [pc, #40]	@ (8001250 <hourSetISR+0x120>)
 8001226:	f004 f97b 	bl	8005520 <iprintf>
	}

	return halRet;
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	781b      	ldrb	r3, [r3, #0]
}
 800122e:	0018      	movs	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	b002      	add	sp, #8
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	08006518 	.word	0x08006518
 800123c:	20000260 	.word	0x20000260
 8001240:	08006530 	.word	0x08006530
 8001244:	20000234 	.word	0x20000234
 8001248:	20000220 	.word	0x20000220
 800124c:	200000c8 	.word	0x200000c8
 8001250:	0800655c 	.word	0x0800655c

08001254 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0

	printf("Entered minute set ISR.\n\r");
 800125a:	4b5a      	ldr	r3, [pc, #360]	@ (80013c4 <minuteSetISR+0x170>)
 800125c:	0018      	movs	r0, r3
 800125e:	f004 f95f 	bl	8005520 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == !GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 8001268:	2202      	movs	r2, #2
 800126a:	23a0      	movs	r3, #160	@ 0xa0
 800126c:	05db      	lsls	r3, r3, #23
 800126e:	0011      	movs	r1, r2
 8001270:	0018      	movs	r0, r3
 8001272:	f000 ffcd 	bl	8002210 <HAL_GPIO_ReadPin>
 8001276:	1e03      	subs	r3, r0, #0
 8001278:	d145      	bne.n	8001306 <minuteSetISR+0xb2>

		if(userAlarmTime.Minutes >= 59) {
 800127a:	4b53      	ldr	r3, [pc, #332]	@ (80013c8 <minuteSetISR+0x174>)
 800127c:	785b      	ldrb	r3, [r3, #1]
 800127e:	2b3a      	cmp	r3, #58	@ 0x3a
 8001280:	d929      	bls.n	80012d6 <minuteSetISR+0x82>
			userAlarmTime.Minutes = 0;
 8001282:	4b51      	ldr	r3, [pc, #324]	@ (80013c8 <minuteSetISR+0x174>)
 8001284:	2200      	movs	r2, #0
 8001286:	705a      	strb	r2, [r3, #1]
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001288:	4b4f      	ldr	r3, [pc, #316]	@ (80013c8 <minuteSetISR+0x174>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b4d      	ldr	r3, [pc, #308]	@ (80013c8 <minuteSetISR+0x174>)
 8001292:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.Hours > 12) {
 8001294:	4b4c      	ldr	r3, [pc, #304]	@ (80013c8 <minuteSetISR+0x174>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b0c      	cmp	r3, #12
 800129a:	d902      	bls.n	80012a2 <minuteSetISR+0x4e>
				userAlarmTime.Hours = 1;
 800129c:	4b4a      	ldr	r3, [pc, #296]	@ (80013c8 <minuteSetISR+0x174>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
			}
			if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80012a2:	4b49      	ldr	r3, [pc, #292]	@ (80013c8 <minuteSetISR+0x174>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b0c      	cmp	r3, #12
 80012a8:	d107      	bne.n	80012ba <minuteSetISR+0x66>
 80012aa:	4b47      	ldr	r3, [pc, #284]	@ (80013c8 <minuteSetISR+0x174>)
 80012ac:	78db      	ldrb	r3, [r3, #3]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d103      	bne.n	80012ba <minuteSetISR+0x66>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80012b2:	4b45      	ldr	r3, [pc, #276]	@ (80013c8 <minuteSetISR+0x174>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	70da      	strb	r2, [r3, #3]
 80012b8:	e019      	b.n	80012ee <minuteSetISR+0x9a>
			} else if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 80012ba:	4b43      	ldr	r3, [pc, #268]	@ (80013c8 <minuteSetISR+0x174>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b0c      	cmp	r3, #12
 80012c0:	d107      	bne.n	80012d2 <minuteSetISR+0x7e>
 80012c2:	4b41      	ldr	r3, [pc, #260]	@ (80013c8 <minuteSetISR+0x174>)
 80012c4:	78db      	ldrb	r3, [r3, #3]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d103      	bne.n	80012d2 <minuteSetISR+0x7e>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80012ca:	4b3f      	ldr	r3, [pc, #252]	@ (80013c8 <minuteSetISR+0x174>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	70da      	strb	r2, [r3, #3]
 80012d0:	e00d      	b.n	80012ee <minuteSetISR+0x9a>
			}
			else {
				__NOP();
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	e00b      	b.n	80012ee <minuteSetISR+0x9a>
			}
		}
		else if(userAlarmTime.Minutes < 59) {
 80012d6:	4b3c      	ldr	r3, [pc, #240]	@ (80013c8 <minuteSetISR+0x174>)
 80012d8:	785b      	ldrb	r3, [r3, #1]
 80012da:	2b3a      	cmp	r3, #58	@ 0x3a
 80012dc:	d806      	bhi.n	80012ec <minuteSetISR+0x98>
			userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 80012de:	4b3a      	ldr	r3, [pc, #232]	@ (80013c8 <minuteSetISR+0x174>)
 80012e0:	785b      	ldrb	r3, [r3, #1]
 80012e2:	3301      	adds	r3, #1
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b38      	ldr	r3, [pc, #224]	@ (80013c8 <minuteSetISR+0x174>)
 80012e8:	705a      	strb	r2, [r3, #1]
 80012ea:	e000      	b.n	80012ee <minuteSetISR+0x9a>
		}
		else {
			__NOP();
 80012ec:	46c0      	nop			@ (mov r8, r8)
		}

		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 80012ee:	4b36      	ldr	r3, [pc, #216]	@ (80013c8 <minuteSetISR+0x174>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	0019      	movs	r1, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 80012f4:	4b34      	ldr	r3, [pc, #208]	@ (80013c8 <minuteSetISR+0x174>)
 80012f6:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 80012f8:	001a      	movs	r2, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 80012fa:	4b33      	ldr	r3, [pc, #204]	@ (80013c8 <minuteSetISR+0x174>)
 80012fc:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 80012fe:	4833      	ldr	r0, [pc, #204]	@ (80013cc <minuteSetISR+0x178>)
 8001300:	f004 f90e 	bl	8005520 <iprintf>
 8001304:	e058      	b.n	80013b8 <minuteSetISR+0x164>

	}
	else {									// Otherwise, change current time hour.

		getRTCTime(&hrtc, &currTime, &currDate);
 8001306:	4a32      	ldr	r2, [pc, #200]	@ (80013d0 <minuteSetISR+0x17c>)
 8001308:	4932      	ldr	r1, [pc, #200]	@ (80013d4 <minuteSetISR+0x180>)
 800130a:	4b33      	ldr	r3, [pc, #204]	@ (80013d8 <minuteSetISR+0x184>)
 800130c:	0018      	movs	r0, r3
 800130e:	f7ff f8a5 	bl	800045c <getRTCTime>

		if(currTime.Minutes >= 59) {
 8001312:	4b30      	ldr	r3, [pc, #192]	@ (80013d4 <minuteSetISR+0x180>)
 8001314:	785b      	ldrb	r3, [r3, #1]
 8001316:	2b3a      	cmp	r3, #58	@ 0x3a
 8001318:	d929      	bls.n	800136e <minuteSetISR+0x11a>
			currTime.Minutes = 0;
 800131a:	4b2e      	ldr	r3, [pc, #184]	@ (80013d4 <minuteSetISR+0x180>)
 800131c:	2200      	movs	r2, #0
 800131e:	705a      	strb	r2, [r3, #1]
			currTime.Hours = currTime.Hours + 1;
 8001320:	4b2c      	ldr	r3, [pc, #176]	@ (80013d4 <minuteSetISR+0x180>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b2a      	ldr	r3, [pc, #168]	@ (80013d4 <minuteSetISR+0x180>)
 800132a:	701a      	strb	r2, [r3, #0]
			if(currTime.Hours > 12) {
 800132c:	4b29      	ldr	r3, [pc, #164]	@ (80013d4 <minuteSetISR+0x180>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b0c      	cmp	r3, #12
 8001332:	d902      	bls.n	800133a <minuteSetISR+0xe6>
				currTime.Hours = 1;
 8001334:	4b27      	ldr	r3, [pc, #156]	@ (80013d4 <minuteSetISR+0x180>)
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
			}
			if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800133a:	4b26      	ldr	r3, [pc, #152]	@ (80013d4 <minuteSetISR+0x180>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b0c      	cmp	r3, #12
 8001340:	d107      	bne.n	8001352 <minuteSetISR+0xfe>
 8001342:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <minuteSetISR+0x180>)
 8001344:	78db      	ldrb	r3, [r3, #3]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d103      	bne.n	8001352 <minuteSetISR+0xfe>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800134a:	4b22      	ldr	r3, [pc, #136]	@ (80013d4 <minuteSetISR+0x180>)
 800134c:	2201      	movs	r2, #1
 800134e:	70da      	strb	r2, [r3, #3]
 8001350:	e019      	b.n	8001386 <minuteSetISR+0x132>
			} else if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 8001352:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <minuteSetISR+0x180>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b0c      	cmp	r3, #12
 8001358:	d107      	bne.n	800136a <minuteSetISR+0x116>
 800135a:	4b1e      	ldr	r3, [pc, #120]	@ (80013d4 <minuteSetISR+0x180>)
 800135c:	78db      	ldrb	r3, [r3, #3]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d103      	bne.n	800136a <minuteSetISR+0x116>
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001362:	4b1c      	ldr	r3, [pc, #112]	@ (80013d4 <minuteSetISR+0x180>)
 8001364:	2200      	movs	r2, #0
 8001366:	70da      	strb	r2, [r3, #3]
 8001368:	e00d      	b.n	8001386 <minuteSetISR+0x132>
			}
			else {
				__NOP();
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	e00b      	b.n	8001386 <minuteSetISR+0x132>
			}
		}
		else if(currTime.Minutes < 59) {
 800136e:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <minuteSetISR+0x180>)
 8001370:	785b      	ldrb	r3, [r3, #1]
 8001372:	2b3a      	cmp	r3, #58	@ 0x3a
 8001374:	d806      	bhi.n	8001384 <minuteSetISR+0x130>
			currTime.Minutes = currTime.Minutes + 1;
 8001376:	4b17      	ldr	r3, [pc, #92]	@ (80013d4 <minuteSetISR+0x180>)
 8001378:	785b      	ldrb	r3, [r3, #1]
 800137a:	3301      	adds	r3, #1
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <minuteSetISR+0x180>)
 8001380:	705a      	strb	r2, [r3, #1]
 8001382:	e000      	b.n	8001386 <minuteSetISR+0x132>
		}
		else {
			__NOP();
 8001384:	46c0      	nop			@ (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001386:	4913      	ldr	r1, [pc, #76]	@ (80013d4 <minuteSetISR+0x180>)
 8001388:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <minuteSetISR+0x184>)
 800138a:	2200      	movs	r2, #0
 800138c:	0018      	movs	r0, r3
 800138e:	f001 ff2d 	bl	80031ec <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8001392:	f7ff fc19 	bl	8000bc8 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001396:	4a0e      	ldr	r2, [pc, #56]	@ (80013d0 <minuteSetISR+0x17c>)
 8001398:	490e      	ldr	r1, [pc, #56]	@ (80013d4 <minuteSetISR+0x180>)
 800139a:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <minuteSetISR+0x184>)
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff f85d 	bl	800045c <getRTCTime>

		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <minuteSetISR+0x180>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <minuteSetISR+0x180>)
 80013aa:	785b      	ldrb	r3, [r3, #1]
		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 80013ac:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <minuteSetISR+0x180>)
 80013b0:	789b      	ldrb	r3, [r3, #2]
		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 80013b2:	480a      	ldr	r0, [pc, #40]	@ (80013dc <minuteSetISR+0x188>)
 80013b4:	f004 f8b4 	bl	8005520 <iprintf>
	}

	return halRet;
 80013b8:	1dfb      	adds	r3, r7, #7
 80013ba:	781b      	ldrb	r3, [r3, #0]
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	b002      	add	sp, #8
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	0800658c 	.word	0x0800658c
 80013c8:	20000260 	.word	0x20000260
 80013cc:	080065a8 	.word	0x080065a8
 80013d0:	20000234 	.word	0x20000234
 80013d4:	20000220 	.word	0x20000220
 80013d8:	200000c8 	.word	0x200000c8
 80013dc:	080065d4 	.word	0x080065d4

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	46c0      	nop			@ (mov r8, r8)
 80013ea:	e7fd      	b.n	80013e8 <Error_Handler+0x8>

080013ec <sevSeg_Init>:
GPIO_PinState GPIOPinSet[2] = {GPIO_PIN_RESET, GPIO_PIN_SET};


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM) {
 80013ec:	b5b0      	push	{r4, r5, r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	0005      	movs	r5, r0
 80013f4:	000c      	movs	r4, r1
 80013f6:	0010      	movs	r0, r2
 80013f8:	0019      	movs	r1, r3
 80013fa:	1dbb      	adds	r3, r7, #6
 80013fc:	1c2a      	adds	r2, r5, #0
 80013fe:	801a      	strh	r2, [r3, #0]
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	1c22      	adds	r2, r4, #0
 8001404:	801a      	strh	r2, [r3, #0]
 8001406:	1cbb      	adds	r3, r7, #2
 8001408:	1c02      	adds	r2, r0, #0
 800140a:	801a      	strh	r2, [r3, #0]
 800140c:	003b      	movs	r3, r7
 800140e:	1c0a      	adds	r2, r1, #0
 8001410:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001412:	4b7a      	ldr	r3, [pc, #488]	@ (80015fc <sevSeg_Init+0x210>)
 8001414:	1dba      	adds	r2, r7, #6
 8001416:	8812      	ldrh	r2, [r2, #0]
 8001418:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 800141a:	4b79      	ldr	r3, [pc, #484]	@ (8001600 <sevSeg_Init+0x214>)
 800141c:	1d3a      	adds	r2, r7, #4
 800141e:	8812      	ldrh	r2, [r2, #0]
 8001420:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001422:	4b78      	ldr	r3, [pc, #480]	@ (8001604 <sevSeg_Init+0x218>)
 8001424:	1cba      	adds	r2, r7, #2
 8001426:	8812      	ldrh	r2, [r2, #0]
 8001428:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 800142a:	4b77      	ldr	r3, [pc, #476]	@ (8001608 <sevSeg_Init+0x21c>)
 800142c:	003a      	movs	r2, r7
 800142e:	8812      	ldrh	r2, [r2, #0]
 8001430:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001432:	4a76      	ldr	r2, [pc, #472]	@ (800160c <sevSeg_Init+0x220>)
 8001434:	2330      	movs	r3, #48	@ 0x30
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	8013      	strh	r3, [r2, #0]

	for(int i = 0; i < 5; i++) {
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	e00b      	b.n	800145a <sevSeg_Init+0x6e>
		portArray[i] = GPIOPortArray[i];
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001448:	18d3      	adds	r3, r2, r3
 800144a:	6819      	ldr	r1, [r3, #0]
 800144c:	4b70      	ldr	r3, [pc, #448]	@ (8001610 <sevSeg_Init+0x224>)
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	0092      	lsls	r2, r2, #2
 8001452:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	3301      	adds	r3, #1
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	2b04      	cmp	r3, #4
 800145e:	ddf0      	ble.n	8001442 <sevSeg_Init+0x56>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001460:	4b6b      	ldr	r3, [pc, #428]	@ (8001610 <sevSeg_Init+0x224>)
 8001462:	6918      	ldr	r0, [r3, #16]
 8001464:	4b69      	ldr	r3, [pc, #420]	@ (800160c <sevSeg_Init+0x220>)
 8001466:	8819      	ldrh	r1, [r3, #0]
 8001468:	4b6a      	ldr	r3, [pc, #424]	@ (8001614 <sevSeg_Init+0x228>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	001a      	movs	r2, r3
 800146e:	f000 feec 	bl	800224a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001472:	4b67      	ldr	r3, [pc, #412]	@ (8001610 <sevSeg_Init+0x224>)
 8001474:	6918      	ldr	r0, [r3, #16]
 8001476:	4b65      	ldr	r3, [pc, #404]	@ (800160c <sevSeg_Init+0x220>)
 8001478:	8819      	ldrh	r1, [r3, #0]
 800147a:	4b66      	ldr	r3, [pc, #408]	@ (8001614 <sevSeg_Init+0x228>)
 800147c:	785b      	ldrb	r3, [r3, #1]
 800147e:	001a      	movs	r2, r3
 8001480:	f000 fee3 	bl	800224a <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001484:	4b62      	ldr	r3, [pc, #392]	@ (8001610 <sevSeg_Init+0x224>)
 8001486:	6898      	ldr	r0, [r3, #8]
 8001488:	4b5e      	ldr	r3, [pc, #376]	@ (8001604 <sevSeg_Init+0x218>)
 800148a:	8819      	ldrh	r1, [r3, #0]
 800148c:	4b61      	ldr	r3, [pc, #388]	@ (8001614 <sevSeg_Init+0x228>)
 800148e:	785b      	ldrb	r3, [r3, #1]
 8001490:	001a      	movs	r2, r3
 8001492:	f000 feda 	bl	800224a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001496:	4b5e      	ldr	r3, [pc, #376]	@ (8001610 <sevSeg_Init+0x224>)
 8001498:	6898      	ldr	r0, [r3, #8]
 800149a:	4b5a      	ldr	r3, [pc, #360]	@ (8001604 <sevSeg_Init+0x218>)
 800149c:	8819      	ldrh	r1, [r3, #0]
 800149e:	4b5d      	ldr	r3, [pc, #372]	@ (8001614 <sevSeg_Init+0x228>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	001a      	movs	r2, r3
 80014a4:	f000 fed1 	bl	800224a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 80014a8:	4b59      	ldr	r3, [pc, #356]	@ (8001610 <sevSeg_Init+0x224>)
 80014aa:	68d8      	ldr	r0, [r3, #12]
 80014ac:	4b56      	ldr	r3, [pc, #344]	@ (8001608 <sevSeg_Init+0x21c>)
 80014ae:	8819      	ldrh	r1, [r3, #0]
 80014b0:	4b58      	ldr	r3, [pc, #352]	@ (8001614 <sevSeg_Init+0x228>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	001a      	movs	r2, r3
 80014b6:	f000 fec8 	bl	800224a <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(htim_PWM, 90);
 80014ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014bc:	215a      	movs	r1, #90	@ 0x5a
 80014be:	0018      	movs	r0, r3
 80014c0:	f000 f95e 	bl	8001780 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 80014c4:	2308      	movs	r3, #8
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	4a53      	ldr	r2, [pc, #332]	@ (8001618 <sevSeg_Init+0x22c>)
 80014ca:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	e038      	b.n	8001544 <sevSeg_Init+0x158>

		sendByte = hofSymb[i];
 80014d2:	231b      	movs	r3, #27
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	2208      	movs	r2, #8
 80014d8:	18b9      	adds	r1, r7, r2
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	188a      	adds	r2, r1, r2
 80014de:	7812      	ldrb	r2, [r2, #0]
 80014e0:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	e027      	b.n	8001538 <sevSeg_Init+0x14c>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 80014e8:	4b49      	ldr	r3, [pc, #292]	@ (8001610 <sevSeg_Init+0x224>)
 80014ea:	6818      	ldr	r0, [r3, #0]
 80014ec:	4b43      	ldr	r3, [pc, #268]	@ (80015fc <sevSeg_Init+0x210>)
 80014ee:	8819      	ldrh	r1, [r3, #0]
 80014f0:	241b      	movs	r4, #27
 80014f2:	193b      	adds	r3, r7, r4
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2201      	movs	r2, #1
 80014f8:	4013      	ands	r3, r2
 80014fa:	4a46      	ldr	r2, [pc, #280]	@ (8001614 <sevSeg_Init+0x228>)
 80014fc:	5cd3      	ldrb	r3, [r2, r3]
 80014fe:	001a      	movs	r2, r3
 8001500:	f000 fea3 	bl	800224a <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001504:	4b42      	ldr	r3, [pc, #264]	@ (8001610 <sevSeg_Init+0x224>)
 8001506:	6858      	ldr	r0, [r3, #4]
 8001508:	4b3d      	ldr	r3, [pc, #244]	@ (8001600 <sevSeg_Init+0x214>)
 800150a:	8819      	ldrh	r1, [r3, #0]
 800150c:	4b41      	ldr	r3, [pc, #260]	@ (8001614 <sevSeg_Init+0x228>)
 800150e:	785b      	ldrb	r3, [r3, #1]
 8001510:	001a      	movs	r2, r3
 8001512:	f000 fe9a 	bl	800224a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001516:	4b3e      	ldr	r3, [pc, #248]	@ (8001610 <sevSeg_Init+0x224>)
 8001518:	6858      	ldr	r0, [r3, #4]
 800151a:	4b39      	ldr	r3, [pc, #228]	@ (8001600 <sevSeg_Init+0x214>)
 800151c:	8819      	ldrh	r1, [r3, #0]
 800151e:	4b3d      	ldr	r3, [pc, #244]	@ (8001614 <sevSeg_Init+0x228>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	001a      	movs	r2, r3
 8001524:	f000 fe91 	bl	800224a <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001528:	193b      	adds	r3, r7, r4
 800152a:	193a      	adds	r2, r7, r4
 800152c:	7812      	ldrb	r2, [r2, #0]
 800152e:	0852      	lsrs	r2, r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	3301      	adds	r3, #1
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b07      	cmp	r3, #7
 800153c:	ddd4      	ble.n	80014e8 <sevSeg_Init+0xfc>
	for(int i = 0; i <= 3; i++) {
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	2b03      	cmp	r3, #3
 8001548:	ddc3      	ble.n	80014d2 <sevSeg_Init+0xe6>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 800154a:	4b31      	ldr	r3, [pc, #196]	@ (8001610 <sevSeg_Init+0x224>)
 800154c:	6898      	ldr	r0, [r3, #8]
 800154e:	4b2d      	ldr	r3, [pc, #180]	@ (8001604 <sevSeg_Init+0x218>)
 8001550:	8819      	ldrh	r1, [r3, #0]
 8001552:	4b30      	ldr	r3, [pc, #192]	@ (8001614 <sevSeg_Init+0x228>)
 8001554:	785b      	ldrb	r3, [r3, #1]
 8001556:	001a      	movs	r2, r3
 8001558:	f000 fe77 	bl	800224a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800155c:	4b2c      	ldr	r3, [pc, #176]	@ (8001610 <sevSeg_Init+0x224>)
 800155e:	6898      	ldr	r0, [r3, #8]
 8001560:	4b28      	ldr	r3, [pc, #160]	@ (8001604 <sevSeg_Init+0x218>)
 8001562:	8819      	ldrh	r1, [r3, #0]
 8001564:	4b2b      	ldr	r3, [pc, #172]	@ (8001614 <sevSeg_Init+0x228>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	001a      	movs	r2, r3
 800156a:	f000 fe6e 	bl	800224a <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 800156e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001570:	0018      	movs	r0, r3
 8001572:	f002 fb3d 	bl	8003bf0 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8001576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001578:	0018      	movs	r0, r3
 800157a:	f002 faed 	bl	8003b58 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 800157e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001584:	60fb      	str	r3, [r7, #12]
	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 2)){ timerVal = __HAL_TIM_GET_COUNTER(htim); }
 8001586:	e003      	b.n	8001590 <sevSeg_Init+0x1a4>
 8001588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1ad2      	subs	r2, r2, r3
 800159a:	2380      	movs	r3, #128	@ 0x80
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	429a      	cmp	r2, r3
 80015a0:	d3f2      	bcc.n	8001588 <sevSeg_Init+0x19c>

	HAL_TIM_Base_Stop(htim);
 80015a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015a4:	0018      	movs	r0, r3
 80015a6:	f002 fb23 	bl	8003bf0 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 80015aa:	4b19      	ldr	r3, [pc, #100]	@ (8001610 <sevSeg_Init+0x224>)
 80015ac:	6918      	ldr	r0, [r3, #16]
 80015ae:	4b17      	ldr	r3, [pc, #92]	@ (800160c <sevSeg_Init+0x220>)
 80015b0:	8819      	ldrh	r1, [r3, #0]
 80015b2:	4b18      	ldr	r3, [pc, #96]	@ (8001614 <sevSeg_Init+0x228>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	001a      	movs	r2, r3
 80015b8:	f000 fe47 	bl	800224a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 80015bc:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <sevSeg_Init+0x224>)
 80015be:	6918      	ldr	r0, [r3, #16]
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <sevSeg_Init+0x220>)
 80015c2:	8819      	ldrh	r1, [r3, #0]
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <sevSeg_Init+0x228>)
 80015c6:	785b      	ldrb	r3, [r3, #1]
 80015c8:	001a      	movs	r2, r3
 80015ca:	f000 fe3e 	bl	800224a <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80015ce:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <sevSeg_Init+0x224>)
 80015d0:	6898      	ldr	r0, [r3, #8]
 80015d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <sevSeg_Init+0x218>)
 80015d4:	8819      	ldrh	r1, [r3, #0]
 80015d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <sevSeg_Init+0x228>)
 80015d8:	785b      	ldrb	r3, [r3, #1]
 80015da:	001a      	movs	r2, r3
 80015dc:	f000 fe35 	bl	800224a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80015e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <sevSeg_Init+0x224>)
 80015e2:	6898      	ldr	r0, [r3, #8]
 80015e4:	4b07      	ldr	r3, [pc, #28]	@ (8001604 <sevSeg_Init+0x218>)
 80015e6:	8819      	ldrh	r1, [r3, #0]
 80015e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <sevSeg_Init+0x228>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	001a      	movs	r2, r3
 80015ee:	f000 fe2c 	bl	800224a <HAL_GPIO_WritePin>

}
 80015f2:	46c0      	nop			@ (mov r8, r8)
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b008      	add	sp, #32
 80015f8:	bdb0      	pop	{r4, r5, r7, pc}
 80015fa:	46c0      	nop			@ (mov r8, r8)
 80015fc:	20000274 	.word	0x20000274
 8001600:	20000276 	.word	0x20000276
 8001604:	20000278 	.word	0x20000278
 8001608:	2000027a 	.word	0x2000027a
 800160c:	2000027c 	.word	0x2000027c
 8001610:	20000028 	.word	0x20000028
 8001614:	2000003c 	.word	0x2000003c
 8001618:	471d3700 	.word	0x471d3700

0800161c <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	210a      	movs	r1, #10
 800162a:	0018      	movs	r0, r3
 800162c:	f7fe fd74 	bl	8000118 <__udivsi3>
 8001630:	0003      	movs	r3, r0
 8001632:	b2da      	uxtb	r2, r3
 8001634:	2408      	movs	r4, #8
 8001636:	193b      	adds	r3, r7, r4
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	210a      	movs	r1, #10
 8001640:	0018      	movs	r0, r3
 8001642:	f7fe fdef 	bl	8000224 <__aeabi_uidivmod>
 8001646:	000b      	movs	r3, r1
 8001648:	b2da      	uxtb	r2, r3
 800164a:	193b      	adds	r3, r7, r4
 800164c:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001652:	210a      	movs	r1, #10
 8001654:	0018      	movs	r0, r3
 8001656:	f7fe fd5f 	bl	8000118 <__udivsi3>
 800165a:	0003      	movs	r3, r0
 800165c:	b2da      	uxtb	r2, r3
 800165e:	193b      	adds	r3, r7, r4
 8001660:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001666:	210a      	movs	r1, #10
 8001668:	0018      	movs	r0, r3
 800166a:	f7fe fddb 	bl	8000224 <__aeabi_uidivmod>
 800166e:	000b      	movs	r3, r1
 8001670:	b2da      	uxtb	r2, r3
 8001672:	193b      	adds	r3, r7, r4
 8001674:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 8001676:	2116      	movs	r1, #22
 8001678:	187b      	adds	r3, r7, r1
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	78db      	ldrb	r3, [r3, #3]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d102      	bne.n	800168c <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 8001686:	187b      	adds	r3, r7, r1
 8001688:	2202      	movs	r2, #2
 800168a:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	e04f      	b.n	8001732 <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 8001692:	2308      	movs	r3, #8
 8001694:	18fa      	adds	r2, r7, r3
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	18d3      	adds	r3, r2, r3
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	0019      	movs	r1, r3
 800169e:	2417      	movs	r4, #23
 80016a0:	193b      	adds	r3, r7, r4
 80016a2:	4a30      	ldr	r2, [pc, #192]	@ (8001764 <sevSeg_updateDigits+0x148>)
 80016a4:	5c52      	ldrb	r2, [r2, r1]
 80016a6:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d110      	bne.n	80016d0 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	210a      	movs	r1, #10
 80016b4:	0018      	movs	r0, r3
 80016b6:	f7fe fd2f 	bl	8000118 <__udivsi3>
 80016ba:	0003      	movs	r3, r0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	001a      	movs	r2, r3
 80016c0:	2316      	movs	r3, #22
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	18d2      	adds	r2, r2, r3
 80016c8:	193b      	adds	r3, r7, r4
 80016ca:	4927      	ldr	r1, [pc, #156]	@ (8001768 <sevSeg_updateDigits+0x14c>)
 80016cc:	5c8a      	ldrb	r2, [r1, r2]
 80016ce:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	e027      	b.n	8001726 <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 80016d6:	4b25      	ldr	r3, [pc, #148]	@ (800176c <sevSeg_updateDigits+0x150>)
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <sevSeg_updateDigits+0x154>)
 80016dc:	8819      	ldrh	r1, [r3, #0]
 80016de:	2417      	movs	r4, #23
 80016e0:	193b      	adds	r3, r7, r4
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2201      	movs	r2, #1
 80016e6:	4013      	ands	r3, r2
 80016e8:	4a22      	ldr	r2, [pc, #136]	@ (8001774 <sevSeg_updateDigits+0x158>)
 80016ea:	5cd3      	ldrb	r3, [r2, r3]
 80016ec:	001a      	movs	r2, r3
 80016ee:	f000 fdac 	bl	800224a <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 80016f2:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <sevSeg_updateDigits+0x150>)
 80016f4:	6858      	ldr	r0, [r3, #4]
 80016f6:	4b20      	ldr	r3, [pc, #128]	@ (8001778 <sevSeg_updateDigits+0x15c>)
 80016f8:	8819      	ldrh	r1, [r3, #0]
 80016fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001774 <sevSeg_updateDigits+0x158>)
 80016fc:	785b      	ldrb	r3, [r3, #1]
 80016fe:	001a      	movs	r2, r3
 8001700:	f000 fda3 	bl	800224a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <sevSeg_updateDigits+0x150>)
 8001706:	6858      	ldr	r0, [r3, #4]
 8001708:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <sevSeg_updateDigits+0x15c>)
 800170a:	8819      	ldrh	r1, [r3, #0]
 800170c:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <sevSeg_updateDigits+0x158>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	001a      	movs	r2, r3
 8001712:	f000 fd9a 	bl	800224a <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001716:	193b      	adds	r3, r7, r4
 8001718:	193a      	adds	r2, r7, r4
 800171a:	7812      	ldrb	r2, [r2, #0]
 800171c:	0852      	lsrs	r2, r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3301      	adds	r3, #1
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b07      	cmp	r3, #7
 800172a:	ddd4      	ble.n	80016d6 <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	3301      	adds	r3, #1
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	2b03      	cmp	r3, #3
 8001736:	ddac      	ble.n	8001692 <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001738:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <sevSeg_updateDigits+0x150>)
 800173a:	6898      	ldr	r0, [r3, #8]
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <sevSeg_updateDigits+0x160>)
 800173e:	8819      	ldrh	r1, [r3, #0]
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <sevSeg_updateDigits+0x158>)
 8001742:	785b      	ldrb	r3, [r3, #1]
 8001744:	001a      	movs	r2, r3
 8001746:	f000 fd80 	bl	800224a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <sevSeg_updateDigits+0x150>)
 800174c:	6898      	ldr	r0, [r3, #8]
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <sevSeg_updateDigits+0x160>)
 8001750:	8819      	ldrh	r1, [r3, #0]
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <sevSeg_updateDigits+0x158>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	001a      	movs	r2, r3
 8001758:	f000 fd77 	bl	800224a <HAL_GPIO_WritePin>

	return;
 800175c:	46c0      	nop			@ (mov r8, r8)

}
 800175e:	46bd      	mov	sp, r7
 8001760:	b007      	add	sp, #28
 8001762:	bd90      	pop	{r4, r7, pc}
 8001764:	08006608 	.word	0x08006608
 8001768:	08006614 	.word	0x08006614
 800176c:	20000028 	.word	0x20000028
 8001770:	20000274 	.word	0x20000274
 8001774:	2000003c 	.word	0x2000003c
 8001778:	20000276 	.word	0x20000276
 800177c:	20000278 	.word	0x20000278

08001780 <sevSeg_setIntensity>:

void sevSeg_setIntensity(TIM_HandleTypeDef *htim_PWM, uint16_t dutyCycle) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	000a      	movs	r2, r1
 800178a:	1cbb      	adds	r3, r7, #2
 800178c:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(htim_PWM, TIM_CHANNEL_2, dutyCycle);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	1cba      	adds	r2, r7, #2
 8001794:	8812      	ldrh	r2, [r2, #0]
 8001796:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Start(htim_PWM, TIM_CHANNEL_2);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2104      	movs	r1, #4
 800179c:	0018      	movs	r0, r3
 800179e:	f002 faa5 	bl	8003cec <HAL_TIM_PWM_Start>

}
 80017a2:	46c0      	nop			@ (mov r8, r8)
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <HAL_MspInit+0x54>)
 80017b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017b6:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <HAL_MspInit+0x54>)
 80017b8:	2101      	movs	r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80017be:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <HAL_MspInit+0x54>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	2201      	movs	r2, #1
 80017c4:	4013      	ands	r3, r2
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <HAL_MspInit+0x54>)
 80017cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <HAL_MspInit+0x54>)
 80017d0:	2180      	movs	r1, #128	@ 0x80
 80017d2:	0549      	lsls	r1, r1, #21
 80017d4:	430a      	orrs	r2, r1
 80017d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017d8:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <HAL_MspInit+0x54>)
 80017da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017dc:	2380      	movs	r3, #128	@ 0x80
 80017de:	055b      	lsls	r3, r3, #21
 80017e0:	4013      	ands	r3, r2
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2100      	movs	r1, #0
 80017ea:	2001      	movs	r0, #1
 80017ec:	f000 fb7a 	bl	8001ee4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80017f0:	2001      	movs	r0, #1
 80017f2:	f000 fb8c 	bl	8001f0e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	46c0      	nop			@ (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b002      	add	sp, #8
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			@ (mov r8, r8)
 8001800:	40021000 	.word	0x40021000

08001804 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b08f      	sub	sp, #60	@ 0x3c
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800180c:	2410      	movs	r4, #16
 800180e:	193b      	adds	r3, r7, r4
 8001810:	0018      	movs	r0, r3
 8001812:	2328      	movs	r3, #40	@ 0x28
 8001814:	001a      	movs	r2, r3
 8001816:	2100      	movs	r1, #0
 8001818:	f003 fede 	bl	80055d8 <memset>
  if(hrtc->Instance==RTC)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a19      	ldr	r2, [pc, #100]	@ (8001888 <HAL_RTC_MspInit+0x84>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d12c      	bne.n	8001880 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001826:	193b      	adds	r3, r7, r4
 8001828:	2280      	movs	r2, #128	@ 0x80
 800182a:	0292      	lsls	r2, r2, #10
 800182c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800182e:	193b      	adds	r3, r7, r4
 8001830:	2280      	movs	r2, #128	@ 0x80
 8001832:	0052      	lsls	r2, r2, #1
 8001834:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001836:	193b      	adds	r3, r7, r4
 8001838:	0018      	movs	r0, r3
 800183a:	f001 fabb 	bl	8002db4 <HAL_RCCEx_PeriphCLKConfig>
 800183e:	1e03      	subs	r3, r0, #0
 8001840:	d001      	beq.n	8001846 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001842:	f7ff fdcd 	bl	80013e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001846:	4b11      	ldr	r3, [pc, #68]	@ (800188c <HAL_RTC_MspInit+0x88>)
 8001848:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800184a:	4b10      	ldr	r3, [pc, #64]	@ (800188c <HAL_RTC_MspInit+0x88>)
 800184c:	2180      	movs	r1, #128	@ 0x80
 800184e:	0209      	lsls	r1, r1, #8
 8001850:	430a      	orrs	r2, r1
 8001852:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001854:	4b0d      	ldr	r3, [pc, #52]	@ (800188c <HAL_RTC_MspInit+0x88>)
 8001856:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001858:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <HAL_RTC_MspInit+0x88>)
 800185a:	2180      	movs	r1, #128	@ 0x80
 800185c:	00c9      	lsls	r1, r1, #3
 800185e:	430a      	orrs	r2, r1
 8001860:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001862:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <HAL_RTC_MspInit+0x88>)
 8001864:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001866:	2380      	movs	r3, #128	@ 0x80
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4013      	ands	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	2002      	movs	r0, #2
 8001876:	f000 fb35 	bl	8001ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800187a:	2002      	movs	r0, #2
 800187c:	f000 fb47 	bl	8001f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001880:	46c0      	nop			@ (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b00f      	add	sp, #60	@ 0x3c
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	40002800 	.word	0x40002800
 800188c:	40021000 	.word	0x40021000

08001890 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b08f      	sub	sp, #60	@ 0x3c
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001898:	2410      	movs	r4, #16
 800189a:	193b      	adds	r3, r7, r4
 800189c:	0018      	movs	r0, r3
 800189e:	2328      	movs	r3, #40	@ 0x28
 80018a0:	001a      	movs	r2, r3
 80018a2:	2100      	movs	r1, #0
 80018a4:	f003 fe98 	bl	80055d8 <memset>
  if(htim_pwm->Instance==TIM1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a11      	ldr	r2, [pc, #68]	@ (80018f4 <HAL_TIM_PWM_MspInit+0x64>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d11c      	bne.n	80018ec <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80018b2:	193b      	adds	r3, r7, r4
 80018b4:	2280      	movs	r2, #128	@ 0x80
 80018b6:	0392      	lsls	r2, r2, #14
 80018b8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80018ba:	193b      	adds	r3, r7, r4
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c0:	193b      	adds	r3, r7, r4
 80018c2:	0018      	movs	r0, r3
 80018c4:	f001 fa76 	bl	8002db4 <HAL_RCCEx_PeriphCLKConfig>
 80018c8:	1e03      	subs	r3, r0, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 80018cc:	f7ff fd88 	bl	80013e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018d0:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <HAL_TIM_PWM_MspInit+0x68>)
 80018d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018d4:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <HAL_TIM_PWM_MspInit+0x68>)
 80018d6:	2180      	movs	r1, #128	@ 0x80
 80018d8:	0109      	lsls	r1, r1, #4
 80018da:	430a      	orrs	r2, r1
 80018dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <HAL_TIM_PWM_MspInit+0x68>)
 80018e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018e2:	2380      	movs	r3, #128	@ 0x80
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	4013      	ands	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018ec:	46c0      	nop			@ (mov r8, r8)
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b00f      	add	sp, #60	@ 0x3c
 80018f2:	bd90      	pop	{r4, r7, pc}
 80018f4:	40012c00 	.word	0x40012c00
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <HAL_TIM_Base_MspInit+0x38>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d10d      	bne.n	800192a <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800190e:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <HAL_TIM_Base_MspInit+0x3c>)
 8001910:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001912:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <HAL_TIM_Base_MspInit+0x3c>)
 8001914:	2180      	movs	r1, #128	@ 0x80
 8001916:	0289      	lsls	r1, r1, #10
 8001918:	430a      	orrs	r2, r1
 800191a:	641a      	str	r2, [r3, #64]	@ 0x40
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <HAL_TIM_Base_MspInit+0x3c>)
 800191e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001920:	2380      	movs	r3, #128	@ 0x80
 8001922:	029b      	lsls	r3, r3, #10
 8001924:	4013      	ands	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	b004      	add	sp, #16
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			@ (mov r8, r8)
 8001934:	40014400 	.word	0x40014400
 8001938:	40021000 	.word	0x40021000

0800193c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b089      	sub	sp, #36	@ 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	240c      	movs	r4, #12
 8001946:	193b      	adds	r3, r7, r4
 8001948:	0018      	movs	r0, r3
 800194a:	2314      	movs	r3, #20
 800194c:	001a      	movs	r2, r3
 800194e:	2100      	movs	r1, #0
 8001950:	f003 fe42 	bl	80055d8 <memset>
  if(htim->Instance==TIM1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a14      	ldr	r2, [pc, #80]	@ (80019ac <HAL_TIM_MspPostInit+0x70>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d121      	bne.n	80019a2 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <HAL_TIM_MspPostInit+0x74>)
 8001960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001962:	4b13      	ldr	r3, [pc, #76]	@ (80019b0 <HAL_TIM_MspPostInit+0x74>)
 8001964:	2102      	movs	r1, #2
 8001966:	430a      	orrs	r2, r1
 8001968:	635a      	str	r2, [r3, #52]	@ 0x34
 800196a:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <HAL_TIM_MspPostInit+0x74>)
 800196c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800196e:	2202      	movs	r2, #2
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Shift_Output_En_Pin;
 8001976:	0021      	movs	r1, r4
 8001978:	187b      	adds	r3, r7, r1
 800197a:	2208      	movs	r2, #8
 800197c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	187b      	adds	r3, r7, r1
 8001980:	2202      	movs	r2, #2
 8001982:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	187b      	adds	r3, r7, r1
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	187b      	adds	r3, r7, r1
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001990:	187b      	adds	r3, r7, r1
 8001992:	2201      	movs	r2, #1
 8001994:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Shift_Output_En_GPIO_Port, &GPIO_InitStruct);
 8001996:	187b      	adds	r3, r7, r1
 8001998:	4a06      	ldr	r2, [pc, #24]	@ (80019b4 <HAL_TIM_MspPostInit+0x78>)
 800199a:	0019      	movs	r1, r3
 800199c:	0010      	movs	r0, r2
 800199e:	f000 fad3 	bl	8001f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019a2:	46c0      	nop			@ (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b009      	add	sp, #36	@ 0x24
 80019a8:	bd90      	pop	{r4, r7, pc}
 80019aa:	46c0      	nop			@ (mov r8, r8)
 80019ac:	40012c00 	.word	0x40012c00
 80019b0:	40021000 	.word	0x40021000
 80019b4:	50000400 	.word	0x50000400

080019b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b08b      	sub	sp, #44	@ 0x2c
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	2414      	movs	r4, #20
 80019c2:	193b      	adds	r3, r7, r4
 80019c4:	0018      	movs	r0, r3
 80019c6:	2314      	movs	r3, #20
 80019c8:	001a      	movs	r2, r3
 80019ca:	2100      	movs	r1, #0
 80019cc:	f003 fe04 	bl	80055d8 <memset>
  if(huart->Instance==USART2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a44 <HAL_UART_MspInit+0x8c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d130      	bne.n	8001a3c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019da:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <HAL_UART_MspInit+0x90>)
 80019dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019de:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <HAL_UART_MspInit+0x90>)
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0289      	lsls	r1, r1, #10
 80019e4:	430a      	orrs	r2, r1
 80019e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019e8:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <HAL_UART_MspInit+0x90>)
 80019ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	029b      	lsls	r3, r3, #10
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <HAL_UART_MspInit+0x90>)
 80019f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019fa:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <HAL_UART_MspInit+0x90>)
 80019fc:	2101      	movs	r1, #1
 80019fe:	430a      	orrs	r2, r1
 8001a00:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <HAL_UART_MspInit+0x90>)
 8001a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a06:	2201      	movs	r2, #1
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001a0e:	0021      	movs	r1, r4
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	220c      	movs	r2, #12
 8001a14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	2202      	movs	r2, #2
 8001a1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a1c:	187b      	adds	r3, r7, r1
 8001a1e:	2201      	movs	r2, #1
 8001a20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	187b      	adds	r3, r7, r1
 8001a24:	2200      	movs	r2, #0
 8001a26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	187a      	adds	r2, r7, r1
 8001a30:	23a0      	movs	r3, #160	@ 0xa0
 8001a32:	05db      	lsls	r3, r3, #23
 8001a34:	0011      	movs	r1, r2
 8001a36:	0018      	movs	r0, r3
 8001a38:	f000 fa86 	bl	8001f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a3c:	46c0      	nop			@ (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b00b      	add	sp, #44	@ 0x2c
 8001a42:	bd90      	pop	{r4, r7, pc}
 8001a44:	40004400 	.word	0x40004400
 8001a48:	40021000 	.word	0x40021000

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a50:	46c0      	nop			@ (mov r8, r8)
 8001a52:	e7fd      	b.n	8001a50 <NMI_Handler+0x4>

08001a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a58:	46c0      	nop			@ (mov r8, r8)
 8001a5a:	e7fd      	b.n	8001a58 <HardFault_Handler+0x4>

08001a5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a60:	46c0      	nop			@ (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6a:	46c0      	nop			@ (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a74:	f000 f96e 	bl	8001d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a78:	46c0      	nop			@ (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001a82:	f000 fc9d 	bl	80023c0 <HAL_PWREx_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a90:	4b03      	ldr	r3, [pc, #12]	@ (8001aa0 <RTC_TAMP_IRQHandler+0x14>)
 8001a92:	0018      	movs	r0, r3
 8001a94:	f001 fece 	bl	8003834 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001a98:	46c0      	nop			@ (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			@ (mov r8, r8)
 8001aa0:	200000c8 	.word	0x200000c8

08001aa4 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Display_Button_Pin);
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f000 fc07 	bl	80022bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Set_Button_Pin);
 8001aae:	2002      	movs	r0, #2
 8001ab0:	f000 fc04 	bl	80022bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001ab4:	46c0      	nop			@ (mov r8, r8)
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_NRST_Pin);
 8001abe:	2004      	movs	r0, #4
 8001ac0:	f000 fbfc 	bl	80022bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001ac4:	46c0      	nop			@ (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Hour_Set_Button_Pin);
 8001ace:	2020      	movs	r0, #32
 8001ad0:	f000 fbf4 	bl	80022bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Enable_Button_Pin);
 8001ad4:	2040      	movs	r0, #64	@ 0x40
 8001ad6:	f000 fbf1 	bl	80022bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Minute_Set_Button_Pin);
 8001ada:	2380      	movs	r3, #128	@ 0x80
 8001adc:	015b      	lsls	r3, r3, #5
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f000 fbec 	bl	80022bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001ae4:	46c0      	nop			@ (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	e00a      	b.n	8001b12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001afc:	e000      	b.n	8001b00 <_read+0x16>
 8001afe:	bf00      	nop
 8001b00:	0001      	movs	r1, r0
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	60ba      	str	r2, [r7, #8]
 8001b08:	b2ca      	uxtb	r2, r1
 8001b0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	dbf0      	blt.n	8001afc <_read+0x12>
  }

  return len;
 8001b1a:	687b      	ldr	r3, [r7, #4]
}
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b006      	add	sp, #24
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	e009      	b.n	8001b4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	60ba      	str	r2, [r7, #8]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f7fe fcba 	bl	80004b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3301      	adds	r3, #1
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	dbf1      	blt.n	8001b36 <_write+0x12>
  }
  return len;
 8001b52:	687b      	ldr	r3, [r7, #4]
}
 8001b54:	0018      	movs	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b006      	add	sp, #24
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <_close>:

int _close(int file)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b64:	2301      	movs	r3, #1
 8001b66:	425b      	negs	r3, r3
}
 8001b68:	0018      	movs	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b002      	add	sp, #8
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2280      	movs	r2, #128	@ 0x80
 8001b7e:	0192      	lsls	r2, r2, #6
 8001b80:	605a      	str	r2, [r3, #4]
  return 0;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	0018      	movs	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b002      	add	sp, #8
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_isatty>:

int _isatty(int file)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b94:	2301      	movs	r3, #1
}
 8001b96:	0018      	movs	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b002      	add	sp, #8
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b084      	sub	sp, #16
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b004      	add	sp, #16
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bbc:	4a14      	ldr	r2, [pc, #80]	@ (8001c10 <_sbrk+0x5c>)
 8001bbe:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <_sbrk+0x60>)
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <_sbrk+0x64>)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <_sbrk+0x68>)
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	18d3      	adds	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d207      	bcs.n	8001bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be4:	f003 fd4e 	bl	8005684 <__errno>
 8001be8:	0003      	movs	r3, r0
 8001bea:	220c      	movs	r2, #12
 8001bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	425b      	negs	r3, r3
 8001bf2:	e009      	b.n	8001c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	18d2      	adds	r2, r2, r3
 8001c02:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <_sbrk+0x64>)
 8001c04:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b006      	add	sp, #24
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20002000 	.word	0x20002000
 8001c14:	00000400 	.word	0x00000400
 8001c18:	20000280 	.word	0x20000280
 8001c1c:	200003d8 	.word	0x200003d8

08001c20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c24:	46c0      	nop			@ (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c2c:	480d      	ldr	r0, [pc, #52]	@ (8001c64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c2e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c30:	f7ff fff6 	bl	8001c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c34:	480c      	ldr	r0, [pc, #48]	@ (8001c68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c36:	490d      	ldr	r1, [pc, #52]	@ (8001c6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c38:	4a0d      	ldr	r2, [pc, #52]	@ (8001c70 <LoopForever+0xe>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c3c:	e002      	b.n	8001c44 <LoopCopyDataInit>

08001c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c42:	3304      	adds	r3, #4

08001c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c48:	d3f9      	bcc.n	8001c3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c78 <LoopForever+0x16>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c50:	e001      	b.n	8001c56 <LoopFillZerobss>

08001c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c54:	3204      	adds	r2, #4

08001c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c58:	d3fb      	bcc.n	8001c52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c5a:	f003 fd19 	bl	8005690 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001c5e:	f7fe fc3d 	bl	80004dc <main>

08001c62 <LoopForever>:

LoopForever:
  b LoopForever
 8001c62:	e7fe      	b.n	8001c62 <LoopForever>
  ldr   r0, =_estack
 8001c64:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c6c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001c70:	08006728 	.word	0x08006728
  ldr r2, =_sbss
 8001c74:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001c78:	200003d4 	.word	0x200003d4

08001c7c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c7c:	e7fe      	b.n	8001c7c <ADC1_IRQHandler>
	...

08001c80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c86:	1dfb      	adds	r3, r7, #7
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <HAL_Init+0x3c>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <HAL_Init+0x3c>)
 8001c92:	2180      	movs	r1, #128	@ 0x80
 8001c94:	0049      	lsls	r1, r1, #1
 8001c96:	430a      	orrs	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f000 f810 	bl	8001cc0 <HAL_InitTick>
 8001ca0:	1e03      	subs	r3, r0, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ca4:	1dfb      	adds	r3, r7, #7
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	e001      	b.n	8001cb0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001cac:	f7ff fd7e 	bl	80017ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cb0:	1dfb      	adds	r3, r7, #7
 8001cb2:	781b      	ldrb	r3, [r3, #0]
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b002      	add	sp, #8
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40022000 	.word	0x40022000

08001cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc8:	230f      	movs	r3, #15
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <HAL_InitTick+0x88>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d02b      	beq.n	8001d30 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d4c <HAL_InitTick+0x8c>)
 8001cda:	681c      	ldr	r4, [r3, #0]
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <HAL_InitTick+0x88>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	23fa      	movs	r3, #250	@ 0xfa
 8001ce4:	0098      	lsls	r0, r3, #2
 8001ce6:	f7fe fa17 	bl	8000118 <__udivsi3>
 8001cea:	0003      	movs	r3, r0
 8001cec:	0019      	movs	r1, r3
 8001cee:	0020      	movs	r0, r4
 8001cf0:	f7fe fa12 	bl	8000118 <__udivsi3>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f000 f919 	bl	8001f2e <HAL_SYSTICK_Config>
 8001cfc:	1e03      	subs	r3, r0, #0
 8001cfe:	d112      	bne.n	8001d26 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d80a      	bhi.n	8001d1c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	425b      	negs	r3, r3
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f000 f8e8 	bl	8001ee4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d14:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <HAL_InitTick+0x90>)
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	e00d      	b.n	8001d38 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001d1c:	230f      	movs	r3, #15
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
 8001d24:	e008      	b.n	8001d38 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d26:	230f      	movs	r3, #15
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
 8001d2e:	e003      	b.n	8001d38 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d30:	230f      	movs	r3, #15
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001d38:	230f      	movs	r3, #15
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	781b      	ldrb	r3, [r3, #0]
}
 8001d3e:	0018      	movs	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b005      	add	sp, #20
 8001d44:	bd90      	pop	{r4, r7, pc}
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	20000048 	.word	0x20000048
 8001d4c:	20000040 	.word	0x20000040
 8001d50:	20000044 	.word	0x20000044

08001d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d58:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <HAL_IncTick+0x1c>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	001a      	movs	r2, r3
 8001d5e:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <HAL_IncTick+0x20>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	18d2      	adds	r2, r2, r3
 8001d64:	4b03      	ldr	r3, [pc, #12]	@ (8001d74 <HAL_IncTick+0x20>)
 8001d66:	601a      	str	r2, [r3, #0]
}
 8001d68:	46c0      	nop			@ (mov r8, r8)
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	46c0      	nop			@ (mov r8, r8)
 8001d70:	20000048 	.word	0x20000048
 8001d74:	20000284 	.word	0x20000284

08001d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b02      	ldr	r3, [pc, #8]	@ (8001d88 <HAL_GetTick+0x10>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			@ (mov r8, r8)
 8001d88:	20000284 	.word	0x20000284

08001d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	0002      	movs	r2, r0
 8001d94:	1dfb      	adds	r3, r7, #7
 8001d96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	1dfb      	adds	r3, r7, #7
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d9e:	d809      	bhi.n	8001db4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da0:	1dfb      	adds	r3, r7, #7
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	001a      	movs	r2, r3
 8001da6:	231f      	movs	r3, #31
 8001da8:	401a      	ands	r2, r3
 8001daa:	4b04      	ldr	r3, [pc, #16]	@ (8001dbc <__NVIC_EnableIRQ+0x30>)
 8001dac:	2101      	movs	r1, #1
 8001dae:	4091      	lsls	r1, r2
 8001db0:	000a      	movs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001db4:	46c0      	nop			@ (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b002      	add	sp, #8
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	e000e100 	.word	0xe000e100

08001dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dce:	1dfb      	adds	r3, r7, #7
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dd4:	d828      	bhi.n	8001e28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dd6:	4a2f      	ldr	r2, [pc, #188]	@ (8001e94 <__NVIC_SetPriority+0xd4>)
 8001dd8:	1dfb      	adds	r3, r7, #7
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b25b      	sxtb	r3, r3
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	33c0      	adds	r3, #192	@ 0xc0
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	589b      	ldr	r3, [r3, r2]
 8001de6:	1dfa      	adds	r2, r7, #7
 8001de8:	7812      	ldrb	r2, [r2, #0]
 8001dea:	0011      	movs	r1, r2
 8001dec:	2203      	movs	r2, #3
 8001dee:	400a      	ands	r2, r1
 8001df0:	00d2      	lsls	r2, r2, #3
 8001df2:	21ff      	movs	r1, #255	@ 0xff
 8001df4:	4091      	lsls	r1, r2
 8001df6:	000a      	movs	r2, r1
 8001df8:	43d2      	mvns	r2, r2
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	019b      	lsls	r3, r3, #6
 8001e02:	22ff      	movs	r2, #255	@ 0xff
 8001e04:	401a      	ands	r2, r3
 8001e06:	1dfb      	adds	r3, r7, #7
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	4003      	ands	r3, r0
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e14:	481f      	ldr	r0, [pc, #124]	@ (8001e94 <__NVIC_SetPriority+0xd4>)
 8001e16:	1dfb      	adds	r3, r7, #7
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b25b      	sxtb	r3, r3
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	33c0      	adds	r3, #192	@ 0xc0
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e26:	e031      	b.n	8001e8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e28:	4a1b      	ldr	r2, [pc, #108]	@ (8001e98 <__NVIC_SetPriority+0xd8>)
 8001e2a:	1dfb      	adds	r3, r7, #7
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	0019      	movs	r1, r3
 8001e30:	230f      	movs	r3, #15
 8001e32:	400b      	ands	r3, r1
 8001e34:	3b08      	subs	r3, #8
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3306      	adds	r3, #6
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	18d3      	adds	r3, r2, r3
 8001e3e:	3304      	adds	r3, #4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	1dfa      	adds	r2, r7, #7
 8001e44:	7812      	ldrb	r2, [r2, #0]
 8001e46:	0011      	movs	r1, r2
 8001e48:	2203      	movs	r2, #3
 8001e4a:	400a      	ands	r2, r1
 8001e4c:	00d2      	lsls	r2, r2, #3
 8001e4e:	21ff      	movs	r1, #255	@ 0xff
 8001e50:	4091      	lsls	r1, r2
 8001e52:	000a      	movs	r2, r1
 8001e54:	43d2      	mvns	r2, r2
 8001e56:	401a      	ands	r2, r3
 8001e58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	019b      	lsls	r3, r3, #6
 8001e5e:	22ff      	movs	r2, #255	@ 0xff
 8001e60:	401a      	ands	r2, r3
 8001e62:	1dfb      	adds	r3, r7, #7
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	0018      	movs	r0, r3
 8001e68:	2303      	movs	r3, #3
 8001e6a:	4003      	ands	r3, r0
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e70:	4809      	ldr	r0, [pc, #36]	@ (8001e98 <__NVIC_SetPriority+0xd8>)
 8001e72:	1dfb      	adds	r3, r7, #7
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	001c      	movs	r4, r3
 8001e78:	230f      	movs	r3, #15
 8001e7a:	4023      	ands	r3, r4
 8001e7c:	3b08      	subs	r3, #8
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	430a      	orrs	r2, r1
 8001e82:	3306      	adds	r3, #6
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	18c3      	adds	r3, r0, r3
 8001e88:	3304      	adds	r3, #4
 8001e8a:	601a      	str	r2, [r3, #0]
}
 8001e8c:	46c0      	nop			@ (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b003      	add	sp, #12
 8001e92:	bd90      	pop	{r4, r7, pc}
 8001e94:	e000e100 	.word	0xe000e100
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	1e5a      	subs	r2, r3, #1
 8001ea8:	2380      	movs	r3, #128	@ 0x80
 8001eaa:	045b      	lsls	r3, r3, #17
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d301      	bcc.n	8001eb4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e010      	b.n	8001ed6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <SysTick_Config+0x44>)
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	3a01      	subs	r2, #1
 8001eba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	425b      	negs	r3, r3
 8001ec0:	2103      	movs	r1, #3
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f7ff ff7c 	bl	8001dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec8:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <SysTick_Config+0x44>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ece:	4b04      	ldr	r3, [pc, #16]	@ (8001ee0 <SysTick_Config+0x44>)
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b002      	add	sp, #8
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	46c0      	nop			@ (mov r8, r8)
 8001ee0:	e000e010 	.word	0xe000e010

08001ee4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	210f      	movs	r1, #15
 8001ef0:	187b      	adds	r3, r7, r1
 8001ef2:	1c02      	adds	r2, r0, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b25b      	sxtb	r3, r3
 8001efe:	0011      	movs	r1, r2
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7ff ff5d 	bl	8001dc0 <__NVIC_SetPriority>
}
 8001f06:	46c0      	nop			@ (mov r8, r8)
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b004      	add	sp, #16
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	0002      	movs	r2, r0
 8001f16:	1dfb      	adds	r3, r7, #7
 8001f18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1a:	1dfb      	adds	r3, r7, #7
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	b25b      	sxtb	r3, r3
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7ff ff33 	bl	8001d8c <__NVIC_EnableIRQ>
}
 8001f26:	46c0      	nop			@ (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b002      	add	sp, #8
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7ff ffaf 	bl	8001e9c <SysTick_Config>
 8001f3e:	0003      	movs	r3, r0
}
 8001f40:	0018      	movs	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b002      	add	sp, #8
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f56:	e147      	b.n	80021e8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4091      	lsls	r1, r2
 8001f62:	000a      	movs	r2, r1
 8001f64:	4013      	ands	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d100      	bne.n	8001f70 <HAL_GPIO_Init+0x28>
 8001f6e:	e138      	b.n	80021e2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2203      	movs	r2, #3
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d005      	beq.n	8001f88 <HAL_GPIO_Init+0x40>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2203      	movs	r2, #3
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d130      	bne.n	8001fea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	409a      	lsls	r2, r3
 8001f96:	0013      	movs	r3, r2
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	0013      	movs	r3, r2
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	0013      	movs	r3, r2
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	091b      	lsrs	r3, r3, #4
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	0013      	movs	r3, r2
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2203      	movs	r2, #3
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d017      	beq.n	8002026 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	2203      	movs	r2, #3
 8002002:	409a      	lsls	r2, r3
 8002004:	0013      	movs	r3, r2
 8002006:	43da      	mvns	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	409a      	lsls	r2, r3
 8002018:	0013      	movs	r3, r2
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2203      	movs	r2, #3
 800202c:	4013      	ands	r3, r2
 800202e:	2b02      	cmp	r3, #2
 8002030:	d123      	bne.n	800207a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	08da      	lsrs	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3208      	adds	r2, #8
 800203a:	0092      	lsls	r2, r2, #2
 800203c:	58d3      	ldr	r3, [r2, r3]
 800203e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2207      	movs	r2, #7
 8002044:	4013      	ands	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	220f      	movs	r2, #15
 800204a:	409a      	lsls	r2, r3
 800204c:	0013      	movs	r3, r2
 800204e:	43da      	mvns	r2, r3
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2107      	movs	r1, #7
 800205e:	400b      	ands	r3, r1
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	409a      	lsls	r2, r3
 8002064:	0013      	movs	r3, r2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	08da      	lsrs	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3208      	adds	r2, #8
 8002074:	0092      	lsls	r2, r2, #2
 8002076:	6939      	ldr	r1, [r7, #16]
 8002078:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	2203      	movs	r2, #3
 8002086:	409a      	lsls	r2, r3
 8002088:	0013      	movs	r3, r2
 800208a:	43da      	mvns	r2, r3
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2203      	movs	r2, #3
 8002098:	401a      	ands	r2, r3
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	409a      	lsls	r2, r3
 80020a0:	0013      	movs	r3, r2
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	23c0      	movs	r3, #192	@ 0xc0
 80020b4:	029b      	lsls	r3, r3, #10
 80020b6:	4013      	ands	r3, r2
 80020b8:	d100      	bne.n	80020bc <HAL_GPIO_Init+0x174>
 80020ba:	e092      	b.n	80021e2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80020bc:	4a50      	ldr	r2, [pc, #320]	@ (8002200 <HAL_GPIO_Init+0x2b8>)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	089b      	lsrs	r3, r3, #2
 80020c2:	3318      	adds	r3, #24
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	589b      	ldr	r3, [r3, r2]
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2203      	movs	r2, #3
 80020ce:	4013      	ands	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	220f      	movs	r2, #15
 80020d4:	409a      	lsls	r2, r3
 80020d6:	0013      	movs	r3, r2
 80020d8:	43da      	mvns	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	23a0      	movs	r3, #160	@ 0xa0
 80020e4:	05db      	lsls	r3, r3, #23
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d013      	beq.n	8002112 <HAL_GPIO_Init+0x1ca>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a45      	ldr	r2, [pc, #276]	@ (8002204 <HAL_GPIO_Init+0x2bc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00d      	beq.n	800210e <HAL_GPIO_Init+0x1c6>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a44      	ldr	r2, [pc, #272]	@ (8002208 <HAL_GPIO_Init+0x2c0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d007      	beq.n	800210a <HAL_GPIO_Init+0x1c2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a43      	ldr	r2, [pc, #268]	@ (800220c <HAL_GPIO_Init+0x2c4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d101      	bne.n	8002106 <HAL_GPIO_Init+0x1be>
 8002102:	2303      	movs	r3, #3
 8002104:	e006      	b.n	8002114 <HAL_GPIO_Init+0x1cc>
 8002106:	2305      	movs	r3, #5
 8002108:	e004      	b.n	8002114 <HAL_GPIO_Init+0x1cc>
 800210a:	2302      	movs	r3, #2
 800210c:	e002      	b.n	8002114 <HAL_GPIO_Init+0x1cc>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_GPIO_Init+0x1cc>
 8002112:	2300      	movs	r3, #0
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	2103      	movs	r1, #3
 8002118:	400a      	ands	r2, r1
 800211a:	00d2      	lsls	r2, r2, #3
 800211c:	4093      	lsls	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002124:	4936      	ldr	r1, [pc, #216]	@ (8002200 <HAL_GPIO_Init+0x2b8>)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	089b      	lsrs	r3, r3, #2
 800212a:	3318      	adds	r3, #24
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002132:	4b33      	ldr	r3, [pc, #204]	@ (8002200 <HAL_GPIO_Init+0x2b8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	43da      	mvns	r2, r3
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	2380      	movs	r3, #128	@ 0x80
 8002148:	035b      	lsls	r3, r3, #13
 800214a:	4013      	ands	r3, r2
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002156:	4b2a      	ldr	r3, [pc, #168]	@ (8002200 <HAL_GPIO_Init+0x2b8>)
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800215c:	4b28      	ldr	r3, [pc, #160]	@ (8002200 <HAL_GPIO_Init+0x2b8>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	43da      	mvns	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4013      	ands	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	2380      	movs	r3, #128	@ 0x80
 8002172:	039b      	lsls	r3, r3, #14
 8002174:	4013      	ands	r3, r2
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002180:	4b1f      	ldr	r3, [pc, #124]	@ (8002200 <HAL_GPIO_Init+0x2b8>)
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002186:	4a1e      	ldr	r2, [pc, #120]	@ (8002200 <HAL_GPIO_Init+0x2b8>)
 8002188:	2384      	movs	r3, #132	@ 0x84
 800218a:	58d3      	ldr	r3, [r2, r3]
 800218c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	43da      	mvns	r2, r3
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	2380      	movs	r3, #128	@ 0x80
 800219e:	029b      	lsls	r3, r3, #10
 80021a0:	4013      	ands	r3, r2
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021ac:	4914      	ldr	r1, [pc, #80]	@ (8002200 <HAL_GPIO_Init+0x2b8>)
 80021ae:	2284      	movs	r2, #132	@ 0x84
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80021b4:	4a12      	ldr	r2, [pc, #72]	@ (8002200 <HAL_GPIO_Init+0x2b8>)
 80021b6:	2380      	movs	r3, #128	@ 0x80
 80021b8:	58d3      	ldr	r3, [r2, r3]
 80021ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	43da      	mvns	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	2380      	movs	r3, #128	@ 0x80
 80021cc:	025b      	lsls	r3, r3, #9
 80021ce:	4013      	ands	r3, r2
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021da:	4909      	ldr	r1, [pc, #36]	@ (8002200 <HAL_GPIO_Init+0x2b8>)
 80021dc:	2280      	movs	r2, #128	@ 0x80
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	3301      	adds	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	40da      	lsrs	r2, r3
 80021f0:	1e13      	subs	r3, r2, #0
 80021f2:	d000      	beq.n	80021f6 <HAL_GPIO_Init+0x2ae>
 80021f4:	e6b0      	b.n	8001f58 <HAL_GPIO_Init+0x10>
  }
}
 80021f6:	46c0      	nop			@ (mov r8, r8)
 80021f8:	46c0      	nop			@ (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b006      	add	sp, #24
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021800 	.word	0x40021800
 8002204:	50000400 	.word	0x50000400
 8002208:	50000800 	.word	0x50000800
 800220c:	50000c00 	.word	0x50000c00

08002210 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	000a      	movs	r2, r1
 800221a:	1cbb      	adds	r3, r7, #2
 800221c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	1cba      	adds	r2, r7, #2
 8002224:	8812      	ldrh	r2, [r2, #0]
 8002226:	4013      	ands	r3, r2
 8002228:	d004      	beq.n	8002234 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800222a:	230f      	movs	r3, #15
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	e003      	b.n	800223c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002234:	230f      	movs	r3, #15
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800223c:	230f      	movs	r3, #15
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	781b      	ldrb	r3, [r3, #0]
}
 8002242:	0018      	movs	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	b004      	add	sp, #16
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	0008      	movs	r0, r1
 8002254:	0011      	movs	r1, r2
 8002256:	1cbb      	adds	r3, r7, #2
 8002258:	1c02      	adds	r2, r0, #0
 800225a:	801a      	strh	r2, [r3, #0]
 800225c:	1c7b      	adds	r3, r7, #1
 800225e:	1c0a      	adds	r2, r1, #0
 8002260:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002262:	1c7b      	adds	r3, r7, #1
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d004      	beq.n	8002274 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800226a:	1cbb      	adds	r3, r7, #2
 800226c:	881a      	ldrh	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002272:	e003      	b.n	800227c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002274:	1cbb      	adds	r3, r7, #2
 8002276:	881a      	ldrh	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800227c:	46c0      	nop			@ (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	b002      	add	sp, #8
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	000a      	movs	r2, r1
 800228e:	1cbb      	adds	r3, r7, #2
 8002290:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002298:	1cbb      	adds	r3, r7, #2
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4013      	ands	r3, r2
 80022a0:	041a      	lsls	r2, r3, #16
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	1cb9      	adds	r1, r7, #2
 80022a8:	8809      	ldrh	r1, [r1, #0]
 80022aa:	400b      	ands	r3, r1
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	619a      	str	r2, [r3, #24]
}
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b004      	add	sp, #16
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	0002      	movs	r2, r0
 80022c4:	1dbb      	adds	r3, r7, #6
 80022c6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80022c8:	4b10      	ldr	r3, [pc, #64]	@ (800230c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	1dba      	adds	r2, r7, #6
 80022ce:	8812      	ldrh	r2, [r2, #0]
 80022d0:	4013      	ands	r3, r2
 80022d2:	d008      	beq.n	80022e6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80022d4:	4b0d      	ldr	r3, [pc, #52]	@ (800230c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80022d6:	1dba      	adds	r2, r7, #6
 80022d8:	8812      	ldrh	r2, [r2, #0]
 80022da:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80022dc:	1dbb      	adds	r3, r7, #6
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 f815 	bl	8002310 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80022e6:	4b09      	ldr	r3, [pc, #36]	@ (800230c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	1dba      	adds	r2, r7, #6
 80022ec:	8812      	ldrh	r2, [r2, #0]
 80022ee:	4013      	ands	r3, r2
 80022f0:	d008      	beq.n	8002304 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80022f2:	4b06      	ldr	r3, [pc, #24]	@ (800230c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80022f4:	1dba      	adds	r2, r7, #6
 80022f6:	8812      	ldrh	r2, [r2, #0]
 80022f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80022fa:	1dbb      	adds	r3, r7, #6
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	0018      	movs	r0, r3
 8002300:	f7fe fd66 	bl	8000dd0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002304:	46c0      	nop			@ (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b002      	add	sp, #8
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021800 	.word	0x40021800

08002310 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	0002      	movs	r2, r0
 8002318:	1dbb      	adds	r3, r7, #6
 800231a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800231c:	46c0      	nop			@ (mov r8, r8)
 800231e:	46bd      	mov	sp, r7
 8002320:	b002      	add	sp, #8
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002328:	4b04      	ldr	r3, [pc, #16]	@ (800233c <HAL_PWR_EnableBkUpAccess+0x18>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b03      	ldr	r3, [pc, #12]	@ (800233c <HAL_PWR_EnableBkUpAccess+0x18>)
 800232e:	2180      	movs	r1, #128	@ 0x80
 8002330:	0049      	lsls	r1, r1, #1
 8002332:	430a      	orrs	r2, r1
 8002334:	601a      	str	r2, [r3, #0]
}
 8002336:	46c0      	nop			@ (mov r8, r8)
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40007000 	.word	0x40007000

08002340 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002348:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a19      	ldr	r2, [pc, #100]	@ (80023b4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800234e:	4013      	ands	r3, r2
 8002350:	0019      	movs	r1, r3
 8002352:	4b17      	ldr	r3, [pc, #92]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	430a      	orrs	r2, r1
 8002358:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	2380      	movs	r3, #128	@ 0x80
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	429a      	cmp	r2, r3
 8002362:	d11f      	bne.n	80023a4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002364:	4b14      	ldr	r3, [pc, #80]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	0013      	movs	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	189b      	adds	r3, r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4912      	ldr	r1, [pc, #72]	@ (80023bc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002372:	0018      	movs	r0, r3
 8002374:	f7fd fed0 	bl	8000118 <__udivsi3>
 8002378:	0003      	movs	r3, r0
 800237a:	3301      	adds	r3, #1
 800237c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800237e:	e008      	b.n	8002392 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	3b01      	subs	r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	e001      	b.n	8002392 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e009      	b.n	80023a6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002392:	4b07      	ldr	r3, [pc, #28]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002394:	695a      	ldr	r2, [r3, #20]
 8002396:	2380      	movs	r3, #128	@ 0x80
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	401a      	ands	r2, r3
 800239c:	2380      	movs	r3, #128	@ 0x80
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d0ed      	beq.n	8002380 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b004      	add	sp, #16
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	40007000 	.word	0x40007000
 80023b4:	fffff9ff 	.word	0xfffff9ff
 80023b8:	20000040 	.word	0x20000040
 80023bc:	000f4240 	.word	0x000f4240

080023c0 <HAL_PWREx_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Check PWR exti Rising flag */
  if (__HAL_PWR_PVD_EXTI_GET_RISING_FLAG() != 0x0U)
 80023c4:	4b0d      	ldr	r3, [pc, #52]	@ (80023fc <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	2380      	movs	r3, #128	@ 0x80
 80023ca:	025b      	lsls	r3, r3, #9
 80023cc:	4013      	ands	r3, r2
 80023ce:	d005      	beq.n	80023dc <HAL_PWREx_PVD_IRQHandler+0x1c>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_RISING_FLAG();
 80023d0:	4b0a      	ldr	r3, [pc, #40]	@ (80023fc <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80023d2:	2280      	movs	r2, #128	@ 0x80
 80023d4:	0252      	lsls	r2, r2, #9
 80023d6:	60da      	str	r2, [r3, #12]

    /* PWR PVD interrupt rising user callback */
    HAL_PWREx_PVD_Rising_Callback();
 80023d8:	f000 f812 	bl	8002400 <HAL_PWREx_PVD_Rising_Callback>
  }

  /* Check PWR exti fallling flag */
  if (__HAL_PWR_PVD_EXTI_GET_FALLING_FLAG() != 0x0U)
 80023dc:	4b07      	ldr	r3, [pc, #28]	@ (80023fc <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	2380      	movs	r3, #128	@ 0x80
 80023e2:	025b      	lsls	r3, r3, #9
 80023e4:	4013      	ands	r3, r2
 80023e6:	d005      	beq.n	80023f4 <HAL_PWREx_PVD_IRQHandler+0x34>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FALLING_FLAG();
 80023e8:	4b04      	ldr	r3, [pc, #16]	@ (80023fc <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80023ea:	2280      	movs	r2, #128	@ 0x80
 80023ec:	0252      	lsls	r2, r2, #9
 80023ee:	611a      	str	r2, [r3, #16]

    /* PWR PVD interrupt falling user callback */
    HAL_PWREx_PVD_Falling_Callback();
 80023f0:	f000 f80b 	bl	800240a <HAL_PWREx_PVD_Falling_Callback>
  }
}
 80023f4:	46c0      	nop			@ (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	46c0      	nop			@ (mov r8, r8)
 80023fc:	40021800 	.word	0x40021800

08002400 <HAL_PWREx_PVD_Rising_Callback>:
/**
  * @brief  PWR PVD interrupt rising callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Rising_Callback(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Rising_Callback can be implemented in the user file
  */
}
 8002404:	46c0      	nop			@ (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_PWREx_PVD_Falling_Callback>:
/**
  * @brief  PWR PVD interrupt Falling callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Falling_Callback(void)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Falling_Callback can be implemented in the user file
  */
}
 800240e:	46c0      	nop			@ (mov r8, r8)
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002418:	4b03      	ldr	r3, [pc, #12]	@ (8002428 <LL_RCC_GetAPB1Prescaler+0x14>)
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	23e0      	movs	r3, #224	@ 0xe0
 800241e:	01db      	lsls	r3, r3, #7
 8002420:	4013      	ands	r3, r2
}
 8002422:	0018      	movs	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000

0800242c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e2fe      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2201      	movs	r2, #1
 8002444:	4013      	ands	r3, r2
 8002446:	d100      	bne.n	800244a <HAL_RCC_OscConfig+0x1e>
 8002448:	e07c      	b.n	8002544 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244a:	4bc3      	ldr	r3, [pc, #780]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2238      	movs	r2, #56	@ 0x38
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002454:	4bc0      	ldr	r3, [pc, #768]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2203      	movs	r2, #3
 800245a:	4013      	ands	r3, r2
 800245c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b10      	cmp	r3, #16
 8002462:	d102      	bne.n	800246a <HAL_RCC_OscConfig+0x3e>
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2b03      	cmp	r3, #3
 8002468:	d002      	beq.n	8002470 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	2b08      	cmp	r3, #8
 800246e:	d10b      	bne.n	8002488 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	4bb9      	ldr	r3, [pc, #740]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	2380      	movs	r3, #128	@ 0x80
 8002476:	029b      	lsls	r3, r3, #10
 8002478:	4013      	ands	r3, r2
 800247a:	d062      	beq.n	8002542 <HAL_RCC_OscConfig+0x116>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d15e      	bne.n	8002542 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e2d9      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	2380      	movs	r3, #128	@ 0x80
 800248e:	025b      	lsls	r3, r3, #9
 8002490:	429a      	cmp	r2, r3
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_OscConfig+0x78>
 8002494:	4bb0      	ldr	r3, [pc, #704]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4baf      	ldr	r3, [pc, #700]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800249a:	2180      	movs	r1, #128	@ 0x80
 800249c:	0249      	lsls	r1, r1, #9
 800249e:	430a      	orrs	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	e020      	b.n	80024e6 <HAL_RCC_OscConfig+0xba>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	23a0      	movs	r3, #160	@ 0xa0
 80024aa:	02db      	lsls	r3, r3, #11
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d10e      	bne.n	80024ce <HAL_RCC_OscConfig+0xa2>
 80024b0:	4ba9      	ldr	r3, [pc, #676]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4ba8      	ldr	r3, [pc, #672]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024b6:	2180      	movs	r1, #128	@ 0x80
 80024b8:	02c9      	lsls	r1, r1, #11
 80024ba:	430a      	orrs	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	4ba6      	ldr	r3, [pc, #664]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4ba5      	ldr	r3, [pc, #660]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024c4:	2180      	movs	r1, #128	@ 0x80
 80024c6:	0249      	lsls	r1, r1, #9
 80024c8:	430a      	orrs	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e00b      	b.n	80024e6 <HAL_RCC_OscConfig+0xba>
 80024ce:	4ba2      	ldr	r3, [pc, #648]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	4ba1      	ldr	r3, [pc, #644]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024d4:	49a1      	ldr	r1, [pc, #644]	@ (800275c <HAL_RCC_OscConfig+0x330>)
 80024d6:	400a      	ands	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	4b9f      	ldr	r3, [pc, #636]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	4b9e      	ldr	r3, [pc, #632]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024e0:	499f      	ldr	r1, [pc, #636]	@ (8002760 <HAL_RCC_OscConfig+0x334>)
 80024e2:	400a      	ands	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d014      	beq.n	8002518 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7ff fc43 	bl	8001d78 <HAL_GetTick>
 80024f2:	0003      	movs	r3, r0
 80024f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7ff fc3e 	bl	8001d78 <HAL_GetTick>
 80024fc:	0002      	movs	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	@ 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e298      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800250a:	4b93      	ldr	r3, [pc, #588]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	2380      	movs	r3, #128	@ 0x80
 8002510:	029b      	lsls	r3, r3, #10
 8002512:	4013      	ands	r3, r2
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0xcc>
 8002516:	e015      	b.n	8002544 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7ff fc2e 	bl	8001d78 <HAL_GetTick>
 800251c:	0003      	movs	r3, r0
 800251e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002522:	f7ff fc29 	bl	8001d78 <HAL_GetTick>
 8002526:	0002      	movs	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b64      	cmp	r3, #100	@ 0x64
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e283      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002534:	4b88      	ldr	r3, [pc, #544]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2380      	movs	r3, #128	@ 0x80
 800253a:	029b      	lsls	r3, r3, #10
 800253c:	4013      	ands	r3, r2
 800253e:	d1f0      	bne.n	8002522 <HAL_RCC_OscConfig+0xf6>
 8002540:	e000      	b.n	8002544 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002542:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2202      	movs	r2, #2
 800254a:	4013      	ands	r3, r2
 800254c:	d100      	bne.n	8002550 <HAL_RCC_OscConfig+0x124>
 800254e:	e099      	b.n	8002684 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002550:	4b81      	ldr	r3, [pc, #516]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2238      	movs	r2, #56	@ 0x38
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800255a:	4b7f      	ldr	r3, [pc, #508]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2203      	movs	r2, #3
 8002560:	4013      	ands	r3, r2
 8002562:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2b10      	cmp	r3, #16
 8002568:	d102      	bne.n	8002570 <HAL_RCC_OscConfig+0x144>
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d002      	beq.n	8002576 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d135      	bne.n	80025e2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002576:	4b78      	ldr	r3, [pc, #480]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	2380      	movs	r3, #128	@ 0x80
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4013      	ands	r3, r2
 8002580:	d005      	beq.n	800258e <HAL_RCC_OscConfig+0x162>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e256      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258e:	4b72      	ldr	r3, [pc, #456]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4a74      	ldr	r2, [pc, #464]	@ (8002764 <HAL_RCC_OscConfig+0x338>)
 8002594:	4013      	ands	r3, r2
 8002596:	0019      	movs	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	021a      	lsls	r2, r3, #8
 800259e:	4b6e      	ldr	r3, [pc, #440]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80025a0:	430a      	orrs	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d112      	bne.n	80025d0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025aa:	4b6b      	ldr	r3, [pc, #428]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6e      	ldr	r2, [pc, #440]	@ (8002768 <HAL_RCC_OscConfig+0x33c>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	0019      	movs	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	4b67      	ldr	r3, [pc, #412]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80025ba:	430a      	orrs	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80025be:	4b66      	ldr	r3, [pc, #408]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	0adb      	lsrs	r3, r3, #11
 80025c4:	2207      	movs	r2, #7
 80025c6:	4013      	ands	r3, r2
 80025c8:	4a68      	ldr	r2, [pc, #416]	@ (800276c <HAL_RCC_OscConfig+0x340>)
 80025ca:	40da      	lsrs	r2, r3
 80025cc:	4b68      	ldr	r3, [pc, #416]	@ (8002770 <HAL_RCC_OscConfig+0x344>)
 80025ce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025d0:	4b68      	ldr	r3, [pc, #416]	@ (8002774 <HAL_RCC_OscConfig+0x348>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0018      	movs	r0, r3
 80025d6:	f7ff fb73 	bl	8001cc0 <HAL_InitTick>
 80025da:	1e03      	subs	r3, r0, #0
 80025dc:	d051      	beq.n	8002682 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e22c      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d030      	beq.n	800264c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002768 <HAL_RCC_OscConfig+0x33c>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	4b57      	ldr	r3, [pc, #348]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80025fe:	4b56      	ldr	r3, [pc, #344]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	4b55      	ldr	r3, [pc, #340]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002604:	2180      	movs	r1, #128	@ 0x80
 8002606:	0049      	lsls	r1, r1, #1
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7ff fbb4 	bl	8001d78 <HAL_GetTick>
 8002610:	0003      	movs	r3, r0
 8002612:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002616:	f7ff fbaf 	bl	8001d78 <HAL_GetTick>
 800261a:	0002      	movs	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e209      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002628:	4b4b      	ldr	r3, [pc, #300]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4013      	ands	r3, r2
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b48      	ldr	r3, [pc, #288]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4a4a      	ldr	r2, [pc, #296]	@ (8002764 <HAL_RCC_OscConfig+0x338>)
 800263a:	4013      	ands	r3, r2
 800263c:	0019      	movs	r1, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	021a      	lsls	r2, r3, #8
 8002644:	4b44      	ldr	r3, [pc, #272]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002646:	430a      	orrs	r2, r1
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	e01b      	b.n	8002684 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800264c:	4b42      	ldr	r3, [pc, #264]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b41      	ldr	r3, [pc, #260]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002652:	4949      	ldr	r1, [pc, #292]	@ (8002778 <HAL_RCC_OscConfig+0x34c>)
 8002654:	400a      	ands	r2, r1
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7ff fb8e 	bl	8001d78 <HAL_GetTick>
 800265c:	0003      	movs	r3, r0
 800265e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002662:	f7ff fb89 	bl	8001d78 <HAL_GetTick>
 8002666:	0002      	movs	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e1e3      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002674:	4b38      	ldr	r3, [pc, #224]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	2380      	movs	r3, #128	@ 0x80
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4013      	ands	r3, r2
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x236>
 8002680:	e000      	b.n	8002684 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002682:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2208      	movs	r2, #8
 800268a:	4013      	ands	r3, r2
 800268c:	d047      	beq.n	800271e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800268e:	4b32      	ldr	r3, [pc, #200]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2238      	movs	r2, #56	@ 0x38
 8002694:	4013      	ands	r3, r2
 8002696:	2b18      	cmp	r3, #24
 8002698:	d10a      	bne.n	80026b0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800269a:	4b2f      	ldr	r3, [pc, #188]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800269c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800269e:	2202      	movs	r2, #2
 80026a0:	4013      	ands	r3, r2
 80026a2:	d03c      	beq.n	800271e <HAL_RCC_OscConfig+0x2f2>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d138      	bne.n	800271e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e1c5      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d019      	beq.n	80026ec <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80026b8:	4b27      	ldr	r3, [pc, #156]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80026ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026bc:	4b26      	ldr	r3, [pc, #152]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80026be:	2101      	movs	r1, #1
 80026c0:	430a      	orrs	r2, r1
 80026c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7ff fb58 	bl	8001d78 <HAL_GetTick>
 80026c8:	0003      	movs	r3, r0
 80026ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ce:	f7ff fb53 	bl	8001d78 <HAL_GetTick>
 80026d2:	0002      	movs	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e1ad      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80026e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e4:	2202      	movs	r2, #2
 80026e6:	4013      	ands	r3, r2
 80026e8:	d0f1      	beq.n	80026ce <HAL_RCC_OscConfig+0x2a2>
 80026ea:	e018      	b.n	800271e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80026ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80026ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026f0:	4b19      	ldr	r3, [pc, #100]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80026f2:	2101      	movs	r1, #1
 80026f4:	438a      	bics	r2, r1
 80026f6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7ff fb3e 	bl	8001d78 <HAL_GetTick>
 80026fc:	0003      	movs	r3, r0
 80026fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002702:	f7ff fb39 	bl	8001d78 <HAL_GetTick>
 8002706:	0002      	movs	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e193      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002714:	4b10      	ldr	r3, [pc, #64]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002718:	2202      	movs	r2, #2
 800271a:	4013      	ands	r3, r2
 800271c:	d1f1      	bne.n	8002702 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2204      	movs	r2, #4
 8002724:	4013      	ands	r3, r2
 8002726:	d100      	bne.n	800272a <HAL_RCC_OscConfig+0x2fe>
 8002728:	e0c6      	b.n	80028b8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272a:	231f      	movs	r3, #31
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002732:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2238      	movs	r2, #56	@ 0x38
 8002738:	4013      	ands	r3, r2
 800273a:	2b20      	cmp	r3, #32
 800273c:	d11e      	bne.n	800277c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800273e:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002742:	2202      	movs	r2, #2
 8002744:	4013      	ands	r3, r2
 8002746:	d100      	bne.n	800274a <HAL_RCC_OscConfig+0x31e>
 8002748:	e0b6      	b.n	80028b8 <HAL_RCC_OscConfig+0x48c>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d000      	beq.n	8002754 <HAL_RCC_OscConfig+0x328>
 8002752:	e0b1      	b.n	80028b8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e171      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
 8002758:	40021000 	.word	0x40021000
 800275c:	fffeffff 	.word	0xfffeffff
 8002760:	fffbffff 	.word	0xfffbffff
 8002764:	ffff80ff 	.word	0xffff80ff
 8002768:	ffffc7ff 	.word	0xffffc7ff
 800276c:	00f42400 	.word	0x00f42400
 8002770:	20000040 	.word	0x20000040
 8002774:	20000044 	.word	0x20000044
 8002778:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800277c:	4bb1      	ldr	r3, [pc, #708]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 800277e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002780:	2380      	movs	r3, #128	@ 0x80
 8002782:	055b      	lsls	r3, r3, #21
 8002784:	4013      	ands	r3, r2
 8002786:	d101      	bne.n	800278c <HAL_RCC_OscConfig+0x360>
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x362>
 800278c:	2300      	movs	r3, #0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d011      	beq.n	80027b6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	4bac      	ldr	r3, [pc, #688]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 8002794:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002796:	4bab      	ldr	r3, [pc, #684]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 8002798:	2180      	movs	r1, #128	@ 0x80
 800279a:	0549      	lsls	r1, r1, #21
 800279c:	430a      	orrs	r2, r1
 800279e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027a0:	4ba8      	ldr	r3, [pc, #672]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 80027a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027a4:	2380      	movs	r3, #128	@ 0x80
 80027a6:	055b      	lsls	r3, r3, #21
 80027a8:	4013      	ands	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80027ae:	231f      	movs	r3, #31
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b6:	4ba4      	ldr	r3, [pc, #656]	@ (8002a48 <HAL_RCC_OscConfig+0x61c>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	2380      	movs	r3, #128	@ 0x80
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4013      	ands	r3, r2
 80027c0:	d11a      	bne.n	80027f8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027c2:	4ba1      	ldr	r3, [pc, #644]	@ (8002a48 <HAL_RCC_OscConfig+0x61c>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4ba0      	ldr	r3, [pc, #640]	@ (8002a48 <HAL_RCC_OscConfig+0x61c>)
 80027c8:	2180      	movs	r1, #128	@ 0x80
 80027ca:	0049      	lsls	r1, r1, #1
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80027d0:	f7ff fad2 	bl	8001d78 <HAL_GetTick>
 80027d4:	0003      	movs	r3, r0
 80027d6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027da:	f7ff facd 	bl	8001d78 <HAL_GetTick>
 80027de:	0002      	movs	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e127      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ec:	4b96      	ldr	r3, [pc, #600]	@ (8002a48 <HAL_RCC_OscConfig+0x61c>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	2380      	movs	r3, #128	@ 0x80
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4013      	ands	r3, r2
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x3e2>
 8002800:	4b90      	ldr	r3, [pc, #576]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 8002802:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002804:	4b8f      	ldr	r3, [pc, #572]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 8002806:	2101      	movs	r1, #1
 8002808:	430a      	orrs	r2, r1
 800280a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800280c:	e01c      	b.n	8002848 <HAL_RCC_OscConfig+0x41c>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b05      	cmp	r3, #5
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x404>
 8002816:	4b8b      	ldr	r3, [pc, #556]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 8002818:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800281a:	4b8a      	ldr	r3, [pc, #552]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 800281c:	2104      	movs	r1, #4
 800281e:	430a      	orrs	r2, r1
 8002820:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002822:	4b88      	ldr	r3, [pc, #544]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 8002824:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002826:	4b87      	ldr	r3, [pc, #540]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 8002828:	2101      	movs	r1, #1
 800282a:	430a      	orrs	r2, r1
 800282c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800282e:	e00b      	b.n	8002848 <HAL_RCC_OscConfig+0x41c>
 8002830:	4b84      	ldr	r3, [pc, #528]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 8002832:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002834:	4b83      	ldr	r3, [pc, #524]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 8002836:	2101      	movs	r1, #1
 8002838:	438a      	bics	r2, r1
 800283a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800283c:	4b81      	ldr	r3, [pc, #516]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 800283e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002840:	4b80      	ldr	r3, [pc, #512]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 8002842:	2104      	movs	r1, #4
 8002844:	438a      	bics	r2, r1
 8002846:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d014      	beq.n	800287a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7ff fa92 	bl	8001d78 <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002858:	e009      	b.n	800286e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f7ff fa8d 	bl	8001d78 <HAL_GetTick>
 800285e:	0002      	movs	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	4a79      	ldr	r2, [pc, #484]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e0e6      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800286e:	4b75      	ldr	r3, [pc, #468]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 8002870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002872:	2202      	movs	r2, #2
 8002874:	4013      	ands	r3, r2
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x42e>
 8002878:	e013      	b.n	80028a2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287a:	f7ff fa7d 	bl	8001d78 <HAL_GetTick>
 800287e:	0003      	movs	r3, r0
 8002880:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002882:	e009      	b.n	8002898 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002884:	f7ff fa78 	bl	8001d78 <HAL_GetTick>
 8002888:	0002      	movs	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	4a6f      	ldr	r2, [pc, #444]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e0d1      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002898:	4b6a      	ldr	r3, [pc, #424]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 800289a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289c:	2202      	movs	r2, #2
 800289e:	4013      	ands	r3, r2
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80028a2:	231f      	movs	r3, #31
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80028ac:	4b65      	ldr	r3, [pc, #404]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 80028ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028b0:	4b64      	ldr	r3, [pc, #400]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 80028b2:	4967      	ldr	r1, [pc, #412]	@ (8002a50 <HAL_RCC_OscConfig+0x624>)
 80028b4:	400a      	ands	r2, r1
 80028b6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d100      	bne.n	80028c2 <HAL_RCC_OscConfig+0x496>
 80028c0:	e0bb      	b.n	8002a3a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c2:	4b60      	ldr	r3, [pc, #384]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2238      	movs	r2, #56	@ 0x38
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b10      	cmp	r3, #16
 80028cc:	d100      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4a4>
 80028ce:	e07b      	b.n	80029c8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d156      	bne.n	8002986 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d8:	4b5a      	ldr	r3, [pc, #360]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b59      	ldr	r3, [pc, #356]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 80028de:	495d      	ldr	r1, [pc, #372]	@ (8002a54 <HAL_RCC_OscConfig+0x628>)
 80028e0:	400a      	ands	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7ff fa48 	bl	8001d78 <HAL_GetTick>
 80028e8:	0003      	movs	r3, r0
 80028ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ee:	f7ff fa43 	bl	8001d78 <HAL_GetTick>
 80028f2:	0002      	movs	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e09d      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002900:	4b50      	ldr	r3, [pc, #320]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	2380      	movs	r3, #128	@ 0x80
 8002906:	049b      	lsls	r3, r3, #18
 8002908:	4013      	ands	r3, r2
 800290a:	d1f0      	bne.n	80028ee <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290c:	4b4d      	ldr	r3, [pc, #308]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a51      	ldr	r2, [pc, #324]	@ (8002a58 <HAL_RCC_OscConfig+0x62c>)
 8002912:	4013      	ands	r3, r2
 8002914:	0019      	movs	r1, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1a      	ldr	r2, [r3, #32]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292c:	431a      	orrs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002938:	431a      	orrs	r2, r3
 800293a:	4b42      	ldr	r3, [pc, #264]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 800293c:	430a      	orrs	r2, r1
 800293e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002940:	4b40      	ldr	r3, [pc, #256]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b3f      	ldr	r3, [pc, #252]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 8002946:	2180      	movs	r1, #128	@ 0x80
 8002948:	0449      	lsls	r1, r1, #17
 800294a:	430a      	orrs	r2, r1
 800294c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800294e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	4b3c      	ldr	r3, [pc, #240]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 8002954:	2180      	movs	r1, #128	@ 0x80
 8002956:	0549      	lsls	r1, r1, #21
 8002958:	430a      	orrs	r2, r1
 800295a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7ff fa0c 	bl	8001d78 <HAL_GetTick>
 8002960:	0003      	movs	r3, r0
 8002962:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002966:	f7ff fa07 	bl	8001d78 <HAL_GetTick>
 800296a:	0002      	movs	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e061      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002978:	4b32      	ldr	r3, [pc, #200]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2380      	movs	r3, #128	@ 0x80
 800297e:	049b      	lsls	r3, r3, #18
 8002980:	4013      	ands	r3, r2
 8002982:	d0f0      	beq.n	8002966 <HAL_RCC_OscConfig+0x53a>
 8002984:	e059      	b.n	8002a3a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002986:	4b2f      	ldr	r3, [pc, #188]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 800298c:	4931      	ldr	r1, [pc, #196]	@ (8002a54 <HAL_RCC_OscConfig+0x628>)
 800298e:	400a      	ands	r2, r1
 8002990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002992:	f7ff f9f1 	bl	8001d78 <HAL_GetTick>
 8002996:	0003      	movs	r3, r0
 8002998:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299c:	f7ff f9ec 	bl	8001d78 <HAL_GetTick>
 80029a0:	0002      	movs	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e046      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ae:	4b25      	ldr	r3, [pc, #148]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	2380      	movs	r3, #128	@ 0x80
 80029b4:	049b      	lsls	r3, r3, #18
 80029b6:	4013      	ands	r3, r2
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80029ba:	4b22      	ldr	r3, [pc, #136]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	4b21      	ldr	r3, [pc, #132]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 80029c0:	4926      	ldr	r1, [pc, #152]	@ (8002a5c <HAL_RCC_OscConfig+0x630>)
 80029c2:	400a      	ands	r2, r1
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	e038      	b.n	8002a3a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e033      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80029d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a44 <HAL_RCC_OscConfig+0x618>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2203      	movs	r2, #3
 80029de:	401a      	ands	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d126      	bne.n	8002a36 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2270      	movs	r2, #112	@ 0x70
 80029ec:	401a      	ands	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d11f      	bne.n	8002a36 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	23fe      	movs	r3, #254	@ 0xfe
 80029fa:	01db      	lsls	r3, r3, #7
 80029fc:	401a      	ands	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a02:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d116      	bne.n	8002a36 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	23f8      	movs	r3, #248	@ 0xf8
 8002a0c:	039b      	lsls	r3, r3, #14
 8002a0e:	401a      	ands	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d10e      	bne.n	8002a36 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	23e0      	movs	r3, #224	@ 0xe0
 8002a1c:	051b      	lsls	r3, r3, #20
 8002a1e:	401a      	ands	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d106      	bne.n	8002a36 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	0f5b      	lsrs	r3, r3, #29
 8002a2c:	075a      	lsls	r2, r3, #29
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d001      	beq.n	8002a3a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b008      	add	sp, #32
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40007000 	.word	0x40007000
 8002a4c:	00001388 	.word	0x00001388
 8002a50:	efffffff 	.word	0xefffffff
 8002a54:	feffffff 	.word	0xfeffffff
 8002a58:	11c1808c 	.word	0x11c1808c
 8002a5c:	eefefffc 	.word	0xeefefffc

08002a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0e9      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b76      	ldr	r3, [pc, #472]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2207      	movs	r2, #7
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d91e      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b73      	ldr	r3, [pc, #460]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2207      	movs	r2, #7
 8002a88:	4393      	bics	r3, r2
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	4b70      	ldr	r3, [pc, #448]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a94:	f7ff f970 	bl	8001d78 <HAL_GetTick>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a9c:	e009      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9e:	f7ff f96b 	bl	8001d78 <HAL_GetTick>
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	4a6a      	ldr	r2, [pc, #424]	@ (8002c54 <HAL_RCC_ClockConfig+0x1f4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e0ca      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ab2:	4b67      	ldr	r3, [pc, #412]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	4013      	ands	r3, r2
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d1ee      	bne.n	8002a9e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d015      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2204      	movs	r2, #4
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d006      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ad4:	4b60      	ldr	r3, [pc, #384]	@ (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	4b5f      	ldr	r3, [pc, #380]	@ (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002ada:	21e0      	movs	r1, #224	@ 0xe0
 8002adc:	01c9      	lsls	r1, r1, #7
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	4a5d      	ldr	r2, [pc, #372]	@ (8002c5c <HAL_RCC_ClockConfig+0x1fc>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	4b59      	ldr	r3, [pc, #356]	@ (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002af2:	430a      	orrs	r2, r1
 8002af4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2201      	movs	r2, #1
 8002afc:	4013      	ands	r3, r2
 8002afe:	d057      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d107      	bne.n	8002b18 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b08:	4b53      	ldr	r3, [pc, #332]	@ (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	2380      	movs	r3, #128	@ 0x80
 8002b0e:	029b      	lsls	r3, r3, #10
 8002b10:	4013      	ands	r3, r2
 8002b12:	d12b      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e097      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b20:	4b4d      	ldr	r3, [pc, #308]	@ (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	2380      	movs	r3, #128	@ 0x80
 8002b26:	049b      	lsls	r3, r3, #18
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d11f      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e08b      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d107      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b38:	4b47      	ldr	r3, [pc, #284]	@ (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2380      	movs	r3, #128	@ 0x80
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4013      	ands	r3, r2
 8002b42:	d113      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e07f      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b50:	4b41      	ldr	r3, [pc, #260]	@ (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b54:	2202      	movs	r2, #2
 8002b56:	4013      	ands	r3, r2
 8002b58:	d108      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e074      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b62:	2202      	movs	r2, #2
 8002b64:	4013      	ands	r3, r2
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e06d      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2207      	movs	r2, #7
 8002b72:	4393      	bics	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	4b37      	ldr	r3, [pc, #220]	@ (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b80:	f7ff f8fa 	bl	8001d78 <HAL_GetTick>
 8002b84:	0003      	movs	r3, r0
 8002b86:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b88:	e009      	b.n	8002b9e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8a:	f7ff f8f5 	bl	8001d78 <HAL_GetTick>
 8002b8e:	0002      	movs	r2, r0
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	4a2f      	ldr	r2, [pc, #188]	@ (8002c54 <HAL_RCC_ClockConfig+0x1f4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e054      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2238      	movs	r2, #56	@ 0x38
 8002ba4:	401a      	ands	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d1ec      	bne.n	8002b8a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b27      	ldr	r3, [pc, #156]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d21e      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b24      	ldr	r3, [pc, #144]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	4393      	bics	r3, r2
 8002bc6:	0019      	movs	r1, r3
 8002bc8:	4b21      	ldr	r3, [pc, #132]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bd0:	f7ff f8d2 	bl	8001d78 <HAL_GetTick>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bd8:	e009      	b.n	8002bee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bda:	f7ff f8cd 	bl	8001d78 <HAL_GetTick>
 8002bde:	0002      	movs	r2, r0
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c54 <HAL_RCC_ClockConfig+0x1f4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e02c      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bee:	4b18      	ldr	r3, [pc, #96]	@ (8002c50 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2207      	movs	r2, #7
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d1ee      	bne.n	8002bda <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2204      	movs	r2, #4
 8002c02:	4013      	ands	r3, r2
 8002c04:	d009      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c06:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	4a15      	ldr	r2, [pc, #84]	@ (8002c60 <HAL_RCC_ClockConfig+0x200>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002c16:	430a      	orrs	r2, r1
 8002c18:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002c1a:	f000 f829 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 8002c1e:	0001      	movs	r1, r0
 8002c20:	4b0d      	ldr	r3, [pc, #52]	@ (8002c58 <HAL_RCC_ClockConfig+0x1f8>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	220f      	movs	r2, #15
 8002c28:	401a      	ands	r2, r3
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c64 <HAL_RCC_ClockConfig+0x204>)
 8002c2c:	0092      	lsls	r2, r2, #2
 8002c2e:	58d3      	ldr	r3, [r2, r3]
 8002c30:	221f      	movs	r2, #31
 8002c32:	4013      	ands	r3, r2
 8002c34:	000a      	movs	r2, r1
 8002c36:	40da      	lsrs	r2, r3
 8002c38:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <HAL_RCC_ClockConfig+0x208>)
 8002c3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c6c <HAL_RCC_ClockConfig+0x20c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f7ff f83d 	bl	8001cc0 <HAL_InitTick>
 8002c46:	0003      	movs	r3, r0
}
 8002c48:	0018      	movs	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b004      	add	sp, #16
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40022000 	.word	0x40022000
 8002c54:	00001388 	.word	0x00001388
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	fffff0ff 	.word	0xfffff0ff
 8002c60:	ffff8fff 	.word	0xffff8fff
 8002c64:	08006618 	.word	0x08006618
 8002c68:	20000040 	.word	0x20000040
 8002c6c:	20000044 	.word	0x20000044

08002c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c76:	4b3c      	ldr	r3, [pc, #240]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2238      	movs	r2, #56	@ 0x38
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d10f      	bne.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002c80:	4b39      	ldr	r3, [pc, #228]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	0adb      	lsrs	r3, r3, #11
 8002c86:	2207      	movs	r2, #7
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	409a      	lsls	r2, r3
 8002c8e:	0013      	movs	r3, r2
 8002c90:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002c92:	6839      	ldr	r1, [r7, #0]
 8002c94:	4835      	ldr	r0, [pc, #212]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c96:	f7fd fa3f 	bl	8000118 <__udivsi3>
 8002c9a:	0003      	movs	r3, r0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	e05d      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca0:	4b31      	ldr	r3, [pc, #196]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2238      	movs	r2, #56	@ 0x38
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d102      	bne.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cac:	4b30      	ldr	r3, [pc, #192]	@ (8002d70 <HAL_RCC_GetSysClockFreq+0x100>)
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	e054      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2238      	movs	r2, #56	@ 0x38
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b10      	cmp	r3, #16
 8002cbc:	d138      	bne.n	8002d30 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cc8:	4b27      	ldr	r3, [pc, #156]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	2207      	movs	r2, #7
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d10d      	bne.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	4824      	ldr	r0, [pc, #144]	@ (8002d70 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ce0:	f7fd fa1a 	bl	8000118 <__udivsi3>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	227f      	movs	r2, #127	@ 0x7f
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	434b      	muls	r3, r1
 8002cf4:	617b      	str	r3, [r7, #20]
        break;
 8002cf6:	e00d      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	481c      	ldr	r0, [pc, #112]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cfc:	f7fd fa0c 	bl	8000118 <__udivsi3>
 8002d00:	0003      	movs	r3, r0
 8002d02:	0019      	movs	r1, r3
 8002d04:	4b18      	ldr	r3, [pc, #96]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	227f      	movs	r2, #127	@ 0x7f
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	434b      	muls	r3, r1
 8002d10:	617b      	str	r3, [r7, #20]
        break;
 8002d12:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002d14:	4b14      	ldr	r3, [pc, #80]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	0f5b      	lsrs	r3, r3, #29
 8002d1a:	2207      	movs	r2, #7
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	3301      	adds	r3, #1
 8002d20:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	6978      	ldr	r0, [r7, #20]
 8002d26:	f7fd f9f7 	bl	8000118 <__udivsi3>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	e015      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d30:	4b0d      	ldr	r3, [pc, #52]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2238      	movs	r2, #56	@ 0x38
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d103      	bne.n	8002d44 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d3c:	2380      	movs	r3, #128	@ 0x80
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	e00b      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d44:	4b08      	ldr	r3, [pc, #32]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2238      	movs	r2, #56	@ 0x38
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b18      	cmp	r3, #24
 8002d4e:	d103      	bne.n	8002d58 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d50:	23fa      	movs	r3, #250	@ 0xfa
 8002d52:	01db      	lsls	r3, r3, #7
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	e001      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d5c:	693b      	ldr	r3, [r7, #16]
}
 8002d5e:	0018      	movs	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b006      	add	sp, #24
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	00f42400 	.word	0x00f42400
 8002d70:	007a1200 	.word	0x007a1200

08002d74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d78:	4b02      	ldr	r3, [pc, #8]	@ (8002d84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			@ (mov r8, r8)
 8002d84:	20000040 	.word	0x20000040

08002d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d88:	b5b0      	push	{r4, r5, r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d8c:	f7ff fff2 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002d90:	0004      	movs	r4, r0
 8002d92:	f7ff fb3f 	bl	8002414 <LL_RCC_GetAPB1Prescaler>
 8002d96:	0003      	movs	r3, r0
 8002d98:	0b1a      	lsrs	r2, r3, #12
 8002d9a:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d9c:	0092      	lsls	r2, r2, #2
 8002d9e:	58d3      	ldr	r3, [r2, r3]
 8002da0:	221f      	movs	r2, #31
 8002da2:	4013      	ands	r3, r2
 8002da4:	40dc      	lsrs	r4, r3
 8002da6:	0023      	movs	r3, r4
}
 8002da8:	0018      	movs	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bdb0      	pop	{r4, r5, r7, pc}
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	08006658 	.word	0x08006658

08002db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002dbc:	2313      	movs	r3, #19
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dc4:	2312      	movs	r3, #18
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	2380      	movs	r3, #128	@ 0x80
 8002dd2:	029b      	lsls	r3, r3, #10
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d100      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002dd8:	e0a3      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dda:	2011      	movs	r0, #17
 8002ddc:	183b      	adds	r3, r7, r0
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de2:	4ba5      	ldr	r3, [pc, #660]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002de4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002de6:	2380      	movs	r3, #128	@ 0x80
 8002de8:	055b      	lsls	r3, r3, #21
 8002dea:	4013      	ands	r3, r2
 8002dec:	d110      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dee:	4ba2      	ldr	r3, [pc, #648]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002df0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002df2:	4ba1      	ldr	r3, [pc, #644]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002df4:	2180      	movs	r1, #128	@ 0x80
 8002df6:	0549      	lsls	r1, r1, #21
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002dfc:	4b9e      	ldr	r3, [pc, #632]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	055b      	lsls	r3, r3, #21
 8002e04:	4013      	ands	r3, r2
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0a:	183b      	adds	r3, r7, r0
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e10:	4b9a      	ldr	r3, [pc, #616]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b99      	ldr	r3, [pc, #612]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002e16:	2180      	movs	r1, #128	@ 0x80
 8002e18:	0049      	lsls	r1, r1, #1
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e1e:	f7fe ffab 	bl	8001d78 <HAL_GetTick>
 8002e22:	0003      	movs	r3, r0
 8002e24:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e26:	e00b      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e28:	f7fe ffa6 	bl	8001d78 <HAL_GetTick>
 8002e2c:	0002      	movs	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d904      	bls.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002e36:	2313      	movs	r3, #19
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	701a      	strb	r2, [r3, #0]
        break;
 8002e3e:	e005      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e40:	4b8e      	ldr	r3, [pc, #568]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	2380      	movs	r3, #128	@ 0x80
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d0ed      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002e4c:	2313      	movs	r3, #19
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d154      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e56:	4b88      	ldr	r3, [pc, #544]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e5a:	23c0      	movs	r3, #192	@ 0xc0
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4013      	ands	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d019      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d014      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e72:	4b81      	ldr	r3, [pc, #516]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e76:	4a82      	ldr	r2, [pc, #520]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e7c:	4b7e      	ldr	r3, [pc, #504]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e80:	4b7d      	ldr	r3, [pc, #500]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e82:	2180      	movs	r1, #128	@ 0x80
 8002e84:	0249      	lsls	r1, r1, #9
 8002e86:	430a      	orrs	r2, r1
 8002e88:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e8a:	4b7b      	ldr	r3, [pc, #492]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e8e:	4b7a      	ldr	r3, [pc, #488]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e90:	497c      	ldr	r1, [pc, #496]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002e92:	400a      	ands	r2, r1
 8002e94:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e96:	4b78      	ldr	r3, [pc, #480]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d016      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7fe ff68 	bl	8001d78 <HAL_GetTick>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eac:	e00c      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7fe ff63 	bl	8001d78 <HAL_GetTick>
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	4a73      	ldr	r2, [pc, #460]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d904      	bls.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002ebe:	2313      	movs	r3, #19
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	701a      	strb	r2, [r3, #0]
            break;
 8002ec6:	e004      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec8:	4b6b      	ldr	r3, [pc, #428]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ecc:	2202      	movs	r2, #2
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d0ed      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002ed2:	2313      	movs	r3, #19
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10a      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002edc:	4b66      	ldr	r3, [pc, #408]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee0:	4a67      	ldr	r2, [pc, #412]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eea:	4b63      	ldr	r3, [pc, #396]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002eec:	430a      	orrs	r2, r1
 8002eee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ef0:	e00c      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ef2:	2312      	movs	r3, #18
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	2213      	movs	r2, #19
 8002ef8:	18ba      	adds	r2, r7, r2
 8002efa:	7812      	ldrb	r2, [r2, #0]
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e005      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f00:	2312      	movs	r3, #18
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2213      	movs	r2, #19
 8002f06:	18ba      	adds	r2, r7, r2
 8002f08:	7812      	ldrb	r2, [r2, #0]
 8002f0a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f0c:	2311      	movs	r3, #17
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d105      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f16:	4b58      	ldr	r3, [pc, #352]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f1a:	4b57      	ldr	r3, [pc, #348]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f1c:	495b      	ldr	r1, [pc, #364]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002f1e:	400a      	ands	r2, r1
 8002f20:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2201      	movs	r2, #1
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d009      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f2c:	4b52      	ldr	r3, [pc, #328]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f30:	2203      	movs	r2, #3
 8002f32:	4393      	bics	r3, r2
 8002f34:	0019      	movs	r1, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2210      	movs	r2, #16
 8002f46:	4013      	ands	r3, r2
 8002f48:	d009      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4e:	4a50      	ldr	r2, [pc, #320]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	0019      	movs	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	4b47      	ldr	r3, [pc, #284]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	2380      	movs	r3, #128	@ 0x80
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4013      	ands	r3, r2
 8002f68:	d009      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f6a:	4b43      	ldr	r3, [pc, #268]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6e:	4a49      	ldr	r2, [pc, #292]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	0019      	movs	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695a      	ldr	r2, [r3, #20]
 8002f78:	4b3f      	ldr	r3, [pc, #252]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	2380      	movs	r3, #128	@ 0x80
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4013      	ands	r3, r2
 8002f88:	d009      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8e:	4a42      	ldr	r2, [pc, #264]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	0019      	movs	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699a      	ldr	r2, [r3, #24]
 8002f98:	4b37      	ldr	r3, [pc, #220]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d009      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fa8:	4b33      	ldr	r3, [pc, #204]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fac:	4a3b      	ldr	r2, [pc, #236]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	4b30      	ldr	r3, [pc, #192]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	2380      	movs	r3, #128	@ 0x80
 8002fc2:	01db      	lsls	r3, r3, #7
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d015      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	0899      	lsrs	r1, r3, #2
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69da      	ldr	r2, [r3, #28]
 8002fd4:	4b28      	ldr	r3, [pc, #160]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	2380      	movs	r3, #128	@ 0x80
 8002fe0:	05db      	lsls	r3, r3, #23
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d106      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002fe6:	4b24      	ldr	r3, [pc, #144]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	4b23      	ldr	r3, [pc, #140]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fec:	2180      	movs	r1, #128	@ 0x80
 8002fee:	0249      	lsls	r1, r1, #9
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	2380      	movs	r3, #128	@ 0x80
 8002ffa:	039b      	lsls	r3, r3, #14
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d016      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003000:	4b1d      	ldr	r3, [pc, #116]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003004:	4a26      	ldr	r2, [pc, #152]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003006:	4013      	ands	r3, r2
 8003008:	0019      	movs	r1, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1a      	ldr	r2, [r3, #32]
 800300e:	4b1a      	ldr	r3, [pc, #104]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003010:	430a      	orrs	r2, r1
 8003012:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1a      	ldr	r2, [r3, #32]
 8003018:	2380      	movs	r3, #128	@ 0x80
 800301a:	03db      	lsls	r3, r3, #15
 800301c:	429a      	cmp	r2, r3
 800301e:	d106      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003020:	4b15      	ldr	r3, [pc, #84]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	4b14      	ldr	r3, [pc, #80]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003026:	2180      	movs	r1, #128	@ 0x80
 8003028:	0449      	lsls	r1, r1, #17
 800302a:	430a      	orrs	r2, r1
 800302c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	2380      	movs	r3, #128	@ 0x80
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	4013      	ands	r3, r2
 8003038:	d016      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800303a:	4b0f      	ldr	r3, [pc, #60]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800303c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800303e:	4a19      	ldr	r2, [pc, #100]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003040:	4013      	ands	r3, r2
 8003042:	0019      	movs	r1, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	4b0b      	ldr	r3, [pc, #44]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800304a:	430a      	orrs	r2, r1
 800304c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	2380      	movs	r3, #128	@ 0x80
 8003054:	01db      	lsls	r3, r3, #7
 8003056:	429a      	cmp	r2, r3
 8003058:	d106      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800305a:	4b07      	ldr	r3, [pc, #28]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	4b06      	ldr	r3, [pc, #24]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003060:	2180      	movs	r1, #128	@ 0x80
 8003062:	0249      	lsls	r1, r1, #9
 8003064:	430a      	orrs	r2, r1
 8003066:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003068:	2312      	movs	r3, #18
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	781b      	ldrb	r3, [r3, #0]
}
 800306e:	0018      	movs	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	b006      	add	sp, #24
 8003074:	bd80      	pop	{r7, pc}
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	40021000 	.word	0x40021000
 800307c:	40007000 	.word	0x40007000
 8003080:	fffffcff 	.word	0xfffffcff
 8003084:	fffeffff 	.word	0xfffeffff
 8003088:	00001388 	.word	0x00001388
 800308c:	efffffff 	.word	0xefffffff
 8003090:	fffff3ff 	.word	0xfffff3ff
 8003094:	fff3ffff 	.word	0xfff3ffff
 8003098:	ffcfffff 	.word	0xffcfffff
 800309c:	ffffcfff 	.word	0xffffcfff
 80030a0:	ffbfffff 	.word	0xffbfffff
 80030a4:	ffff3fff 	.word	0xffff3fff

080030a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80030a8:	b5b0      	push	{r4, r5, r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80030b0:	230f      	movs	r3, #15
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d100      	bne.n	80030c0 <HAL_RTC_Init+0x18>
 80030be:	e08c      	b.n	80031da <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2229      	movs	r2, #41	@ 0x29
 80030c4:	5c9b      	ldrb	r3, [r3, r2]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10b      	bne.n	80030e4 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2228      	movs	r2, #40	@ 0x28
 80030d0:	2100      	movs	r1, #0
 80030d2:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2288      	movs	r2, #136	@ 0x88
 80030d8:	0212      	lsls	r2, r2, #8
 80030da:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	0018      	movs	r0, r3
 80030e0:	f7fe fb90 	bl	8001804 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2229      	movs	r2, #41	@ 0x29
 80030e8:	2102      	movs	r1, #2
 80030ea:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	2210      	movs	r2, #16
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b10      	cmp	r3, #16
 80030f8:	d062      	beq.n	80031c0 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	22ca      	movs	r2, #202	@ 0xca
 8003100:	625a      	str	r2, [r3, #36]	@ 0x24
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2253      	movs	r2, #83	@ 0x53
 8003108:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800310a:	250f      	movs	r5, #15
 800310c:	197c      	adds	r4, r7, r5
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	0018      	movs	r0, r3
 8003112:	f000 fbf4 	bl	80038fe <RTC_EnterInitMode>
 8003116:	0003      	movs	r3, r0
 8003118:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800311a:	0028      	movs	r0, r5
 800311c:	183b      	adds	r3, r7, r0
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d12c      	bne.n	800317e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	492e      	ldr	r1, [pc, #184]	@ (80031e8 <HAL_RTC_Init+0x140>)
 8003130:	400a      	ands	r2, r1
 8003132:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6999      	ldr	r1, [r3, #24]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6912      	ldr	r2, [r2, #16]
 800315a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6919      	ldr	r1, [r3, #16]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	041a      	lsls	r2, r3, #16
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003170:	183c      	adds	r4, r7, r0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	0018      	movs	r0, r3
 8003176:	f000 fc05 	bl	8003984 <RTC_ExitInitMode>
 800317a:	0003      	movs	r3, r0
 800317c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800317e:	230f      	movs	r3, #15
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d116      	bne.n	80031b6 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	00d2      	lsls	r2, r2, #3
 8003194:	08d2      	lsrs	r2, r2, #3
 8003196:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6999      	ldr	r1, [r3, #24]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	22ff      	movs	r2, #255	@ 0xff
 80031bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80031be:	e003      	b.n	80031c8 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80031c0:	230f      	movs	r3, #15
 80031c2:	18fb      	adds	r3, r7, r3
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80031c8:	230f      	movs	r3, #15
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d103      	bne.n	80031da <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2229      	movs	r2, #41	@ 0x29
 80031d6:	2101      	movs	r1, #1
 80031d8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80031da:	230f      	movs	r3, #15
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	781b      	ldrb	r3, [r3, #0]
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b004      	add	sp, #16
 80031e6:	bdb0      	pop	{r4, r5, r7, pc}
 80031e8:	fb8fffbf 	.word	0xfb8fffbf

080031ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031ec:	b5b0      	push	{r4, r5, r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2228      	movs	r2, #40	@ 0x28
 80031fc:	5c9b      	ldrb	r3, [r3, r2]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_RTC_SetTime+0x1a>
 8003202:	2302      	movs	r3, #2
 8003204:	e092      	b.n	800332c <HAL_RTC_SetTime+0x140>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2228      	movs	r2, #40	@ 0x28
 800320a:	2101      	movs	r1, #1
 800320c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2229      	movs	r2, #41	@ 0x29
 8003212:	2102      	movs	r1, #2
 8003214:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	22ca      	movs	r2, #202	@ 0xca
 800321c:	625a      	str	r2, [r3, #36]	@ 0x24
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2253      	movs	r2, #83	@ 0x53
 8003224:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003226:	2513      	movs	r5, #19
 8003228:	197c      	adds	r4, r7, r5
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	0018      	movs	r0, r3
 800322e:	f000 fb66 	bl	80038fe <RTC_EnterInitMode>
 8003232:	0003      	movs	r3, r0
 8003234:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003236:	197b      	adds	r3, r7, r5
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d162      	bne.n	8003304 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d125      	bne.n	8003290 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2240      	movs	r2, #64	@ 0x40
 800324c:	4013      	ands	r3, r2
 800324e:	d102      	bne.n	8003256 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2200      	movs	r2, #0
 8003254:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	0018      	movs	r0, r3
 800325c:	f000 fbd6 	bl	8003a0c <RTC_ByteToBcd2>
 8003260:	0003      	movs	r3, r0
 8003262:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	785b      	ldrb	r3, [r3, #1]
 8003268:	0018      	movs	r0, r3
 800326a:	f000 fbcf 	bl	8003a0c <RTC_ByteToBcd2>
 800326e:	0003      	movs	r3, r0
 8003270:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003272:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	789b      	ldrb	r3, [r3, #2]
 8003278:	0018      	movs	r0, r3
 800327a:	f000 fbc7 	bl	8003a0c <RTC_ByteToBcd2>
 800327e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003280:	0022      	movs	r2, r4
 8003282:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	78db      	ldrb	r3, [r3, #3]
 8003288:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	e017      	b.n	80032c0 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2240      	movs	r2, #64	@ 0x40
 8003298:	4013      	ands	r3, r2
 800329a:	d102      	bne.n	80032a2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2200      	movs	r2, #0
 80032a0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	785b      	ldrb	r3, [r3, #1]
 80032ac:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032ae:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80032b4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	78db      	ldrb	r3, [r3, #3]
 80032ba:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032bc:	4313      	orrs	r3, r2
 80032be:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	491b      	ldr	r1, [pc, #108]	@ (8003334 <HAL_RTC_SetTime+0x148>)
 80032c8:	400a      	ands	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4918      	ldr	r1, [pc, #96]	@ (8003338 <HAL_RTC_SetTime+0x14c>)
 80032d8:	400a      	ands	r2, r1
 80032da:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6999      	ldr	r1, [r3, #24]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80032f4:	2313      	movs	r3, #19
 80032f6:	18fc      	adds	r4, r7, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	0018      	movs	r0, r3
 80032fc:	f000 fb42 	bl	8003984 <RTC_ExitInitMode>
 8003300:	0003      	movs	r3, r0
 8003302:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	22ff      	movs	r2, #255	@ 0xff
 800330a:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 800330c:	2313      	movs	r3, #19
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d103      	bne.n	800331e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2229      	movs	r2, #41	@ 0x29
 800331a:	2101      	movs	r1, #1
 800331c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2228      	movs	r2, #40	@ 0x28
 8003322:	2100      	movs	r1, #0
 8003324:	5499      	strb	r1, [r3, r2]

  return status;
 8003326:	2313      	movs	r3, #19
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	781b      	ldrb	r3, [r3, #0]
}
 800332c:	0018      	movs	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	b006      	add	sp, #24
 8003332:	bdb0      	pop	{r4, r5, r7, pc}
 8003334:	007f7f7f 	.word	0x007f7f7f
 8003338:	fffbffff 	.word	0xfffbffff

0800333c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	045b      	lsls	r3, r3, #17
 800335a:	0c5a      	lsrs	r2, r3, #17
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a22      	ldr	r2, [pc, #136]	@ (80033f0 <HAL_RTC_GetTime+0xb4>)
 8003368:	4013      	ands	r3, r2
 800336a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	0c1b      	lsrs	r3, r3, #16
 8003370:	b2db      	uxtb	r3, r3
 8003372:	223f      	movs	r2, #63	@ 0x3f
 8003374:	4013      	ands	r3, r2
 8003376:	b2da      	uxtb	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	b2db      	uxtb	r3, r3
 8003382:	227f      	movs	r2, #127	@ 0x7f
 8003384:	4013      	ands	r3, r2
 8003386:	b2da      	uxtb	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	227f      	movs	r2, #127	@ 0x7f
 8003392:	4013      	ands	r3, r2
 8003394:	b2da      	uxtb	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	0d9b      	lsrs	r3, r3, #22
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2201      	movs	r2, #1
 80033a2:	4013      	ands	r3, r2
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d11a      	bne.n	80033e6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	0018      	movs	r0, r3
 80033b6:	f000 fb51 	bl	8003a5c <RTC_Bcd2ToByte>
 80033ba:	0003      	movs	r3, r0
 80033bc:	001a      	movs	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	785b      	ldrb	r3, [r3, #1]
 80033c6:	0018      	movs	r0, r3
 80033c8:	f000 fb48 	bl	8003a5c <RTC_Bcd2ToByte>
 80033cc:	0003      	movs	r3, r0
 80033ce:	001a      	movs	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	789b      	ldrb	r3, [r3, #2]
 80033d8:	0018      	movs	r0, r3
 80033da:	f000 fb3f 	bl	8003a5c <RTC_Bcd2ToByte>
 80033de:	0003      	movs	r3, r0
 80033e0:	001a      	movs	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	0018      	movs	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b006      	add	sp, #24
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	007f7f7f 	.word	0x007f7f7f

080033f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033f4:	b5b0      	push	{r4, r5, r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2228      	movs	r2, #40	@ 0x28
 8003404:	5c9b      	ldrb	r3, [r3, r2]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_RTC_SetDate+0x1a>
 800340a:	2302      	movs	r3, #2
 800340c:	e07e      	b.n	800350c <HAL_RTC_SetDate+0x118>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2228      	movs	r2, #40	@ 0x28
 8003412:	2101      	movs	r1, #1
 8003414:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2229      	movs	r2, #41	@ 0x29
 800341a:	2102      	movs	r1, #2
 800341c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10e      	bne.n	8003442 <HAL_RTC_SetDate+0x4e>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	785b      	ldrb	r3, [r3, #1]
 8003428:	001a      	movs	r2, r3
 800342a:	2310      	movs	r3, #16
 800342c:	4013      	ands	r3, r2
 800342e:	d008      	beq.n	8003442 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	785b      	ldrb	r3, [r3, #1]
 8003434:	2210      	movs	r2, #16
 8003436:	4393      	bics	r3, r2
 8003438:	b2db      	uxtb	r3, r3
 800343a:	330a      	adds	r3, #10
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d11c      	bne.n	8003482 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	78db      	ldrb	r3, [r3, #3]
 800344c:	0018      	movs	r0, r3
 800344e:	f000 fadd 	bl	8003a0c <RTC_ByteToBcd2>
 8003452:	0003      	movs	r3, r0
 8003454:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	785b      	ldrb	r3, [r3, #1]
 800345a:	0018      	movs	r0, r3
 800345c:	f000 fad6 	bl	8003a0c <RTC_ByteToBcd2>
 8003460:	0003      	movs	r3, r0
 8003462:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003464:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	789b      	ldrb	r3, [r3, #2]
 800346a:	0018      	movs	r0, r3
 800346c:	f000 face 	bl	8003a0c <RTC_ByteToBcd2>
 8003470:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003472:	0022      	movs	r2, r4
 8003474:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	e00e      	b.n	80034a0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	78db      	ldrb	r3, [r3, #3]
 8003486:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	785b      	ldrb	r3, [r3, #1]
 800348c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800348e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003494:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	22ca      	movs	r2, #202	@ 0xca
 80034a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2253      	movs	r2, #83	@ 0x53
 80034ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80034b0:	2513      	movs	r5, #19
 80034b2:	197c      	adds	r4, r7, r5
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	0018      	movs	r0, r3
 80034b8:	f000 fa21 	bl	80038fe <RTC_EnterInitMode>
 80034bc:	0003      	movs	r3, r0
 80034be:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80034c0:	0028      	movs	r0, r5
 80034c2:	183b      	adds	r3, r7, r0
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10c      	bne.n	80034e4 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4910      	ldr	r1, [pc, #64]	@ (8003514 <HAL_RTC_SetDate+0x120>)
 80034d2:	400a      	ands	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034d6:	183c      	adds	r4, r7, r0
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	0018      	movs	r0, r3
 80034dc:	f000 fa52 	bl	8003984 <RTC_ExitInitMode>
 80034e0:	0003      	movs	r3, r0
 80034e2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	22ff      	movs	r2, #255	@ 0xff
 80034ea:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80034ec:	2313      	movs	r3, #19
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d103      	bne.n	80034fe <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2229      	movs	r2, #41	@ 0x29
 80034fa:	2101      	movs	r1, #1
 80034fc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2228      	movs	r2, #40	@ 0x28
 8003502:	2100      	movs	r1, #0
 8003504:	5499      	strb	r1, [r3, r2]

  return status;
 8003506:	2313      	movs	r3, #19
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	781b      	ldrb	r3, [r3, #0]
}
 800350c:	0018      	movs	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	b006      	add	sp, #24
 8003512:	bdb0      	pop	{r4, r5, r7, pc}
 8003514:	00ffff3f 	.word	0x00ffff3f

08003518 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4a21      	ldr	r2, [pc, #132]	@ (80035b0 <HAL_RTC_GetDate+0x98>)
 800352c:	4013      	ands	r3, r2
 800352e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	0c1b      	lsrs	r3, r3, #16
 8003534:	b2da      	uxtb	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	b2db      	uxtb	r3, r3
 8003540:	221f      	movs	r2, #31
 8003542:	4013      	ands	r3, r2
 8003544:	b2da      	uxtb	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	223f      	movs	r2, #63	@ 0x3f
 8003550:	4013      	ands	r3, r2
 8003552:	b2da      	uxtb	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	0b5b      	lsrs	r3, r3, #13
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2207      	movs	r2, #7
 8003560:	4013      	ands	r3, r2
 8003562:	b2da      	uxtb	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d11a      	bne.n	80035a4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	78db      	ldrb	r3, [r3, #3]
 8003572:	0018      	movs	r0, r3
 8003574:	f000 fa72 	bl	8003a5c <RTC_Bcd2ToByte>
 8003578:	0003      	movs	r3, r0
 800357a:	001a      	movs	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	785b      	ldrb	r3, [r3, #1]
 8003584:	0018      	movs	r0, r3
 8003586:	f000 fa69 	bl	8003a5c <RTC_Bcd2ToByte>
 800358a:	0003      	movs	r3, r0
 800358c:	001a      	movs	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	789b      	ldrb	r3, [r3, #2]
 8003596:	0018      	movs	r0, r3
 8003598:	f000 fa60 	bl	8003a5c <RTC_Bcd2ToByte>
 800359c:	0003      	movs	r3, r0
 800359e:	001a      	movs	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	0018      	movs	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b006      	add	sp, #24
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	00ffff3f 	.word	0x00ffff3f

080035b4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b089      	sub	sp, #36	@ 0x24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2228      	movs	r2, #40	@ 0x28
 80035c4:	5c9b      	ldrb	r3, [r3, r2]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_RTC_SetAlarm_IT+0x1a>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e127      	b.n	800381e <HAL_RTC_SetAlarm_IT+0x26a>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2228      	movs	r2, #40	@ 0x28
 80035d2:	2101      	movs	r1, #1
 80035d4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2229      	movs	r2, #41	@ 0x29
 80035da:	2102      	movs	r1, #2
 80035dc:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d136      	bne.n	8003652 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	2240      	movs	r2, #64	@ 0x40
 80035ec:	4013      	ands	r3, r2
 80035ee:	d102      	bne.n	80035f6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2200      	movs	r2, #0
 80035f4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 fa06 	bl	8003a0c <RTC_ByteToBcd2>
 8003600:	0003      	movs	r3, r0
 8003602:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	0018      	movs	r0, r3
 800360a:	f000 f9ff 	bl	8003a0c <RTC_ByteToBcd2>
 800360e:	0003      	movs	r3, r0
 8003610:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003612:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	789b      	ldrb	r3, [r3, #2]
 8003618:	0018      	movs	r0, r3
 800361a:	f000 f9f7 	bl	8003a0c <RTC_ByteToBcd2>
 800361e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003620:	0022      	movs	r2, r4
 8003622:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	78db      	ldrb	r3, [r3, #3]
 8003628:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800362a:	431a      	orrs	r2, r3
 800362c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2220      	movs	r2, #32
 8003632:	5c9b      	ldrb	r3, [r3, r2]
 8003634:	0018      	movs	r0, r3
 8003636:	f000 f9e9 	bl	8003a0c <RTC_ByteToBcd2>
 800363a:	0003      	movs	r3, r0
 800363c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800363e:	0022      	movs	r2, r4
 8003640:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003646:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800364c:	4313      	orrs	r3, r2
 800364e:	61fb      	str	r3, [r7, #28]
 8003650:	e022      	b.n	8003698 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	2240      	movs	r2, #64	@ 0x40
 800365a:	4013      	ands	r3, r2
 800365c:	d102      	bne.n	8003664 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2200      	movs	r2, #0
 8003662:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	785b      	ldrb	r3, [r3, #1]
 800366e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003670:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003676:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	78db      	ldrb	r3, [r3, #3]
 800367c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800367e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2120      	movs	r1, #32
 8003684:	5c5b      	ldrb	r3, [r3, r1]
 8003686:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003688:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800368e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003694:	4313      	orrs	r3, r2
 8003696:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	22ca      	movs	r2, #202	@ 0xca
 80036aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2253      	movs	r2, #83	@ 0x53
 80036b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036b8:	2380      	movs	r3, #128	@ 0x80
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	429a      	cmp	r2, r3
 80036be:	d14c      	bne.n	800375a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4957      	ldr	r1, [pc, #348]	@ (8003828 <HAL_RTC_SetAlarm_IT+0x274>)
 80036cc:	400a      	ands	r2, r1
 80036ce:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2101      	movs	r1, #1
 80036dc:	430a      	orrs	r2, r1
 80036de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80036e0:	f7fe fb4a 	bl	8001d78 <HAL_GetTick>
 80036e4:	0003      	movs	r3, r0
 80036e6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80036e8:	e016      	b.n	8003718 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80036ea:	f7fe fb45 	bl	8001d78 <HAL_GetTick>
 80036ee:	0002      	movs	r2, r0
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	1ad2      	subs	r2, r2, r3
 80036f4:	23fa      	movs	r3, #250	@ 0xfa
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d90d      	bls.n	8003718 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	22ff      	movs	r2, #255	@ 0xff
 8003702:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2229      	movs	r2, #41	@ 0x29
 8003708:	2103      	movs	r1, #3
 800370a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2228      	movs	r2, #40	@ 0x28
 8003710:	2100      	movs	r1, #0
 8003712:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e082      	b.n	800381e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	4013      	ands	r3, r2
 8003722:	d0e2      	beq.n	80036ea <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2180      	movs	r1, #128	@ 0x80
 8003740:	0049      	lsls	r1, r1, #1
 8003742:	430a      	orrs	r2, r1
 8003744:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699a      	ldr	r2, [r3, #24]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2180      	movs	r1, #128	@ 0x80
 8003752:	0149      	lsls	r1, r1, #5
 8003754:	430a      	orrs	r2, r1
 8003756:	619a      	str	r2, [r3, #24]
 8003758:	e04b      	b.n	80037f2 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699a      	ldr	r2, [r3, #24]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4931      	ldr	r1, [pc, #196]	@ (800382c <HAL_RTC_SetAlarm_IT+0x278>)
 8003766:	400a      	ands	r2, r1
 8003768:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2102      	movs	r1, #2
 8003776:	430a      	orrs	r2, r1
 8003778:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800377a:	f7fe fafd 	bl	8001d78 <HAL_GetTick>
 800377e:	0003      	movs	r3, r0
 8003780:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003782:	e016      	b.n	80037b2 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003784:	f7fe faf8 	bl	8001d78 <HAL_GetTick>
 8003788:	0002      	movs	r2, r0
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	1ad2      	subs	r2, r2, r3
 800378e:	23fa      	movs	r3, #250	@ 0xfa
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	429a      	cmp	r2, r3
 8003794:	d90d      	bls.n	80037b2 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	22ff      	movs	r2, #255	@ 0xff
 800379c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2229      	movs	r2, #41	@ 0x29
 80037a2:	2103      	movs	r1, #3
 80037a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2228      	movs	r2, #40	@ 0x28
 80037aa:	2100      	movs	r1, #0
 80037ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e035      	b.n	800381e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2202      	movs	r2, #2
 80037ba:	4013      	ands	r3, r2
 80037bc:	d0e2      	beq.n	8003784 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699a      	ldr	r2, [r3, #24]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2180      	movs	r1, #128	@ 0x80
 80037da:	0089      	lsls	r1, r1, #2
 80037dc:	430a      	orrs	r2, r1
 80037de:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2180      	movs	r1, #128	@ 0x80
 80037ec:	0189      	lsls	r1, r1, #6
 80037ee:	430a      	orrs	r2, r1
 80037f0:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80037f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003830 <HAL_RTC_SetAlarm_IT+0x27c>)
 80037f4:	2380      	movs	r3, #128	@ 0x80
 80037f6:	58d3      	ldr	r3, [r2, r3]
 80037f8:	490d      	ldr	r1, [pc, #52]	@ (8003830 <HAL_RTC_SetAlarm_IT+0x27c>)
 80037fa:	2280      	movs	r2, #128	@ 0x80
 80037fc:	0312      	lsls	r2, r2, #12
 80037fe:	4313      	orrs	r3, r2
 8003800:	2280      	movs	r2, #128	@ 0x80
 8003802:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	22ff      	movs	r2, #255	@ 0xff
 800380a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2229      	movs	r2, #41	@ 0x29
 8003810:	2101      	movs	r1, #1
 8003812:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2228      	movs	r2, #40	@ 0x28
 8003818:	2100      	movs	r1, #0
 800381a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	0018      	movs	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	b009      	add	sp, #36	@ 0x24
 8003824:	bd90      	pop	{r4, r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	fffffeff 	.word	0xfffffeff
 800382c:	fffffdff 	.word	0xfffffdff
 8003830:	40021800 	.word	0x40021800

08003834 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	2380      	movs	r3, #128	@ 0x80
 8003844:	015b      	lsls	r3, r3, #5
 8003846:	4013      	ands	r3, r2
 8003848:	d011      	beq.n	800386e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003850:	2201      	movs	r2, #1
 8003852:	4013      	ands	r3, r2
 8003854:	d00b      	beq.n	800386e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2101      	movs	r1, #1
 8003862:	430a      	orrs	r2, r1
 8003864:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	0018      	movs	r0, r3
 800386a:	f7fd f9ef 	bl	8000c4c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699a      	ldr	r2, [r3, #24]
 8003874:	2380      	movs	r3, #128	@ 0x80
 8003876:	019b      	lsls	r3, r3, #6
 8003878:	4013      	ands	r3, r2
 800387a:	d011      	beq.n	80038a0 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003882:	2202      	movs	r2, #2
 8003884:	4013      	ands	r3, r2
 8003886:	d00b      	beq.n	80038a0 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2102      	movs	r1, #2
 8003894:	430a      	orrs	r2, r1
 8003896:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	0018      	movs	r0, r3
 800389c:	f000 f8fb 	bl	8003a96 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2229      	movs	r2, #41	@ 0x29
 80038a4:	2101      	movs	r1, #1
 80038a6:	5499      	strb	r1, [r3, r2]
}
 80038a8:	46c0      	nop			@ (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b002      	add	sp, #8
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	21a0      	movs	r1, #160	@ 0xa0
 80038c4:	438a      	bics	r2, r1
 80038c6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80038c8:	f7fe fa56 	bl	8001d78 <HAL_GetTick>
 80038cc:	0003      	movs	r3, r0
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80038d0:	e00a      	b.n	80038e8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80038d2:	f7fe fa51 	bl	8001d78 <HAL_GetTick>
 80038d6:	0002      	movs	r2, r0
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1ad2      	subs	r2, r2, r3
 80038dc:	23fa      	movs	r3, #250	@ 0xfa
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d901      	bls.n	80038e8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e006      	b.n	80038f6 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	4013      	ands	r3, r2
 80038f2:	d0ee      	beq.n	80038d2 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	0018      	movs	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b004      	add	sp, #16
 80038fc:	bd80      	pop	{r7, pc}

080038fe <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8003906:	230f      	movs	r3, #15
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2240      	movs	r2, #64	@ 0x40
 8003916:	4013      	ands	r3, r2
 8003918:	d12c      	bne.n	8003974 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2180      	movs	r1, #128	@ 0x80
 8003926:	430a      	orrs	r2, r1
 8003928:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800392a:	f7fe fa25 	bl	8001d78 <HAL_GetTick>
 800392e:	0003      	movs	r3, r0
 8003930:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003932:	e014      	b.n	800395e <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003934:	f7fe fa20 	bl	8001d78 <HAL_GetTick>
 8003938:	0002      	movs	r2, r0
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	1ad2      	subs	r2, r2, r3
 800393e:	200f      	movs	r0, #15
 8003940:	183b      	adds	r3, r7, r0
 8003942:	1839      	adds	r1, r7, r0
 8003944:	7809      	ldrb	r1, [r1, #0]
 8003946:	7019      	strb	r1, [r3, #0]
 8003948:	23fa      	movs	r3, #250	@ 0xfa
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	429a      	cmp	r2, r3
 800394e:	d906      	bls.n	800395e <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8003950:	183b      	adds	r3, r7, r0
 8003952:	2203      	movs	r2, #3
 8003954:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2229      	movs	r2, #41	@ 0x29
 800395a:	2103      	movs	r1, #3
 800395c:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	2240      	movs	r2, #64	@ 0x40
 8003966:	4013      	ands	r3, r2
 8003968:	d104      	bne.n	8003974 <RTC_EnterInitMode+0x76>
 800396a:	230f      	movs	r3, #15
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d1df      	bne.n	8003934 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003974:	230f      	movs	r3, #15
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	781b      	ldrb	r3, [r3, #0]
}
 800397a:	0018      	movs	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	b004      	add	sp, #16
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003984:	b590      	push	{r4, r7, lr}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800398c:	240f      	movs	r4, #15
 800398e:	193b      	adds	r3, r7, r4
 8003990:	2200      	movs	r2, #0
 8003992:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003994:	4b1c      	ldr	r3, [pc, #112]	@ (8003a08 <RTC_ExitInitMode+0x84>)
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	4b1b      	ldr	r3, [pc, #108]	@ (8003a08 <RTC_ExitInitMode+0x84>)
 800399a:	2180      	movs	r1, #128	@ 0x80
 800399c:	438a      	bics	r2, r1
 800399e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80039a0:	4b19      	ldr	r3, [pc, #100]	@ (8003a08 <RTC_ExitInitMode+0x84>)
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	2220      	movs	r2, #32
 80039a6:	4013      	ands	r3, r2
 80039a8:	d10d      	bne.n	80039c6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	0018      	movs	r0, r3
 80039ae:	f7ff ff7f 	bl	80038b0 <HAL_RTC_WaitForSynchro>
 80039b2:	1e03      	subs	r3, r0, #0
 80039b4:	d021      	beq.n	80039fa <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2229      	movs	r2, #41	@ 0x29
 80039ba:	2103      	movs	r1, #3
 80039bc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80039be:	193b      	adds	r3, r7, r4
 80039c0:	2203      	movs	r2, #3
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	e019      	b.n	80039fa <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80039c6:	4b10      	ldr	r3, [pc, #64]	@ (8003a08 <RTC_ExitInitMode+0x84>)
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003a08 <RTC_ExitInitMode+0x84>)
 80039cc:	2120      	movs	r1, #32
 80039ce:	438a      	bics	r2, r1
 80039d0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	0018      	movs	r0, r3
 80039d6:	f7ff ff6b 	bl	80038b0 <HAL_RTC_WaitForSynchro>
 80039da:	1e03      	subs	r3, r0, #0
 80039dc:	d007      	beq.n	80039ee <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2229      	movs	r2, #41	@ 0x29
 80039e2:	2103      	movs	r1, #3
 80039e4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80039e6:	230f      	movs	r3, #15
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	2203      	movs	r2, #3
 80039ec:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80039ee:	4b06      	ldr	r3, [pc, #24]	@ (8003a08 <RTC_ExitInitMode+0x84>)
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	4b05      	ldr	r3, [pc, #20]	@ (8003a08 <RTC_ExitInitMode+0x84>)
 80039f4:	2120      	movs	r1, #32
 80039f6:	430a      	orrs	r2, r1
 80039f8:	619a      	str	r2, [r3, #24]
  }

  return status;
 80039fa:	230f      	movs	r3, #15
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	781b      	ldrb	r3, [r3, #0]
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b005      	add	sp, #20
 8003a06:	bd90      	pop	{r4, r7, pc}
 8003a08:	40002800 	.word	0x40002800

08003a0c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	0002      	movs	r2, r0
 8003a14:	1dfb      	adds	r3, r7, #7
 8003a16:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003a1c:	230b      	movs	r3, #11
 8003a1e:	18fb      	adds	r3, r7, r3
 8003a20:	1dfa      	adds	r2, r7, #7
 8003a22:	7812      	ldrb	r2, [r2, #0]
 8003a24:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8003a26:	e008      	b.n	8003a3a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003a2e:	220b      	movs	r2, #11
 8003a30:	18bb      	adds	r3, r7, r2
 8003a32:	18ba      	adds	r2, r7, r2
 8003a34:	7812      	ldrb	r2, [r2, #0]
 8003a36:	3a0a      	subs	r2, #10
 8003a38:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003a3a:	210b      	movs	r1, #11
 8003a3c:	187b      	adds	r3, r7, r1
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b09      	cmp	r3, #9
 8003a42:	d8f1      	bhi.n	8003a28 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	187b      	adds	r3, r7, r1
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	b2db      	uxtb	r3, r3
}
 8003a54:	0018      	movs	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b004      	add	sp, #16
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	0002      	movs	r2, r0
 8003a64:	1dfb      	adds	r3, r7, #7
 8003a66:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003a68:	1dfb      	adds	r3, r7, #7
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	001a      	movs	r2, r3
 8003a72:	0013      	movs	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	189b      	adds	r3, r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	1dfb      	adds	r3, r7, #7
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	210f      	movs	r1, #15
 8003a86:	400b      	ands	r3, r1
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	18d3      	adds	r3, r2, r3
 8003a8c:	b2db      	uxtb	r3, r3
}
 8003a8e:	0018      	movs	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b004      	add	sp, #16
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003a9e:	46c0      	nop			@ (mov r8, r8)
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b002      	add	sp, #8
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e04a      	b.n	8003b4e <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	223d      	movs	r2, #61	@ 0x3d
 8003abc:	5c9b      	ldrb	r3, [r3, r2]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d107      	bne.n	8003ad4 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	223c      	movs	r2, #60	@ 0x3c
 8003ac8:	2100      	movs	r1, #0
 8003aca:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f7fd ff14 	bl	80018fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	223d      	movs	r2, #61	@ 0x3d
 8003ad8:	2102      	movs	r1, #2
 8003ada:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	0019      	movs	r1, r3
 8003ae6:	0010      	movs	r0, r2
 8003ae8:	f000 fade 	bl	80040a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2248      	movs	r2, #72	@ 0x48
 8003af0:	2101      	movs	r1, #1
 8003af2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	223e      	movs	r2, #62	@ 0x3e
 8003af8:	2101      	movs	r1, #1
 8003afa:	5499      	strb	r1, [r3, r2]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	223f      	movs	r2, #63	@ 0x3f
 8003b00:	2101      	movs	r1, #1
 8003b02:	5499      	strb	r1, [r3, r2]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2240      	movs	r2, #64	@ 0x40
 8003b08:	2101      	movs	r1, #1
 8003b0a:	5499      	strb	r1, [r3, r2]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2241      	movs	r2, #65	@ 0x41
 8003b10:	2101      	movs	r1, #1
 8003b12:	5499      	strb	r1, [r3, r2]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2242      	movs	r2, #66	@ 0x42
 8003b18:	2101      	movs	r1, #1
 8003b1a:	5499      	strb	r1, [r3, r2]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2243      	movs	r2, #67	@ 0x43
 8003b20:	2101      	movs	r1, #1
 8003b22:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2244      	movs	r2, #68	@ 0x44
 8003b28:	2101      	movs	r1, #1
 8003b2a:	5499      	strb	r1, [r3, r2]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2245      	movs	r2, #69	@ 0x45
 8003b30:	2101      	movs	r1, #1
 8003b32:	5499      	strb	r1, [r3, r2]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2246      	movs	r2, #70	@ 0x46
 8003b38:	2101      	movs	r1, #1
 8003b3a:	5499      	strb	r1, [r3, r2]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2247      	movs	r2, #71	@ 0x47
 8003b40:	2101      	movs	r1, #1
 8003b42:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	223d      	movs	r2, #61	@ 0x3d
 8003b48:	2101      	movs	r1, #1
 8003b4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b002      	add	sp, #8
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	223d      	movs	r2, #61	@ 0x3d
 8003b64:	5c9b      	ldrb	r3, [r3, r2]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d001      	beq.n	8003b70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e035      	b.n	8003bdc <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	223d      	movs	r2, #61	@ 0x3d
 8003b74:	2102      	movs	r1, #2
 8003b76:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a19      	ldr	r2, [pc, #100]	@ (8003be4 <HAL_TIM_Base_Start+0x8c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00a      	beq.n	8003b98 <HAL_TIM_Base_Start+0x40>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	2380      	movs	r3, #128	@ 0x80
 8003b88:	05db      	lsls	r3, r3, #23
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d004      	beq.n	8003b98 <HAL_TIM_Base_Start+0x40>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a15      	ldr	r2, [pc, #84]	@ (8003be8 <HAL_TIM_Base_Start+0x90>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d116      	bne.n	8003bc6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	4a13      	ldr	r2, [pc, #76]	@ (8003bec <HAL_TIM_Base_Start+0x94>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b06      	cmp	r3, #6
 8003ba8:	d016      	beq.n	8003bd8 <HAL_TIM_Base_Start+0x80>
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	2380      	movs	r3, #128	@ 0x80
 8003bae:	025b      	lsls	r3, r3, #9
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d011      	beq.n	8003bd8 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc4:	e008      	b.n	8003bd8 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e000      	b.n	8003bda <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	0018      	movs	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b004      	add	sp, #16
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40012c00 	.word	0x40012c00
 8003be8:	40000400 	.word	0x40000400
 8003bec:	00010007 	.word	0x00010007

08003bf0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	4a0d      	ldr	r2, [pc, #52]	@ (8003c34 <HAL_TIM_Base_Stop+0x44>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	d10d      	bne.n	8003c20 <HAL_TIM_Base_Stop+0x30>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8003c38 <HAL_TIM_Base_Stop+0x48>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d107      	bne.n	8003c20 <HAL_TIM_Base_Stop+0x30>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	438a      	bics	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	223d      	movs	r2, #61	@ 0x3d
 8003c24:	2101      	movs	r1, #1
 8003c26:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b002      	add	sp, #8
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	46c0      	nop			@ (mov r8, r8)
 8003c34:	00001111 	.word	0x00001111
 8003c38:	00000444 	.word	0x00000444

08003c3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e04a      	b.n	8003ce4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	223d      	movs	r2, #61	@ 0x3d
 8003c52:	5c9b      	ldrb	r3, [r3, r2]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d107      	bne.n	8003c6a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	223c      	movs	r2, #60	@ 0x3c
 8003c5e:	2100      	movs	r1, #0
 8003c60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	0018      	movs	r0, r3
 8003c66:	f7fd fe13 	bl	8001890 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	223d      	movs	r2, #61	@ 0x3d
 8003c6e:	2102      	movs	r1, #2
 8003c70:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	0010      	movs	r0, r2
 8003c7e:	f000 fa13 	bl	80040a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2248      	movs	r2, #72	@ 0x48
 8003c86:	2101      	movs	r1, #1
 8003c88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	223e      	movs	r2, #62	@ 0x3e
 8003c8e:	2101      	movs	r1, #1
 8003c90:	5499      	strb	r1, [r3, r2]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	223f      	movs	r2, #63	@ 0x3f
 8003c96:	2101      	movs	r1, #1
 8003c98:	5499      	strb	r1, [r3, r2]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2240      	movs	r2, #64	@ 0x40
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	5499      	strb	r1, [r3, r2]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2241      	movs	r2, #65	@ 0x41
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	5499      	strb	r1, [r3, r2]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2242      	movs	r2, #66	@ 0x42
 8003cae:	2101      	movs	r1, #1
 8003cb0:	5499      	strb	r1, [r3, r2]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2243      	movs	r2, #67	@ 0x43
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2244      	movs	r2, #68	@ 0x44
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	5499      	strb	r1, [r3, r2]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2245      	movs	r2, #69	@ 0x45
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	5499      	strb	r1, [r3, r2]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2246      	movs	r2, #70	@ 0x46
 8003cce:	2101      	movs	r1, #1
 8003cd0:	5499      	strb	r1, [r3, r2]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2247      	movs	r2, #71	@ 0x47
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	223d      	movs	r2, #61	@ 0x3d
 8003cde:	2101      	movs	r1, #1
 8003ce0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b002      	add	sp, #8
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d108      	bne.n	8003d0e <HAL_TIM_PWM_Start+0x22>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	223e      	movs	r2, #62	@ 0x3e
 8003d00:	5c9b      	ldrb	r3, [r3, r2]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	1e5a      	subs	r2, r3, #1
 8003d08:	4193      	sbcs	r3, r2
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	e037      	b.n	8003d7e <HAL_TIM_PWM_Start+0x92>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d108      	bne.n	8003d26 <HAL_TIM_PWM_Start+0x3a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	223f      	movs	r2, #63	@ 0x3f
 8003d18:	5c9b      	ldrb	r3, [r3, r2]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	1e5a      	subs	r2, r3, #1
 8003d20:	4193      	sbcs	r3, r2
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	e02b      	b.n	8003d7e <HAL_TIM_PWM_Start+0x92>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d108      	bne.n	8003d3e <HAL_TIM_PWM_Start+0x52>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2240      	movs	r2, #64	@ 0x40
 8003d30:	5c9b      	ldrb	r3, [r3, r2]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	1e5a      	subs	r2, r3, #1
 8003d38:	4193      	sbcs	r3, r2
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	e01f      	b.n	8003d7e <HAL_TIM_PWM_Start+0x92>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b0c      	cmp	r3, #12
 8003d42:	d108      	bne.n	8003d56 <HAL_TIM_PWM_Start+0x6a>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2241      	movs	r2, #65	@ 0x41
 8003d48:	5c9b      	ldrb	r3, [r3, r2]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	1e5a      	subs	r2, r3, #1
 8003d50:	4193      	sbcs	r3, r2
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	e013      	b.n	8003d7e <HAL_TIM_PWM_Start+0x92>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b10      	cmp	r3, #16
 8003d5a:	d108      	bne.n	8003d6e <HAL_TIM_PWM_Start+0x82>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2242      	movs	r2, #66	@ 0x42
 8003d60:	5c9b      	ldrb	r3, [r3, r2]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	1e5a      	subs	r2, r3, #1
 8003d68:	4193      	sbcs	r3, r2
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	e007      	b.n	8003d7e <HAL_TIM_PWM_Start+0x92>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2243      	movs	r2, #67	@ 0x43
 8003d72:	5c9b      	ldrb	r3, [r3, r2]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	1e5a      	subs	r2, r3, #1
 8003d7a:	4193      	sbcs	r3, r2
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e081      	b.n	8003e8a <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d104      	bne.n	8003d96 <HAL_TIM_PWM_Start+0xaa>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	223e      	movs	r2, #62	@ 0x3e
 8003d90:	2102      	movs	r1, #2
 8003d92:	5499      	strb	r1, [r3, r2]
 8003d94:	e023      	b.n	8003dde <HAL_TIM_PWM_Start+0xf2>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d104      	bne.n	8003da6 <HAL_TIM_PWM_Start+0xba>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	223f      	movs	r2, #63	@ 0x3f
 8003da0:	2102      	movs	r1, #2
 8003da2:	5499      	strb	r1, [r3, r2]
 8003da4:	e01b      	b.n	8003dde <HAL_TIM_PWM_Start+0xf2>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d104      	bne.n	8003db6 <HAL_TIM_PWM_Start+0xca>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2240      	movs	r2, #64	@ 0x40
 8003db0:	2102      	movs	r1, #2
 8003db2:	5499      	strb	r1, [r3, r2]
 8003db4:	e013      	b.n	8003dde <HAL_TIM_PWM_Start+0xf2>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b0c      	cmp	r3, #12
 8003dba:	d104      	bne.n	8003dc6 <HAL_TIM_PWM_Start+0xda>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2241      	movs	r2, #65	@ 0x41
 8003dc0:	2102      	movs	r1, #2
 8003dc2:	5499      	strb	r1, [r3, r2]
 8003dc4:	e00b      	b.n	8003dde <HAL_TIM_PWM_Start+0xf2>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d104      	bne.n	8003dd6 <HAL_TIM_PWM_Start+0xea>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2242      	movs	r2, #66	@ 0x42
 8003dd0:	2102      	movs	r1, #2
 8003dd2:	5499      	strb	r1, [r3, r2]
 8003dd4:	e003      	b.n	8003dde <HAL_TIM_PWM_Start+0xf2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2243      	movs	r2, #67	@ 0x43
 8003dda:	2102      	movs	r1, #2
 8003ddc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6839      	ldr	r1, [r7, #0]
 8003de4:	2201      	movs	r2, #1
 8003de6:	0018      	movs	r0, r3
 8003de8:	f000 fc70 	bl	80046cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a28      	ldr	r2, [pc, #160]	@ (8003e94 <HAL_TIM_PWM_Start+0x1a8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d009      	beq.n	8003e0a <HAL_TIM_PWM_Start+0x11e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a27      	ldr	r2, [pc, #156]	@ (8003e98 <HAL_TIM_PWM_Start+0x1ac>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d004      	beq.n	8003e0a <HAL_TIM_PWM_Start+0x11e>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a25      	ldr	r2, [pc, #148]	@ (8003e9c <HAL_TIM_PWM_Start+0x1b0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d101      	bne.n	8003e0e <HAL_TIM_PWM_Start+0x122>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <HAL_TIM_PWM_Start+0x124>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2180      	movs	r1, #128	@ 0x80
 8003e20:	0209      	lsls	r1, r1, #8
 8003e22:	430a      	orrs	r2, r1
 8003e24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003e94 <HAL_TIM_PWM_Start+0x1a8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00a      	beq.n	8003e46 <HAL_TIM_PWM_Start+0x15a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	2380      	movs	r3, #128	@ 0x80
 8003e36:	05db      	lsls	r3, r3, #23
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d004      	beq.n	8003e46 <HAL_TIM_PWM_Start+0x15a>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a17      	ldr	r2, [pc, #92]	@ (8003ea0 <HAL_TIM_PWM_Start+0x1b4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d116      	bne.n	8003e74 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	4a15      	ldr	r2, [pc, #84]	@ (8003ea4 <HAL_TIM_PWM_Start+0x1b8>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b06      	cmp	r3, #6
 8003e56:	d016      	beq.n	8003e86 <HAL_TIM_PWM_Start+0x19a>
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	2380      	movs	r3, #128	@ 0x80
 8003e5c:	025b      	lsls	r3, r3, #9
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d011      	beq.n	8003e86 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e72:	e008      	b.n	8003e86 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2101      	movs	r1, #1
 8003e80:	430a      	orrs	r2, r1
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	e000      	b.n	8003e88 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e86:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b004      	add	sp, #16
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	46c0      	nop			@ (mov r8, r8)
 8003e94:	40012c00 	.word	0x40012c00
 8003e98:	40014400 	.word	0x40014400
 8003e9c:	40014800 	.word	0x40014800
 8003ea0:	40000400 	.word	0x40000400
 8003ea4:	00010007 	.word	0x00010007

08003ea8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb4:	2317      	movs	r3, #23
 8003eb6:	18fb      	adds	r3, r7, r3
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	223c      	movs	r2, #60	@ 0x3c
 8003ec0:	5c9b      	ldrb	r3, [r3, r2]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <HAL_TIM_PWM_ConfigChannel+0x22>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e0e5      	b.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	223c      	movs	r2, #60	@ 0x3c
 8003ece:	2101      	movs	r1, #1
 8003ed0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b14      	cmp	r3, #20
 8003ed6:	d900      	bls.n	8003eda <HAL_TIM_PWM_ConfigChannel+0x32>
 8003ed8:	e0d1      	b.n	800407e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	009a      	lsls	r2, r3, #2
 8003ede:	4b70      	ldr	r3, [pc, #448]	@ (80040a0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003ee0:	18d3      	adds	r3, r2, r3
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	0011      	movs	r1, r2
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f000 f950 	bl	8004194 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2108      	movs	r1, #8
 8003f00:	430a      	orrs	r2, r1
 8003f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2104      	movs	r1, #4
 8003f10:	438a      	bics	r2, r1
 8003f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6999      	ldr	r1, [r3, #24]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	619a      	str	r2, [r3, #24]
      break;
 8003f26:	e0af      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	0011      	movs	r1, r2
 8003f30:	0018      	movs	r0, r3
 8003f32:	f000 f9af 	bl	8004294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699a      	ldr	r2, [r3, #24]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2180      	movs	r1, #128	@ 0x80
 8003f42:	0109      	lsls	r1, r1, #4
 8003f44:	430a      	orrs	r2, r1
 8003f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699a      	ldr	r2, [r3, #24]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4954      	ldr	r1, [pc, #336]	@ (80040a4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003f54:	400a      	ands	r2, r1
 8003f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6999      	ldr	r1, [r3, #24]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	021a      	lsls	r2, r3, #8
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	619a      	str	r2, [r3, #24]
      break;
 8003f6c:	e08c      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	0011      	movs	r1, r2
 8003f76:	0018      	movs	r0, r3
 8003f78:	f000 fa0a 	bl	8004390 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	69da      	ldr	r2, [r3, #28]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2108      	movs	r1, #8
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69da      	ldr	r2, [r3, #28]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2104      	movs	r1, #4
 8003f98:	438a      	bics	r2, r1
 8003f9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	69d9      	ldr	r1, [r3, #28]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	61da      	str	r2, [r3, #28]
      break;
 8003fae:	e06b      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	0011      	movs	r1, r2
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f000 fa6b 	bl	8004494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	69da      	ldr	r2, [r3, #28]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2180      	movs	r1, #128	@ 0x80
 8003fca:	0109      	lsls	r1, r1, #4
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69da      	ldr	r2, [r3, #28]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4932      	ldr	r1, [pc, #200]	@ (80040a4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003fdc:	400a      	ands	r2, r1
 8003fde:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	69d9      	ldr	r1, [r3, #28]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	021a      	lsls	r2, r3, #8
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	61da      	str	r2, [r3, #28]
      break;
 8003ff4:	e048      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	0011      	movs	r1, r2
 8003ffe:	0018      	movs	r0, r3
 8004000:	f000 faac 	bl	800455c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2108      	movs	r1, #8
 8004010:	430a      	orrs	r2, r1
 8004012:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2104      	movs	r1, #4
 8004020:	438a      	bics	r2, r1
 8004022:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004036:	e027      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	0011      	movs	r1, r2
 8004040:	0018      	movs	r0, r3
 8004042:	f000 fae5 	bl	8004610 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2180      	movs	r1, #128	@ 0x80
 8004052:	0109      	lsls	r1, r1, #4
 8004054:	430a      	orrs	r2, r1
 8004056:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4910      	ldr	r1, [pc, #64]	@ (80040a4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004064:	400a      	ands	r2, r1
 8004066:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	021a      	lsls	r2, r3, #8
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800407c:	e004      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800407e:	2317      	movs	r3, #23
 8004080:	18fb      	adds	r3, r7, r3
 8004082:	2201      	movs	r2, #1
 8004084:	701a      	strb	r2, [r3, #0]
      break;
 8004086:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	223c      	movs	r2, #60	@ 0x3c
 800408c:	2100      	movs	r1, #0
 800408e:	5499      	strb	r1, [r3, r2]

  return status;
 8004090:	2317      	movs	r3, #23
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	781b      	ldrb	r3, [r3, #0]
}
 8004096:	0018      	movs	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	b006      	add	sp, #24
 800409c:	bd80      	pop	{r7, pc}
 800409e:	46c0      	nop			@ (mov r8, r8)
 80040a0:	08006678 	.word	0x08006678
 80040a4:	fffffbff 	.word	0xfffffbff

080040a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a30      	ldr	r2, [pc, #192]	@ (800417c <TIM_Base_SetConfig+0xd4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d008      	beq.n	80040d2 <TIM_Base_SetConfig+0x2a>
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	2380      	movs	r3, #128	@ 0x80
 80040c4:	05db      	lsls	r3, r3, #23
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d003      	beq.n	80040d2 <TIM_Base_SetConfig+0x2a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004180 <TIM_Base_SetConfig+0xd8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d108      	bne.n	80040e4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2270      	movs	r2, #112	@ 0x70
 80040d6:	4393      	bics	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a25      	ldr	r2, [pc, #148]	@ (800417c <TIM_Base_SetConfig+0xd4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d014      	beq.n	8004116 <TIM_Base_SetConfig+0x6e>
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	2380      	movs	r3, #128	@ 0x80
 80040f0:	05db      	lsls	r3, r3, #23
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d00f      	beq.n	8004116 <TIM_Base_SetConfig+0x6e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a21      	ldr	r2, [pc, #132]	@ (8004180 <TIM_Base_SetConfig+0xd8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00b      	beq.n	8004116 <TIM_Base_SetConfig+0x6e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a20      	ldr	r2, [pc, #128]	@ (8004184 <TIM_Base_SetConfig+0xdc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d007      	beq.n	8004116 <TIM_Base_SetConfig+0x6e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a1f      	ldr	r2, [pc, #124]	@ (8004188 <TIM_Base_SetConfig+0xe0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d003      	beq.n	8004116 <TIM_Base_SetConfig+0x6e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a1e      	ldr	r2, [pc, #120]	@ (800418c <TIM_Base_SetConfig+0xe4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d108      	bne.n	8004128 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4a1d      	ldr	r2, [pc, #116]	@ (8004190 <TIM_Base_SetConfig+0xe8>)
 800411a:	4013      	ands	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2280      	movs	r2, #128	@ 0x80
 800412c:	4393      	bics	r3, r2
 800412e:	001a      	movs	r2, r3
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a0a      	ldr	r2, [pc, #40]	@ (800417c <TIM_Base_SetConfig+0xd4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d007      	beq.n	8004166 <TIM_Base_SetConfig+0xbe>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a0b      	ldr	r2, [pc, #44]	@ (8004188 <TIM_Base_SetConfig+0xe0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d003      	beq.n	8004166 <TIM_Base_SetConfig+0xbe>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a0a      	ldr	r2, [pc, #40]	@ (800418c <TIM_Base_SetConfig+0xe4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d103      	bne.n	800416e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	615a      	str	r2, [r3, #20]
}
 8004174:	46c0      	nop			@ (mov r8, r8)
 8004176:	46bd      	mov	sp, r7
 8004178:	b004      	add	sp, #16
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40000400 	.word	0x40000400
 8004184:	40002000 	.word	0x40002000
 8004188:	40014400 	.word	0x40014400
 800418c:	40014800 	.word	0x40014800
 8004190:	fffffcff 	.word	0xfffffcff

08004194 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	2201      	movs	r2, #1
 80041a4:	4393      	bics	r3, r2
 80041a6:	001a      	movs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4a2e      	ldr	r2, [pc, #184]	@ (800427c <TIM_OC1_SetConfig+0xe8>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2203      	movs	r2, #3
 80041ca:	4393      	bics	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2202      	movs	r2, #2
 80041dc:	4393      	bics	r3, r2
 80041de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a24      	ldr	r2, [pc, #144]	@ (8004280 <TIM_OC1_SetConfig+0xec>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d007      	beq.n	8004202 <TIM_OC1_SetConfig+0x6e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a23      	ldr	r2, [pc, #140]	@ (8004284 <TIM_OC1_SetConfig+0xf0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d003      	beq.n	8004202 <TIM_OC1_SetConfig+0x6e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a22      	ldr	r2, [pc, #136]	@ (8004288 <TIM_OC1_SetConfig+0xf4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d10c      	bne.n	800421c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2208      	movs	r2, #8
 8004206:	4393      	bics	r3, r2
 8004208:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2204      	movs	r2, #4
 8004218:	4393      	bics	r3, r2
 800421a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a18      	ldr	r2, [pc, #96]	@ (8004280 <TIM_OC1_SetConfig+0xec>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d007      	beq.n	8004234 <TIM_OC1_SetConfig+0xa0>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a17      	ldr	r2, [pc, #92]	@ (8004284 <TIM_OC1_SetConfig+0xf0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d003      	beq.n	8004234 <TIM_OC1_SetConfig+0xa0>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a16      	ldr	r2, [pc, #88]	@ (8004288 <TIM_OC1_SetConfig+0xf4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d111      	bne.n	8004258 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4a15      	ldr	r2, [pc, #84]	@ (800428c <TIM_OC1_SetConfig+0xf8>)
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4a14      	ldr	r2, [pc, #80]	@ (8004290 <TIM_OC1_SetConfig+0xfc>)
 8004240:	4013      	ands	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	621a      	str	r2, [r3, #32]
}
 8004272:	46c0      	nop			@ (mov r8, r8)
 8004274:	46bd      	mov	sp, r7
 8004276:	b006      	add	sp, #24
 8004278:	bd80      	pop	{r7, pc}
 800427a:	46c0      	nop			@ (mov r8, r8)
 800427c:	fffeff8f 	.word	0xfffeff8f
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40014400 	.word	0x40014400
 8004288:	40014800 	.word	0x40014800
 800428c:	fffffeff 	.word	0xfffffeff
 8004290:	fffffdff 	.word	0xfffffdff

08004294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	2210      	movs	r2, #16
 80042a4:	4393      	bics	r3, r2
 80042a6:	001a      	movs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004374 <TIM_OC2_SetConfig+0xe0>)
 80042c2:	4013      	ands	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004378 <TIM_OC2_SetConfig+0xe4>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	021b      	lsls	r3, r3, #8
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2220      	movs	r2, #32
 80042de:	4393      	bics	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a22      	ldr	r2, [pc, #136]	@ (800437c <TIM_OC2_SetConfig+0xe8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d10d      	bne.n	8004312 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2280      	movs	r2, #128	@ 0x80
 80042fa:	4393      	bics	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2240      	movs	r2, #64	@ 0x40
 800430e:	4393      	bics	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a19      	ldr	r2, [pc, #100]	@ (800437c <TIM_OC2_SetConfig+0xe8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d007      	beq.n	800432a <TIM_OC2_SetConfig+0x96>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a18      	ldr	r2, [pc, #96]	@ (8004380 <TIM_OC2_SetConfig+0xec>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d003      	beq.n	800432a <TIM_OC2_SetConfig+0x96>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a17      	ldr	r2, [pc, #92]	@ (8004384 <TIM_OC2_SetConfig+0xf0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d113      	bne.n	8004352 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	4a16      	ldr	r2, [pc, #88]	@ (8004388 <TIM_OC2_SetConfig+0xf4>)
 800432e:	4013      	ands	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4a15      	ldr	r2, [pc, #84]	@ (800438c <TIM_OC2_SetConfig+0xf8>)
 8004336:	4013      	ands	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	621a      	str	r2, [r3, #32]
}
 800436c:	46c0      	nop			@ (mov r8, r8)
 800436e:	46bd      	mov	sp, r7
 8004370:	b006      	add	sp, #24
 8004372:	bd80      	pop	{r7, pc}
 8004374:	feff8fff 	.word	0xfeff8fff
 8004378:	fffffcff 	.word	0xfffffcff
 800437c:	40012c00 	.word	0x40012c00
 8004380:	40014400 	.word	0x40014400
 8004384:	40014800 	.word	0x40014800
 8004388:	fffffbff 	.word	0xfffffbff
 800438c:	fffff7ff 	.word	0xfffff7ff

08004390 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	4a33      	ldr	r2, [pc, #204]	@ (800446c <TIM_OC3_SetConfig+0xdc>)
 80043a0:	401a      	ands	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004470 <TIM_OC3_SetConfig+0xe0>)
 80043bc:	4013      	ands	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2203      	movs	r2, #3
 80043c4:	4393      	bics	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	4a27      	ldr	r2, [pc, #156]	@ (8004474 <TIM_OC3_SetConfig+0xe4>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a23      	ldr	r2, [pc, #140]	@ (8004478 <TIM_OC3_SetConfig+0xe8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d10d      	bne.n	800440a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	4a22      	ldr	r2, [pc, #136]	@ (800447c <TIM_OC3_SetConfig+0xec>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	021b      	lsls	r3, r3, #8
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	4a1e      	ldr	r2, [pc, #120]	@ (8004480 <TIM_OC3_SetConfig+0xf0>)
 8004406:	4013      	ands	r3, r2
 8004408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a1a      	ldr	r2, [pc, #104]	@ (8004478 <TIM_OC3_SetConfig+0xe8>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d007      	beq.n	8004422 <TIM_OC3_SetConfig+0x92>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a1b      	ldr	r2, [pc, #108]	@ (8004484 <TIM_OC3_SetConfig+0xf4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d003      	beq.n	8004422 <TIM_OC3_SetConfig+0x92>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a1a      	ldr	r2, [pc, #104]	@ (8004488 <TIM_OC3_SetConfig+0xf8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d113      	bne.n	800444a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4a19      	ldr	r2, [pc, #100]	@ (800448c <TIM_OC3_SetConfig+0xfc>)
 8004426:	4013      	ands	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	4a18      	ldr	r2, [pc, #96]	@ (8004490 <TIM_OC3_SetConfig+0x100>)
 800442e:	4013      	ands	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	621a      	str	r2, [r3, #32]
}
 8004464:	46c0      	nop			@ (mov r8, r8)
 8004466:	46bd      	mov	sp, r7
 8004468:	b006      	add	sp, #24
 800446a:	bd80      	pop	{r7, pc}
 800446c:	fffffeff 	.word	0xfffffeff
 8004470:	fffeff8f 	.word	0xfffeff8f
 8004474:	fffffdff 	.word	0xfffffdff
 8004478:	40012c00 	.word	0x40012c00
 800447c:	fffff7ff 	.word	0xfffff7ff
 8004480:	fffffbff 	.word	0xfffffbff
 8004484:	40014400 	.word	0x40014400
 8004488:	40014800 	.word	0x40014800
 800448c:	ffffefff 	.word	0xffffefff
 8004490:	ffffdfff 	.word	0xffffdfff

08004494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	4a26      	ldr	r2, [pc, #152]	@ (800453c <TIM_OC4_SetConfig+0xa8>)
 80044a4:	401a      	ands	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4a20      	ldr	r2, [pc, #128]	@ (8004540 <TIM_OC4_SetConfig+0xac>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004544 <TIM_OC4_SetConfig+0xb0>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4a1b      	ldr	r2, [pc, #108]	@ (8004548 <TIM_OC4_SetConfig+0xb4>)
 80044dc:	4013      	ands	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	031b      	lsls	r3, r3, #12
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a17      	ldr	r2, [pc, #92]	@ (800454c <TIM_OC4_SetConfig+0xb8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d007      	beq.n	8004504 <TIM_OC4_SetConfig+0x70>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a16      	ldr	r2, [pc, #88]	@ (8004550 <TIM_OC4_SetConfig+0xbc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d003      	beq.n	8004504 <TIM_OC4_SetConfig+0x70>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a15      	ldr	r2, [pc, #84]	@ (8004554 <TIM_OC4_SetConfig+0xc0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d109      	bne.n	8004518 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	4a14      	ldr	r2, [pc, #80]	@ (8004558 <TIM_OC4_SetConfig+0xc4>)
 8004508:	4013      	ands	r3, r2
 800450a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	019b      	lsls	r3, r3, #6
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	621a      	str	r2, [r3, #32]
}
 8004532:	46c0      	nop			@ (mov r8, r8)
 8004534:	46bd      	mov	sp, r7
 8004536:	b006      	add	sp, #24
 8004538:	bd80      	pop	{r7, pc}
 800453a:	46c0      	nop			@ (mov r8, r8)
 800453c:	ffffefff 	.word	0xffffefff
 8004540:	feff8fff 	.word	0xfeff8fff
 8004544:	fffffcff 	.word	0xfffffcff
 8004548:	ffffdfff 	.word	0xffffdfff
 800454c:	40012c00 	.word	0x40012c00
 8004550:	40014400 	.word	0x40014400
 8004554:	40014800 	.word	0x40014800
 8004558:	ffffbfff 	.word	0xffffbfff

0800455c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	4a23      	ldr	r2, [pc, #140]	@ (80045f8 <TIM_OC5_SetConfig+0x9c>)
 800456c:	401a      	ands	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4a1d      	ldr	r2, [pc, #116]	@ (80045fc <TIM_OC5_SetConfig+0xa0>)
 8004588:	4013      	ands	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4a19      	ldr	r2, [pc, #100]	@ (8004600 <TIM_OC5_SetConfig+0xa4>)
 800459a:	4013      	ands	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	041b      	lsls	r3, r3, #16
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a15      	ldr	r2, [pc, #84]	@ (8004604 <TIM_OC5_SetConfig+0xa8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d007      	beq.n	80045c2 <TIM_OC5_SetConfig+0x66>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a14      	ldr	r2, [pc, #80]	@ (8004608 <TIM_OC5_SetConfig+0xac>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d003      	beq.n	80045c2 <TIM_OC5_SetConfig+0x66>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a13      	ldr	r2, [pc, #76]	@ (800460c <TIM_OC5_SetConfig+0xb0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d109      	bne.n	80045d6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	4a0c      	ldr	r2, [pc, #48]	@ (80045f8 <TIM_OC5_SetConfig+0x9c>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	621a      	str	r2, [r3, #32]
}
 80045f0:	46c0      	nop			@ (mov r8, r8)
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b006      	add	sp, #24
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	fffeffff 	.word	0xfffeffff
 80045fc:	fffeff8f 	.word	0xfffeff8f
 8004600:	fffdffff 	.word	0xfffdffff
 8004604:	40012c00 	.word	0x40012c00
 8004608:	40014400 	.word	0x40014400
 800460c:	40014800 	.word	0x40014800

08004610 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	4a24      	ldr	r2, [pc, #144]	@ (80046b0 <TIM_OC6_SetConfig+0xa0>)
 8004620:	401a      	ands	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4a1e      	ldr	r2, [pc, #120]	@ (80046b4 <TIM_OC6_SetConfig+0xa4>)
 800463c:	4013      	ands	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	021b      	lsls	r3, r3, #8
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	4a1a      	ldr	r2, [pc, #104]	@ (80046b8 <TIM_OC6_SetConfig+0xa8>)
 8004650:	4013      	ands	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	051b      	lsls	r3, r3, #20
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a16      	ldr	r2, [pc, #88]	@ (80046bc <TIM_OC6_SetConfig+0xac>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d007      	beq.n	8004678 <TIM_OC6_SetConfig+0x68>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a15      	ldr	r2, [pc, #84]	@ (80046c0 <TIM_OC6_SetConfig+0xb0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d003      	beq.n	8004678 <TIM_OC6_SetConfig+0x68>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a14      	ldr	r2, [pc, #80]	@ (80046c4 <TIM_OC6_SetConfig+0xb4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d109      	bne.n	800468c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	4a13      	ldr	r2, [pc, #76]	@ (80046c8 <TIM_OC6_SetConfig+0xb8>)
 800467c:	4013      	ands	r3, r2
 800467e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	029b      	lsls	r3, r3, #10
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	621a      	str	r2, [r3, #32]
}
 80046a6:	46c0      	nop			@ (mov r8, r8)
 80046a8:	46bd      	mov	sp, r7
 80046aa:	b006      	add	sp, #24
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	46c0      	nop			@ (mov r8, r8)
 80046b0:	ffefffff 	.word	0xffefffff
 80046b4:	feff8fff 	.word	0xfeff8fff
 80046b8:	ffdfffff 	.word	0xffdfffff
 80046bc:	40012c00 	.word	0x40012c00
 80046c0:	40014400 	.word	0x40014400
 80046c4:	40014800 	.word	0x40014800
 80046c8:	fffbffff 	.word	0xfffbffff

080046cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	221f      	movs	r2, #31
 80046dc:	4013      	ands	r3, r2
 80046de:	2201      	movs	r2, #1
 80046e0:	409a      	lsls	r2, r3
 80046e2:	0013      	movs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	43d2      	mvns	r2, r2
 80046ee:	401a      	ands	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a1a      	ldr	r2, [r3, #32]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	211f      	movs	r1, #31
 80046fc:	400b      	ands	r3, r1
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	4099      	lsls	r1, r3
 8004702:	000b      	movs	r3, r1
 8004704:	431a      	orrs	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	621a      	str	r2, [r3, #32]
}
 800470a:	46c0      	nop			@ (mov r8, r8)
 800470c:	46bd      	mov	sp, r7
 800470e:	b006      	add	sp, #24
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	223c      	movs	r2, #60	@ 0x3c
 8004722:	5c9b      	ldrb	r3, [r3, r2]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004728:	2302      	movs	r3, #2
 800472a:	e050      	b.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	223c      	movs	r2, #60	@ 0x3c
 8004730:	2101      	movs	r1, #1
 8004732:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	223d      	movs	r2, #61	@ 0x3d
 8004738:	2102      	movs	r1, #2
 800473a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a21      	ldr	r2, [pc, #132]	@ (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d108      	bne.n	8004768 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4a20      	ldr	r2, [pc, #128]	@ (80047dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800475a:	4013      	ands	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4313      	orrs	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2270      	movs	r2, #112	@ 0x70
 800476c:	4393      	bics	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a14      	ldr	r2, [pc, #80]	@ (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00a      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	2380      	movs	r3, #128	@ 0x80
 8004792:	05db      	lsls	r3, r3, #23
 8004794:	429a      	cmp	r2, r3
 8004796:	d004      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a10      	ldr	r2, [pc, #64]	@ (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d10c      	bne.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2280      	movs	r2, #128	@ 0x80
 80047a6:	4393      	bics	r3, r2
 80047a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	223d      	movs	r2, #61	@ 0x3d
 80047c0:	2101      	movs	r1, #1
 80047c2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	223c      	movs	r2, #60	@ 0x3c
 80047c8:	2100      	movs	r1, #0
 80047ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	0018      	movs	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b004      	add	sp, #16
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	46c0      	nop			@ (mov r8, r8)
 80047d8:	40012c00 	.word	0x40012c00
 80047dc:	ff0fffff 	.word	0xff0fffff
 80047e0:	40000400 	.word	0x40000400

080047e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	223c      	movs	r2, #60	@ 0x3c
 80047f6:	5c9b      	ldrb	r3, [r3, r2]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e079      	b.n	80048f4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	223c      	movs	r2, #60	@ 0x3c
 8004804:	2101      	movs	r1, #1
 8004806:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	22ff      	movs	r2, #255	@ 0xff
 800480c:	4393      	bics	r3, r2
 800480e:	001a      	movs	r2, r3
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4a38      	ldr	r2, [pc, #224]	@ (80048fc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800481c:	401a      	ands	r2, r3
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4a35      	ldr	r2, [pc, #212]	@ (8004900 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800482a:	401a      	ands	r2, r3
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4a33      	ldr	r2, [pc, #204]	@ (8004904 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004838:	401a      	ands	r2, r3
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4a30      	ldr	r2, [pc, #192]	@ (8004908 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004846:	401a      	ands	r2, r3
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a2e      	ldr	r2, [pc, #184]	@ (800490c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004854:	401a      	ands	r2, r3
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4a2b      	ldr	r2, [pc, #172]	@ (8004910 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004862:	401a      	ands	r2, r3
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4a29      	ldr	r2, [pc, #164]	@ (8004914 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004870:	401a      	ands	r2, r3
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	041b      	lsls	r3, r3, #16
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a25      	ldr	r2, [pc, #148]	@ (8004918 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d106      	bne.n	8004894 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4a24      	ldr	r2, [pc, #144]	@ (800491c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800488a:	401a      	ands	r2, r3
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a1f      	ldr	r2, [pc, #124]	@ (8004918 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d121      	bne.n	80048e2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004920 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80048a2:	401a      	ands	r2, r3
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a8:	051b      	lsls	r3, r3, #20
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004924 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80048b2:	401a      	ands	r2, r3
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4a1a      	ldr	r2, [pc, #104]	@ (8004928 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80048c0:	401a      	ands	r2, r3
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a12      	ldr	r2, [pc, #72]	@ (8004918 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d106      	bne.n	80048e2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4a15      	ldr	r2, [pc, #84]	@ (800492c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80048d8:	401a      	ands	r2, r3
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	223c      	movs	r2, #60	@ 0x3c
 80048ee:	2100      	movs	r1, #0
 80048f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	0018      	movs	r0, r3
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b004      	add	sp, #16
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	fffffcff 	.word	0xfffffcff
 8004900:	fffffbff 	.word	0xfffffbff
 8004904:	fffff7ff 	.word	0xfffff7ff
 8004908:	ffffefff 	.word	0xffffefff
 800490c:	ffffdfff 	.word	0xffffdfff
 8004910:	ffffbfff 	.word	0xffffbfff
 8004914:	fff0ffff 	.word	0xfff0ffff
 8004918:	40012c00 	.word	0x40012c00
 800491c:	efffffff 	.word	0xefffffff
 8004920:	ff0fffff 	.word	0xff0fffff
 8004924:	feffffff 	.word	0xfeffffff
 8004928:	fdffffff 	.word	0xfdffffff
 800492c:	dfffffff 	.word	0xdfffffff

08004930 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e046      	b.n	80049d0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2288      	movs	r2, #136	@ 0x88
 8004946:	589b      	ldr	r3, [r3, r2]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d107      	bne.n	800495c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2284      	movs	r2, #132	@ 0x84
 8004950:	2100      	movs	r1, #0
 8004952:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	0018      	movs	r0, r3
 8004958:	f7fd f82e 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2288      	movs	r2, #136	@ 0x88
 8004960:	2124      	movs	r1, #36	@ 0x24
 8004962:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2101      	movs	r1, #1
 8004970:	438a      	bics	r2, r1
 8004972:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	0018      	movs	r0, r3
 8004978:	f000 f8cc 	bl	8004b14 <UART_SetConfig>
 800497c:	0003      	movs	r3, r0
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e024      	b.n	80049d0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	0018      	movs	r0, r3
 8004992:	f000 fb37 	bl	8005004 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	490d      	ldr	r1, [pc, #52]	@ (80049d8 <HAL_UART_Init+0xa8>)
 80049a2:	400a      	ands	r2, r1
 80049a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	212a      	movs	r1, #42	@ 0x2a
 80049b2:	438a      	bics	r2, r1
 80049b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2101      	movs	r1, #1
 80049c2:	430a      	orrs	r2, r1
 80049c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	0018      	movs	r0, r3
 80049ca:	f000 fbcf 	bl	800516c <UART_CheckIdleState>
 80049ce:	0003      	movs	r3, r0
}
 80049d0:	0018      	movs	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	b002      	add	sp, #8
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	ffffb7ff 	.word	0xffffb7ff

080049dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08a      	sub	sp, #40	@ 0x28
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	603b      	str	r3, [r7, #0]
 80049e8:	1dbb      	adds	r3, r7, #6
 80049ea:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2288      	movs	r2, #136	@ 0x88
 80049f0:	589b      	ldr	r3, [r3, r2]
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d000      	beq.n	80049f8 <HAL_UART_Transmit+0x1c>
 80049f6:	e088      	b.n	8004b0a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_UART_Transmit+0x2a>
 80049fe:	1dbb      	adds	r3, r7, #6
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e080      	b.n	8004b0c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	2380      	movs	r3, #128	@ 0x80
 8004a10:	015b      	lsls	r3, r3, #5
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d109      	bne.n	8004a2a <HAL_UART_Transmit+0x4e>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d105      	bne.n	8004a2a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2201      	movs	r2, #1
 8004a22:	4013      	ands	r3, r2
 8004a24:	d001      	beq.n	8004a2a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e070      	b.n	8004b0c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2290      	movs	r2, #144	@ 0x90
 8004a2e:	2100      	movs	r1, #0
 8004a30:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2288      	movs	r2, #136	@ 0x88
 8004a36:	2121      	movs	r1, #33	@ 0x21
 8004a38:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a3a:	f7fd f99d 	bl	8001d78 <HAL_GetTick>
 8004a3e:	0003      	movs	r3, r0
 8004a40:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1dba      	adds	r2, r7, #6
 8004a46:	2154      	movs	r1, #84	@ 0x54
 8004a48:	8812      	ldrh	r2, [r2, #0]
 8004a4a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	1dba      	adds	r2, r7, #6
 8004a50:	2156      	movs	r1, #86	@ 0x56
 8004a52:	8812      	ldrh	r2, [r2, #0]
 8004a54:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	2380      	movs	r3, #128	@ 0x80
 8004a5c:	015b      	lsls	r3, r3, #5
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d108      	bne.n	8004a74 <HAL_UART_Transmit+0x98>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d104      	bne.n	8004a74 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	61bb      	str	r3, [r7, #24]
 8004a72:	e003      	b.n	8004a7c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a7c:	e02c      	b.n	8004ad8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	0013      	movs	r3, r2
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2180      	movs	r1, #128	@ 0x80
 8004a8c:	f000 fbbc 	bl	8005208 <UART_WaitOnFlagUntilTimeout>
 8004a90:	1e03      	subs	r3, r0, #0
 8004a92:	d001      	beq.n	8004a98 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e039      	b.n	8004b0c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10b      	bne.n	8004ab6 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	001a      	movs	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	05d2      	lsls	r2, r2, #23
 8004aaa:	0dd2      	lsrs	r2, r2, #23
 8004aac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	3302      	adds	r3, #2
 8004ab2:	61bb      	str	r3, [r7, #24]
 8004ab4:	e007      	b.n	8004ac6 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	781a      	ldrb	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2256      	movs	r2, #86	@ 0x56
 8004aca:	5a9b      	ldrh	r3, [r3, r2]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b299      	uxth	r1, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2256      	movs	r2, #86	@ 0x56
 8004ad6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2256      	movs	r2, #86	@ 0x56
 8004adc:	5a9b      	ldrh	r3, [r3, r2]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1cc      	bne.n	8004a7e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	0013      	movs	r3, r2
 8004aee:	2200      	movs	r2, #0
 8004af0:	2140      	movs	r1, #64	@ 0x40
 8004af2:	f000 fb89 	bl	8005208 <UART_WaitOnFlagUntilTimeout>
 8004af6:	1e03      	subs	r3, r0, #0
 8004af8:	d001      	beq.n	8004afe <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e006      	b.n	8004b0c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2288      	movs	r2, #136	@ 0x88
 8004b02:	2120      	movs	r1, #32
 8004b04:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	e000      	b.n	8004b0c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
  }
}
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b008      	add	sp, #32
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b14:	b5b0      	push	{r4, r5, r7, lr}
 8004b16:	b090      	sub	sp, #64	@ 0x40
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b1c:	231a      	movs	r3, #26
 8004b1e:	2220      	movs	r2, #32
 8004b20:	189b      	adds	r3, r3, r2
 8004b22:	19db      	adds	r3, r3, r7
 8004b24:	2200      	movs	r2, #0
 8004b26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	431a      	orrs	r2, r3
 8004b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4ac4      	ldr	r2, [pc, #784]	@ (8004e58 <UART_SetConfig+0x344>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	0019      	movs	r1, r3
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b52:	430b      	orrs	r3, r1
 8004b54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	4abf      	ldr	r2, [pc, #764]	@ (8004e5c <UART_SetConfig+0x348>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	0018      	movs	r0, r3
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	68d9      	ldr	r1, [r3, #12]
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	0003      	movs	r3, r0
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4ab9      	ldr	r2, [pc, #740]	@ (8004e60 <UART_SetConfig+0x34c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d004      	beq.n	8004b8a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b86:	4313      	orrs	r3, r2
 8004b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	4ab4      	ldr	r2, [pc, #720]	@ (8004e64 <UART_SetConfig+0x350>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	0019      	movs	r1, r3
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba6:	220f      	movs	r2, #15
 8004ba8:	4393      	bics	r3, r2
 8004baa:	0018      	movs	r0, r3
 8004bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	430b      	orrs	r3, r1
 8004bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4aaa      	ldr	r2, [pc, #680]	@ (8004e68 <UART_SetConfig+0x354>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d131      	bne.n	8004c28 <UART_SetConfig+0x114>
 8004bc4:	4ba9      	ldr	r3, [pc, #676]	@ (8004e6c <UART_SetConfig+0x358>)
 8004bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc8:	2203      	movs	r2, #3
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d01d      	beq.n	8004c0c <UART_SetConfig+0xf8>
 8004bd0:	d823      	bhi.n	8004c1a <UART_SetConfig+0x106>
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d00c      	beq.n	8004bf0 <UART_SetConfig+0xdc>
 8004bd6:	d820      	bhi.n	8004c1a <UART_SetConfig+0x106>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <UART_SetConfig+0xce>
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d00e      	beq.n	8004bfe <UART_SetConfig+0xea>
 8004be0:	e01b      	b.n	8004c1a <UART_SetConfig+0x106>
 8004be2:	231b      	movs	r3, #27
 8004be4:	2220      	movs	r2, #32
 8004be6:	189b      	adds	r3, r3, r2
 8004be8:	19db      	adds	r3, r3, r7
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	e071      	b.n	8004cd4 <UART_SetConfig+0x1c0>
 8004bf0:	231b      	movs	r3, #27
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	189b      	adds	r3, r3, r2
 8004bf6:	19db      	adds	r3, r3, r7
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	701a      	strb	r2, [r3, #0]
 8004bfc:	e06a      	b.n	8004cd4 <UART_SetConfig+0x1c0>
 8004bfe:	231b      	movs	r3, #27
 8004c00:	2220      	movs	r2, #32
 8004c02:	189b      	adds	r3, r3, r2
 8004c04:	19db      	adds	r3, r3, r7
 8004c06:	2204      	movs	r2, #4
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	e063      	b.n	8004cd4 <UART_SetConfig+0x1c0>
 8004c0c:	231b      	movs	r3, #27
 8004c0e:	2220      	movs	r2, #32
 8004c10:	189b      	adds	r3, r3, r2
 8004c12:	19db      	adds	r3, r3, r7
 8004c14:	2208      	movs	r2, #8
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	e05c      	b.n	8004cd4 <UART_SetConfig+0x1c0>
 8004c1a:	231b      	movs	r3, #27
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	189b      	adds	r3, r3, r2
 8004c20:	19db      	adds	r3, r3, r7
 8004c22:	2210      	movs	r2, #16
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	e055      	b.n	8004cd4 <UART_SetConfig+0x1c0>
 8004c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a90      	ldr	r2, [pc, #576]	@ (8004e70 <UART_SetConfig+0x35c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d106      	bne.n	8004c40 <UART_SetConfig+0x12c>
 8004c32:	231b      	movs	r3, #27
 8004c34:	2220      	movs	r2, #32
 8004c36:	189b      	adds	r3, r3, r2
 8004c38:	19db      	adds	r3, r3, r7
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	701a      	strb	r2, [r3, #0]
 8004c3e:	e049      	b.n	8004cd4 <UART_SetConfig+0x1c0>
 8004c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a86      	ldr	r2, [pc, #536]	@ (8004e60 <UART_SetConfig+0x34c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d13e      	bne.n	8004cc8 <UART_SetConfig+0x1b4>
 8004c4a:	4b88      	ldr	r3, [pc, #544]	@ (8004e6c <UART_SetConfig+0x358>)
 8004c4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c4e:	23c0      	movs	r3, #192	@ 0xc0
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	4013      	ands	r3, r2
 8004c54:	22c0      	movs	r2, #192	@ 0xc0
 8004c56:	0112      	lsls	r2, r2, #4
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d027      	beq.n	8004cac <UART_SetConfig+0x198>
 8004c5c:	22c0      	movs	r2, #192	@ 0xc0
 8004c5e:	0112      	lsls	r2, r2, #4
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d82a      	bhi.n	8004cba <UART_SetConfig+0x1a6>
 8004c64:	2280      	movs	r2, #128	@ 0x80
 8004c66:	0112      	lsls	r2, r2, #4
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d011      	beq.n	8004c90 <UART_SetConfig+0x17c>
 8004c6c:	2280      	movs	r2, #128	@ 0x80
 8004c6e:	0112      	lsls	r2, r2, #4
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d822      	bhi.n	8004cba <UART_SetConfig+0x1a6>
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d004      	beq.n	8004c82 <UART_SetConfig+0x16e>
 8004c78:	2280      	movs	r2, #128	@ 0x80
 8004c7a:	00d2      	lsls	r2, r2, #3
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00e      	beq.n	8004c9e <UART_SetConfig+0x18a>
 8004c80:	e01b      	b.n	8004cba <UART_SetConfig+0x1a6>
 8004c82:	231b      	movs	r3, #27
 8004c84:	2220      	movs	r2, #32
 8004c86:	189b      	adds	r3, r3, r2
 8004c88:	19db      	adds	r3, r3, r7
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	701a      	strb	r2, [r3, #0]
 8004c8e:	e021      	b.n	8004cd4 <UART_SetConfig+0x1c0>
 8004c90:	231b      	movs	r3, #27
 8004c92:	2220      	movs	r2, #32
 8004c94:	189b      	adds	r3, r3, r2
 8004c96:	19db      	adds	r3, r3, r7
 8004c98:	2202      	movs	r2, #2
 8004c9a:	701a      	strb	r2, [r3, #0]
 8004c9c:	e01a      	b.n	8004cd4 <UART_SetConfig+0x1c0>
 8004c9e:	231b      	movs	r3, #27
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	189b      	adds	r3, r3, r2
 8004ca4:	19db      	adds	r3, r3, r7
 8004ca6:	2204      	movs	r2, #4
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	e013      	b.n	8004cd4 <UART_SetConfig+0x1c0>
 8004cac:	231b      	movs	r3, #27
 8004cae:	2220      	movs	r2, #32
 8004cb0:	189b      	adds	r3, r3, r2
 8004cb2:	19db      	adds	r3, r3, r7
 8004cb4:	2208      	movs	r2, #8
 8004cb6:	701a      	strb	r2, [r3, #0]
 8004cb8:	e00c      	b.n	8004cd4 <UART_SetConfig+0x1c0>
 8004cba:	231b      	movs	r3, #27
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	189b      	adds	r3, r3, r2
 8004cc0:	19db      	adds	r3, r3, r7
 8004cc2:	2210      	movs	r2, #16
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	e005      	b.n	8004cd4 <UART_SetConfig+0x1c0>
 8004cc8:	231b      	movs	r3, #27
 8004cca:	2220      	movs	r2, #32
 8004ccc:	189b      	adds	r3, r3, r2
 8004cce:	19db      	adds	r3, r3, r7
 8004cd0:	2210      	movs	r2, #16
 8004cd2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a61      	ldr	r2, [pc, #388]	@ (8004e60 <UART_SetConfig+0x34c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d000      	beq.n	8004ce0 <UART_SetConfig+0x1cc>
 8004cde:	e092      	b.n	8004e06 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ce0:	231b      	movs	r3, #27
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	189b      	adds	r3, r3, r2
 8004ce6:	19db      	adds	r3, r3, r7
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d015      	beq.n	8004d1a <UART_SetConfig+0x206>
 8004cee:	dc18      	bgt.n	8004d22 <UART_SetConfig+0x20e>
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d00d      	beq.n	8004d10 <UART_SetConfig+0x1fc>
 8004cf4:	dc15      	bgt.n	8004d22 <UART_SetConfig+0x20e>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <UART_SetConfig+0x1ec>
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d005      	beq.n	8004d0a <UART_SetConfig+0x1f6>
 8004cfe:	e010      	b.n	8004d22 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d00:	f7fe f842 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8004d04:	0003      	movs	r3, r0
 8004d06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d08:	e014      	b.n	8004d34 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d0a:	4b5a      	ldr	r3, [pc, #360]	@ (8004e74 <UART_SetConfig+0x360>)
 8004d0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d0e:	e011      	b.n	8004d34 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d10:	f7fd ffae 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 8004d14:	0003      	movs	r3, r0
 8004d16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d18:	e00c      	b.n	8004d34 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1a:	2380      	movs	r3, #128	@ 0x80
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d20:	e008      	b.n	8004d34 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004d26:	231a      	movs	r3, #26
 8004d28:	2220      	movs	r2, #32
 8004d2a:	189b      	adds	r3, r3, r2
 8004d2c:	19db      	adds	r3, r3, r7
 8004d2e:	2201      	movs	r2, #1
 8004d30:	701a      	strb	r2, [r3, #0]
        break;
 8004d32:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d100      	bne.n	8004d3c <UART_SetConfig+0x228>
 8004d3a:	e147      	b.n	8004fcc <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d40:	4b4d      	ldr	r3, [pc, #308]	@ (8004e78 <UART_SetConfig+0x364>)
 8004d42:	0052      	lsls	r2, r2, #1
 8004d44:	5ad3      	ldrh	r3, [r2, r3]
 8004d46:	0019      	movs	r1, r3
 8004d48:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004d4a:	f7fb f9e5 	bl	8000118 <__udivsi3>
 8004d4e:	0003      	movs	r3, r0
 8004d50:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	0013      	movs	r3, r2
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	189b      	adds	r3, r3, r2
 8004d5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d305      	bcc.n	8004d6e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d906      	bls.n	8004d7c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004d6e:	231a      	movs	r3, #26
 8004d70:	2220      	movs	r2, #32
 8004d72:	189b      	adds	r3, r3, r2
 8004d74:	19db      	adds	r3, r3, r7
 8004d76:	2201      	movs	r2, #1
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	e127      	b.n	8004fcc <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	2300      	movs	r3, #0
 8004d82:	61fb      	str	r3, [r7, #28]
 8004d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d88:	4b3b      	ldr	r3, [pc, #236]	@ (8004e78 <UART_SetConfig+0x364>)
 8004d8a:	0052      	lsls	r2, r2, #1
 8004d8c:	5ad3      	ldrh	r3, [r2, r3]
 8004d8e:	613b      	str	r3, [r7, #16]
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	69b8      	ldr	r0, [r7, #24]
 8004d9a:	69f9      	ldr	r1, [r7, #28]
 8004d9c:	f7fb fa48 	bl	8000230 <__aeabi_uldivmod>
 8004da0:	0002      	movs	r2, r0
 8004da2:	000b      	movs	r3, r1
 8004da4:	0e11      	lsrs	r1, r2, #24
 8004da6:	021d      	lsls	r5, r3, #8
 8004da8:	430d      	orrs	r5, r1
 8004daa:	0214      	lsls	r4, r2, #8
 8004dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	085b      	lsrs	r3, r3, #1
 8004db2:	60bb      	str	r3, [r7, #8]
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68b8      	ldr	r0, [r7, #8]
 8004dba:	68f9      	ldr	r1, [r7, #12]
 8004dbc:	1900      	adds	r0, r0, r4
 8004dbe:	4169      	adcs	r1, r5
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	607b      	str	r3, [r7, #4]
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f7fb fa2f 	bl	8000230 <__aeabi_uldivmod>
 8004dd2:	0002      	movs	r2, r0
 8004dd4:	000b      	movs	r3, r1
 8004dd6:	0013      	movs	r3, r2
 8004dd8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ddc:	23c0      	movs	r3, #192	@ 0xc0
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d309      	bcc.n	8004df8 <UART_SetConfig+0x2e4>
 8004de4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004de6:	2380      	movs	r3, #128	@ 0x80
 8004de8:	035b      	lsls	r3, r3, #13
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d204      	bcs.n	8004df8 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df4:	60da      	str	r2, [r3, #12]
 8004df6:	e0e9      	b.n	8004fcc <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004df8:	231a      	movs	r3, #26
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	189b      	adds	r3, r3, r2
 8004dfe:	19db      	adds	r3, r3, r7
 8004e00:	2201      	movs	r2, #1
 8004e02:	701a      	strb	r2, [r3, #0]
 8004e04:	e0e2      	b.n	8004fcc <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	69da      	ldr	r2, [r3, #28]
 8004e0a:	2380      	movs	r3, #128	@ 0x80
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d000      	beq.n	8004e14 <UART_SetConfig+0x300>
 8004e12:	e083      	b.n	8004f1c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004e14:	231b      	movs	r3, #27
 8004e16:	2220      	movs	r2, #32
 8004e18:	189b      	adds	r3, r3, r2
 8004e1a:	19db      	adds	r3, r3, r7
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d015      	beq.n	8004e4e <UART_SetConfig+0x33a>
 8004e22:	dc2b      	bgt.n	8004e7c <UART_SetConfig+0x368>
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d00d      	beq.n	8004e44 <UART_SetConfig+0x330>
 8004e28:	dc28      	bgt.n	8004e7c <UART_SetConfig+0x368>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <UART_SetConfig+0x320>
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d005      	beq.n	8004e3e <UART_SetConfig+0x32a>
 8004e32:	e023      	b.n	8004e7c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e34:	f7fd ffa8 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8004e38:	0003      	movs	r3, r0
 8004e3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e3c:	e027      	b.n	8004e8e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e74 <UART_SetConfig+0x360>)
 8004e40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e42:	e024      	b.n	8004e8e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e44:	f7fd ff14 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 8004e48:	0003      	movs	r3, r0
 8004e4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e4c:	e01f      	b.n	8004e8e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e4e:	2380      	movs	r3, #128	@ 0x80
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e54:	e01b      	b.n	8004e8e <UART_SetConfig+0x37a>
 8004e56:	46c0      	nop			@ (mov r8, r8)
 8004e58:	cfff69f3 	.word	0xcfff69f3
 8004e5c:	ffffcfff 	.word	0xffffcfff
 8004e60:	40008000 	.word	0x40008000
 8004e64:	11fff4ff 	.word	0x11fff4ff
 8004e68:	40013800 	.word	0x40013800
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	40004400 	.word	0x40004400
 8004e74:	00f42400 	.word	0x00f42400
 8004e78:	080066cc 	.word	0x080066cc
      default:
        pclk = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004e80:	231a      	movs	r3, #26
 8004e82:	2220      	movs	r2, #32
 8004e84:	189b      	adds	r3, r3, r2
 8004e86:	19db      	adds	r3, r3, r7
 8004e88:	2201      	movs	r2, #1
 8004e8a:	701a      	strb	r2, [r3, #0]
        break;
 8004e8c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d100      	bne.n	8004e96 <UART_SetConfig+0x382>
 8004e94:	e09a      	b.n	8004fcc <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e9a:	4b58      	ldr	r3, [pc, #352]	@ (8004ffc <UART_SetConfig+0x4e8>)
 8004e9c:	0052      	lsls	r2, r2, #1
 8004e9e:	5ad3      	ldrh	r3, [r2, r3]
 8004ea0:	0019      	movs	r1, r3
 8004ea2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004ea4:	f7fb f938 	bl	8000118 <__udivsi3>
 8004ea8:	0003      	movs	r3, r0
 8004eaa:	005a      	lsls	r2, r3, #1
 8004eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	085b      	lsrs	r3, r3, #1
 8004eb2:	18d2      	adds	r2, r2, r3
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	0019      	movs	r1, r3
 8004eba:	0010      	movs	r0, r2
 8004ebc:	f7fb f92c 	bl	8000118 <__udivsi3>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	2b0f      	cmp	r3, #15
 8004ec8:	d921      	bls.n	8004f0e <UART_SetConfig+0x3fa>
 8004eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ecc:	2380      	movs	r3, #128	@ 0x80
 8004ece:	025b      	lsls	r3, r3, #9
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d21c      	bcs.n	8004f0e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	200e      	movs	r0, #14
 8004eda:	2420      	movs	r4, #32
 8004edc:	1903      	adds	r3, r0, r4
 8004ede:	19db      	adds	r3, r3, r7
 8004ee0:	210f      	movs	r1, #15
 8004ee2:	438a      	bics	r2, r1
 8004ee4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee8:	085b      	lsrs	r3, r3, #1
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2207      	movs	r2, #7
 8004eee:	4013      	ands	r3, r2
 8004ef0:	b299      	uxth	r1, r3
 8004ef2:	1903      	adds	r3, r0, r4
 8004ef4:	19db      	adds	r3, r3, r7
 8004ef6:	1902      	adds	r2, r0, r4
 8004ef8:	19d2      	adds	r2, r2, r7
 8004efa:	8812      	ldrh	r2, [r2, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	1902      	adds	r2, r0, r4
 8004f06:	19d2      	adds	r2, r2, r7
 8004f08:	8812      	ldrh	r2, [r2, #0]
 8004f0a:	60da      	str	r2, [r3, #12]
 8004f0c:	e05e      	b.n	8004fcc <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f0e:	231a      	movs	r3, #26
 8004f10:	2220      	movs	r2, #32
 8004f12:	189b      	adds	r3, r3, r2
 8004f14:	19db      	adds	r3, r3, r7
 8004f16:	2201      	movs	r2, #1
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	e057      	b.n	8004fcc <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f1c:	231b      	movs	r3, #27
 8004f1e:	2220      	movs	r2, #32
 8004f20:	189b      	adds	r3, r3, r2
 8004f22:	19db      	adds	r3, r3, r7
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d015      	beq.n	8004f56 <UART_SetConfig+0x442>
 8004f2a:	dc18      	bgt.n	8004f5e <UART_SetConfig+0x44a>
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d00d      	beq.n	8004f4c <UART_SetConfig+0x438>
 8004f30:	dc15      	bgt.n	8004f5e <UART_SetConfig+0x44a>
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <UART_SetConfig+0x428>
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d005      	beq.n	8004f46 <UART_SetConfig+0x432>
 8004f3a:	e010      	b.n	8004f5e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f3c:	f7fd ff24 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8004f40:	0003      	movs	r3, r0
 8004f42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f44:	e014      	b.n	8004f70 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f46:	4b2e      	ldr	r3, [pc, #184]	@ (8005000 <UART_SetConfig+0x4ec>)
 8004f48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f4a:	e011      	b.n	8004f70 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f4c:	f7fd fe90 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 8004f50:	0003      	movs	r3, r0
 8004f52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f54:	e00c      	b.n	8004f70 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f56:	2380      	movs	r3, #128	@ 0x80
 8004f58:	021b      	lsls	r3, r3, #8
 8004f5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f5c:	e008      	b.n	8004f70 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004f62:	231a      	movs	r3, #26
 8004f64:	2220      	movs	r2, #32
 8004f66:	189b      	adds	r3, r3, r2
 8004f68:	19db      	adds	r3, r3, r7
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	701a      	strb	r2, [r3, #0]
        break;
 8004f6e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d02a      	beq.n	8004fcc <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f7a:	4b20      	ldr	r3, [pc, #128]	@ (8004ffc <UART_SetConfig+0x4e8>)
 8004f7c:	0052      	lsls	r2, r2, #1
 8004f7e:	5ad3      	ldrh	r3, [r2, r3]
 8004f80:	0019      	movs	r1, r3
 8004f82:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004f84:	f7fb f8c8 	bl	8000118 <__udivsi3>
 8004f88:	0003      	movs	r3, r0
 8004f8a:	001a      	movs	r2, r3
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	085b      	lsrs	r3, r3, #1
 8004f92:	18d2      	adds	r2, r2, r3
 8004f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	0019      	movs	r1, r3
 8004f9a:	0010      	movs	r0, r2
 8004f9c:	f7fb f8bc 	bl	8000118 <__udivsi3>
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa6:	2b0f      	cmp	r3, #15
 8004fa8:	d90a      	bls.n	8004fc0 <UART_SetConfig+0x4ac>
 8004faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fac:	2380      	movs	r3, #128	@ 0x80
 8004fae:	025b      	lsls	r3, r3, #9
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d205      	bcs.n	8004fc0 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60da      	str	r2, [r3, #12]
 8004fbe:	e005      	b.n	8004fcc <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004fc0:	231a      	movs	r3, #26
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	189b      	adds	r3, r3, r2
 8004fc6:	19db      	adds	r3, r3, r7
 8004fc8:	2201      	movs	r2, #1
 8004fca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fce:	226a      	movs	r2, #106	@ 0x6a
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd6:	2268      	movs	r2, #104	@ 0x68
 8004fd8:	2101      	movs	r1, #1
 8004fda:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fde:	2200      	movs	r2, #0
 8004fe0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004fe8:	231a      	movs	r3, #26
 8004fea:	2220      	movs	r2, #32
 8004fec:	189b      	adds	r3, r3, r2
 8004fee:	19db      	adds	r3, r3, r7
 8004ff0:	781b      	ldrb	r3, [r3, #0]
}
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	b010      	add	sp, #64	@ 0x40
 8004ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8004ffa:	46c0      	nop			@ (mov r8, r8)
 8004ffc:	080066cc 	.word	0x080066cc
 8005000:	00f42400 	.word	0x00f42400

08005004 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005010:	2201      	movs	r2, #1
 8005012:	4013      	ands	r3, r2
 8005014:	d00b      	beq.n	800502e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	4a4a      	ldr	r2, [pc, #296]	@ (8005148 <UART_AdvFeatureConfig+0x144>)
 800501e:	4013      	ands	r3, r2
 8005020:	0019      	movs	r1, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005032:	2202      	movs	r2, #2
 8005034:	4013      	ands	r3, r2
 8005036:	d00b      	beq.n	8005050 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	4a43      	ldr	r2, [pc, #268]	@ (800514c <UART_AdvFeatureConfig+0x148>)
 8005040:	4013      	ands	r3, r2
 8005042:	0019      	movs	r1, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005054:	2204      	movs	r2, #4
 8005056:	4013      	ands	r3, r2
 8005058:	d00b      	beq.n	8005072 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	4a3b      	ldr	r2, [pc, #236]	@ (8005150 <UART_AdvFeatureConfig+0x14c>)
 8005062:	4013      	ands	r3, r2
 8005064:	0019      	movs	r1, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005076:	2208      	movs	r2, #8
 8005078:	4013      	ands	r3, r2
 800507a:	d00b      	beq.n	8005094 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	4a34      	ldr	r2, [pc, #208]	@ (8005154 <UART_AdvFeatureConfig+0x150>)
 8005084:	4013      	ands	r3, r2
 8005086:	0019      	movs	r1, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005098:	2210      	movs	r2, #16
 800509a:	4013      	ands	r3, r2
 800509c:	d00b      	beq.n	80050b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005158 <UART_AdvFeatureConfig+0x154>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	0019      	movs	r1, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ba:	2220      	movs	r2, #32
 80050bc:	4013      	ands	r3, r2
 80050be:	d00b      	beq.n	80050d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	4a25      	ldr	r2, [pc, #148]	@ (800515c <UART_AdvFeatureConfig+0x158>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	0019      	movs	r1, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050dc:	2240      	movs	r2, #64	@ 0x40
 80050de:	4013      	ands	r3, r2
 80050e0:	d01d      	beq.n	800511e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005160 <UART_AdvFeatureConfig+0x15c>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	0019      	movs	r1, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050fe:	2380      	movs	r3, #128	@ 0x80
 8005100:	035b      	lsls	r3, r3, #13
 8005102:	429a      	cmp	r2, r3
 8005104:	d10b      	bne.n	800511e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	4a15      	ldr	r2, [pc, #84]	@ (8005164 <UART_AdvFeatureConfig+0x160>)
 800510e:	4013      	ands	r3, r2
 8005110:	0019      	movs	r1, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005122:	2280      	movs	r2, #128	@ 0x80
 8005124:	4013      	ands	r3, r2
 8005126:	d00b      	beq.n	8005140 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	4a0e      	ldr	r2, [pc, #56]	@ (8005168 <UART_AdvFeatureConfig+0x164>)
 8005130:	4013      	ands	r3, r2
 8005132:	0019      	movs	r1, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	605a      	str	r2, [r3, #4]
  }
}
 8005140:	46c0      	nop			@ (mov r8, r8)
 8005142:	46bd      	mov	sp, r7
 8005144:	b002      	add	sp, #8
 8005146:	bd80      	pop	{r7, pc}
 8005148:	fffdffff 	.word	0xfffdffff
 800514c:	fffeffff 	.word	0xfffeffff
 8005150:	fffbffff 	.word	0xfffbffff
 8005154:	ffff7fff 	.word	0xffff7fff
 8005158:	ffffefff 	.word	0xffffefff
 800515c:	ffffdfff 	.word	0xffffdfff
 8005160:	ffefffff 	.word	0xffefffff
 8005164:	ff9fffff 	.word	0xff9fffff
 8005168:	fff7ffff 	.word	0xfff7ffff

0800516c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af02      	add	r7, sp, #8
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2290      	movs	r2, #144	@ 0x90
 8005178:	2100      	movs	r1, #0
 800517a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800517c:	f7fc fdfc 	bl	8001d78 <HAL_GetTick>
 8005180:	0003      	movs	r3, r0
 8005182:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2208      	movs	r2, #8
 800518c:	4013      	ands	r3, r2
 800518e:	2b08      	cmp	r3, #8
 8005190:	d10c      	bne.n	80051ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2280      	movs	r2, #128	@ 0x80
 8005196:	0391      	lsls	r1, r2, #14
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	4a1a      	ldr	r2, [pc, #104]	@ (8005204 <UART_CheckIdleState+0x98>)
 800519c:	9200      	str	r2, [sp, #0]
 800519e:	2200      	movs	r2, #0
 80051a0:	f000 f832 	bl	8005208 <UART_WaitOnFlagUntilTimeout>
 80051a4:	1e03      	subs	r3, r0, #0
 80051a6:	d001      	beq.n	80051ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e026      	b.n	80051fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2204      	movs	r2, #4
 80051b4:	4013      	ands	r3, r2
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d10c      	bne.n	80051d4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2280      	movs	r2, #128	@ 0x80
 80051be:	03d1      	lsls	r1, r2, #15
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	4a10      	ldr	r2, [pc, #64]	@ (8005204 <UART_CheckIdleState+0x98>)
 80051c4:	9200      	str	r2, [sp, #0]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f000 f81e 	bl	8005208 <UART_WaitOnFlagUntilTimeout>
 80051cc:	1e03      	subs	r3, r0, #0
 80051ce:	d001      	beq.n	80051d4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e012      	b.n	80051fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2288      	movs	r2, #136	@ 0x88
 80051d8:	2120      	movs	r1, #32
 80051da:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	228c      	movs	r2, #140	@ 0x8c
 80051e0:	2120      	movs	r1, #32
 80051e2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2284      	movs	r2, #132	@ 0x84
 80051f4:	2100      	movs	r1, #0
 80051f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	0018      	movs	r0, r3
 80051fc:	46bd      	mov	sp, r7
 80051fe:	b004      	add	sp, #16
 8005200:	bd80      	pop	{r7, pc}
 8005202:	46c0      	nop			@ (mov r8, r8)
 8005204:	01ffffff 	.word	0x01ffffff

08005208 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b094      	sub	sp, #80	@ 0x50
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	1dfb      	adds	r3, r7, #7
 8005216:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005218:	e0a7      	b.n	800536a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800521c:	3301      	adds	r3, #1
 800521e:	d100      	bne.n	8005222 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005220:	e0a3      	b.n	800536a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005222:	f7fc fda9 	bl	8001d78 <HAL_GetTick>
 8005226:	0002      	movs	r2, r0
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800522e:	429a      	cmp	r2, r3
 8005230:	d302      	bcc.n	8005238 <UART_WaitOnFlagUntilTimeout+0x30>
 8005232:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005234:	2b00      	cmp	r3, #0
 8005236:	d13f      	bne.n	80052b8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005238:	f3ef 8310 	mrs	r3, PRIMASK
 800523c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800523e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005240:	647b      	str	r3, [r7, #68]	@ 0x44
 8005242:	2301      	movs	r3, #1
 8005244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005248:	f383 8810 	msr	PRIMASK, r3
}
 800524c:	46c0      	nop			@ (mov r8, r8)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	494e      	ldr	r1, [pc, #312]	@ (8005394 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800525a:	400a      	ands	r2, r1
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005260:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005264:	f383 8810 	msr	PRIMASK, r3
}
 8005268:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800526a:	f3ef 8310 	mrs	r3, PRIMASK
 800526e:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8005270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005272:	643b      	str	r3, [r7, #64]	@ 0x40
 8005274:	2301      	movs	r3, #1
 8005276:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527a:	f383 8810 	msr	PRIMASK, r3
}
 800527e:	46c0      	nop			@ (mov r8, r8)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2101      	movs	r1, #1
 800528c:	438a      	bics	r2, r1
 800528e:	609a      	str	r2, [r3, #8]
 8005290:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005296:	f383 8810 	msr	PRIMASK, r3
}
 800529a:	46c0      	nop			@ (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2288      	movs	r2, #136	@ 0x88
 80052a0:	2120      	movs	r1, #32
 80052a2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	228c      	movs	r2, #140	@ 0x8c
 80052a8:	2120      	movs	r1, #32
 80052aa:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2284      	movs	r2, #132	@ 0x84
 80052b0:	2100      	movs	r1, #0
 80052b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e069      	b.n	800538c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2204      	movs	r2, #4
 80052c0:	4013      	ands	r3, r2
 80052c2:	d052      	beq.n	800536a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	69da      	ldr	r2, [r3, #28]
 80052ca:	2380      	movs	r3, #128	@ 0x80
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	401a      	ands	r2, r3
 80052d0:	2380      	movs	r3, #128	@ 0x80
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d148      	bne.n	800536a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2280      	movs	r2, #128	@ 0x80
 80052de:	0112      	lsls	r2, r2, #4
 80052e0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e2:	f3ef 8310 	mrs	r3, PRIMASK
 80052e6:	613b      	str	r3, [r7, #16]
  return(result);
 80052e8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80052ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ec:	2301      	movs	r3, #1
 80052ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f383 8810 	msr	PRIMASK, r3
}
 80052f6:	46c0      	nop			@ (mov r8, r8)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4924      	ldr	r1, [pc, #144]	@ (8005394 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005304:	400a      	ands	r2, r1
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800530a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	f383 8810 	msr	PRIMASK, r3
}
 8005312:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005314:	f3ef 8310 	mrs	r3, PRIMASK
 8005318:	61fb      	str	r3, [r7, #28]
  return(result);
 800531a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800531e:	2301      	movs	r3, #1
 8005320:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	f383 8810 	msr	PRIMASK, r3
}
 8005328:	46c0      	nop			@ (mov r8, r8)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2101      	movs	r1, #1
 8005336:	438a      	bics	r2, r1
 8005338:	609a      	str	r2, [r3, #8]
 800533a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800533c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	f383 8810 	msr	PRIMASK, r3
}
 8005344:	46c0      	nop			@ (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2288      	movs	r2, #136	@ 0x88
 800534a:	2120      	movs	r1, #32
 800534c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	228c      	movs	r2, #140	@ 0x8c
 8005352:	2120      	movs	r1, #32
 8005354:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2290      	movs	r2, #144	@ 0x90
 800535a:	2120      	movs	r1, #32
 800535c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2284      	movs	r2, #132	@ 0x84
 8005362:	2100      	movs	r1, #0
 8005364:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e010      	b.n	800538c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	4013      	ands	r3, r2
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	425a      	negs	r2, r3
 800537a:	4153      	adcs	r3, r2
 800537c:	b2db      	uxtb	r3, r3
 800537e:	001a      	movs	r2, r3
 8005380:	1dfb      	adds	r3, r7, #7
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d100      	bne.n	800538a <UART_WaitOnFlagUntilTimeout+0x182>
 8005388:	e747      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	0018      	movs	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	b014      	add	sp, #80	@ 0x50
 8005392:	bd80      	pop	{r7, pc}
 8005394:	fffffe5f 	.word	0xfffffe5f

08005398 <std>:
 8005398:	2300      	movs	r3, #0
 800539a:	b510      	push	{r4, lr}
 800539c:	0004      	movs	r4, r0
 800539e:	6003      	str	r3, [r0, #0]
 80053a0:	6043      	str	r3, [r0, #4]
 80053a2:	6083      	str	r3, [r0, #8]
 80053a4:	8181      	strh	r1, [r0, #12]
 80053a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80053a8:	81c2      	strh	r2, [r0, #14]
 80053aa:	6103      	str	r3, [r0, #16]
 80053ac:	6143      	str	r3, [r0, #20]
 80053ae:	6183      	str	r3, [r0, #24]
 80053b0:	0019      	movs	r1, r3
 80053b2:	2208      	movs	r2, #8
 80053b4:	305c      	adds	r0, #92	@ 0x5c
 80053b6:	f000 f90f 	bl	80055d8 <memset>
 80053ba:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <std+0x50>)
 80053bc:	6224      	str	r4, [r4, #32]
 80053be:	6263      	str	r3, [r4, #36]	@ 0x24
 80053c0:	4b0a      	ldr	r3, [pc, #40]	@ (80053ec <std+0x54>)
 80053c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80053c4:	4b0a      	ldr	r3, [pc, #40]	@ (80053f0 <std+0x58>)
 80053c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80053c8:	4b0a      	ldr	r3, [pc, #40]	@ (80053f4 <std+0x5c>)
 80053ca:	6323      	str	r3, [r4, #48]	@ 0x30
 80053cc:	4b0a      	ldr	r3, [pc, #40]	@ (80053f8 <std+0x60>)
 80053ce:	429c      	cmp	r4, r3
 80053d0:	d005      	beq.n	80053de <std+0x46>
 80053d2:	4b0a      	ldr	r3, [pc, #40]	@ (80053fc <std+0x64>)
 80053d4:	429c      	cmp	r4, r3
 80053d6:	d002      	beq.n	80053de <std+0x46>
 80053d8:	4b09      	ldr	r3, [pc, #36]	@ (8005400 <std+0x68>)
 80053da:	429c      	cmp	r4, r3
 80053dc:	d103      	bne.n	80053e6 <std+0x4e>
 80053de:	0020      	movs	r0, r4
 80053e0:	3058      	adds	r0, #88	@ 0x58
 80053e2:	f000 f979 	bl	80056d8 <__retarget_lock_init_recursive>
 80053e6:	bd10      	pop	{r4, pc}
 80053e8:	08005541 	.word	0x08005541
 80053ec:	08005569 	.word	0x08005569
 80053f0:	080055a1 	.word	0x080055a1
 80053f4:	080055cd 	.word	0x080055cd
 80053f8:	20000288 	.word	0x20000288
 80053fc:	200002f0 	.word	0x200002f0
 8005400:	20000358 	.word	0x20000358

08005404 <stdio_exit_handler>:
 8005404:	b510      	push	{r4, lr}
 8005406:	4a03      	ldr	r2, [pc, #12]	@ (8005414 <stdio_exit_handler+0x10>)
 8005408:	4903      	ldr	r1, [pc, #12]	@ (8005418 <stdio_exit_handler+0x14>)
 800540a:	4804      	ldr	r0, [pc, #16]	@ (800541c <stdio_exit_handler+0x18>)
 800540c:	f000 f86c 	bl	80054e8 <_fwalk_sglue>
 8005410:	bd10      	pop	{r4, pc}
 8005412:	46c0      	nop			@ (mov r8, r8)
 8005414:	2000004c 	.word	0x2000004c
 8005418:	08005f69 	.word	0x08005f69
 800541c:	2000005c 	.word	0x2000005c

08005420 <cleanup_stdio>:
 8005420:	6841      	ldr	r1, [r0, #4]
 8005422:	4b0b      	ldr	r3, [pc, #44]	@ (8005450 <cleanup_stdio+0x30>)
 8005424:	b510      	push	{r4, lr}
 8005426:	0004      	movs	r4, r0
 8005428:	4299      	cmp	r1, r3
 800542a:	d001      	beq.n	8005430 <cleanup_stdio+0x10>
 800542c:	f000 fd9c 	bl	8005f68 <_fflush_r>
 8005430:	68a1      	ldr	r1, [r4, #8]
 8005432:	4b08      	ldr	r3, [pc, #32]	@ (8005454 <cleanup_stdio+0x34>)
 8005434:	4299      	cmp	r1, r3
 8005436:	d002      	beq.n	800543e <cleanup_stdio+0x1e>
 8005438:	0020      	movs	r0, r4
 800543a:	f000 fd95 	bl	8005f68 <_fflush_r>
 800543e:	68e1      	ldr	r1, [r4, #12]
 8005440:	4b05      	ldr	r3, [pc, #20]	@ (8005458 <cleanup_stdio+0x38>)
 8005442:	4299      	cmp	r1, r3
 8005444:	d002      	beq.n	800544c <cleanup_stdio+0x2c>
 8005446:	0020      	movs	r0, r4
 8005448:	f000 fd8e 	bl	8005f68 <_fflush_r>
 800544c:	bd10      	pop	{r4, pc}
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	20000288 	.word	0x20000288
 8005454:	200002f0 	.word	0x200002f0
 8005458:	20000358 	.word	0x20000358

0800545c <global_stdio_init.part.0>:
 800545c:	b510      	push	{r4, lr}
 800545e:	4b09      	ldr	r3, [pc, #36]	@ (8005484 <global_stdio_init.part.0+0x28>)
 8005460:	4a09      	ldr	r2, [pc, #36]	@ (8005488 <global_stdio_init.part.0+0x2c>)
 8005462:	2104      	movs	r1, #4
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	4809      	ldr	r0, [pc, #36]	@ (800548c <global_stdio_init.part.0+0x30>)
 8005468:	2200      	movs	r2, #0
 800546a:	f7ff ff95 	bl	8005398 <std>
 800546e:	2201      	movs	r2, #1
 8005470:	2109      	movs	r1, #9
 8005472:	4807      	ldr	r0, [pc, #28]	@ (8005490 <global_stdio_init.part.0+0x34>)
 8005474:	f7ff ff90 	bl	8005398 <std>
 8005478:	2202      	movs	r2, #2
 800547a:	2112      	movs	r1, #18
 800547c:	4805      	ldr	r0, [pc, #20]	@ (8005494 <global_stdio_init.part.0+0x38>)
 800547e:	f7ff ff8b 	bl	8005398 <std>
 8005482:	bd10      	pop	{r4, pc}
 8005484:	200003c0 	.word	0x200003c0
 8005488:	08005405 	.word	0x08005405
 800548c:	20000288 	.word	0x20000288
 8005490:	200002f0 	.word	0x200002f0
 8005494:	20000358 	.word	0x20000358

08005498 <__sfp_lock_acquire>:
 8005498:	b510      	push	{r4, lr}
 800549a:	4802      	ldr	r0, [pc, #8]	@ (80054a4 <__sfp_lock_acquire+0xc>)
 800549c:	f000 f91d 	bl	80056da <__retarget_lock_acquire_recursive>
 80054a0:	bd10      	pop	{r4, pc}
 80054a2:	46c0      	nop			@ (mov r8, r8)
 80054a4:	200003c9 	.word	0x200003c9

080054a8 <__sfp_lock_release>:
 80054a8:	b510      	push	{r4, lr}
 80054aa:	4802      	ldr	r0, [pc, #8]	@ (80054b4 <__sfp_lock_release+0xc>)
 80054ac:	f000 f916 	bl	80056dc <__retarget_lock_release_recursive>
 80054b0:	bd10      	pop	{r4, pc}
 80054b2:	46c0      	nop			@ (mov r8, r8)
 80054b4:	200003c9 	.word	0x200003c9

080054b8 <__sinit>:
 80054b8:	b510      	push	{r4, lr}
 80054ba:	0004      	movs	r4, r0
 80054bc:	f7ff ffec 	bl	8005498 <__sfp_lock_acquire>
 80054c0:	6a23      	ldr	r3, [r4, #32]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <__sinit+0x14>
 80054c6:	f7ff ffef 	bl	80054a8 <__sfp_lock_release>
 80054ca:	bd10      	pop	{r4, pc}
 80054cc:	4b04      	ldr	r3, [pc, #16]	@ (80054e0 <__sinit+0x28>)
 80054ce:	6223      	str	r3, [r4, #32]
 80054d0:	4b04      	ldr	r3, [pc, #16]	@ (80054e4 <__sinit+0x2c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1f6      	bne.n	80054c6 <__sinit+0xe>
 80054d8:	f7ff ffc0 	bl	800545c <global_stdio_init.part.0>
 80054dc:	e7f3      	b.n	80054c6 <__sinit+0xe>
 80054de:	46c0      	nop			@ (mov r8, r8)
 80054e0:	08005421 	.word	0x08005421
 80054e4:	200003c0 	.word	0x200003c0

080054e8 <_fwalk_sglue>:
 80054e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ea:	0014      	movs	r4, r2
 80054ec:	2600      	movs	r6, #0
 80054ee:	9000      	str	r0, [sp, #0]
 80054f0:	9101      	str	r1, [sp, #4]
 80054f2:	68a5      	ldr	r5, [r4, #8]
 80054f4:	6867      	ldr	r7, [r4, #4]
 80054f6:	3f01      	subs	r7, #1
 80054f8:	d504      	bpl.n	8005504 <_fwalk_sglue+0x1c>
 80054fa:	6824      	ldr	r4, [r4, #0]
 80054fc:	2c00      	cmp	r4, #0
 80054fe:	d1f8      	bne.n	80054f2 <_fwalk_sglue+0xa>
 8005500:	0030      	movs	r0, r6
 8005502:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005504:	89ab      	ldrh	r3, [r5, #12]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d908      	bls.n	800551c <_fwalk_sglue+0x34>
 800550a:	220e      	movs	r2, #14
 800550c:	5eab      	ldrsh	r3, [r5, r2]
 800550e:	3301      	adds	r3, #1
 8005510:	d004      	beq.n	800551c <_fwalk_sglue+0x34>
 8005512:	0029      	movs	r1, r5
 8005514:	9800      	ldr	r0, [sp, #0]
 8005516:	9b01      	ldr	r3, [sp, #4]
 8005518:	4798      	blx	r3
 800551a:	4306      	orrs	r6, r0
 800551c:	3568      	adds	r5, #104	@ 0x68
 800551e:	e7ea      	b.n	80054f6 <_fwalk_sglue+0xe>

08005520 <iprintf>:
 8005520:	b40f      	push	{r0, r1, r2, r3}
 8005522:	b507      	push	{r0, r1, r2, lr}
 8005524:	4905      	ldr	r1, [pc, #20]	@ (800553c <iprintf+0x1c>)
 8005526:	ab04      	add	r3, sp, #16
 8005528:	6808      	ldr	r0, [r1, #0]
 800552a:	cb04      	ldmia	r3!, {r2}
 800552c:	6881      	ldr	r1, [r0, #8]
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	f000 f9fa 	bl	8005928 <_vfiprintf_r>
 8005534:	b003      	add	sp, #12
 8005536:	bc08      	pop	{r3}
 8005538:	b004      	add	sp, #16
 800553a:	4718      	bx	r3
 800553c:	20000058 	.word	0x20000058

08005540 <__sread>:
 8005540:	b570      	push	{r4, r5, r6, lr}
 8005542:	000c      	movs	r4, r1
 8005544:	250e      	movs	r5, #14
 8005546:	5f49      	ldrsh	r1, [r1, r5]
 8005548:	f000 f874 	bl	8005634 <_read_r>
 800554c:	2800      	cmp	r0, #0
 800554e:	db03      	blt.n	8005558 <__sread+0x18>
 8005550:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005552:	181b      	adds	r3, r3, r0
 8005554:	6563      	str	r3, [r4, #84]	@ 0x54
 8005556:	bd70      	pop	{r4, r5, r6, pc}
 8005558:	89a3      	ldrh	r3, [r4, #12]
 800555a:	4a02      	ldr	r2, [pc, #8]	@ (8005564 <__sread+0x24>)
 800555c:	4013      	ands	r3, r2
 800555e:	81a3      	strh	r3, [r4, #12]
 8005560:	e7f9      	b.n	8005556 <__sread+0x16>
 8005562:	46c0      	nop			@ (mov r8, r8)
 8005564:	ffffefff 	.word	0xffffefff

08005568 <__swrite>:
 8005568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556a:	001f      	movs	r7, r3
 800556c:	898b      	ldrh	r3, [r1, #12]
 800556e:	0005      	movs	r5, r0
 8005570:	000c      	movs	r4, r1
 8005572:	0016      	movs	r6, r2
 8005574:	05db      	lsls	r3, r3, #23
 8005576:	d505      	bpl.n	8005584 <__swrite+0x1c>
 8005578:	230e      	movs	r3, #14
 800557a:	5ec9      	ldrsh	r1, [r1, r3]
 800557c:	2200      	movs	r2, #0
 800557e:	2302      	movs	r3, #2
 8005580:	f000 f844 	bl	800560c <_lseek_r>
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	4a05      	ldr	r2, [pc, #20]	@ (800559c <__swrite+0x34>)
 8005588:	0028      	movs	r0, r5
 800558a:	4013      	ands	r3, r2
 800558c:	81a3      	strh	r3, [r4, #12]
 800558e:	0032      	movs	r2, r6
 8005590:	230e      	movs	r3, #14
 8005592:	5ee1      	ldrsh	r1, [r4, r3]
 8005594:	003b      	movs	r3, r7
 8005596:	f000 f861 	bl	800565c <_write_r>
 800559a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800559c:	ffffefff 	.word	0xffffefff

080055a0 <__sseek>:
 80055a0:	b570      	push	{r4, r5, r6, lr}
 80055a2:	000c      	movs	r4, r1
 80055a4:	250e      	movs	r5, #14
 80055a6:	5f49      	ldrsh	r1, [r1, r5]
 80055a8:	f000 f830 	bl	800560c <_lseek_r>
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	1c42      	adds	r2, r0, #1
 80055b0:	d103      	bne.n	80055ba <__sseek+0x1a>
 80055b2:	4a05      	ldr	r2, [pc, #20]	@ (80055c8 <__sseek+0x28>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	81a3      	strh	r3, [r4, #12]
 80055b8:	bd70      	pop	{r4, r5, r6, pc}
 80055ba:	2280      	movs	r2, #128	@ 0x80
 80055bc:	0152      	lsls	r2, r2, #5
 80055be:	4313      	orrs	r3, r2
 80055c0:	81a3      	strh	r3, [r4, #12]
 80055c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80055c4:	e7f8      	b.n	80055b8 <__sseek+0x18>
 80055c6:	46c0      	nop			@ (mov r8, r8)
 80055c8:	ffffefff 	.word	0xffffefff

080055cc <__sclose>:
 80055cc:	b510      	push	{r4, lr}
 80055ce:	230e      	movs	r3, #14
 80055d0:	5ec9      	ldrsh	r1, [r1, r3]
 80055d2:	f000 f809 	bl	80055e8 <_close_r>
 80055d6:	bd10      	pop	{r4, pc}

080055d8 <memset>:
 80055d8:	0003      	movs	r3, r0
 80055da:	1882      	adds	r2, r0, r2
 80055dc:	4293      	cmp	r3, r2
 80055de:	d100      	bne.n	80055e2 <memset+0xa>
 80055e0:	4770      	bx	lr
 80055e2:	7019      	strb	r1, [r3, #0]
 80055e4:	3301      	adds	r3, #1
 80055e6:	e7f9      	b.n	80055dc <memset+0x4>

080055e8 <_close_r>:
 80055e8:	2300      	movs	r3, #0
 80055ea:	b570      	push	{r4, r5, r6, lr}
 80055ec:	4d06      	ldr	r5, [pc, #24]	@ (8005608 <_close_r+0x20>)
 80055ee:	0004      	movs	r4, r0
 80055f0:	0008      	movs	r0, r1
 80055f2:	602b      	str	r3, [r5, #0]
 80055f4:	f7fc fab2 	bl	8001b5c <_close>
 80055f8:	1c43      	adds	r3, r0, #1
 80055fa:	d103      	bne.n	8005604 <_close_r+0x1c>
 80055fc:	682b      	ldr	r3, [r5, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d000      	beq.n	8005604 <_close_r+0x1c>
 8005602:	6023      	str	r3, [r4, #0]
 8005604:	bd70      	pop	{r4, r5, r6, pc}
 8005606:	46c0      	nop			@ (mov r8, r8)
 8005608:	200003c4 	.word	0x200003c4

0800560c <_lseek_r>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	0004      	movs	r4, r0
 8005610:	0008      	movs	r0, r1
 8005612:	0011      	movs	r1, r2
 8005614:	001a      	movs	r2, r3
 8005616:	2300      	movs	r3, #0
 8005618:	4d05      	ldr	r5, [pc, #20]	@ (8005630 <_lseek_r+0x24>)
 800561a:	602b      	str	r3, [r5, #0]
 800561c:	f7fc fabf 	bl	8001b9e <_lseek>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	d103      	bne.n	800562c <_lseek_r+0x20>
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d000      	beq.n	800562c <_lseek_r+0x20>
 800562a:	6023      	str	r3, [r4, #0]
 800562c:	bd70      	pop	{r4, r5, r6, pc}
 800562e:	46c0      	nop			@ (mov r8, r8)
 8005630:	200003c4 	.word	0x200003c4

08005634 <_read_r>:
 8005634:	b570      	push	{r4, r5, r6, lr}
 8005636:	0004      	movs	r4, r0
 8005638:	0008      	movs	r0, r1
 800563a:	0011      	movs	r1, r2
 800563c:	001a      	movs	r2, r3
 800563e:	2300      	movs	r3, #0
 8005640:	4d05      	ldr	r5, [pc, #20]	@ (8005658 <_read_r+0x24>)
 8005642:	602b      	str	r3, [r5, #0]
 8005644:	f7fc fa51 	bl	8001aea <_read>
 8005648:	1c43      	adds	r3, r0, #1
 800564a:	d103      	bne.n	8005654 <_read_r+0x20>
 800564c:	682b      	ldr	r3, [r5, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d000      	beq.n	8005654 <_read_r+0x20>
 8005652:	6023      	str	r3, [r4, #0]
 8005654:	bd70      	pop	{r4, r5, r6, pc}
 8005656:	46c0      	nop			@ (mov r8, r8)
 8005658:	200003c4 	.word	0x200003c4

0800565c <_write_r>:
 800565c:	b570      	push	{r4, r5, r6, lr}
 800565e:	0004      	movs	r4, r0
 8005660:	0008      	movs	r0, r1
 8005662:	0011      	movs	r1, r2
 8005664:	001a      	movs	r2, r3
 8005666:	2300      	movs	r3, #0
 8005668:	4d05      	ldr	r5, [pc, #20]	@ (8005680 <_write_r+0x24>)
 800566a:	602b      	str	r3, [r5, #0]
 800566c:	f7fc fa5a 	bl	8001b24 <_write>
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	d103      	bne.n	800567c <_write_r+0x20>
 8005674:	682b      	ldr	r3, [r5, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d000      	beq.n	800567c <_write_r+0x20>
 800567a:	6023      	str	r3, [r4, #0]
 800567c:	bd70      	pop	{r4, r5, r6, pc}
 800567e:	46c0      	nop			@ (mov r8, r8)
 8005680:	200003c4 	.word	0x200003c4

08005684 <__errno>:
 8005684:	4b01      	ldr	r3, [pc, #4]	@ (800568c <__errno+0x8>)
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	4770      	bx	lr
 800568a:	46c0      	nop			@ (mov r8, r8)
 800568c:	20000058 	.word	0x20000058

08005690 <__libc_init_array>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	2600      	movs	r6, #0
 8005694:	4c0c      	ldr	r4, [pc, #48]	@ (80056c8 <__libc_init_array+0x38>)
 8005696:	4d0d      	ldr	r5, [pc, #52]	@ (80056cc <__libc_init_array+0x3c>)
 8005698:	1b64      	subs	r4, r4, r5
 800569a:	10a4      	asrs	r4, r4, #2
 800569c:	42a6      	cmp	r6, r4
 800569e:	d109      	bne.n	80056b4 <__libc_init_array+0x24>
 80056a0:	2600      	movs	r6, #0
 80056a2:	f000 fddb 	bl	800625c <_init>
 80056a6:	4c0a      	ldr	r4, [pc, #40]	@ (80056d0 <__libc_init_array+0x40>)
 80056a8:	4d0a      	ldr	r5, [pc, #40]	@ (80056d4 <__libc_init_array+0x44>)
 80056aa:	1b64      	subs	r4, r4, r5
 80056ac:	10a4      	asrs	r4, r4, #2
 80056ae:	42a6      	cmp	r6, r4
 80056b0:	d105      	bne.n	80056be <__libc_init_array+0x2e>
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	00b3      	lsls	r3, r6, #2
 80056b6:	58eb      	ldr	r3, [r5, r3]
 80056b8:	4798      	blx	r3
 80056ba:	3601      	adds	r6, #1
 80056bc:	e7ee      	b.n	800569c <__libc_init_array+0xc>
 80056be:	00b3      	lsls	r3, r6, #2
 80056c0:	58eb      	ldr	r3, [r5, r3]
 80056c2:	4798      	blx	r3
 80056c4:	3601      	adds	r6, #1
 80056c6:	e7f2      	b.n	80056ae <__libc_init_array+0x1e>
 80056c8:	08006720 	.word	0x08006720
 80056cc:	08006720 	.word	0x08006720
 80056d0:	08006724 	.word	0x08006724
 80056d4:	08006720 	.word	0x08006720

080056d8 <__retarget_lock_init_recursive>:
 80056d8:	4770      	bx	lr

080056da <__retarget_lock_acquire_recursive>:
 80056da:	4770      	bx	lr

080056dc <__retarget_lock_release_recursive>:
 80056dc:	4770      	bx	lr
	...

080056e0 <_free_r>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	0005      	movs	r5, r0
 80056e4:	1e0c      	subs	r4, r1, #0
 80056e6:	d010      	beq.n	800570a <_free_r+0x2a>
 80056e8:	3c04      	subs	r4, #4
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	da00      	bge.n	80056f2 <_free_r+0x12>
 80056f0:	18e4      	adds	r4, r4, r3
 80056f2:	0028      	movs	r0, r5
 80056f4:	f000 f8e0 	bl	80058b8 <__malloc_lock>
 80056f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005770 <_free_r+0x90>)
 80056fa:	6813      	ldr	r3, [r2, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d105      	bne.n	800570c <_free_r+0x2c>
 8005700:	6063      	str	r3, [r4, #4]
 8005702:	6014      	str	r4, [r2, #0]
 8005704:	0028      	movs	r0, r5
 8005706:	f000 f8df 	bl	80058c8 <__malloc_unlock>
 800570a:	bd70      	pop	{r4, r5, r6, pc}
 800570c:	42a3      	cmp	r3, r4
 800570e:	d908      	bls.n	8005722 <_free_r+0x42>
 8005710:	6820      	ldr	r0, [r4, #0]
 8005712:	1821      	adds	r1, r4, r0
 8005714:	428b      	cmp	r3, r1
 8005716:	d1f3      	bne.n	8005700 <_free_r+0x20>
 8005718:	6819      	ldr	r1, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	1809      	adds	r1, r1, r0
 800571e:	6021      	str	r1, [r4, #0]
 8005720:	e7ee      	b.n	8005700 <_free_r+0x20>
 8005722:	001a      	movs	r2, r3
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <_free_r+0x4e>
 800572a:	42a3      	cmp	r3, r4
 800572c:	d9f9      	bls.n	8005722 <_free_r+0x42>
 800572e:	6811      	ldr	r1, [r2, #0]
 8005730:	1850      	adds	r0, r2, r1
 8005732:	42a0      	cmp	r0, r4
 8005734:	d10b      	bne.n	800574e <_free_r+0x6e>
 8005736:	6820      	ldr	r0, [r4, #0]
 8005738:	1809      	adds	r1, r1, r0
 800573a:	1850      	adds	r0, r2, r1
 800573c:	6011      	str	r1, [r2, #0]
 800573e:	4283      	cmp	r3, r0
 8005740:	d1e0      	bne.n	8005704 <_free_r+0x24>
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	1841      	adds	r1, r0, r1
 8005748:	6011      	str	r1, [r2, #0]
 800574a:	6053      	str	r3, [r2, #4]
 800574c:	e7da      	b.n	8005704 <_free_r+0x24>
 800574e:	42a0      	cmp	r0, r4
 8005750:	d902      	bls.n	8005758 <_free_r+0x78>
 8005752:	230c      	movs	r3, #12
 8005754:	602b      	str	r3, [r5, #0]
 8005756:	e7d5      	b.n	8005704 <_free_r+0x24>
 8005758:	6820      	ldr	r0, [r4, #0]
 800575a:	1821      	adds	r1, r4, r0
 800575c:	428b      	cmp	r3, r1
 800575e:	d103      	bne.n	8005768 <_free_r+0x88>
 8005760:	6819      	ldr	r1, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	1809      	adds	r1, r1, r0
 8005766:	6021      	str	r1, [r4, #0]
 8005768:	6063      	str	r3, [r4, #4]
 800576a:	6054      	str	r4, [r2, #4]
 800576c:	e7ca      	b.n	8005704 <_free_r+0x24>
 800576e:	46c0      	nop			@ (mov r8, r8)
 8005770:	200003d0 	.word	0x200003d0

08005774 <sbrk_aligned>:
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	4e0f      	ldr	r6, [pc, #60]	@ (80057b4 <sbrk_aligned+0x40>)
 8005778:	000d      	movs	r5, r1
 800577a:	6831      	ldr	r1, [r6, #0]
 800577c:	0004      	movs	r4, r0
 800577e:	2900      	cmp	r1, #0
 8005780:	d102      	bne.n	8005788 <sbrk_aligned+0x14>
 8005782:	f000 fcbd 	bl	8006100 <_sbrk_r>
 8005786:	6030      	str	r0, [r6, #0]
 8005788:	0029      	movs	r1, r5
 800578a:	0020      	movs	r0, r4
 800578c:	f000 fcb8 	bl	8006100 <_sbrk_r>
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	d103      	bne.n	800579c <sbrk_aligned+0x28>
 8005794:	2501      	movs	r5, #1
 8005796:	426d      	negs	r5, r5
 8005798:	0028      	movs	r0, r5
 800579a:	bd70      	pop	{r4, r5, r6, pc}
 800579c:	2303      	movs	r3, #3
 800579e:	1cc5      	adds	r5, r0, #3
 80057a0:	439d      	bics	r5, r3
 80057a2:	42a8      	cmp	r0, r5
 80057a4:	d0f8      	beq.n	8005798 <sbrk_aligned+0x24>
 80057a6:	1a29      	subs	r1, r5, r0
 80057a8:	0020      	movs	r0, r4
 80057aa:	f000 fca9 	bl	8006100 <_sbrk_r>
 80057ae:	3001      	adds	r0, #1
 80057b0:	d1f2      	bne.n	8005798 <sbrk_aligned+0x24>
 80057b2:	e7ef      	b.n	8005794 <sbrk_aligned+0x20>
 80057b4:	200003cc 	.word	0x200003cc

080057b8 <_malloc_r>:
 80057b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ba:	2203      	movs	r2, #3
 80057bc:	1ccb      	adds	r3, r1, #3
 80057be:	4393      	bics	r3, r2
 80057c0:	3308      	adds	r3, #8
 80057c2:	0005      	movs	r5, r0
 80057c4:	001f      	movs	r7, r3
 80057c6:	2b0c      	cmp	r3, #12
 80057c8:	d234      	bcs.n	8005834 <_malloc_r+0x7c>
 80057ca:	270c      	movs	r7, #12
 80057cc:	42b9      	cmp	r1, r7
 80057ce:	d833      	bhi.n	8005838 <_malloc_r+0x80>
 80057d0:	0028      	movs	r0, r5
 80057d2:	f000 f871 	bl	80058b8 <__malloc_lock>
 80057d6:	4e37      	ldr	r6, [pc, #220]	@ (80058b4 <_malloc_r+0xfc>)
 80057d8:	6833      	ldr	r3, [r6, #0]
 80057da:	001c      	movs	r4, r3
 80057dc:	2c00      	cmp	r4, #0
 80057de:	d12f      	bne.n	8005840 <_malloc_r+0x88>
 80057e0:	0039      	movs	r1, r7
 80057e2:	0028      	movs	r0, r5
 80057e4:	f7ff ffc6 	bl	8005774 <sbrk_aligned>
 80057e8:	0004      	movs	r4, r0
 80057ea:	1c43      	adds	r3, r0, #1
 80057ec:	d15f      	bne.n	80058ae <_malloc_r+0xf6>
 80057ee:	6834      	ldr	r4, [r6, #0]
 80057f0:	9400      	str	r4, [sp, #0]
 80057f2:	9b00      	ldr	r3, [sp, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d14a      	bne.n	800588e <_malloc_r+0xd6>
 80057f8:	2c00      	cmp	r4, #0
 80057fa:	d052      	beq.n	80058a2 <_malloc_r+0xea>
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	0028      	movs	r0, r5
 8005800:	18e3      	adds	r3, r4, r3
 8005802:	9900      	ldr	r1, [sp, #0]
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	f000 fc7b 	bl	8006100 <_sbrk_r>
 800580a:	9b01      	ldr	r3, [sp, #4]
 800580c:	4283      	cmp	r3, r0
 800580e:	d148      	bne.n	80058a2 <_malloc_r+0xea>
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	0028      	movs	r0, r5
 8005814:	1aff      	subs	r7, r7, r3
 8005816:	0039      	movs	r1, r7
 8005818:	f7ff ffac 	bl	8005774 <sbrk_aligned>
 800581c:	3001      	adds	r0, #1
 800581e:	d040      	beq.n	80058a2 <_malloc_r+0xea>
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	19db      	adds	r3, r3, r7
 8005824:	6023      	str	r3, [r4, #0]
 8005826:	6833      	ldr	r3, [r6, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	2a00      	cmp	r2, #0
 800582c:	d133      	bne.n	8005896 <_malloc_r+0xde>
 800582e:	9b00      	ldr	r3, [sp, #0]
 8005830:	6033      	str	r3, [r6, #0]
 8005832:	e019      	b.n	8005868 <_malloc_r+0xb0>
 8005834:	2b00      	cmp	r3, #0
 8005836:	dac9      	bge.n	80057cc <_malloc_r+0x14>
 8005838:	230c      	movs	r3, #12
 800583a:	602b      	str	r3, [r5, #0]
 800583c:	2000      	movs	r0, #0
 800583e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005840:	6821      	ldr	r1, [r4, #0]
 8005842:	1bc9      	subs	r1, r1, r7
 8005844:	d420      	bmi.n	8005888 <_malloc_r+0xd0>
 8005846:	290b      	cmp	r1, #11
 8005848:	d90a      	bls.n	8005860 <_malloc_r+0xa8>
 800584a:	19e2      	adds	r2, r4, r7
 800584c:	6027      	str	r7, [r4, #0]
 800584e:	42a3      	cmp	r3, r4
 8005850:	d104      	bne.n	800585c <_malloc_r+0xa4>
 8005852:	6032      	str	r2, [r6, #0]
 8005854:	6863      	ldr	r3, [r4, #4]
 8005856:	6011      	str	r1, [r2, #0]
 8005858:	6053      	str	r3, [r2, #4]
 800585a:	e005      	b.n	8005868 <_malloc_r+0xb0>
 800585c:	605a      	str	r2, [r3, #4]
 800585e:	e7f9      	b.n	8005854 <_malloc_r+0x9c>
 8005860:	6862      	ldr	r2, [r4, #4]
 8005862:	42a3      	cmp	r3, r4
 8005864:	d10e      	bne.n	8005884 <_malloc_r+0xcc>
 8005866:	6032      	str	r2, [r6, #0]
 8005868:	0028      	movs	r0, r5
 800586a:	f000 f82d 	bl	80058c8 <__malloc_unlock>
 800586e:	0020      	movs	r0, r4
 8005870:	2207      	movs	r2, #7
 8005872:	300b      	adds	r0, #11
 8005874:	1d23      	adds	r3, r4, #4
 8005876:	4390      	bics	r0, r2
 8005878:	1ac2      	subs	r2, r0, r3
 800587a:	4298      	cmp	r0, r3
 800587c:	d0df      	beq.n	800583e <_malloc_r+0x86>
 800587e:	1a1b      	subs	r3, r3, r0
 8005880:	50a3      	str	r3, [r4, r2]
 8005882:	e7dc      	b.n	800583e <_malloc_r+0x86>
 8005884:	605a      	str	r2, [r3, #4]
 8005886:	e7ef      	b.n	8005868 <_malloc_r+0xb0>
 8005888:	0023      	movs	r3, r4
 800588a:	6864      	ldr	r4, [r4, #4]
 800588c:	e7a6      	b.n	80057dc <_malloc_r+0x24>
 800588e:	9c00      	ldr	r4, [sp, #0]
 8005890:	6863      	ldr	r3, [r4, #4]
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	e7ad      	b.n	80057f2 <_malloc_r+0x3a>
 8005896:	001a      	movs	r2, r3
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	42a3      	cmp	r3, r4
 800589c:	d1fb      	bne.n	8005896 <_malloc_r+0xde>
 800589e:	2300      	movs	r3, #0
 80058a0:	e7da      	b.n	8005858 <_malloc_r+0xa0>
 80058a2:	230c      	movs	r3, #12
 80058a4:	0028      	movs	r0, r5
 80058a6:	602b      	str	r3, [r5, #0]
 80058a8:	f000 f80e 	bl	80058c8 <__malloc_unlock>
 80058ac:	e7c6      	b.n	800583c <_malloc_r+0x84>
 80058ae:	6007      	str	r7, [r0, #0]
 80058b0:	e7da      	b.n	8005868 <_malloc_r+0xb0>
 80058b2:	46c0      	nop			@ (mov r8, r8)
 80058b4:	200003d0 	.word	0x200003d0

080058b8 <__malloc_lock>:
 80058b8:	b510      	push	{r4, lr}
 80058ba:	4802      	ldr	r0, [pc, #8]	@ (80058c4 <__malloc_lock+0xc>)
 80058bc:	f7ff ff0d 	bl	80056da <__retarget_lock_acquire_recursive>
 80058c0:	bd10      	pop	{r4, pc}
 80058c2:	46c0      	nop			@ (mov r8, r8)
 80058c4:	200003c8 	.word	0x200003c8

080058c8 <__malloc_unlock>:
 80058c8:	b510      	push	{r4, lr}
 80058ca:	4802      	ldr	r0, [pc, #8]	@ (80058d4 <__malloc_unlock+0xc>)
 80058cc:	f7ff ff06 	bl	80056dc <__retarget_lock_release_recursive>
 80058d0:	bd10      	pop	{r4, pc}
 80058d2:	46c0      	nop			@ (mov r8, r8)
 80058d4:	200003c8 	.word	0x200003c8

080058d8 <__sfputc_r>:
 80058d8:	6893      	ldr	r3, [r2, #8]
 80058da:	b510      	push	{r4, lr}
 80058dc:	3b01      	subs	r3, #1
 80058de:	6093      	str	r3, [r2, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	da04      	bge.n	80058ee <__sfputc_r+0x16>
 80058e4:	6994      	ldr	r4, [r2, #24]
 80058e6:	42a3      	cmp	r3, r4
 80058e8:	db07      	blt.n	80058fa <__sfputc_r+0x22>
 80058ea:	290a      	cmp	r1, #10
 80058ec:	d005      	beq.n	80058fa <__sfputc_r+0x22>
 80058ee:	6813      	ldr	r3, [r2, #0]
 80058f0:	1c58      	adds	r0, r3, #1
 80058f2:	6010      	str	r0, [r2, #0]
 80058f4:	7019      	strb	r1, [r3, #0]
 80058f6:	0008      	movs	r0, r1
 80058f8:	bd10      	pop	{r4, pc}
 80058fa:	f000 fb60 	bl	8005fbe <__swbuf_r>
 80058fe:	0001      	movs	r1, r0
 8005900:	e7f9      	b.n	80058f6 <__sfputc_r+0x1e>

08005902 <__sfputs_r>:
 8005902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005904:	0006      	movs	r6, r0
 8005906:	000f      	movs	r7, r1
 8005908:	0014      	movs	r4, r2
 800590a:	18d5      	adds	r5, r2, r3
 800590c:	42ac      	cmp	r4, r5
 800590e:	d101      	bne.n	8005914 <__sfputs_r+0x12>
 8005910:	2000      	movs	r0, #0
 8005912:	e007      	b.n	8005924 <__sfputs_r+0x22>
 8005914:	7821      	ldrb	r1, [r4, #0]
 8005916:	003a      	movs	r2, r7
 8005918:	0030      	movs	r0, r6
 800591a:	f7ff ffdd 	bl	80058d8 <__sfputc_r>
 800591e:	3401      	adds	r4, #1
 8005920:	1c43      	adds	r3, r0, #1
 8005922:	d1f3      	bne.n	800590c <__sfputs_r+0xa>
 8005924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005928 <_vfiprintf_r>:
 8005928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592a:	b0a1      	sub	sp, #132	@ 0x84
 800592c:	000f      	movs	r7, r1
 800592e:	0015      	movs	r5, r2
 8005930:	001e      	movs	r6, r3
 8005932:	9003      	str	r0, [sp, #12]
 8005934:	2800      	cmp	r0, #0
 8005936:	d004      	beq.n	8005942 <_vfiprintf_r+0x1a>
 8005938:	6a03      	ldr	r3, [r0, #32]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <_vfiprintf_r+0x1a>
 800593e:	f7ff fdbb 	bl	80054b8 <__sinit>
 8005942:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005944:	07db      	lsls	r3, r3, #31
 8005946:	d405      	bmi.n	8005954 <_vfiprintf_r+0x2c>
 8005948:	89bb      	ldrh	r3, [r7, #12]
 800594a:	059b      	lsls	r3, r3, #22
 800594c:	d402      	bmi.n	8005954 <_vfiprintf_r+0x2c>
 800594e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005950:	f7ff fec3 	bl	80056da <__retarget_lock_acquire_recursive>
 8005954:	89bb      	ldrh	r3, [r7, #12]
 8005956:	071b      	lsls	r3, r3, #28
 8005958:	d502      	bpl.n	8005960 <_vfiprintf_r+0x38>
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d113      	bne.n	8005988 <_vfiprintf_r+0x60>
 8005960:	0039      	movs	r1, r7
 8005962:	9803      	ldr	r0, [sp, #12]
 8005964:	f000 fb6e 	bl	8006044 <__swsetup_r>
 8005968:	2800      	cmp	r0, #0
 800596a:	d00d      	beq.n	8005988 <_vfiprintf_r+0x60>
 800596c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800596e:	07db      	lsls	r3, r3, #31
 8005970:	d503      	bpl.n	800597a <_vfiprintf_r+0x52>
 8005972:	2001      	movs	r0, #1
 8005974:	4240      	negs	r0, r0
 8005976:	b021      	add	sp, #132	@ 0x84
 8005978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800597a:	89bb      	ldrh	r3, [r7, #12]
 800597c:	059b      	lsls	r3, r3, #22
 800597e:	d4f8      	bmi.n	8005972 <_vfiprintf_r+0x4a>
 8005980:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005982:	f7ff feab 	bl	80056dc <__retarget_lock_release_recursive>
 8005986:	e7f4      	b.n	8005972 <_vfiprintf_r+0x4a>
 8005988:	2300      	movs	r3, #0
 800598a:	ac08      	add	r4, sp, #32
 800598c:	6163      	str	r3, [r4, #20]
 800598e:	3320      	adds	r3, #32
 8005990:	7663      	strb	r3, [r4, #25]
 8005992:	3310      	adds	r3, #16
 8005994:	76a3      	strb	r3, [r4, #26]
 8005996:	9607      	str	r6, [sp, #28]
 8005998:	002e      	movs	r6, r5
 800599a:	7833      	ldrb	r3, [r6, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <_vfiprintf_r+0x7c>
 80059a0:	2b25      	cmp	r3, #37	@ 0x25
 80059a2:	d148      	bne.n	8005a36 <_vfiprintf_r+0x10e>
 80059a4:	1b73      	subs	r3, r6, r5
 80059a6:	9305      	str	r3, [sp, #20]
 80059a8:	42ae      	cmp	r6, r5
 80059aa:	d00b      	beq.n	80059c4 <_vfiprintf_r+0x9c>
 80059ac:	002a      	movs	r2, r5
 80059ae:	0039      	movs	r1, r7
 80059b0:	9803      	ldr	r0, [sp, #12]
 80059b2:	f7ff ffa6 	bl	8005902 <__sfputs_r>
 80059b6:	3001      	adds	r0, #1
 80059b8:	d100      	bne.n	80059bc <_vfiprintf_r+0x94>
 80059ba:	e0ae      	b.n	8005b1a <_vfiprintf_r+0x1f2>
 80059bc:	6963      	ldr	r3, [r4, #20]
 80059be:	9a05      	ldr	r2, [sp, #20]
 80059c0:	189b      	adds	r3, r3, r2
 80059c2:	6163      	str	r3, [r4, #20]
 80059c4:	7833      	ldrb	r3, [r6, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d100      	bne.n	80059cc <_vfiprintf_r+0xa4>
 80059ca:	e0a6      	b.n	8005b1a <_vfiprintf_r+0x1f2>
 80059cc:	2201      	movs	r2, #1
 80059ce:	2300      	movs	r3, #0
 80059d0:	4252      	negs	r2, r2
 80059d2:	6062      	str	r2, [r4, #4]
 80059d4:	a904      	add	r1, sp, #16
 80059d6:	3254      	adds	r2, #84	@ 0x54
 80059d8:	1852      	adds	r2, r2, r1
 80059da:	1c75      	adds	r5, r6, #1
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	60e3      	str	r3, [r4, #12]
 80059e0:	60a3      	str	r3, [r4, #8]
 80059e2:	7013      	strb	r3, [r2, #0]
 80059e4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80059e6:	4b59      	ldr	r3, [pc, #356]	@ (8005b4c <_vfiprintf_r+0x224>)
 80059e8:	2205      	movs	r2, #5
 80059ea:	0018      	movs	r0, r3
 80059ec:	7829      	ldrb	r1, [r5, #0]
 80059ee:	9305      	str	r3, [sp, #20]
 80059f0:	f000 fb98 	bl	8006124 <memchr>
 80059f4:	1c6e      	adds	r6, r5, #1
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d11f      	bne.n	8005a3a <_vfiprintf_r+0x112>
 80059fa:	6822      	ldr	r2, [r4, #0]
 80059fc:	06d3      	lsls	r3, r2, #27
 80059fe:	d504      	bpl.n	8005a0a <_vfiprintf_r+0xe2>
 8005a00:	2353      	movs	r3, #83	@ 0x53
 8005a02:	a904      	add	r1, sp, #16
 8005a04:	185b      	adds	r3, r3, r1
 8005a06:	2120      	movs	r1, #32
 8005a08:	7019      	strb	r1, [r3, #0]
 8005a0a:	0713      	lsls	r3, r2, #28
 8005a0c:	d504      	bpl.n	8005a18 <_vfiprintf_r+0xf0>
 8005a0e:	2353      	movs	r3, #83	@ 0x53
 8005a10:	a904      	add	r1, sp, #16
 8005a12:	185b      	adds	r3, r3, r1
 8005a14:	212b      	movs	r1, #43	@ 0x2b
 8005a16:	7019      	strb	r1, [r3, #0]
 8005a18:	782b      	ldrb	r3, [r5, #0]
 8005a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a1c:	d016      	beq.n	8005a4c <_vfiprintf_r+0x124>
 8005a1e:	002e      	movs	r6, r5
 8005a20:	2100      	movs	r1, #0
 8005a22:	200a      	movs	r0, #10
 8005a24:	68e3      	ldr	r3, [r4, #12]
 8005a26:	7832      	ldrb	r2, [r6, #0]
 8005a28:	1c75      	adds	r5, r6, #1
 8005a2a:	3a30      	subs	r2, #48	@ 0x30
 8005a2c:	2a09      	cmp	r2, #9
 8005a2e:	d950      	bls.n	8005ad2 <_vfiprintf_r+0x1aa>
 8005a30:	2900      	cmp	r1, #0
 8005a32:	d111      	bne.n	8005a58 <_vfiprintf_r+0x130>
 8005a34:	e017      	b.n	8005a66 <_vfiprintf_r+0x13e>
 8005a36:	3601      	adds	r6, #1
 8005a38:	e7af      	b.n	800599a <_vfiprintf_r+0x72>
 8005a3a:	9b05      	ldr	r3, [sp, #20]
 8005a3c:	6822      	ldr	r2, [r4, #0]
 8005a3e:	1ac0      	subs	r0, r0, r3
 8005a40:	2301      	movs	r3, #1
 8005a42:	4083      	lsls	r3, r0
 8005a44:	4313      	orrs	r3, r2
 8005a46:	0035      	movs	r5, r6
 8005a48:	6023      	str	r3, [r4, #0]
 8005a4a:	e7cc      	b.n	80059e6 <_vfiprintf_r+0xbe>
 8005a4c:	9b07      	ldr	r3, [sp, #28]
 8005a4e:	1d19      	adds	r1, r3, #4
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	9107      	str	r1, [sp, #28]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	db01      	blt.n	8005a5c <_vfiprintf_r+0x134>
 8005a58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a5a:	e004      	b.n	8005a66 <_vfiprintf_r+0x13e>
 8005a5c:	425b      	negs	r3, r3
 8005a5e:	60e3      	str	r3, [r4, #12]
 8005a60:	2302      	movs	r3, #2
 8005a62:	4313      	orrs	r3, r2
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	7833      	ldrb	r3, [r6, #0]
 8005a68:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a6a:	d10c      	bne.n	8005a86 <_vfiprintf_r+0x15e>
 8005a6c:	7873      	ldrb	r3, [r6, #1]
 8005a6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a70:	d134      	bne.n	8005adc <_vfiprintf_r+0x1b4>
 8005a72:	9b07      	ldr	r3, [sp, #28]
 8005a74:	3602      	adds	r6, #2
 8005a76:	1d1a      	adds	r2, r3, #4
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	9207      	str	r2, [sp, #28]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	da01      	bge.n	8005a84 <_vfiprintf_r+0x15c>
 8005a80:	2301      	movs	r3, #1
 8005a82:	425b      	negs	r3, r3
 8005a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a86:	4d32      	ldr	r5, [pc, #200]	@ (8005b50 <_vfiprintf_r+0x228>)
 8005a88:	2203      	movs	r2, #3
 8005a8a:	0028      	movs	r0, r5
 8005a8c:	7831      	ldrb	r1, [r6, #0]
 8005a8e:	f000 fb49 	bl	8006124 <memchr>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d006      	beq.n	8005aa4 <_vfiprintf_r+0x17c>
 8005a96:	2340      	movs	r3, #64	@ 0x40
 8005a98:	1b40      	subs	r0, r0, r5
 8005a9a:	4083      	lsls	r3, r0
 8005a9c:	6822      	ldr	r2, [r4, #0]
 8005a9e:	3601      	adds	r6, #1
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	6023      	str	r3, [r4, #0]
 8005aa4:	7831      	ldrb	r1, [r6, #0]
 8005aa6:	2206      	movs	r2, #6
 8005aa8:	482a      	ldr	r0, [pc, #168]	@ (8005b54 <_vfiprintf_r+0x22c>)
 8005aaa:	1c75      	adds	r5, r6, #1
 8005aac:	7621      	strb	r1, [r4, #24]
 8005aae:	f000 fb39 	bl	8006124 <memchr>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	d040      	beq.n	8005b38 <_vfiprintf_r+0x210>
 8005ab6:	4b28      	ldr	r3, [pc, #160]	@ (8005b58 <_vfiprintf_r+0x230>)
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d122      	bne.n	8005b02 <_vfiprintf_r+0x1da>
 8005abc:	2207      	movs	r2, #7
 8005abe:	9b07      	ldr	r3, [sp, #28]
 8005ac0:	3307      	adds	r3, #7
 8005ac2:	4393      	bics	r3, r2
 8005ac4:	3308      	adds	r3, #8
 8005ac6:	9307      	str	r3, [sp, #28]
 8005ac8:	6963      	ldr	r3, [r4, #20]
 8005aca:	9a04      	ldr	r2, [sp, #16]
 8005acc:	189b      	adds	r3, r3, r2
 8005ace:	6163      	str	r3, [r4, #20]
 8005ad0:	e762      	b.n	8005998 <_vfiprintf_r+0x70>
 8005ad2:	4343      	muls	r3, r0
 8005ad4:	002e      	movs	r6, r5
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	189b      	adds	r3, r3, r2
 8005ada:	e7a4      	b.n	8005a26 <_vfiprintf_r+0xfe>
 8005adc:	2300      	movs	r3, #0
 8005ade:	200a      	movs	r0, #10
 8005ae0:	0019      	movs	r1, r3
 8005ae2:	3601      	adds	r6, #1
 8005ae4:	6063      	str	r3, [r4, #4]
 8005ae6:	7832      	ldrb	r2, [r6, #0]
 8005ae8:	1c75      	adds	r5, r6, #1
 8005aea:	3a30      	subs	r2, #48	@ 0x30
 8005aec:	2a09      	cmp	r2, #9
 8005aee:	d903      	bls.n	8005af8 <_vfiprintf_r+0x1d0>
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0c8      	beq.n	8005a86 <_vfiprintf_r+0x15e>
 8005af4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005af6:	e7c6      	b.n	8005a86 <_vfiprintf_r+0x15e>
 8005af8:	4341      	muls	r1, r0
 8005afa:	002e      	movs	r6, r5
 8005afc:	2301      	movs	r3, #1
 8005afe:	1889      	adds	r1, r1, r2
 8005b00:	e7f1      	b.n	8005ae6 <_vfiprintf_r+0x1be>
 8005b02:	aa07      	add	r2, sp, #28
 8005b04:	9200      	str	r2, [sp, #0]
 8005b06:	0021      	movs	r1, r4
 8005b08:	003a      	movs	r2, r7
 8005b0a:	4b14      	ldr	r3, [pc, #80]	@ (8005b5c <_vfiprintf_r+0x234>)
 8005b0c:	9803      	ldr	r0, [sp, #12]
 8005b0e:	e000      	b.n	8005b12 <_vfiprintf_r+0x1ea>
 8005b10:	bf00      	nop
 8005b12:	9004      	str	r0, [sp, #16]
 8005b14:	9b04      	ldr	r3, [sp, #16]
 8005b16:	3301      	adds	r3, #1
 8005b18:	d1d6      	bne.n	8005ac8 <_vfiprintf_r+0x1a0>
 8005b1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b1c:	07db      	lsls	r3, r3, #31
 8005b1e:	d405      	bmi.n	8005b2c <_vfiprintf_r+0x204>
 8005b20:	89bb      	ldrh	r3, [r7, #12]
 8005b22:	059b      	lsls	r3, r3, #22
 8005b24:	d402      	bmi.n	8005b2c <_vfiprintf_r+0x204>
 8005b26:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005b28:	f7ff fdd8 	bl	80056dc <__retarget_lock_release_recursive>
 8005b2c:	89bb      	ldrh	r3, [r7, #12]
 8005b2e:	065b      	lsls	r3, r3, #25
 8005b30:	d500      	bpl.n	8005b34 <_vfiprintf_r+0x20c>
 8005b32:	e71e      	b.n	8005972 <_vfiprintf_r+0x4a>
 8005b34:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005b36:	e71e      	b.n	8005976 <_vfiprintf_r+0x4e>
 8005b38:	aa07      	add	r2, sp, #28
 8005b3a:	9200      	str	r2, [sp, #0]
 8005b3c:	0021      	movs	r1, r4
 8005b3e:	003a      	movs	r2, r7
 8005b40:	4b06      	ldr	r3, [pc, #24]	@ (8005b5c <_vfiprintf_r+0x234>)
 8005b42:	9803      	ldr	r0, [sp, #12]
 8005b44:	f000 f87c 	bl	8005c40 <_printf_i>
 8005b48:	e7e3      	b.n	8005b12 <_vfiprintf_r+0x1ea>
 8005b4a:	46c0      	nop			@ (mov r8, r8)
 8005b4c:	080066e4 	.word	0x080066e4
 8005b50:	080066ea 	.word	0x080066ea
 8005b54:	080066ee 	.word	0x080066ee
 8005b58:	00000000 	.word	0x00000000
 8005b5c:	08005903 	.word	0x08005903

08005b60 <_printf_common>:
 8005b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b62:	0016      	movs	r6, r2
 8005b64:	9301      	str	r3, [sp, #4]
 8005b66:	688a      	ldr	r2, [r1, #8]
 8005b68:	690b      	ldr	r3, [r1, #16]
 8005b6a:	000c      	movs	r4, r1
 8005b6c:	9000      	str	r0, [sp, #0]
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	da00      	bge.n	8005b74 <_printf_common+0x14>
 8005b72:	0013      	movs	r3, r2
 8005b74:	0022      	movs	r2, r4
 8005b76:	6033      	str	r3, [r6, #0]
 8005b78:	3243      	adds	r2, #67	@ 0x43
 8005b7a:	7812      	ldrb	r2, [r2, #0]
 8005b7c:	2a00      	cmp	r2, #0
 8005b7e:	d001      	beq.n	8005b84 <_printf_common+0x24>
 8005b80:	3301      	adds	r3, #1
 8005b82:	6033      	str	r3, [r6, #0]
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	069b      	lsls	r3, r3, #26
 8005b88:	d502      	bpl.n	8005b90 <_printf_common+0x30>
 8005b8a:	6833      	ldr	r3, [r6, #0]
 8005b8c:	3302      	adds	r3, #2
 8005b8e:	6033      	str	r3, [r6, #0]
 8005b90:	6822      	ldr	r2, [r4, #0]
 8005b92:	2306      	movs	r3, #6
 8005b94:	0015      	movs	r5, r2
 8005b96:	401d      	ands	r5, r3
 8005b98:	421a      	tst	r2, r3
 8005b9a:	d027      	beq.n	8005bec <_printf_common+0x8c>
 8005b9c:	0023      	movs	r3, r4
 8005b9e:	3343      	adds	r3, #67	@ 0x43
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	1e5a      	subs	r2, r3, #1
 8005ba4:	4193      	sbcs	r3, r2
 8005ba6:	6822      	ldr	r2, [r4, #0]
 8005ba8:	0692      	lsls	r2, r2, #26
 8005baa:	d430      	bmi.n	8005c0e <_printf_common+0xae>
 8005bac:	0022      	movs	r2, r4
 8005bae:	9901      	ldr	r1, [sp, #4]
 8005bb0:	9800      	ldr	r0, [sp, #0]
 8005bb2:	9d08      	ldr	r5, [sp, #32]
 8005bb4:	3243      	adds	r2, #67	@ 0x43
 8005bb6:	47a8      	blx	r5
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d025      	beq.n	8005c08 <_printf_common+0xa8>
 8005bbc:	2206      	movs	r2, #6
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	2500      	movs	r5, #0
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d105      	bne.n	8005bd4 <_printf_common+0x74>
 8005bc8:	6833      	ldr	r3, [r6, #0]
 8005bca:	68e5      	ldr	r5, [r4, #12]
 8005bcc:	1aed      	subs	r5, r5, r3
 8005bce:	43eb      	mvns	r3, r5
 8005bd0:	17db      	asrs	r3, r3, #31
 8005bd2:	401d      	ands	r5, r3
 8005bd4:	68a3      	ldr	r3, [r4, #8]
 8005bd6:	6922      	ldr	r2, [r4, #16]
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	dd01      	ble.n	8005be0 <_printf_common+0x80>
 8005bdc:	1a9b      	subs	r3, r3, r2
 8005bde:	18ed      	adds	r5, r5, r3
 8005be0:	2600      	movs	r6, #0
 8005be2:	42b5      	cmp	r5, r6
 8005be4:	d120      	bne.n	8005c28 <_printf_common+0xc8>
 8005be6:	2000      	movs	r0, #0
 8005be8:	e010      	b.n	8005c0c <_printf_common+0xac>
 8005bea:	3501      	adds	r5, #1
 8005bec:	68e3      	ldr	r3, [r4, #12]
 8005bee:	6832      	ldr	r2, [r6, #0]
 8005bf0:	1a9b      	subs	r3, r3, r2
 8005bf2:	42ab      	cmp	r3, r5
 8005bf4:	ddd2      	ble.n	8005b9c <_printf_common+0x3c>
 8005bf6:	0022      	movs	r2, r4
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	9901      	ldr	r1, [sp, #4]
 8005bfc:	9800      	ldr	r0, [sp, #0]
 8005bfe:	9f08      	ldr	r7, [sp, #32]
 8005c00:	3219      	adds	r2, #25
 8005c02:	47b8      	blx	r7
 8005c04:	3001      	adds	r0, #1
 8005c06:	d1f0      	bne.n	8005bea <_printf_common+0x8a>
 8005c08:	2001      	movs	r0, #1
 8005c0a:	4240      	negs	r0, r0
 8005c0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c0e:	2030      	movs	r0, #48	@ 0x30
 8005c10:	18e1      	adds	r1, r4, r3
 8005c12:	3143      	adds	r1, #67	@ 0x43
 8005c14:	7008      	strb	r0, [r1, #0]
 8005c16:	0021      	movs	r1, r4
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	3145      	adds	r1, #69	@ 0x45
 8005c1c:	7809      	ldrb	r1, [r1, #0]
 8005c1e:	18a2      	adds	r2, r4, r2
 8005c20:	3243      	adds	r2, #67	@ 0x43
 8005c22:	3302      	adds	r3, #2
 8005c24:	7011      	strb	r1, [r2, #0]
 8005c26:	e7c1      	b.n	8005bac <_printf_common+0x4c>
 8005c28:	0022      	movs	r2, r4
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	9901      	ldr	r1, [sp, #4]
 8005c2e:	9800      	ldr	r0, [sp, #0]
 8005c30:	9f08      	ldr	r7, [sp, #32]
 8005c32:	321a      	adds	r2, #26
 8005c34:	47b8      	blx	r7
 8005c36:	3001      	adds	r0, #1
 8005c38:	d0e6      	beq.n	8005c08 <_printf_common+0xa8>
 8005c3a:	3601      	adds	r6, #1
 8005c3c:	e7d1      	b.n	8005be2 <_printf_common+0x82>
	...

08005c40 <_printf_i>:
 8005c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c42:	b08b      	sub	sp, #44	@ 0x2c
 8005c44:	9206      	str	r2, [sp, #24]
 8005c46:	000a      	movs	r2, r1
 8005c48:	3243      	adds	r2, #67	@ 0x43
 8005c4a:	9307      	str	r3, [sp, #28]
 8005c4c:	9005      	str	r0, [sp, #20]
 8005c4e:	9203      	str	r2, [sp, #12]
 8005c50:	7e0a      	ldrb	r2, [r1, #24]
 8005c52:	000c      	movs	r4, r1
 8005c54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c56:	2a78      	cmp	r2, #120	@ 0x78
 8005c58:	d809      	bhi.n	8005c6e <_printf_i+0x2e>
 8005c5a:	2a62      	cmp	r2, #98	@ 0x62
 8005c5c:	d80b      	bhi.n	8005c76 <_printf_i+0x36>
 8005c5e:	2a00      	cmp	r2, #0
 8005c60:	d100      	bne.n	8005c64 <_printf_i+0x24>
 8005c62:	e0bc      	b.n	8005dde <_printf_i+0x19e>
 8005c64:	497b      	ldr	r1, [pc, #492]	@ (8005e54 <_printf_i+0x214>)
 8005c66:	9104      	str	r1, [sp, #16]
 8005c68:	2a58      	cmp	r2, #88	@ 0x58
 8005c6a:	d100      	bne.n	8005c6e <_printf_i+0x2e>
 8005c6c:	e090      	b.n	8005d90 <_printf_i+0x150>
 8005c6e:	0025      	movs	r5, r4
 8005c70:	3542      	adds	r5, #66	@ 0x42
 8005c72:	702a      	strb	r2, [r5, #0]
 8005c74:	e022      	b.n	8005cbc <_printf_i+0x7c>
 8005c76:	0010      	movs	r0, r2
 8005c78:	3863      	subs	r0, #99	@ 0x63
 8005c7a:	2815      	cmp	r0, #21
 8005c7c:	d8f7      	bhi.n	8005c6e <_printf_i+0x2e>
 8005c7e:	f7fa fa41 	bl	8000104 <__gnu_thumb1_case_shi>
 8005c82:	0016      	.short	0x0016
 8005c84:	fff6001f 	.word	0xfff6001f
 8005c88:	fff6fff6 	.word	0xfff6fff6
 8005c8c:	001ffff6 	.word	0x001ffff6
 8005c90:	fff6fff6 	.word	0xfff6fff6
 8005c94:	fff6fff6 	.word	0xfff6fff6
 8005c98:	003600a1 	.word	0x003600a1
 8005c9c:	fff60080 	.word	0xfff60080
 8005ca0:	00b2fff6 	.word	0x00b2fff6
 8005ca4:	0036fff6 	.word	0x0036fff6
 8005ca8:	fff6fff6 	.word	0xfff6fff6
 8005cac:	0084      	.short	0x0084
 8005cae:	0025      	movs	r5, r4
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	3542      	adds	r5, #66	@ 0x42
 8005cb4:	1d11      	adds	r1, r2, #4
 8005cb6:	6019      	str	r1, [r3, #0]
 8005cb8:	6813      	ldr	r3, [r2, #0]
 8005cba:	702b      	strb	r3, [r5, #0]
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e0a0      	b.n	8005e02 <_printf_i+0x1c2>
 8005cc0:	6818      	ldr	r0, [r3, #0]
 8005cc2:	6809      	ldr	r1, [r1, #0]
 8005cc4:	1d02      	adds	r2, r0, #4
 8005cc6:	060d      	lsls	r5, r1, #24
 8005cc8:	d50b      	bpl.n	8005ce2 <_printf_i+0xa2>
 8005cca:	6806      	ldr	r6, [r0, #0]
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	2e00      	cmp	r6, #0
 8005cd0:	da03      	bge.n	8005cda <_printf_i+0x9a>
 8005cd2:	232d      	movs	r3, #45	@ 0x2d
 8005cd4:	9a03      	ldr	r2, [sp, #12]
 8005cd6:	4276      	negs	r6, r6
 8005cd8:	7013      	strb	r3, [r2, #0]
 8005cda:	4b5e      	ldr	r3, [pc, #376]	@ (8005e54 <_printf_i+0x214>)
 8005cdc:	270a      	movs	r7, #10
 8005cde:	9304      	str	r3, [sp, #16]
 8005ce0:	e018      	b.n	8005d14 <_printf_i+0xd4>
 8005ce2:	6806      	ldr	r6, [r0, #0]
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	0649      	lsls	r1, r1, #25
 8005ce8:	d5f1      	bpl.n	8005cce <_printf_i+0x8e>
 8005cea:	b236      	sxth	r6, r6
 8005cec:	e7ef      	b.n	8005cce <_printf_i+0x8e>
 8005cee:	6808      	ldr	r0, [r1, #0]
 8005cf0:	6819      	ldr	r1, [r3, #0]
 8005cf2:	c940      	ldmia	r1!, {r6}
 8005cf4:	0605      	lsls	r5, r0, #24
 8005cf6:	d402      	bmi.n	8005cfe <_printf_i+0xbe>
 8005cf8:	0640      	lsls	r0, r0, #25
 8005cfa:	d500      	bpl.n	8005cfe <_printf_i+0xbe>
 8005cfc:	b2b6      	uxth	r6, r6
 8005cfe:	6019      	str	r1, [r3, #0]
 8005d00:	4b54      	ldr	r3, [pc, #336]	@ (8005e54 <_printf_i+0x214>)
 8005d02:	270a      	movs	r7, #10
 8005d04:	9304      	str	r3, [sp, #16]
 8005d06:	2a6f      	cmp	r2, #111	@ 0x6f
 8005d08:	d100      	bne.n	8005d0c <_printf_i+0xcc>
 8005d0a:	3f02      	subs	r7, #2
 8005d0c:	0023      	movs	r3, r4
 8005d0e:	2200      	movs	r2, #0
 8005d10:	3343      	adds	r3, #67	@ 0x43
 8005d12:	701a      	strb	r2, [r3, #0]
 8005d14:	6863      	ldr	r3, [r4, #4]
 8005d16:	60a3      	str	r3, [r4, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	db03      	blt.n	8005d24 <_printf_i+0xe4>
 8005d1c:	2104      	movs	r1, #4
 8005d1e:	6822      	ldr	r2, [r4, #0]
 8005d20:	438a      	bics	r2, r1
 8005d22:	6022      	str	r2, [r4, #0]
 8005d24:	2e00      	cmp	r6, #0
 8005d26:	d102      	bne.n	8005d2e <_printf_i+0xee>
 8005d28:	9d03      	ldr	r5, [sp, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00c      	beq.n	8005d48 <_printf_i+0x108>
 8005d2e:	9d03      	ldr	r5, [sp, #12]
 8005d30:	0030      	movs	r0, r6
 8005d32:	0039      	movs	r1, r7
 8005d34:	f7fa fa76 	bl	8000224 <__aeabi_uidivmod>
 8005d38:	9b04      	ldr	r3, [sp, #16]
 8005d3a:	3d01      	subs	r5, #1
 8005d3c:	5c5b      	ldrb	r3, [r3, r1]
 8005d3e:	702b      	strb	r3, [r5, #0]
 8005d40:	0033      	movs	r3, r6
 8005d42:	0006      	movs	r6, r0
 8005d44:	429f      	cmp	r7, r3
 8005d46:	d9f3      	bls.n	8005d30 <_printf_i+0xf0>
 8005d48:	2f08      	cmp	r7, #8
 8005d4a:	d109      	bne.n	8005d60 <_printf_i+0x120>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	07db      	lsls	r3, r3, #31
 8005d50:	d506      	bpl.n	8005d60 <_printf_i+0x120>
 8005d52:	6862      	ldr	r2, [r4, #4]
 8005d54:	6923      	ldr	r3, [r4, #16]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	dc02      	bgt.n	8005d60 <_printf_i+0x120>
 8005d5a:	2330      	movs	r3, #48	@ 0x30
 8005d5c:	3d01      	subs	r5, #1
 8005d5e:	702b      	strb	r3, [r5, #0]
 8005d60:	9b03      	ldr	r3, [sp, #12]
 8005d62:	1b5b      	subs	r3, r3, r5
 8005d64:	6123      	str	r3, [r4, #16]
 8005d66:	9b07      	ldr	r3, [sp, #28]
 8005d68:	0021      	movs	r1, r4
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	9805      	ldr	r0, [sp, #20]
 8005d6e:	9b06      	ldr	r3, [sp, #24]
 8005d70:	aa09      	add	r2, sp, #36	@ 0x24
 8005d72:	f7ff fef5 	bl	8005b60 <_printf_common>
 8005d76:	3001      	adds	r0, #1
 8005d78:	d148      	bne.n	8005e0c <_printf_i+0x1cc>
 8005d7a:	2001      	movs	r0, #1
 8005d7c:	4240      	negs	r0, r0
 8005d7e:	b00b      	add	sp, #44	@ 0x2c
 8005d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d82:	2220      	movs	r2, #32
 8005d84:	6809      	ldr	r1, [r1, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	6022      	str	r2, [r4, #0]
 8005d8a:	2278      	movs	r2, #120	@ 0x78
 8005d8c:	4932      	ldr	r1, [pc, #200]	@ (8005e58 <_printf_i+0x218>)
 8005d8e:	9104      	str	r1, [sp, #16]
 8005d90:	0021      	movs	r1, r4
 8005d92:	3145      	adds	r1, #69	@ 0x45
 8005d94:	700a      	strb	r2, [r1, #0]
 8005d96:	6819      	ldr	r1, [r3, #0]
 8005d98:	6822      	ldr	r2, [r4, #0]
 8005d9a:	c940      	ldmia	r1!, {r6}
 8005d9c:	0610      	lsls	r0, r2, #24
 8005d9e:	d402      	bmi.n	8005da6 <_printf_i+0x166>
 8005da0:	0650      	lsls	r0, r2, #25
 8005da2:	d500      	bpl.n	8005da6 <_printf_i+0x166>
 8005da4:	b2b6      	uxth	r6, r6
 8005da6:	6019      	str	r1, [r3, #0]
 8005da8:	07d3      	lsls	r3, r2, #31
 8005daa:	d502      	bpl.n	8005db2 <_printf_i+0x172>
 8005dac:	2320      	movs	r3, #32
 8005dae:	4313      	orrs	r3, r2
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	2e00      	cmp	r6, #0
 8005db4:	d001      	beq.n	8005dba <_printf_i+0x17a>
 8005db6:	2710      	movs	r7, #16
 8005db8:	e7a8      	b.n	8005d0c <_printf_i+0xcc>
 8005dba:	2220      	movs	r2, #32
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	4393      	bics	r3, r2
 8005dc0:	6023      	str	r3, [r4, #0]
 8005dc2:	e7f8      	b.n	8005db6 <_printf_i+0x176>
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	680d      	ldr	r5, [r1, #0]
 8005dc8:	1d10      	adds	r0, r2, #4
 8005dca:	6949      	ldr	r1, [r1, #20]
 8005dcc:	6018      	str	r0, [r3, #0]
 8005dce:	6813      	ldr	r3, [r2, #0]
 8005dd0:	062e      	lsls	r6, r5, #24
 8005dd2:	d501      	bpl.n	8005dd8 <_printf_i+0x198>
 8005dd4:	6019      	str	r1, [r3, #0]
 8005dd6:	e002      	b.n	8005dde <_printf_i+0x19e>
 8005dd8:	066d      	lsls	r5, r5, #25
 8005dda:	d5fb      	bpl.n	8005dd4 <_printf_i+0x194>
 8005ddc:	8019      	strh	r1, [r3, #0]
 8005dde:	2300      	movs	r3, #0
 8005de0:	9d03      	ldr	r5, [sp, #12]
 8005de2:	6123      	str	r3, [r4, #16]
 8005de4:	e7bf      	b.n	8005d66 <_printf_i+0x126>
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	1d11      	adds	r1, r2, #4
 8005dea:	6019      	str	r1, [r3, #0]
 8005dec:	6815      	ldr	r5, [r2, #0]
 8005dee:	2100      	movs	r1, #0
 8005df0:	0028      	movs	r0, r5
 8005df2:	6862      	ldr	r2, [r4, #4]
 8005df4:	f000 f996 	bl	8006124 <memchr>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d001      	beq.n	8005e00 <_printf_i+0x1c0>
 8005dfc:	1b40      	subs	r0, r0, r5
 8005dfe:	6060      	str	r0, [r4, #4]
 8005e00:	6863      	ldr	r3, [r4, #4]
 8005e02:	6123      	str	r3, [r4, #16]
 8005e04:	2300      	movs	r3, #0
 8005e06:	9a03      	ldr	r2, [sp, #12]
 8005e08:	7013      	strb	r3, [r2, #0]
 8005e0a:	e7ac      	b.n	8005d66 <_printf_i+0x126>
 8005e0c:	002a      	movs	r2, r5
 8005e0e:	6923      	ldr	r3, [r4, #16]
 8005e10:	9906      	ldr	r1, [sp, #24]
 8005e12:	9805      	ldr	r0, [sp, #20]
 8005e14:	9d07      	ldr	r5, [sp, #28]
 8005e16:	47a8      	blx	r5
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d0ae      	beq.n	8005d7a <_printf_i+0x13a>
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	079b      	lsls	r3, r3, #30
 8005e20:	d415      	bmi.n	8005e4e <_printf_i+0x20e>
 8005e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e24:	68e0      	ldr	r0, [r4, #12]
 8005e26:	4298      	cmp	r0, r3
 8005e28:	daa9      	bge.n	8005d7e <_printf_i+0x13e>
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	e7a7      	b.n	8005d7e <_printf_i+0x13e>
 8005e2e:	0022      	movs	r2, r4
 8005e30:	2301      	movs	r3, #1
 8005e32:	9906      	ldr	r1, [sp, #24]
 8005e34:	9805      	ldr	r0, [sp, #20]
 8005e36:	9e07      	ldr	r6, [sp, #28]
 8005e38:	3219      	adds	r2, #25
 8005e3a:	47b0      	blx	r6
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d09c      	beq.n	8005d7a <_printf_i+0x13a>
 8005e40:	3501      	adds	r5, #1
 8005e42:	68e3      	ldr	r3, [r4, #12]
 8005e44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	42ab      	cmp	r3, r5
 8005e4a:	dcf0      	bgt.n	8005e2e <_printf_i+0x1ee>
 8005e4c:	e7e9      	b.n	8005e22 <_printf_i+0x1e2>
 8005e4e:	2500      	movs	r5, #0
 8005e50:	e7f7      	b.n	8005e42 <_printf_i+0x202>
 8005e52:	46c0      	nop			@ (mov r8, r8)
 8005e54:	080066f5 	.word	0x080066f5
 8005e58:	08006706 	.word	0x08006706

08005e5c <__sflush_r>:
 8005e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e5e:	220c      	movs	r2, #12
 8005e60:	5e8b      	ldrsh	r3, [r1, r2]
 8005e62:	0005      	movs	r5, r0
 8005e64:	000c      	movs	r4, r1
 8005e66:	071a      	lsls	r2, r3, #28
 8005e68:	d456      	bmi.n	8005f18 <__sflush_r+0xbc>
 8005e6a:	684a      	ldr	r2, [r1, #4]
 8005e6c:	2a00      	cmp	r2, #0
 8005e6e:	dc02      	bgt.n	8005e76 <__sflush_r+0x1a>
 8005e70:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005e72:	2a00      	cmp	r2, #0
 8005e74:	dd4e      	ble.n	8005f14 <__sflush_r+0xb8>
 8005e76:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005e78:	2f00      	cmp	r7, #0
 8005e7a:	d04b      	beq.n	8005f14 <__sflush_r+0xb8>
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2080      	movs	r0, #128	@ 0x80
 8005e80:	682e      	ldr	r6, [r5, #0]
 8005e82:	602a      	str	r2, [r5, #0]
 8005e84:	001a      	movs	r2, r3
 8005e86:	0140      	lsls	r0, r0, #5
 8005e88:	6a21      	ldr	r1, [r4, #32]
 8005e8a:	4002      	ands	r2, r0
 8005e8c:	4203      	tst	r3, r0
 8005e8e:	d033      	beq.n	8005ef8 <__sflush_r+0x9c>
 8005e90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e92:	89a3      	ldrh	r3, [r4, #12]
 8005e94:	075b      	lsls	r3, r3, #29
 8005e96:	d506      	bpl.n	8005ea6 <__sflush_r+0x4a>
 8005e98:	6863      	ldr	r3, [r4, #4]
 8005e9a:	1ad2      	subs	r2, r2, r3
 8005e9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <__sflush_r+0x4a>
 8005ea2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ea4:	1ad2      	subs	r2, r2, r3
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	0028      	movs	r0, r5
 8005eaa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005eac:	6a21      	ldr	r1, [r4, #32]
 8005eae:	47b8      	blx	r7
 8005eb0:	89a2      	ldrh	r2, [r4, #12]
 8005eb2:	1c43      	adds	r3, r0, #1
 8005eb4:	d106      	bne.n	8005ec4 <__sflush_r+0x68>
 8005eb6:	6829      	ldr	r1, [r5, #0]
 8005eb8:	291d      	cmp	r1, #29
 8005eba:	d846      	bhi.n	8005f4a <__sflush_r+0xee>
 8005ebc:	4b29      	ldr	r3, [pc, #164]	@ (8005f64 <__sflush_r+0x108>)
 8005ebe:	410b      	asrs	r3, r1
 8005ec0:	07db      	lsls	r3, r3, #31
 8005ec2:	d442      	bmi.n	8005f4a <__sflush_r+0xee>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	6063      	str	r3, [r4, #4]
 8005ec8:	6923      	ldr	r3, [r4, #16]
 8005eca:	6023      	str	r3, [r4, #0]
 8005ecc:	04d2      	lsls	r2, r2, #19
 8005ece:	d505      	bpl.n	8005edc <__sflush_r+0x80>
 8005ed0:	1c43      	adds	r3, r0, #1
 8005ed2:	d102      	bne.n	8005eda <__sflush_r+0x7e>
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d100      	bne.n	8005edc <__sflush_r+0x80>
 8005eda:	6560      	str	r0, [r4, #84]	@ 0x54
 8005edc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ede:	602e      	str	r6, [r5, #0]
 8005ee0:	2900      	cmp	r1, #0
 8005ee2:	d017      	beq.n	8005f14 <__sflush_r+0xb8>
 8005ee4:	0023      	movs	r3, r4
 8005ee6:	3344      	adds	r3, #68	@ 0x44
 8005ee8:	4299      	cmp	r1, r3
 8005eea:	d002      	beq.n	8005ef2 <__sflush_r+0x96>
 8005eec:	0028      	movs	r0, r5
 8005eee:	f7ff fbf7 	bl	80056e0 <_free_r>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ef6:	e00d      	b.n	8005f14 <__sflush_r+0xb8>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	0028      	movs	r0, r5
 8005efc:	47b8      	blx	r7
 8005efe:	0002      	movs	r2, r0
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d1c6      	bne.n	8005e92 <__sflush_r+0x36>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0c3      	beq.n	8005e92 <__sflush_r+0x36>
 8005f0a:	2b1d      	cmp	r3, #29
 8005f0c:	d001      	beq.n	8005f12 <__sflush_r+0xb6>
 8005f0e:	2b16      	cmp	r3, #22
 8005f10:	d11a      	bne.n	8005f48 <__sflush_r+0xec>
 8005f12:	602e      	str	r6, [r5, #0]
 8005f14:	2000      	movs	r0, #0
 8005f16:	e01e      	b.n	8005f56 <__sflush_r+0xfa>
 8005f18:	690e      	ldr	r6, [r1, #16]
 8005f1a:	2e00      	cmp	r6, #0
 8005f1c:	d0fa      	beq.n	8005f14 <__sflush_r+0xb8>
 8005f1e:	680f      	ldr	r7, [r1, #0]
 8005f20:	600e      	str	r6, [r1, #0]
 8005f22:	1bba      	subs	r2, r7, r6
 8005f24:	9201      	str	r2, [sp, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	079b      	lsls	r3, r3, #30
 8005f2a:	d100      	bne.n	8005f2e <__sflush_r+0xd2>
 8005f2c:	694a      	ldr	r2, [r1, #20]
 8005f2e:	60a2      	str	r2, [r4, #8]
 8005f30:	9b01      	ldr	r3, [sp, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	ddee      	ble.n	8005f14 <__sflush_r+0xb8>
 8005f36:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005f38:	0032      	movs	r2, r6
 8005f3a:	001f      	movs	r7, r3
 8005f3c:	0028      	movs	r0, r5
 8005f3e:	9b01      	ldr	r3, [sp, #4]
 8005f40:	6a21      	ldr	r1, [r4, #32]
 8005f42:	47b8      	blx	r7
 8005f44:	2800      	cmp	r0, #0
 8005f46:	dc07      	bgt.n	8005f58 <__sflush_r+0xfc>
 8005f48:	89a2      	ldrh	r2, [r4, #12]
 8005f4a:	2340      	movs	r3, #64	@ 0x40
 8005f4c:	2001      	movs	r0, #1
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	b21b      	sxth	r3, r3
 8005f52:	81a3      	strh	r3, [r4, #12]
 8005f54:	4240      	negs	r0, r0
 8005f56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f58:	9b01      	ldr	r3, [sp, #4]
 8005f5a:	1836      	adds	r6, r6, r0
 8005f5c:	1a1b      	subs	r3, r3, r0
 8005f5e:	9301      	str	r3, [sp, #4]
 8005f60:	e7e6      	b.n	8005f30 <__sflush_r+0xd4>
 8005f62:	46c0      	nop			@ (mov r8, r8)
 8005f64:	dfbffffe 	.word	0xdfbffffe

08005f68 <_fflush_r>:
 8005f68:	690b      	ldr	r3, [r1, #16]
 8005f6a:	b570      	push	{r4, r5, r6, lr}
 8005f6c:	0005      	movs	r5, r0
 8005f6e:	000c      	movs	r4, r1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d102      	bne.n	8005f7a <_fflush_r+0x12>
 8005f74:	2500      	movs	r5, #0
 8005f76:	0028      	movs	r0, r5
 8005f78:	bd70      	pop	{r4, r5, r6, pc}
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d004      	beq.n	8005f88 <_fflush_r+0x20>
 8005f7e:	6a03      	ldr	r3, [r0, #32]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <_fflush_r+0x20>
 8005f84:	f7ff fa98 	bl	80054b8 <__sinit>
 8005f88:	220c      	movs	r2, #12
 8005f8a:	5ea3      	ldrsh	r3, [r4, r2]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0f1      	beq.n	8005f74 <_fflush_r+0xc>
 8005f90:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f92:	07d2      	lsls	r2, r2, #31
 8005f94:	d404      	bmi.n	8005fa0 <_fflush_r+0x38>
 8005f96:	059b      	lsls	r3, r3, #22
 8005f98:	d402      	bmi.n	8005fa0 <_fflush_r+0x38>
 8005f9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f9c:	f7ff fb9d 	bl	80056da <__retarget_lock_acquire_recursive>
 8005fa0:	0028      	movs	r0, r5
 8005fa2:	0021      	movs	r1, r4
 8005fa4:	f7ff ff5a 	bl	8005e5c <__sflush_r>
 8005fa8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005faa:	0005      	movs	r5, r0
 8005fac:	07db      	lsls	r3, r3, #31
 8005fae:	d4e2      	bmi.n	8005f76 <_fflush_r+0xe>
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	059b      	lsls	r3, r3, #22
 8005fb4:	d4df      	bmi.n	8005f76 <_fflush_r+0xe>
 8005fb6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fb8:	f7ff fb90 	bl	80056dc <__retarget_lock_release_recursive>
 8005fbc:	e7db      	b.n	8005f76 <_fflush_r+0xe>

08005fbe <__swbuf_r>:
 8005fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc0:	0006      	movs	r6, r0
 8005fc2:	000d      	movs	r5, r1
 8005fc4:	0014      	movs	r4, r2
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	d004      	beq.n	8005fd4 <__swbuf_r+0x16>
 8005fca:	6a03      	ldr	r3, [r0, #32]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <__swbuf_r+0x16>
 8005fd0:	f7ff fa72 	bl	80054b8 <__sinit>
 8005fd4:	69a3      	ldr	r3, [r4, #24]
 8005fd6:	60a3      	str	r3, [r4, #8]
 8005fd8:	89a3      	ldrh	r3, [r4, #12]
 8005fda:	071b      	lsls	r3, r3, #28
 8005fdc:	d502      	bpl.n	8005fe4 <__swbuf_r+0x26>
 8005fde:	6923      	ldr	r3, [r4, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d109      	bne.n	8005ff8 <__swbuf_r+0x3a>
 8005fe4:	0021      	movs	r1, r4
 8005fe6:	0030      	movs	r0, r6
 8005fe8:	f000 f82c 	bl	8006044 <__swsetup_r>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d003      	beq.n	8005ff8 <__swbuf_r+0x3a>
 8005ff0:	2501      	movs	r5, #1
 8005ff2:	426d      	negs	r5, r5
 8005ff4:	0028      	movs	r0, r5
 8005ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ff8:	6923      	ldr	r3, [r4, #16]
 8005ffa:	6820      	ldr	r0, [r4, #0]
 8005ffc:	b2ef      	uxtb	r7, r5
 8005ffe:	1ac0      	subs	r0, r0, r3
 8006000:	6963      	ldr	r3, [r4, #20]
 8006002:	b2ed      	uxtb	r5, r5
 8006004:	4283      	cmp	r3, r0
 8006006:	dc05      	bgt.n	8006014 <__swbuf_r+0x56>
 8006008:	0021      	movs	r1, r4
 800600a:	0030      	movs	r0, r6
 800600c:	f7ff ffac 	bl	8005f68 <_fflush_r>
 8006010:	2800      	cmp	r0, #0
 8006012:	d1ed      	bne.n	8005ff0 <__swbuf_r+0x32>
 8006014:	68a3      	ldr	r3, [r4, #8]
 8006016:	3001      	adds	r0, #1
 8006018:	3b01      	subs	r3, #1
 800601a:	60a3      	str	r3, [r4, #8]
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	6022      	str	r2, [r4, #0]
 8006022:	701f      	strb	r7, [r3, #0]
 8006024:	6963      	ldr	r3, [r4, #20]
 8006026:	4283      	cmp	r3, r0
 8006028:	d004      	beq.n	8006034 <__swbuf_r+0x76>
 800602a:	89a3      	ldrh	r3, [r4, #12]
 800602c:	07db      	lsls	r3, r3, #31
 800602e:	d5e1      	bpl.n	8005ff4 <__swbuf_r+0x36>
 8006030:	2d0a      	cmp	r5, #10
 8006032:	d1df      	bne.n	8005ff4 <__swbuf_r+0x36>
 8006034:	0021      	movs	r1, r4
 8006036:	0030      	movs	r0, r6
 8006038:	f7ff ff96 	bl	8005f68 <_fflush_r>
 800603c:	2800      	cmp	r0, #0
 800603e:	d0d9      	beq.n	8005ff4 <__swbuf_r+0x36>
 8006040:	e7d6      	b.n	8005ff0 <__swbuf_r+0x32>
	...

08006044 <__swsetup_r>:
 8006044:	4b2d      	ldr	r3, [pc, #180]	@ (80060fc <__swsetup_r+0xb8>)
 8006046:	b570      	push	{r4, r5, r6, lr}
 8006048:	0005      	movs	r5, r0
 800604a:	6818      	ldr	r0, [r3, #0]
 800604c:	000c      	movs	r4, r1
 800604e:	2800      	cmp	r0, #0
 8006050:	d004      	beq.n	800605c <__swsetup_r+0x18>
 8006052:	6a03      	ldr	r3, [r0, #32]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <__swsetup_r+0x18>
 8006058:	f7ff fa2e 	bl	80054b8 <__sinit>
 800605c:	230c      	movs	r3, #12
 800605e:	5ee2      	ldrsh	r2, [r4, r3]
 8006060:	0713      	lsls	r3, r2, #28
 8006062:	d423      	bmi.n	80060ac <__swsetup_r+0x68>
 8006064:	06d3      	lsls	r3, r2, #27
 8006066:	d407      	bmi.n	8006078 <__swsetup_r+0x34>
 8006068:	2309      	movs	r3, #9
 800606a:	602b      	str	r3, [r5, #0]
 800606c:	2340      	movs	r3, #64	@ 0x40
 800606e:	2001      	movs	r0, #1
 8006070:	4313      	orrs	r3, r2
 8006072:	81a3      	strh	r3, [r4, #12]
 8006074:	4240      	negs	r0, r0
 8006076:	e03a      	b.n	80060ee <__swsetup_r+0xaa>
 8006078:	0752      	lsls	r2, r2, #29
 800607a:	d513      	bpl.n	80060a4 <__swsetup_r+0x60>
 800607c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800607e:	2900      	cmp	r1, #0
 8006080:	d008      	beq.n	8006094 <__swsetup_r+0x50>
 8006082:	0023      	movs	r3, r4
 8006084:	3344      	adds	r3, #68	@ 0x44
 8006086:	4299      	cmp	r1, r3
 8006088:	d002      	beq.n	8006090 <__swsetup_r+0x4c>
 800608a:	0028      	movs	r0, r5
 800608c:	f7ff fb28 	bl	80056e0 <_free_r>
 8006090:	2300      	movs	r3, #0
 8006092:	6363      	str	r3, [r4, #52]	@ 0x34
 8006094:	2224      	movs	r2, #36	@ 0x24
 8006096:	89a3      	ldrh	r3, [r4, #12]
 8006098:	4393      	bics	r3, r2
 800609a:	81a3      	strh	r3, [r4, #12]
 800609c:	2300      	movs	r3, #0
 800609e:	6063      	str	r3, [r4, #4]
 80060a0:	6923      	ldr	r3, [r4, #16]
 80060a2:	6023      	str	r3, [r4, #0]
 80060a4:	2308      	movs	r3, #8
 80060a6:	89a2      	ldrh	r2, [r4, #12]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	81a3      	strh	r3, [r4, #12]
 80060ac:	6923      	ldr	r3, [r4, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10b      	bne.n	80060ca <__swsetup_r+0x86>
 80060b2:	21a0      	movs	r1, #160	@ 0xa0
 80060b4:	2280      	movs	r2, #128	@ 0x80
 80060b6:	89a3      	ldrh	r3, [r4, #12]
 80060b8:	0089      	lsls	r1, r1, #2
 80060ba:	0092      	lsls	r2, r2, #2
 80060bc:	400b      	ands	r3, r1
 80060be:	4293      	cmp	r3, r2
 80060c0:	d003      	beq.n	80060ca <__swsetup_r+0x86>
 80060c2:	0021      	movs	r1, r4
 80060c4:	0028      	movs	r0, r5
 80060c6:	f000 f863 	bl	8006190 <__smakebuf_r>
 80060ca:	230c      	movs	r3, #12
 80060cc:	5ee2      	ldrsh	r2, [r4, r3]
 80060ce:	2101      	movs	r1, #1
 80060d0:	0013      	movs	r3, r2
 80060d2:	400b      	ands	r3, r1
 80060d4:	420a      	tst	r2, r1
 80060d6:	d00b      	beq.n	80060f0 <__swsetup_r+0xac>
 80060d8:	2300      	movs	r3, #0
 80060da:	60a3      	str	r3, [r4, #8]
 80060dc:	6963      	ldr	r3, [r4, #20]
 80060de:	425b      	negs	r3, r3
 80060e0:	61a3      	str	r3, [r4, #24]
 80060e2:	2000      	movs	r0, #0
 80060e4:	6923      	ldr	r3, [r4, #16]
 80060e6:	4283      	cmp	r3, r0
 80060e8:	d101      	bne.n	80060ee <__swsetup_r+0xaa>
 80060ea:	0613      	lsls	r3, r2, #24
 80060ec:	d4be      	bmi.n	800606c <__swsetup_r+0x28>
 80060ee:	bd70      	pop	{r4, r5, r6, pc}
 80060f0:	0791      	lsls	r1, r2, #30
 80060f2:	d400      	bmi.n	80060f6 <__swsetup_r+0xb2>
 80060f4:	6963      	ldr	r3, [r4, #20]
 80060f6:	60a3      	str	r3, [r4, #8]
 80060f8:	e7f3      	b.n	80060e2 <__swsetup_r+0x9e>
 80060fa:	46c0      	nop			@ (mov r8, r8)
 80060fc:	20000058 	.word	0x20000058

08006100 <_sbrk_r>:
 8006100:	2300      	movs	r3, #0
 8006102:	b570      	push	{r4, r5, r6, lr}
 8006104:	4d06      	ldr	r5, [pc, #24]	@ (8006120 <_sbrk_r+0x20>)
 8006106:	0004      	movs	r4, r0
 8006108:	0008      	movs	r0, r1
 800610a:	602b      	str	r3, [r5, #0]
 800610c:	f7fb fd52 	bl	8001bb4 <_sbrk>
 8006110:	1c43      	adds	r3, r0, #1
 8006112:	d103      	bne.n	800611c <_sbrk_r+0x1c>
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d000      	beq.n	800611c <_sbrk_r+0x1c>
 800611a:	6023      	str	r3, [r4, #0]
 800611c:	bd70      	pop	{r4, r5, r6, pc}
 800611e:	46c0      	nop			@ (mov r8, r8)
 8006120:	200003c4 	.word	0x200003c4

08006124 <memchr>:
 8006124:	b2c9      	uxtb	r1, r1
 8006126:	1882      	adds	r2, r0, r2
 8006128:	4290      	cmp	r0, r2
 800612a:	d101      	bne.n	8006130 <memchr+0xc>
 800612c:	2000      	movs	r0, #0
 800612e:	4770      	bx	lr
 8006130:	7803      	ldrb	r3, [r0, #0]
 8006132:	428b      	cmp	r3, r1
 8006134:	d0fb      	beq.n	800612e <memchr+0xa>
 8006136:	3001      	adds	r0, #1
 8006138:	e7f6      	b.n	8006128 <memchr+0x4>
	...

0800613c <__swhatbuf_r>:
 800613c:	b570      	push	{r4, r5, r6, lr}
 800613e:	000e      	movs	r6, r1
 8006140:	001d      	movs	r5, r3
 8006142:	230e      	movs	r3, #14
 8006144:	5ec9      	ldrsh	r1, [r1, r3]
 8006146:	0014      	movs	r4, r2
 8006148:	b096      	sub	sp, #88	@ 0x58
 800614a:	2900      	cmp	r1, #0
 800614c:	da0c      	bge.n	8006168 <__swhatbuf_r+0x2c>
 800614e:	89b2      	ldrh	r2, [r6, #12]
 8006150:	2380      	movs	r3, #128	@ 0x80
 8006152:	0011      	movs	r1, r2
 8006154:	4019      	ands	r1, r3
 8006156:	421a      	tst	r2, r3
 8006158:	d114      	bne.n	8006184 <__swhatbuf_r+0x48>
 800615a:	2380      	movs	r3, #128	@ 0x80
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	2000      	movs	r0, #0
 8006160:	6029      	str	r1, [r5, #0]
 8006162:	6023      	str	r3, [r4, #0]
 8006164:	b016      	add	sp, #88	@ 0x58
 8006166:	bd70      	pop	{r4, r5, r6, pc}
 8006168:	466a      	mov	r2, sp
 800616a:	f000 f853 	bl	8006214 <_fstat_r>
 800616e:	2800      	cmp	r0, #0
 8006170:	dbed      	blt.n	800614e <__swhatbuf_r+0x12>
 8006172:	23f0      	movs	r3, #240	@ 0xf0
 8006174:	9901      	ldr	r1, [sp, #4]
 8006176:	021b      	lsls	r3, r3, #8
 8006178:	4019      	ands	r1, r3
 800617a:	4b04      	ldr	r3, [pc, #16]	@ (800618c <__swhatbuf_r+0x50>)
 800617c:	18c9      	adds	r1, r1, r3
 800617e:	424b      	negs	r3, r1
 8006180:	4159      	adcs	r1, r3
 8006182:	e7ea      	b.n	800615a <__swhatbuf_r+0x1e>
 8006184:	2100      	movs	r1, #0
 8006186:	2340      	movs	r3, #64	@ 0x40
 8006188:	e7e9      	b.n	800615e <__swhatbuf_r+0x22>
 800618a:	46c0      	nop			@ (mov r8, r8)
 800618c:	ffffe000 	.word	0xffffe000

08006190 <__smakebuf_r>:
 8006190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006192:	2602      	movs	r6, #2
 8006194:	898b      	ldrh	r3, [r1, #12]
 8006196:	0005      	movs	r5, r0
 8006198:	000c      	movs	r4, r1
 800619a:	b085      	sub	sp, #20
 800619c:	4233      	tst	r3, r6
 800619e:	d007      	beq.n	80061b0 <__smakebuf_r+0x20>
 80061a0:	0023      	movs	r3, r4
 80061a2:	3347      	adds	r3, #71	@ 0x47
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	6123      	str	r3, [r4, #16]
 80061a8:	2301      	movs	r3, #1
 80061aa:	6163      	str	r3, [r4, #20]
 80061ac:	b005      	add	sp, #20
 80061ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061b0:	ab03      	add	r3, sp, #12
 80061b2:	aa02      	add	r2, sp, #8
 80061b4:	f7ff ffc2 	bl	800613c <__swhatbuf_r>
 80061b8:	9f02      	ldr	r7, [sp, #8]
 80061ba:	9001      	str	r0, [sp, #4]
 80061bc:	0039      	movs	r1, r7
 80061be:	0028      	movs	r0, r5
 80061c0:	f7ff fafa 	bl	80057b8 <_malloc_r>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	d108      	bne.n	80061da <__smakebuf_r+0x4a>
 80061c8:	220c      	movs	r2, #12
 80061ca:	5ea3      	ldrsh	r3, [r4, r2]
 80061cc:	059a      	lsls	r2, r3, #22
 80061ce:	d4ed      	bmi.n	80061ac <__smakebuf_r+0x1c>
 80061d0:	2203      	movs	r2, #3
 80061d2:	4393      	bics	r3, r2
 80061d4:	431e      	orrs	r6, r3
 80061d6:	81a6      	strh	r6, [r4, #12]
 80061d8:	e7e2      	b.n	80061a0 <__smakebuf_r+0x10>
 80061da:	2380      	movs	r3, #128	@ 0x80
 80061dc:	89a2      	ldrh	r2, [r4, #12]
 80061de:	6020      	str	r0, [r4, #0]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	81a3      	strh	r3, [r4, #12]
 80061e4:	9b03      	ldr	r3, [sp, #12]
 80061e6:	6120      	str	r0, [r4, #16]
 80061e8:	6167      	str	r7, [r4, #20]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00c      	beq.n	8006208 <__smakebuf_r+0x78>
 80061ee:	0028      	movs	r0, r5
 80061f0:	230e      	movs	r3, #14
 80061f2:	5ee1      	ldrsh	r1, [r4, r3]
 80061f4:	f000 f820 	bl	8006238 <_isatty_r>
 80061f8:	2800      	cmp	r0, #0
 80061fa:	d005      	beq.n	8006208 <__smakebuf_r+0x78>
 80061fc:	2303      	movs	r3, #3
 80061fe:	89a2      	ldrh	r2, [r4, #12]
 8006200:	439a      	bics	r2, r3
 8006202:	3b02      	subs	r3, #2
 8006204:	4313      	orrs	r3, r2
 8006206:	81a3      	strh	r3, [r4, #12]
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	9a01      	ldr	r2, [sp, #4]
 800620c:	4313      	orrs	r3, r2
 800620e:	81a3      	strh	r3, [r4, #12]
 8006210:	e7cc      	b.n	80061ac <__smakebuf_r+0x1c>
	...

08006214 <_fstat_r>:
 8006214:	2300      	movs	r3, #0
 8006216:	b570      	push	{r4, r5, r6, lr}
 8006218:	4d06      	ldr	r5, [pc, #24]	@ (8006234 <_fstat_r+0x20>)
 800621a:	0004      	movs	r4, r0
 800621c:	0008      	movs	r0, r1
 800621e:	0011      	movs	r1, r2
 8006220:	602b      	str	r3, [r5, #0]
 8006222:	f7fb fca5 	bl	8001b70 <_fstat>
 8006226:	1c43      	adds	r3, r0, #1
 8006228:	d103      	bne.n	8006232 <_fstat_r+0x1e>
 800622a:	682b      	ldr	r3, [r5, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d000      	beq.n	8006232 <_fstat_r+0x1e>
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	bd70      	pop	{r4, r5, r6, pc}
 8006234:	200003c4 	.word	0x200003c4

08006238 <_isatty_r>:
 8006238:	2300      	movs	r3, #0
 800623a:	b570      	push	{r4, r5, r6, lr}
 800623c:	4d06      	ldr	r5, [pc, #24]	@ (8006258 <_isatty_r+0x20>)
 800623e:	0004      	movs	r4, r0
 8006240:	0008      	movs	r0, r1
 8006242:	602b      	str	r3, [r5, #0]
 8006244:	f7fb fca2 	bl	8001b8c <_isatty>
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	d103      	bne.n	8006254 <_isatty_r+0x1c>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d000      	beq.n	8006254 <_isatty_r+0x1c>
 8006252:	6023      	str	r3, [r4, #0]
 8006254:	bd70      	pop	{r4, r5, r6, pc}
 8006256:	46c0      	nop			@ (mov r8, r8)
 8006258:	200003c4 	.word	0x200003c4

0800625c <_init>:
 800625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625e:	46c0      	nop			@ (mov r8, r8)
 8006260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006262:	bc08      	pop	{r3}
 8006264:	469e      	mov	lr, r3
 8006266:	4770      	bx	lr

08006268 <_fini>:
 8006268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626a:	46c0      	nop			@ (mov r8, r8)
 800626c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626e:	bc08      	pop	{r3}
 8006270:	469e      	mov	lr, r3
 8006272:	4770      	bx	lr
