
sinking-clock_master_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000654c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  08006608  08006608  00016608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b10  08006b10  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08006b10  08006b10  00016b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b18  08006b18  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b18  08006b18  00016b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b1c  08006b1c  00016b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08006b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200000b0  08006bd0  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08006bd0  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141e4  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002922  00000000  00000000  000342bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  00036be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  00037d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e10  00000000  00000000  00038d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e7f  00000000  00000000  00051ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b1e2  00000000  00000000  00066a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101c09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000469c  00000000  00000000  00101c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000b0 	.word	0x200000b0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080065f0 	.word	0x080065f0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000b4 	.word	0x200000b4
 8000100:	080065f0 	.word	0x080065f0

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	469b      	mov	fp, r3
 80002a6:	d433      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a8:	465a      	mov	r2, fp
 80002aa:	4653      	mov	r3, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83a      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e078      	b.n	80003b4 <__udivmoddi4+0x144>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e075      	b.n	80003ba <__udivmoddi4+0x14a>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e028      	b.n	800033a <__udivmoddi4+0xca>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	2320      	movs	r3, #32
 8000314:	1a9b      	subs	r3, r3, r2
 8000316:	4652      	mov	r2, sl
 8000318:	40da      	lsrs	r2, r3
 800031a:	4641      	mov	r1, r8
 800031c:	0013      	movs	r3, r2
 800031e:	464a      	mov	r2, r9
 8000320:	408a      	lsls	r2, r1
 8000322:	0017      	movs	r7, r2
 8000324:	4642      	mov	r2, r8
 8000326:	431f      	orrs	r7, r3
 8000328:	4653      	mov	r3, sl
 800032a:	4093      	lsls	r3, r2
 800032c:	001e      	movs	r6, r3
 800032e:	42af      	cmp	r7, r5
 8000330:	d9c4      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0d9      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000340:	07fb      	lsls	r3, r7, #31
 8000342:	0872      	lsrs	r2, r6, #1
 8000344:	431a      	orrs	r2, r3
 8000346:	4646      	mov	r6, r8
 8000348:	087b      	lsrs	r3, r7, #1
 800034a:	e00e      	b.n	800036a <__udivmoddi4+0xfa>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d101      	bne.n	8000354 <__udivmoddi4+0xe4>
 8000350:	42a2      	cmp	r2, r4
 8000352:	d80c      	bhi.n	800036e <__udivmoddi4+0xfe>
 8000354:	1aa4      	subs	r4, r4, r2
 8000356:	419d      	sbcs	r5, r3
 8000358:	2001      	movs	r0, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2100      	movs	r1, #0
 8000360:	3e01      	subs	r6, #1
 8000362:	1824      	adds	r4, r4, r0
 8000364:	414d      	adcs	r5, r1
 8000366:	2e00      	cmp	r6, #0
 8000368:	d006      	beq.n	8000378 <__udivmoddi4+0x108>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d9ee      	bls.n	800034c <__udivmoddi4+0xdc>
 800036e:	3e01      	subs	r6, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2e00      	cmp	r6, #0
 8000376:	d1f8      	bne.n	800036a <__udivmoddi4+0xfa>
 8000378:	9800      	ldr	r0, [sp, #0]
 800037a:	9901      	ldr	r1, [sp, #4]
 800037c:	465b      	mov	r3, fp
 800037e:	1900      	adds	r0, r0, r4
 8000380:	4169      	adcs	r1, r5
 8000382:	2b00      	cmp	r3, #0
 8000384:	db24      	blt.n	80003d0 <__udivmoddi4+0x160>
 8000386:	002b      	movs	r3, r5
 8000388:	465a      	mov	r2, fp
 800038a:	4644      	mov	r4, r8
 800038c:	40d3      	lsrs	r3, r2
 800038e:	002a      	movs	r2, r5
 8000390:	40e2      	lsrs	r2, r4
 8000392:	001c      	movs	r4, r3
 8000394:	465b      	mov	r3, fp
 8000396:	0015      	movs	r5, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	db2a      	blt.n	80003f2 <__udivmoddi4+0x182>
 800039c:	0026      	movs	r6, r4
 800039e:	409e      	lsls	r6, r3
 80003a0:	0033      	movs	r3, r6
 80003a2:	0026      	movs	r6, r4
 80003a4:	4647      	mov	r7, r8
 80003a6:	40be      	lsls	r6, r7
 80003a8:	0032      	movs	r2, r6
 80003aa:	1a80      	subs	r0, r0, r2
 80003ac:	4199      	sbcs	r1, r3
 80003ae:	9000      	str	r0, [sp, #0]
 80003b0:	9101      	str	r1, [sp, #4]
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b4:	42a3      	cmp	r3, r4
 80003b6:	d8bc      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80003b8:	e783      	b.n	80002c2 <__udivmoddi4+0x52>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	2100      	movs	r1, #0
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	2200      	movs	r2, #0
 80003c4:	9100      	str	r1, [sp, #0]
 80003c6:	9201      	str	r2, [sp, #4]
 80003c8:	2201      	movs	r2, #1
 80003ca:	40da      	lsrs	r2, r3
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	e786      	b.n	80002de <__udivmoddi4+0x6e>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	4646      	mov	r6, r8
 80003da:	409a      	lsls	r2, r3
 80003dc:	0023      	movs	r3, r4
 80003de:	40f3      	lsrs	r3, r6
 80003e0:	4644      	mov	r4, r8
 80003e2:	4313      	orrs	r3, r2
 80003e4:	002a      	movs	r2, r5
 80003e6:	40e2      	lsrs	r2, r4
 80003e8:	001c      	movs	r4, r3
 80003ea:	465b      	mov	r3, fp
 80003ec:	0015      	movs	r5, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dad4      	bge.n	800039c <__udivmoddi4+0x12c>
 80003f2:	4642      	mov	r2, r8
 80003f4:	002f      	movs	r7, r5
 80003f6:	2320      	movs	r3, #32
 80003f8:	0026      	movs	r6, r4
 80003fa:	4097      	lsls	r7, r2
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	40de      	lsrs	r6, r3
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7cd      	b.n	80003a2 <__udivmoddi4+0x132>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <getRTCTime>:
				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
	}

}

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000468:	68b9      	ldr	r1, [r7, #8]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	2200      	movs	r2, #0
 800046e:	0018      	movs	r0, r3
 8000470:	f002 ffc0 	bl	80033f4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000474:	6879      	ldr	r1, [r7, #4]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2200      	movs	r2, #0
 800047a:	0018      	movs	r0, r3
 800047c:	f003 f8a8 	bl	80035d0 <HAL_RTC_GetDate>

}
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b004      	add	sp, #16
 8000486:	bd80      	pop	{r7, pc}

08000488 <getUserAlarmTime>:

void getUserAlarmTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *userAlarmTime) {
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b08d      	sub	sp, #52	; 0x34
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]

	// Store alarm data in alarm object pointer and extract alarm time data from alarm object
	RTC_AlarmTypeDef userAlarmObj;
	HAL_RTC_GetAlarm(hrtc, &userAlarmObj, userAlarm, RTCTimeFormat);
 8000492:	2380      	movs	r3, #128	; 0x80
 8000494:	005a      	lsls	r2, r3, #1
 8000496:	2408      	movs	r4, #8
 8000498:	1939      	adds	r1, r7, r4
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	2300      	movs	r3, #0
 800049e:	f003 fa25 	bl	80038ec <HAL_RTC_GetAlarm>
	*userAlarmTime = userAlarmObj.AlarmTime;
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	193a      	adds	r2, r7, r4
 80004a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004a8:	c313      	stmia	r3!, {r0, r1, r4}
 80004aa:	ca03      	ldmia	r2!, {r0, r1}
 80004ac:	c303      	stmia	r3!, {r0, r1}

}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b00d      	add	sp, #52	; 0x34
 80004b4:	bd90      	pop	{r4, r7, pc}

080004b6 <getUserAlarmObj>:

void getUserAlarmObj(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *userAlarmObj) {
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	6039      	str	r1, [r7, #0]

	// Store alarm data in alarm object pointer
	HAL_RTC_GetAlarm(hrtc, userAlarmObj, internalAlarm, FORMAT_BIN);
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	005a      	lsls	r2, r3, #1
 80004c4:	6839      	ldr	r1, [r7, #0]
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	2300      	movs	r3, #0
 80004ca:	f003 fa0f 	bl	80038ec <HAL_RTC_GetAlarm>

}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b002      	add	sp, #8
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <capTouchTrigger>:
 *      Author: marka
 */

#include "../Inc/ctouch.h"

bool capTouchTrigger(uint8_t buttonPin) {
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b082      	sub	sp, #8
 80004da:	af00      	add	r7, sp, #0
 80004dc:	0002      	movs	r2, r0
 80004de:	1dfb      	adds	r3, r7, #7
 80004e0:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, buttonPin) == GPIO_PIN_RESET) {		// If button is low, cap. touch has triggered.
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	23a0      	movs	r3, #160	; 0xa0
 80004ea:	05db      	lsls	r3, r3, #23
 80004ec:	0011      	movs	r1, r2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 fef8 	bl	80022e4 <HAL_GPIO_ReadPin>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d101      	bne.n	80004fc <capTouchTrigger+0x26>
		return true;
 80004f8:	2301      	movs	r3, #1
 80004fa:	e000      	b.n	80004fe <capTouchTrigger+0x28>
		printf("Cap. touch triggered.\n\r");
	}

	return false;
 80004fc:	2300      	movs	r3, #0

}
 80004fe:	0018      	movs	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	b002      	add	sp, #8
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000510:	2301      	movs	r3, #1
 8000512:	425b      	negs	r3, r3
 8000514:	1d39      	adds	r1, r7, #4
 8000516:	4804      	ldr	r0, [pc, #16]	; (8000528 <__io_putchar+0x20>)
 8000518:	2201      	movs	r2, #1
 800051a:	f004 fb81 	bl	8004c20 <HAL_UART_Transmit>
  return ch;
 800051e:	687b      	ldr	r3, [r7, #4]
}
 8000520:	0018      	movs	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	b002      	add	sp, #8
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000194 	.word	0x20000194

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052e:	b087      	sub	sp, #28
 8000530:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 8000532:	f001 fc0f 	bl	8001d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f85f 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 fa7f 	bl	8000a3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800053e:	f000 fa49 	bl	80009d4 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000542:	f000 f8a5 	bl	8000690 <MX_RTC_Init>
  MX_TIM16_Init();
 8000546:	f000 fa1d 	bl	8000984 <MX_TIM16_Init>
  MX_TIM1_Init();
 800054a:	f000 f971 	bl	8000830 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  displayToggle = 2; 		// Display at 100% intensity for next display toggle
 800054e:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <main+0x98>)
 8000550:	2202      	movs	r2, #2
 8000552:	701a      	strb	r2, [r3, #0]

  // Initialize all GPIOs to be used with 7 segment display
  sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000554:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <main+0x9c>)
 8000556:	8818      	ldrh	r0, [r3, #0]
 8000558:	4b1c      	ldr	r3, [pc, #112]	; (80005cc <main+0xa0>)
 800055a:	881c      	ldrh	r4, [r3, #0]
 800055c:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <main+0xa4>)
 800055e:	881d      	ldrh	r5, [r3, #0]
 8000560:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <main+0xa8>)
 8000562:	881e      	ldrh	r6, [r3, #0]
 8000564:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <main+0xac>)
 8000566:	881a      	ldrh	r2, [r3, #0]
 8000568:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <main+0xb0>)
 800056a:	6819      	ldr	r1, [r3, #0]
 800056c:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <main+0xb4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	9303      	str	r3, [sp, #12]
 8000572:	9102      	str	r1, [sp, #8]
 8000574:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <main+0xb8>)
 8000576:	9301      	str	r3, [sp, #4]
 8000578:	9200      	str	r2, [sp, #0]
 800057a:	0033      	movs	r3, r6
 800057c:	002a      	movs	r2, r5
 800057e:	0021      	movs	r1, r4
 8000580:	f000 ffae 	bl	80014e0 <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, timerDelay, timerPWM);

  	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 8000584:	1dfc      	adds	r4, r7, #7
 8000586:	f000 fb3d 	bl	8000c04 <updateAndDisplayTime>
 800058a:	0003      	movs	r3, r0
 800058c:	7023      	strb	r3, [r4, #0]

  	if(halRet != HAL_OK) {		//check HAL
 800058e:	1dfb      	adds	r3, r7, #7
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d004      	beq.n	80005a0 <main+0x74>
  		printf("HAL Error - TX current time\n\r");
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <main+0xbc>)
 8000598:	0018      	movs	r0, r3
 800059a:	f005 f851 	bl	8005640 <iprintf>
 800059e:	e003      	b.n	80005a8 <main+0x7c>
  	} else {
  		printf("Display Updated with current time\n\r");
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <main+0xc0>)
 80005a2:	0018      	movs	r0, r3
 80005a4:	f005 f84c 	bl	8005640 <iprintf>
  	}

  userAlarmToggle = false;			//Default to off
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <main+0xc4>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]

  // User alarm default value
  userAlarmTime.Hours = 1;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <main+0xc8>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]
  userAlarmTime.Minutes = 1;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <main+0xc8>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	705a      	strb	r2, [r3, #1]
  userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <main+0xc8>)
 80005bc:	2200      	movs	r2, #0
 80005be:	70da      	strb	r2, [r3, #3]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <main+0x94>
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	200000cc 	.word	0x200000cc
 80005c8:	20000000 	.word	0x20000000
 80005cc:	20000002 	.word	0x20000002
 80005d0:	20000004 	.word	0x20000004
 80005d4:	20000006 	.word	0x20000006
 80005d8:	20000008 	.word	0x20000008
 80005dc:	20000024 	.word	0x20000024
 80005e0:	20000020 	.word	0x20000020
 80005e4:	2000000c 	.word	0x2000000c
 80005e8:	08006608 	.word	0x08006608
 80005ec:	08006628 	.word	0x08006628
 80005f0:	200000cd 	.word	0x200000cd
 80005f4:	20000268 	.word	0x20000268

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b093      	sub	sp, #76	; 0x4c
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	2410      	movs	r4, #16
 8000600:	193b      	adds	r3, r7, r4
 8000602:	0018      	movs	r0, r3
 8000604:	2338      	movs	r3, #56	; 0x38
 8000606:	001a      	movs	r2, r3
 8000608:	2100      	movs	r1, #0
 800060a:	f005 f811 	bl	8005630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060e:	003b      	movs	r3, r7
 8000610:	0018      	movs	r0, r3
 8000612:	2310      	movs	r3, #16
 8000614:	001a      	movs	r2, r3
 8000616:	2100      	movs	r1, #0
 8000618:	f005 f80a 	bl	8005630 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	0018      	movs	r0, r3
 8000622:	f001 fee9 	bl	80023f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000626:	193b      	adds	r3, r7, r4
 8000628:	220a      	movs	r2, #10
 800062a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	193b      	adds	r3, r7, r4
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	0052      	lsls	r2, r2, #1
 8000632:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000634:	0021      	movs	r1, r4
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2240      	movs	r2, #64	; 0x40
 8000640:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2201      	movs	r2, #1
 8000646:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	187b      	adds	r3, r7, r1
 8000650:	0018      	movs	r0, r3
 8000652:	f001 ff47 	bl	80024e4 <HAL_RCC_OscConfig>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800065a:	f000 ff3b 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	003b      	movs	r3, r7
 8000660:	2207      	movs	r2, #7
 8000662:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000664:	003b      	movs	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	003b      	movs	r3, r7
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	003b      	movs	r3, r7
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000676:	003b      	movs	r3, r7
 8000678:	2100      	movs	r1, #0
 800067a:	0018      	movs	r0, r3
 800067c:	f002 fa4c 	bl	8002b18 <HAL_RCC_ClockConfig>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000684:	f000 ff26 	bl	80014d4 <Error_Handler>
  }
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b013      	add	sp, #76	; 0x4c
 800068e:	bd90      	pop	{r4, r7, pc}

08000690 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b091      	sub	sp, #68	; 0x44
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000696:	232c      	movs	r3, #44	; 0x2c
 8000698:	18fb      	adds	r3, r7, r3
 800069a:	0018      	movs	r0, r3
 800069c:	2314      	movs	r3, #20
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f004 ffc5 	bl	8005630 <memset>
  RTC_DateTypeDef sDate = {0};
 80006a6:	2328      	movs	r3, #40	; 0x28
 80006a8:	18fb      	adds	r3, r7, r3
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80006ae:	003b      	movs	r3, r7
 80006b0:	0018      	movs	r0, r3
 80006b2:	2328      	movs	r3, #40	; 0x28
 80006b4:	001a      	movs	r2, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	f004 ffba 	bl	8005630 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006bc:	4b55      	ldr	r3, [pc, #340]	; (8000814 <MX_RTC_Init+0x184>)
 80006be:	4a56      	ldr	r2, [pc, #344]	; (8000818 <MX_RTC_Init+0x188>)
 80006c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80006c2:	4b54      	ldr	r3, [pc, #336]	; (8000814 <MX_RTC_Init+0x184>)
 80006c4:	2240      	movs	r2, #64	; 0x40
 80006c6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80006c8:	4b52      	ldr	r3, [pc, #328]	; (8000814 <MX_RTC_Init+0x184>)
 80006ca:	227f      	movs	r2, #127	; 0x7f
 80006cc:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80006ce:	4b51      	ldr	r3, [pc, #324]	; (8000814 <MX_RTC_Init+0x184>)
 80006d0:	22ff      	movs	r2, #255	; 0xff
 80006d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006d4:	4b4f      	ldr	r3, [pc, #316]	; (8000814 <MX_RTC_Init+0x184>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006da:	4b4e      	ldr	r3, [pc, #312]	; (8000814 <MX_RTC_Init+0x184>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006e0:	4b4c      	ldr	r3, [pc, #304]	; (8000814 <MX_RTC_Init+0x184>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006e6:	4b4b      	ldr	r3, [pc, #300]	; (8000814 <MX_RTC_Init+0x184>)
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	05d2      	lsls	r2, r2, #23
 80006ec:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80006ee:	4b49      	ldr	r3, [pc, #292]	; (8000814 <MX_RTC_Init+0x184>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006f4:	4b47      	ldr	r3, [pc, #284]	; (8000814 <MX_RTC_Init+0x184>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f002 fd32 	bl	8003160 <HAL_RTC_Init>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000700:	f000 fee8 	bl	80014d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 8000704:	212c      	movs	r1, #44	; 0x2c
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2200      	movs	r2, #0
 8000716:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000730:	1879      	adds	r1, r7, r1
 8000732:	4b38      	ldr	r3, [pc, #224]	; (8000814 <MX_RTC_Init+0x184>)
 8000734:	2200      	movs	r2, #0
 8000736:	0018      	movs	r0, r3
 8000738:	f002 fdb4 	bl	80032a4 <HAL_RTC_SetTime>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000740:	f000 fec8 	bl	80014d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000744:	2128      	movs	r1, #40	; 0x28
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2201      	movs	r2, #1
 800074a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2201      	movs	r2, #1
 8000750:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2201      	movs	r2, #1
 8000756:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2200      	movs	r2, #0
 800075c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800075e:	1879      	adds	r1, r7, r1
 8000760:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <MX_RTC_Init+0x184>)
 8000762:	2200      	movs	r2, #0
 8000764:	0018      	movs	r0, r3
 8000766:	f002 fea1 	bl	80034ac <HAL_RTC_SetDate>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 800076e:	f000 feb1 	bl	80014d4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 1;
 8000772:	003b      	movs	r3, r7
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 1;
 8000778:	003b      	movs	r3, r7
 800077a:	2201      	movs	r2, #1
 800077c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800077e:	003b      	movs	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000784:	003b      	movs	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800078a:	003b      	movs	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000790:	003b      	movs	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000796:	003b      	movs	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 800079c:	003b      	movs	r3, r7
 800079e:	4a1f      	ldr	r2, [pc, #124]	; (800081c <MX_RTC_Init+0x18c>)
 80007a0:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007a2:	003b      	movs	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007a8:	003b      	movs	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80007ae:	003b      	movs	r3, r7
 80007b0:	2220      	movs	r2, #32
 80007b2:	2101      	movs	r1, #1
 80007b4:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80007b6:	003b      	movs	r3, r7
 80007b8:	2280      	movs	r2, #128	; 0x80
 80007ba:	0052      	lsls	r2, r2, #1
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80007be:	0039      	movs	r1, r7
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_RTC_Init+0x184>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	0018      	movs	r0, r3
 80007c6:	f002 ff51 	bl	800366c <HAL_RTC_SetAlarm_IT>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d001      	beq.n	80007d2 <MX_RTC_Init+0x142>
  {
    Error_Handler();
 80007ce:	f000 fe81 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  currTime = sTime;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_RTC_Init+0x190>)
 80007d4:	222c      	movs	r2, #44	; 0x2c
 80007d6:	18ba      	adds	r2, r7, r2
 80007d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007da:	c313      	stmia	r3!, {r0, r1, r4}
 80007dc:	ca03      	ldmia	r2!, {r0, r1}
 80007de:	c303      	stmia	r3!, {r0, r1}
  currDate = sDate;
 80007e0:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_RTC_Init+0x194>)
 80007e2:	2228      	movs	r2, #40	; 0x28
 80007e4:	18ba      	adds	r2, r7, r2
 80007e6:	6812      	ldr	r2, [r2, #0]
 80007e8:	601a      	str	r2, [r3, #0]
  userAlarmObj = sAlarm;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_RTC_Init+0x198>)
 80007ec:	003a      	movs	r2, r7
 80007ee:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007f0:	c313      	stmia	r3!, {r0, r1, r4}
 80007f2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007f4:	c313      	stmia	r3!, {r0, r1, r4}
 80007f6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007f8:	c313      	stmia	r3!, {r0, r1, r4}
 80007fa:	6812      	ldr	r2, [r2, #0]
 80007fc:	601a      	str	r2, [r3, #0]
  userAlarmTime = userAlarmObj.AlarmTime;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_RTC_Init+0x19c>)
 8000800:	4a09      	ldr	r2, [pc, #36]	; (8000828 <MX_RTC_Init+0x198>)
 8000802:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000804:	c313      	stmia	r3!, {r0, r1, r4}
 8000806:	ca03      	ldmia	r2!, {r0, r1}
 8000808:	c303      	stmia	r3!, {r0, r1}

  /* USER CODE END RTC_Init 2 */

}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b011      	add	sp, #68	; 0x44
 8000810:	bd90      	pop	{r4, r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	200000d0 	.word	0x200000d0
 8000818:	40002800 	.word	0x40002800
 800081c:	80800080 	.word	0x80800080
 8000820:	20000228 	.word	0x20000228
 8000824:	2000023c 	.word	0x2000023c
 8000828:	20000240 	.word	0x20000240
 800082c:	20000268 	.word	0x20000268

08000830 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b098      	sub	sp, #96	; 0x60
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000836:	2354      	movs	r3, #84	; 0x54
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	0018      	movs	r0, r3
 800083c:	230c      	movs	r3, #12
 800083e:	001a      	movs	r2, r3
 8000840:	2100      	movs	r1, #0
 8000842:	f004 fef5 	bl	8005630 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000846:	2338      	movs	r3, #56	; 0x38
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	0018      	movs	r0, r3
 800084c:	231c      	movs	r3, #28
 800084e:	001a      	movs	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f004 feed 	bl	8005630 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	0018      	movs	r0, r3
 800085a:	2334      	movs	r3, #52	; 0x34
 800085c:	001a      	movs	r2, r3
 800085e:	2100      	movs	r1, #0
 8000860:	f004 fee6 	bl	8005630 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000864:	4b45      	ldr	r3, [pc, #276]	; (800097c <MX_TIM1_Init+0x14c>)
 8000866:	4a46      	ldr	r2, [pc, #280]	; (8000980 <MX_TIM1_Init+0x150>)
 8000868:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 800086a:	4b44      	ldr	r3, [pc, #272]	; (800097c <MX_TIM1_Init+0x14c>)
 800086c:	229f      	movs	r2, #159	; 0x9f
 800086e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b42      	ldr	r3, [pc, #264]	; (800097c <MX_TIM1_Init+0x14c>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000876:	4b41      	ldr	r3, [pc, #260]	; (800097c <MX_TIM1_Init+0x14c>)
 8000878:	2263      	movs	r2, #99	; 0x63
 800087a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087c:	4b3f      	ldr	r3, [pc, #252]	; (800097c <MX_TIM1_Init+0x14c>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000882:	4b3e      	ldr	r3, [pc, #248]	; (800097c <MX_TIM1_Init+0x14c>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000888:	4b3c      	ldr	r3, [pc, #240]	; (800097c <MX_TIM1_Init+0x14c>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800088e:	4b3b      	ldr	r3, [pc, #236]	; (800097c <MX_TIM1_Init+0x14c>)
 8000890:	0018      	movs	r0, r3
 8000892:	f003 faf5 	bl	8003e80 <HAL_TIM_PWM_Init>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800089a:	f000 fe1b 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089e:	2154      	movs	r1, #84	; 0x54
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b2:	187a      	adds	r2, r7, r1
 80008b4:	4b31      	ldr	r3, [pc, #196]	; (800097c <MX_TIM1_Init+0x14c>)
 80008b6:	0011      	movs	r1, r2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f004 f84d 	bl	8004958 <HAL_TIMEx_MasterConfigSynchronization>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008c2:	f000 fe07 	bl	80014d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c6:	2138      	movs	r1, #56	; 0x38
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2260      	movs	r2, #96	; 0x60
 80008cc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008f2:	1879      	adds	r1, r7, r1
 80008f4:	4b21      	ldr	r3, [pc, #132]	; (800097c <MX_TIM1_Init+0x14c>)
 80008f6:	2204      	movs	r2, #4
 80008f8:	0018      	movs	r0, r3
 80008fa:	f003 fbf7 	bl	80040ec <HAL_TIM_PWM_ConfigChannel>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000902:	f000 fde7 	bl	80014d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2280      	movs	r2, #128	; 0x80
 8000928:	0192      	lsls	r2, r2, #6
 800092a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	0492      	lsls	r2, r2, #18
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2200      	movs	r2, #0
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2200      	movs	r2, #0
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000958:	1d3a      	adds	r2, r7, #4
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_TIM1_Init+0x14c>)
 800095c:	0011      	movs	r1, r2
 800095e:	0018      	movs	r0, r3
 8000960:	f004 f862 	bl	8004a28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000964:	1e03      	subs	r3, r0, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000968:	f000 fdb4 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <MX_TIM1_Init+0x14c>)
 800096e:	0018      	movs	r0, r3
 8000970:	f001 f850 	bl	8001a14 <HAL_TIM_MspPostInit>

}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b018      	add	sp, #96	; 0x60
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200000fc 	.word	0x200000fc
 8000980:	40012c00 	.word	0x40012c00

08000984 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_TIM16_Init+0x44>)
 800098a:	4a10      	ldr	r2, [pc, #64]	; (80009cc <MX_TIM16_Init+0x48>)
 800098c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 244;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_TIM16_Init+0x44>)
 8000990:	22f4      	movs	r2, #244	; 0xf4
 8000992:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_TIM16_Init+0x44>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_TIM16_Init+0x44>)
 800099c:	4a0c      	ldr	r2, [pc, #48]	; (80009d0 <MX_TIM16_Init+0x4c>)
 800099e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_TIM16_Init+0x44>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_TIM16_Init+0x44>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_TIM16_Init+0x44>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <MX_TIM16_Init+0x44>)
 80009b4:	0018      	movs	r0, r3
 80009b6:	f003 f998 	bl	8003cea <HAL_TIM_Base_Init>
 80009ba:	1e03      	subs	r3, r0, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80009be:	f000 fd89 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000148 	.word	0x20000148
 80009cc:	40014400 	.word	0x40014400
 80009d0:	0000ffff 	.word	0x0000ffff

080009d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_USART2_UART_Init+0x60>)
 80009da:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <MX_USART2_UART_Init+0x64>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_USART2_UART_Init+0x60>)
 80009e0:	22e1      	movs	r2, #225	; 0xe1
 80009e2:	0252      	lsls	r2, r2, #9
 80009e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_USART2_UART_Init+0x60>)
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	0152      	lsls	r2, r2, #5
 80009ec:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USART2_UART_Init+0x60>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_USART2_UART_Init+0x60>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART2_UART_Init+0x60>)
 80009fc:	220c      	movs	r2, #12
 80009fe:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USART2_UART_Init+0x60>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USART2_UART_Init+0x60>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USART2_UART_Init+0x60>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USART2_UART_Init+0x60>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USART2_UART_Init+0x60>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <MX_USART2_UART_Init+0x60>)
 8000a20:	0018      	movs	r0, r3
 8000a22:	f004 f8a7 	bl	8004b74 <HAL_UART_Init>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000a2a:	f000 fd53 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000194 	.word	0x20000194
 8000a38:	40004400 	.word	0x40004400

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b08b      	sub	sp, #44	; 0x2c
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	2414      	movs	r4, #20
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	0018      	movs	r0, r3
 8000a48:	2314      	movs	r3, #20
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f004 fdef 	bl	8005630 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b67      	ldr	r3, [pc, #412]	; (8000bf0 <MX_GPIO_Init+0x1b4>)
 8000a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a56:	4b66      	ldr	r3, [pc, #408]	; (8000bf0 <MX_GPIO_Init+0x1b4>)
 8000a58:	2104      	movs	r1, #4
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5e:	4b64      	ldr	r3, [pc, #400]	; (8000bf0 <MX_GPIO_Init+0x1b4>)
 8000a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a62:	2204      	movs	r2, #4
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a6a:	4b61      	ldr	r3, [pc, #388]	; (8000bf0 <MX_GPIO_Init+0x1b4>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a6e:	4b60      	ldr	r3, [pc, #384]	; (8000bf0 <MX_GPIO_Init+0x1b4>)
 8000a70:	2120      	movs	r1, #32
 8000a72:	430a      	orrs	r2, r1
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
 8000a76:	4b5e      	ldr	r3, [pc, #376]	; (8000bf0 <MX_GPIO_Init+0x1b4>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7a:	2220      	movs	r2, #32
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b5b      	ldr	r3, [pc, #364]	; (8000bf0 <MX_GPIO_Init+0x1b4>)
 8000a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a86:	4b5a      	ldr	r3, [pc, #360]	; (8000bf0 <MX_GPIO_Init+0x1b4>)
 8000a88:	2101      	movs	r1, #1
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a8e:	4b58      	ldr	r3, [pc, #352]	; (8000bf0 <MX_GPIO_Init+0x1b4>)
 8000a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a92:	2201      	movs	r2, #1
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b55      	ldr	r3, [pc, #340]	; (8000bf0 <MX_GPIO_Init+0x1b4>)
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a9e:	4b54      	ldr	r3, [pc, #336]	; (8000bf0 <MX_GPIO_Init+0x1b4>)
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8000aa6:	4b52      	ldr	r3, [pc, #328]	; (8000bf0 <MX_GPIO_Init+0x1b4>)
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aaa:	2202      	movs	r2, #2
 8000aac:	4013      	ands	r3, r2
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Output_Pin|Shift_Store_Clock_Pin|Shift_Data_Clock_Pin|Shift_Master_Clear_Pin
 8000ab2:	23f9      	movs	r3, #249	; 0xf9
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	484f      	ldr	r0, [pc, #316]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	0019      	movs	r1, r3
 8000abc:	f001 fc2f 	bl	800231e <HAL_GPIO_WritePin>
                          |AM_PM_LED_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ac0:	4b4d      	ldr	r3, [pc, #308]	; (8000bf8 <MX_GPIO_Init+0x1bc>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2140      	movs	r1, #64	; 0x40
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f001 fc29 	bl	800231e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Shift_Data_In_GPIO_Port, Shift_Data_In_Pin, GPIO_PIN_RESET);
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	0219      	lsls	r1, r3, #8
 8000ad0:	23a0      	movs	r3, #160	; 0xa0
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f001 fc21 	bl	800231e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	2204      	movs	r2, #4
 8000ae0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2288      	movs	r2, #136	; 0x88
 8000ae6:	0352      	lsls	r2, r2, #13
 8000ae8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	4a42      	ldr	r2, [pc, #264]	; (8000bfc <MX_GPIO_Init+0x1c0>)
 8000af4:	0019      	movs	r1, r3
 8000af6:	0010      	movs	r0, r2
 8000af8:	f001 fa90 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_Button_Pin Alarm_Set_Button_Pin Hour_Set_Button_Pin Alarm_Enable_Button_Pin
                           Minute_Set_Button_Pin */
  GPIO_InitStruct.Pin = Display_Button_Pin|Alarm_Set_Button_Pin|Hour_Set_Button_Pin|Alarm_Enable_Button_Pin
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	4a40      	ldr	r2, [pc, #256]	; (8000c00 <MX_GPIO_Init+0x1c4>)
 8000b00:	601a      	str	r2, [r3, #0]
                          |Minute_Set_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2284      	movs	r2, #132	; 0x84
 8000b06:	0392      	lsls	r2, r2, #14
 8000b08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	193a      	adds	r2, r7, r4
 8000b12:	23a0      	movs	r3, #160	; 0xa0
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	0011      	movs	r1, r2
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f001 fa7f 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Output_Pin Shift_Store_Clock_Pin Shift_Data_Clock_Pin Shift_Master_Clear_Pin
                           AM_PM_LED_Pin Alarm_LED_Pin */
  GPIO_InitStruct.Pin = Buzzer_Output_Pin|Shift_Store_Clock_Pin|Shift_Data_Clock_Pin|Shift_Master_Clear_Pin
 8000b1e:	0021      	movs	r1, r4
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	22f9      	movs	r2, #249	; 0xf9
 8000b24:	0052      	lsls	r2, r2, #1
 8000b26:	601a      	str	r2, [r3, #0]
                          |AM_PM_LED_Pin|Alarm_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	000c      	movs	r4, r1
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	4a2d      	ldr	r2, [pc, #180]	; (8000bf4 <MX_GPIO_Init+0x1b8>)
 8000b40:	0019      	movs	r1, r3
 8000b42:	0010      	movs	r0, r2
 8000b44:	f001 fa6a 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	2240      	movs	r2, #64	; 0x40
 8000b4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	193b      	adds	r3, r7, r4
 8000b50:	2201      	movs	r2, #1
 8000b52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	4a25      	ldr	r2, [pc, #148]	; (8000bf8 <MX_GPIO_Init+0x1bc>)
 8000b64:	0019      	movs	r1, r3
 8000b66:	0010      	movs	r0, r2
 8000b68:	f001 fa58 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : Snooze_Button_Pin */
  GPIO_InitStruct.Pin = Snooze_Button_Pin;
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	2280      	movs	r2, #128	; 0x80
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Snooze_Button_GPIO_Port, &GPIO_InitStruct);
 8000b80:	193a      	adds	r2, r7, r4
 8000b82:	23a0      	movs	r3, #160	; 0xa0
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	0011      	movs	r1, r2
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f001 fa47 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : Shift_Data_In_Pin */
  GPIO_InitStruct.Pin = Shift_Data_In_Pin;
 8000b8e:	0021      	movs	r1, r4
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2280      	movs	r2, #128	; 0x80
 8000b94:	0212      	lsls	r2, r2, #8
 8000b96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Shift_Data_In_GPIO_Port, &GPIO_InitStruct);
 8000baa:	187a      	adds	r2, r7, r1
 8000bac:	23a0      	movs	r3, #160	; 0xa0
 8000bae:	05db      	lsls	r3, r3, #23
 8000bb0:	0011      	movs	r1, r2
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f001 fa32 	bl	800201c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2101      	movs	r1, #1
 8000bbc:	2005      	movs	r0, #5
 8000bbe:	f001 f9fb 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000bc2:	2005      	movs	r0, #5
 8000bc4:	f001 fa0d 	bl	8001fe2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2006      	movs	r0, #6
 8000bce:	f001 f9f3 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000bd2:	2006      	movs	r0, #6
 8000bd4:	f001 fa05 	bl	8001fe2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2007      	movs	r0, #7
 8000bde:	f001 f9eb 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000be2:	2007      	movs	r0, #7
 8000be4:	f001 f9fd 	bl	8001fe2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b00b      	add	sp, #44	; 0x2c
 8000bee:	bd90      	pop	{r4, r7, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	50000400 	.word	0x50000400
 8000bf8:	50000800 	.word	0x50000800
 8000bfc:	50001400 	.word	0x50001400
 8000c00:	00001063 	.word	0x00001063

08000c04 <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8000c10:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <updateAndDisplayTime+0x50>)
 8000c12:	4911      	ldr	r1, [pc, #68]	; (8000c58 <updateAndDisplayTime+0x54>)
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <updateAndDisplayTime+0x58>)
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff fc20 	bl	800045c <getRTCTime>
	sevSeg_updateDigits(&currTime);
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <updateAndDisplayTime+0x54>)
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f000 fd76 	bl	8001710 <sevSeg_updateDigits>

	if(currTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <updateAndDisplayTime+0x54>)
 8000c26:	78db      	ldrb	r3, [r3, #3]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d106      	bne.n	8000c3a <updateAndDisplayTime+0x36>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <updateAndDisplayTime+0x5c>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	0018      	movs	r0, r3
 8000c34:	f001 fb73 	bl	800231e <HAL_GPIO_WritePin>
 8000c38:	e005      	b.n	8000c46 <updateAndDisplayTime+0x42>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <updateAndDisplayTime+0x5c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	0018      	movs	r0, r3
 8000c42:	f001 fb6c 	bl	800231e <HAL_GPIO_WritePin>
	}

	return halRet;
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]

}
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b002      	add	sp, #8
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	2000023c 	.word	0x2000023c
 8000c58:	20000228 	.word	0x20000228
 8000c5c:	200000d0 	.word	0x200000d0
 8000c60:	50000400 	.word	0x50000400

08000c64 <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]

	getUserAlarmTime(&hrtc, &userAlarmTime);
 8000c70:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <updateAndDisplayAlarm+0x50>)
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <updateAndDisplayAlarm+0x54>)
 8000c74:	0011      	movs	r1, r2
 8000c76:	0018      	movs	r0, r3
 8000c78:	f7ff fc06 	bl	8000488 <getUserAlarmTime>
	sevSeg_updateDigits(&userAlarmTime);
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <updateAndDisplayAlarm+0x50>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 fd46 	bl	8001710 <sevSeg_updateDigits>

	if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <updateAndDisplayAlarm+0x50>)
 8000c86:	78db      	ldrb	r3, [r3, #3]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d106      	bne.n	8000c9a <updateAndDisplayAlarm+0x36>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <updateAndDisplayAlarm+0x58>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	0018      	movs	r0, r3
 8000c94:	f001 fb43 	bl	800231e <HAL_GPIO_WritePin>
 8000c98:	e005      	b.n	8000ca6 <updateAndDisplayAlarm+0x42>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <updateAndDisplayAlarm+0x58>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f001 fb3c 	bl	800231e <HAL_GPIO_WritePin>
	}

	return halRet;
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]

}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	20000268 	.word	0x20000268
 8000cb8:	200000d0 	.word	0x200000d0
 8000cbc:	50000400 	.word	0x50000400

08000cc0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b08d      	sub	sp, #52	; 0x34
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

	  printf("Enter current time minute increment interrupt\n\r");
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <HAL_RTC_AlarmAEventCallback+0xb8>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f004 fcb8 	bl	8005640 <iprintf>

	  RTC_AlarmTypeDef sAlarm;
	  getUserAlarmObj(hrtc, &sAlarm);
 8000cd0:	2408      	movs	r4, #8
 8000cd2:	193a      	adds	r2, r7, r4
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f7ff fbec 	bl	80004b6 <getUserAlarmObj>
	  getRTCTime(hrtc, &currTime, &currDate);
 8000cde:	4a27      	ldr	r2, [pc, #156]	; (8000d7c <HAL_RTC_AlarmAEventCallback+0xbc>)
 8000ce0:	4927      	ldr	r1, [pc, #156]	; (8000d80 <HAL_RTC_AlarmAEventCallback+0xc0>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff fbb9 	bl	800045c <getRTCTime>

	  if(sAlarm.AlarmTime.Minutes>58) {
 8000cea:	0022      	movs	r2, r4
 8000cec:	18bb      	adds	r3, r7, r2
 8000cee:	785b      	ldrb	r3, [r3, #1]
 8000cf0:	2b3a      	cmp	r3, #58	; 0x3a
 8000cf2:	d907      	bls.n	8000d04 <HAL_RTC_AlarmAEventCallback+0x44>
		sAlarm.AlarmTime.Minutes=0;
 8000cf4:	18bb      	adds	r3, r7, r2
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	705a      	strb	r2, [r3, #1]
		printf("Reset alarm time\n\r");
 8000cfa:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <HAL_RTC_AlarmAEventCallback+0xc4>)
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f004 fc9f 	bl	8005640 <iprintf>
 8000d02:	e006      	b.n	8000d12 <HAL_RTC_AlarmAEventCallback+0x52>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8000d04:	2108      	movs	r1, #8
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	785b      	ldrb	r3, [r3, #1]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	2308      	movs	r3, #8
 8000d16:	18f9      	adds	r1, r7, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f002 fca5 	bl	800366c <HAL_RTC_SetAlarm_IT>
 8000d22:	1e03      	subs	r3, r0, #0
 8000d24:	d1f6      	bne.n	8000d14 <HAL_RTC_AlarmAEventCallback+0x54>

	  updateAndDisplayTime();
 8000d26:	f7ff ff6d 	bl	8000c04 <updateAndDisplayTime>

	  printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_RTC_AlarmAEventCallback+0xc0>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	0019      	movs	r1, r3
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <HAL_RTC_AlarmAEventCallback+0xc0>)
 8000d32:	785b      	ldrb	r3, [r3, #1]
 8000d34:	001a      	movs	r2, r3
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_RTC_AlarmAEventCallback+0xc0>)
 8000d38:	789b      	ldrb	r3, [r3, #2]
 8000d3a:	4813      	ldr	r0, [pc, #76]	; (8000d88 <HAL_RTC_AlarmAEventCallback+0xc8>)
 8000d3c:	f004 fc80 	bl	8005640 <iprintf>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_RTC_AlarmAEventCallback+0xcc>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d013      	beq.n	8000d70 <HAL_RTC_AlarmAEventCallback+0xb0>
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_RTC_AlarmAEventCallback+0xd0>)
 8000d4a:	781a      	ldrb	r2, [r3, #0]
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_RTC_AlarmAEventCallback+0xc0>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d10d      	bne.n	8000d70 <HAL_RTC_AlarmAEventCallback+0xb0>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_RTC_AlarmAEventCallback+0xd0>)
 8000d56:	785a      	ldrb	r2, [r3, #1]
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_RTC_AlarmAEventCallback+0xc0>)
 8000d5a:	785b      	ldrb	r3, [r3, #1]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d107      	bne.n	8000d70 <HAL_RTC_AlarmAEventCallback+0xb0>
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_RTC_AlarmAEventCallback+0xd0>)
 8000d62:	78da      	ldrb	r2, [r3, #3]
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_RTC_AlarmAEventCallback+0xc0>)
 8000d66:	78db      	ldrb	r3, [r3, #3]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d101      	bne.n	8000d70 <HAL_RTC_AlarmAEventCallback+0xb0>
		  userAlarmBeep();
 8000d6c:	f000 f812 	bl	8000d94 <userAlarmBeep>
	  }

}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b00d      	add	sp, #52	; 0x34
 8000d76:	bd90      	pop	{r4, r7, pc}
 8000d78:	0800664c 	.word	0x0800664c
 8000d7c:	2000023c 	.word	0x2000023c
 8000d80:	20000228 	.word	0x20000228
 8000d84:	0800667c 	.word	0x0800667c
 8000d88:	08006690 	.word	0x08006690
 8000d8c:	200000cd 	.word	0x200000cd
 8000d90:	20000268 	.word	0x20000268

08000d94 <userAlarmBeep>:
//		userAlarmBeep();				// Enter beeping alarm loop
//	}
//
//}

void userAlarmBeep() {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8000d9a:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <userAlarmBeep+0xac>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f003 f848 	bl	8003e34 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8000da4:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <userAlarmBeep+0xac>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	0018      	movs	r0, r3
 8000daa:	f002 fff7 	bl	8003d9c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8000dae:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <userAlarmBeep+0xac>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8000db8:	1cfb      	adds	r3, r7, #3
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 8000dbe:	f7ff ff21 	bl	8000c04 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <userAlarmBeep+0xac>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <userAlarmBeep+0xb0>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d923      	bls.n	8000e1c <userAlarmBeep+0x88>

			sevSeg_setIntensity(timerPWM, sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <userAlarmBeep+0xb4>)
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	1cfb      	adds	r3, r7, #3
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <userAlarmBeep+0xb8>)
 8000dde:	5cd3      	ldrb	r3, [r2, r3]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	0019      	movs	r1, r3
 8000de4:	f000 fd38 	bl	8001858 <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(GPIOB, buzzerPin);					// Toggle Buzzer
 8000de8:	2202      	movs	r2, #2
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <userAlarmBeep+0xbc>)
 8000dec:	0011      	movs	r1, r2
 8000dee:	0018      	movs	r0, r3
 8000df0:	f001 fab2 	bl	8002358 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <userAlarmBeep+0xac>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfc:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8000dfe:	1cfb      	adds	r3, r7, #3
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	1e5a      	subs	r2, r3, #1
 8000e04:	4193      	sbcs	r3, r2
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4053      	eors	r3, r2
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	001a      	movs	r2, r3
 8000e10:	1cfb      	adds	r3, r7, #3
 8000e12:	701a      	strb	r2, [r3, #0]
 8000e14:	781a      	ldrb	r2, [r3, #0]
 8000e16:	2101      	movs	r1, #1
 8000e18:	400a      	ands	r2, r1
 8000e1a:	701a      	strb	r2, [r3, #0]

			//printf("Display Blink = %u\n\r", displayBlink);

		}

	} while(capTouchTrigger(snoozeButtonPin));
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	011b      	lsls	r3, r3, #4
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	0018      	movs	r0, r3
 8000e24:	f7ff fb57 	bl	80004d6 <capTouchTrigger>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d1c8      	bne.n	8000dbe <userAlarmBeep+0x2a>

	HAL_TIM_Base_Stop(timerDelay);
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <userAlarmBeep+0xac>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	0018      	movs	r0, r3
 8000e32:	f002 ffff 	bl	8003e34 <HAL_TIM_Base_Stop>

}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	20000024 	.word	0x20000024
 8000e44:	00007ffe 	.word	0x00007ffe
 8000e48:	20000020 	.word	0x20000020
 8000e4c:	08006998 	.word	0x08006998
 8000e50:	50000400 	.word	0x50000400

08000e54 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000e54:	b5b0      	push	{r4, r5, r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	1dbb      	adds	r3, r7, #6
 8000e5e:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8000e60:	2201      	movs	r2, #1
 8000e62:	1dbb      	adds	r3, r7, #6
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d113      	bne.n	8000e92 <HAL_GPIO_EXTI_Falling_Callback+0x3e>
		halRet = displayButtonISR();
 8000e6a:	250f      	movs	r5, #15
 8000e6c:	197c      	adds	r4, r7, r5
 8000e6e:	f000 f88f 	bl	8000f90 <displayButtonISR>
 8000e72:	0003      	movs	r3, r0
 8000e74:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000e76:	197b      	adds	r3, r7, r5
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d004      	beq.n	8000e88 <HAL_GPIO_EXTI_Falling_Callback+0x34>
			printf("Error toggling display.\n\r");
 8000e7e:	4b3a      	ldr	r3, [pc, #232]	; (8000f68 <HAL_GPIO_EXTI_Falling_Callback+0x114>)
 8000e80:	0018      	movs	r0, r3
 8000e82:	f004 fbdd 	bl	8005640 <iprintf>
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8000e86:	e06a      	b.n	8000f5e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Display intensity toggled.\n\r");
 8000e88:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <HAL_GPIO_EXTI_Falling_Callback+0x118>)
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f004 fbd8 	bl	8005640 <iprintf>
}
 8000e90:	e065      	b.n	8000f5e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8000e92:	2240      	movs	r2, #64	; 0x40
 8000e94:	1dbb      	adds	r3, r7, #6
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d113      	bne.n	8000ec4 <HAL_GPIO_EXTI_Falling_Callback+0x70>
		halRet = alarmEnableISR();
 8000e9c:	250f      	movs	r5, #15
 8000e9e:	197c      	adds	r4, r7, r5
 8000ea0:	f000 f8b2 	bl	8001008 <alarmEnableISR>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000ea8:	197b      	adds	r3, r7, r5
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d004      	beq.n	8000eba <HAL_GPIO_EXTI_Falling_Callback+0x66>
			printf("Error toggling user alarm.\n\r");
 8000eb0:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <HAL_GPIO_EXTI_Falling_Callback+0x11c>)
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f004 fbc4 	bl	8005640 <iprintf>
}
 8000eb8:	e051      	b.n	8000f5e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm toggled.\n\r");
 8000eba:	4b2e      	ldr	r3, [pc, #184]	; (8000f74 <HAL_GPIO_EXTI_Falling_Callback+0x120>)
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f004 fbbf 	bl	8005640 <iprintf>
}
 8000ec2:	e04c      	b.n	8000f5e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	1dbb      	adds	r3, r7, #6
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d113      	bne.n	8000ef6 <HAL_GPIO_EXTI_Falling_Callback+0xa2>
		halRet = alarmSetISR();
 8000ece:	250f      	movs	r5, #15
 8000ed0:	197c      	adds	r4, r7, r5
 8000ed2:	f000 f8e7 	bl	80010a4 <alarmSetISR>
 8000ed6:	0003      	movs	r3, r0
 8000ed8:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000eda:	197b      	adds	r3, r7, r5
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d004      	beq.n	8000eec <HAL_GPIO_EXTI_Falling_Callback+0x98>
			printf("Error setting user alarm.\n\r");
 8000ee2:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <HAL_GPIO_EXTI_Falling_Callback+0x124>)
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f004 fbab 	bl	8005640 <iprintf>
}
 8000eea:	e038      	b.n	8000f5e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm set.\n\r");
 8000eec:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <HAL_GPIO_EXTI_Falling_Callback+0x128>)
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f004 fba6 	bl	8005640 <iprintf>
}
 8000ef4:	e033      	b.n	8000f5e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == hourSetButtonPin) {
 8000ef6:	2220      	movs	r2, #32
 8000ef8:	1dbb      	adds	r3, r7, #6
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d113      	bne.n	8000f28 <HAL_GPIO_EXTI_Falling_Callback+0xd4>
		halRet = hourSetISR();
 8000f00:	250f      	movs	r5, #15
 8000f02:	197c      	adds	r4, r7, r5
 8000f04:	f000 f960 	bl	80011c8 <hourSetISR>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000f0c:	197b      	adds	r3, r7, r5
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <HAL_GPIO_EXTI_Falling_Callback+0xca>
			printf("Error incrementing hour.\n\r");
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 8000f16:	0018      	movs	r0, r3
 8000f18:	f004 fb92 	bl	8005640 <iprintf>
}
 8000f1c:	e01f      	b.n	8000f5e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Hour increment ISR success.\n\r");
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <HAL_GPIO_EXTI_Falling_Callback+0x130>)
 8000f20:	0018      	movs	r0, r3
 8000f22:	f004 fb8d 	bl	8005640 <iprintf>
}
 8000f26:	e01a      	b.n	8000f5e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	015b      	lsls	r3, r3, #5
 8000f2c:	1dba      	adds	r2, r7, #6
 8000f2e:	8812      	ldrh	r2, [r2, #0]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d113      	bne.n	8000f5c <HAL_GPIO_EXTI_Falling_Callback+0x108>
		halRet = minuteSetISR();
 8000f34:	250f      	movs	r5, #15
 8000f36:	197c      	adds	r4, r7, r5
 8000f38:	f000 f9f2 	bl	8001320 <minuteSetISR>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000f40:	197b      	adds	r3, r7, r5
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d004      	beq.n	8000f52 <HAL_GPIO_EXTI_Falling_Callback+0xfe>
			printf("Error incrementing minute.\n\r");
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_GPIO_EXTI_Falling_Callback+0x134>)
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f004 fb78 	bl	8005640 <iprintf>
}
 8000f50:	e005      	b.n	8000f5e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Minute increment ISR success.\n\r");
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_GPIO_EXTI_Falling_Callback+0x138>)
 8000f54:	0018      	movs	r0, r3
 8000f56:	f004 fb73 	bl	8005640 <iprintf>
}
 8000f5a:	e000      	b.n	8000f5e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
		__NOP();
 8000f5c:	46c0      	nop			; (mov r8, r8)
}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b004      	add	sp, #16
 8000f64:	bdb0      	pop	{r4, r5, r7, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	080066b0 	.word	0x080066b0
 8000f6c:	080066cc 	.word	0x080066cc
 8000f70:	080066ec 	.word	0x080066ec
 8000f74:	0800670c 	.word	0x0800670c
 8000f78:	08006724 	.word	0x08006724
 8000f7c:	08006740 	.word	0x08006740
 8000f80:	08006754 	.word	0x08006754
 8000f84:	08006770 	.word	0x08006770
 8000f88:	08006790 	.word	0x08006790
 8000f8c:	080067b0 	.word	0x080067b0

08000f90 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0

	printf("Entered display toggle ISR\n\r");
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <displayButtonISR+0x64>)
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f004 fb51 	bl	8005640 <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 8000fa4:	f7ff fe2e 	bl	8000c04 <updateAndDisplayTime>

	sevSeg_setIntensity(timerPWM, sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <displayButtonISR+0x68>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <displayButtonISR+0x6c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <displayButtonISR+0x70>)
 8000fb4:	5c5b      	ldrb	r3, [r3, r1]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	0019      	movs	r1, r3
 8000fba:	0010      	movs	r0, r2
 8000fbc:	f000 fc4c 	bl	8001858 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <displayButtonISR+0x6c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d909      	bls.n	8000fdc <displayButtonISR+0x4c>
		displayToggle = 0;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <displayButtonISR+0x6c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
 8000fce:	2180      	movs	r1, #128	; 0x80
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <displayButtonISR+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f001 f9a2 	bl	800231e <HAL_GPIO_WritePin>
 8000fda:	e005      	b.n	8000fe8 <displayButtonISR+0x58>
	} else {
		displayToggle++;
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <displayButtonISR+0x6c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <displayButtonISR+0x6c>)
 8000fe6:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8000fe8:	1dfb      	adds	r3, r7, #7
 8000fea:	781b      	ldrb	r3, [r3, #0]

}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	080067d0 	.word	0x080067d0
 8000ff8:	20000020 	.word	0x20000020
 8000ffc:	200000cc 	.word	0x200000cc
 8001000:	08006998 	.word	0x08006998
 8001004:	50000400 	.word	0x50000400

08001008 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

	printf("Entered alarm toggle ISR\n\r");
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <alarmEnableISR+0x84>)
 8001010:	0018      	movs	r0, r3
 8001012:	f004 fb15 	bl	8005640 <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 800101c:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <alarmEnableISR+0x88>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2201      	movs	r2, #1
 8001022:	4053      	eors	r3, r2
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d015      	beq.n	8001056 <alarmEnableISR+0x4e>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_SET);			// Turn on alarm LED
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4819      	ldr	r0, [pc, #100]	; (8001094 <alarmEnableISR+0x8c>)
 8001030:	2201      	movs	r2, #1
 8001032:	0019      	movs	r1, r3
 8001034:	f001 f973 	bl	800231e <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <alarmEnableISR+0x88>)
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]

		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <alarmEnableISR+0x90>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	0019      	movs	r1, r3
								userAlarmTime.Minutes, userAlarmTime.Seconds);
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <alarmEnableISR+0x90>)
 8001046:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8001048:	001a      	movs	r2, r3
								userAlarmTime.Minutes, userAlarmTime.Seconds);
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <alarmEnableISR+0x90>)
 800104c:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 800104e:	4813      	ldr	r0, [pc, #76]	; (800109c <alarmEnableISR+0x94>)
 8001050:	f004 faf6 	bl	8005640 <iprintf>
 8001054:	e013      	b.n	800107e <alarmEnableISR+0x76>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <alarmEnableISR+0x88>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00e      	beq.n	800107c <alarmEnableISR+0x74>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_RESET);			// Turn off alarm LED
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	480c      	ldr	r0, [pc, #48]	; (8001094 <alarmEnableISR+0x8c>)
 8001064:	2200      	movs	r2, #0
 8001066:	0019      	movs	r1, r3
 8001068:	f001 f959 	bl	800231e <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <alarmEnableISR+0x88>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]

		printf("User alarm disabled.\n\r");
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <alarmEnableISR+0x98>)
 8001074:	0018      	movs	r0, r3
 8001076:	f004 fae3 	bl	8005640 <iprintf>
 800107a:	e000      	b.n	800107e <alarmEnableISR+0x76>
	}
	else {
		__NOP();							//Code should never reach here.
 800107c:	46c0      	nop			; (mov r8, r8)
	}

	return halRet;
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]

}
 8001082:	0018      	movs	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	b002      	add	sp, #8
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	080067f0 	.word	0x080067f0
 8001090:	200000cd 	.word	0x200000cd
 8001094:	50000400 	.word	0x50000400
 8001098:	20000268 	.word	0x20000268
 800109c:	0800680c 	.word	0x0800680c
 80010a0:	0800682c 	.word	0x0800682c

080010a4 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0

	printf("Enter user alarm set ISR.\n\r");
 80010aa:	4b3e      	ldr	r3, [pc, #248]	; (80011a4 <alarmSetISR+0x100>)
 80010ac:	0018      	movs	r0, r3
 80010ae:	f004 fac7 	bl	8005640 <iprintf>

	getUserAlarmTime(&hrtc, &userAlarmTime);
 80010b2:	4a3d      	ldr	r2, [pc, #244]	; (80011a8 <alarmSetISR+0x104>)
 80010b4:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <alarmSetISR+0x108>)
 80010b6:	0011      	movs	r1, r2
 80010b8:	0018      	movs	r0, r3
 80010ba:	f7ff f9e5 	bl	8000488 <getUserAlarmTime>
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 80010be:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <alarmSetISR+0x104>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	0019      	movs	r1, r3
			userAlarmTime.Minutes, userAlarmTime.Seconds);
 80010c4:	4b38      	ldr	r3, [pc, #224]	; (80011a8 <alarmSetISR+0x104>)
 80010c6:	785b      	ldrb	r3, [r3, #1]
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 80010c8:	001a      	movs	r2, r3
			userAlarmTime.Minutes, userAlarmTime.Seconds);
 80010ca:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <alarmSetISR+0x104>)
 80010cc:	789b      	ldrb	r3, [r3, #2]
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 80010ce:	4838      	ldr	r0, [pc, #224]	; (80011b0 <alarmSetISR+0x10c>)
 80010d0:	f004 fab6 	bl	8005640 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 80010d4:	1cbb      	adds	r3, r7, #2
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Stop(timerDelay);
 80010da:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <alarmSetISR+0x110>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	0018      	movs	r0, r3
 80010e0:	f002 fea8 	bl	8003e34 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 80010e4:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <alarmSetISR+0x110>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	0018      	movs	r0, r3
 80010ea:	f002 fe57 	bl	8003d9c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80010ee:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <alarmSetISR+0x110>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80010f8:	1cfb      	adds	r3, r7, #3
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]

	do {											// while the alarm set button is not held down, blink display.

		updateAndDisplayAlarm();
 80010fe:	f7ff fdb1 	bl	8000c64 <updateAndDisplayAlarm>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 8001102:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <alarmSetISR+0x110>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	1ad2      	subs	r2, r2, r3
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	429a      	cmp	r2, r3
 8001114:	d31d      	bcc.n	8001152 <alarmSetISR+0xae>

			sevSeg_setIntensity (timerPWM, sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8001116:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <alarmSetISR+0x114>)
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	1cfb      	adds	r3, r7, #3
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4a27      	ldr	r2, [pc, #156]	; (80011bc <alarmSetISR+0x118>)
 8001120:	5cd3      	ldrb	r3, [r2, r3]
 8001122:	b29b      	uxth	r3, r3
 8001124:	0019      	movs	r1, r3
 8001126:	f000 fb97 	bl	8001858 <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 800112a:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <alarmSetISR+0x110>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	607b      	str	r3, [r7, #4]
			displayBlink = !displayBlink;
 8001134:	1cfb      	adds	r3, r7, #3
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	1e5a      	subs	r2, r3, #1
 800113a:	4193      	sbcs	r3, r2
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2201      	movs	r2, #1
 8001140:	4053      	eors	r3, r2
 8001142:	b2db      	uxtb	r3, r3
 8001144:	001a      	movs	r2, r3
 8001146:	1cfb      	adds	r3, r7, #3
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	781a      	ldrb	r2, [r3, #0]
 800114c:	2101      	movs	r1, #1
 800114e:	400a      	ands	r2, r1
 8001150:	701a      	strb	r2, [r3, #0]

		}

	}while(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == GPIO_PIN_RESET);
 8001152:	2202      	movs	r2, #2
 8001154:	23a0      	movs	r3, #160	; 0xa0
 8001156:	05db      	lsls	r3, r3, #23
 8001158:	0011      	movs	r1, r2
 800115a:	0018      	movs	r0, r3
 800115c:	f001 f8c2 	bl	80022e4 <HAL_GPIO_ReadPin>
 8001160:	1e03      	subs	r3, r0, #0
 8001162:	d0cc      	beq.n	80010fe <alarmSetISR+0x5a>

	sevSeg_setIntensity(timerPWM, sevSeg_intensityDuty[1]);			// Turn display back to full intensity
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <alarmSetISR+0x114>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	225a      	movs	r2, #90	; 0x5a
 800116a:	b292      	uxth	r2, r2
 800116c:	0011      	movs	r1, r2
 800116e:	0018      	movs	r0, r3
 8001170:	f000 fb72 	bl	8001858 <sevSeg_setIntensity>

	HAL_TIM_Base_Stop(timerDelay);
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <alarmSetISR+0x110>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	0018      	movs	r0, r3
 800117a:	f002 fe5b 	bl	8003e34 <HAL_TIM_Base_Stop>

	updateAndDisplayTime();
 800117e:	f7ff fd41 	bl	8000c04 <updateAndDisplayTime>
	printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <alarmSetISR+0x11c>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	0019      	movs	r1, r3
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <alarmSetISR+0x11c>)
 800118a:	785b      	ldrb	r3, [r3, #1]
 800118c:	001a      	movs	r2, r3
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <alarmSetISR+0x11c>)
 8001190:	789b      	ldrb	r3, [r3, #2]
 8001192:	480c      	ldr	r0, [pc, #48]	; (80011c4 <alarmSetISR+0x120>)
 8001194:	f004 fa54 	bl	8005640 <iprintf>

	return halRet;
 8001198:	1cbb      	adds	r3, r7, #2
 800119a:	781b      	ldrb	r3, [r3, #0]

}
 800119c:	0018      	movs	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	b002      	add	sp, #8
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	08006844 	.word	0x08006844
 80011a8:	20000268 	.word	0x20000268
 80011ac:	200000d0 	.word	0x200000d0
 80011b0:	08006860 	.word	0x08006860
 80011b4:	20000024 	.word	0x20000024
 80011b8:	20000020 	.word	0x20000020
 80011bc:	08006998 	.word	0x08006998
 80011c0:	20000228 	.word	0x20000228
 80011c4:	08006888 	.word	0x08006888

080011c8 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0

	printf("Entered hour set ISR.\n\r");
 80011ce:	4b4c      	ldr	r3, [pc, #304]	; (8001300 <hourSetISR+0x138>)
 80011d0:	0018      	movs	r0, r3
 80011d2:	f004 fa35 	bl	8005640 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) != GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 80011dc:	2202      	movs	r2, #2
 80011de:	23a0      	movs	r3, #160	; 0xa0
 80011e0:	05db      	lsls	r3, r3, #23
 80011e2:	0011      	movs	r1, r2
 80011e4:	0018      	movs	r0, r3
 80011e6:	f001 f87d 	bl	80022e4 <HAL_GPIO_ReadPin>
 80011ea:	0003      	movs	r3, r0
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d042      	beq.n	8001276 <hourSetISR+0xae>

		getUserAlarmTime(&hrtc, &userAlarmTime);
 80011f0:	4a44      	ldr	r2, [pc, #272]	; (8001304 <hourSetISR+0x13c>)
 80011f2:	4b45      	ldr	r3, [pc, #276]	; (8001308 <hourSetISR+0x140>)
 80011f4:	0011      	movs	r1, r2
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7ff f946 	bl	8000488 <getUserAlarmTime>

		if(userAlarmTime.Hours >= 12) {
 80011fc:	4b41      	ldr	r3, [pc, #260]	; (8001304 <hourSetISR+0x13c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b0b      	cmp	r3, #11
 8001202:	d90e      	bls.n	8001222 <hourSetISR+0x5a>
			userAlarmTime.Hours = 1;
 8001204:	4b3f      	ldr	r3, [pc, #252]	; (8001304 <hourSetISR+0x13c>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800120a:	4b3e      	ldr	r3, [pc, #248]	; (8001304 <hourSetISR+0x13c>)
 800120c:	78db      	ldrb	r3, [r3, #3]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d103      	bne.n	800121a <hourSetISR+0x52>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001212:	4b3c      	ldr	r3, [pc, #240]	; (8001304 <hourSetISR+0x13c>)
 8001214:	2201      	movs	r2, #1
 8001216:	70da      	strb	r2, [r3, #3]
 8001218:	e00f      	b.n	800123a <hourSetISR+0x72>
			} else {
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800121a:	4b3a      	ldr	r3, [pc, #232]	; (8001304 <hourSetISR+0x13c>)
 800121c:	2200      	movs	r2, #0
 800121e:	70da      	strb	r2, [r3, #3]
 8001220:	e00b      	b.n	800123a <hourSetISR+0x72>
			}
		}
		else if(userAlarmTime.Hours < 12) {
 8001222:	4b38      	ldr	r3, [pc, #224]	; (8001304 <hourSetISR+0x13c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b0b      	cmp	r3, #11
 8001228:	d806      	bhi.n	8001238 <hourSetISR+0x70>
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 800122a:	4b36      	ldr	r3, [pc, #216]	; (8001304 <hourSetISR+0x13c>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4b34      	ldr	r3, [pc, #208]	; (8001304 <hourSetISR+0x13c>)
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	e000      	b.n	800123a <hourSetISR+0x72>
		}
		else {
			__NOP();
 8001238:	46c0      	nop			; (mov r8, r8)
		}

		userAlarmObj.AlarmTime = userAlarmTime;
 800123a:	4b34      	ldr	r3, [pc, #208]	; (800130c <hourSetISR+0x144>)
 800123c:	4a31      	ldr	r2, [pc, #196]	; (8001304 <hourSetISR+0x13c>)
 800123e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001240:	c313      	stmia	r3!, {r0, r1, r4}
 8001242:	ca03      	ldmia	r2!, {r0, r1}
 8001244:	c303      	stmia	r3!, {r0, r1}

		HAL_RTC_SetAlarm_IT(&hrtc, &userAlarmObj, RTCTimeFormat);
 8001246:	4931      	ldr	r1, [pc, #196]	; (800130c <hourSetISR+0x144>)
 8001248:	4b2f      	ldr	r3, [pc, #188]	; (8001308 <hourSetISR+0x140>)
 800124a:	2200      	movs	r2, #0
 800124c:	0018      	movs	r0, r3
 800124e:	f002 fa0d 	bl	800366c <HAL_RTC_SetAlarm_IT>
		getUserAlarmTime(&hrtc, &userAlarmTime);
 8001252:	4a2c      	ldr	r2, [pc, #176]	; (8001304 <hourSetISR+0x13c>)
 8001254:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <hourSetISR+0x140>)
 8001256:	0011      	movs	r1, r2
 8001258:	0018      	movs	r0, r3
 800125a:	f7ff f915 	bl	8000488 <getUserAlarmTime>

		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 800125e:	4b29      	ldr	r3, [pc, #164]	; (8001304 <hourSetISR+0x13c>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	0019      	movs	r1, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <hourSetISR+0x13c>)
 8001266:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 8001268:	001a      	movs	r2, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 800126a:	4b26      	ldr	r3, [pc, #152]	; (8001304 <hourSetISR+0x13c>)
 800126c:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 800126e:	4828      	ldr	r0, [pc, #160]	; (8001310 <hourSetISR+0x148>)
 8001270:	f004 f9e6 	bl	8005640 <iprintf>
 8001274:	e03d      	b.n	80012f2 <hourSetISR+0x12a>

	}
	else {									// Otherwise, change current time hour.

		getRTCTime(&hrtc, &currTime, &currDate);
 8001276:	4a27      	ldr	r2, [pc, #156]	; (8001314 <hourSetISR+0x14c>)
 8001278:	4927      	ldr	r1, [pc, #156]	; (8001318 <hourSetISR+0x150>)
 800127a:	4b23      	ldr	r3, [pc, #140]	; (8001308 <hourSetISR+0x140>)
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff f8ed 	bl	800045c <getRTCTime>
		if(currTime.Hours >= 12) {
 8001282:	4b25      	ldr	r3, [pc, #148]	; (8001318 <hourSetISR+0x150>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b0b      	cmp	r3, #11
 8001288:	d90e      	bls.n	80012a8 <hourSetISR+0xe0>
			currTime.Hours = 1;
 800128a:	4b23      	ldr	r3, [pc, #140]	; (8001318 <hourSetISR+0x150>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
			if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <hourSetISR+0x150>)
 8001292:	78db      	ldrb	r3, [r3, #3]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d103      	bne.n	80012a0 <hourSetISR+0xd8>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001298:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <hourSetISR+0x150>)
 800129a:	2201      	movs	r2, #1
 800129c:	70da      	strb	r2, [r3, #3]
 800129e:	e00f      	b.n	80012c0 <hourSetISR+0xf8>
			} else {
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <hourSetISR+0x150>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	70da      	strb	r2, [r3, #3]
 80012a6:	e00b      	b.n	80012c0 <hourSetISR+0xf8>
			}
		}
		else if(currTime.Hours < 12) {
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <hourSetISR+0x150>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b0b      	cmp	r3, #11
 80012ae:	d806      	bhi.n	80012be <hourSetISR+0xf6>
			currTime.Hours = currTime.Hours + 1;
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <hourSetISR+0x150>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <hourSetISR+0x150>)
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	e000      	b.n	80012c0 <hourSetISR+0xf8>
		}
		else {
			__NOP();
 80012be:	46c0      	nop			; (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80012c0:	4915      	ldr	r1, [pc, #84]	; (8001318 <hourSetISR+0x150>)
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <hourSetISR+0x140>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	0018      	movs	r0, r3
 80012c8:	f001 ffec 	bl	80032a4 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80012cc:	f7ff fc9a 	bl	8000c04 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80012d0:	4a10      	ldr	r2, [pc, #64]	; (8001314 <hourSetISR+0x14c>)
 80012d2:	4911      	ldr	r1, [pc, #68]	; (8001318 <hourSetISR+0x150>)
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <hourSetISR+0x140>)
 80012d6:	0018      	movs	r0, r3
 80012d8:	f7ff f8c0 	bl	800045c <getRTCTime>

		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <hourSetISR+0x150>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <hourSetISR+0x150>)
 80012e4:	785b      	ldrb	r3, [r3, #1]
		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 80012e6:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <hourSetISR+0x150>)
 80012ea:	789b      	ldrb	r3, [r3, #2]
		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 80012ec:	480b      	ldr	r0, [pc, #44]	; (800131c <hourSetISR+0x154>)
 80012ee:	f004 f9a7 	bl	8005640 <iprintf>
	}

	return halRet;
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	781b      	ldrb	r3, [r3, #0]
}
 80012f6:	0018      	movs	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b003      	add	sp, #12
 80012fc:	bd90      	pop	{r4, r7, pc}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	080068ac 	.word	0x080068ac
 8001304:	20000268 	.word	0x20000268
 8001308:	200000d0 	.word	0x200000d0
 800130c:	20000240 	.word	0x20000240
 8001310:	080068c4 	.word	0x080068c4
 8001314:	2000023c 	.word	0x2000023c
 8001318:	20000228 	.word	0x20000228
 800131c:	080068f0 	.word	0x080068f0

08001320 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0

	printf("Entered minute set ISR.\n\r");
 8001326:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <minuteSetISR+0x194>)
 8001328:	0018      	movs	r0, r3
 800132a:	f004 f989 	bl	8005640 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 800132e:	1dfb      	adds	r3, r7, #7
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == !GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 8001334:	2202      	movs	r2, #2
 8001336:	23a0      	movs	r3, #160	; 0xa0
 8001338:	05db      	lsls	r3, r3, #23
 800133a:	0011      	movs	r1, r2
 800133c:	0018      	movs	r0, r3
 800133e:	f000 ffd1 	bl	80022e4 <HAL_GPIO_ReadPin>
 8001342:	1e03      	subs	r3, r0, #0
 8001344:	d157      	bne.n	80013f6 <minuteSetISR+0xd6>

		getUserAlarmTime(&hrtc, &userAlarmTime);
 8001346:	4a5c      	ldr	r2, [pc, #368]	; (80014b8 <minuteSetISR+0x198>)
 8001348:	4b5c      	ldr	r3, [pc, #368]	; (80014bc <minuteSetISR+0x19c>)
 800134a:	0011      	movs	r1, r2
 800134c:	0018      	movs	r0, r3
 800134e:	f7ff f89b 	bl	8000488 <getUserAlarmTime>

		if(userAlarmTime.Minutes >= 59) {
 8001352:	4b59      	ldr	r3, [pc, #356]	; (80014b8 <minuteSetISR+0x198>)
 8001354:	785b      	ldrb	r3, [r3, #1]
 8001356:	2b3a      	cmp	r3, #58	; 0x3a
 8001358:	d929      	bls.n	80013ae <minuteSetISR+0x8e>
			userAlarmTime.Minutes = 0;
 800135a:	4b57      	ldr	r3, [pc, #348]	; (80014b8 <minuteSetISR+0x198>)
 800135c:	2200      	movs	r2, #0
 800135e:	705a      	strb	r2, [r3, #1]
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001360:	4b55      	ldr	r3, [pc, #340]	; (80014b8 <minuteSetISR+0x198>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <minuteSetISR+0x198>)
 800136a:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.Hours > 12) {
 800136c:	4b52      	ldr	r3, [pc, #328]	; (80014b8 <minuteSetISR+0x198>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b0c      	cmp	r3, #12
 8001372:	d902      	bls.n	800137a <minuteSetISR+0x5a>
				userAlarmTime.Hours = 1;
 8001374:	4b50      	ldr	r3, [pc, #320]	; (80014b8 <minuteSetISR+0x198>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
			}
			if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800137a:	4b4f      	ldr	r3, [pc, #316]	; (80014b8 <minuteSetISR+0x198>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b0c      	cmp	r3, #12
 8001380:	d107      	bne.n	8001392 <minuteSetISR+0x72>
 8001382:	4b4d      	ldr	r3, [pc, #308]	; (80014b8 <minuteSetISR+0x198>)
 8001384:	78db      	ldrb	r3, [r3, #3]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d103      	bne.n	8001392 <minuteSetISR+0x72>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800138a:	4b4b      	ldr	r3, [pc, #300]	; (80014b8 <minuteSetISR+0x198>)
 800138c:	2201      	movs	r2, #1
 800138e:	70da      	strb	r2, [r3, #3]
 8001390:	e019      	b.n	80013c6 <minuteSetISR+0xa6>
			} else if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 8001392:	4b49      	ldr	r3, [pc, #292]	; (80014b8 <minuteSetISR+0x198>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b0c      	cmp	r3, #12
 8001398:	d107      	bne.n	80013aa <minuteSetISR+0x8a>
 800139a:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <minuteSetISR+0x198>)
 800139c:	78db      	ldrb	r3, [r3, #3]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d103      	bne.n	80013aa <minuteSetISR+0x8a>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80013a2:	4b45      	ldr	r3, [pc, #276]	; (80014b8 <minuteSetISR+0x198>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	70da      	strb	r2, [r3, #3]
 80013a8:	e00d      	b.n	80013c6 <minuteSetISR+0xa6>
			}
			else {
				__NOP();
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	e00b      	b.n	80013c6 <minuteSetISR+0xa6>
			}
		}
		else if(userAlarmTime.Minutes < 59) {
 80013ae:	4b42      	ldr	r3, [pc, #264]	; (80014b8 <minuteSetISR+0x198>)
 80013b0:	785b      	ldrb	r3, [r3, #1]
 80013b2:	2b3a      	cmp	r3, #58	; 0x3a
 80013b4:	d806      	bhi.n	80013c4 <minuteSetISR+0xa4>
			userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 80013b6:	4b40      	ldr	r3, [pc, #256]	; (80014b8 <minuteSetISR+0x198>)
 80013b8:	785b      	ldrb	r3, [r3, #1]
 80013ba:	3301      	adds	r3, #1
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4b3e      	ldr	r3, [pc, #248]	; (80014b8 <minuteSetISR+0x198>)
 80013c0:	705a      	strb	r2, [r3, #1]
 80013c2:	e000      	b.n	80013c6 <minuteSetISR+0xa6>
		}
		else {
			__NOP();
 80013c4:	46c0      	nop			; (mov r8, r8)
		}

		userAlarmObj.AlarmTime = userAlarmTime;
 80013c6:	4b3e      	ldr	r3, [pc, #248]	; (80014c0 <minuteSetISR+0x1a0>)
 80013c8:	4a3b      	ldr	r2, [pc, #236]	; (80014b8 <minuteSetISR+0x198>)
 80013ca:	ca13      	ldmia	r2!, {r0, r1, r4}
 80013cc:	c313      	stmia	r3!, {r0, r1, r4}
 80013ce:	ca03      	ldmia	r2!, {r0, r1}
 80013d0:	c303      	stmia	r3!, {r0, r1}

		HAL_RTC_SetAlarm_IT(&hrtc, &userAlarmObj, RTCTimeFormat);
 80013d2:	493b      	ldr	r1, [pc, #236]	; (80014c0 <minuteSetISR+0x1a0>)
 80013d4:	4b39      	ldr	r3, [pc, #228]	; (80014bc <minuteSetISR+0x19c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	0018      	movs	r0, r3
 80013da:	f002 f947 	bl	800366c <HAL_RTC_SetAlarm_IT>

		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmObj.AlarmTime.Hours,
 80013de:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <minuteSetISR+0x1a0>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	0019      	movs	r1, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 80013e4:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <minuteSetISR+0x1a0>)
 80013e6:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmObj.AlarmTime.Hours,
 80013e8:	001a      	movs	r2, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 80013ea:	4b35      	ldr	r3, [pc, #212]	; (80014c0 <minuteSetISR+0x1a0>)
 80013ec:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmObj.AlarmTime.Hours,
 80013ee:	4835      	ldr	r0, [pc, #212]	; (80014c4 <minuteSetISR+0x1a4>)
 80013f0:	f004 f926 	bl	8005640 <iprintf>
 80013f4:	e058      	b.n	80014a8 <minuteSetISR+0x188>

	}
	else {									// Otherwise, change current time hour.

		getRTCTime(&hrtc, &currTime, &currDate);
 80013f6:	4a34      	ldr	r2, [pc, #208]	; (80014c8 <minuteSetISR+0x1a8>)
 80013f8:	4934      	ldr	r1, [pc, #208]	; (80014cc <minuteSetISR+0x1ac>)
 80013fa:	4b30      	ldr	r3, [pc, #192]	; (80014bc <minuteSetISR+0x19c>)
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff f82d 	bl	800045c <getRTCTime>

		if(currTime.Minutes >= 59) {
 8001402:	4b32      	ldr	r3, [pc, #200]	; (80014cc <minuteSetISR+0x1ac>)
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	2b3a      	cmp	r3, #58	; 0x3a
 8001408:	d929      	bls.n	800145e <minuteSetISR+0x13e>
			currTime.Minutes = 0;
 800140a:	4b30      	ldr	r3, [pc, #192]	; (80014cc <minuteSetISR+0x1ac>)
 800140c:	2200      	movs	r2, #0
 800140e:	705a      	strb	r2, [r3, #1]
			currTime.Hours = currTime.Hours + 1;
 8001410:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <minuteSetISR+0x1ac>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	b2da      	uxtb	r2, r3
 8001418:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <minuteSetISR+0x1ac>)
 800141a:	701a      	strb	r2, [r3, #0]
			if(currTime.Hours > 12) {
 800141c:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <minuteSetISR+0x1ac>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b0c      	cmp	r3, #12
 8001422:	d902      	bls.n	800142a <minuteSetISR+0x10a>
				currTime.Hours = 1;
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <minuteSetISR+0x1ac>)
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
			}
			if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800142a:	4b28      	ldr	r3, [pc, #160]	; (80014cc <minuteSetISR+0x1ac>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b0c      	cmp	r3, #12
 8001430:	d107      	bne.n	8001442 <minuteSetISR+0x122>
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <minuteSetISR+0x1ac>)
 8001434:	78db      	ldrb	r3, [r3, #3]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <minuteSetISR+0x122>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800143a:	4b24      	ldr	r3, [pc, #144]	; (80014cc <minuteSetISR+0x1ac>)
 800143c:	2201      	movs	r2, #1
 800143e:	70da      	strb	r2, [r3, #3]
 8001440:	e019      	b.n	8001476 <minuteSetISR+0x156>
			} else if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 8001442:	4b22      	ldr	r3, [pc, #136]	; (80014cc <minuteSetISR+0x1ac>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b0c      	cmp	r3, #12
 8001448:	d107      	bne.n	800145a <minuteSetISR+0x13a>
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <minuteSetISR+0x1ac>)
 800144c:	78db      	ldrb	r3, [r3, #3]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d103      	bne.n	800145a <minuteSetISR+0x13a>
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <minuteSetISR+0x1ac>)
 8001454:	2200      	movs	r2, #0
 8001456:	70da      	strb	r2, [r3, #3]
 8001458:	e00d      	b.n	8001476 <minuteSetISR+0x156>
			}
			else {
				__NOP();
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	e00b      	b.n	8001476 <minuteSetISR+0x156>
			}
		}
		else if(currTime.Minutes < 59) {
 800145e:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <minuteSetISR+0x1ac>)
 8001460:	785b      	ldrb	r3, [r3, #1]
 8001462:	2b3a      	cmp	r3, #58	; 0x3a
 8001464:	d806      	bhi.n	8001474 <minuteSetISR+0x154>
			currTime.Minutes = currTime.Minutes + 1;
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <minuteSetISR+0x1ac>)
 8001468:	785b      	ldrb	r3, [r3, #1]
 800146a:	3301      	adds	r3, #1
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <minuteSetISR+0x1ac>)
 8001470:	705a      	strb	r2, [r3, #1]
 8001472:	e000      	b.n	8001476 <minuteSetISR+0x156>
		}
		else {
			__NOP();
 8001474:	46c0      	nop			; (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001476:	4915      	ldr	r1, [pc, #84]	; (80014cc <minuteSetISR+0x1ac>)
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <minuteSetISR+0x19c>)
 800147a:	2200      	movs	r2, #0
 800147c:	0018      	movs	r0, r3
 800147e:	f001 ff11 	bl	80032a4 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8001482:	f7ff fbbf 	bl	8000c04 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <minuteSetISR+0x1a8>)
 8001488:	4910      	ldr	r1, [pc, #64]	; (80014cc <minuteSetISR+0x1ac>)
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <minuteSetISR+0x19c>)
 800148c:	0018      	movs	r0, r3
 800148e:	f7fe ffe5 	bl	800045c <getRTCTime>

		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <minuteSetISR+0x1ac>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <minuteSetISR+0x1ac>)
 800149a:	785b      	ldrb	r3, [r3, #1]
		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 800149c:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <minuteSetISR+0x1ac>)
 80014a0:	789b      	ldrb	r3, [r3, #2]
		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 80014a2:	480b      	ldr	r0, [pc, #44]	; (80014d0 <minuteSetISR+0x1b0>)
 80014a4:	f004 f8cc 	bl	8005640 <iprintf>
	}

	return halRet;
 80014a8:	1dfb      	adds	r3, r7, #7
 80014aa:	781b      	ldrb	r3, [r3, #0]
}
 80014ac:	0018      	movs	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b003      	add	sp, #12
 80014b2:	bd90      	pop	{r4, r7, pc}
 80014b4:	08006920 	.word	0x08006920
 80014b8:	20000268 	.word	0x20000268
 80014bc:	200000d0 	.word	0x200000d0
 80014c0:	20000240 	.word	0x20000240
 80014c4:	0800693c 	.word	0x0800693c
 80014c8:	2000023c 	.word	0x2000023c
 80014cc:	20000228 	.word	0x20000228
 80014d0:	08006968 	.word	0x08006968

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <sevSeg_Init>:
GPIO_PinState GPIOPinSet[2] = {GPIO_PIN_RESET, GPIO_PIN_SET};


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM) {
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	0005      	movs	r5, r0
 80014e8:	000c      	movs	r4, r1
 80014ea:	0010      	movs	r0, r2
 80014ec:	0019      	movs	r1, r3
 80014ee:	1dbb      	adds	r3, r7, #6
 80014f0:	1c2a      	adds	r2, r5, #0
 80014f2:	801a      	strh	r2, [r3, #0]
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	1c22      	adds	r2, r4, #0
 80014f8:	801a      	strh	r2, [r3, #0]
 80014fa:	1cbb      	adds	r3, r7, #2
 80014fc:	1c02      	adds	r2, r0, #0
 80014fe:	801a      	strh	r2, [r3, #0]
 8001500:	003b      	movs	r3, r7
 8001502:	1c0a      	adds	r2, r1, #0
 8001504:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001506:	4b7a      	ldr	r3, [pc, #488]	; (80016f0 <sevSeg_Init+0x210>)
 8001508:	1dba      	adds	r2, r7, #6
 800150a:	8812      	ldrh	r2, [r2, #0]
 800150c:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 800150e:	4b79      	ldr	r3, [pc, #484]	; (80016f4 <sevSeg_Init+0x214>)
 8001510:	1d3a      	adds	r2, r7, #4
 8001512:	8812      	ldrh	r2, [r2, #0]
 8001514:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001516:	4b78      	ldr	r3, [pc, #480]	; (80016f8 <sevSeg_Init+0x218>)
 8001518:	1cba      	adds	r2, r7, #2
 800151a:	8812      	ldrh	r2, [r2, #0]
 800151c:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 800151e:	4b77      	ldr	r3, [pc, #476]	; (80016fc <sevSeg_Init+0x21c>)
 8001520:	003a      	movs	r2, r7
 8001522:	8812      	ldrh	r2, [r2, #0]
 8001524:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001526:	4a76      	ldr	r2, [pc, #472]	; (8001700 <sevSeg_Init+0x220>)
 8001528:	2330      	movs	r3, #48	; 0x30
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	8013      	strh	r3, [r2, #0]

	for(int i = 0; i < 5; i++) {
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
 8001534:	e00b      	b.n	800154e <sevSeg_Init+0x6e>
		portArray[i] = GPIOPortArray[i];
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800153c:	18d3      	adds	r3, r2, r3
 800153e:	6819      	ldr	r1, [r3, #0]
 8001540:	4b70      	ldr	r3, [pc, #448]	; (8001704 <sevSeg_Init+0x224>)
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	0092      	lsls	r2, r2, #2
 8001546:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	3301      	adds	r3, #1
 800154c:	61fb      	str	r3, [r7, #28]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	2b04      	cmp	r3, #4
 8001552:	ddf0      	ble.n	8001536 <sevSeg_Init+0x56>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001554:	4b6b      	ldr	r3, [pc, #428]	; (8001704 <sevSeg_Init+0x224>)
 8001556:	6918      	ldr	r0, [r3, #16]
 8001558:	4b69      	ldr	r3, [pc, #420]	; (8001700 <sevSeg_Init+0x220>)
 800155a:	8819      	ldrh	r1, [r3, #0]
 800155c:	4b6a      	ldr	r3, [pc, #424]	; (8001708 <sevSeg_Init+0x228>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	001a      	movs	r2, r3
 8001562:	f000 fedc 	bl	800231e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001566:	4b67      	ldr	r3, [pc, #412]	; (8001704 <sevSeg_Init+0x224>)
 8001568:	6918      	ldr	r0, [r3, #16]
 800156a:	4b65      	ldr	r3, [pc, #404]	; (8001700 <sevSeg_Init+0x220>)
 800156c:	8819      	ldrh	r1, [r3, #0]
 800156e:	4b66      	ldr	r3, [pc, #408]	; (8001708 <sevSeg_Init+0x228>)
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	001a      	movs	r2, r3
 8001574:	f000 fed3 	bl	800231e <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001578:	4b62      	ldr	r3, [pc, #392]	; (8001704 <sevSeg_Init+0x224>)
 800157a:	6898      	ldr	r0, [r3, #8]
 800157c:	4b5e      	ldr	r3, [pc, #376]	; (80016f8 <sevSeg_Init+0x218>)
 800157e:	8819      	ldrh	r1, [r3, #0]
 8001580:	4b61      	ldr	r3, [pc, #388]	; (8001708 <sevSeg_Init+0x228>)
 8001582:	785b      	ldrb	r3, [r3, #1]
 8001584:	001a      	movs	r2, r3
 8001586:	f000 feca 	bl	800231e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800158a:	4b5e      	ldr	r3, [pc, #376]	; (8001704 <sevSeg_Init+0x224>)
 800158c:	6898      	ldr	r0, [r3, #8]
 800158e:	4b5a      	ldr	r3, [pc, #360]	; (80016f8 <sevSeg_Init+0x218>)
 8001590:	8819      	ldrh	r1, [r3, #0]
 8001592:	4b5d      	ldr	r3, [pc, #372]	; (8001708 <sevSeg_Init+0x228>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	001a      	movs	r2, r3
 8001598:	f000 fec1 	bl	800231e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 800159c:	4b59      	ldr	r3, [pc, #356]	; (8001704 <sevSeg_Init+0x224>)
 800159e:	68d8      	ldr	r0, [r3, #12]
 80015a0:	4b56      	ldr	r3, [pc, #344]	; (80016fc <sevSeg_Init+0x21c>)
 80015a2:	8819      	ldrh	r1, [r3, #0]
 80015a4:	4b58      	ldr	r3, [pc, #352]	; (8001708 <sevSeg_Init+0x228>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	001a      	movs	r2, r3
 80015aa:	f000 feb8 	bl	800231e <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(htim_PWM, 90);
 80015ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015b0:	215a      	movs	r1, #90	; 0x5a
 80015b2:	0018      	movs	r0, r3
 80015b4:	f000 f950 	bl	8001858 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 80015b8:	2308      	movs	r3, #8
 80015ba:	18fb      	adds	r3, r7, r3
 80015bc:	4a53      	ldr	r2, [pc, #332]	; (800170c <sevSeg_Init+0x22c>)
 80015be:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e038      	b.n	8001638 <sevSeg_Init+0x158>

		sendByte = hofSymb[i];
 80015c6:	231b      	movs	r3, #27
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	2208      	movs	r2, #8
 80015cc:	18b9      	adds	r1, r7, r2
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	188a      	adds	r2, r1, r2
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	e027      	b.n	800162c <sevSeg_Init+0x14c>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 80015dc:	4b49      	ldr	r3, [pc, #292]	; (8001704 <sevSeg_Init+0x224>)
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	4b43      	ldr	r3, [pc, #268]	; (80016f0 <sevSeg_Init+0x210>)
 80015e2:	8819      	ldrh	r1, [r3, #0]
 80015e4:	241b      	movs	r4, #27
 80015e6:	193b      	adds	r3, r7, r4
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2201      	movs	r2, #1
 80015ec:	4013      	ands	r3, r2
 80015ee:	4a46      	ldr	r2, [pc, #280]	; (8001708 <sevSeg_Init+0x228>)
 80015f0:	5cd3      	ldrb	r3, [r2, r3]
 80015f2:	001a      	movs	r2, r3
 80015f4:	f000 fe93 	bl	800231e <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 80015f8:	4b42      	ldr	r3, [pc, #264]	; (8001704 <sevSeg_Init+0x224>)
 80015fa:	6858      	ldr	r0, [r3, #4]
 80015fc:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <sevSeg_Init+0x214>)
 80015fe:	8819      	ldrh	r1, [r3, #0]
 8001600:	4b41      	ldr	r3, [pc, #260]	; (8001708 <sevSeg_Init+0x228>)
 8001602:	785b      	ldrb	r3, [r3, #1]
 8001604:	001a      	movs	r2, r3
 8001606:	f000 fe8a 	bl	800231e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 800160a:	4b3e      	ldr	r3, [pc, #248]	; (8001704 <sevSeg_Init+0x224>)
 800160c:	6858      	ldr	r0, [r3, #4]
 800160e:	4b39      	ldr	r3, [pc, #228]	; (80016f4 <sevSeg_Init+0x214>)
 8001610:	8819      	ldrh	r1, [r3, #0]
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <sevSeg_Init+0x228>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	001a      	movs	r2, r3
 8001618:	f000 fe81 	bl	800231e <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 800161c:	193b      	adds	r3, r7, r4
 800161e:	193a      	adds	r2, r7, r4
 8001620:	7812      	ldrb	r2, [r2, #0]
 8001622:	0852      	lsrs	r2, r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	3301      	adds	r3, #1
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	2b07      	cmp	r3, #7
 8001630:	ddd4      	ble.n	80015dc <sevSeg_Init+0xfc>
	for(int i = 0; i <= 3; i++) {
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2b03      	cmp	r3, #3
 800163c:	ddc3      	ble.n	80015c6 <sevSeg_Init+0xe6>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 800163e:	4b31      	ldr	r3, [pc, #196]	; (8001704 <sevSeg_Init+0x224>)
 8001640:	6898      	ldr	r0, [r3, #8]
 8001642:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <sevSeg_Init+0x218>)
 8001644:	8819      	ldrh	r1, [r3, #0]
 8001646:	4b30      	ldr	r3, [pc, #192]	; (8001708 <sevSeg_Init+0x228>)
 8001648:	785b      	ldrb	r3, [r3, #1]
 800164a:	001a      	movs	r2, r3
 800164c:	f000 fe67 	bl	800231e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001650:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <sevSeg_Init+0x224>)
 8001652:	6898      	ldr	r0, [r3, #8]
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <sevSeg_Init+0x218>)
 8001656:	8819      	ldrh	r1, [r3, #0]
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <sevSeg_Init+0x228>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	001a      	movs	r2, r3
 800165e:	f000 fe5e 	bl	800231e <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8001662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001664:	0018      	movs	r0, r3
 8001666:	f002 fbe5 	bl	8003e34 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 800166a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800166c:	0018      	movs	r0, r3
 800166e:	f002 fb95 	bl	8003d9c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8001672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	60fb      	str	r3, [r7, #12]
	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 2)){ timerVal = __HAL_TIM_GET_COUNTER(htim); }
 800167a:	e003      	b.n	8001684 <sevSeg_Init+0x1a4>
 800167c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	1ad2      	subs	r2, r2, r3
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	429a      	cmp	r2, r3
 8001694:	d3f2      	bcc.n	800167c <sevSeg_Init+0x19c>

	HAL_TIM_Base_Stop(htim);
 8001696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001698:	0018      	movs	r0, r3
 800169a:	f002 fbcb 	bl	8003e34 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <sevSeg_Init+0x224>)
 80016a0:	6918      	ldr	r0, [r3, #16]
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <sevSeg_Init+0x220>)
 80016a4:	8819      	ldrh	r1, [r3, #0]
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <sevSeg_Init+0x228>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	001a      	movs	r2, r3
 80016ac:	f000 fe37 	bl	800231e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <sevSeg_Init+0x224>)
 80016b2:	6918      	ldr	r0, [r3, #16]
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <sevSeg_Init+0x220>)
 80016b6:	8819      	ldrh	r1, [r3, #0]
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <sevSeg_Init+0x228>)
 80016ba:	785b      	ldrb	r3, [r3, #1]
 80016bc:	001a      	movs	r2, r3
 80016be:	f000 fe2e 	bl	800231e <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <sevSeg_Init+0x224>)
 80016c4:	6898      	ldr	r0, [r3, #8]
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <sevSeg_Init+0x218>)
 80016c8:	8819      	ldrh	r1, [r3, #0]
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <sevSeg_Init+0x228>)
 80016cc:	785b      	ldrb	r3, [r3, #1]
 80016ce:	001a      	movs	r2, r3
 80016d0:	f000 fe25 	bl	800231e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <sevSeg_Init+0x224>)
 80016d6:	6898      	ldr	r0, [r3, #8]
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <sevSeg_Init+0x218>)
 80016da:	8819      	ldrh	r1, [r3, #0]
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <sevSeg_Init+0x228>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	001a      	movs	r2, r3
 80016e2:	f000 fe1c 	bl	800231e <HAL_GPIO_WritePin>

}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b008      	add	sp, #32
 80016ec:	bdb0      	pop	{r4, r5, r7, pc}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	2000027c 	.word	0x2000027c
 80016f4:	2000027e 	.word	0x2000027e
 80016f8:	20000280 	.word	0x20000280
 80016fc:	20000282 	.word	0x20000282
 8001700:	20000284 	.word	0x20000284
 8001704:	20000028 	.word	0x20000028
 8001708:	2000003c 	.word	0x2000003c
 800170c:	471d3700 	.word	0x471d3700

08001710 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	210a      	movs	r1, #10
 800171e:	0018      	movs	r0, r3
 8001720:	f7fe fcfa 	bl	8000118 <__udivsi3>
 8001724:	0003      	movs	r3, r0
 8001726:	b2da      	uxtb	r2, r3
 8001728:	2408      	movs	r4, #8
 800172a:	193b      	adds	r3, r7, r4
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	210a      	movs	r1, #10
 8001734:	0018      	movs	r0, r3
 8001736:	f7fe fd75 	bl	8000224 <__aeabi_uidivmod>
 800173a:	000b      	movs	r3, r1
 800173c:	b2da      	uxtb	r2, r3
 800173e:	193b      	adds	r3, r7, r4
 8001740:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001746:	210a      	movs	r1, #10
 8001748:	0018      	movs	r0, r3
 800174a:	f7fe fce5 	bl	8000118 <__udivsi3>
 800174e:	0003      	movs	r3, r0
 8001750:	b2da      	uxtb	r2, r3
 8001752:	193b      	adds	r3, r7, r4
 8001754:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 800175a:	210a      	movs	r1, #10
 800175c:	0018      	movs	r0, r3
 800175e:	f7fe fd61 	bl	8000224 <__aeabi_uidivmod>
 8001762:	000b      	movs	r3, r1
 8001764:	b2da      	uxtb	r2, r3
 8001766:	193b      	adds	r3, r7, r4
 8001768:	70da      	strb	r2, [r3, #3]

	//uint8_t sendTime[4] = {8, 8, 8, 8};

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i < 4; i++) {
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	e04b      	b.n	8001808 <sevSeg_updateDigits+0xf8>

		sendByte = dispDigits[sendTime[i]];
 8001770:	2308      	movs	r3, #8
 8001772:	18fa      	adds	r2, r7, r3
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	18d3      	adds	r3, r2, r3
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	0019      	movs	r1, r3
 800177c:	2417      	movs	r4, #23
 800177e:	193b      	adds	r3, r7, r4
 8001780:	4a2e      	ldr	r2, [pc, #184]	; (800183c <sevSeg_updateDigits+0x12c>)
 8001782:	5c52      	ldrb	r2, [r2, r1]
 8001784:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10c      	bne.n	80017a6 <sevSeg_updateDigits+0x96>
			sendByte = dig3Seg[updateTime->Hours / 10];
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	210a      	movs	r1, #10
 8001792:	0018      	movs	r0, r3
 8001794:	f7fe fcc0 	bl	8000118 <__udivsi3>
 8001798:	0003      	movs	r3, r0
 800179a:	b2db      	uxtb	r3, r3
 800179c:	0019      	movs	r1, r3
 800179e:	193b      	adds	r3, r7, r4
 80017a0:	4a27      	ldr	r2, [pc, #156]	; (8001840 <sevSeg_updateDigits+0x130>)
 80017a2:	5c52      	ldrb	r2, [r2, r1]
 80017a4:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	e027      	b.n	80017fc <sevSeg_updateDigits+0xec>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 80017ac:	4b25      	ldr	r3, [pc, #148]	; (8001844 <sevSeg_updateDigits+0x134>)
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <sevSeg_updateDigits+0x138>)
 80017b2:	8819      	ldrh	r1, [r3, #0]
 80017b4:	2417      	movs	r4, #23
 80017b6:	193b      	adds	r3, r7, r4
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2201      	movs	r2, #1
 80017bc:	4013      	ands	r3, r2
 80017be:	4a23      	ldr	r2, [pc, #140]	; (800184c <sevSeg_updateDigits+0x13c>)
 80017c0:	5cd3      	ldrb	r3, [r2, r3]
 80017c2:	001a      	movs	r2, r3
 80017c4:	f000 fdab 	bl	800231e <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 80017c8:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <sevSeg_updateDigits+0x134>)
 80017ca:	6858      	ldr	r0, [r3, #4]
 80017cc:	4b20      	ldr	r3, [pc, #128]	; (8001850 <sevSeg_updateDigits+0x140>)
 80017ce:	8819      	ldrh	r1, [r3, #0]
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <sevSeg_updateDigits+0x13c>)
 80017d2:	785b      	ldrb	r3, [r3, #1]
 80017d4:	001a      	movs	r2, r3
 80017d6:	f000 fda2 	bl	800231e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <sevSeg_updateDigits+0x134>)
 80017dc:	6858      	ldr	r0, [r3, #4]
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <sevSeg_updateDigits+0x140>)
 80017e0:	8819      	ldrh	r1, [r3, #0]
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <sevSeg_updateDigits+0x13c>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	001a      	movs	r2, r3
 80017e8:	f000 fd99 	bl	800231e <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	193a      	adds	r2, r7, r4
 80017f0:	7812      	ldrb	r2, [r2, #0]
 80017f2:	0852      	lsrs	r2, r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3301      	adds	r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b07      	cmp	r3, #7
 8001800:	ddd4      	ble.n	80017ac <sevSeg_updateDigits+0x9c>
	for(int i = 0; i < 4; i++) {
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	3301      	adds	r3, #1
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	2b03      	cmp	r3, #3
 800180c:	ddb0      	ble.n	8001770 <sevSeg_updateDigits+0x60>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 800180e:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <sevSeg_updateDigits+0x134>)
 8001810:	6898      	ldr	r0, [r3, #8]
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <sevSeg_updateDigits+0x144>)
 8001814:	8819      	ldrh	r1, [r3, #0]
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <sevSeg_updateDigits+0x13c>)
 8001818:	785b      	ldrb	r3, [r3, #1]
 800181a:	001a      	movs	r2, r3
 800181c:	f000 fd7f 	bl	800231e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <sevSeg_updateDigits+0x134>)
 8001822:	6898      	ldr	r0, [r3, #8]
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <sevSeg_updateDigits+0x144>)
 8001826:	8819      	ldrh	r1, [r3, #0]
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <sevSeg_updateDigits+0x13c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	001a      	movs	r2, r3
 800182e:	f000 fd76 	bl	800231e <HAL_GPIO_WritePin>

	return;
 8001832:	46c0      	nop			; (mov r8, r8)

}
 8001834:	46bd      	mov	sp, r7
 8001836:	b007      	add	sp, #28
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	0800699c 	.word	0x0800699c
 8001840:	080069a8 	.word	0x080069a8
 8001844:	20000028 	.word	0x20000028
 8001848:	2000027c 	.word	0x2000027c
 800184c:	2000003c 	.word	0x2000003c
 8001850:	2000027e 	.word	0x2000027e
 8001854:	20000280 	.word	0x20000280

08001858 <sevSeg_setIntensity>:

void sevSeg_setIntensity(TIM_HandleTypeDef *htim_PWM, uint16_t dutyCycle) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	000a      	movs	r2, r1
 8001862:	1cbb      	adds	r3, r7, #2
 8001864:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(htim_PWM, TIM_CHANNEL_2, dutyCycle);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	1cba      	adds	r2, r7, #2
 800186c:	8812      	ldrh	r2, [r2, #0]
 800186e:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(htim_PWM, TIM_CHANNEL_2);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2104      	movs	r1, #4
 8001874:	0018      	movs	r0, r3
 8001876:	f002 fb5b 	bl	8003f30 <HAL_TIM_PWM_Start>

}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	46bd      	mov	sp, r7
 800187e:	b002      	add	sp, #8
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <HAL_MspInit+0x54>)
 800188c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_MspInit+0x54>)
 8001890:	2101      	movs	r1, #1
 8001892:	430a      	orrs	r2, r1
 8001894:	641a      	str	r2, [r3, #64]	; 0x40
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_MspInit+0x54>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	2201      	movs	r2, #1
 800189c:	4013      	ands	r3, r2
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HAL_MspInit+0x54>)
 80018a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <HAL_MspInit+0x54>)
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	0549      	lsls	r1, r1, #21
 80018ac:	430a      	orrs	r2, r1
 80018ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_MspInit+0x54>)
 80018b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	055b      	lsls	r3, r3, #21
 80018b8:	4013      	ands	r3, r2
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	2001      	movs	r0, #1
 80018c4:	f000 fb78 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80018c8:	2001      	movs	r0, #1
 80018ca:	f000 fb8a 	bl	8001fe2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b002      	add	sp, #8
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	40021000 	.word	0x40021000

080018dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b08f      	sub	sp, #60	; 0x3c
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e4:	2410      	movs	r4, #16
 80018e6:	193b      	adds	r3, r7, r4
 80018e8:	0018      	movs	r0, r3
 80018ea:	2328      	movs	r3, #40	; 0x28
 80018ec:	001a      	movs	r2, r3
 80018ee:	2100      	movs	r1, #0
 80018f0:	f003 fe9e 	bl	8005630 <memset>
  if(hrtc->Instance==RTC)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a19      	ldr	r2, [pc, #100]	; (8001960 <HAL_RTC_MspInit+0x84>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d12c      	bne.n	8001958 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018fe:	193b      	adds	r3, r7, r4
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	0292      	lsls	r2, r2, #10
 8001904:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001906:	193b      	adds	r3, r7, r4
 8001908:	2280      	movs	r2, #128	; 0x80
 800190a:	0092      	lsls	r2, r2, #2
 800190c:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190e:	193b      	adds	r3, r7, r4
 8001910:	0018      	movs	r0, r3
 8001912:	f001 faab 	bl	8002e6c <HAL_RCCEx_PeriphCLKConfig>
 8001916:	1e03      	subs	r3, r0, #0
 8001918:	d001      	beq.n	800191e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800191a:	f7ff fddb 	bl	80014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <HAL_RTC_MspInit+0x88>)
 8001920:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_RTC_MspInit+0x88>)
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	0209      	lsls	r1, r1, #8
 8001928:	430a      	orrs	r2, r1
 800192a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800192c:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_RTC_MspInit+0x88>)
 800192e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_RTC_MspInit+0x88>)
 8001932:	2180      	movs	r1, #128	; 0x80
 8001934:	00c9      	lsls	r1, r1, #3
 8001936:	430a      	orrs	r2, r1
 8001938:	63da      	str	r2, [r3, #60]	; 0x3c
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_RTC_MspInit+0x88>)
 800193c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4013      	ands	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	2002      	movs	r0, #2
 800194e:	f000 fb33 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001952:	2002      	movs	r0, #2
 8001954:	f000 fb45 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	b00f      	add	sp, #60	; 0x3c
 800195e:	bd90      	pop	{r4, r7, pc}
 8001960:	40002800 	.word	0x40002800
 8001964:	40021000 	.word	0x40021000

08001968 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b08f      	sub	sp, #60	; 0x3c
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001970:	2410      	movs	r4, #16
 8001972:	193b      	adds	r3, r7, r4
 8001974:	0018      	movs	r0, r3
 8001976:	2328      	movs	r3, #40	; 0x28
 8001978:	001a      	movs	r2, r3
 800197a:	2100      	movs	r1, #0
 800197c:	f003 fe58 	bl	8005630 <memset>
  if(htim_pwm->Instance==TIM1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a11      	ldr	r2, [pc, #68]	; (80019cc <HAL_TIM_PWM_MspInit+0x64>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d11c      	bne.n	80019c4 <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800198a:	193b      	adds	r3, r7, r4
 800198c:	2280      	movs	r2, #128	; 0x80
 800198e:	0392      	lsls	r2, r2, #14
 8001990:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001992:	193b      	adds	r3, r7, r4
 8001994:	2200      	movs	r2, #0
 8001996:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001998:	193b      	adds	r3, r7, r4
 800199a:	0018      	movs	r0, r3
 800199c:	f001 fa66 	bl	8002e6c <HAL_RCCEx_PeriphCLKConfig>
 80019a0:	1e03      	subs	r3, r0, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 80019a4:	f7ff fd96 	bl	80014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_TIM_PWM_MspInit+0x68>)
 80019aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_TIM_PWM_MspInit+0x68>)
 80019ae:	2180      	movs	r1, #128	; 0x80
 80019b0:	0109      	lsls	r1, r1, #4
 80019b2:	430a      	orrs	r2, r1
 80019b4:	641a      	str	r2, [r3, #64]	; 0x40
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_TIM_PWM_MspInit+0x68>)
 80019b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4013      	ands	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019c4:	46c0      	nop			; (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b00f      	add	sp, #60	; 0x3c
 80019ca:	bd90      	pop	{r4, r7, pc}
 80019cc:	40012c00 	.word	0x40012c00
 80019d0:	40021000 	.word	0x40021000

080019d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <HAL_TIM_Base_MspInit+0x38>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d10d      	bne.n	8001a02 <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_TIM_Base_MspInit+0x3c>)
 80019e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_TIM_Base_MspInit+0x3c>)
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	0289      	lsls	r1, r1, #10
 80019f0:	430a      	orrs	r2, r1
 80019f2:	641a      	str	r2, [r3, #64]	; 0x40
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_TIM_Base_MspInit+0x3c>)
 80019f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	029b      	lsls	r3, r3, #10
 80019fc:	4013      	ands	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b004      	add	sp, #16
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	40014400 	.word	0x40014400
 8001a10:	40021000 	.word	0x40021000

08001a14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	240c      	movs	r4, #12
 8001a1e:	193b      	adds	r3, r7, r4
 8001a20:	0018      	movs	r0, r3
 8001a22:	2314      	movs	r3, #20
 8001a24:	001a      	movs	r2, r3
 8001a26:	2100      	movs	r1, #0
 8001a28:	f003 fe02 	bl	8005630 <memset>
  if(htim->Instance==TIM1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <HAL_TIM_MspPostInit+0x70>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d121      	bne.n	8001a7a <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <HAL_TIM_MspPostInit+0x74>)
 8001a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <HAL_TIM_MspPostInit+0x74>)
 8001a3c:	2102      	movs	r1, #2
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	635a      	str	r2, [r3, #52]	; 0x34
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_TIM_MspPostInit+0x74>)
 8001a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a46:	2202      	movs	r2, #2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Shift_Output_En_Pin;
 8001a4e:	0021      	movs	r1, r4
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	2208      	movs	r2, #8
 8001a54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	187b      	adds	r3, r7, r1
 8001a58:	2202      	movs	r2, #2
 8001a5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	187b      	adds	r3, r7, r1
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	187b      	adds	r3, r7, r1
 8001a64:	2200      	movs	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a68:	187b      	adds	r3, r7, r1
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Shift_Output_En_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	187b      	adds	r3, r7, r1
 8001a70:	4a06      	ldr	r2, [pc, #24]	; (8001a8c <HAL_TIM_MspPostInit+0x78>)
 8001a72:	0019      	movs	r1, r3
 8001a74:	0010      	movs	r0, r2
 8001a76:	f000 fad1 	bl	800201c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b009      	add	sp, #36	; 0x24
 8001a80:	bd90      	pop	{r4, r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	40012c00 	.word	0x40012c00
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	50000400 	.word	0x50000400

08001a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b08b      	sub	sp, #44	; 0x2c
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	2414      	movs	r4, #20
 8001a9a:	193b      	adds	r3, r7, r4
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	2314      	movs	r3, #20
 8001aa0:	001a      	movs	r2, r3
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	f003 fdc4 	bl	8005630 <memset>
  if(huart->Instance==USART2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <HAL_UART_MspInit+0x8c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d130      	bne.n	8001b14 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_UART_MspInit+0x90>)
 8001ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <HAL_UART_MspInit+0x90>)
 8001ab8:	2180      	movs	r1, #128	; 0x80
 8001aba:	0289      	lsls	r1, r1, #10
 8001abc:	430a      	orrs	r2, r1
 8001abe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ac0:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <HAL_UART_MspInit+0x90>)
 8001ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	029b      	lsls	r3, r3, #10
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <HAL_UART_MspInit+0x90>)
 8001ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ad2:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <HAL_UART_MspInit+0x90>)
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_UART_MspInit+0x90>)
 8001adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001ae6:	0021      	movs	r1, r4
 8001ae8:	187b      	adds	r3, r7, r1
 8001aea:	220c      	movs	r2, #12
 8001aec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	187b      	adds	r3, r7, r1
 8001af0:	2202      	movs	r2, #2
 8001af2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af4:	187b      	adds	r3, r7, r1
 8001af6:	2201      	movs	r2, #1
 8001af8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	187b      	adds	r3, r7, r1
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001b00:	187b      	adds	r3, r7, r1
 8001b02:	2201      	movs	r2, #1
 8001b04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	187a      	adds	r2, r7, r1
 8001b08:	23a0      	movs	r3, #160	; 0xa0
 8001b0a:	05db      	lsls	r3, r3, #23
 8001b0c:	0011      	movs	r1, r2
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f000 fa84 	bl	800201c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b14:	46c0      	nop			; (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b00b      	add	sp, #44	; 0x2c
 8001b1a:	bd90      	pop	{r4, r7, pc}
 8001b1c:	40004400 	.word	0x40004400
 8001b20:	40021000 	.word	0x40021000

08001b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <NMI_Handler+0x4>

08001b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <HardFault_Handler+0x4>

08001b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b34:	46c0      	nop			; (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b48:	f000 f96e 	bl	8001e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001b56:	f000 fc8f 	bl	8002478 <HAL_PWREx_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <RTC_TAMP_IRQHandler+0x14>)
 8001b66:	0018      	movs	r0, r3
 8001b68:	f001 ff86 	bl	8003a78 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001b6c:	46c0      	nop			; (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	200000d0 	.word	0x200000d0

08001b78 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Display_Button_Pin);
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f000 fc07 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Set_Button_Pin);
 8001b82:	2002      	movs	r0, #2
 8001b84:	f000 fc04 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001b88:	46c0      	nop			; (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_NRST_Pin);
 8001b92:	2004      	movs	r0, #4
 8001b94:	f000 fbfc 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Hour_Set_Button_Pin);
 8001ba2:	2020      	movs	r0, #32
 8001ba4:	f000 fbf4 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Enable_Button_Pin);
 8001ba8:	2040      	movs	r0, #64	; 0x40
 8001baa:	f000 fbf1 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Minute_Set_Button_Pin);
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	015b      	lsls	r3, r3, #5
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f000 fbec 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001bb8:	46c0      	nop			; (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e00a      	b.n	8001be6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bd0:	e000      	b.n	8001bd4 <_read+0x16>
 8001bd2:	bf00      	nop
 8001bd4:	0001      	movs	r1, r0
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	60ba      	str	r2, [r7, #8]
 8001bdc:	b2ca      	uxtb	r2, r1
 8001bde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3301      	adds	r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	dbf0      	blt.n	8001bd0 <_read+0x12>
  }

  return len;
 8001bee:	687b      	ldr	r3, [r7, #4]
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b006      	add	sp, #24
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	e009      	b.n	8001c1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	60ba      	str	r2, [r7, #8]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	0018      	movs	r0, r3
 8001c14:	f7fe fc78 	bl	8000508 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	dbf1      	blt.n	8001c0a <_write+0x12>
  }
  return len;
 8001c26:	687b      	ldr	r3, [r7, #4]
}
 8001c28:	0018      	movs	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b006      	add	sp, #24
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_close>:

int _close(int file)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	425b      	negs	r3, r3
}
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b002      	add	sp, #8
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2280      	movs	r2, #128	; 0x80
 8001c52:	0192      	lsls	r2, r2, #6
 8001c54:	605a      	str	r2, [r3, #4]
  return 0;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	0018      	movs	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b002      	add	sp, #8
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_isatty>:

int _isatty(int file)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c68:	2301      	movs	r3, #1
}
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b002      	add	sp, #8
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b004      	add	sp, #16
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c90:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <_sbrk+0x5c>)
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <_sbrk+0x60>)
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <_sbrk+0x64>)
 8001ca6:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <_sbrk+0x68>)
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	18d3      	adds	r3, r2, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d207      	bcs.n	8001cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb8:	f003 fc90 	bl	80055dc <__errno>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	425b      	negs	r3, r3
 8001cc6:	e009      	b.n	8001cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <_sbrk+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	18d2      	adds	r2, r2, r3
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <_sbrk+0x64>)
 8001cd8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001cda:	68fb      	ldr	r3, [r7, #12]
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b006      	add	sp, #24
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20002000 	.word	0x20002000
 8001ce8:	00000400 	.word	0x00000400
 8001cec:	20000288 	.word	0x20000288
 8001cf0:	200002a0 	.word	0x200002a0

08001cf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf8:	46c0      	nop			; (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d00:	480d      	ldr	r0, [pc, #52]	; (8001d38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d04:	f7ff fff6 	bl	8001cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d0a:	490d      	ldr	r1, [pc, #52]	; (8001d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <LoopForever+0xe>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d10:	e002      	b.n	8001d18 <LoopCopyDataInit>

08001d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d16:	3304      	adds	r3, #4

08001d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d1c:	d3f9      	bcc.n	8001d12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d20:	4c0a      	ldr	r4, [pc, #40]	; (8001d4c <LoopForever+0x16>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d24:	e001      	b.n	8001d2a <LoopFillZerobss>

08001d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d28:	3204      	adds	r2, #4

08001d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d2c:	d3fb      	bcc.n	8001d26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d2e:	f003 fc5b 	bl	80055e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d32:	f7fe fbfb 	bl	800052c <main>

08001d36 <LoopForever>:

LoopForever:
  b LoopForever
 8001d36:	e7fe      	b.n	8001d36 <LoopForever>
  ldr   r0, =_estack
 8001d38:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d40:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001d44:	08006b20 	.word	0x08006b20
  ldr r2, =_sbss
 8001d48:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001d4c:	200002a0 	.word	0x200002a0

08001d50 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d50:	e7fe      	b.n	8001d50 <ADC1_IRQHandler>
	...

08001d54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d5a:	1dfb      	adds	r3, r7, #7
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_Init+0x3c>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_Init+0x3c>)
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	0049      	lsls	r1, r1, #1
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f000 f810 	bl	8001d94 <HAL_InitTick>
 8001d74:	1e03      	subs	r3, r0, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d78:	1dfb      	adds	r3, r7, #7
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	e001      	b.n	8001d84 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001d80:	f7ff fd80 	bl	8001884 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	781b      	ldrb	r3, [r3, #0]
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b002      	add	sp, #8
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40022000 	.word	0x40022000

08001d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d9c:	230f      	movs	r3, #15
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001da4:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <HAL_InitTick+0x88>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d02b      	beq.n	8001e04 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001dac:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <HAL_InitTick+0x8c>)
 8001dae:	681c      	ldr	r4, [r3, #0]
 8001db0:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_InitTick+0x88>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	0019      	movs	r1, r3
 8001db6:	23fa      	movs	r3, #250	; 0xfa
 8001db8:	0098      	lsls	r0, r3, #2
 8001dba:	f7fe f9ad 	bl	8000118 <__udivsi3>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	0020      	movs	r0, r4
 8001dc4:	f7fe f9a8 	bl	8000118 <__udivsi3>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f000 f919 	bl	8002002 <HAL_SYSTICK_Config>
 8001dd0:	1e03      	subs	r3, r0, #0
 8001dd2:	d112      	bne.n	8001dfa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d80a      	bhi.n	8001df0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	2301      	movs	r3, #1
 8001dde:	425b      	negs	r3, r3
 8001de0:	2200      	movs	r2, #0
 8001de2:	0018      	movs	r0, r3
 8001de4:	f000 f8e8 	bl	8001fb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001de8:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_InitTick+0x90>)
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	e00d      	b.n	8001e0c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001df0:	230f      	movs	r3, #15
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	e008      	b.n	8001e0c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dfa:	230f      	movs	r3, #15
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	e003      	b.n	8001e0c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e04:	230f      	movs	r3, #15
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e0c:	230f      	movs	r3, #15
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	781b      	ldrb	r3, [r3, #0]
}
 8001e12:	0018      	movs	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b005      	add	sp, #20
 8001e18:	bd90      	pop	{r4, r7, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	20000048 	.word	0x20000048
 8001e20:	20000040 	.word	0x20000040
 8001e24:	20000044 	.word	0x20000044

08001e28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_IncTick+0x1c>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	001a      	movs	r2, r3
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_IncTick+0x20>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	18d2      	adds	r2, r2, r3
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_IncTick+0x20>)
 8001e3a:	601a      	str	r2, [r3, #0]
}
 8001e3c:	46c0      	nop			; (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	20000048 	.word	0x20000048
 8001e48:	2000028c 	.word	0x2000028c

08001e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b02      	ldr	r3, [pc, #8]	; (8001e5c <HAL_GetTick+0x10>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	0018      	movs	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	2000028c 	.word	0x2000028c

08001e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	0002      	movs	r2, r0
 8001e68:	1dfb      	adds	r3, r7, #7
 8001e6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e6c:	1dfb      	adds	r3, r7, #7
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b7f      	cmp	r3, #127	; 0x7f
 8001e72:	d809      	bhi.n	8001e88 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e74:	1dfb      	adds	r3, r7, #7
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	001a      	movs	r2, r3
 8001e7a:	231f      	movs	r3, #31
 8001e7c:	401a      	ands	r2, r3
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <__NVIC_EnableIRQ+0x30>)
 8001e80:	2101      	movs	r1, #1
 8001e82:	4091      	lsls	r1, r2
 8001e84:	000a      	movs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001e88:	46c0      	nop			; (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b002      	add	sp, #8
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	1dfb      	adds	r3, r7, #7
 8001ea0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ea2:	1dfb      	adds	r3, r7, #7
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ea8:	d828      	bhi.n	8001efc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eaa:	4a2f      	ldr	r2, [pc, #188]	; (8001f68 <__NVIC_SetPriority+0xd4>)
 8001eac:	1dfb      	adds	r3, r7, #7
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b25b      	sxtb	r3, r3
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	33c0      	adds	r3, #192	; 0xc0
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	589b      	ldr	r3, [r3, r2]
 8001eba:	1dfa      	adds	r2, r7, #7
 8001ebc:	7812      	ldrb	r2, [r2, #0]
 8001ebe:	0011      	movs	r1, r2
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	00d2      	lsls	r2, r2, #3
 8001ec6:	21ff      	movs	r1, #255	; 0xff
 8001ec8:	4091      	lsls	r1, r2
 8001eca:	000a      	movs	r2, r1
 8001ecc:	43d2      	mvns	r2, r2
 8001ece:	401a      	ands	r2, r3
 8001ed0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	019b      	lsls	r3, r3, #6
 8001ed6:	22ff      	movs	r2, #255	; 0xff
 8001ed8:	401a      	ands	r2, r3
 8001eda:	1dfb      	adds	r3, r7, #7
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	0018      	movs	r0, r3
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	4003      	ands	r3, r0
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ee8:	481f      	ldr	r0, [pc, #124]	; (8001f68 <__NVIC_SetPriority+0xd4>)
 8001eea:	1dfb      	adds	r3, r7, #7
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	b25b      	sxtb	r3, r3
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	33c0      	adds	r3, #192	; 0xc0
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001efa:	e031      	b.n	8001f60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001efc:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <__NVIC_SetPriority+0xd8>)
 8001efe:	1dfb      	adds	r3, r7, #7
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	0019      	movs	r1, r3
 8001f04:	230f      	movs	r3, #15
 8001f06:	400b      	ands	r3, r1
 8001f08:	3b08      	subs	r3, #8
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3306      	adds	r3, #6
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	18d3      	adds	r3, r2, r3
 8001f12:	3304      	adds	r3, #4
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	1dfa      	adds	r2, r7, #7
 8001f18:	7812      	ldrb	r2, [r2, #0]
 8001f1a:	0011      	movs	r1, r2
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	400a      	ands	r2, r1
 8001f20:	00d2      	lsls	r2, r2, #3
 8001f22:	21ff      	movs	r1, #255	; 0xff
 8001f24:	4091      	lsls	r1, r2
 8001f26:	000a      	movs	r2, r1
 8001f28:	43d2      	mvns	r2, r2
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	019b      	lsls	r3, r3, #6
 8001f32:	22ff      	movs	r2, #255	; 0xff
 8001f34:	401a      	ands	r2, r3
 8001f36:	1dfb      	adds	r3, r7, #7
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	4003      	ands	r3, r0
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f44:	4809      	ldr	r0, [pc, #36]	; (8001f6c <__NVIC_SetPriority+0xd8>)
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	001c      	movs	r4, r3
 8001f4c:	230f      	movs	r3, #15
 8001f4e:	4023      	ands	r3, r4
 8001f50:	3b08      	subs	r3, #8
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	430a      	orrs	r2, r1
 8001f56:	3306      	adds	r3, #6
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	18c3      	adds	r3, r0, r3
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	601a      	str	r2, [r3, #0]
}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b003      	add	sp, #12
 8001f66:	bd90      	pop	{r4, r7, pc}
 8001f68:	e000e100 	.word	0xe000e100
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	1e5a      	subs	r2, r3, #1
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	045b      	lsls	r3, r3, #17
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d301      	bcc.n	8001f88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f84:	2301      	movs	r3, #1
 8001f86:	e010      	b.n	8001faa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <SysTick_Config+0x44>)
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	3a01      	subs	r2, #1
 8001f8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f90:	2301      	movs	r3, #1
 8001f92:	425b      	negs	r3, r3
 8001f94:	2103      	movs	r1, #3
 8001f96:	0018      	movs	r0, r3
 8001f98:	f7ff ff7c 	bl	8001e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <SysTick_Config+0x44>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <SysTick_Config+0x44>)
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	0018      	movs	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	b002      	add	sp, #8
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	e000e010 	.word	0xe000e010

08001fb8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	210f      	movs	r1, #15
 8001fc4:	187b      	adds	r3, r7, r1
 8001fc6:	1c02      	adds	r2, r0, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	187b      	adds	r3, r7, r1
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b25b      	sxtb	r3, r3
 8001fd2:	0011      	movs	r1, r2
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f7ff ff5d 	bl	8001e94 <__NVIC_SetPriority>
}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b004      	add	sp, #16
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	0002      	movs	r2, r0
 8001fea:	1dfb      	adds	r3, r7, #7
 8001fec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fee:	1dfb      	adds	r3, r7, #7
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	b25b      	sxtb	r3, r3
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f7ff ff33 	bl	8001e60 <__NVIC_EnableIRQ>
}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b002      	add	sp, #8
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0018      	movs	r0, r3
 800200e:	f7ff ffaf 	bl	8001f70 <SysTick_Config>
 8002012:	0003      	movs	r3, r0
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202a:	e147      	b.n	80022bc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4091      	lsls	r1, r2
 8002036:	000a      	movs	r2, r1
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d100      	bne.n	8002044 <HAL_GPIO_Init+0x28>
 8002042:	e138      	b.n	80022b6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2203      	movs	r2, #3
 800204a:	4013      	ands	r3, r2
 800204c:	2b01      	cmp	r3, #1
 800204e:	d005      	beq.n	800205c <HAL_GPIO_Init+0x40>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2203      	movs	r2, #3
 8002056:	4013      	ands	r3, r2
 8002058:	2b02      	cmp	r3, #2
 800205a:	d130      	bne.n	80020be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	409a      	lsls	r2, r3
 800206a:	0013      	movs	r3, r2
 800206c:	43da      	mvns	r2, r3
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	409a      	lsls	r2, r3
 800207e:	0013      	movs	r3, r2
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002092:	2201      	movs	r2, #1
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	409a      	lsls	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	43da      	mvns	r2, r3
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	2201      	movs	r2, #1
 80020aa:	401a      	ands	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	409a      	lsls	r2, r3
 80020b0:	0013      	movs	r3, r2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2203      	movs	r2, #3
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d017      	beq.n	80020fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	409a      	lsls	r2, r3
 80020d8:	0013      	movs	r3, r2
 80020da:	43da      	mvns	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	409a      	lsls	r2, r3
 80020ec:	0013      	movs	r3, r2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2203      	movs	r2, #3
 8002100:	4013      	ands	r3, r2
 8002102:	2b02      	cmp	r3, #2
 8002104:	d123      	bne.n	800214e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	08da      	lsrs	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3208      	adds	r2, #8
 800210e:	0092      	lsls	r2, r2, #2
 8002110:	58d3      	ldr	r3, [r2, r3]
 8002112:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2207      	movs	r2, #7
 8002118:	4013      	ands	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	220f      	movs	r2, #15
 800211e:	409a      	lsls	r2, r3
 8002120:	0013      	movs	r3, r2
 8002122:	43da      	mvns	r2, r3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2107      	movs	r1, #7
 8002132:	400b      	ands	r3, r1
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	409a      	lsls	r2, r3
 8002138:	0013      	movs	r3, r2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	0092      	lsls	r2, r2, #2
 800214a:	6939      	ldr	r1, [r7, #16]
 800214c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	2203      	movs	r2, #3
 800215a:	409a      	lsls	r2, r3
 800215c:	0013      	movs	r3, r2
 800215e:	43da      	mvns	r2, r3
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2203      	movs	r2, #3
 800216c:	401a      	ands	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	409a      	lsls	r2, r3
 8002174:	0013      	movs	r3, r2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	23c0      	movs	r3, #192	; 0xc0
 8002188:	029b      	lsls	r3, r3, #10
 800218a:	4013      	ands	r3, r2
 800218c:	d100      	bne.n	8002190 <HAL_GPIO_Init+0x174>
 800218e:	e092      	b.n	80022b6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002190:	4a50      	ldr	r2, [pc, #320]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	3318      	adds	r3, #24
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	589b      	ldr	r3, [r3, r2]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	2203      	movs	r2, #3
 80021a2:	4013      	ands	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	220f      	movs	r2, #15
 80021a8:	409a      	lsls	r2, r3
 80021aa:	0013      	movs	r3, r2
 80021ac:	43da      	mvns	r2, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	23a0      	movs	r3, #160	; 0xa0
 80021b8:	05db      	lsls	r3, r3, #23
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d013      	beq.n	80021e6 <HAL_GPIO_Init+0x1ca>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a45      	ldr	r2, [pc, #276]	; (80022d8 <HAL_GPIO_Init+0x2bc>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00d      	beq.n	80021e2 <HAL_GPIO_Init+0x1c6>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a44      	ldr	r2, [pc, #272]	; (80022dc <HAL_GPIO_Init+0x2c0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <HAL_GPIO_Init+0x1c2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a43      	ldr	r2, [pc, #268]	; (80022e0 <HAL_GPIO_Init+0x2c4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_GPIO_Init+0x1be>
 80021d6:	2303      	movs	r3, #3
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x1cc>
 80021da:	2305      	movs	r3, #5
 80021dc:	e004      	b.n	80021e8 <HAL_GPIO_Init+0x1cc>
 80021de:	2302      	movs	r3, #2
 80021e0:	e002      	b.n	80021e8 <HAL_GPIO_Init+0x1cc>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x1cc>
 80021e6:	2300      	movs	r3, #0
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	2103      	movs	r1, #3
 80021ec:	400a      	ands	r2, r1
 80021ee:	00d2      	lsls	r2, r2, #3
 80021f0:	4093      	lsls	r3, r2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80021f8:	4936      	ldr	r1, [pc, #216]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	3318      	adds	r3, #24
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002206:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	43da      	mvns	r2, r3
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	035b      	lsls	r3, r3, #13
 800221e:	4013      	ands	r3, r2
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800222a:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002230:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	43da      	mvns	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	039b      	lsls	r3, r3, #14
 8002248:	4013      	ands	r3, r2
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002254:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800225a:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 800225c:	2384      	movs	r3, #132	; 0x84
 800225e:	58d3      	ldr	r3, [r2, r3]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	43da      	mvns	r2, r3
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	029b      	lsls	r3, r3, #10
 8002274:	4013      	ands	r3, r2
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002280:	4914      	ldr	r1, [pc, #80]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 8002282:	2284      	movs	r2, #132	; 0x84
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002288:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	58d3      	ldr	r3, [r2, r3]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43da      	mvns	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	025b      	lsls	r3, r3, #9
 80022a2:	4013      	ands	r3, r2
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022ae:	4909      	ldr	r1, [pc, #36]	; (80022d4 <HAL_GPIO_Init+0x2b8>)
 80022b0:	2280      	movs	r2, #128	; 0x80
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	40da      	lsrs	r2, r3
 80022c4:	1e13      	subs	r3, r2, #0
 80022c6:	d000      	beq.n	80022ca <HAL_GPIO_Init+0x2ae>
 80022c8:	e6b0      	b.n	800202c <HAL_GPIO_Init+0x10>
  }
}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b006      	add	sp, #24
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021800 	.word	0x40021800
 80022d8:	50000400 	.word	0x50000400
 80022dc:	50000800 	.word	0x50000800
 80022e0:	50000c00 	.word	0x50000c00

080022e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	000a      	movs	r2, r1
 80022ee:	1cbb      	adds	r3, r7, #2
 80022f0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	1cba      	adds	r2, r7, #2
 80022f8:	8812      	ldrh	r2, [r2, #0]
 80022fa:	4013      	ands	r3, r2
 80022fc:	d004      	beq.n	8002308 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80022fe:	230f      	movs	r3, #15
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
 8002306:	e003      	b.n	8002310 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002308:	230f      	movs	r3, #15
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002310:	230f      	movs	r3, #15
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	781b      	ldrb	r3, [r3, #0]
}
 8002316:	0018      	movs	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	b004      	add	sp, #16
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	0008      	movs	r0, r1
 8002328:	0011      	movs	r1, r2
 800232a:	1cbb      	adds	r3, r7, #2
 800232c:	1c02      	adds	r2, r0, #0
 800232e:	801a      	strh	r2, [r3, #0]
 8002330:	1c7b      	adds	r3, r7, #1
 8002332:	1c0a      	adds	r2, r1, #0
 8002334:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002336:	1c7b      	adds	r3, r7, #1
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d004      	beq.n	8002348 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800233e:	1cbb      	adds	r3, r7, #2
 8002340:	881a      	ldrh	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002346:	e003      	b.n	8002350 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002348:	1cbb      	adds	r3, r7, #2
 800234a:	881a      	ldrh	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b002      	add	sp, #8
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	000a      	movs	r2, r1
 8002362:	1cbb      	adds	r3, r7, #2
 8002364:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800236c:	1cbb      	adds	r3, r7, #2
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	4013      	ands	r3, r2
 8002374:	041a      	lsls	r2, r3, #16
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	43db      	mvns	r3, r3
 800237a:	1cb9      	adds	r1, r7, #2
 800237c:	8809      	ldrh	r1, [r1, #0]
 800237e:	400b      	ands	r3, r1
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	619a      	str	r2, [r3, #24]
}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	46bd      	mov	sp, r7
 800238a:	b004      	add	sp, #16
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	0002      	movs	r2, r0
 8002398:	1dbb      	adds	r3, r7, #6
 800239a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800239c:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	1dba      	adds	r2, r7, #6
 80023a2:	8812      	ldrh	r2, [r2, #0]
 80023a4:	4013      	ands	r3, r2
 80023a6:	d008      	beq.n	80023ba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80023a8:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80023aa:	1dba      	adds	r2, r7, #6
 80023ac:	8812      	ldrh	r2, [r2, #0]
 80023ae:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80023b0:	1dbb      	adds	r3, r7, #6
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	0018      	movs	r0, r3
 80023b6:	f000 f815 	bl	80023e4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	1dba      	adds	r2, r7, #6
 80023c0:	8812      	ldrh	r2, [r2, #0]
 80023c2:	4013      	ands	r3, r2
 80023c4:	d008      	beq.n	80023d8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80023c8:	1dba      	adds	r2, r7, #6
 80023ca:	8812      	ldrh	r2, [r2, #0]
 80023cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80023ce:	1dbb      	adds	r3, r7, #6
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	0018      	movs	r0, r3
 80023d4:	f7fe fd3e 	bl	8000e54 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80023d8:	46c0      	nop			; (mov r8, r8)
 80023da:	46bd      	mov	sp, r7
 80023dc:	b002      	add	sp, #8
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021800 	.word	0x40021800

080023e4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	0002      	movs	r2, r0
 80023ec:	1dbb      	adds	r3, r7, #6
 80023ee:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b002      	add	sp, #8
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a19      	ldr	r2, [pc, #100]	; (800246c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002406:	4013      	ands	r3, r2
 8002408:	0019      	movs	r1, r3
 800240a:	4b17      	ldr	r3, [pc, #92]	; (8002468 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	430a      	orrs	r2, r1
 8002410:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	429a      	cmp	r2, r3
 800241a:	d11f      	bne.n	800245c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800241c:	4b14      	ldr	r3, [pc, #80]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	0013      	movs	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	189b      	adds	r3, r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4912      	ldr	r1, [pc, #72]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800242a:	0018      	movs	r0, r3
 800242c:	f7fd fe74 	bl	8000118 <__udivsi3>
 8002430:	0003      	movs	r3, r0
 8002432:	3301      	adds	r3, #1
 8002434:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002436:	e008      	b.n	800244a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3b01      	subs	r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	e001      	b.n	800244a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e009      	b.n	800245e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	401a      	ands	r2, r3
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	429a      	cmp	r2, r3
 800245a:	d0ed      	beq.n	8002438 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	0018      	movs	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	b004      	add	sp, #16
 8002464:	bd80      	pop	{r7, pc}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	40007000 	.word	0x40007000
 800246c:	fffff9ff 	.word	0xfffff9ff
 8002470:	20000040 	.word	0x20000040
 8002474:	000f4240 	.word	0x000f4240

08002478 <HAL_PWREx_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Check PWR exti Rising flag */
  if (__HAL_PWR_PVD_EXTI_GET_RISING_FLAG() != 0x0U)
 800247c:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	025b      	lsls	r3, r3, #9
 8002484:	4013      	ands	r3, r2
 8002486:	d005      	beq.n	8002494 <HAL_PWREx_PVD_IRQHandler+0x1c>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_RISING_FLAG();
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 800248a:	2280      	movs	r2, #128	; 0x80
 800248c:	0252      	lsls	r2, r2, #9
 800248e:	60da      	str	r2, [r3, #12]

    /* PWR PVD interrupt rising user callback */
    HAL_PWREx_PVD_Rising_Callback();
 8002490:	f000 f812 	bl	80024b8 <HAL_PWREx_PVD_Rising_Callback>
  }

  /* Check PWR exti fallling flag */
  if (__HAL_PWR_PVD_EXTI_GET_FALLING_FLAG() != 0x0U)
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	025b      	lsls	r3, r3, #9
 800249c:	4013      	ands	r3, r2
 800249e:	d005      	beq.n	80024ac <HAL_PWREx_PVD_IRQHandler+0x34>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FALLING_FLAG();
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80024a2:	2280      	movs	r2, #128	; 0x80
 80024a4:	0252      	lsls	r2, r2, #9
 80024a6:	611a      	str	r2, [r3, #16]

    /* PWR PVD interrupt falling user callback */
    HAL_PWREx_PVD_Falling_Callback();
 80024a8:	f000 f80b 	bl	80024c2 <HAL_PWREx_PVD_Falling_Callback>
  }
}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	40021800 	.word	0x40021800

080024b8 <HAL_PWREx_PVD_Rising_Callback>:
/**
  * @brief  PWR PVD interrupt rising callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Rising_Callback(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Rising_Callback can be implemented in the user file
  */
}
 80024bc:	46c0      	nop			; (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_PWREx_PVD_Falling_Callback>:
/**
  * @brief  PWR PVD interrupt Falling callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Falling_Callback(void)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Falling_Callback can be implemented in the user file
  */
}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	23e0      	movs	r3, #224	; 0xe0
 80024d6:	01db      	lsls	r3, r3, #7
 80024d8:	4013      	ands	r3, r2
}
 80024da:	0018      	movs	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40021000 	.word	0x40021000

080024e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e2fe      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2201      	movs	r2, #1
 80024fc:	4013      	ands	r3, r2
 80024fe:	d100      	bne.n	8002502 <HAL_RCC_OscConfig+0x1e>
 8002500:	e07c      	b.n	80025fc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002502:	4bc3      	ldr	r3, [pc, #780]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2238      	movs	r2, #56	; 0x38
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800250c:	4bc0      	ldr	r3, [pc, #768]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2203      	movs	r2, #3
 8002512:	4013      	ands	r3, r2
 8002514:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	2b10      	cmp	r3, #16
 800251a:	d102      	bne.n	8002522 <HAL_RCC_OscConfig+0x3e>
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	2b03      	cmp	r3, #3
 8002520:	d002      	beq.n	8002528 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d10b      	bne.n	8002540 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	4bb9      	ldr	r3, [pc, #740]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	029b      	lsls	r3, r3, #10
 8002530:	4013      	ands	r3, r2
 8002532:	d062      	beq.n	80025fa <HAL_RCC_OscConfig+0x116>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d15e      	bne.n	80025fa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e2d9      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	025b      	lsls	r3, r3, #9
 8002548:	429a      	cmp	r2, r3
 800254a:	d107      	bne.n	800255c <HAL_RCC_OscConfig+0x78>
 800254c:	4bb0      	ldr	r3, [pc, #704]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4baf      	ldr	r3, [pc, #700]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 8002552:	2180      	movs	r1, #128	; 0x80
 8002554:	0249      	lsls	r1, r1, #9
 8002556:	430a      	orrs	r2, r1
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e020      	b.n	800259e <HAL_RCC_OscConfig+0xba>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	23a0      	movs	r3, #160	; 0xa0
 8002562:	02db      	lsls	r3, r3, #11
 8002564:	429a      	cmp	r2, r3
 8002566:	d10e      	bne.n	8002586 <HAL_RCC_OscConfig+0xa2>
 8002568:	4ba9      	ldr	r3, [pc, #676]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4ba8      	ldr	r3, [pc, #672]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	02c9      	lsls	r1, r1, #11
 8002572:	430a      	orrs	r2, r1
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	4ba6      	ldr	r3, [pc, #664]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4ba5      	ldr	r3, [pc, #660]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 800257c:	2180      	movs	r1, #128	; 0x80
 800257e:	0249      	lsls	r1, r1, #9
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e00b      	b.n	800259e <HAL_RCC_OscConfig+0xba>
 8002586:	4ba2      	ldr	r3, [pc, #648]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4ba1      	ldr	r3, [pc, #644]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 800258c:	49a1      	ldr	r1, [pc, #644]	; (8002814 <HAL_RCC_OscConfig+0x330>)
 800258e:	400a      	ands	r2, r1
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	4b9f      	ldr	r3, [pc, #636]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4b9e      	ldr	r3, [pc, #632]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 8002598:	499f      	ldr	r1, [pc, #636]	; (8002818 <HAL_RCC_OscConfig+0x334>)
 800259a:	400a      	ands	r2, r1
 800259c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d014      	beq.n	80025d0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7ff fc51 	bl	8001e4c <HAL_GetTick>
 80025aa:	0003      	movs	r3, r0
 80025ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b0:	f7ff fc4c 	bl	8001e4c <HAL_GetTick>
 80025b4:	0002      	movs	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	; 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e298      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025c2:	4b93      	ldr	r3, [pc, #588]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	029b      	lsls	r3, r3, #10
 80025ca:	4013      	ands	r3, r2
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0xcc>
 80025ce:	e015      	b.n	80025fc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7ff fc3c 	bl	8001e4c <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025da:	f7ff fc37 	bl	8001e4c <HAL_GetTick>
 80025de:	0002      	movs	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b64      	cmp	r3, #100	; 0x64
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e283      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ec:	4b88      	ldr	r3, [pc, #544]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	029b      	lsls	r3, r3, #10
 80025f4:	4013      	ands	r3, r2
 80025f6:	d1f0      	bne.n	80025da <HAL_RCC_OscConfig+0xf6>
 80025f8:	e000      	b.n	80025fc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2202      	movs	r2, #2
 8002602:	4013      	ands	r3, r2
 8002604:	d100      	bne.n	8002608 <HAL_RCC_OscConfig+0x124>
 8002606:	e099      	b.n	800273c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002608:	4b81      	ldr	r3, [pc, #516]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2238      	movs	r2, #56	; 0x38
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002612:	4b7f      	ldr	r3, [pc, #508]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2203      	movs	r2, #3
 8002618:	4013      	ands	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	2b10      	cmp	r3, #16
 8002620:	d102      	bne.n	8002628 <HAL_RCC_OscConfig+0x144>
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d002      	beq.n	800262e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d135      	bne.n	800269a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800262e:	4b78      	ldr	r3, [pc, #480]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4013      	ands	r3, r2
 8002638:	d005      	beq.n	8002646 <HAL_RCC_OscConfig+0x162>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e256      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002646:	4b72      	ldr	r3, [pc, #456]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4a74      	ldr	r2, [pc, #464]	; (800281c <HAL_RCC_OscConfig+0x338>)
 800264c:	4013      	ands	r3, r2
 800264e:	0019      	movs	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	021a      	lsls	r2, r3, #8
 8002656:	4b6e      	ldr	r3, [pc, #440]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 8002658:	430a      	orrs	r2, r1
 800265a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d112      	bne.n	8002688 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002662:	4b6b      	ldr	r3, [pc, #428]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a6e      	ldr	r2, [pc, #440]	; (8002820 <HAL_RCC_OscConfig+0x33c>)
 8002668:	4013      	ands	r3, r2
 800266a:	0019      	movs	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	4b67      	ldr	r3, [pc, #412]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 8002672:	430a      	orrs	r2, r1
 8002674:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002676:	4b66      	ldr	r3, [pc, #408]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	0adb      	lsrs	r3, r3, #11
 800267c:	2207      	movs	r2, #7
 800267e:	4013      	ands	r3, r2
 8002680:	4a68      	ldr	r2, [pc, #416]	; (8002824 <HAL_RCC_OscConfig+0x340>)
 8002682:	40da      	lsrs	r2, r3
 8002684:	4b68      	ldr	r3, [pc, #416]	; (8002828 <HAL_RCC_OscConfig+0x344>)
 8002686:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002688:	4b68      	ldr	r3, [pc, #416]	; (800282c <HAL_RCC_OscConfig+0x348>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0018      	movs	r0, r3
 800268e:	f7ff fb81 	bl	8001d94 <HAL_InitTick>
 8002692:	1e03      	subs	r3, r0, #0
 8002694:	d051      	beq.n	800273a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e22c      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d030      	beq.n	8002704 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80026a2:	4b5b      	ldr	r3, [pc, #364]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a5e      	ldr	r2, [pc, #376]	; (8002820 <HAL_RCC_OscConfig+0x33c>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	0019      	movs	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	4b57      	ldr	r3, [pc, #348]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 80026b2:	430a      	orrs	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80026b6:	4b56      	ldr	r3, [pc, #344]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b55      	ldr	r3, [pc, #340]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 80026bc:	2180      	movs	r1, #128	; 0x80
 80026be:	0049      	lsls	r1, r1, #1
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7ff fbc2 	bl	8001e4c <HAL_GetTick>
 80026c8:	0003      	movs	r3, r0
 80026ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ce:	f7ff fbbd 	bl	8001e4c <HAL_GetTick>
 80026d2:	0002      	movs	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e209      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e0:	4b4b      	ldr	r3, [pc, #300]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4013      	ands	r3, r2
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ec:	4b48      	ldr	r3, [pc, #288]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a4a      	ldr	r2, [pc, #296]	; (800281c <HAL_RCC_OscConfig+0x338>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	021a      	lsls	r2, r3, #8
 80026fc:	4b44      	ldr	r3, [pc, #272]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	e01b      	b.n	800273c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002704:	4b42      	ldr	r3, [pc, #264]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b41      	ldr	r3, [pc, #260]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 800270a:	4949      	ldr	r1, [pc, #292]	; (8002830 <HAL_RCC_OscConfig+0x34c>)
 800270c:	400a      	ands	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7ff fb9c 	bl	8001e4c <HAL_GetTick>
 8002714:	0003      	movs	r3, r0
 8002716:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271a:	f7ff fb97 	bl	8001e4c <HAL_GetTick>
 800271e:	0002      	movs	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e1e3      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800272c:	4b38      	ldr	r3, [pc, #224]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4013      	ands	r3, r2
 8002736:	d1f0      	bne.n	800271a <HAL_RCC_OscConfig+0x236>
 8002738:	e000      	b.n	800273c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800273a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2208      	movs	r2, #8
 8002742:	4013      	ands	r3, r2
 8002744:	d047      	beq.n	80027d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002746:	4b32      	ldr	r3, [pc, #200]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2238      	movs	r2, #56	; 0x38
 800274c:	4013      	ands	r3, r2
 800274e:	2b18      	cmp	r3, #24
 8002750:	d10a      	bne.n	8002768 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002752:	4b2f      	ldr	r3, [pc, #188]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 8002754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002756:	2202      	movs	r2, #2
 8002758:	4013      	ands	r3, r2
 800275a:	d03c      	beq.n	80027d6 <HAL_RCC_OscConfig+0x2f2>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d138      	bne.n	80027d6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e1c5      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d019      	beq.n	80027a4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002770:	4b27      	ldr	r3, [pc, #156]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 8002772:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002774:	4b26      	ldr	r3, [pc, #152]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 8002776:	2101      	movs	r1, #1
 8002778:	430a      	orrs	r2, r1
 800277a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7ff fb66 	bl	8001e4c <HAL_GetTick>
 8002780:	0003      	movs	r3, r0
 8002782:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002786:	f7ff fb61 	bl	8001e4c <HAL_GetTick>
 800278a:	0002      	movs	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e1ad      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002798:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 800279a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279c:	2202      	movs	r2, #2
 800279e:	4013      	ands	r3, r2
 80027a0:	d0f1      	beq.n	8002786 <HAL_RCC_OscConfig+0x2a2>
 80027a2:	e018      	b.n	80027d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80027a4:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 80027a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 80027aa:	2101      	movs	r1, #1
 80027ac:	438a      	bics	r2, r1
 80027ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7ff fb4c 	bl	8001e4c <HAL_GetTick>
 80027b4:	0003      	movs	r3, r0
 80027b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ba:	f7ff fb47 	bl	8001e4c <HAL_GetTick>
 80027be:	0002      	movs	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e193      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027cc:	4b10      	ldr	r3, [pc, #64]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 80027ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d0:	2202      	movs	r2, #2
 80027d2:	4013      	ands	r3, r2
 80027d4:	d1f1      	bne.n	80027ba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2204      	movs	r2, #4
 80027dc:	4013      	ands	r3, r2
 80027de:	d100      	bne.n	80027e2 <HAL_RCC_OscConfig+0x2fe>
 80027e0:	e0c6      	b.n	8002970 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e2:	231f      	movs	r3, #31
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2238      	movs	r2, #56	; 0x38
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	d11e      	bne.n	8002834 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_RCC_OscConfig+0x32c>)
 80027f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fa:	2202      	movs	r2, #2
 80027fc:	4013      	ands	r3, r2
 80027fe:	d100      	bne.n	8002802 <HAL_RCC_OscConfig+0x31e>
 8002800:	e0b6      	b.n	8002970 <HAL_RCC_OscConfig+0x48c>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d000      	beq.n	800280c <HAL_RCC_OscConfig+0x328>
 800280a:	e0b1      	b.n	8002970 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e171      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
 8002810:	40021000 	.word	0x40021000
 8002814:	fffeffff 	.word	0xfffeffff
 8002818:	fffbffff 	.word	0xfffbffff
 800281c:	ffff80ff 	.word	0xffff80ff
 8002820:	ffffc7ff 	.word	0xffffc7ff
 8002824:	00f42400 	.word	0x00f42400
 8002828:	20000040 	.word	0x20000040
 800282c:	20000044 	.word	0x20000044
 8002830:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002834:	4bb1      	ldr	r3, [pc, #708]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 8002836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	055b      	lsls	r3, r3, #21
 800283c:	4013      	ands	r3, r2
 800283e:	d101      	bne.n	8002844 <HAL_RCC_OscConfig+0x360>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <HAL_RCC_OscConfig+0x362>
 8002844:	2300      	movs	r3, #0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d011      	beq.n	800286e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	4bac      	ldr	r3, [pc, #688]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 800284c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800284e:	4bab      	ldr	r3, [pc, #684]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 8002850:	2180      	movs	r1, #128	; 0x80
 8002852:	0549      	lsls	r1, r1, #21
 8002854:	430a      	orrs	r2, r1
 8002856:	63da      	str	r2, [r3, #60]	; 0x3c
 8002858:	4ba8      	ldr	r3, [pc, #672]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 800285a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	055b      	lsls	r3, r3, #21
 8002860:	4013      	ands	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002866:	231f      	movs	r3, #31
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800286e:	4ba4      	ldr	r3, [pc, #656]	; (8002b00 <HAL_RCC_OscConfig+0x61c>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4013      	ands	r3, r2
 8002878:	d11a      	bne.n	80028b0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800287a:	4ba1      	ldr	r3, [pc, #644]	; (8002b00 <HAL_RCC_OscConfig+0x61c>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	4ba0      	ldr	r3, [pc, #640]	; (8002b00 <HAL_RCC_OscConfig+0x61c>)
 8002880:	2180      	movs	r1, #128	; 0x80
 8002882:	0049      	lsls	r1, r1, #1
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002888:	f7ff fae0 	bl	8001e4c <HAL_GetTick>
 800288c:	0003      	movs	r3, r0
 800288e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002892:	f7ff fadb 	bl	8001e4c <HAL_GetTick>
 8002896:	0002      	movs	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e127      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028a4:	4b96      	ldr	r3, [pc, #600]	; (8002b00 <HAL_RCC_OscConfig+0x61c>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4013      	ands	r3, r2
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d106      	bne.n	80028c6 <HAL_RCC_OscConfig+0x3e2>
 80028b8:	4b90      	ldr	r3, [pc, #576]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 80028ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028bc:	4b8f      	ldr	r3, [pc, #572]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 80028be:	2101      	movs	r1, #1
 80028c0:	430a      	orrs	r2, r1
 80028c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80028c4:	e01c      	b.n	8002900 <HAL_RCC_OscConfig+0x41c>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b05      	cmp	r3, #5
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x404>
 80028ce:	4b8b      	ldr	r3, [pc, #556]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 80028d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028d2:	4b8a      	ldr	r3, [pc, #552]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 80028d4:	2104      	movs	r1, #4
 80028d6:	430a      	orrs	r2, r1
 80028d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80028da:	4b88      	ldr	r3, [pc, #544]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 80028dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028de:	4b87      	ldr	r3, [pc, #540]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 80028e0:	2101      	movs	r1, #1
 80028e2:	430a      	orrs	r2, r1
 80028e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80028e6:	e00b      	b.n	8002900 <HAL_RCC_OscConfig+0x41c>
 80028e8:	4b84      	ldr	r3, [pc, #528]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 80028ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028ec:	4b83      	ldr	r3, [pc, #524]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 80028ee:	2101      	movs	r1, #1
 80028f0:	438a      	bics	r2, r1
 80028f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80028f4:	4b81      	ldr	r3, [pc, #516]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 80028f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028f8:	4b80      	ldr	r3, [pc, #512]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 80028fa:	2104      	movs	r1, #4
 80028fc:	438a      	bics	r2, r1
 80028fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d014      	beq.n	8002932 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7ff faa0 	bl	8001e4c <HAL_GetTick>
 800290c:	0003      	movs	r3, r0
 800290e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002910:	e009      	b.n	8002926 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7ff fa9b 	bl	8001e4c <HAL_GetTick>
 8002916:	0002      	movs	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	4a79      	ldr	r2, [pc, #484]	; (8002b04 <HAL_RCC_OscConfig+0x620>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e0e6      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002926:	4b75      	ldr	r3, [pc, #468]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 8002928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292a:	2202      	movs	r2, #2
 800292c:	4013      	ands	r3, r2
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x42e>
 8002930:	e013      	b.n	800295a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002932:	f7ff fa8b 	bl	8001e4c <HAL_GetTick>
 8002936:	0003      	movs	r3, r0
 8002938:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800293a:	e009      	b.n	8002950 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293c:	f7ff fa86 	bl	8001e4c <HAL_GetTick>
 8002940:	0002      	movs	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	4a6f      	ldr	r2, [pc, #444]	; (8002b04 <HAL_RCC_OscConfig+0x620>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e0d1      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002950:	4b6a      	ldr	r3, [pc, #424]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 8002952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002954:	2202      	movs	r2, #2
 8002956:	4013      	ands	r3, r2
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800295a:	231f      	movs	r3, #31
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002964:	4b65      	ldr	r3, [pc, #404]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 8002966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002968:	4b64      	ldr	r3, [pc, #400]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 800296a:	4967      	ldr	r1, [pc, #412]	; (8002b08 <HAL_RCC_OscConfig+0x624>)
 800296c:	400a      	ands	r2, r1
 800296e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d100      	bne.n	800297a <HAL_RCC_OscConfig+0x496>
 8002978:	e0bb      	b.n	8002af2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800297a:	4b60      	ldr	r3, [pc, #384]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2238      	movs	r2, #56	; 0x38
 8002980:	4013      	ands	r3, r2
 8002982:	2b10      	cmp	r3, #16
 8002984:	d100      	bne.n	8002988 <HAL_RCC_OscConfig+0x4a4>
 8002986:	e07b      	b.n	8002a80 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d156      	bne.n	8002a3e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002990:	4b5a      	ldr	r3, [pc, #360]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b59      	ldr	r3, [pc, #356]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 8002996:	495d      	ldr	r1, [pc, #372]	; (8002b0c <HAL_RCC_OscConfig+0x628>)
 8002998:	400a      	ands	r2, r1
 800299a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7ff fa56 	bl	8001e4c <HAL_GetTick>
 80029a0:	0003      	movs	r3, r0
 80029a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a6:	f7ff fa51 	bl	8001e4c <HAL_GetTick>
 80029aa:	0002      	movs	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e09d      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b8:	4b50      	ldr	r3, [pc, #320]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	049b      	lsls	r3, r3, #18
 80029c0:	4013      	ands	r3, r2
 80029c2:	d1f0      	bne.n	80029a6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c4:	4b4d      	ldr	r3, [pc, #308]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4a51      	ldr	r2, [pc, #324]	; (8002b10 <HAL_RCC_OscConfig+0x62c>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	0019      	movs	r1, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1a      	ldr	r2, [r3, #32]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f0:	431a      	orrs	r2, r3
 80029f2:	4b42      	ldr	r3, [pc, #264]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 80029f4:	430a      	orrs	r2, r1
 80029f6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f8:	4b40      	ldr	r3, [pc, #256]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 80029fe:	2180      	movs	r1, #128	; 0x80
 8002a00:	0449      	lsls	r1, r1, #17
 8002a02:	430a      	orrs	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002a06:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	4b3c      	ldr	r3, [pc, #240]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 8002a0c:	2180      	movs	r1, #128	; 0x80
 8002a0e:	0549      	lsls	r1, r1, #21
 8002a10:	430a      	orrs	r2, r1
 8002a12:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7ff fa1a 	bl	8001e4c <HAL_GetTick>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1e:	f7ff fa15 	bl	8001e4c <HAL_GetTick>
 8002a22:	0002      	movs	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e061      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a30:	4b32      	ldr	r3, [pc, #200]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	049b      	lsls	r3, r3, #18
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x53a>
 8002a3c:	e059      	b.n	8002af2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3e:	4b2f      	ldr	r3, [pc, #188]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	4b2e      	ldr	r3, [pc, #184]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 8002a44:	4931      	ldr	r1, [pc, #196]	; (8002b0c <HAL_RCC_OscConfig+0x628>)
 8002a46:	400a      	ands	r2, r1
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7ff f9ff 	bl	8001e4c <HAL_GetTick>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a54:	f7ff f9fa 	bl	8001e4c <HAL_GetTick>
 8002a58:	0002      	movs	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e046      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a66:	4b25      	ldr	r3, [pc, #148]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	049b      	lsls	r3, r3, #18
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002a72:	4b22      	ldr	r3, [pc, #136]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	4b21      	ldr	r3, [pc, #132]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 8002a78:	4926      	ldr	r1, [pc, #152]	; (8002b14 <HAL_RCC_OscConfig+0x630>)
 8002a7a:	400a      	ands	r2, r1
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	e038      	b.n	8002af2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e033      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <HAL_RCC_OscConfig+0x618>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2203      	movs	r2, #3
 8002a96:	401a      	ands	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d126      	bne.n	8002aee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2270      	movs	r2, #112	; 0x70
 8002aa4:	401a      	ands	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d11f      	bne.n	8002aee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	23fe      	movs	r3, #254	; 0xfe
 8002ab2:	01db      	lsls	r3, r3, #7
 8002ab4:	401a      	ands	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d116      	bne.n	8002aee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	23f8      	movs	r3, #248	; 0xf8
 8002ac4:	039b      	lsls	r3, r3, #14
 8002ac6:	401a      	ands	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d10e      	bne.n	8002aee <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	23e0      	movs	r3, #224	; 0xe0
 8002ad4:	051b      	lsls	r3, r3, #20
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d106      	bne.n	8002aee <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	0f5b      	lsrs	r3, r3, #29
 8002ae4:	075a      	lsls	r2, r3, #29
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d001      	beq.n	8002af2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	0018      	movs	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b008      	add	sp, #32
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40007000 	.word	0x40007000
 8002b04:	00001388 	.word	0x00001388
 8002b08:	efffffff 	.word	0xefffffff
 8002b0c:	feffffff 	.word	0xfeffffff
 8002b10:	11c1808c 	.word	0x11c1808c
 8002b14:	eefefffc 	.word	0xeefefffc

08002b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0e9      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b76      	ldr	r3, [pc, #472]	; (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2207      	movs	r2, #7
 8002b32:	4013      	ands	r3, r2
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d91e      	bls.n	8002b78 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b73      	ldr	r3, [pc, #460]	; (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2207      	movs	r2, #7
 8002b40:	4393      	bics	r3, r2
 8002b42:	0019      	movs	r1, r3
 8002b44:	4b70      	ldr	r3, [pc, #448]	; (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b4c:	f7ff f97e 	bl	8001e4c <HAL_GetTick>
 8002b50:	0003      	movs	r3, r0
 8002b52:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b54:	e009      	b.n	8002b6a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b56:	f7ff f979 	bl	8001e4c <HAL_GetTick>
 8002b5a:	0002      	movs	r2, r0
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	4a6a      	ldr	r2, [pc, #424]	; (8002d0c <HAL_RCC_ClockConfig+0x1f4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e0ca      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b6a:	4b67      	ldr	r3, [pc, #412]	; (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2207      	movs	r2, #7
 8002b70:	4013      	ands	r3, r2
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d1ee      	bne.n	8002b56 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d015      	beq.n	8002bae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2204      	movs	r2, #4
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d006      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b8c:	4b60      	ldr	r3, [pc, #384]	; (8002d10 <HAL_RCC_ClockConfig+0x1f8>)
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	4b5f      	ldr	r3, [pc, #380]	; (8002d10 <HAL_RCC_ClockConfig+0x1f8>)
 8002b92:	21e0      	movs	r1, #224	; 0xe0
 8002b94:	01c9      	lsls	r1, r1, #7
 8002b96:	430a      	orrs	r2, r1
 8002b98:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9a:	4b5d      	ldr	r3, [pc, #372]	; (8002d10 <HAL_RCC_ClockConfig+0x1f8>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	4a5d      	ldr	r2, [pc, #372]	; (8002d14 <HAL_RCC_ClockConfig+0x1fc>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	4b59      	ldr	r3, [pc, #356]	; (8002d10 <HAL_RCC_ClockConfig+0x1f8>)
 8002baa:	430a      	orrs	r2, r1
 8002bac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d057      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d107      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bc0:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <HAL_RCC_ClockConfig+0x1f8>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	029b      	lsls	r3, r3, #10
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d12b      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e097      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d107      	bne.n	8002be8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd8:	4b4d      	ldr	r3, [pc, #308]	; (8002d10 <HAL_RCC_ClockConfig+0x1f8>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	049b      	lsls	r3, r3, #18
 8002be0:	4013      	ands	r3, r2
 8002be2:	d11f      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e08b      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf0:	4b47      	ldr	r3, [pc, #284]	; (8002d10 <HAL_RCC_ClockConfig+0x1f8>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d113      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e07f      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c08:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <HAL_RCC_ClockConfig+0x1f8>)
 8002c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d108      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e074      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c16:	4b3e      	ldr	r3, [pc, #248]	; (8002d10 <HAL_RCC_ClockConfig+0x1f8>)
 8002c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e06d      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c24:	4b3a      	ldr	r3, [pc, #232]	; (8002d10 <HAL_RCC_ClockConfig+0x1f8>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2207      	movs	r2, #7
 8002c2a:	4393      	bics	r3, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <HAL_RCC_ClockConfig+0x1f8>)
 8002c34:	430a      	orrs	r2, r1
 8002c36:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c38:	f7ff f908 	bl	8001e4c <HAL_GetTick>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c40:	e009      	b.n	8002c56 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c42:	f7ff f903 	bl	8001e4c <HAL_GetTick>
 8002c46:	0002      	movs	r2, r0
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	4a2f      	ldr	r2, [pc, #188]	; (8002d0c <HAL_RCC_ClockConfig+0x1f4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e054      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	4b2e      	ldr	r3, [pc, #184]	; (8002d10 <HAL_RCC_ClockConfig+0x1f8>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2238      	movs	r2, #56	; 0x38
 8002c5c:	401a      	ands	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1ec      	bne.n	8002c42 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c68:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2207      	movs	r2, #7
 8002c6e:	4013      	ands	r3, r2
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d21e      	bcs.n	8002cb4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2207      	movs	r2, #7
 8002c7c:	4393      	bics	r3, r2
 8002c7e:	0019      	movs	r1, r3
 8002c80:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c88:	f7ff f8e0 	bl	8001e4c <HAL_GetTick>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c90:	e009      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c92:	f7ff f8db 	bl	8001e4c <HAL_GetTick>
 8002c96:	0002      	movs	r2, r0
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	4a1b      	ldr	r2, [pc, #108]	; (8002d0c <HAL_RCC_ClockConfig+0x1f4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e02c      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ca6:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2207      	movs	r2, #7
 8002cac:	4013      	ands	r3, r2
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d1ee      	bne.n	8002c92 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2204      	movs	r2, #4
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d009      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002cbe:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <HAL_RCC_ClockConfig+0x1f8>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	4a15      	ldr	r2, [pc, #84]	; (8002d18 <HAL_RCC_ClockConfig+0x200>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_RCC_ClockConfig+0x1f8>)
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002cd2:	f000 f829 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 8002cd6:	0001      	movs	r1, r0
 8002cd8:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <HAL_RCC_ClockConfig+0x1f8>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	0a1b      	lsrs	r3, r3, #8
 8002cde:	220f      	movs	r2, #15
 8002ce0:	401a      	ands	r2, r3
 8002ce2:	4b0e      	ldr	r3, [pc, #56]	; (8002d1c <HAL_RCC_ClockConfig+0x204>)
 8002ce4:	0092      	lsls	r2, r2, #2
 8002ce6:	58d3      	ldr	r3, [r2, r3]
 8002ce8:	221f      	movs	r2, #31
 8002cea:	4013      	ands	r3, r2
 8002cec:	000a      	movs	r2, r1
 8002cee:	40da      	lsrs	r2, r3
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_ClockConfig+0x208>)
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCC_ClockConfig+0x20c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7ff f84b 	bl	8001d94 <HAL_InitTick>
 8002cfe:	0003      	movs	r3, r0
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b004      	add	sp, #16
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40022000 	.word	0x40022000
 8002d0c:	00001388 	.word	0x00001388
 8002d10:	40021000 	.word	0x40021000
 8002d14:	fffff0ff 	.word	0xfffff0ff
 8002d18:	ffff8fff 	.word	0xffff8fff
 8002d1c:	080069ac 	.word	0x080069ac
 8002d20:	20000040 	.word	0x20000040
 8002d24:	20000044 	.word	0x20000044

08002d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d2e:	4b3c      	ldr	r3, [pc, #240]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2238      	movs	r2, #56	; 0x38
 8002d34:	4013      	ands	r3, r2
 8002d36:	d10f      	bne.n	8002d58 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002d38:	4b39      	ldr	r3, [pc, #228]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	0adb      	lsrs	r3, r3, #11
 8002d3e:	2207      	movs	r2, #7
 8002d40:	4013      	ands	r3, r2
 8002d42:	2201      	movs	r2, #1
 8002d44:	409a      	lsls	r2, r3
 8002d46:	0013      	movs	r3, r2
 8002d48:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002d4a:	6839      	ldr	r1, [r7, #0]
 8002d4c:	4835      	ldr	r0, [pc, #212]	; (8002e24 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d4e:	f7fd f9e3 	bl	8000118 <__udivsi3>
 8002d52:	0003      	movs	r3, r0
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	e05d      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d58:	4b31      	ldr	r3, [pc, #196]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2238      	movs	r2, #56	; 0x38
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d102      	bne.n	8002d6a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d64:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x100>)
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	e054      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d6a:	4b2d      	ldr	r3, [pc, #180]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2238      	movs	r2, #56	; 0x38
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b10      	cmp	r3, #16
 8002d74:	d138      	bne.n	8002de8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002d76:	4b2a      	ldr	r3, [pc, #168]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d80:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	2207      	movs	r2, #7
 8002d88:	4013      	ands	r3, r2
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d10d      	bne.n	8002db0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	4824      	ldr	r0, [pc, #144]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x100>)
 8002d98:	f7fd f9be 	bl	8000118 <__udivsi3>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	0019      	movs	r1, r3
 8002da0:	4b1f      	ldr	r3, [pc, #124]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	0a1b      	lsrs	r3, r3, #8
 8002da6:	227f      	movs	r2, #127	; 0x7f
 8002da8:	4013      	ands	r3, r2
 8002daa:	434b      	muls	r3, r1
 8002dac:	617b      	str	r3, [r7, #20]
        break;
 8002dae:	e00d      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	481c      	ldr	r0, [pc, #112]	; (8002e24 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002db4:	f7fd f9b0 	bl	8000118 <__udivsi3>
 8002db8:	0003      	movs	r3, r0
 8002dba:	0019      	movs	r1, r3
 8002dbc:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	0a1b      	lsrs	r3, r3, #8
 8002dc2:	227f      	movs	r2, #127	; 0x7f
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	434b      	muls	r3, r1
 8002dc8:	617b      	str	r3, [r7, #20]
        break;
 8002dca:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002dcc:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	0f5b      	lsrs	r3, r3, #29
 8002dd2:	2207      	movs	r2, #7
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	6978      	ldr	r0, [r7, #20]
 8002dde:	f7fd f99b 	bl	8000118 <__udivsi3>
 8002de2:	0003      	movs	r3, r0
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	e015      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002de8:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2238      	movs	r2, #56	; 0x38
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b20      	cmp	r3, #32
 8002df2:	d103      	bne.n	8002dfc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	e00b      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2238      	movs	r2, #56	; 0x38
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b18      	cmp	r3, #24
 8002e06:	d103      	bne.n	8002e10 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002e08:	23fa      	movs	r3, #250	; 0xfa
 8002e0a:	01db      	lsls	r3, r3, #7
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	e001      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e14:	693b      	ldr	r3, [r7, #16]
}
 8002e16:	0018      	movs	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b006      	add	sp, #24
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	40021000 	.word	0x40021000
 8002e24:	00f42400 	.word	0x00f42400
 8002e28:	007a1200 	.word	0x007a1200

08002e2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e30:	4b02      	ldr	r3, [pc, #8]	; (8002e3c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e32:	681b      	ldr	r3, [r3, #0]
}
 8002e34:	0018      	movs	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	20000040 	.word	0x20000040

08002e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e40:	b5b0      	push	{r4, r5, r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002e44:	f7ff fff2 	bl	8002e2c <HAL_RCC_GetHCLKFreq>
 8002e48:	0004      	movs	r4, r0
 8002e4a:	f7ff fb3f 	bl	80024cc <LL_RCC_GetAPB1Prescaler>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	0b1a      	lsrs	r2, r3, #12
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e54:	0092      	lsls	r2, r2, #2
 8002e56:	58d3      	ldr	r3, [r2, r3]
 8002e58:	221f      	movs	r2, #31
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	40dc      	lsrs	r4, r3
 8002e5e:	0023      	movs	r3, r4
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bdb0      	pop	{r4, r5, r7, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	080069ec 	.word	0x080069ec

08002e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002e74:	2313      	movs	r3, #19
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e7c:	2312      	movs	r3, #18
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	029b      	lsls	r3, r3, #10
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d100      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002e90:	e0a3      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e92:	2011      	movs	r0, #17
 8002e94:	183b      	adds	r3, r7, r0
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e9a:	4ba5      	ldr	r3, [pc, #660]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	055b      	lsls	r3, r3, #21
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d110      	bne.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea6:	4ba2      	ldr	r3, [pc, #648]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eaa:	4ba1      	ldr	r3, [pc, #644]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002eac:	2180      	movs	r1, #128	; 0x80
 8002eae:	0549      	lsls	r1, r1, #21
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002eb4:	4b9e      	ldr	r3, [pc, #632]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	055b      	lsls	r3, r3, #21
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec2:	183b      	adds	r3, r7, r0
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ec8:	4b9a      	ldr	r3, [pc, #616]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b99      	ldr	r3, [pc, #612]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002ece:	2180      	movs	r1, #128	; 0x80
 8002ed0:	0049      	lsls	r1, r1, #1
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ed6:	f7fe ffb9 	bl	8001e4c <HAL_GetTick>
 8002eda:	0003      	movs	r3, r0
 8002edc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ede:	e00b      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee0:	f7fe ffb4 	bl	8001e4c <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d904      	bls.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002eee:	2313      	movs	r3, #19
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	701a      	strb	r2, [r3, #0]
        break;
 8002ef6:	e005      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ef8:	4b8e      	ldr	r3, [pc, #568]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4013      	ands	r3, r2
 8002f02:	d0ed      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002f04:	2313      	movs	r3, #19
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d154      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f0e:	4b88      	ldr	r3, [pc, #544]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f12:	23c0      	movs	r3, #192	; 0xc0
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4013      	ands	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d019      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d014      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f2a:	4b81      	ldr	r3, [pc, #516]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2e:	4a82      	ldr	r2, [pc, #520]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f34:	4b7e      	ldr	r3, [pc, #504]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f38:	4b7d      	ldr	r3, [pc, #500]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f3a:	2180      	movs	r1, #128	; 0x80
 8002f3c:	0249      	lsls	r1, r1, #9
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f42:	4b7b      	ldr	r3, [pc, #492]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f46:	4b7a      	ldr	r3, [pc, #488]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f48:	497c      	ldr	r1, [pc, #496]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002f4a:	400a      	ands	r2, r1
 8002f4c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f4e:	4b78      	ldr	r3, [pc, #480]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2201      	movs	r2, #1
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d016      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe ff76 	bl	8001e4c <HAL_GetTick>
 8002f60:	0003      	movs	r3, r0
 8002f62:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f64:	e00c      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fe ff71 	bl	8001e4c <HAL_GetTick>
 8002f6a:	0002      	movs	r2, r0
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	4a73      	ldr	r2, [pc, #460]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d904      	bls.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002f76:	2313      	movs	r3, #19
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	701a      	strb	r2, [r3, #0]
            break;
 8002f7e:	e004      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f80:	4b6b      	ldr	r3, [pc, #428]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f84:	2202      	movs	r2, #2
 8002f86:	4013      	ands	r3, r2
 8002f88:	d0ed      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002f8a:	2313      	movs	r3, #19
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f94:	4b66      	ldr	r3, [pc, #408]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f98:	4a67      	ldr	r2, [pc, #412]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa2:	4b63      	ldr	r3, [pc, #396]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fa8:	e00c      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002faa:	2312      	movs	r3, #18
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	2213      	movs	r2, #19
 8002fb0:	18ba      	adds	r2, r7, r2
 8002fb2:	7812      	ldrb	r2, [r2, #0]
 8002fb4:	701a      	strb	r2, [r3, #0]
 8002fb6:	e005      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb8:	2312      	movs	r3, #18
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	2213      	movs	r2, #19
 8002fbe:	18ba      	adds	r2, r7, r2
 8002fc0:	7812      	ldrb	r2, [r2, #0]
 8002fc2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fc4:	2311      	movs	r3, #17
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d105      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fce:	4b58      	ldr	r3, [pc, #352]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fd2:	4b57      	ldr	r3, [pc, #348]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fd4:	495b      	ldr	r1, [pc, #364]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002fd6:	400a      	ands	r2, r1
 8002fd8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fe4:	4b52      	ldr	r3, [pc, #328]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe8:	2203      	movs	r2, #3
 8002fea:	4393      	bics	r3, r2
 8002fec:	0019      	movs	r1, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	4b4f      	ldr	r3, [pc, #316]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2210      	movs	r2, #16
 8002ffe:	4013      	ands	r3, r2
 8003000:	d009      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003002:	4b4b      	ldr	r3, [pc, #300]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	4a50      	ldr	r2, [pc, #320]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003008:	4013      	ands	r3, r2
 800300a:	0019      	movs	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	4b47      	ldr	r3, [pc, #284]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003012:	430a      	orrs	r2, r1
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4013      	ands	r3, r2
 8003020:	d009      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003022:	4b43      	ldr	r3, [pc, #268]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003026:	4a49      	ldr	r2, [pc, #292]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003028:	4013      	ands	r3, r2
 800302a:	0019      	movs	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	4b3f      	ldr	r3, [pc, #252]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003032:	430a      	orrs	r2, r1
 8003034:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4013      	ands	r3, r2
 8003040:	d009      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003042:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003046:	4a42      	ldr	r2, [pc, #264]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003048:	4013      	ands	r3, r2
 800304a:	0019      	movs	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699a      	ldr	r2, [r3, #24]
 8003050:	4b37      	ldr	r3, [pc, #220]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003052:	430a      	orrs	r2, r1
 8003054:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2220      	movs	r2, #32
 800305c:	4013      	ands	r3, r2
 800305e:	d009      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003060:	4b33      	ldr	r3, [pc, #204]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003064:	4a3b      	ldr	r2, [pc, #236]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003066:	4013      	ands	r3, r2
 8003068:	0019      	movs	r1, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	4b30      	ldr	r3, [pc, #192]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003070:	430a      	orrs	r2, r1
 8003072:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	01db      	lsls	r3, r3, #7
 800307c:	4013      	ands	r3, r2
 800307e:	d015      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003080:	4b2b      	ldr	r3, [pc, #172]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	0899      	lsrs	r1, r3, #2
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	4b28      	ldr	r3, [pc, #160]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800308e:	430a      	orrs	r2, r1
 8003090:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	05db      	lsls	r3, r3, #23
 800309a:	429a      	cmp	r2, r3
 800309c:	d106      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800309e:	4b24      	ldr	r3, [pc, #144]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	4b23      	ldr	r3, [pc, #140]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030a4:	2180      	movs	r1, #128	; 0x80
 80030a6:	0249      	lsls	r1, r1, #9
 80030a8:	430a      	orrs	r2, r1
 80030aa:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	039b      	lsls	r3, r3, #14
 80030b4:	4013      	ands	r3, r2
 80030b6:	d016      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030b8:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030bc:	4a26      	ldr	r2, [pc, #152]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80030be:	4013      	ands	r3, r2
 80030c0:	0019      	movs	r1, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1a      	ldr	r2, [r3, #32]
 80030c6:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030c8:	430a      	orrs	r2, r1
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1a      	ldr	r2, [r3, #32]
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	03db      	lsls	r3, r3, #15
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d106      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80030d8:	4b15      	ldr	r3, [pc, #84]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	4b14      	ldr	r3, [pc, #80]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030de:	2180      	movs	r1, #128	; 0x80
 80030e0:	0449      	lsls	r1, r1, #17
 80030e2:	430a      	orrs	r2, r1
 80030e4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	4013      	ands	r3, r2
 80030f0:	d016      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80030f2:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f6:	4a19      	ldr	r2, [pc, #100]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	0019      	movs	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003102:	430a      	orrs	r2, r1
 8003104:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	01db      	lsls	r3, r3, #7
 800310e:	429a      	cmp	r2, r3
 8003110:	d106      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003112:	4b07      	ldr	r3, [pc, #28]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003118:	2180      	movs	r1, #128	; 0x80
 800311a:	0249      	lsls	r1, r1, #9
 800311c:	430a      	orrs	r2, r1
 800311e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003120:	2312      	movs	r3, #18
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	781b      	ldrb	r3, [r3, #0]
}
 8003126:	0018      	movs	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	b006      	add	sp, #24
 800312c:	bd80      	pop	{r7, pc}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	40021000 	.word	0x40021000
 8003134:	40007000 	.word	0x40007000
 8003138:	fffffcff 	.word	0xfffffcff
 800313c:	fffeffff 	.word	0xfffeffff
 8003140:	00001388 	.word	0x00001388
 8003144:	efffffff 	.word	0xefffffff
 8003148:	fffff3ff 	.word	0xfffff3ff
 800314c:	fff3ffff 	.word	0xfff3ffff
 8003150:	ffcfffff 	.word	0xffcfffff
 8003154:	ffffcfff 	.word	0xffffcfff
 8003158:	ffbfffff 	.word	0xffbfffff
 800315c:	ffff3fff 	.word	0xffff3fff

08003160 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003160:	b5b0      	push	{r4, r5, r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003168:	230f      	movs	r3, #15
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	2201      	movs	r2, #1
 800316e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d100      	bne.n	8003178 <HAL_RTC_Init+0x18>
 8003176:	e08c      	b.n	8003292 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2229      	movs	r2, #41	; 0x29
 800317c:	5c9b      	ldrb	r3, [r3, r2]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10b      	bne.n	800319c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2228      	movs	r2, #40	; 0x28
 8003188:	2100      	movs	r1, #0
 800318a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2288      	movs	r2, #136	; 0x88
 8003190:	0212      	lsls	r2, r2, #8
 8003192:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	0018      	movs	r0, r3
 8003198:	f7fe fba0 	bl	80018dc <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2229      	movs	r2, #41	; 0x29
 80031a0:	2102      	movs	r1, #2
 80031a2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2210      	movs	r2, #16
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d062      	beq.n	8003278 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	22ca      	movs	r2, #202	; 0xca
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2253      	movs	r2, #83	; 0x53
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80031c2:	250f      	movs	r5, #15
 80031c4:	197c      	adds	r4, r7, r5
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	0018      	movs	r0, r3
 80031ca:	f000 fcba 	bl	8003b42 <RTC_EnterInitMode>
 80031ce:	0003      	movs	r3, r0
 80031d0:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80031d2:	0028      	movs	r0, r5
 80031d4:	183b      	adds	r3, r7, r0
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d12c      	bne.n	8003236 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	492e      	ldr	r1, [pc, #184]	; (80032a0 <HAL_RTC_Init+0x140>)
 80031e8:	400a      	ands	r2, r1
 80031ea:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6999      	ldr	r1, [r3, #24]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6912      	ldr	r2, [r2, #16]
 8003212:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6919      	ldr	r1, [r3, #16]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	041a      	lsls	r2, r3, #16
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003228:	183c      	adds	r4, r7, r0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	0018      	movs	r0, r3
 800322e:	f000 fccb 	bl	8003bc8 <RTC_ExitInitMode>
 8003232:	0003      	movs	r3, r0
 8003234:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8003236:	230f      	movs	r3, #15
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d116      	bne.n	800326e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699a      	ldr	r2, [r3, #24]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	00d2      	lsls	r2, r2, #3
 800324c:	08d2      	lsrs	r2, r2, #3
 800324e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6999      	ldr	r1, [r3, #24]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	22ff      	movs	r2, #255	; 0xff
 8003274:	625a      	str	r2, [r3, #36]	; 0x24
 8003276:	e003      	b.n	8003280 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003278:	230f      	movs	r3, #15
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8003280:	230f      	movs	r3, #15
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2229      	movs	r2, #41	; 0x29
 800328e:	2101      	movs	r1, #1
 8003290:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8003292:	230f      	movs	r3, #15
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	781b      	ldrb	r3, [r3, #0]
}
 8003298:	0018      	movs	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	b004      	add	sp, #16
 800329e:	bdb0      	pop	{r4, r5, r7, pc}
 80032a0:	fb8fffbf 	.word	0xfb8fffbf

080032a4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80032a4:	b5b0      	push	{r4, r5, r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2228      	movs	r2, #40	; 0x28
 80032b4:	5c9b      	ldrb	r3, [r3, r2]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_RTC_SetTime+0x1a>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e092      	b.n	80033e4 <HAL_RTC_SetTime+0x140>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2228      	movs	r2, #40	; 0x28
 80032c2:	2101      	movs	r1, #1
 80032c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2229      	movs	r2, #41	; 0x29
 80032ca:	2102      	movs	r1, #2
 80032cc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	22ca      	movs	r2, #202	; 0xca
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2253      	movs	r2, #83	; 0x53
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80032de:	2513      	movs	r5, #19
 80032e0:	197c      	adds	r4, r7, r5
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	0018      	movs	r0, r3
 80032e6:	f000 fc2c 	bl	8003b42 <RTC_EnterInitMode>
 80032ea:	0003      	movs	r3, r0
 80032ec:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80032ee:	197b      	adds	r3, r7, r5
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d162      	bne.n	80033bc <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d125      	bne.n	8003348 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	2240      	movs	r2, #64	; 0x40
 8003304:	4013      	ands	r3, r2
 8003306:	d102      	bne.n	800330e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2200      	movs	r2, #0
 800330c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	0018      	movs	r0, r3
 8003314:	f000 fc9c 	bl	8003c50 <RTC_ByteToBcd2>
 8003318:	0003      	movs	r3, r0
 800331a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	785b      	ldrb	r3, [r3, #1]
 8003320:	0018      	movs	r0, r3
 8003322:	f000 fc95 	bl	8003c50 <RTC_ByteToBcd2>
 8003326:	0003      	movs	r3, r0
 8003328:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800332a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	789b      	ldrb	r3, [r3, #2]
 8003330:	0018      	movs	r0, r3
 8003332:	f000 fc8d 	bl	8003c50 <RTC_ByteToBcd2>
 8003336:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003338:	0022      	movs	r2, r4
 800333a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	78db      	ldrb	r3, [r3, #3]
 8003340:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	e017      	b.n	8003378 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2240      	movs	r2, #64	; 0x40
 8003350:	4013      	ands	r3, r2
 8003352:	d102      	bne.n	800335a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2200      	movs	r2, #0
 8003358:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	785b      	ldrb	r3, [r3, #1]
 8003364:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003366:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800336c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	78db      	ldrb	r3, [r3, #3]
 8003372:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	491b      	ldr	r1, [pc, #108]	; (80033ec <HAL_RTC_SetTime+0x148>)
 8003380:	400a      	ands	r2, r1
 8003382:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4918      	ldr	r1, [pc, #96]	; (80033f0 <HAL_RTC_SetTime+0x14c>)
 8003390:	400a      	ands	r2, r1
 8003392:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6999      	ldr	r1, [r3, #24]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80033ac:	2313      	movs	r3, #19
 80033ae:	18fc      	adds	r4, r7, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 fc08 	bl	8003bc8 <RTC_ExitInitMode>
 80033b8:	0003      	movs	r3, r0
 80033ba:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	22ff      	movs	r2, #255	; 0xff
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80033c4:	2313      	movs	r3, #19
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d103      	bne.n	80033d6 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2229      	movs	r2, #41	; 0x29
 80033d2:	2101      	movs	r1, #1
 80033d4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2228      	movs	r2, #40	; 0x28
 80033da:	2100      	movs	r1, #0
 80033dc:	5499      	strb	r1, [r3, r2]

  return status;
 80033de:	2313      	movs	r3, #19
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	781b      	ldrb	r3, [r3, #0]
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b006      	add	sp, #24
 80033ea:	bdb0      	pop	{r4, r5, r7, pc}
 80033ec:	007f7f7f 	.word	0x007f7f7f
 80033f0:	fffbffff 	.word	0xfffbffff

080033f4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	045b      	lsls	r3, r3, #17
 8003412:	0c5a      	lsrs	r2, r3, #17
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a22      	ldr	r2, [pc, #136]	; (80034a8 <HAL_RTC_GetTime+0xb4>)
 8003420:	4013      	ands	r3, r2
 8003422:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	0c1b      	lsrs	r3, r3, #16
 8003428:	b2db      	uxtb	r3, r3
 800342a:	223f      	movs	r2, #63	; 0x3f
 800342c:	4013      	ands	r3, r2
 800342e:	b2da      	uxtb	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	b2db      	uxtb	r3, r3
 800343a:	227f      	movs	r2, #127	; 0x7f
 800343c:	4013      	ands	r3, r2
 800343e:	b2da      	uxtb	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	227f      	movs	r2, #127	; 0x7f
 800344a:	4013      	ands	r3, r2
 800344c:	b2da      	uxtb	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	0d9b      	lsrs	r3, r3, #22
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2201      	movs	r2, #1
 800345a:	4013      	ands	r3, r2
 800345c:	b2da      	uxtb	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d11a      	bne.n	800349e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	0018      	movs	r0, r3
 800346e:	f000 fc17 	bl	8003ca0 <RTC_Bcd2ToByte>
 8003472:	0003      	movs	r3, r0
 8003474:	001a      	movs	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	785b      	ldrb	r3, [r3, #1]
 800347e:	0018      	movs	r0, r3
 8003480:	f000 fc0e 	bl	8003ca0 <RTC_Bcd2ToByte>
 8003484:	0003      	movs	r3, r0
 8003486:	001a      	movs	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	789b      	ldrb	r3, [r3, #2]
 8003490:	0018      	movs	r0, r3
 8003492:	f000 fc05 	bl	8003ca0 <RTC_Bcd2ToByte>
 8003496:	0003      	movs	r3, r0
 8003498:	001a      	movs	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	0018      	movs	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b006      	add	sp, #24
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	007f7f7f 	.word	0x007f7f7f

080034ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80034ac:	b5b0      	push	{r4, r5, r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2228      	movs	r2, #40	; 0x28
 80034bc:	5c9b      	ldrb	r3, [r3, r2]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_RTC_SetDate+0x1a>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e07e      	b.n	80035c4 <HAL_RTC_SetDate+0x118>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2228      	movs	r2, #40	; 0x28
 80034ca:	2101      	movs	r1, #1
 80034cc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2229      	movs	r2, #41	; 0x29
 80034d2:	2102      	movs	r1, #2
 80034d4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10e      	bne.n	80034fa <HAL_RTC_SetDate+0x4e>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	785b      	ldrb	r3, [r3, #1]
 80034e0:	001a      	movs	r2, r3
 80034e2:	2310      	movs	r3, #16
 80034e4:	4013      	ands	r3, r2
 80034e6:	d008      	beq.n	80034fa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	785b      	ldrb	r3, [r3, #1]
 80034ec:	2210      	movs	r2, #16
 80034ee:	4393      	bics	r3, r2
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	330a      	adds	r3, #10
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d11c      	bne.n	800353a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	78db      	ldrb	r3, [r3, #3]
 8003504:	0018      	movs	r0, r3
 8003506:	f000 fba3 	bl	8003c50 <RTC_ByteToBcd2>
 800350a:	0003      	movs	r3, r0
 800350c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	785b      	ldrb	r3, [r3, #1]
 8003512:	0018      	movs	r0, r3
 8003514:	f000 fb9c 	bl	8003c50 <RTC_ByteToBcd2>
 8003518:	0003      	movs	r3, r0
 800351a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800351c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	789b      	ldrb	r3, [r3, #2]
 8003522:	0018      	movs	r0, r3
 8003524:	f000 fb94 	bl	8003c50 <RTC_ByteToBcd2>
 8003528:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800352a:	0022      	movs	r2, r4
 800352c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	e00e      	b.n	8003558 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	78db      	ldrb	r3, [r3, #3]
 800353e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	785b      	ldrb	r3, [r3, #1]
 8003544:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003546:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800354c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	22ca      	movs	r2, #202	; 0xca
 800355e:	625a      	str	r2, [r3, #36]	; 0x24
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2253      	movs	r2, #83	; 0x53
 8003566:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003568:	2513      	movs	r5, #19
 800356a:	197c      	adds	r4, r7, r5
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	0018      	movs	r0, r3
 8003570:	f000 fae7 	bl	8003b42 <RTC_EnterInitMode>
 8003574:	0003      	movs	r3, r0
 8003576:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003578:	0028      	movs	r0, r5
 800357a:	183b      	adds	r3, r7, r0
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10c      	bne.n	800359c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4910      	ldr	r1, [pc, #64]	; (80035cc <HAL_RTC_SetDate+0x120>)
 800358a:	400a      	ands	r2, r1
 800358c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800358e:	183c      	adds	r4, r7, r0
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	0018      	movs	r0, r3
 8003594:	f000 fb18 	bl	8003bc8 <RTC_ExitInitMode>
 8003598:	0003      	movs	r3, r0
 800359a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	22ff      	movs	r2, #255	; 0xff
 80035a2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80035a4:	2313      	movs	r3, #19
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d103      	bne.n	80035b6 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2229      	movs	r2, #41	; 0x29
 80035b2:	2101      	movs	r1, #1
 80035b4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2228      	movs	r2, #40	; 0x28
 80035ba:	2100      	movs	r1, #0
 80035bc:	5499      	strb	r1, [r3, r2]

  return status;
 80035be:	2313      	movs	r3, #19
 80035c0:	18fb      	adds	r3, r7, r3
 80035c2:	781b      	ldrb	r3, [r3, #0]
}
 80035c4:	0018      	movs	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b006      	add	sp, #24
 80035ca:	bdb0      	pop	{r4, r5, r7, pc}
 80035cc:	00ffff3f 	.word	0x00ffff3f

080035d0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4a21      	ldr	r2, [pc, #132]	; (8003668 <HAL_RTC_GetDate+0x98>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	0c1b      	lsrs	r3, r3, #16
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	0a1b      	lsrs	r3, r3, #8
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	221f      	movs	r2, #31
 80035fa:	4013      	ands	r3, r2
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	223f      	movs	r2, #63	; 0x3f
 8003608:	4013      	ands	r3, r2
 800360a:	b2da      	uxtb	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	0b5b      	lsrs	r3, r3, #13
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2207      	movs	r2, #7
 8003618:	4013      	ands	r3, r2
 800361a:	b2da      	uxtb	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d11a      	bne.n	800365c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	78db      	ldrb	r3, [r3, #3]
 800362a:	0018      	movs	r0, r3
 800362c:	f000 fb38 	bl	8003ca0 <RTC_Bcd2ToByte>
 8003630:	0003      	movs	r3, r0
 8003632:	001a      	movs	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	785b      	ldrb	r3, [r3, #1]
 800363c:	0018      	movs	r0, r3
 800363e:	f000 fb2f 	bl	8003ca0 <RTC_Bcd2ToByte>
 8003642:	0003      	movs	r3, r0
 8003644:	001a      	movs	r2, r3
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	789b      	ldrb	r3, [r3, #2]
 800364e:	0018      	movs	r0, r3
 8003650:	f000 fb26 	bl	8003ca0 <RTC_Bcd2ToByte>
 8003654:	0003      	movs	r3, r0
 8003656:	001a      	movs	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	0018      	movs	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	b006      	add	sp, #24
 8003664:	bd80      	pop	{r7, pc}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	00ffff3f 	.word	0x00ffff3f

0800366c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b089      	sub	sp, #36	; 0x24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2228      	movs	r2, #40	; 0x28
 800367c:	5c9b      	ldrb	r3, [r3, r2]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_RTC_SetAlarm_IT+0x1a>
 8003682:	2302      	movs	r3, #2
 8003684:	e127      	b.n	80038d6 <HAL_RTC_SetAlarm_IT+0x26a>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2228      	movs	r2, #40	; 0x28
 800368a:	2101      	movs	r1, #1
 800368c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2229      	movs	r2, #41	; 0x29
 8003692:	2102      	movs	r1, #2
 8003694:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d136      	bne.n	800370a <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2240      	movs	r2, #64	; 0x40
 80036a4:	4013      	ands	r3, r2
 80036a6:	d102      	bne.n	80036ae <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2200      	movs	r2, #0
 80036ac:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	0018      	movs	r0, r3
 80036b4:	f000 facc 	bl	8003c50 <RTC_ByteToBcd2>
 80036b8:	0003      	movs	r3, r0
 80036ba:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	785b      	ldrb	r3, [r3, #1]
 80036c0:	0018      	movs	r0, r3
 80036c2:	f000 fac5 	bl	8003c50 <RTC_ByteToBcd2>
 80036c6:	0003      	movs	r3, r0
 80036c8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80036ca:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	789b      	ldrb	r3, [r3, #2]
 80036d0:	0018      	movs	r0, r3
 80036d2:	f000 fabd 	bl	8003c50 <RTC_ByteToBcd2>
 80036d6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80036d8:	0022      	movs	r2, r4
 80036da:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	78db      	ldrb	r3, [r3, #3]
 80036e0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80036e2:	431a      	orrs	r2, r3
 80036e4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2220      	movs	r2, #32
 80036ea:	5c9b      	ldrb	r3, [r3, r2]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f000 faaf 	bl	8003c50 <RTC_ByteToBcd2>
 80036f2:	0003      	movs	r3, r0
 80036f4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80036f6:	0022      	movs	r2, r4
 80036f8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80036fe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003704:	4313      	orrs	r3, r2
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	e022      	b.n	8003750 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	2240      	movs	r2, #64	; 0x40
 8003712:	4013      	ands	r3, r2
 8003714:	d102      	bne.n	800371c <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2200      	movs	r2, #0
 800371a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	785b      	ldrb	r3, [r3, #1]
 8003726:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003728:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800372e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	78db      	ldrb	r3, [r3, #3]
 8003734:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003736:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2120      	movs	r1, #32
 800373c:	5c5b      	ldrb	r3, [r3, r1]
 800373e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003740:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003746:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800374c:	4313      	orrs	r3, r2
 800374e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	22ca      	movs	r2, #202	; 0xca
 8003762:	625a      	str	r2, [r3, #36]	; 0x24
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2253      	movs	r2, #83	; 0x53
 800376a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	429a      	cmp	r2, r3
 8003776:	d14c      	bne.n	8003812 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4957      	ldr	r1, [pc, #348]	; (80038e0 <HAL_RTC_SetAlarm_IT+0x274>)
 8003784:	400a      	ands	r2, r1
 8003786:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2101      	movs	r1, #1
 8003794:	430a      	orrs	r2, r1
 8003796:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8003798:	f7fe fb58 	bl	8001e4c <HAL_GetTick>
 800379c:	0003      	movs	r3, r0
 800379e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80037a0:	e016      	b.n	80037d0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80037a2:	f7fe fb53 	bl	8001e4c <HAL_GetTick>
 80037a6:	0002      	movs	r2, r0
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	1ad2      	subs	r2, r2, r3
 80037ac:	23fa      	movs	r3, #250	; 0xfa
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d90d      	bls.n	80037d0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	22ff      	movs	r2, #255	; 0xff
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2229      	movs	r2, #41	; 0x29
 80037c0:	2103      	movs	r1, #3
 80037c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2228      	movs	r2, #40	; 0x28
 80037c8:	2100      	movs	r1, #0
 80037ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e082      	b.n	80038d6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	4013      	ands	r3, r2
 80037da:	d0e2      	beq.n	80037a2 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2180      	movs	r1, #128	; 0x80
 80037f8:	0049      	lsls	r1, r1, #1
 80037fa:	430a      	orrs	r2, r1
 80037fc:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699a      	ldr	r2, [r3, #24]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2180      	movs	r1, #128	; 0x80
 800380a:	0149      	lsls	r1, r1, #5
 800380c:	430a      	orrs	r2, r1
 800380e:	619a      	str	r2, [r3, #24]
 8003810:	e04b      	b.n	80038aa <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699a      	ldr	r2, [r3, #24]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4931      	ldr	r1, [pc, #196]	; (80038e4 <HAL_RTC_SetAlarm_IT+0x278>)
 800381e:	400a      	ands	r2, r1
 8003820:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2102      	movs	r1, #2
 800382e:	430a      	orrs	r2, r1
 8003830:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8003832:	f7fe fb0b 	bl	8001e4c <HAL_GetTick>
 8003836:	0003      	movs	r3, r0
 8003838:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800383a:	e016      	b.n	800386a <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800383c:	f7fe fb06 	bl	8001e4c <HAL_GetTick>
 8003840:	0002      	movs	r2, r0
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	1ad2      	subs	r2, r2, r3
 8003846:	23fa      	movs	r3, #250	; 0xfa
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	429a      	cmp	r2, r3
 800384c:	d90d      	bls.n	800386a <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	22ff      	movs	r2, #255	; 0xff
 8003854:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2229      	movs	r2, #41	; 0x29
 800385a:	2103      	movs	r1, #3
 800385c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2228      	movs	r2, #40	; 0x28
 8003862:	2100      	movs	r1, #0
 8003864:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e035      	b.n	80038d6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2202      	movs	r2, #2
 8003872:	4013      	ands	r3, r2
 8003874:	d0e2      	beq.n	800383c <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699a      	ldr	r2, [r3, #24]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2180      	movs	r1, #128	; 0x80
 8003892:	0089      	lsls	r1, r1, #2
 8003894:	430a      	orrs	r2, r1
 8003896:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699a      	ldr	r2, [r3, #24]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2180      	movs	r1, #128	; 0x80
 80038a4:	0189      	lsls	r1, r1, #6
 80038a6:	430a      	orrs	r2, r1
 80038a8:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80038aa:	4a0f      	ldr	r2, [pc, #60]	; (80038e8 <HAL_RTC_SetAlarm_IT+0x27c>)
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	58d3      	ldr	r3, [r2, r3]
 80038b0:	490d      	ldr	r1, [pc, #52]	; (80038e8 <HAL_RTC_SetAlarm_IT+0x27c>)
 80038b2:	2280      	movs	r2, #128	; 0x80
 80038b4:	0312      	lsls	r2, r2, #12
 80038b6:	4313      	orrs	r3, r2
 80038b8:	2280      	movs	r2, #128	; 0x80
 80038ba:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	22ff      	movs	r2, #255	; 0xff
 80038c2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2229      	movs	r2, #41	; 0x29
 80038c8:	2101      	movs	r1, #1
 80038ca:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2228      	movs	r2, #40	; 0x28
 80038d0:	2100      	movs	r1, #0
 80038d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	0018      	movs	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	b009      	add	sp, #36	; 0x24
 80038dc:	bd90      	pop	{r4, r7, pc}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	fffffeff 	.word	0xfffffeff
 80038e4:	fffffdff 	.word	0xfffffdff
 80038e8:	40021800 	.word	0x40021800

080038ec <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	429a      	cmp	r2, r3
 8003902:	d144      	bne.n	800398e <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2280      	movs	r2, #128	; 0x80
 8003908:	0052      	lsls	r2, r2, #1
 800390a:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	045b      	lsls	r3, r3, #17
 800391c:	0c5b      	lsrs	r3, r3, #17
 800391e:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	0c1b      	lsrs	r3, r3, #16
 8003924:	b2db      	uxtb	r3, r3
 8003926:	223f      	movs	r2, #63	; 0x3f
 8003928:	4013      	ands	r3, r2
 800392a:	b2da      	uxtb	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	0a1b      	lsrs	r3, r3, #8
 8003934:	b2db      	uxtb	r3, r3
 8003936:	227f      	movs	r2, #127	; 0x7f
 8003938:	4013      	ands	r3, r2
 800393a:	b2da      	uxtb	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	227f      	movs	r2, #127	; 0x7f
 8003946:	4013      	ands	r3, r2
 8003948:	b2da      	uxtb	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	0d9b      	lsrs	r3, r3, #22
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2201      	movs	r2, #1
 8003956:	4013      	ands	r3, r2
 8003958:	b2da      	uxtb	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	0e1b      	lsrs	r3, r3, #24
 8003968:	b2db      	uxtb	r3, r3
 800396a:	223f      	movs	r2, #63	; 0x3f
 800396c:	4013      	ands	r3, r2
 800396e:	b2d9      	uxtb	r1, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2220      	movs	r2, #32
 8003974:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	05db      	lsls	r3, r3, #23
 800397c:	401a      	ands	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	4a3b      	ldr	r2, [pc, #236]	; (8003a74 <HAL_RTC_GetAlarm+0x188>)
 8003986:	401a      	ands	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	615a      	str	r2, [r3, #20]
 800398c:	e043      	b.n	8003a16 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2280      	movs	r2, #128	; 0x80
 8003992:	0092      	lsls	r2, r2, #2
 8003994:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a4:	045b      	lsls	r3, r3, #17
 80039a6:	0c5b      	lsrs	r3, r3, #17
 80039a8:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	0c1b      	lsrs	r3, r3, #16
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	223f      	movs	r2, #63	; 0x3f
 80039b2:	4013      	ands	r3, r2
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	0a1b      	lsrs	r3, r3, #8
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	227f      	movs	r2, #127	; 0x7f
 80039c2:	4013      	ands	r3, r2
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	227f      	movs	r2, #127	; 0x7f
 80039d0:	4013      	ands	r3, r2
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	0d9b      	lsrs	r3, r3, #22
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2201      	movs	r2, #1
 80039e0:	4013      	ands	r3, r2
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	0e1b      	lsrs	r3, r3, #24
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	223f      	movs	r2, #63	; 0x3f
 80039f6:	4013      	ands	r3, r2
 80039f8:	b2d9      	uxtb	r1, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2220      	movs	r2, #32
 80039fe:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	2380      	movs	r3, #128	; 0x80
 8003a04:	05db      	lsls	r3, r3, #23
 8003a06:	401a      	ands	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	4a19      	ldr	r2, [pc, #100]	; (8003a74 <HAL_RTC_GetAlarm+0x188>)
 8003a10:	401a      	ands	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d125      	bne.n	8003a68 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	0018      	movs	r0, r3
 8003a22:	f000 f93d 	bl	8003ca0 <RTC_Bcd2ToByte>
 8003a26:	0003      	movs	r3, r0
 8003a28:	001a      	movs	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	785b      	ldrb	r3, [r3, #1]
 8003a32:	0018      	movs	r0, r3
 8003a34:	f000 f934 	bl	8003ca0 <RTC_Bcd2ToByte>
 8003a38:	0003      	movs	r3, r0
 8003a3a:	001a      	movs	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	789b      	ldrb	r3, [r3, #2]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f000 f92b 	bl	8003ca0 <RTC_Bcd2ToByte>
 8003a4a:	0003      	movs	r3, r0
 8003a4c:	001a      	movs	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2220      	movs	r2, #32
 8003a56:	5c9b      	ldrb	r3, [r3, r2]
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f000 f921 	bl	8003ca0 <RTC_Bcd2ToByte>
 8003a5e:	0003      	movs	r3, r0
 8003a60:	0019      	movs	r1, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2220      	movs	r2, #32
 8003a66:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b006      	add	sp, #24
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	80808080 	.word	0x80808080

08003a78 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	2380      	movs	r3, #128	; 0x80
 8003a88:	015b      	lsls	r3, r3, #5
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d011      	beq.n	8003ab2 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a94:	2201      	movs	r2, #1
 8003a96:	4013      	ands	r3, r2
 8003a98:	d00b      	beq.n	8003ab2 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	0018      	movs	r0, r3
 8003aae:	f7fd f907 	bl	8000cc0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699a      	ldr	r2, [r3, #24]
 8003ab8:	2380      	movs	r3, #128	; 0x80
 8003aba:	019b      	lsls	r3, r3, #6
 8003abc:	4013      	ands	r3, r2
 8003abe:	d011      	beq.n	8003ae4 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d00b      	beq.n	8003ae4 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f000 f8fb 	bl	8003cda <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2229      	movs	r2, #41	; 0x29
 8003ae8:	2101      	movs	r1, #1
 8003aea:	5499      	strb	r1, [r3, r2]
}
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b002      	add	sp, #8
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	21a0      	movs	r1, #160	; 0xa0
 8003b08:	438a      	bics	r2, r1
 8003b0a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003b0c:	f7fe f99e 	bl	8001e4c <HAL_GetTick>
 8003b10:	0003      	movs	r3, r0
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003b14:	e00a      	b.n	8003b2c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003b16:	f7fe f999 	bl	8001e4c <HAL_GetTick>
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	1ad2      	subs	r2, r2, r3
 8003b20:	23fa      	movs	r3, #250	; 0xfa
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d901      	bls.n	8003b2c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e006      	b.n	8003b3a <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2220      	movs	r2, #32
 8003b34:	4013      	ands	r3, r2
 8003b36:	d0ee      	beq.n	8003b16 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b004      	add	sp, #16
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8003b4a:	230f      	movs	r3, #15
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	2200      	movs	r2, #0
 8003b50:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2240      	movs	r2, #64	; 0x40
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d12c      	bne.n	8003bb8 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2180      	movs	r1, #128	; 0x80
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003b6e:	f7fe f96d 	bl	8001e4c <HAL_GetTick>
 8003b72:	0003      	movs	r3, r0
 8003b74:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003b76:	e014      	b.n	8003ba2 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003b78:	f7fe f968 	bl	8001e4c <HAL_GetTick>
 8003b7c:	0002      	movs	r2, r0
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	1ad2      	subs	r2, r2, r3
 8003b82:	200f      	movs	r0, #15
 8003b84:	183b      	adds	r3, r7, r0
 8003b86:	1839      	adds	r1, r7, r0
 8003b88:	7809      	ldrb	r1, [r1, #0]
 8003b8a:	7019      	strb	r1, [r3, #0]
 8003b8c:	23fa      	movs	r3, #250	; 0xfa
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d906      	bls.n	8003ba2 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8003b94:	183b      	adds	r3, r7, r0
 8003b96:	2203      	movs	r2, #3
 8003b98:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2229      	movs	r2, #41	; 0x29
 8003b9e:	2103      	movs	r1, #3
 8003ba0:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2240      	movs	r2, #64	; 0x40
 8003baa:	4013      	ands	r3, r2
 8003bac:	d104      	bne.n	8003bb8 <RTC_EnterInitMode+0x76>
 8003bae:	230f      	movs	r3, #15
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d1df      	bne.n	8003b78 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003bb8:	230f      	movs	r3, #15
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	781b      	ldrb	r3, [r3, #0]
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b004      	add	sp, #16
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003bc8:	b590      	push	{r4, r7, lr}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd0:	240f      	movs	r4, #15
 8003bd2:	193b      	adds	r3, r7, r4
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003bd8:	4b1c      	ldr	r3, [pc, #112]	; (8003c4c <RTC_ExitInitMode+0x84>)
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <RTC_ExitInitMode+0x84>)
 8003bde:	2180      	movs	r1, #128	; 0x80
 8003be0:	438a      	bics	r2, r1
 8003be2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003be4:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <RTC_ExitInitMode+0x84>)
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	2220      	movs	r2, #32
 8003bea:	4013      	ands	r3, r2
 8003bec:	d10d      	bne.n	8003c0a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f7ff ff7f 	bl	8003af4 <HAL_RTC_WaitForSynchro>
 8003bf6:	1e03      	subs	r3, r0, #0
 8003bf8:	d021      	beq.n	8003c3e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2229      	movs	r2, #41	; 0x29
 8003bfe:	2103      	movs	r1, #3
 8003c00:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003c02:	193b      	adds	r3, r7, r4
 8003c04:	2203      	movs	r2, #3
 8003c06:	701a      	strb	r2, [r3, #0]
 8003c08:	e019      	b.n	8003c3e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003c0a:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <RTC_ExitInitMode+0x84>)
 8003c0c:	699a      	ldr	r2, [r3, #24]
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <RTC_ExitInitMode+0x84>)
 8003c10:	2120      	movs	r1, #32
 8003c12:	438a      	bics	r2, r1
 8003c14:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f7ff ff6b 	bl	8003af4 <HAL_RTC_WaitForSynchro>
 8003c1e:	1e03      	subs	r3, r0, #0
 8003c20:	d007      	beq.n	8003c32 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2229      	movs	r2, #41	; 0x29
 8003c26:	2103      	movs	r1, #3
 8003c28:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003c2a:	230f      	movs	r3, #15
 8003c2c:	18fb      	adds	r3, r7, r3
 8003c2e:	2203      	movs	r2, #3
 8003c30:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <RTC_ExitInitMode+0x84>)
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <RTC_ExitInitMode+0x84>)
 8003c38:	2120      	movs	r1, #32
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003c3e:	230f      	movs	r3, #15
 8003c40:	18fb      	adds	r3, r7, r3
 8003c42:	781b      	ldrb	r3, [r3, #0]
}
 8003c44:	0018      	movs	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b005      	add	sp, #20
 8003c4a:	bd90      	pop	{r4, r7, pc}
 8003c4c:	40002800 	.word	0x40002800

08003c50 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	0002      	movs	r2, r0
 8003c58:	1dfb      	adds	r3, r7, #7
 8003c5a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003c60:	230b      	movs	r3, #11
 8003c62:	18fb      	adds	r3, r7, r3
 8003c64:	1dfa      	adds	r2, r7, #7
 8003c66:	7812      	ldrb	r2, [r2, #0]
 8003c68:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8003c6a:	e008      	b.n	8003c7e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003c72:	220b      	movs	r2, #11
 8003c74:	18bb      	adds	r3, r7, r2
 8003c76:	18ba      	adds	r2, r7, r2
 8003c78:	7812      	ldrb	r2, [r2, #0]
 8003c7a:	3a0a      	subs	r2, #10
 8003c7c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003c7e:	210b      	movs	r1, #11
 8003c80:	187b      	adds	r3, r7, r1
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b09      	cmp	r3, #9
 8003c86:	d8f1      	bhi.n	8003c6c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	187b      	adds	r3, r7, r1
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	b2db      	uxtb	r3, r3
}
 8003c98:	0018      	movs	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b004      	add	sp, #16
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	0002      	movs	r2, r0
 8003ca8:	1dfb      	adds	r3, r7, #7
 8003caa:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003cac:	1dfb      	adds	r3, r7, #7
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	001a      	movs	r2, r3
 8003cb6:	0013      	movs	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	189b      	adds	r3, r3, r2
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	1dfb      	adds	r3, r7, #7
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	210f      	movs	r1, #15
 8003cca:	400b      	ands	r3, r1
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	18d3      	adds	r3, r2, r3
 8003cd0:	b2db      	uxtb	r3, r3
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b004      	add	sp, #16
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b002      	add	sp, #8
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e04a      	b.n	8003d92 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	223d      	movs	r2, #61	; 0x3d
 8003d00:	5c9b      	ldrb	r3, [r3, r2]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d107      	bne.n	8003d18 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	223c      	movs	r2, #60	; 0x3c
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	0018      	movs	r0, r3
 8003d14:	f7fd fe5e 	bl	80019d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	223d      	movs	r2, #61	; 0x3d
 8003d1c:	2102      	movs	r1, #2
 8003d1e:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3304      	adds	r3, #4
 8003d28:	0019      	movs	r1, r3
 8003d2a:	0010      	movs	r0, r2
 8003d2c:	f000 fade 	bl	80042ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2248      	movs	r2, #72	; 0x48
 8003d34:	2101      	movs	r1, #1
 8003d36:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	223e      	movs	r2, #62	; 0x3e
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	5499      	strb	r1, [r3, r2]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	223f      	movs	r2, #63	; 0x3f
 8003d44:	2101      	movs	r1, #1
 8003d46:	5499      	strb	r1, [r3, r2]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2240      	movs	r2, #64	; 0x40
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	5499      	strb	r1, [r3, r2]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2241      	movs	r2, #65	; 0x41
 8003d54:	2101      	movs	r1, #1
 8003d56:	5499      	strb	r1, [r3, r2]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2242      	movs	r2, #66	; 0x42
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	5499      	strb	r1, [r3, r2]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2243      	movs	r2, #67	; 0x43
 8003d64:	2101      	movs	r1, #1
 8003d66:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2244      	movs	r2, #68	; 0x44
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	5499      	strb	r1, [r3, r2]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2245      	movs	r2, #69	; 0x45
 8003d74:	2101      	movs	r1, #1
 8003d76:	5499      	strb	r1, [r3, r2]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2246      	movs	r2, #70	; 0x46
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	5499      	strb	r1, [r3, r2]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2247      	movs	r2, #71	; 0x47
 8003d84:	2101      	movs	r1, #1
 8003d86:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	223d      	movs	r2, #61	; 0x3d
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	0018      	movs	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b002      	add	sp, #8
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	223d      	movs	r2, #61	; 0x3d
 8003da8:	5c9b      	ldrb	r3, [r3, r2]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d001      	beq.n	8003db4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e035      	b.n	8003e20 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	223d      	movs	r2, #61	; 0x3d
 8003db8:	2102      	movs	r1, #2
 8003dba:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a19      	ldr	r2, [pc, #100]	; (8003e28 <HAL_TIM_Base_Start+0x8c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00a      	beq.n	8003ddc <HAL_TIM_Base_Start+0x40>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	05db      	lsls	r3, r3, #23
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d004      	beq.n	8003ddc <HAL_TIM_Base_Start+0x40>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <HAL_TIM_Base_Start+0x90>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d116      	bne.n	8003e0a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	4a13      	ldr	r2, [pc, #76]	; (8003e30 <HAL_TIM_Base_Start+0x94>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b06      	cmp	r3, #6
 8003dec:	d016      	beq.n	8003e1c <HAL_TIM_Base_Start+0x80>
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	2380      	movs	r3, #128	; 0x80
 8003df2:	025b      	lsls	r3, r3, #9
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d011      	beq.n	8003e1c <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2101      	movs	r1, #1
 8003e04:	430a      	orrs	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e08:	e008      	b.n	8003e1c <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2101      	movs	r1, #1
 8003e16:	430a      	orrs	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e000      	b.n	8003e1e <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	0018      	movs	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b004      	add	sp, #16
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40012c00 	.word	0x40012c00
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	00010007 	.word	0x00010007

08003e34 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	4a0d      	ldr	r2, [pc, #52]	; (8003e78 <HAL_TIM_Base_Stop+0x44>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	d10d      	bne.n	8003e64 <HAL_TIM_Base_Stop+0x30>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	4a0b      	ldr	r2, [pc, #44]	; (8003e7c <HAL_TIM_Base_Stop+0x48>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	d107      	bne.n	8003e64 <HAL_TIM_Base_Stop+0x30>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2101      	movs	r1, #1
 8003e60:	438a      	bics	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	223d      	movs	r2, #61	; 0x3d
 8003e68:	2101      	movs	r1, #1
 8003e6a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	0018      	movs	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b002      	add	sp, #8
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	00001111 	.word	0x00001111
 8003e7c:	00000444 	.word	0x00000444

08003e80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e04a      	b.n	8003f28 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	223d      	movs	r2, #61	; 0x3d
 8003e96:	5c9b      	ldrb	r3, [r3, r2]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d107      	bne.n	8003eae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	223c      	movs	r2, #60	; 0x3c
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f7fd fd5d 	bl	8001968 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	223d      	movs	r2, #61	; 0x3d
 8003eb2:	2102      	movs	r1, #2
 8003eb4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	0019      	movs	r1, r3
 8003ec0:	0010      	movs	r0, r2
 8003ec2:	f000 fa13 	bl	80042ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2248      	movs	r2, #72	; 0x48
 8003eca:	2101      	movs	r1, #1
 8003ecc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	223e      	movs	r2, #62	; 0x3e
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	5499      	strb	r1, [r3, r2]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	223f      	movs	r2, #63	; 0x3f
 8003eda:	2101      	movs	r1, #1
 8003edc:	5499      	strb	r1, [r3, r2]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2240      	movs	r2, #64	; 0x40
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	5499      	strb	r1, [r3, r2]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2241      	movs	r2, #65	; 0x41
 8003eea:	2101      	movs	r1, #1
 8003eec:	5499      	strb	r1, [r3, r2]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2242      	movs	r2, #66	; 0x42
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	5499      	strb	r1, [r3, r2]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2243      	movs	r2, #67	; 0x43
 8003efa:	2101      	movs	r1, #1
 8003efc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2244      	movs	r2, #68	; 0x44
 8003f02:	2101      	movs	r1, #1
 8003f04:	5499      	strb	r1, [r3, r2]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2245      	movs	r2, #69	; 0x45
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	5499      	strb	r1, [r3, r2]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2246      	movs	r2, #70	; 0x46
 8003f12:	2101      	movs	r1, #1
 8003f14:	5499      	strb	r1, [r3, r2]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2247      	movs	r2, #71	; 0x47
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	223d      	movs	r2, #61	; 0x3d
 8003f22:	2101      	movs	r1, #1
 8003f24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	0018      	movs	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b002      	add	sp, #8
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d108      	bne.n	8003f52 <HAL_TIM_PWM_Start+0x22>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	223e      	movs	r2, #62	; 0x3e
 8003f44:	5c9b      	ldrb	r3, [r3, r2]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	1e5a      	subs	r2, r3, #1
 8003f4c:	4193      	sbcs	r3, r2
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	e037      	b.n	8003fc2 <HAL_TIM_PWM_Start+0x92>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d108      	bne.n	8003f6a <HAL_TIM_PWM_Start+0x3a>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	223f      	movs	r2, #63	; 0x3f
 8003f5c:	5c9b      	ldrb	r3, [r3, r2]
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	1e5a      	subs	r2, r3, #1
 8003f64:	4193      	sbcs	r3, r2
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	e02b      	b.n	8003fc2 <HAL_TIM_PWM_Start+0x92>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d108      	bne.n	8003f82 <HAL_TIM_PWM_Start+0x52>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2240      	movs	r2, #64	; 0x40
 8003f74:	5c9b      	ldrb	r3, [r3, r2]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	1e5a      	subs	r2, r3, #1
 8003f7c:	4193      	sbcs	r3, r2
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	e01f      	b.n	8003fc2 <HAL_TIM_PWM_Start+0x92>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b0c      	cmp	r3, #12
 8003f86:	d108      	bne.n	8003f9a <HAL_TIM_PWM_Start+0x6a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2241      	movs	r2, #65	; 0x41
 8003f8c:	5c9b      	ldrb	r3, [r3, r2]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	1e5a      	subs	r2, r3, #1
 8003f94:	4193      	sbcs	r3, r2
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	e013      	b.n	8003fc2 <HAL_TIM_PWM_Start+0x92>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b10      	cmp	r3, #16
 8003f9e:	d108      	bne.n	8003fb2 <HAL_TIM_PWM_Start+0x82>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2242      	movs	r2, #66	; 0x42
 8003fa4:	5c9b      	ldrb	r3, [r3, r2]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	1e5a      	subs	r2, r3, #1
 8003fac:	4193      	sbcs	r3, r2
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	e007      	b.n	8003fc2 <HAL_TIM_PWM_Start+0x92>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2243      	movs	r2, #67	; 0x43
 8003fb6:	5c9b      	ldrb	r3, [r3, r2]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	1e5a      	subs	r2, r3, #1
 8003fbe:	4193      	sbcs	r3, r2
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e081      	b.n	80040ce <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d104      	bne.n	8003fda <HAL_TIM_PWM_Start+0xaa>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	223e      	movs	r2, #62	; 0x3e
 8003fd4:	2102      	movs	r1, #2
 8003fd6:	5499      	strb	r1, [r3, r2]
 8003fd8:	e023      	b.n	8004022 <HAL_TIM_PWM_Start+0xf2>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d104      	bne.n	8003fea <HAL_TIM_PWM_Start+0xba>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	223f      	movs	r2, #63	; 0x3f
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	5499      	strb	r1, [r3, r2]
 8003fe8:	e01b      	b.n	8004022 <HAL_TIM_PWM_Start+0xf2>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d104      	bne.n	8003ffa <HAL_TIM_PWM_Start+0xca>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2240      	movs	r2, #64	; 0x40
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	5499      	strb	r1, [r3, r2]
 8003ff8:	e013      	b.n	8004022 <HAL_TIM_PWM_Start+0xf2>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b0c      	cmp	r3, #12
 8003ffe:	d104      	bne.n	800400a <HAL_TIM_PWM_Start+0xda>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2241      	movs	r2, #65	; 0x41
 8004004:	2102      	movs	r1, #2
 8004006:	5499      	strb	r1, [r3, r2]
 8004008:	e00b      	b.n	8004022 <HAL_TIM_PWM_Start+0xf2>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b10      	cmp	r3, #16
 800400e:	d104      	bne.n	800401a <HAL_TIM_PWM_Start+0xea>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2242      	movs	r2, #66	; 0x42
 8004014:	2102      	movs	r1, #2
 8004016:	5499      	strb	r1, [r3, r2]
 8004018:	e003      	b.n	8004022 <HAL_TIM_PWM_Start+0xf2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2243      	movs	r2, #67	; 0x43
 800401e:	2102      	movs	r1, #2
 8004020:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6839      	ldr	r1, [r7, #0]
 8004028:	2201      	movs	r2, #1
 800402a:	0018      	movs	r0, r3
 800402c:	f000 fc70 	bl	8004910 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a28      	ldr	r2, [pc, #160]	; (80040d8 <HAL_TIM_PWM_Start+0x1a8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d009      	beq.n	800404e <HAL_TIM_PWM_Start+0x11e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a27      	ldr	r2, [pc, #156]	; (80040dc <HAL_TIM_PWM_Start+0x1ac>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d004      	beq.n	800404e <HAL_TIM_PWM_Start+0x11e>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a25      	ldr	r2, [pc, #148]	; (80040e0 <HAL_TIM_PWM_Start+0x1b0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d101      	bne.n	8004052 <HAL_TIM_PWM_Start+0x122>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <HAL_TIM_PWM_Start+0x124>
 8004052:	2300      	movs	r3, #0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2180      	movs	r1, #128	; 0x80
 8004064:	0209      	lsls	r1, r1, #8
 8004066:	430a      	orrs	r2, r1
 8004068:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1a      	ldr	r2, [pc, #104]	; (80040d8 <HAL_TIM_PWM_Start+0x1a8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00a      	beq.n	800408a <HAL_TIM_PWM_Start+0x15a>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	05db      	lsls	r3, r3, #23
 800407c:	429a      	cmp	r2, r3
 800407e:	d004      	beq.n	800408a <HAL_TIM_PWM_Start+0x15a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a17      	ldr	r2, [pc, #92]	; (80040e4 <HAL_TIM_PWM_Start+0x1b4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d116      	bne.n	80040b8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <HAL_TIM_PWM_Start+0x1b8>)
 8004092:	4013      	ands	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b06      	cmp	r3, #6
 800409a:	d016      	beq.n	80040ca <HAL_TIM_PWM_Start+0x19a>
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	2380      	movs	r3, #128	; 0x80
 80040a0:	025b      	lsls	r3, r3, #9
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d011      	beq.n	80040ca <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2101      	movs	r1, #1
 80040b2:	430a      	orrs	r2, r1
 80040b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b6:	e008      	b.n	80040ca <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2101      	movs	r1, #1
 80040c4:	430a      	orrs	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	e000      	b.n	80040cc <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ca:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	0018      	movs	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b004      	add	sp, #16
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	40012c00 	.word	0x40012c00
 80040dc:	40014400 	.word	0x40014400
 80040e0:	40014800 	.word	0x40014800
 80040e4:	40000400 	.word	0x40000400
 80040e8:	00010007 	.word	0x00010007

080040ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f8:	2317      	movs	r3, #23
 80040fa:	18fb      	adds	r3, r7, r3
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	223c      	movs	r2, #60	; 0x3c
 8004104:	5c9b      	ldrb	r3, [r3, r2]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_TIM_PWM_ConfigChannel+0x22>
 800410a:	2302      	movs	r3, #2
 800410c:	e0e5      	b.n	80042da <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	223c      	movs	r2, #60	; 0x3c
 8004112:	2101      	movs	r1, #1
 8004114:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b14      	cmp	r3, #20
 800411a:	d900      	bls.n	800411e <HAL_TIM_PWM_ConfigChannel+0x32>
 800411c:	e0d1      	b.n	80042c2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	009a      	lsls	r2, r3, #2
 8004122:	4b70      	ldr	r3, [pc, #448]	; (80042e4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004124:	18d3      	adds	r3, r2, r3
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	0011      	movs	r1, r2
 8004132:	0018      	movs	r0, r3
 8004134:	f000 f950 	bl	80043d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699a      	ldr	r2, [r3, #24]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2108      	movs	r1, #8
 8004144:	430a      	orrs	r2, r1
 8004146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699a      	ldr	r2, [r3, #24]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2104      	movs	r1, #4
 8004154:	438a      	bics	r2, r1
 8004156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6999      	ldr	r1, [r3, #24]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	619a      	str	r2, [r3, #24]
      break;
 800416a:	e0af      	b.n	80042cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	0011      	movs	r1, r2
 8004174:	0018      	movs	r0, r3
 8004176:	f000 f9af 	bl	80044d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	699a      	ldr	r2, [r3, #24]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2180      	movs	r1, #128	; 0x80
 8004186:	0109      	lsls	r1, r1, #4
 8004188:	430a      	orrs	r2, r1
 800418a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4954      	ldr	r1, [pc, #336]	; (80042e8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004198:	400a      	ands	r2, r1
 800419a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6999      	ldr	r1, [r3, #24]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	021a      	lsls	r2, r3, #8
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	619a      	str	r2, [r3, #24]
      break;
 80041b0:	e08c      	b.n	80042cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	0011      	movs	r1, r2
 80041ba:	0018      	movs	r0, r3
 80041bc:	f000 fa0a 	bl	80045d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	69da      	ldr	r2, [r3, #28]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2108      	movs	r1, #8
 80041cc:	430a      	orrs	r2, r1
 80041ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69da      	ldr	r2, [r3, #28]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2104      	movs	r1, #4
 80041dc:	438a      	bics	r2, r1
 80041de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	69d9      	ldr	r1, [r3, #28]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	61da      	str	r2, [r3, #28]
      break;
 80041f2:	e06b      	b.n	80042cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	0011      	movs	r1, r2
 80041fc:	0018      	movs	r0, r3
 80041fe:	f000 fa6b 	bl	80046d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69da      	ldr	r2, [r3, #28]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2180      	movs	r1, #128	; 0x80
 800420e:	0109      	lsls	r1, r1, #4
 8004210:	430a      	orrs	r2, r1
 8004212:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69da      	ldr	r2, [r3, #28]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4932      	ldr	r1, [pc, #200]	; (80042e8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004220:	400a      	ands	r2, r1
 8004222:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69d9      	ldr	r1, [r3, #28]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	021a      	lsls	r2, r3, #8
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	61da      	str	r2, [r3, #28]
      break;
 8004238:	e048      	b.n	80042cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	0011      	movs	r1, r2
 8004242:	0018      	movs	r0, r3
 8004244:	f000 faac 	bl	80047a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2108      	movs	r1, #8
 8004254:	430a      	orrs	r2, r1
 8004256:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2104      	movs	r1, #4
 8004264:	438a      	bics	r2, r1
 8004266:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800427a:	e027      	b.n	80042cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	0011      	movs	r1, r2
 8004284:	0018      	movs	r0, r3
 8004286:	f000 fae5 	bl	8004854 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2180      	movs	r1, #128	; 0x80
 8004296:	0109      	lsls	r1, r1, #4
 8004298:	430a      	orrs	r2, r1
 800429a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4910      	ldr	r1, [pc, #64]	; (80042e8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80042a8:	400a      	ands	r2, r1
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	021a      	lsls	r2, r3, #8
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042c0:	e004      	b.n	80042cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80042c2:	2317      	movs	r3, #23
 80042c4:	18fb      	adds	r3, r7, r3
 80042c6:	2201      	movs	r2, #1
 80042c8:	701a      	strb	r2, [r3, #0]
      break;
 80042ca:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	223c      	movs	r2, #60	; 0x3c
 80042d0:	2100      	movs	r1, #0
 80042d2:	5499      	strb	r1, [r3, r2]

  return status;
 80042d4:	2317      	movs	r3, #23
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	781b      	ldrb	r3, [r3, #0]
}
 80042da:	0018      	movs	r0, r3
 80042dc:	46bd      	mov	sp, r7
 80042de:	b006      	add	sp, #24
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	08006a0c 	.word	0x08006a0c
 80042e8:	fffffbff 	.word	0xfffffbff

080042ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a30      	ldr	r2, [pc, #192]	; (80043c0 <TIM_Base_SetConfig+0xd4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d008      	beq.n	8004316 <TIM_Base_SetConfig+0x2a>
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	2380      	movs	r3, #128	; 0x80
 8004308:	05db      	lsls	r3, r3, #23
 800430a:	429a      	cmp	r2, r3
 800430c:	d003      	beq.n	8004316 <TIM_Base_SetConfig+0x2a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a2c      	ldr	r2, [pc, #176]	; (80043c4 <TIM_Base_SetConfig+0xd8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d108      	bne.n	8004328 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2270      	movs	r2, #112	; 0x70
 800431a:	4393      	bics	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a25      	ldr	r2, [pc, #148]	; (80043c0 <TIM_Base_SetConfig+0xd4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d014      	beq.n	800435a <TIM_Base_SetConfig+0x6e>
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	2380      	movs	r3, #128	; 0x80
 8004334:	05db      	lsls	r3, r3, #23
 8004336:	429a      	cmp	r2, r3
 8004338:	d00f      	beq.n	800435a <TIM_Base_SetConfig+0x6e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a21      	ldr	r2, [pc, #132]	; (80043c4 <TIM_Base_SetConfig+0xd8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00b      	beq.n	800435a <TIM_Base_SetConfig+0x6e>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a20      	ldr	r2, [pc, #128]	; (80043c8 <TIM_Base_SetConfig+0xdc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d007      	beq.n	800435a <TIM_Base_SetConfig+0x6e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a1f      	ldr	r2, [pc, #124]	; (80043cc <TIM_Base_SetConfig+0xe0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d003      	beq.n	800435a <TIM_Base_SetConfig+0x6e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a1e      	ldr	r2, [pc, #120]	; (80043d0 <TIM_Base_SetConfig+0xe4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d108      	bne.n	800436c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <TIM_Base_SetConfig+0xe8>)
 800435e:	4013      	ands	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2280      	movs	r2, #128	; 0x80
 8004370:	4393      	bics	r3, r2
 8004372:	001a      	movs	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a0a      	ldr	r2, [pc, #40]	; (80043c0 <TIM_Base_SetConfig+0xd4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d007      	beq.n	80043aa <TIM_Base_SetConfig+0xbe>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a0b      	ldr	r2, [pc, #44]	; (80043cc <TIM_Base_SetConfig+0xe0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d003      	beq.n	80043aa <TIM_Base_SetConfig+0xbe>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a0a      	ldr	r2, [pc, #40]	; (80043d0 <TIM_Base_SetConfig+0xe4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d103      	bne.n	80043b2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	615a      	str	r2, [r3, #20]
}
 80043b8:	46c0      	nop			; (mov r8, r8)
 80043ba:	46bd      	mov	sp, r7
 80043bc:	b004      	add	sp, #16
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	40000400 	.word	0x40000400
 80043c8:	40002000 	.word	0x40002000
 80043cc:	40014400 	.word	0x40014400
 80043d0:	40014800 	.word	0x40014800
 80043d4:	fffffcff 	.word	0xfffffcff

080043d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	2201      	movs	r2, #1
 80043e8:	4393      	bics	r3, r2
 80043ea:	001a      	movs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4a2e      	ldr	r2, [pc, #184]	; (80044c0 <TIM_OC1_SetConfig+0xe8>)
 8004406:	4013      	ands	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2203      	movs	r2, #3
 800440e:	4393      	bics	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2202      	movs	r2, #2
 8004420:	4393      	bics	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a24      	ldr	r2, [pc, #144]	; (80044c4 <TIM_OC1_SetConfig+0xec>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d007      	beq.n	8004446 <TIM_OC1_SetConfig+0x6e>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a23      	ldr	r2, [pc, #140]	; (80044c8 <TIM_OC1_SetConfig+0xf0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d003      	beq.n	8004446 <TIM_OC1_SetConfig+0x6e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a22      	ldr	r2, [pc, #136]	; (80044cc <TIM_OC1_SetConfig+0xf4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d10c      	bne.n	8004460 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2208      	movs	r2, #8
 800444a:	4393      	bics	r3, r2
 800444c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2204      	movs	r2, #4
 800445c:	4393      	bics	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a18      	ldr	r2, [pc, #96]	; (80044c4 <TIM_OC1_SetConfig+0xec>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d007      	beq.n	8004478 <TIM_OC1_SetConfig+0xa0>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <TIM_OC1_SetConfig+0xf0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_OC1_SetConfig+0xa0>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a16      	ldr	r2, [pc, #88]	; (80044cc <TIM_OC1_SetConfig+0xf4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d111      	bne.n	800449c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4a15      	ldr	r2, [pc, #84]	; (80044d0 <TIM_OC1_SetConfig+0xf8>)
 800447c:	4013      	ands	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4a14      	ldr	r2, [pc, #80]	; (80044d4 <TIM_OC1_SetConfig+0xfc>)
 8004484:	4013      	ands	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	621a      	str	r2, [r3, #32]
}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	46bd      	mov	sp, r7
 80044ba:	b006      	add	sp, #24
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	fffeff8f 	.word	0xfffeff8f
 80044c4:	40012c00 	.word	0x40012c00
 80044c8:	40014400 	.word	0x40014400
 80044cc:	40014800 	.word	0x40014800
 80044d0:	fffffeff 	.word	0xfffffeff
 80044d4:	fffffdff 	.word	0xfffffdff

080044d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	2210      	movs	r2, #16
 80044e8:	4393      	bics	r3, r2
 80044ea:	001a      	movs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4a2c      	ldr	r2, [pc, #176]	; (80045b8 <TIM_OC2_SetConfig+0xe0>)
 8004506:	4013      	ands	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4a2b      	ldr	r2, [pc, #172]	; (80045bc <TIM_OC2_SetConfig+0xe4>)
 800450e:	4013      	ands	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2220      	movs	r2, #32
 8004522:	4393      	bics	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a22      	ldr	r2, [pc, #136]	; (80045c0 <TIM_OC2_SetConfig+0xe8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d10d      	bne.n	8004556 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2280      	movs	r2, #128	; 0x80
 800453e:	4393      	bics	r3, r2
 8004540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2240      	movs	r2, #64	; 0x40
 8004552:	4393      	bics	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a19      	ldr	r2, [pc, #100]	; (80045c0 <TIM_OC2_SetConfig+0xe8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <TIM_OC2_SetConfig+0x96>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a18      	ldr	r2, [pc, #96]	; (80045c4 <TIM_OC2_SetConfig+0xec>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d003      	beq.n	800456e <TIM_OC2_SetConfig+0x96>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a17      	ldr	r2, [pc, #92]	; (80045c8 <TIM_OC2_SetConfig+0xf0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d113      	bne.n	8004596 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4a16      	ldr	r2, [pc, #88]	; (80045cc <TIM_OC2_SetConfig+0xf4>)
 8004572:	4013      	ands	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <TIM_OC2_SetConfig+0xf8>)
 800457a:	4013      	ands	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	621a      	str	r2, [r3, #32]
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b006      	add	sp, #24
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	feff8fff 	.word	0xfeff8fff
 80045bc:	fffffcff 	.word	0xfffffcff
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40014400 	.word	0x40014400
 80045c8:	40014800 	.word	0x40014800
 80045cc:	fffffbff 	.word	0xfffffbff
 80045d0:	fffff7ff 	.word	0xfffff7ff

080045d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	4a33      	ldr	r2, [pc, #204]	; (80046b0 <TIM_OC3_SetConfig+0xdc>)
 80045e4:	401a      	ands	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4a2d      	ldr	r2, [pc, #180]	; (80046b4 <TIM_OC3_SetConfig+0xe0>)
 8004600:	4013      	ands	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2203      	movs	r2, #3
 8004608:	4393      	bics	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	4a27      	ldr	r2, [pc, #156]	; (80046b8 <TIM_OC3_SetConfig+0xe4>)
 800461a:	4013      	ands	r3, r2
 800461c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a23      	ldr	r2, [pc, #140]	; (80046bc <TIM_OC3_SetConfig+0xe8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d10d      	bne.n	800464e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	4a22      	ldr	r2, [pc, #136]	; (80046c0 <TIM_OC3_SetConfig+0xec>)
 8004636:	4013      	ands	r3, r2
 8004638:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	4a1e      	ldr	r2, [pc, #120]	; (80046c4 <TIM_OC3_SetConfig+0xf0>)
 800464a:	4013      	ands	r3, r2
 800464c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1a      	ldr	r2, [pc, #104]	; (80046bc <TIM_OC3_SetConfig+0xe8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d007      	beq.n	8004666 <TIM_OC3_SetConfig+0x92>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a1b      	ldr	r2, [pc, #108]	; (80046c8 <TIM_OC3_SetConfig+0xf4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d003      	beq.n	8004666 <TIM_OC3_SetConfig+0x92>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a1a      	ldr	r2, [pc, #104]	; (80046cc <TIM_OC3_SetConfig+0xf8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d113      	bne.n	800468e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4a19      	ldr	r2, [pc, #100]	; (80046d0 <TIM_OC3_SetConfig+0xfc>)
 800466a:	4013      	ands	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4a18      	ldr	r2, [pc, #96]	; (80046d4 <TIM_OC3_SetConfig+0x100>)
 8004672:	4013      	ands	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	621a      	str	r2, [r3, #32]
}
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b006      	add	sp, #24
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	fffffeff 	.word	0xfffffeff
 80046b4:	fffeff8f 	.word	0xfffeff8f
 80046b8:	fffffdff 	.word	0xfffffdff
 80046bc:	40012c00 	.word	0x40012c00
 80046c0:	fffff7ff 	.word	0xfffff7ff
 80046c4:	fffffbff 	.word	0xfffffbff
 80046c8:	40014400 	.word	0x40014400
 80046cc:	40014800 	.word	0x40014800
 80046d0:	ffffefff 	.word	0xffffefff
 80046d4:	ffffdfff 	.word	0xffffdfff

080046d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	4a26      	ldr	r2, [pc, #152]	; (8004780 <TIM_OC4_SetConfig+0xa8>)
 80046e8:	401a      	ands	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4a20      	ldr	r2, [pc, #128]	; (8004784 <TIM_OC4_SetConfig+0xac>)
 8004704:	4013      	ands	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4a1f      	ldr	r2, [pc, #124]	; (8004788 <TIM_OC4_SetConfig+0xb0>)
 800470c:	4013      	ands	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	021b      	lsls	r3, r3, #8
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4a1b      	ldr	r2, [pc, #108]	; (800478c <TIM_OC4_SetConfig+0xb4>)
 8004720:	4013      	ands	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	031b      	lsls	r3, r3, #12
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a17      	ldr	r2, [pc, #92]	; (8004790 <TIM_OC4_SetConfig+0xb8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d007      	beq.n	8004748 <TIM_OC4_SetConfig+0x70>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a16      	ldr	r2, [pc, #88]	; (8004794 <TIM_OC4_SetConfig+0xbc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d003      	beq.n	8004748 <TIM_OC4_SetConfig+0x70>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a15      	ldr	r2, [pc, #84]	; (8004798 <TIM_OC4_SetConfig+0xc0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d109      	bne.n	800475c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	4a14      	ldr	r2, [pc, #80]	; (800479c <TIM_OC4_SetConfig+0xc4>)
 800474c:	4013      	ands	r3, r2
 800474e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	019b      	lsls	r3, r3, #6
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4313      	orrs	r3, r2
 800475a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	621a      	str	r2, [r3, #32]
}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	46bd      	mov	sp, r7
 800477a:	b006      	add	sp, #24
 800477c:	bd80      	pop	{r7, pc}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	ffffefff 	.word	0xffffefff
 8004784:	feff8fff 	.word	0xfeff8fff
 8004788:	fffffcff 	.word	0xfffffcff
 800478c:	ffffdfff 	.word	0xffffdfff
 8004790:	40012c00 	.word	0x40012c00
 8004794:	40014400 	.word	0x40014400
 8004798:	40014800 	.word	0x40014800
 800479c:	ffffbfff 	.word	0xffffbfff

080047a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	4a23      	ldr	r2, [pc, #140]	; (800483c <TIM_OC5_SetConfig+0x9c>)
 80047b0:	401a      	ands	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4a1d      	ldr	r2, [pc, #116]	; (8004840 <TIM_OC5_SetConfig+0xa0>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4a19      	ldr	r2, [pc, #100]	; (8004844 <TIM_OC5_SetConfig+0xa4>)
 80047de:	4013      	ands	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	041b      	lsls	r3, r3, #16
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a15      	ldr	r2, [pc, #84]	; (8004848 <TIM_OC5_SetConfig+0xa8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d007      	beq.n	8004806 <TIM_OC5_SetConfig+0x66>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a14      	ldr	r2, [pc, #80]	; (800484c <TIM_OC5_SetConfig+0xac>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_OC5_SetConfig+0x66>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a13      	ldr	r2, [pc, #76]	; (8004850 <TIM_OC5_SetConfig+0xb0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d109      	bne.n	800481a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	4a0c      	ldr	r2, [pc, #48]	; (800483c <TIM_OC5_SetConfig+0x9c>)
 800480a:	4013      	ands	r3, r2
 800480c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	621a      	str	r2, [r3, #32]
}
 8004834:	46c0      	nop			; (mov r8, r8)
 8004836:	46bd      	mov	sp, r7
 8004838:	b006      	add	sp, #24
 800483a:	bd80      	pop	{r7, pc}
 800483c:	fffeffff 	.word	0xfffeffff
 8004840:	fffeff8f 	.word	0xfffeff8f
 8004844:	fffdffff 	.word	0xfffdffff
 8004848:	40012c00 	.word	0x40012c00
 800484c:	40014400 	.word	0x40014400
 8004850:	40014800 	.word	0x40014800

08004854 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	4a24      	ldr	r2, [pc, #144]	; (80048f4 <TIM_OC6_SetConfig+0xa0>)
 8004864:	401a      	ands	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4a1e      	ldr	r2, [pc, #120]	; (80048f8 <TIM_OC6_SetConfig+0xa4>)
 8004880:	4013      	ands	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	021b      	lsls	r3, r3, #8
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4313      	orrs	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	4a1a      	ldr	r2, [pc, #104]	; (80048fc <TIM_OC6_SetConfig+0xa8>)
 8004894:	4013      	ands	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	051b      	lsls	r3, r3, #20
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a16      	ldr	r2, [pc, #88]	; (8004900 <TIM_OC6_SetConfig+0xac>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d007      	beq.n	80048bc <TIM_OC6_SetConfig+0x68>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a15      	ldr	r2, [pc, #84]	; (8004904 <TIM_OC6_SetConfig+0xb0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <TIM_OC6_SetConfig+0x68>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a14      	ldr	r2, [pc, #80]	; (8004908 <TIM_OC6_SetConfig+0xb4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d109      	bne.n	80048d0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	4a13      	ldr	r2, [pc, #76]	; (800490c <TIM_OC6_SetConfig+0xb8>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	029b      	lsls	r3, r3, #10
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	621a      	str	r2, [r3, #32]
}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b006      	add	sp, #24
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	ffefffff 	.word	0xffefffff
 80048f8:	feff8fff 	.word	0xfeff8fff
 80048fc:	ffdfffff 	.word	0xffdfffff
 8004900:	40012c00 	.word	0x40012c00
 8004904:	40014400 	.word	0x40014400
 8004908:	40014800 	.word	0x40014800
 800490c:	fffbffff 	.word	0xfffbffff

08004910 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	221f      	movs	r2, #31
 8004920:	4013      	ands	r3, r2
 8004922:	2201      	movs	r2, #1
 8004924:	409a      	lsls	r2, r3
 8004926:	0013      	movs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	43d2      	mvns	r2, r2
 8004932:	401a      	ands	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a1a      	ldr	r2, [r3, #32]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	211f      	movs	r1, #31
 8004940:	400b      	ands	r3, r1
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	4099      	lsls	r1, r3
 8004946:	000b      	movs	r3, r1
 8004948:	431a      	orrs	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	621a      	str	r2, [r3, #32]
}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	46bd      	mov	sp, r7
 8004952:	b006      	add	sp, #24
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	223c      	movs	r2, #60	; 0x3c
 8004966:	5c9b      	ldrb	r3, [r3, r2]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800496c:	2302      	movs	r3, #2
 800496e:	e050      	b.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	223c      	movs	r2, #60	; 0x3c
 8004974:	2101      	movs	r1, #1
 8004976:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	223d      	movs	r2, #61	; 0x3d
 800497c:	2102      	movs	r1, #2
 800497e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a21      	ldr	r2, [pc, #132]	; (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d108      	bne.n	80049ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4a20      	ldr	r2, [pc, #128]	; (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800499e:	4013      	ands	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2270      	movs	r2, #112	; 0x70
 80049b0:	4393      	bics	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a14      	ldr	r2, [pc, #80]	; (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00a      	beq.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	2380      	movs	r3, #128	; 0x80
 80049d6:	05db      	lsls	r3, r3, #23
 80049d8:	429a      	cmp	r2, r3
 80049da:	d004      	beq.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a10      	ldr	r2, [pc, #64]	; (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d10c      	bne.n	8004a00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2280      	movs	r2, #128	; 0x80
 80049ea:	4393      	bics	r3, r2
 80049ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	223d      	movs	r2, #61	; 0x3d
 8004a04:	2101      	movs	r1, #1
 8004a06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	223c      	movs	r2, #60	; 0x3c
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	0018      	movs	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b004      	add	sp, #16
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	ff0fffff 	.word	0xff0fffff
 8004a24:	40000400 	.word	0x40000400

08004a28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	223c      	movs	r2, #60	; 0x3c
 8004a3a:	5c9b      	ldrb	r3, [r3, r2]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e079      	b.n	8004b38 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	223c      	movs	r2, #60	; 0x3c
 8004a48:	2101      	movs	r1, #1
 8004a4a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	22ff      	movs	r2, #255	; 0xff
 8004a50:	4393      	bics	r3, r2
 8004a52:	001a      	movs	r2, r3
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4a38      	ldr	r2, [pc, #224]	; (8004b40 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004a60:	401a      	ands	r2, r3
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4a35      	ldr	r2, [pc, #212]	; (8004b44 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004a6e:	401a      	ands	r2, r3
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a33      	ldr	r2, [pc, #204]	; (8004b48 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004a7c:	401a      	ands	r2, r3
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4a30      	ldr	r2, [pc, #192]	; (8004b4c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004a8a:	401a      	ands	r2, r3
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4a2e      	ldr	r2, [pc, #184]	; (8004b50 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004a98:	401a      	ands	r2, r3
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4a2b      	ldr	r2, [pc, #172]	; (8004b54 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a29      	ldr	r2, [pc, #164]	; (8004b58 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004ab4:	401a      	ands	r2, r3
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	041b      	lsls	r3, r3, #16
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a25      	ldr	r2, [pc, #148]	; (8004b5c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d106      	bne.n	8004ad8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4a24      	ldr	r2, [pc, #144]	; (8004b60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004ace:	401a      	ands	r2, r3
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1f      	ldr	r2, [pc, #124]	; (8004b5c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d121      	bne.n	8004b26 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4a1f      	ldr	r2, [pc, #124]	; (8004b64 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aec:	051b      	lsls	r3, r3, #20
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4a1c      	ldr	r2, [pc, #112]	; (8004b68 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004af6:	401a      	ands	r2, r3
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4a1a      	ldr	r2, [pc, #104]	; (8004b6c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004b04:	401a      	ands	r2, r3
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a12      	ldr	r2, [pc, #72]	; (8004b5c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d106      	bne.n	8004b26 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4a15      	ldr	r2, [pc, #84]	; (8004b70 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004b1c:	401a      	ands	r2, r3
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	223c      	movs	r2, #60	; 0x3c
 8004b32:	2100      	movs	r1, #0
 8004b34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	0018      	movs	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b004      	add	sp, #16
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	fffffcff 	.word	0xfffffcff
 8004b44:	fffffbff 	.word	0xfffffbff
 8004b48:	fffff7ff 	.word	0xfffff7ff
 8004b4c:	ffffefff 	.word	0xffffefff
 8004b50:	ffffdfff 	.word	0xffffdfff
 8004b54:	ffffbfff 	.word	0xffffbfff
 8004b58:	fff0ffff 	.word	0xfff0ffff
 8004b5c:	40012c00 	.word	0x40012c00
 8004b60:	efffffff 	.word	0xefffffff
 8004b64:	ff0fffff 	.word	0xff0fffff
 8004b68:	feffffff 	.word	0xfeffffff
 8004b6c:	fdffffff 	.word	0xfdffffff
 8004b70:	dfffffff 	.word	0xdfffffff

08004b74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e046      	b.n	8004c14 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2288      	movs	r2, #136	; 0x88
 8004b8a:	589b      	ldr	r3, [r3, r2]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d107      	bne.n	8004ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2284      	movs	r2, #132	; 0x84
 8004b94:	2100      	movs	r1, #0
 8004b96:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f7fc ff78 	bl	8001a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2288      	movs	r2, #136	; 0x88
 8004ba4:	2124      	movs	r1, #36	; 0x24
 8004ba6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	438a      	bics	r2, r1
 8004bb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f000 f8cc 	bl	8004d58 <UART_SetConfig>
 8004bc0:	0003      	movs	r3, r0
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e024      	b.n	8004c14 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f000 fb37 	bl	8005248 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	490d      	ldr	r1, [pc, #52]	; (8004c1c <HAL_UART_Init+0xa8>)
 8004be6:	400a      	ands	r2, r1
 8004be8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	212a      	movs	r1, #42	; 0x2a
 8004bf6:	438a      	bics	r2, r1
 8004bf8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2101      	movs	r1, #1
 8004c06:	430a      	orrs	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f000 fbcf 	bl	80053b0 <UART_CheckIdleState>
 8004c12:	0003      	movs	r3, r0
}
 8004c14:	0018      	movs	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b002      	add	sp, #8
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	ffffb7ff 	.word	0xffffb7ff

08004c20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08a      	sub	sp, #40	; 0x28
 8004c24:	af02      	add	r7, sp, #8
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	1dbb      	adds	r3, r7, #6
 8004c2e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2288      	movs	r2, #136	; 0x88
 8004c34:	589b      	ldr	r3, [r3, r2]
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d000      	beq.n	8004c3c <HAL_UART_Transmit+0x1c>
 8004c3a:	e088      	b.n	8004d4e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_UART_Transmit+0x2a>
 8004c42:	1dbb      	adds	r3, r7, #6
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e080      	b.n	8004d50 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	015b      	lsls	r3, r3, #5
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d109      	bne.n	8004c6e <HAL_UART_Transmit+0x4e>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d105      	bne.n	8004c6e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2201      	movs	r2, #1
 8004c66:	4013      	ands	r3, r2
 8004c68:	d001      	beq.n	8004c6e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e070      	b.n	8004d50 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2290      	movs	r2, #144	; 0x90
 8004c72:	2100      	movs	r1, #0
 8004c74:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2288      	movs	r2, #136	; 0x88
 8004c7a:	2121      	movs	r1, #33	; 0x21
 8004c7c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c7e:	f7fd f8e5 	bl	8001e4c <HAL_GetTick>
 8004c82:	0003      	movs	r3, r0
 8004c84:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1dba      	adds	r2, r7, #6
 8004c8a:	2154      	movs	r1, #84	; 0x54
 8004c8c:	8812      	ldrh	r2, [r2, #0]
 8004c8e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1dba      	adds	r2, r7, #6
 8004c94:	2156      	movs	r1, #86	; 0x56
 8004c96:	8812      	ldrh	r2, [r2, #0]
 8004c98:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	2380      	movs	r3, #128	; 0x80
 8004ca0:	015b      	lsls	r3, r3, #5
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d108      	bne.n	8004cb8 <HAL_UART_Transmit+0x98>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d104      	bne.n	8004cb8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	e003      	b.n	8004cc0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cc0:	e02c      	b.n	8004d1c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	0013      	movs	r3, r2
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2180      	movs	r1, #128	; 0x80
 8004cd0:	f000 fbbc 	bl	800544c <UART_WaitOnFlagUntilTimeout>
 8004cd4:	1e03      	subs	r3, r0, #0
 8004cd6:	d001      	beq.n	8004cdc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e039      	b.n	8004d50 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10b      	bne.n	8004cfa <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	001a      	movs	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	05d2      	lsls	r2, r2, #23
 8004cee:	0dd2      	lsrs	r2, r2, #23
 8004cf0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	3302      	adds	r3, #2
 8004cf6:	61bb      	str	r3, [r7, #24]
 8004cf8:	e007      	b.n	8004d0a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	781a      	ldrb	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	3301      	adds	r3, #1
 8004d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2256      	movs	r2, #86	; 0x56
 8004d0e:	5a9b      	ldrh	r3, [r3, r2]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b299      	uxth	r1, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2256      	movs	r2, #86	; 0x56
 8004d1a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2256      	movs	r2, #86	; 0x56
 8004d20:	5a9b      	ldrh	r3, [r3, r2]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1cc      	bne.n	8004cc2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	0013      	movs	r3, r2
 8004d32:	2200      	movs	r2, #0
 8004d34:	2140      	movs	r1, #64	; 0x40
 8004d36:	f000 fb89 	bl	800544c <UART_WaitOnFlagUntilTimeout>
 8004d3a:	1e03      	subs	r3, r0, #0
 8004d3c:	d001      	beq.n	8004d42 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e006      	b.n	8004d50 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2288      	movs	r2, #136	; 0x88
 8004d46:	2120      	movs	r1, #32
 8004d48:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e000      	b.n	8004d50 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004d4e:	2302      	movs	r3, #2
  }
}
 8004d50:	0018      	movs	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b008      	add	sp, #32
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d58:	b5b0      	push	{r4, r5, r7, lr}
 8004d5a:	b090      	sub	sp, #64	; 0x40
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d60:	231a      	movs	r3, #26
 8004d62:	2220      	movs	r2, #32
 8004d64:	189b      	adds	r3, r3, r2
 8004d66:	19db      	adds	r3, r3, r7
 8004d68:	2200      	movs	r2, #0
 8004d6a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	431a      	orrs	r2, r3
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4ac4      	ldr	r2, [pc, #784]	; (800509c <UART_SetConfig+0x344>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	0019      	movs	r1, r3
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d96:	430b      	orrs	r3, r1
 8004d98:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	4abf      	ldr	r2, [pc, #764]	; (80050a0 <UART_SetConfig+0x348>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	0018      	movs	r0, r3
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	68d9      	ldr	r1, [r3, #12]
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	0003      	movs	r3, r0
 8004db0:	430b      	orrs	r3, r1
 8004db2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4ab9      	ldr	r2, [pc, #740]	; (80050a4 <UART_SetConfig+0x34c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d004      	beq.n	8004dce <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	4ab4      	ldr	r2, [pc, #720]	; (80050a8 <UART_SetConfig+0x350>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	0019      	movs	r1, r3
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de0:	430b      	orrs	r3, r1
 8004de2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	220f      	movs	r2, #15
 8004dec:	4393      	bics	r3, r2
 8004dee:	0018      	movs	r0, r3
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	0003      	movs	r3, r0
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4aaa      	ldr	r2, [pc, #680]	; (80050ac <UART_SetConfig+0x354>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d131      	bne.n	8004e6c <UART_SetConfig+0x114>
 8004e08:	4ba9      	ldr	r3, [pc, #676]	; (80050b0 <UART_SetConfig+0x358>)
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0c:	2203      	movs	r2, #3
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d01d      	beq.n	8004e50 <UART_SetConfig+0xf8>
 8004e14:	d823      	bhi.n	8004e5e <UART_SetConfig+0x106>
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d00c      	beq.n	8004e34 <UART_SetConfig+0xdc>
 8004e1a:	d820      	bhi.n	8004e5e <UART_SetConfig+0x106>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <UART_SetConfig+0xce>
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d00e      	beq.n	8004e42 <UART_SetConfig+0xea>
 8004e24:	e01b      	b.n	8004e5e <UART_SetConfig+0x106>
 8004e26:	231b      	movs	r3, #27
 8004e28:	2220      	movs	r2, #32
 8004e2a:	189b      	adds	r3, r3, r2
 8004e2c:	19db      	adds	r3, r3, r7
 8004e2e:	2200      	movs	r2, #0
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	e071      	b.n	8004f18 <UART_SetConfig+0x1c0>
 8004e34:	231b      	movs	r3, #27
 8004e36:	2220      	movs	r2, #32
 8004e38:	189b      	adds	r3, r3, r2
 8004e3a:	19db      	adds	r3, r3, r7
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	e06a      	b.n	8004f18 <UART_SetConfig+0x1c0>
 8004e42:	231b      	movs	r3, #27
 8004e44:	2220      	movs	r2, #32
 8004e46:	189b      	adds	r3, r3, r2
 8004e48:	19db      	adds	r3, r3, r7
 8004e4a:	2204      	movs	r2, #4
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	e063      	b.n	8004f18 <UART_SetConfig+0x1c0>
 8004e50:	231b      	movs	r3, #27
 8004e52:	2220      	movs	r2, #32
 8004e54:	189b      	adds	r3, r3, r2
 8004e56:	19db      	adds	r3, r3, r7
 8004e58:	2208      	movs	r2, #8
 8004e5a:	701a      	strb	r2, [r3, #0]
 8004e5c:	e05c      	b.n	8004f18 <UART_SetConfig+0x1c0>
 8004e5e:	231b      	movs	r3, #27
 8004e60:	2220      	movs	r2, #32
 8004e62:	189b      	adds	r3, r3, r2
 8004e64:	19db      	adds	r3, r3, r7
 8004e66:	2210      	movs	r2, #16
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	e055      	b.n	8004f18 <UART_SetConfig+0x1c0>
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a90      	ldr	r2, [pc, #576]	; (80050b4 <UART_SetConfig+0x35c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d106      	bne.n	8004e84 <UART_SetConfig+0x12c>
 8004e76:	231b      	movs	r3, #27
 8004e78:	2220      	movs	r2, #32
 8004e7a:	189b      	adds	r3, r3, r2
 8004e7c:	19db      	adds	r3, r3, r7
 8004e7e:	2200      	movs	r2, #0
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	e049      	b.n	8004f18 <UART_SetConfig+0x1c0>
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a86      	ldr	r2, [pc, #536]	; (80050a4 <UART_SetConfig+0x34c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d13e      	bne.n	8004f0c <UART_SetConfig+0x1b4>
 8004e8e:	4b88      	ldr	r3, [pc, #544]	; (80050b0 <UART_SetConfig+0x358>)
 8004e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e92:	23c0      	movs	r3, #192	; 0xc0
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	4013      	ands	r3, r2
 8004e98:	22c0      	movs	r2, #192	; 0xc0
 8004e9a:	0112      	lsls	r2, r2, #4
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d027      	beq.n	8004ef0 <UART_SetConfig+0x198>
 8004ea0:	22c0      	movs	r2, #192	; 0xc0
 8004ea2:	0112      	lsls	r2, r2, #4
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d82a      	bhi.n	8004efe <UART_SetConfig+0x1a6>
 8004ea8:	2280      	movs	r2, #128	; 0x80
 8004eaa:	0112      	lsls	r2, r2, #4
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d011      	beq.n	8004ed4 <UART_SetConfig+0x17c>
 8004eb0:	2280      	movs	r2, #128	; 0x80
 8004eb2:	0112      	lsls	r2, r2, #4
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d822      	bhi.n	8004efe <UART_SetConfig+0x1a6>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d004      	beq.n	8004ec6 <UART_SetConfig+0x16e>
 8004ebc:	2280      	movs	r2, #128	; 0x80
 8004ebe:	00d2      	lsls	r2, r2, #3
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00e      	beq.n	8004ee2 <UART_SetConfig+0x18a>
 8004ec4:	e01b      	b.n	8004efe <UART_SetConfig+0x1a6>
 8004ec6:	231b      	movs	r3, #27
 8004ec8:	2220      	movs	r2, #32
 8004eca:	189b      	adds	r3, r3, r2
 8004ecc:	19db      	adds	r3, r3, r7
 8004ece:	2200      	movs	r2, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	e021      	b.n	8004f18 <UART_SetConfig+0x1c0>
 8004ed4:	231b      	movs	r3, #27
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	189b      	adds	r3, r3, r2
 8004eda:	19db      	adds	r3, r3, r7
 8004edc:	2202      	movs	r2, #2
 8004ede:	701a      	strb	r2, [r3, #0]
 8004ee0:	e01a      	b.n	8004f18 <UART_SetConfig+0x1c0>
 8004ee2:	231b      	movs	r3, #27
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	189b      	adds	r3, r3, r2
 8004ee8:	19db      	adds	r3, r3, r7
 8004eea:	2204      	movs	r2, #4
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	e013      	b.n	8004f18 <UART_SetConfig+0x1c0>
 8004ef0:	231b      	movs	r3, #27
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	189b      	adds	r3, r3, r2
 8004ef6:	19db      	adds	r3, r3, r7
 8004ef8:	2208      	movs	r2, #8
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	e00c      	b.n	8004f18 <UART_SetConfig+0x1c0>
 8004efe:	231b      	movs	r3, #27
 8004f00:	2220      	movs	r2, #32
 8004f02:	189b      	adds	r3, r3, r2
 8004f04:	19db      	adds	r3, r3, r7
 8004f06:	2210      	movs	r2, #16
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	e005      	b.n	8004f18 <UART_SetConfig+0x1c0>
 8004f0c:	231b      	movs	r3, #27
 8004f0e:	2220      	movs	r2, #32
 8004f10:	189b      	adds	r3, r3, r2
 8004f12:	19db      	adds	r3, r3, r7
 8004f14:	2210      	movs	r2, #16
 8004f16:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a61      	ldr	r2, [pc, #388]	; (80050a4 <UART_SetConfig+0x34c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d000      	beq.n	8004f24 <UART_SetConfig+0x1cc>
 8004f22:	e092      	b.n	800504a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f24:	231b      	movs	r3, #27
 8004f26:	2220      	movs	r2, #32
 8004f28:	189b      	adds	r3, r3, r2
 8004f2a:	19db      	adds	r3, r3, r7
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d015      	beq.n	8004f5e <UART_SetConfig+0x206>
 8004f32:	dc18      	bgt.n	8004f66 <UART_SetConfig+0x20e>
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d00d      	beq.n	8004f54 <UART_SetConfig+0x1fc>
 8004f38:	dc15      	bgt.n	8004f66 <UART_SetConfig+0x20e>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <UART_SetConfig+0x1ec>
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d005      	beq.n	8004f4e <UART_SetConfig+0x1f6>
 8004f42:	e010      	b.n	8004f66 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f44:	f7fd ff7c 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f4c:	e014      	b.n	8004f78 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f4e:	4b5a      	ldr	r3, [pc, #360]	; (80050b8 <UART_SetConfig+0x360>)
 8004f50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f52:	e011      	b.n	8004f78 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f54:	f7fd fee8 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 8004f58:	0003      	movs	r3, r0
 8004f5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f5c:	e00c      	b.n	8004f78 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5e:	2380      	movs	r3, #128	; 0x80
 8004f60:	021b      	lsls	r3, r3, #8
 8004f62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f64:	e008      	b.n	8004f78 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004f6a:	231a      	movs	r3, #26
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	189b      	adds	r3, r3, r2
 8004f70:	19db      	adds	r3, r3, r7
 8004f72:	2201      	movs	r2, #1
 8004f74:	701a      	strb	r2, [r3, #0]
        break;
 8004f76:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d100      	bne.n	8004f80 <UART_SetConfig+0x228>
 8004f7e:	e147      	b.n	8005210 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f84:	4b4d      	ldr	r3, [pc, #308]	; (80050bc <UART_SetConfig+0x364>)
 8004f86:	0052      	lsls	r2, r2, #1
 8004f88:	5ad3      	ldrh	r3, [r2, r3]
 8004f8a:	0019      	movs	r1, r3
 8004f8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004f8e:	f7fb f8c3 	bl	8000118 <__udivsi3>
 8004f92:	0003      	movs	r3, r0
 8004f94:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	0013      	movs	r3, r2
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	189b      	adds	r3, r3, r2
 8004fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d305      	bcc.n	8004fb2 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d906      	bls.n	8004fc0 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004fb2:	231a      	movs	r3, #26
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	189b      	adds	r3, r3, r2
 8004fb8:	19db      	adds	r3, r3, r7
 8004fba:	2201      	movs	r2, #1
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	e127      	b.n	8005210 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc2:	61bb      	str	r3, [r7, #24]
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	61fb      	str	r3, [r7, #28]
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fcc:	4b3b      	ldr	r3, [pc, #236]	; (80050bc <UART_SetConfig+0x364>)
 8004fce:	0052      	lsls	r2, r2, #1
 8004fd0:	5ad3      	ldrh	r3, [r2, r3]
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	69b8      	ldr	r0, [r7, #24]
 8004fde:	69f9      	ldr	r1, [r7, #28]
 8004fe0:	f7fb f926 	bl	8000230 <__aeabi_uldivmod>
 8004fe4:	0002      	movs	r2, r0
 8004fe6:	000b      	movs	r3, r1
 8004fe8:	0e11      	lsrs	r1, r2, #24
 8004fea:	021d      	lsls	r5, r3, #8
 8004fec:	430d      	orrs	r5, r1
 8004fee:	0214      	lsls	r4, r2, #8
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	085b      	lsrs	r3, r3, #1
 8004ff6:	60bb      	str	r3, [r7, #8]
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68b8      	ldr	r0, [r7, #8]
 8004ffe:	68f9      	ldr	r1, [r7, #12]
 8005000:	1900      	adds	r0, r0, r4
 8005002:	4169      	adcs	r1, r5
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	603b      	str	r3, [r7, #0]
 800500a:	2300      	movs	r3, #0
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f7fb f90d 	bl	8000230 <__aeabi_uldivmod>
 8005016:	0002      	movs	r2, r0
 8005018:	000b      	movs	r3, r1
 800501a:	0013      	movs	r3, r2
 800501c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800501e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005020:	23c0      	movs	r3, #192	; 0xc0
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	429a      	cmp	r2, r3
 8005026:	d309      	bcc.n	800503c <UART_SetConfig+0x2e4>
 8005028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	035b      	lsls	r3, r3, #13
 800502e:	429a      	cmp	r2, r3
 8005030:	d204      	bcs.n	800503c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005038:	60da      	str	r2, [r3, #12]
 800503a:	e0e9      	b.n	8005210 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800503c:	231a      	movs	r3, #26
 800503e:	2220      	movs	r2, #32
 8005040:	189b      	adds	r3, r3, r2
 8005042:	19db      	adds	r3, r3, r7
 8005044:	2201      	movs	r2, #1
 8005046:	701a      	strb	r2, [r3, #0]
 8005048:	e0e2      	b.n	8005210 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	69da      	ldr	r2, [r3, #28]
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	021b      	lsls	r3, r3, #8
 8005052:	429a      	cmp	r2, r3
 8005054:	d000      	beq.n	8005058 <UART_SetConfig+0x300>
 8005056:	e083      	b.n	8005160 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005058:	231b      	movs	r3, #27
 800505a:	2220      	movs	r2, #32
 800505c:	189b      	adds	r3, r3, r2
 800505e:	19db      	adds	r3, r3, r7
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b08      	cmp	r3, #8
 8005064:	d015      	beq.n	8005092 <UART_SetConfig+0x33a>
 8005066:	dc2b      	bgt.n	80050c0 <UART_SetConfig+0x368>
 8005068:	2b04      	cmp	r3, #4
 800506a:	d00d      	beq.n	8005088 <UART_SetConfig+0x330>
 800506c:	dc28      	bgt.n	80050c0 <UART_SetConfig+0x368>
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <UART_SetConfig+0x320>
 8005072:	2b02      	cmp	r3, #2
 8005074:	d005      	beq.n	8005082 <UART_SetConfig+0x32a>
 8005076:	e023      	b.n	80050c0 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005078:	f7fd fee2 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 800507c:	0003      	movs	r3, r0
 800507e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005080:	e027      	b.n	80050d2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005082:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <UART_SetConfig+0x360>)
 8005084:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005086:	e024      	b.n	80050d2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005088:	f7fd fe4e 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 800508c:	0003      	movs	r3, r0
 800508e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005090:	e01f      	b.n	80050d2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005092:	2380      	movs	r3, #128	; 0x80
 8005094:	021b      	lsls	r3, r3, #8
 8005096:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005098:	e01b      	b.n	80050d2 <UART_SetConfig+0x37a>
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	cfff69f3 	.word	0xcfff69f3
 80050a0:	ffffcfff 	.word	0xffffcfff
 80050a4:	40008000 	.word	0x40008000
 80050a8:	11fff4ff 	.word	0x11fff4ff
 80050ac:	40013800 	.word	0x40013800
 80050b0:	40021000 	.word	0x40021000
 80050b4:	40004400 	.word	0x40004400
 80050b8:	00f42400 	.word	0x00f42400
 80050bc:	08006a60 	.word	0x08006a60
      default:
        pclk = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80050c4:	231a      	movs	r3, #26
 80050c6:	2220      	movs	r2, #32
 80050c8:	189b      	adds	r3, r3, r2
 80050ca:	19db      	adds	r3, r3, r7
 80050cc:	2201      	movs	r2, #1
 80050ce:	701a      	strb	r2, [r3, #0]
        break;
 80050d0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d100      	bne.n	80050da <UART_SetConfig+0x382>
 80050d8:	e09a      	b.n	8005210 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050de:	4b58      	ldr	r3, [pc, #352]	; (8005240 <UART_SetConfig+0x4e8>)
 80050e0:	0052      	lsls	r2, r2, #1
 80050e2:	5ad3      	ldrh	r3, [r2, r3]
 80050e4:	0019      	movs	r1, r3
 80050e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80050e8:	f7fb f816 	bl	8000118 <__udivsi3>
 80050ec:	0003      	movs	r3, r0
 80050ee:	005a      	lsls	r2, r3, #1
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	085b      	lsrs	r3, r3, #1
 80050f6:	18d2      	adds	r2, r2, r3
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	0019      	movs	r1, r3
 80050fe:	0010      	movs	r0, r2
 8005100:	f7fb f80a 	bl	8000118 <__udivsi3>
 8005104:	0003      	movs	r3, r0
 8005106:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	2b0f      	cmp	r3, #15
 800510c:	d921      	bls.n	8005152 <UART_SetConfig+0x3fa>
 800510e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005110:	2380      	movs	r3, #128	; 0x80
 8005112:	025b      	lsls	r3, r3, #9
 8005114:	429a      	cmp	r2, r3
 8005116:	d21c      	bcs.n	8005152 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	b29a      	uxth	r2, r3
 800511c:	200e      	movs	r0, #14
 800511e:	2420      	movs	r4, #32
 8005120:	1903      	adds	r3, r0, r4
 8005122:	19db      	adds	r3, r3, r7
 8005124:	210f      	movs	r1, #15
 8005126:	438a      	bics	r2, r1
 8005128:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	085b      	lsrs	r3, r3, #1
 800512e:	b29b      	uxth	r3, r3
 8005130:	2207      	movs	r2, #7
 8005132:	4013      	ands	r3, r2
 8005134:	b299      	uxth	r1, r3
 8005136:	1903      	adds	r3, r0, r4
 8005138:	19db      	adds	r3, r3, r7
 800513a:	1902      	adds	r2, r0, r4
 800513c:	19d2      	adds	r2, r2, r7
 800513e:	8812      	ldrh	r2, [r2, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	1902      	adds	r2, r0, r4
 800514a:	19d2      	adds	r2, r2, r7
 800514c:	8812      	ldrh	r2, [r2, #0]
 800514e:	60da      	str	r2, [r3, #12]
 8005150:	e05e      	b.n	8005210 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005152:	231a      	movs	r3, #26
 8005154:	2220      	movs	r2, #32
 8005156:	189b      	adds	r3, r3, r2
 8005158:	19db      	adds	r3, r3, r7
 800515a:	2201      	movs	r2, #1
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	e057      	b.n	8005210 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005160:	231b      	movs	r3, #27
 8005162:	2220      	movs	r2, #32
 8005164:	189b      	adds	r3, r3, r2
 8005166:	19db      	adds	r3, r3, r7
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b08      	cmp	r3, #8
 800516c:	d015      	beq.n	800519a <UART_SetConfig+0x442>
 800516e:	dc18      	bgt.n	80051a2 <UART_SetConfig+0x44a>
 8005170:	2b04      	cmp	r3, #4
 8005172:	d00d      	beq.n	8005190 <UART_SetConfig+0x438>
 8005174:	dc15      	bgt.n	80051a2 <UART_SetConfig+0x44a>
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <UART_SetConfig+0x428>
 800517a:	2b02      	cmp	r3, #2
 800517c:	d005      	beq.n	800518a <UART_SetConfig+0x432>
 800517e:	e010      	b.n	80051a2 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005180:	f7fd fe5e 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8005184:	0003      	movs	r3, r0
 8005186:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005188:	e014      	b.n	80051b4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800518a:	4b2e      	ldr	r3, [pc, #184]	; (8005244 <UART_SetConfig+0x4ec>)
 800518c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800518e:	e011      	b.n	80051b4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005190:	f7fd fdca 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 8005194:	0003      	movs	r3, r0
 8005196:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005198:	e00c      	b.n	80051b4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519a:	2380      	movs	r3, #128	; 0x80
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051a0:	e008      	b.n	80051b4 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80051a6:	231a      	movs	r3, #26
 80051a8:	2220      	movs	r2, #32
 80051aa:	189b      	adds	r3, r3, r2
 80051ac:	19db      	adds	r3, r3, r7
 80051ae:	2201      	movs	r2, #1
 80051b0:	701a      	strb	r2, [r3, #0]
        break;
 80051b2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80051b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d02a      	beq.n	8005210 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051be:	4b20      	ldr	r3, [pc, #128]	; (8005240 <UART_SetConfig+0x4e8>)
 80051c0:	0052      	lsls	r2, r2, #1
 80051c2:	5ad3      	ldrh	r3, [r2, r3]
 80051c4:	0019      	movs	r1, r3
 80051c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80051c8:	f7fa ffa6 	bl	8000118 <__udivsi3>
 80051cc:	0003      	movs	r3, r0
 80051ce:	001a      	movs	r2, r3
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	085b      	lsrs	r3, r3, #1
 80051d6:	18d2      	adds	r2, r2, r3
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	0019      	movs	r1, r3
 80051de:	0010      	movs	r0, r2
 80051e0:	f7fa ff9a 	bl	8000118 <__udivsi3>
 80051e4:	0003      	movs	r3, r0
 80051e6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	2b0f      	cmp	r3, #15
 80051ec:	d90a      	bls.n	8005204 <UART_SetConfig+0x4ac>
 80051ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f0:	2380      	movs	r3, #128	; 0x80
 80051f2:	025b      	lsls	r3, r3, #9
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d205      	bcs.n	8005204 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	e005      	b.n	8005210 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005204:	231a      	movs	r3, #26
 8005206:	2220      	movs	r2, #32
 8005208:	189b      	adds	r3, r3, r2
 800520a:	19db      	adds	r3, r3, r7
 800520c:	2201      	movs	r2, #1
 800520e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	226a      	movs	r2, #106	; 0x6a
 8005214:	2101      	movs	r1, #1
 8005216:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	2268      	movs	r2, #104	; 0x68
 800521c:	2101      	movs	r1, #1
 800521e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	2200      	movs	r2, #0
 8005224:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	2200      	movs	r2, #0
 800522a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800522c:	231a      	movs	r3, #26
 800522e:	2220      	movs	r2, #32
 8005230:	189b      	adds	r3, r3, r2
 8005232:	19db      	adds	r3, r3, r7
 8005234:	781b      	ldrb	r3, [r3, #0]
}
 8005236:	0018      	movs	r0, r3
 8005238:	46bd      	mov	sp, r7
 800523a:	b010      	add	sp, #64	; 0x40
 800523c:	bdb0      	pop	{r4, r5, r7, pc}
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	08006a60 	.word	0x08006a60
 8005244:	00f42400 	.word	0x00f42400

08005248 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005254:	2201      	movs	r2, #1
 8005256:	4013      	ands	r3, r2
 8005258:	d00b      	beq.n	8005272 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	4a4a      	ldr	r2, [pc, #296]	; (800538c <UART_AdvFeatureConfig+0x144>)
 8005262:	4013      	ands	r3, r2
 8005264:	0019      	movs	r1, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	2202      	movs	r2, #2
 8005278:	4013      	ands	r3, r2
 800527a:	d00b      	beq.n	8005294 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	4a43      	ldr	r2, [pc, #268]	; (8005390 <UART_AdvFeatureConfig+0x148>)
 8005284:	4013      	ands	r3, r2
 8005286:	0019      	movs	r1, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	2204      	movs	r2, #4
 800529a:	4013      	ands	r3, r2
 800529c:	d00b      	beq.n	80052b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	4a3b      	ldr	r2, [pc, #236]	; (8005394 <UART_AdvFeatureConfig+0x14c>)
 80052a6:	4013      	ands	r3, r2
 80052a8:	0019      	movs	r1, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	2208      	movs	r2, #8
 80052bc:	4013      	ands	r3, r2
 80052be:	d00b      	beq.n	80052d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	4a34      	ldr	r2, [pc, #208]	; (8005398 <UART_AdvFeatureConfig+0x150>)
 80052c8:	4013      	ands	r3, r2
 80052ca:	0019      	movs	r1, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	2210      	movs	r2, #16
 80052de:	4013      	ands	r3, r2
 80052e0:	d00b      	beq.n	80052fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	4a2c      	ldr	r2, [pc, #176]	; (800539c <UART_AdvFeatureConfig+0x154>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	0019      	movs	r1, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	2220      	movs	r2, #32
 8005300:	4013      	ands	r3, r2
 8005302:	d00b      	beq.n	800531c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	4a25      	ldr	r2, [pc, #148]	; (80053a0 <UART_AdvFeatureConfig+0x158>)
 800530c:	4013      	ands	r3, r2
 800530e:	0019      	movs	r1, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	2240      	movs	r2, #64	; 0x40
 8005322:	4013      	ands	r3, r2
 8005324:	d01d      	beq.n	8005362 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <UART_AdvFeatureConfig+0x15c>)
 800532e:	4013      	ands	r3, r2
 8005330:	0019      	movs	r1, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005342:	2380      	movs	r3, #128	; 0x80
 8005344:	035b      	lsls	r3, r3, #13
 8005346:	429a      	cmp	r2, r3
 8005348:	d10b      	bne.n	8005362 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	4a15      	ldr	r2, [pc, #84]	; (80053a8 <UART_AdvFeatureConfig+0x160>)
 8005352:	4013      	ands	r3, r2
 8005354:	0019      	movs	r1, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005366:	2280      	movs	r2, #128	; 0x80
 8005368:	4013      	ands	r3, r2
 800536a:	d00b      	beq.n	8005384 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	4a0e      	ldr	r2, [pc, #56]	; (80053ac <UART_AdvFeatureConfig+0x164>)
 8005374:	4013      	ands	r3, r2
 8005376:	0019      	movs	r1, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	605a      	str	r2, [r3, #4]
  }
}
 8005384:	46c0      	nop			; (mov r8, r8)
 8005386:	46bd      	mov	sp, r7
 8005388:	b002      	add	sp, #8
 800538a:	bd80      	pop	{r7, pc}
 800538c:	fffdffff 	.word	0xfffdffff
 8005390:	fffeffff 	.word	0xfffeffff
 8005394:	fffbffff 	.word	0xfffbffff
 8005398:	ffff7fff 	.word	0xffff7fff
 800539c:	ffffefff 	.word	0xffffefff
 80053a0:	ffffdfff 	.word	0xffffdfff
 80053a4:	ffefffff 	.word	0xffefffff
 80053a8:	ff9fffff 	.word	0xff9fffff
 80053ac:	fff7ffff 	.word	0xfff7ffff

080053b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af02      	add	r7, sp, #8
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2290      	movs	r2, #144	; 0x90
 80053bc:	2100      	movs	r1, #0
 80053be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053c0:	f7fc fd44 	bl	8001e4c <HAL_GetTick>
 80053c4:	0003      	movs	r3, r0
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2208      	movs	r2, #8
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d10c      	bne.n	80053f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2280      	movs	r2, #128	; 0x80
 80053da:	0391      	lsls	r1, r2, #14
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	4a1a      	ldr	r2, [pc, #104]	; (8005448 <UART_CheckIdleState+0x98>)
 80053e0:	9200      	str	r2, [sp, #0]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f000 f832 	bl	800544c <UART_WaitOnFlagUntilTimeout>
 80053e8:	1e03      	subs	r3, r0, #0
 80053ea:	d001      	beq.n	80053f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e026      	b.n	800543e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2204      	movs	r2, #4
 80053f8:	4013      	ands	r3, r2
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d10c      	bne.n	8005418 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2280      	movs	r2, #128	; 0x80
 8005402:	03d1      	lsls	r1, r2, #15
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	4a10      	ldr	r2, [pc, #64]	; (8005448 <UART_CheckIdleState+0x98>)
 8005408:	9200      	str	r2, [sp, #0]
 800540a:	2200      	movs	r2, #0
 800540c:	f000 f81e 	bl	800544c <UART_WaitOnFlagUntilTimeout>
 8005410:	1e03      	subs	r3, r0, #0
 8005412:	d001      	beq.n	8005418 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e012      	b.n	800543e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2288      	movs	r2, #136	; 0x88
 800541c:	2120      	movs	r1, #32
 800541e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	228c      	movs	r2, #140	; 0x8c
 8005424:	2120      	movs	r1, #32
 8005426:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2284      	movs	r2, #132	; 0x84
 8005438:	2100      	movs	r1, #0
 800543a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	0018      	movs	r0, r3
 8005440:	46bd      	mov	sp, r7
 8005442:	b004      	add	sp, #16
 8005444:	bd80      	pop	{r7, pc}
 8005446:	46c0      	nop			; (mov r8, r8)
 8005448:	01ffffff 	.word	0x01ffffff

0800544c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b094      	sub	sp, #80	; 0x50
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	603b      	str	r3, [r7, #0]
 8005458:	1dfb      	adds	r3, r7, #7
 800545a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800545c:	e0a7      	b.n	80055ae <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800545e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005460:	3301      	adds	r3, #1
 8005462:	d100      	bne.n	8005466 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005464:	e0a3      	b.n	80055ae <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005466:	f7fc fcf1 	bl	8001e4c <HAL_GetTick>
 800546a:	0002      	movs	r2, r0
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005472:	429a      	cmp	r2, r3
 8005474:	d302      	bcc.n	800547c <UART_WaitOnFlagUntilTimeout+0x30>
 8005476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005478:	2b00      	cmp	r3, #0
 800547a:	d13f      	bne.n	80054fc <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800547c:	f3ef 8310 	mrs	r3, PRIMASK
 8005480:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005484:	647b      	str	r3, [r7, #68]	; 0x44
 8005486:	2301      	movs	r3, #1
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800548a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548c:	f383 8810 	msr	PRIMASK, r3
}
 8005490:	46c0      	nop			; (mov r8, r8)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	494e      	ldr	r1, [pc, #312]	; (80055d8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800549e:	400a      	ands	r2, r1
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a8:	f383 8810 	msr	PRIMASK, r3
}
 80054ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ae:	f3ef 8310 	mrs	r3, PRIMASK
 80054b2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80054b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b6:	643b      	str	r3, [r7, #64]	; 0x40
 80054b8:	2301      	movs	r3, #1
 80054ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	f383 8810 	msr	PRIMASK, r3
}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2101      	movs	r1, #1
 80054d0:	438a      	bics	r2, r1
 80054d2:	609a      	str	r2, [r3, #8]
 80054d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054da:	f383 8810 	msr	PRIMASK, r3
}
 80054de:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2288      	movs	r2, #136	; 0x88
 80054e4:	2120      	movs	r1, #32
 80054e6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	228c      	movs	r2, #140	; 0x8c
 80054ec:	2120      	movs	r1, #32
 80054ee:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2284      	movs	r2, #132	; 0x84
 80054f4:	2100      	movs	r1, #0
 80054f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e069      	b.n	80055d0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2204      	movs	r2, #4
 8005504:	4013      	ands	r3, r2
 8005506:	d052      	beq.n	80055ae <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69da      	ldr	r2, [r3, #28]
 800550e:	2380      	movs	r3, #128	; 0x80
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	401a      	ands	r2, r3
 8005514:	2380      	movs	r3, #128	; 0x80
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	429a      	cmp	r2, r3
 800551a:	d148      	bne.n	80055ae <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2280      	movs	r2, #128	; 0x80
 8005522:	0112      	lsls	r2, r2, #4
 8005524:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005526:	f3ef 8310 	mrs	r3, PRIMASK
 800552a:	613b      	str	r3, [r7, #16]
  return(result);
 800552c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800552e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005530:	2301      	movs	r3, #1
 8005532:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f383 8810 	msr	PRIMASK, r3
}
 800553a:	46c0      	nop			; (mov r8, r8)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4924      	ldr	r1, [pc, #144]	; (80055d8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005548:	400a      	ands	r2, r1
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	f383 8810 	msr	PRIMASK, r3
}
 8005556:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005558:	f3ef 8310 	mrs	r3, PRIMASK
 800555c:	61fb      	str	r3, [r7, #28]
  return(result);
 800555e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005560:	64bb      	str	r3, [r7, #72]	; 0x48
 8005562:	2301      	movs	r3, #1
 8005564:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	f383 8810 	msr	PRIMASK, r3
}
 800556c:	46c0      	nop			; (mov r8, r8)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2101      	movs	r1, #1
 800557a:	438a      	bics	r2, r1
 800557c:	609a      	str	r2, [r3, #8]
 800557e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	f383 8810 	msr	PRIMASK, r3
}
 8005588:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2288      	movs	r2, #136	; 0x88
 800558e:	2120      	movs	r1, #32
 8005590:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	228c      	movs	r2, #140	; 0x8c
 8005596:	2120      	movs	r1, #32
 8005598:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2290      	movs	r2, #144	; 0x90
 800559e:	2120      	movs	r1, #32
 80055a0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2284      	movs	r2, #132	; 0x84
 80055a6:	2100      	movs	r1, #0
 80055a8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e010      	b.n	80055d0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	4013      	ands	r3, r2
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	425a      	negs	r2, r3
 80055be:	4153      	adcs	r3, r2
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	001a      	movs	r2, r3
 80055c4:	1dfb      	adds	r3, r7, #7
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d100      	bne.n	80055ce <UART_WaitOnFlagUntilTimeout+0x182>
 80055cc:	e747      	b.n	800545e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	0018      	movs	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	b014      	add	sp, #80	; 0x50
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	fffffe5f 	.word	0xfffffe5f

080055dc <__errno>:
 80055dc:	4b01      	ldr	r3, [pc, #4]	; (80055e4 <__errno+0x8>)
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	4770      	bx	lr
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	2000004c 	.word	0x2000004c

080055e8 <__libc_init_array>:
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	2600      	movs	r6, #0
 80055ec:	4d0c      	ldr	r5, [pc, #48]	; (8005620 <__libc_init_array+0x38>)
 80055ee:	4c0d      	ldr	r4, [pc, #52]	; (8005624 <__libc_init_array+0x3c>)
 80055f0:	1b64      	subs	r4, r4, r5
 80055f2:	10a4      	asrs	r4, r4, #2
 80055f4:	42a6      	cmp	r6, r4
 80055f6:	d109      	bne.n	800560c <__libc_init_array+0x24>
 80055f8:	2600      	movs	r6, #0
 80055fa:	f000 fff9 	bl	80065f0 <_init>
 80055fe:	4d0a      	ldr	r5, [pc, #40]	; (8005628 <__libc_init_array+0x40>)
 8005600:	4c0a      	ldr	r4, [pc, #40]	; (800562c <__libc_init_array+0x44>)
 8005602:	1b64      	subs	r4, r4, r5
 8005604:	10a4      	asrs	r4, r4, #2
 8005606:	42a6      	cmp	r6, r4
 8005608:	d105      	bne.n	8005616 <__libc_init_array+0x2e>
 800560a:	bd70      	pop	{r4, r5, r6, pc}
 800560c:	00b3      	lsls	r3, r6, #2
 800560e:	58eb      	ldr	r3, [r5, r3]
 8005610:	4798      	blx	r3
 8005612:	3601      	adds	r6, #1
 8005614:	e7ee      	b.n	80055f4 <__libc_init_array+0xc>
 8005616:	00b3      	lsls	r3, r6, #2
 8005618:	58eb      	ldr	r3, [r5, r3]
 800561a:	4798      	blx	r3
 800561c:	3601      	adds	r6, #1
 800561e:	e7f2      	b.n	8005606 <__libc_init_array+0x1e>
 8005620:	08006b18 	.word	0x08006b18
 8005624:	08006b18 	.word	0x08006b18
 8005628:	08006b18 	.word	0x08006b18
 800562c:	08006b1c 	.word	0x08006b1c

08005630 <memset>:
 8005630:	0003      	movs	r3, r0
 8005632:	1882      	adds	r2, r0, r2
 8005634:	4293      	cmp	r3, r2
 8005636:	d100      	bne.n	800563a <memset+0xa>
 8005638:	4770      	bx	lr
 800563a:	7019      	strb	r1, [r3, #0]
 800563c:	3301      	adds	r3, #1
 800563e:	e7f9      	b.n	8005634 <memset+0x4>

08005640 <iprintf>:
 8005640:	b40f      	push	{r0, r1, r2, r3}
 8005642:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <iprintf+0x30>)
 8005644:	b513      	push	{r0, r1, r4, lr}
 8005646:	681c      	ldr	r4, [r3, #0]
 8005648:	2c00      	cmp	r4, #0
 800564a:	d005      	beq.n	8005658 <iprintf+0x18>
 800564c:	69a3      	ldr	r3, [r4, #24]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d102      	bne.n	8005658 <iprintf+0x18>
 8005652:	0020      	movs	r0, r4
 8005654:	f000 f870 	bl	8005738 <__sinit>
 8005658:	ab05      	add	r3, sp, #20
 800565a:	0020      	movs	r0, r4
 800565c:	9a04      	ldr	r2, [sp, #16]
 800565e:	68a1      	ldr	r1, [r4, #8]
 8005660:	9301      	str	r3, [sp, #4]
 8005662:	f000 f9cd 	bl	8005a00 <_vfiprintf_r>
 8005666:	bc16      	pop	{r1, r2, r4}
 8005668:	bc08      	pop	{r3}
 800566a:	b004      	add	sp, #16
 800566c:	4718      	bx	r3
 800566e:	46c0      	nop			; (mov r8, r8)
 8005670:	2000004c 	.word	0x2000004c

08005674 <std>:
 8005674:	2300      	movs	r3, #0
 8005676:	b510      	push	{r4, lr}
 8005678:	0004      	movs	r4, r0
 800567a:	6003      	str	r3, [r0, #0]
 800567c:	6043      	str	r3, [r0, #4]
 800567e:	6083      	str	r3, [r0, #8]
 8005680:	8181      	strh	r1, [r0, #12]
 8005682:	6643      	str	r3, [r0, #100]	; 0x64
 8005684:	0019      	movs	r1, r3
 8005686:	81c2      	strh	r2, [r0, #14]
 8005688:	6103      	str	r3, [r0, #16]
 800568a:	6143      	str	r3, [r0, #20]
 800568c:	6183      	str	r3, [r0, #24]
 800568e:	2208      	movs	r2, #8
 8005690:	305c      	adds	r0, #92	; 0x5c
 8005692:	f7ff ffcd 	bl	8005630 <memset>
 8005696:	4b05      	ldr	r3, [pc, #20]	; (80056ac <std+0x38>)
 8005698:	6224      	str	r4, [r4, #32]
 800569a:	6263      	str	r3, [r4, #36]	; 0x24
 800569c:	4b04      	ldr	r3, [pc, #16]	; (80056b0 <std+0x3c>)
 800569e:	62a3      	str	r3, [r4, #40]	; 0x28
 80056a0:	4b04      	ldr	r3, [pc, #16]	; (80056b4 <std+0x40>)
 80056a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056a4:	4b04      	ldr	r3, [pc, #16]	; (80056b8 <std+0x44>)
 80056a6:	6323      	str	r3, [r4, #48]	; 0x30
 80056a8:	bd10      	pop	{r4, pc}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	08005f9d 	.word	0x08005f9d
 80056b0:	08005fc5 	.word	0x08005fc5
 80056b4:	08005ffd 	.word	0x08005ffd
 80056b8:	08006029 	.word	0x08006029

080056bc <_cleanup_r>:
 80056bc:	b510      	push	{r4, lr}
 80056be:	4902      	ldr	r1, [pc, #8]	; (80056c8 <_cleanup_r+0xc>)
 80056c0:	f000 f8ba 	bl	8005838 <_fwalk_reent>
 80056c4:	bd10      	pop	{r4, pc}
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	08006335 	.word	0x08006335

080056cc <__sfmoreglue>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	2568      	movs	r5, #104	; 0x68
 80056d0:	1e4a      	subs	r2, r1, #1
 80056d2:	4355      	muls	r5, r2
 80056d4:	000e      	movs	r6, r1
 80056d6:	0029      	movs	r1, r5
 80056d8:	3174      	adds	r1, #116	; 0x74
 80056da:	f000 f8f3 	bl	80058c4 <_malloc_r>
 80056de:	1e04      	subs	r4, r0, #0
 80056e0:	d008      	beq.n	80056f4 <__sfmoreglue+0x28>
 80056e2:	2100      	movs	r1, #0
 80056e4:	002a      	movs	r2, r5
 80056e6:	6001      	str	r1, [r0, #0]
 80056e8:	6046      	str	r6, [r0, #4]
 80056ea:	300c      	adds	r0, #12
 80056ec:	60a0      	str	r0, [r4, #8]
 80056ee:	3268      	adds	r2, #104	; 0x68
 80056f0:	f7ff ff9e 	bl	8005630 <memset>
 80056f4:	0020      	movs	r0, r4
 80056f6:	bd70      	pop	{r4, r5, r6, pc}

080056f8 <__sfp_lock_acquire>:
 80056f8:	b510      	push	{r4, lr}
 80056fa:	4802      	ldr	r0, [pc, #8]	; (8005704 <__sfp_lock_acquire+0xc>)
 80056fc:	f000 f8bd 	bl	800587a <__retarget_lock_acquire_recursive>
 8005700:	bd10      	pop	{r4, pc}
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	20000291 	.word	0x20000291

08005708 <__sfp_lock_release>:
 8005708:	b510      	push	{r4, lr}
 800570a:	4802      	ldr	r0, [pc, #8]	; (8005714 <__sfp_lock_release+0xc>)
 800570c:	f000 f8b6 	bl	800587c <__retarget_lock_release_recursive>
 8005710:	bd10      	pop	{r4, pc}
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	20000291 	.word	0x20000291

08005718 <__sinit_lock_acquire>:
 8005718:	b510      	push	{r4, lr}
 800571a:	4802      	ldr	r0, [pc, #8]	; (8005724 <__sinit_lock_acquire+0xc>)
 800571c:	f000 f8ad 	bl	800587a <__retarget_lock_acquire_recursive>
 8005720:	bd10      	pop	{r4, pc}
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	20000292 	.word	0x20000292

08005728 <__sinit_lock_release>:
 8005728:	b510      	push	{r4, lr}
 800572a:	4802      	ldr	r0, [pc, #8]	; (8005734 <__sinit_lock_release+0xc>)
 800572c:	f000 f8a6 	bl	800587c <__retarget_lock_release_recursive>
 8005730:	bd10      	pop	{r4, pc}
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	20000292 	.word	0x20000292

08005738 <__sinit>:
 8005738:	b513      	push	{r0, r1, r4, lr}
 800573a:	0004      	movs	r4, r0
 800573c:	f7ff ffec 	bl	8005718 <__sinit_lock_acquire>
 8005740:	69a3      	ldr	r3, [r4, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <__sinit+0x14>
 8005746:	f7ff ffef 	bl	8005728 <__sinit_lock_release>
 800574a:	bd13      	pop	{r0, r1, r4, pc}
 800574c:	64a3      	str	r3, [r4, #72]	; 0x48
 800574e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005750:	6523      	str	r3, [r4, #80]	; 0x50
 8005752:	4b13      	ldr	r3, [pc, #76]	; (80057a0 <__sinit+0x68>)
 8005754:	4a13      	ldr	r2, [pc, #76]	; (80057a4 <__sinit+0x6c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	62a2      	str	r2, [r4, #40]	; 0x28
 800575a:	9301      	str	r3, [sp, #4]
 800575c:	42a3      	cmp	r3, r4
 800575e:	d101      	bne.n	8005764 <__sinit+0x2c>
 8005760:	2301      	movs	r3, #1
 8005762:	61a3      	str	r3, [r4, #24]
 8005764:	0020      	movs	r0, r4
 8005766:	f000 f81f 	bl	80057a8 <__sfp>
 800576a:	6060      	str	r0, [r4, #4]
 800576c:	0020      	movs	r0, r4
 800576e:	f000 f81b 	bl	80057a8 <__sfp>
 8005772:	60a0      	str	r0, [r4, #8]
 8005774:	0020      	movs	r0, r4
 8005776:	f000 f817 	bl	80057a8 <__sfp>
 800577a:	2200      	movs	r2, #0
 800577c:	2104      	movs	r1, #4
 800577e:	60e0      	str	r0, [r4, #12]
 8005780:	6860      	ldr	r0, [r4, #4]
 8005782:	f7ff ff77 	bl	8005674 <std>
 8005786:	2201      	movs	r2, #1
 8005788:	2109      	movs	r1, #9
 800578a:	68a0      	ldr	r0, [r4, #8]
 800578c:	f7ff ff72 	bl	8005674 <std>
 8005790:	2202      	movs	r2, #2
 8005792:	2112      	movs	r1, #18
 8005794:	68e0      	ldr	r0, [r4, #12]
 8005796:	f7ff ff6d 	bl	8005674 <std>
 800579a:	2301      	movs	r3, #1
 800579c:	61a3      	str	r3, [r4, #24]
 800579e:	e7d2      	b.n	8005746 <__sinit+0xe>
 80057a0:	08006a78 	.word	0x08006a78
 80057a4:	080056bd 	.word	0x080056bd

080057a8 <__sfp>:
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057aa:	0007      	movs	r7, r0
 80057ac:	f7ff ffa4 	bl	80056f8 <__sfp_lock_acquire>
 80057b0:	4b1f      	ldr	r3, [pc, #124]	; (8005830 <__sfp+0x88>)
 80057b2:	681e      	ldr	r6, [r3, #0]
 80057b4:	69b3      	ldr	r3, [r6, #24]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d102      	bne.n	80057c0 <__sfp+0x18>
 80057ba:	0030      	movs	r0, r6
 80057bc:	f7ff ffbc 	bl	8005738 <__sinit>
 80057c0:	3648      	adds	r6, #72	; 0x48
 80057c2:	68b4      	ldr	r4, [r6, #8]
 80057c4:	6873      	ldr	r3, [r6, #4]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	d504      	bpl.n	80057d4 <__sfp+0x2c>
 80057ca:	6833      	ldr	r3, [r6, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d022      	beq.n	8005816 <__sfp+0x6e>
 80057d0:	6836      	ldr	r6, [r6, #0]
 80057d2:	e7f6      	b.n	80057c2 <__sfp+0x1a>
 80057d4:	220c      	movs	r2, #12
 80057d6:	5ea5      	ldrsh	r5, [r4, r2]
 80057d8:	2d00      	cmp	r5, #0
 80057da:	d11a      	bne.n	8005812 <__sfp+0x6a>
 80057dc:	0020      	movs	r0, r4
 80057de:	4b15      	ldr	r3, [pc, #84]	; (8005834 <__sfp+0x8c>)
 80057e0:	3058      	adds	r0, #88	; 0x58
 80057e2:	60e3      	str	r3, [r4, #12]
 80057e4:	6665      	str	r5, [r4, #100]	; 0x64
 80057e6:	f000 f847 	bl	8005878 <__retarget_lock_init_recursive>
 80057ea:	f7ff ff8d 	bl	8005708 <__sfp_lock_release>
 80057ee:	0020      	movs	r0, r4
 80057f0:	2208      	movs	r2, #8
 80057f2:	0029      	movs	r1, r5
 80057f4:	6025      	str	r5, [r4, #0]
 80057f6:	60a5      	str	r5, [r4, #8]
 80057f8:	6065      	str	r5, [r4, #4]
 80057fa:	6125      	str	r5, [r4, #16]
 80057fc:	6165      	str	r5, [r4, #20]
 80057fe:	61a5      	str	r5, [r4, #24]
 8005800:	305c      	adds	r0, #92	; 0x5c
 8005802:	f7ff ff15 	bl	8005630 <memset>
 8005806:	6365      	str	r5, [r4, #52]	; 0x34
 8005808:	63a5      	str	r5, [r4, #56]	; 0x38
 800580a:	64a5      	str	r5, [r4, #72]	; 0x48
 800580c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800580e:	0020      	movs	r0, r4
 8005810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005812:	3468      	adds	r4, #104	; 0x68
 8005814:	e7d7      	b.n	80057c6 <__sfp+0x1e>
 8005816:	2104      	movs	r1, #4
 8005818:	0038      	movs	r0, r7
 800581a:	f7ff ff57 	bl	80056cc <__sfmoreglue>
 800581e:	1e04      	subs	r4, r0, #0
 8005820:	6030      	str	r0, [r6, #0]
 8005822:	d1d5      	bne.n	80057d0 <__sfp+0x28>
 8005824:	f7ff ff70 	bl	8005708 <__sfp_lock_release>
 8005828:	230c      	movs	r3, #12
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	e7ef      	b.n	800580e <__sfp+0x66>
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	08006a78 	.word	0x08006a78
 8005834:	ffff0001 	.word	0xffff0001

08005838 <_fwalk_reent>:
 8005838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800583a:	0004      	movs	r4, r0
 800583c:	0006      	movs	r6, r0
 800583e:	2700      	movs	r7, #0
 8005840:	9101      	str	r1, [sp, #4]
 8005842:	3448      	adds	r4, #72	; 0x48
 8005844:	6863      	ldr	r3, [r4, #4]
 8005846:	68a5      	ldr	r5, [r4, #8]
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	9b00      	ldr	r3, [sp, #0]
 800584c:	3b01      	subs	r3, #1
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	d504      	bpl.n	800585c <_fwalk_reent+0x24>
 8005852:	6824      	ldr	r4, [r4, #0]
 8005854:	2c00      	cmp	r4, #0
 8005856:	d1f5      	bne.n	8005844 <_fwalk_reent+0xc>
 8005858:	0038      	movs	r0, r7
 800585a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800585c:	89ab      	ldrh	r3, [r5, #12]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d908      	bls.n	8005874 <_fwalk_reent+0x3c>
 8005862:	220e      	movs	r2, #14
 8005864:	5eab      	ldrsh	r3, [r5, r2]
 8005866:	3301      	adds	r3, #1
 8005868:	d004      	beq.n	8005874 <_fwalk_reent+0x3c>
 800586a:	0029      	movs	r1, r5
 800586c:	0030      	movs	r0, r6
 800586e:	9b01      	ldr	r3, [sp, #4]
 8005870:	4798      	blx	r3
 8005872:	4307      	orrs	r7, r0
 8005874:	3568      	adds	r5, #104	; 0x68
 8005876:	e7e8      	b.n	800584a <_fwalk_reent+0x12>

08005878 <__retarget_lock_init_recursive>:
 8005878:	4770      	bx	lr

0800587a <__retarget_lock_acquire_recursive>:
 800587a:	4770      	bx	lr

0800587c <__retarget_lock_release_recursive>:
 800587c:	4770      	bx	lr
	...

08005880 <sbrk_aligned>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	4e0f      	ldr	r6, [pc, #60]	; (80058c0 <sbrk_aligned+0x40>)
 8005884:	000d      	movs	r5, r1
 8005886:	6831      	ldr	r1, [r6, #0]
 8005888:	0004      	movs	r4, r0
 800588a:	2900      	cmp	r1, #0
 800588c:	d102      	bne.n	8005894 <sbrk_aligned+0x14>
 800588e:	f000 fb73 	bl	8005f78 <_sbrk_r>
 8005892:	6030      	str	r0, [r6, #0]
 8005894:	0029      	movs	r1, r5
 8005896:	0020      	movs	r0, r4
 8005898:	f000 fb6e 	bl	8005f78 <_sbrk_r>
 800589c:	1c43      	adds	r3, r0, #1
 800589e:	d00a      	beq.n	80058b6 <sbrk_aligned+0x36>
 80058a0:	2303      	movs	r3, #3
 80058a2:	1cc5      	adds	r5, r0, #3
 80058a4:	439d      	bics	r5, r3
 80058a6:	42a8      	cmp	r0, r5
 80058a8:	d007      	beq.n	80058ba <sbrk_aligned+0x3a>
 80058aa:	1a29      	subs	r1, r5, r0
 80058ac:	0020      	movs	r0, r4
 80058ae:	f000 fb63 	bl	8005f78 <_sbrk_r>
 80058b2:	1c43      	adds	r3, r0, #1
 80058b4:	d101      	bne.n	80058ba <sbrk_aligned+0x3a>
 80058b6:	2501      	movs	r5, #1
 80058b8:	426d      	negs	r5, r5
 80058ba:	0028      	movs	r0, r5
 80058bc:	bd70      	pop	{r4, r5, r6, pc}
 80058be:	46c0      	nop			; (mov r8, r8)
 80058c0:	20000298 	.word	0x20000298

080058c4 <_malloc_r>:
 80058c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058c6:	2203      	movs	r2, #3
 80058c8:	1ccb      	adds	r3, r1, #3
 80058ca:	4393      	bics	r3, r2
 80058cc:	3308      	adds	r3, #8
 80058ce:	0006      	movs	r6, r0
 80058d0:	001f      	movs	r7, r3
 80058d2:	2b0c      	cmp	r3, #12
 80058d4:	d232      	bcs.n	800593c <_malloc_r+0x78>
 80058d6:	270c      	movs	r7, #12
 80058d8:	42b9      	cmp	r1, r7
 80058da:	d831      	bhi.n	8005940 <_malloc_r+0x7c>
 80058dc:	0030      	movs	r0, r6
 80058de:	f000 fdf5 	bl	80064cc <__malloc_lock>
 80058e2:	4d32      	ldr	r5, [pc, #200]	; (80059ac <_malloc_r+0xe8>)
 80058e4:	682b      	ldr	r3, [r5, #0]
 80058e6:	001c      	movs	r4, r3
 80058e8:	2c00      	cmp	r4, #0
 80058ea:	d12e      	bne.n	800594a <_malloc_r+0x86>
 80058ec:	0039      	movs	r1, r7
 80058ee:	0030      	movs	r0, r6
 80058f0:	f7ff ffc6 	bl	8005880 <sbrk_aligned>
 80058f4:	0004      	movs	r4, r0
 80058f6:	1c43      	adds	r3, r0, #1
 80058f8:	d11e      	bne.n	8005938 <_malloc_r+0x74>
 80058fa:	682c      	ldr	r4, [r5, #0]
 80058fc:	0025      	movs	r5, r4
 80058fe:	2d00      	cmp	r5, #0
 8005900:	d14a      	bne.n	8005998 <_malloc_r+0xd4>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	0029      	movs	r1, r5
 8005906:	18e3      	adds	r3, r4, r3
 8005908:	0030      	movs	r0, r6
 800590a:	9301      	str	r3, [sp, #4]
 800590c:	f000 fb34 	bl	8005f78 <_sbrk_r>
 8005910:	9b01      	ldr	r3, [sp, #4]
 8005912:	4283      	cmp	r3, r0
 8005914:	d143      	bne.n	800599e <_malloc_r+0xda>
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	3703      	adds	r7, #3
 800591a:	1aff      	subs	r7, r7, r3
 800591c:	2303      	movs	r3, #3
 800591e:	439f      	bics	r7, r3
 8005920:	3708      	adds	r7, #8
 8005922:	2f0c      	cmp	r7, #12
 8005924:	d200      	bcs.n	8005928 <_malloc_r+0x64>
 8005926:	270c      	movs	r7, #12
 8005928:	0039      	movs	r1, r7
 800592a:	0030      	movs	r0, r6
 800592c:	f7ff ffa8 	bl	8005880 <sbrk_aligned>
 8005930:	1c43      	adds	r3, r0, #1
 8005932:	d034      	beq.n	800599e <_malloc_r+0xda>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	19df      	adds	r7, r3, r7
 8005938:	6027      	str	r7, [r4, #0]
 800593a:	e013      	b.n	8005964 <_malloc_r+0xa0>
 800593c:	2b00      	cmp	r3, #0
 800593e:	dacb      	bge.n	80058d8 <_malloc_r+0x14>
 8005940:	230c      	movs	r3, #12
 8005942:	2500      	movs	r5, #0
 8005944:	6033      	str	r3, [r6, #0]
 8005946:	0028      	movs	r0, r5
 8005948:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800594a:	6822      	ldr	r2, [r4, #0]
 800594c:	1bd1      	subs	r1, r2, r7
 800594e:	d420      	bmi.n	8005992 <_malloc_r+0xce>
 8005950:	290b      	cmp	r1, #11
 8005952:	d917      	bls.n	8005984 <_malloc_r+0xc0>
 8005954:	19e2      	adds	r2, r4, r7
 8005956:	6027      	str	r7, [r4, #0]
 8005958:	42a3      	cmp	r3, r4
 800595a:	d111      	bne.n	8005980 <_malloc_r+0xbc>
 800595c:	602a      	str	r2, [r5, #0]
 800595e:	6863      	ldr	r3, [r4, #4]
 8005960:	6011      	str	r1, [r2, #0]
 8005962:	6053      	str	r3, [r2, #4]
 8005964:	0030      	movs	r0, r6
 8005966:	0025      	movs	r5, r4
 8005968:	f000 fdb8 	bl	80064dc <__malloc_unlock>
 800596c:	2207      	movs	r2, #7
 800596e:	350b      	adds	r5, #11
 8005970:	1d23      	adds	r3, r4, #4
 8005972:	4395      	bics	r5, r2
 8005974:	1aea      	subs	r2, r5, r3
 8005976:	429d      	cmp	r5, r3
 8005978:	d0e5      	beq.n	8005946 <_malloc_r+0x82>
 800597a:	1b5b      	subs	r3, r3, r5
 800597c:	50a3      	str	r3, [r4, r2]
 800597e:	e7e2      	b.n	8005946 <_malloc_r+0x82>
 8005980:	605a      	str	r2, [r3, #4]
 8005982:	e7ec      	b.n	800595e <_malloc_r+0x9a>
 8005984:	6862      	ldr	r2, [r4, #4]
 8005986:	42a3      	cmp	r3, r4
 8005988:	d101      	bne.n	800598e <_malloc_r+0xca>
 800598a:	602a      	str	r2, [r5, #0]
 800598c:	e7ea      	b.n	8005964 <_malloc_r+0xa0>
 800598e:	605a      	str	r2, [r3, #4]
 8005990:	e7e8      	b.n	8005964 <_malloc_r+0xa0>
 8005992:	0023      	movs	r3, r4
 8005994:	6864      	ldr	r4, [r4, #4]
 8005996:	e7a7      	b.n	80058e8 <_malloc_r+0x24>
 8005998:	002c      	movs	r4, r5
 800599a:	686d      	ldr	r5, [r5, #4]
 800599c:	e7af      	b.n	80058fe <_malloc_r+0x3a>
 800599e:	230c      	movs	r3, #12
 80059a0:	0030      	movs	r0, r6
 80059a2:	6033      	str	r3, [r6, #0]
 80059a4:	f000 fd9a 	bl	80064dc <__malloc_unlock>
 80059a8:	e7cd      	b.n	8005946 <_malloc_r+0x82>
 80059aa:	46c0      	nop			; (mov r8, r8)
 80059ac:	20000294 	.word	0x20000294

080059b0 <__sfputc_r>:
 80059b0:	6893      	ldr	r3, [r2, #8]
 80059b2:	b510      	push	{r4, lr}
 80059b4:	3b01      	subs	r3, #1
 80059b6:	6093      	str	r3, [r2, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	da04      	bge.n	80059c6 <__sfputc_r+0x16>
 80059bc:	6994      	ldr	r4, [r2, #24]
 80059be:	42a3      	cmp	r3, r4
 80059c0:	db07      	blt.n	80059d2 <__sfputc_r+0x22>
 80059c2:	290a      	cmp	r1, #10
 80059c4:	d005      	beq.n	80059d2 <__sfputc_r+0x22>
 80059c6:	6813      	ldr	r3, [r2, #0]
 80059c8:	1c58      	adds	r0, r3, #1
 80059ca:	6010      	str	r0, [r2, #0]
 80059cc:	7019      	strb	r1, [r3, #0]
 80059ce:	0008      	movs	r0, r1
 80059d0:	bd10      	pop	{r4, pc}
 80059d2:	f000 fb2f 	bl	8006034 <__swbuf_r>
 80059d6:	0001      	movs	r1, r0
 80059d8:	e7f9      	b.n	80059ce <__sfputc_r+0x1e>

080059da <__sfputs_r>:
 80059da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059dc:	0006      	movs	r6, r0
 80059de:	000f      	movs	r7, r1
 80059e0:	0014      	movs	r4, r2
 80059e2:	18d5      	adds	r5, r2, r3
 80059e4:	42ac      	cmp	r4, r5
 80059e6:	d101      	bne.n	80059ec <__sfputs_r+0x12>
 80059e8:	2000      	movs	r0, #0
 80059ea:	e007      	b.n	80059fc <__sfputs_r+0x22>
 80059ec:	7821      	ldrb	r1, [r4, #0]
 80059ee:	003a      	movs	r2, r7
 80059f0:	0030      	movs	r0, r6
 80059f2:	f7ff ffdd 	bl	80059b0 <__sfputc_r>
 80059f6:	3401      	adds	r4, #1
 80059f8:	1c43      	adds	r3, r0, #1
 80059fa:	d1f3      	bne.n	80059e4 <__sfputs_r+0xa>
 80059fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a00 <_vfiprintf_r>:
 8005a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a02:	b0a1      	sub	sp, #132	; 0x84
 8005a04:	0006      	movs	r6, r0
 8005a06:	000c      	movs	r4, r1
 8005a08:	001f      	movs	r7, r3
 8005a0a:	9203      	str	r2, [sp, #12]
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	d004      	beq.n	8005a1a <_vfiprintf_r+0x1a>
 8005a10:	6983      	ldr	r3, [r0, #24]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <_vfiprintf_r+0x1a>
 8005a16:	f7ff fe8f 	bl	8005738 <__sinit>
 8005a1a:	4b8e      	ldr	r3, [pc, #568]	; (8005c54 <_vfiprintf_r+0x254>)
 8005a1c:	429c      	cmp	r4, r3
 8005a1e:	d11c      	bne.n	8005a5a <_vfiprintf_r+0x5a>
 8005a20:	6874      	ldr	r4, [r6, #4]
 8005a22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a24:	07db      	lsls	r3, r3, #31
 8005a26:	d405      	bmi.n	8005a34 <_vfiprintf_r+0x34>
 8005a28:	89a3      	ldrh	r3, [r4, #12]
 8005a2a:	059b      	lsls	r3, r3, #22
 8005a2c:	d402      	bmi.n	8005a34 <_vfiprintf_r+0x34>
 8005a2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a30:	f7ff ff23 	bl	800587a <__retarget_lock_acquire_recursive>
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	071b      	lsls	r3, r3, #28
 8005a38:	d502      	bpl.n	8005a40 <_vfiprintf_r+0x40>
 8005a3a:	6923      	ldr	r3, [r4, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d11d      	bne.n	8005a7c <_vfiprintf_r+0x7c>
 8005a40:	0021      	movs	r1, r4
 8005a42:	0030      	movs	r0, r6
 8005a44:	f000 fb60 	bl	8006108 <__swsetup_r>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	d017      	beq.n	8005a7c <_vfiprintf_r+0x7c>
 8005a4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a4e:	07db      	lsls	r3, r3, #31
 8005a50:	d50d      	bpl.n	8005a6e <_vfiprintf_r+0x6e>
 8005a52:	2001      	movs	r0, #1
 8005a54:	4240      	negs	r0, r0
 8005a56:	b021      	add	sp, #132	; 0x84
 8005a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a5a:	4b7f      	ldr	r3, [pc, #508]	; (8005c58 <_vfiprintf_r+0x258>)
 8005a5c:	429c      	cmp	r4, r3
 8005a5e:	d101      	bne.n	8005a64 <_vfiprintf_r+0x64>
 8005a60:	68b4      	ldr	r4, [r6, #8]
 8005a62:	e7de      	b.n	8005a22 <_vfiprintf_r+0x22>
 8005a64:	4b7d      	ldr	r3, [pc, #500]	; (8005c5c <_vfiprintf_r+0x25c>)
 8005a66:	429c      	cmp	r4, r3
 8005a68:	d1db      	bne.n	8005a22 <_vfiprintf_r+0x22>
 8005a6a:	68f4      	ldr	r4, [r6, #12]
 8005a6c:	e7d9      	b.n	8005a22 <_vfiprintf_r+0x22>
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	059b      	lsls	r3, r3, #22
 8005a72:	d4ee      	bmi.n	8005a52 <_vfiprintf_r+0x52>
 8005a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a76:	f7ff ff01 	bl	800587c <__retarget_lock_release_recursive>
 8005a7a:	e7ea      	b.n	8005a52 <_vfiprintf_r+0x52>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	ad08      	add	r5, sp, #32
 8005a80:	616b      	str	r3, [r5, #20]
 8005a82:	3320      	adds	r3, #32
 8005a84:	766b      	strb	r3, [r5, #25]
 8005a86:	3310      	adds	r3, #16
 8005a88:	76ab      	strb	r3, [r5, #26]
 8005a8a:	9707      	str	r7, [sp, #28]
 8005a8c:	9f03      	ldr	r7, [sp, #12]
 8005a8e:	783b      	ldrb	r3, [r7, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <_vfiprintf_r+0x98>
 8005a94:	2b25      	cmp	r3, #37	; 0x25
 8005a96:	d14e      	bne.n	8005b36 <_vfiprintf_r+0x136>
 8005a98:	9b03      	ldr	r3, [sp, #12]
 8005a9a:	1afb      	subs	r3, r7, r3
 8005a9c:	9305      	str	r3, [sp, #20]
 8005a9e:	9b03      	ldr	r3, [sp, #12]
 8005aa0:	429f      	cmp	r7, r3
 8005aa2:	d00d      	beq.n	8005ac0 <_vfiprintf_r+0xc0>
 8005aa4:	9b05      	ldr	r3, [sp, #20]
 8005aa6:	0021      	movs	r1, r4
 8005aa8:	0030      	movs	r0, r6
 8005aaa:	9a03      	ldr	r2, [sp, #12]
 8005aac:	f7ff ff95 	bl	80059da <__sfputs_r>
 8005ab0:	1c43      	adds	r3, r0, #1
 8005ab2:	d100      	bne.n	8005ab6 <_vfiprintf_r+0xb6>
 8005ab4:	e0b5      	b.n	8005c22 <_vfiprintf_r+0x222>
 8005ab6:	696a      	ldr	r2, [r5, #20]
 8005ab8:	9b05      	ldr	r3, [sp, #20]
 8005aba:	4694      	mov	ip, r2
 8005abc:	4463      	add	r3, ip
 8005abe:	616b      	str	r3, [r5, #20]
 8005ac0:	783b      	ldrb	r3, [r7, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d100      	bne.n	8005ac8 <_vfiprintf_r+0xc8>
 8005ac6:	e0ac      	b.n	8005c22 <_vfiprintf_r+0x222>
 8005ac8:	2201      	movs	r2, #1
 8005aca:	1c7b      	adds	r3, r7, #1
 8005acc:	9303      	str	r3, [sp, #12]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	4252      	negs	r2, r2
 8005ad2:	606a      	str	r2, [r5, #4]
 8005ad4:	a904      	add	r1, sp, #16
 8005ad6:	3254      	adds	r2, #84	; 0x54
 8005ad8:	1852      	adds	r2, r2, r1
 8005ada:	602b      	str	r3, [r5, #0]
 8005adc:	60eb      	str	r3, [r5, #12]
 8005ade:	60ab      	str	r3, [r5, #8]
 8005ae0:	7013      	strb	r3, [r2, #0]
 8005ae2:	65ab      	str	r3, [r5, #88]	; 0x58
 8005ae4:	9b03      	ldr	r3, [sp, #12]
 8005ae6:	2205      	movs	r2, #5
 8005ae8:	7819      	ldrb	r1, [r3, #0]
 8005aea:	485d      	ldr	r0, [pc, #372]	; (8005c60 <_vfiprintf_r+0x260>)
 8005aec:	f000 fce2 	bl	80064b4 <memchr>
 8005af0:	9b03      	ldr	r3, [sp, #12]
 8005af2:	1c5f      	adds	r7, r3, #1
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d120      	bne.n	8005b3a <_vfiprintf_r+0x13a>
 8005af8:	682a      	ldr	r2, [r5, #0]
 8005afa:	06d3      	lsls	r3, r2, #27
 8005afc:	d504      	bpl.n	8005b08 <_vfiprintf_r+0x108>
 8005afe:	2353      	movs	r3, #83	; 0x53
 8005b00:	a904      	add	r1, sp, #16
 8005b02:	185b      	adds	r3, r3, r1
 8005b04:	2120      	movs	r1, #32
 8005b06:	7019      	strb	r1, [r3, #0]
 8005b08:	0713      	lsls	r3, r2, #28
 8005b0a:	d504      	bpl.n	8005b16 <_vfiprintf_r+0x116>
 8005b0c:	2353      	movs	r3, #83	; 0x53
 8005b0e:	a904      	add	r1, sp, #16
 8005b10:	185b      	adds	r3, r3, r1
 8005b12:	212b      	movs	r1, #43	; 0x2b
 8005b14:	7019      	strb	r1, [r3, #0]
 8005b16:	9b03      	ldr	r3, [sp, #12]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b1c:	d016      	beq.n	8005b4c <_vfiprintf_r+0x14c>
 8005b1e:	2100      	movs	r1, #0
 8005b20:	68eb      	ldr	r3, [r5, #12]
 8005b22:	9f03      	ldr	r7, [sp, #12]
 8005b24:	783a      	ldrb	r2, [r7, #0]
 8005b26:	1c78      	adds	r0, r7, #1
 8005b28:	3a30      	subs	r2, #48	; 0x30
 8005b2a:	4684      	mov	ip, r0
 8005b2c:	2a09      	cmp	r2, #9
 8005b2e:	d94f      	bls.n	8005bd0 <_vfiprintf_r+0x1d0>
 8005b30:	2900      	cmp	r1, #0
 8005b32:	d111      	bne.n	8005b58 <_vfiprintf_r+0x158>
 8005b34:	e017      	b.n	8005b66 <_vfiprintf_r+0x166>
 8005b36:	3701      	adds	r7, #1
 8005b38:	e7a9      	b.n	8005a8e <_vfiprintf_r+0x8e>
 8005b3a:	4b49      	ldr	r3, [pc, #292]	; (8005c60 <_vfiprintf_r+0x260>)
 8005b3c:	682a      	ldr	r2, [r5, #0]
 8005b3e:	1ac0      	subs	r0, r0, r3
 8005b40:	2301      	movs	r3, #1
 8005b42:	4083      	lsls	r3, r0
 8005b44:	4313      	orrs	r3, r2
 8005b46:	602b      	str	r3, [r5, #0]
 8005b48:	9703      	str	r7, [sp, #12]
 8005b4a:	e7cb      	b.n	8005ae4 <_vfiprintf_r+0xe4>
 8005b4c:	9b07      	ldr	r3, [sp, #28]
 8005b4e:	1d19      	adds	r1, r3, #4
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	9107      	str	r1, [sp, #28]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	db01      	blt.n	8005b5c <_vfiprintf_r+0x15c>
 8005b58:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b5a:	e004      	b.n	8005b66 <_vfiprintf_r+0x166>
 8005b5c:	425b      	negs	r3, r3
 8005b5e:	60eb      	str	r3, [r5, #12]
 8005b60:	2302      	movs	r3, #2
 8005b62:	4313      	orrs	r3, r2
 8005b64:	602b      	str	r3, [r5, #0]
 8005b66:	783b      	ldrb	r3, [r7, #0]
 8005b68:	2b2e      	cmp	r3, #46	; 0x2e
 8005b6a:	d10a      	bne.n	8005b82 <_vfiprintf_r+0x182>
 8005b6c:	787b      	ldrb	r3, [r7, #1]
 8005b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b70:	d137      	bne.n	8005be2 <_vfiprintf_r+0x1e2>
 8005b72:	9b07      	ldr	r3, [sp, #28]
 8005b74:	3702      	adds	r7, #2
 8005b76:	1d1a      	adds	r2, r3, #4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	9207      	str	r2, [sp, #28]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	db2d      	blt.n	8005bdc <_vfiprintf_r+0x1dc>
 8005b80:	9309      	str	r3, [sp, #36]	; 0x24
 8005b82:	2203      	movs	r2, #3
 8005b84:	7839      	ldrb	r1, [r7, #0]
 8005b86:	4837      	ldr	r0, [pc, #220]	; (8005c64 <_vfiprintf_r+0x264>)
 8005b88:	f000 fc94 	bl	80064b4 <memchr>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	d007      	beq.n	8005ba0 <_vfiprintf_r+0x1a0>
 8005b90:	4b34      	ldr	r3, [pc, #208]	; (8005c64 <_vfiprintf_r+0x264>)
 8005b92:	682a      	ldr	r2, [r5, #0]
 8005b94:	1ac0      	subs	r0, r0, r3
 8005b96:	2340      	movs	r3, #64	; 0x40
 8005b98:	4083      	lsls	r3, r0
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	3701      	adds	r7, #1
 8005b9e:	602b      	str	r3, [r5, #0]
 8005ba0:	7839      	ldrb	r1, [r7, #0]
 8005ba2:	1c7b      	adds	r3, r7, #1
 8005ba4:	2206      	movs	r2, #6
 8005ba6:	4830      	ldr	r0, [pc, #192]	; (8005c68 <_vfiprintf_r+0x268>)
 8005ba8:	9303      	str	r3, [sp, #12]
 8005baa:	7629      	strb	r1, [r5, #24]
 8005bac:	f000 fc82 	bl	80064b4 <memchr>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	d045      	beq.n	8005c40 <_vfiprintf_r+0x240>
 8005bb4:	4b2d      	ldr	r3, [pc, #180]	; (8005c6c <_vfiprintf_r+0x26c>)
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d127      	bne.n	8005c0a <_vfiprintf_r+0x20a>
 8005bba:	2207      	movs	r2, #7
 8005bbc:	9b07      	ldr	r3, [sp, #28]
 8005bbe:	3307      	adds	r3, #7
 8005bc0:	4393      	bics	r3, r2
 8005bc2:	3308      	adds	r3, #8
 8005bc4:	9307      	str	r3, [sp, #28]
 8005bc6:	696b      	ldr	r3, [r5, #20]
 8005bc8:	9a04      	ldr	r2, [sp, #16]
 8005bca:	189b      	adds	r3, r3, r2
 8005bcc:	616b      	str	r3, [r5, #20]
 8005bce:	e75d      	b.n	8005a8c <_vfiprintf_r+0x8c>
 8005bd0:	210a      	movs	r1, #10
 8005bd2:	434b      	muls	r3, r1
 8005bd4:	4667      	mov	r7, ip
 8005bd6:	189b      	adds	r3, r3, r2
 8005bd8:	3909      	subs	r1, #9
 8005bda:	e7a3      	b.n	8005b24 <_vfiprintf_r+0x124>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	425b      	negs	r3, r3
 8005be0:	e7ce      	b.n	8005b80 <_vfiprintf_r+0x180>
 8005be2:	2300      	movs	r3, #0
 8005be4:	001a      	movs	r2, r3
 8005be6:	3701      	adds	r7, #1
 8005be8:	606b      	str	r3, [r5, #4]
 8005bea:	7839      	ldrb	r1, [r7, #0]
 8005bec:	1c78      	adds	r0, r7, #1
 8005bee:	3930      	subs	r1, #48	; 0x30
 8005bf0:	4684      	mov	ip, r0
 8005bf2:	2909      	cmp	r1, #9
 8005bf4:	d903      	bls.n	8005bfe <_vfiprintf_r+0x1fe>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0c3      	beq.n	8005b82 <_vfiprintf_r+0x182>
 8005bfa:	9209      	str	r2, [sp, #36]	; 0x24
 8005bfc:	e7c1      	b.n	8005b82 <_vfiprintf_r+0x182>
 8005bfe:	230a      	movs	r3, #10
 8005c00:	435a      	muls	r2, r3
 8005c02:	4667      	mov	r7, ip
 8005c04:	1852      	adds	r2, r2, r1
 8005c06:	3b09      	subs	r3, #9
 8005c08:	e7ef      	b.n	8005bea <_vfiprintf_r+0x1ea>
 8005c0a:	ab07      	add	r3, sp, #28
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	0022      	movs	r2, r4
 8005c10:	0029      	movs	r1, r5
 8005c12:	0030      	movs	r0, r6
 8005c14:	4b16      	ldr	r3, [pc, #88]	; (8005c70 <_vfiprintf_r+0x270>)
 8005c16:	e000      	b.n	8005c1a <_vfiprintf_r+0x21a>
 8005c18:	bf00      	nop
 8005c1a:	9004      	str	r0, [sp, #16]
 8005c1c:	9b04      	ldr	r3, [sp, #16]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	d1d1      	bne.n	8005bc6 <_vfiprintf_r+0x1c6>
 8005c22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c24:	07db      	lsls	r3, r3, #31
 8005c26:	d405      	bmi.n	8005c34 <_vfiprintf_r+0x234>
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	059b      	lsls	r3, r3, #22
 8005c2c:	d402      	bmi.n	8005c34 <_vfiprintf_r+0x234>
 8005c2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c30:	f7ff fe24 	bl	800587c <__retarget_lock_release_recursive>
 8005c34:	89a3      	ldrh	r3, [r4, #12]
 8005c36:	065b      	lsls	r3, r3, #25
 8005c38:	d500      	bpl.n	8005c3c <_vfiprintf_r+0x23c>
 8005c3a:	e70a      	b.n	8005a52 <_vfiprintf_r+0x52>
 8005c3c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005c3e:	e70a      	b.n	8005a56 <_vfiprintf_r+0x56>
 8005c40:	ab07      	add	r3, sp, #28
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	0022      	movs	r2, r4
 8005c46:	0029      	movs	r1, r5
 8005c48:	0030      	movs	r0, r6
 8005c4a:	4b09      	ldr	r3, [pc, #36]	; (8005c70 <_vfiprintf_r+0x270>)
 8005c4c:	f000 f882 	bl	8005d54 <_printf_i>
 8005c50:	e7e3      	b.n	8005c1a <_vfiprintf_r+0x21a>
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	08006a9c 	.word	0x08006a9c
 8005c58:	08006abc 	.word	0x08006abc
 8005c5c:	08006a7c 	.word	0x08006a7c
 8005c60:	08006adc 	.word	0x08006adc
 8005c64:	08006ae2 	.word	0x08006ae2
 8005c68:	08006ae6 	.word	0x08006ae6
 8005c6c:	00000000 	.word	0x00000000
 8005c70:	080059db 	.word	0x080059db

08005c74 <_printf_common>:
 8005c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c76:	0015      	movs	r5, r2
 8005c78:	9301      	str	r3, [sp, #4]
 8005c7a:	688a      	ldr	r2, [r1, #8]
 8005c7c:	690b      	ldr	r3, [r1, #16]
 8005c7e:	000c      	movs	r4, r1
 8005c80:	9000      	str	r0, [sp, #0]
 8005c82:	4293      	cmp	r3, r2
 8005c84:	da00      	bge.n	8005c88 <_printf_common+0x14>
 8005c86:	0013      	movs	r3, r2
 8005c88:	0022      	movs	r2, r4
 8005c8a:	602b      	str	r3, [r5, #0]
 8005c8c:	3243      	adds	r2, #67	; 0x43
 8005c8e:	7812      	ldrb	r2, [r2, #0]
 8005c90:	2a00      	cmp	r2, #0
 8005c92:	d001      	beq.n	8005c98 <_printf_common+0x24>
 8005c94:	3301      	adds	r3, #1
 8005c96:	602b      	str	r3, [r5, #0]
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	069b      	lsls	r3, r3, #26
 8005c9c:	d502      	bpl.n	8005ca4 <_printf_common+0x30>
 8005c9e:	682b      	ldr	r3, [r5, #0]
 8005ca0:	3302      	adds	r3, #2
 8005ca2:	602b      	str	r3, [r5, #0]
 8005ca4:	6822      	ldr	r2, [r4, #0]
 8005ca6:	2306      	movs	r3, #6
 8005ca8:	0017      	movs	r7, r2
 8005caa:	401f      	ands	r7, r3
 8005cac:	421a      	tst	r2, r3
 8005cae:	d027      	beq.n	8005d00 <_printf_common+0x8c>
 8005cb0:	0023      	movs	r3, r4
 8005cb2:	3343      	adds	r3, #67	; 0x43
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	1e5a      	subs	r2, r3, #1
 8005cb8:	4193      	sbcs	r3, r2
 8005cba:	6822      	ldr	r2, [r4, #0]
 8005cbc:	0692      	lsls	r2, r2, #26
 8005cbe:	d430      	bmi.n	8005d22 <_printf_common+0xae>
 8005cc0:	0022      	movs	r2, r4
 8005cc2:	9901      	ldr	r1, [sp, #4]
 8005cc4:	9800      	ldr	r0, [sp, #0]
 8005cc6:	9e08      	ldr	r6, [sp, #32]
 8005cc8:	3243      	adds	r2, #67	; 0x43
 8005cca:	47b0      	blx	r6
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d025      	beq.n	8005d1c <_printf_common+0xa8>
 8005cd0:	2306      	movs	r3, #6
 8005cd2:	6820      	ldr	r0, [r4, #0]
 8005cd4:	682a      	ldr	r2, [r5, #0]
 8005cd6:	68e1      	ldr	r1, [r4, #12]
 8005cd8:	2500      	movs	r5, #0
 8005cda:	4003      	ands	r3, r0
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d103      	bne.n	8005ce8 <_printf_common+0x74>
 8005ce0:	1a8d      	subs	r5, r1, r2
 8005ce2:	43eb      	mvns	r3, r5
 8005ce4:	17db      	asrs	r3, r3, #31
 8005ce6:	401d      	ands	r5, r3
 8005ce8:	68a3      	ldr	r3, [r4, #8]
 8005cea:	6922      	ldr	r2, [r4, #16]
 8005cec:	4293      	cmp	r3, r2
 8005cee:	dd01      	ble.n	8005cf4 <_printf_common+0x80>
 8005cf0:	1a9b      	subs	r3, r3, r2
 8005cf2:	18ed      	adds	r5, r5, r3
 8005cf4:	2700      	movs	r7, #0
 8005cf6:	42bd      	cmp	r5, r7
 8005cf8:	d120      	bne.n	8005d3c <_printf_common+0xc8>
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	e010      	b.n	8005d20 <_printf_common+0xac>
 8005cfe:	3701      	adds	r7, #1
 8005d00:	68e3      	ldr	r3, [r4, #12]
 8005d02:	682a      	ldr	r2, [r5, #0]
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	42bb      	cmp	r3, r7
 8005d08:	ddd2      	ble.n	8005cb0 <_printf_common+0x3c>
 8005d0a:	0022      	movs	r2, r4
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	9901      	ldr	r1, [sp, #4]
 8005d10:	9800      	ldr	r0, [sp, #0]
 8005d12:	9e08      	ldr	r6, [sp, #32]
 8005d14:	3219      	adds	r2, #25
 8005d16:	47b0      	blx	r6
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d1f0      	bne.n	8005cfe <_printf_common+0x8a>
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	4240      	negs	r0, r0
 8005d20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d22:	2030      	movs	r0, #48	; 0x30
 8005d24:	18e1      	adds	r1, r4, r3
 8005d26:	3143      	adds	r1, #67	; 0x43
 8005d28:	7008      	strb	r0, [r1, #0]
 8005d2a:	0021      	movs	r1, r4
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	3145      	adds	r1, #69	; 0x45
 8005d30:	7809      	ldrb	r1, [r1, #0]
 8005d32:	18a2      	adds	r2, r4, r2
 8005d34:	3243      	adds	r2, #67	; 0x43
 8005d36:	3302      	adds	r3, #2
 8005d38:	7011      	strb	r1, [r2, #0]
 8005d3a:	e7c1      	b.n	8005cc0 <_printf_common+0x4c>
 8005d3c:	0022      	movs	r2, r4
 8005d3e:	2301      	movs	r3, #1
 8005d40:	9901      	ldr	r1, [sp, #4]
 8005d42:	9800      	ldr	r0, [sp, #0]
 8005d44:	9e08      	ldr	r6, [sp, #32]
 8005d46:	321a      	adds	r2, #26
 8005d48:	47b0      	blx	r6
 8005d4a:	1c43      	adds	r3, r0, #1
 8005d4c:	d0e6      	beq.n	8005d1c <_printf_common+0xa8>
 8005d4e:	3701      	adds	r7, #1
 8005d50:	e7d1      	b.n	8005cf6 <_printf_common+0x82>
	...

08005d54 <_printf_i>:
 8005d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d56:	b08b      	sub	sp, #44	; 0x2c
 8005d58:	9206      	str	r2, [sp, #24]
 8005d5a:	000a      	movs	r2, r1
 8005d5c:	3243      	adds	r2, #67	; 0x43
 8005d5e:	9307      	str	r3, [sp, #28]
 8005d60:	9005      	str	r0, [sp, #20]
 8005d62:	9204      	str	r2, [sp, #16]
 8005d64:	7e0a      	ldrb	r2, [r1, #24]
 8005d66:	000c      	movs	r4, r1
 8005d68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d6a:	2a78      	cmp	r2, #120	; 0x78
 8005d6c:	d807      	bhi.n	8005d7e <_printf_i+0x2a>
 8005d6e:	2a62      	cmp	r2, #98	; 0x62
 8005d70:	d809      	bhi.n	8005d86 <_printf_i+0x32>
 8005d72:	2a00      	cmp	r2, #0
 8005d74:	d100      	bne.n	8005d78 <_printf_i+0x24>
 8005d76:	e0c1      	b.n	8005efc <_printf_i+0x1a8>
 8005d78:	2a58      	cmp	r2, #88	; 0x58
 8005d7a:	d100      	bne.n	8005d7e <_printf_i+0x2a>
 8005d7c:	e08c      	b.n	8005e98 <_printf_i+0x144>
 8005d7e:	0026      	movs	r6, r4
 8005d80:	3642      	adds	r6, #66	; 0x42
 8005d82:	7032      	strb	r2, [r6, #0]
 8005d84:	e022      	b.n	8005dcc <_printf_i+0x78>
 8005d86:	0010      	movs	r0, r2
 8005d88:	3863      	subs	r0, #99	; 0x63
 8005d8a:	2815      	cmp	r0, #21
 8005d8c:	d8f7      	bhi.n	8005d7e <_printf_i+0x2a>
 8005d8e:	f7fa f9b9 	bl	8000104 <__gnu_thumb1_case_shi>
 8005d92:	0016      	.short	0x0016
 8005d94:	fff6001f 	.word	0xfff6001f
 8005d98:	fff6fff6 	.word	0xfff6fff6
 8005d9c:	001ffff6 	.word	0x001ffff6
 8005da0:	fff6fff6 	.word	0xfff6fff6
 8005da4:	fff6fff6 	.word	0xfff6fff6
 8005da8:	003600a8 	.word	0x003600a8
 8005dac:	fff6009a 	.word	0xfff6009a
 8005db0:	00b9fff6 	.word	0x00b9fff6
 8005db4:	0036fff6 	.word	0x0036fff6
 8005db8:	fff6fff6 	.word	0xfff6fff6
 8005dbc:	009e      	.short	0x009e
 8005dbe:	0026      	movs	r6, r4
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	3642      	adds	r6, #66	; 0x42
 8005dc4:	1d11      	adds	r1, r2, #4
 8005dc6:	6019      	str	r1, [r3, #0]
 8005dc8:	6813      	ldr	r3, [r2, #0]
 8005dca:	7033      	strb	r3, [r6, #0]
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e0a7      	b.n	8005f20 <_printf_i+0x1cc>
 8005dd0:	6808      	ldr	r0, [r1, #0]
 8005dd2:	6819      	ldr	r1, [r3, #0]
 8005dd4:	1d0a      	adds	r2, r1, #4
 8005dd6:	0605      	lsls	r5, r0, #24
 8005dd8:	d50b      	bpl.n	8005df2 <_printf_i+0x9e>
 8005dda:	680d      	ldr	r5, [r1, #0]
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	2d00      	cmp	r5, #0
 8005de0:	da03      	bge.n	8005dea <_printf_i+0x96>
 8005de2:	232d      	movs	r3, #45	; 0x2d
 8005de4:	9a04      	ldr	r2, [sp, #16]
 8005de6:	426d      	negs	r5, r5
 8005de8:	7013      	strb	r3, [r2, #0]
 8005dea:	4b61      	ldr	r3, [pc, #388]	; (8005f70 <_printf_i+0x21c>)
 8005dec:	270a      	movs	r7, #10
 8005dee:	9303      	str	r3, [sp, #12]
 8005df0:	e01b      	b.n	8005e2a <_printf_i+0xd6>
 8005df2:	680d      	ldr	r5, [r1, #0]
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	0641      	lsls	r1, r0, #25
 8005df8:	d5f1      	bpl.n	8005dde <_printf_i+0x8a>
 8005dfa:	b22d      	sxth	r5, r5
 8005dfc:	e7ef      	b.n	8005dde <_printf_i+0x8a>
 8005dfe:	680d      	ldr	r5, [r1, #0]
 8005e00:	6819      	ldr	r1, [r3, #0]
 8005e02:	1d08      	adds	r0, r1, #4
 8005e04:	6018      	str	r0, [r3, #0]
 8005e06:	062e      	lsls	r6, r5, #24
 8005e08:	d501      	bpl.n	8005e0e <_printf_i+0xba>
 8005e0a:	680d      	ldr	r5, [r1, #0]
 8005e0c:	e003      	b.n	8005e16 <_printf_i+0xc2>
 8005e0e:	066d      	lsls	r5, r5, #25
 8005e10:	d5fb      	bpl.n	8005e0a <_printf_i+0xb6>
 8005e12:	680d      	ldr	r5, [r1, #0]
 8005e14:	b2ad      	uxth	r5, r5
 8005e16:	4b56      	ldr	r3, [pc, #344]	; (8005f70 <_printf_i+0x21c>)
 8005e18:	2708      	movs	r7, #8
 8005e1a:	9303      	str	r3, [sp, #12]
 8005e1c:	2a6f      	cmp	r2, #111	; 0x6f
 8005e1e:	d000      	beq.n	8005e22 <_printf_i+0xce>
 8005e20:	3702      	adds	r7, #2
 8005e22:	0023      	movs	r3, r4
 8005e24:	2200      	movs	r2, #0
 8005e26:	3343      	adds	r3, #67	; 0x43
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	6863      	ldr	r3, [r4, #4]
 8005e2c:	60a3      	str	r3, [r4, #8]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	db03      	blt.n	8005e3a <_printf_i+0xe6>
 8005e32:	2204      	movs	r2, #4
 8005e34:	6821      	ldr	r1, [r4, #0]
 8005e36:	4391      	bics	r1, r2
 8005e38:	6021      	str	r1, [r4, #0]
 8005e3a:	2d00      	cmp	r5, #0
 8005e3c:	d102      	bne.n	8005e44 <_printf_i+0xf0>
 8005e3e:	9e04      	ldr	r6, [sp, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00c      	beq.n	8005e5e <_printf_i+0x10a>
 8005e44:	9e04      	ldr	r6, [sp, #16]
 8005e46:	0028      	movs	r0, r5
 8005e48:	0039      	movs	r1, r7
 8005e4a:	f7fa f9eb 	bl	8000224 <__aeabi_uidivmod>
 8005e4e:	9b03      	ldr	r3, [sp, #12]
 8005e50:	3e01      	subs	r6, #1
 8005e52:	5c5b      	ldrb	r3, [r3, r1]
 8005e54:	7033      	strb	r3, [r6, #0]
 8005e56:	002b      	movs	r3, r5
 8005e58:	0005      	movs	r5, r0
 8005e5a:	429f      	cmp	r7, r3
 8005e5c:	d9f3      	bls.n	8005e46 <_printf_i+0xf2>
 8005e5e:	2f08      	cmp	r7, #8
 8005e60:	d109      	bne.n	8005e76 <_printf_i+0x122>
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	07db      	lsls	r3, r3, #31
 8005e66:	d506      	bpl.n	8005e76 <_printf_i+0x122>
 8005e68:	6863      	ldr	r3, [r4, #4]
 8005e6a:	6922      	ldr	r2, [r4, #16]
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	dc02      	bgt.n	8005e76 <_printf_i+0x122>
 8005e70:	2330      	movs	r3, #48	; 0x30
 8005e72:	3e01      	subs	r6, #1
 8005e74:	7033      	strb	r3, [r6, #0]
 8005e76:	9b04      	ldr	r3, [sp, #16]
 8005e78:	1b9b      	subs	r3, r3, r6
 8005e7a:	6123      	str	r3, [r4, #16]
 8005e7c:	9b07      	ldr	r3, [sp, #28]
 8005e7e:	0021      	movs	r1, r4
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	9805      	ldr	r0, [sp, #20]
 8005e84:	9b06      	ldr	r3, [sp, #24]
 8005e86:	aa09      	add	r2, sp, #36	; 0x24
 8005e88:	f7ff fef4 	bl	8005c74 <_printf_common>
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	d14c      	bne.n	8005f2a <_printf_i+0x1d6>
 8005e90:	2001      	movs	r0, #1
 8005e92:	4240      	negs	r0, r0
 8005e94:	b00b      	add	sp, #44	; 0x2c
 8005e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e98:	3145      	adds	r1, #69	; 0x45
 8005e9a:	700a      	strb	r2, [r1, #0]
 8005e9c:	4a34      	ldr	r2, [pc, #208]	; (8005f70 <_printf_i+0x21c>)
 8005e9e:	9203      	str	r2, [sp, #12]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	6821      	ldr	r1, [r4, #0]
 8005ea4:	ca20      	ldmia	r2!, {r5}
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	0608      	lsls	r0, r1, #24
 8005eaa:	d516      	bpl.n	8005eda <_printf_i+0x186>
 8005eac:	07cb      	lsls	r3, r1, #31
 8005eae:	d502      	bpl.n	8005eb6 <_printf_i+0x162>
 8005eb0:	2320      	movs	r3, #32
 8005eb2:	4319      	orrs	r1, r3
 8005eb4:	6021      	str	r1, [r4, #0]
 8005eb6:	2710      	movs	r7, #16
 8005eb8:	2d00      	cmp	r5, #0
 8005eba:	d1b2      	bne.n	8005e22 <_printf_i+0xce>
 8005ebc:	2320      	movs	r3, #32
 8005ebe:	6822      	ldr	r2, [r4, #0]
 8005ec0:	439a      	bics	r2, r3
 8005ec2:	6022      	str	r2, [r4, #0]
 8005ec4:	e7ad      	b.n	8005e22 <_printf_i+0xce>
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	6809      	ldr	r1, [r1, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	6022      	str	r2, [r4, #0]
 8005ece:	0022      	movs	r2, r4
 8005ed0:	2178      	movs	r1, #120	; 0x78
 8005ed2:	3245      	adds	r2, #69	; 0x45
 8005ed4:	7011      	strb	r1, [r2, #0]
 8005ed6:	4a27      	ldr	r2, [pc, #156]	; (8005f74 <_printf_i+0x220>)
 8005ed8:	e7e1      	b.n	8005e9e <_printf_i+0x14a>
 8005eda:	0648      	lsls	r0, r1, #25
 8005edc:	d5e6      	bpl.n	8005eac <_printf_i+0x158>
 8005ede:	b2ad      	uxth	r5, r5
 8005ee0:	e7e4      	b.n	8005eac <_printf_i+0x158>
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	680d      	ldr	r5, [r1, #0]
 8005ee6:	1d10      	adds	r0, r2, #4
 8005ee8:	6949      	ldr	r1, [r1, #20]
 8005eea:	6018      	str	r0, [r3, #0]
 8005eec:	6813      	ldr	r3, [r2, #0]
 8005eee:	062e      	lsls	r6, r5, #24
 8005ef0:	d501      	bpl.n	8005ef6 <_printf_i+0x1a2>
 8005ef2:	6019      	str	r1, [r3, #0]
 8005ef4:	e002      	b.n	8005efc <_printf_i+0x1a8>
 8005ef6:	066d      	lsls	r5, r5, #25
 8005ef8:	d5fb      	bpl.n	8005ef2 <_printf_i+0x19e>
 8005efa:	8019      	strh	r1, [r3, #0]
 8005efc:	2300      	movs	r3, #0
 8005efe:	9e04      	ldr	r6, [sp, #16]
 8005f00:	6123      	str	r3, [r4, #16]
 8005f02:	e7bb      	b.n	8005e7c <_printf_i+0x128>
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	1d11      	adds	r1, r2, #4
 8005f08:	6019      	str	r1, [r3, #0]
 8005f0a:	6816      	ldr	r6, [r2, #0]
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	0030      	movs	r0, r6
 8005f10:	6862      	ldr	r2, [r4, #4]
 8005f12:	f000 facf 	bl	80064b4 <memchr>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	d001      	beq.n	8005f1e <_printf_i+0x1ca>
 8005f1a:	1b80      	subs	r0, r0, r6
 8005f1c:	6060      	str	r0, [r4, #4]
 8005f1e:	6863      	ldr	r3, [r4, #4]
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	2300      	movs	r3, #0
 8005f24:	9a04      	ldr	r2, [sp, #16]
 8005f26:	7013      	strb	r3, [r2, #0]
 8005f28:	e7a8      	b.n	8005e7c <_printf_i+0x128>
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	0032      	movs	r2, r6
 8005f2e:	9906      	ldr	r1, [sp, #24]
 8005f30:	9805      	ldr	r0, [sp, #20]
 8005f32:	9d07      	ldr	r5, [sp, #28]
 8005f34:	47a8      	blx	r5
 8005f36:	1c43      	adds	r3, r0, #1
 8005f38:	d0aa      	beq.n	8005e90 <_printf_i+0x13c>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	079b      	lsls	r3, r3, #30
 8005f3e:	d415      	bmi.n	8005f6c <_printf_i+0x218>
 8005f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f42:	68e0      	ldr	r0, [r4, #12]
 8005f44:	4298      	cmp	r0, r3
 8005f46:	daa5      	bge.n	8005e94 <_printf_i+0x140>
 8005f48:	0018      	movs	r0, r3
 8005f4a:	e7a3      	b.n	8005e94 <_printf_i+0x140>
 8005f4c:	0022      	movs	r2, r4
 8005f4e:	2301      	movs	r3, #1
 8005f50:	9906      	ldr	r1, [sp, #24]
 8005f52:	9805      	ldr	r0, [sp, #20]
 8005f54:	9e07      	ldr	r6, [sp, #28]
 8005f56:	3219      	adds	r2, #25
 8005f58:	47b0      	blx	r6
 8005f5a:	1c43      	adds	r3, r0, #1
 8005f5c:	d098      	beq.n	8005e90 <_printf_i+0x13c>
 8005f5e:	3501      	adds	r5, #1
 8005f60:	68e3      	ldr	r3, [r4, #12]
 8005f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f64:	1a9b      	subs	r3, r3, r2
 8005f66:	42ab      	cmp	r3, r5
 8005f68:	dcf0      	bgt.n	8005f4c <_printf_i+0x1f8>
 8005f6a:	e7e9      	b.n	8005f40 <_printf_i+0x1ec>
 8005f6c:	2500      	movs	r5, #0
 8005f6e:	e7f7      	b.n	8005f60 <_printf_i+0x20c>
 8005f70:	08006aed 	.word	0x08006aed
 8005f74:	08006afe 	.word	0x08006afe

08005f78 <_sbrk_r>:
 8005f78:	2300      	movs	r3, #0
 8005f7a:	b570      	push	{r4, r5, r6, lr}
 8005f7c:	4d06      	ldr	r5, [pc, #24]	; (8005f98 <_sbrk_r+0x20>)
 8005f7e:	0004      	movs	r4, r0
 8005f80:	0008      	movs	r0, r1
 8005f82:	602b      	str	r3, [r5, #0]
 8005f84:	f7fb fe80 	bl	8001c88 <_sbrk>
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	d103      	bne.n	8005f94 <_sbrk_r+0x1c>
 8005f8c:	682b      	ldr	r3, [r5, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d000      	beq.n	8005f94 <_sbrk_r+0x1c>
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	bd70      	pop	{r4, r5, r6, pc}
 8005f96:	46c0      	nop			; (mov r8, r8)
 8005f98:	2000029c 	.word	0x2000029c

08005f9c <__sread>:
 8005f9c:	b570      	push	{r4, r5, r6, lr}
 8005f9e:	000c      	movs	r4, r1
 8005fa0:	250e      	movs	r5, #14
 8005fa2:	5f49      	ldrsh	r1, [r1, r5]
 8005fa4:	f000 faec 	bl	8006580 <_read_r>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	db03      	blt.n	8005fb4 <__sread+0x18>
 8005fac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005fae:	181b      	adds	r3, r3, r0
 8005fb0:	6563      	str	r3, [r4, #84]	; 0x54
 8005fb2:	bd70      	pop	{r4, r5, r6, pc}
 8005fb4:	89a3      	ldrh	r3, [r4, #12]
 8005fb6:	4a02      	ldr	r2, [pc, #8]	; (8005fc0 <__sread+0x24>)
 8005fb8:	4013      	ands	r3, r2
 8005fba:	81a3      	strh	r3, [r4, #12]
 8005fbc:	e7f9      	b.n	8005fb2 <__sread+0x16>
 8005fbe:	46c0      	nop			; (mov r8, r8)
 8005fc0:	ffffefff 	.word	0xffffefff

08005fc4 <__swrite>:
 8005fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc6:	001f      	movs	r7, r3
 8005fc8:	898b      	ldrh	r3, [r1, #12]
 8005fca:	0005      	movs	r5, r0
 8005fcc:	000c      	movs	r4, r1
 8005fce:	0016      	movs	r6, r2
 8005fd0:	05db      	lsls	r3, r3, #23
 8005fd2:	d505      	bpl.n	8005fe0 <__swrite+0x1c>
 8005fd4:	230e      	movs	r3, #14
 8005fd6:	5ec9      	ldrsh	r1, [r1, r3]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2302      	movs	r3, #2
 8005fdc:	f000 f9ea 	bl	80063b4 <_lseek_r>
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	4a05      	ldr	r2, [pc, #20]	; (8005ff8 <__swrite+0x34>)
 8005fe4:	0028      	movs	r0, r5
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	81a3      	strh	r3, [r4, #12]
 8005fea:	0032      	movs	r2, r6
 8005fec:	230e      	movs	r3, #14
 8005fee:	5ee1      	ldrsh	r1, [r4, r3]
 8005ff0:	003b      	movs	r3, r7
 8005ff2:	f000 f875 	bl	80060e0 <_write_r>
 8005ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ff8:	ffffefff 	.word	0xffffefff

08005ffc <__sseek>:
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	000c      	movs	r4, r1
 8006000:	250e      	movs	r5, #14
 8006002:	5f49      	ldrsh	r1, [r1, r5]
 8006004:	f000 f9d6 	bl	80063b4 <_lseek_r>
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	1c42      	adds	r2, r0, #1
 800600c:	d103      	bne.n	8006016 <__sseek+0x1a>
 800600e:	4a05      	ldr	r2, [pc, #20]	; (8006024 <__sseek+0x28>)
 8006010:	4013      	ands	r3, r2
 8006012:	81a3      	strh	r3, [r4, #12]
 8006014:	bd70      	pop	{r4, r5, r6, pc}
 8006016:	2280      	movs	r2, #128	; 0x80
 8006018:	0152      	lsls	r2, r2, #5
 800601a:	4313      	orrs	r3, r2
 800601c:	81a3      	strh	r3, [r4, #12]
 800601e:	6560      	str	r0, [r4, #84]	; 0x54
 8006020:	e7f8      	b.n	8006014 <__sseek+0x18>
 8006022:	46c0      	nop			; (mov r8, r8)
 8006024:	ffffefff 	.word	0xffffefff

08006028 <__sclose>:
 8006028:	b510      	push	{r4, lr}
 800602a:	230e      	movs	r3, #14
 800602c:	5ec9      	ldrsh	r1, [r1, r3]
 800602e:	f000 f8e3 	bl	80061f8 <_close_r>
 8006032:	bd10      	pop	{r4, pc}

08006034 <__swbuf_r>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	0005      	movs	r5, r0
 8006038:	000e      	movs	r6, r1
 800603a:	0014      	movs	r4, r2
 800603c:	2800      	cmp	r0, #0
 800603e:	d004      	beq.n	800604a <__swbuf_r+0x16>
 8006040:	6983      	ldr	r3, [r0, #24]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <__swbuf_r+0x16>
 8006046:	f7ff fb77 	bl	8005738 <__sinit>
 800604a:	4b22      	ldr	r3, [pc, #136]	; (80060d4 <__swbuf_r+0xa0>)
 800604c:	429c      	cmp	r4, r3
 800604e:	d12e      	bne.n	80060ae <__swbuf_r+0x7a>
 8006050:	686c      	ldr	r4, [r5, #4]
 8006052:	69a3      	ldr	r3, [r4, #24]
 8006054:	60a3      	str	r3, [r4, #8]
 8006056:	89a3      	ldrh	r3, [r4, #12]
 8006058:	071b      	lsls	r3, r3, #28
 800605a:	d532      	bpl.n	80060c2 <__swbuf_r+0x8e>
 800605c:	6923      	ldr	r3, [r4, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d02f      	beq.n	80060c2 <__swbuf_r+0x8e>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	6922      	ldr	r2, [r4, #16]
 8006066:	b2f7      	uxtb	r7, r6
 8006068:	1a98      	subs	r0, r3, r2
 800606a:	6963      	ldr	r3, [r4, #20]
 800606c:	b2f6      	uxtb	r6, r6
 800606e:	4283      	cmp	r3, r0
 8006070:	dc05      	bgt.n	800607e <__swbuf_r+0x4a>
 8006072:	0021      	movs	r1, r4
 8006074:	0028      	movs	r0, r5
 8006076:	f000 f95d 	bl	8006334 <_fflush_r>
 800607a:	2800      	cmp	r0, #0
 800607c:	d127      	bne.n	80060ce <__swbuf_r+0x9a>
 800607e:	68a3      	ldr	r3, [r4, #8]
 8006080:	3001      	adds	r0, #1
 8006082:	3b01      	subs	r3, #1
 8006084:	60a3      	str	r3, [r4, #8]
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	6022      	str	r2, [r4, #0]
 800608c:	701f      	strb	r7, [r3, #0]
 800608e:	6963      	ldr	r3, [r4, #20]
 8006090:	4283      	cmp	r3, r0
 8006092:	d004      	beq.n	800609e <__swbuf_r+0x6a>
 8006094:	89a3      	ldrh	r3, [r4, #12]
 8006096:	07db      	lsls	r3, r3, #31
 8006098:	d507      	bpl.n	80060aa <__swbuf_r+0x76>
 800609a:	2e0a      	cmp	r6, #10
 800609c:	d105      	bne.n	80060aa <__swbuf_r+0x76>
 800609e:	0021      	movs	r1, r4
 80060a0:	0028      	movs	r0, r5
 80060a2:	f000 f947 	bl	8006334 <_fflush_r>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d111      	bne.n	80060ce <__swbuf_r+0x9a>
 80060aa:	0030      	movs	r0, r6
 80060ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ae:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <__swbuf_r+0xa4>)
 80060b0:	429c      	cmp	r4, r3
 80060b2:	d101      	bne.n	80060b8 <__swbuf_r+0x84>
 80060b4:	68ac      	ldr	r4, [r5, #8]
 80060b6:	e7cc      	b.n	8006052 <__swbuf_r+0x1e>
 80060b8:	4b08      	ldr	r3, [pc, #32]	; (80060dc <__swbuf_r+0xa8>)
 80060ba:	429c      	cmp	r4, r3
 80060bc:	d1c9      	bne.n	8006052 <__swbuf_r+0x1e>
 80060be:	68ec      	ldr	r4, [r5, #12]
 80060c0:	e7c7      	b.n	8006052 <__swbuf_r+0x1e>
 80060c2:	0021      	movs	r1, r4
 80060c4:	0028      	movs	r0, r5
 80060c6:	f000 f81f 	bl	8006108 <__swsetup_r>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d0c9      	beq.n	8006062 <__swbuf_r+0x2e>
 80060ce:	2601      	movs	r6, #1
 80060d0:	4276      	negs	r6, r6
 80060d2:	e7ea      	b.n	80060aa <__swbuf_r+0x76>
 80060d4:	08006a9c 	.word	0x08006a9c
 80060d8:	08006abc 	.word	0x08006abc
 80060dc:	08006a7c 	.word	0x08006a7c

080060e0 <_write_r>:
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	0004      	movs	r4, r0
 80060e4:	0008      	movs	r0, r1
 80060e6:	0011      	movs	r1, r2
 80060e8:	001a      	movs	r2, r3
 80060ea:	2300      	movs	r3, #0
 80060ec:	4d05      	ldr	r5, [pc, #20]	; (8006104 <_write_r+0x24>)
 80060ee:	602b      	str	r3, [r5, #0]
 80060f0:	f7fb fd82 	bl	8001bf8 <_write>
 80060f4:	1c43      	adds	r3, r0, #1
 80060f6:	d103      	bne.n	8006100 <_write_r+0x20>
 80060f8:	682b      	ldr	r3, [r5, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d000      	beq.n	8006100 <_write_r+0x20>
 80060fe:	6023      	str	r3, [r4, #0]
 8006100:	bd70      	pop	{r4, r5, r6, pc}
 8006102:	46c0      	nop			; (mov r8, r8)
 8006104:	2000029c 	.word	0x2000029c

08006108 <__swsetup_r>:
 8006108:	4b37      	ldr	r3, [pc, #220]	; (80061e8 <__swsetup_r+0xe0>)
 800610a:	b570      	push	{r4, r5, r6, lr}
 800610c:	681d      	ldr	r5, [r3, #0]
 800610e:	0006      	movs	r6, r0
 8006110:	000c      	movs	r4, r1
 8006112:	2d00      	cmp	r5, #0
 8006114:	d005      	beq.n	8006122 <__swsetup_r+0x1a>
 8006116:	69ab      	ldr	r3, [r5, #24]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d102      	bne.n	8006122 <__swsetup_r+0x1a>
 800611c:	0028      	movs	r0, r5
 800611e:	f7ff fb0b 	bl	8005738 <__sinit>
 8006122:	4b32      	ldr	r3, [pc, #200]	; (80061ec <__swsetup_r+0xe4>)
 8006124:	429c      	cmp	r4, r3
 8006126:	d10f      	bne.n	8006148 <__swsetup_r+0x40>
 8006128:	686c      	ldr	r4, [r5, #4]
 800612a:	230c      	movs	r3, #12
 800612c:	5ee2      	ldrsh	r2, [r4, r3]
 800612e:	b293      	uxth	r3, r2
 8006130:	0711      	lsls	r1, r2, #28
 8006132:	d42d      	bmi.n	8006190 <__swsetup_r+0x88>
 8006134:	06d9      	lsls	r1, r3, #27
 8006136:	d411      	bmi.n	800615c <__swsetup_r+0x54>
 8006138:	2309      	movs	r3, #9
 800613a:	2001      	movs	r0, #1
 800613c:	6033      	str	r3, [r6, #0]
 800613e:	3337      	adds	r3, #55	; 0x37
 8006140:	4313      	orrs	r3, r2
 8006142:	81a3      	strh	r3, [r4, #12]
 8006144:	4240      	negs	r0, r0
 8006146:	bd70      	pop	{r4, r5, r6, pc}
 8006148:	4b29      	ldr	r3, [pc, #164]	; (80061f0 <__swsetup_r+0xe8>)
 800614a:	429c      	cmp	r4, r3
 800614c:	d101      	bne.n	8006152 <__swsetup_r+0x4a>
 800614e:	68ac      	ldr	r4, [r5, #8]
 8006150:	e7eb      	b.n	800612a <__swsetup_r+0x22>
 8006152:	4b28      	ldr	r3, [pc, #160]	; (80061f4 <__swsetup_r+0xec>)
 8006154:	429c      	cmp	r4, r3
 8006156:	d1e8      	bne.n	800612a <__swsetup_r+0x22>
 8006158:	68ec      	ldr	r4, [r5, #12]
 800615a:	e7e6      	b.n	800612a <__swsetup_r+0x22>
 800615c:	075b      	lsls	r3, r3, #29
 800615e:	d513      	bpl.n	8006188 <__swsetup_r+0x80>
 8006160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006162:	2900      	cmp	r1, #0
 8006164:	d008      	beq.n	8006178 <__swsetup_r+0x70>
 8006166:	0023      	movs	r3, r4
 8006168:	3344      	adds	r3, #68	; 0x44
 800616a:	4299      	cmp	r1, r3
 800616c:	d002      	beq.n	8006174 <__swsetup_r+0x6c>
 800616e:	0030      	movs	r0, r6
 8006170:	f000 f9bc 	bl	80064ec <_free_r>
 8006174:	2300      	movs	r3, #0
 8006176:	6363      	str	r3, [r4, #52]	; 0x34
 8006178:	2224      	movs	r2, #36	; 0x24
 800617a:	89a3      	ldrh	r3, [r4, #12]
 800617c:	4393      	bics	r3, r2
 800617e:	81a3      	strh	r3, [r4, #12]
 8006180:	2300      	movs	r3, #0
 8006182:	6063      	str	r3, [r4, #4]
 8006184:	6923      	ldr	r3, [r4, #16]
 8006186:	6023      	str	r3, [r4, #0]
 8006188:	2308      	movs	r3, #8
 800618a:	89a2      	ldrh	r2, [r4, #12]
 800618c:	4313      	orrs	r3, r2
 800618e:	81a3      	strh	r3, [r4, #12]
 8006190:	6923      	ldr	r3, [r4, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10b      	bne.n	80061ae <__swsetup_r+0xa6>
 8006196:	21a0      	movs	r1, #160	; 0xa0
 8006198:	2280      	movs	r2, #128	; 0x80
 800619a:	89a3      	ldrh	r3, [r4, #12]
 800619c:	0089      	lsls	r1, r1, #2
 800619e:	0092      	lsls	r2, r2, #2
 80061a0:	400b      	ands	r3, r1
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d003      	beq.n	80061ae <__swsetup_r+0xa6>
 80061a6:	0021      	movs	r1, r4
 80061a8:	0030      	movs	r0, r6
 80061aa:	f000 f93f 	bl	800642c <__smakebuf_r>
 80061ae:	220c      	movs	r2, #12
 80061b0:	5ea3      	ldrsh	r3, [r4, r2]
 80061b2:	2001      	movs	r0, #1
 80061b4:	001a      	movs	r2, r3
 80061b6:	b299      	uxth	r1, r3
 80061b8:	4002      	ands	r2, r0
 80061ba:	4203      	tst	r3, r0
 80061bc:	d00f      	beq.n	80061de <__swsetup_r+0xd6>
 80061be:	2200      	movs	r2, #0
 80061c0:	60a2      	str	r2, [r4, #8]
 80061c2:	6962      	ldr	r2, [r4, #20]
 80061c4:	4252      	negs	r2, r2
 80061c6:	61a2      	str	r2, [r4, #24]
 80061c8:	2000      	movs	r0, #0
 80061ca:	6922      	ldr	r2, [r4, #16]
 80061cc:	4282      	cmp	r2, r0
 80061ce:	d1ba      	bne.n	8006146 <__swsetup_r+0x3e>
 80061d0:	060a      	lsls	r2, r1, #24
 80061d2:	d5b8      	bpl.n	8006146 <__swsetup_r+0x3e>
 80061d4:	2240      	movs	r2, #64	; 0x40
 80061d6:	4313      	orrs	r3, r2
 80061d8:	81a3      	strh	r3, [r4, #12]
 80061da:	3801      	subs	r0, #1
 80061dc:	e7b3      	b.n	8006146 <__swsetup_r+0x3e>
 80061de:	0788      	lsls	r0, r1, #30
 80061e0:	d400      	bmi.n	80061e4 <__swsetup_r+0xdc>
 80061e2:	6962      	ldr	r2, [r4, #20]
 80061e4:	60a2      	str	r2, [r4, #8]
 80061e6:	e7ef      	b.n	80061c8 <__swsetup_r+0xc0>
 80061e8:	2000004c 	.word	0x2000004c
 80061ec:	08006a9c 	.word	0x08006a9c
 80061f0:	08006abc 	.word	0x08006abc
 80061f4:	08006a7c 	.word	0x08006a7c

080061f8 <_close_r>:
 80061f8:	2300      	movs	r3, #0
 80061fa:	b570      	push	{r4, r5, r6, lr}
 80061fc:	4d06      	ldr	r5, [pc, #24]	; (8006218 <_close_r+0x20>)
 80061fe:	0004      	movs	r4, r0
 8006200:	0008      	movs	r0, r1
 8006202:	602b      	str	r3, [r5, #0]
 8006204:	f7fb fd14 	bl	8001c30 <_close>
 8006208:	1c43      	adds	r3, r0, #1
 800620a:	d103      	bne.n	8006214 <_close_r+0x1c>
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d000      	beq.n	8006214 <_close_r+0x1c>
 8006212:	6023      	str	r3, [r4, #0]
 8006214:	bd70      	pop	{r4, r5, r6, pc}
 8006216:	46c0      	nop			; (mov r8, r8)
 8006218:	2000029c 	.word	0x2000029c

0800621c <__sflush_r>:
 800621c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800621e:	898b      	ldrh	r3, [r1, #12]
 8006220:	0005      	movs	r5, r0
 8006222:	000c      	movs	r4, r1
 8006224:	071a      	lsls	r2, r3, #28
 8006226:	d45f      	bmi.n	80062e8 <__sflush_r+0xcc>
 8006228:	684a      	ldr	r2, [r1, #4]
 800622a:	2a00      	cmp	r2, #0
 800622c:	dc04      	bgt.n	8006238 <__sflush_r+0x1c>
 800622e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006230:	2a00      	cmp	r2, #0
 8006232:	dc01      	bgt.n	8006238 <__sflush_r+0x1c>
 8006234:	2000      	movs	r0, #0
 8006236:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006238:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800623a:	2f00      	cmp	r7, #0
 800623c:	d0fa      	beq.n	8006234 <__sflush_r+0x18>
 800623e:	2200      	movs	r2, #0
 8006240:	2180      	movs	r1, #128	; 0x80
 8006242:	682e      	ldr	r6, [r5, #0]
 8006244:	602a      	str	r2, [r5, #0]
 8006246:	001a      	movs	r2, r3
 8006248:	0149      	lsls	r1, r1, #5
 800624a:	400a      	ands	r2, r1
 800624c:	420b      	tst	r3, r1
 800624e:	d034      	beq.n	80062ba <__sflush_r+0x9e>
 8006250:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	075b      	lsls	r3, r3, #29
 8006256:	d506      	bpl.n	8006266 <__sflush_r+0x4a>
 8006258:	6863      	ldr	r3, [r4, #4]
 800625a:	1ac0      	subs	r0, r0, r3
 800625c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <__sflush_r+0x4a>
 8006262:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006264:	1ac0      	subs	r0, r0, r3
 8006266:	0002      	movs	r2, r0
 8006268:	6a21      	ldr	r1, [r4, #32]
 800626a:	2300      	movs	r3, #0
 800626c:	0028      	movs	r0, r5
 800626e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006270:	47b8      	blx	r7
 8006272:	89a1      	ldrh	r1, [r4, #12]
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	d106      	bne.n	8006286 <__sflush_r+0x6a>
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	2b1d      	cmp	r3, #29
 800627c:	d831      	bhi.n	80062e2 <__sflush_r+0xc6>
 800627e:	4a2c      	ldr	r2, [pc, #176]	; (8006330 <__sflush_r+0x114>)
 8006280:	40da      	lsrs	r2, r3
 8006282:	07d3      	lsls	r3, r2, #31
 8006284:	d52d      	bpl.n	80062e2 <__sflush_r+0xc6>
 8006286:	2300      	movs	r3, #0
 8006288:	6063      	str	r3, [r4, #4]
 800628a:	6923      	ldr	r3, [r4, #16]
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	04cb      	lsls	r3, r1, #19
 8006290:	d505      	bpl.n	800629e <__sflush_r+0x82>
 8006292:	1c43      	adds	r3, r0, #1
 8006294:	d102      	bne.n	800629c <__sflush_r+0x80>
 8006296:	682b      	ldr	r3, [r5, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d100      	bne.n	800629e <__sflush_r+0x82>
 800629c:	6560      	str	r0, [r4, #84]	; 0x54
 800629e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062a0:	602e      	str	r6, [r5, #0]
 80062a2:	2900      	cmp	r1, #0
 80062a4:	d0c6      	beq.n	8006234 <__sflush_r+0x18>
 80062a6:	0023      	movs	r3, r4
 80062a8:	3344      	adds	r3, #68	; 0x44
 80062aa:	4299      	cmp	r1, r3
 80062ac:	d002      	beq.n	80062b4 <__sflush_r+0x98>
 80062ae:	0028      	movs	r0, r5
 80062b0:	f000 f91c 	bl	80064ec <_free_r>
 80062b4:	2000      	movs	r0, #0
 80062b6:	6360      	str	r0, [r4, #52]	; 0x34
 80062b8:	e7bd      	b.n	8006236 <__sflush_r+0x1a>
 80062ba:	2301      	movs	r3, #1
 80062bc:	0028      	movs	r0, r5
 80062be:	6a21      	ldr	r1, [r4, #32]
 80062c0:	47b8      	blx	r7
 80062c2:	1c43      	adds	r3, r0, #1
 80062c4:	d1c5      	bne.n	8006252 <__sflush_r+0x36>
 80062c6:	682b      	ldr	r3, [r5, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d0c2      	beq.n	8006252 <__sflush_r+0x36>
 80062cc:	2b1d      	cmp	r3, #29
 80062ce:	d001      	beq.n	80062d4 <__sflush_r+0xb8>
 80062d0:	2b16      	cmp	r3, #22
 80062d2:	d101      	bne.n	80062d8 <__sflush_r+0xbc>
 80062d4:	602e      	str	r6, [r5, #0]
 80062d6:	e7ad      	b.n	8006234 <__sflush_r+0x18>
 80062d8:	2340      	movs	r3, #64	; 0x40
 80062da:	89a2      	ldrh	r2, [r4, #12]
 80062dc:	4313      	orrs	r3, r2
 80062de:	81a3      	strh	r3, [r4, #12]
 80062e0:	e7a9      	b.n	8006236 <__sflush_r+0x1a>
 80062e2:	2340      	movs	r3, #64	; 0x40
 80062e4:	430b      	orrs	r3, r1
 80062e6:	e7fa      	b.n	80062de <__sflush_r+0xc2>
 80062e8:	690f      	ldr	r7, [r1, #16]
 80062ea:	2f00      	cmp	r7, #0
 80062ec:	d0a2      	beq.n	8006234 <__sflush_r+0x18>
 80062ee:	680a      	ldr	r2, [r1, #0]
 80062f0:	600f      	str	r7, [r1, #0]
 80062f2:	1bd2      	subs	r2, r2, r7
 80062f4:	9201      	str	r2, [sp, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	079b      	lsls	r3, r3, #30
 80062fa:	d100      	bne.n	80062fe <__sflush_r+0xe2>
 80062fc:	694a      	ldr	r2, [r1, #20]
 80062fe:	60a2      	str	r2, [r4, #8]
 8006300:	9b01      	ldr	r3, [sp, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	dc00      	bgt.n	8006308 <__sflush_r+0xec>
 8006306:	e795      	b.n	8006234 <__sflush_r+0x18>
 8006308:	003a      	movs	r2, r7
 800630a:	0028      	movs	r0, r5
 800630c:	9b01      	ldr	r3, [sp, #4]
 800630e:	6a21      	ldr	r1, [r4, #32]
 8006310:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006312:	47b0      	blx	r6
 8006314:	2800      	cmp	r0, #0
 8006316:	dc06      	bgt.n	8006326 <__sflush_r+0x10a>
 8006318:	2340      	movs	r3, #64	; 0x40
 800631a:	2001      	movs	r0, #1
 800631c:	89a2      	ldrh	r2, [r4, #12]
 800631e:	4240      	negs	r0, r0
 8006320:	4313      	orrs	r3, r2
 8006322:	81a3      	strh	r3, [r4, #12]
 8006324:	e787      	b.n	8006236 <__sflush_r+0x1a>
 8006326:	9b01      	ldr	r3, [sp, #4]
 8006328:	183f      	adds	r7, r7, r0
 800632a:	1a1b      	subs	r3, r3, r0
 800632c:	9301      	str	r3, [sp, #4]
 800632e:	e7e7      	b.n	8006300 <__sflush_r+0xe4>
 8006330:	20400001 	.word	0x20400001

08006334 <_fflush_r>:
 8006334:	690b      	ldr	r3, [r1, #16]
 8006336:	b570      	push	{r4, r5, r6, lr}
 8006338:	0005      	movs	r5, r0
 800633a:	000c      	movs	r4, r1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d102      	bne.n	8006346 <_fflush_r+0x12>
 8006340:	2500      	movs	r5, #0
 8006342:	0028      	movs	r0, r5
 8006344:	bd70      	pop	{r4, r5, r6, pc}
 8006346:	2800      	cmp	r0, #0
 8006348:	d004      	beq.n	8006354 <_fflush_r+0x20>
 800634a:	6983      	ldr	r3, [r0, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <_fflush_r+0x20>
 8006350:	f7ff f9f2 	bl	8005738 <__sinit>
 8006354:	4b14      	ldr	r3, [pc, #80]	; (80063a8 <_fflush_r+0x74>)
 8006356:	429c      	cmp	r4, r3
 8006358:	d11b      	bne.n	8006392 <_fflush_r+0x5e>
 800635a:	686c      	ldr	r4, [r5, #4]
 800635c:	220c      	movs	r2, #12
 800635e:	5ea3      	ldrsh	r3, [r4, r2]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0ed      	beq.n	8006340 <_fflush_r+0xc>
 8006364:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006366:	07d2      	lsls	r2, r2, #31
 8006368:	d404      	bmi.n	8006374 <_fflush_r+0x40>
 800636a:	059b      	lsls	r3, r3, #22
 800636c:	d402      	bmi.n	8006374 <_fflush_r+0x40>
 800636e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006370:	f7ff fa83 	bl	800587a <__retarget_lock_acquire_recursive>
 8006374:	0028      	movs	r0, r5
 8006376:	0021      	movs	r1, r4
 8006378:	f7ff ff50 	bl	800621c <__sflush_r>
 800637c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800637e:	0005      	movs	r5, r0
 8006380:	07db      	lsls	r3, r3, #31
 8006382:	d4de      	bmi.n	8006342 <_fflush_r+0xe>
 8006384:	89a3      	ldrh	r3, [r4, #12]
 8006386:	059b      	lsls	r3, r3, #22
 8006388:	d4db      	bmi.n	8006342 <_fflush_r+0xe>
 800638a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800638c:	f7ff fa76 	bl	800587c <__retarget_lock_release_recursive>
 8006390:	e7d7      	b.n	8006342 <_fflush_r+0xe>
 8006392:	4b06      	ldr	r3, [pc, #24]	; (80063ac <_fflush_r+0x78>)
 8006394:	429c      	cmp	r4, r3
 8006396:	d101      	bne.n	800639c <_fflush_r+0x68>
 8006398:	68ac      	ldr	r4, [r5, #8]
 800639a:	e7df      	b.n	800635c <_fflush_r+0x28>
 800639c:	4b04      	ldr	r3, [pc, #16]	; (80063b0 <_fflush_r+0x7c>)
 800639e:	429c      	cmp	r4, r3
 80063a0:	d1dc      	bne.n	800635c <_fflush_r+0x28>
 80063a2:	68ec      	ldr	r4, [r5, #12]
 80063a4:	e7da      	b.n	800635c <_fflush_r+0x28>
 80063a6:	46c0      	nop			; (mov r8, r8)
 80063a8:	08006a9c 	.word	0x08006a9c
 80063ac:	08006abc 	.word	0x08006abc
 80063b0:	08006a7c 	.word	0x08006a7c

080063b4 <_lseek_r>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	0004      	movs	r4, r0
 80063b8:	0008      	movs	r0, r1
 80063ba:	0011      	movs	r1, r2
 80063bc:	001a      	movs	r2, r3
 80063be:	2300      	movs	r3, #0
 80063c0:	4d05      	ldr	r5, [pc, #20]	; (80063d8 <_lseek_r+0x24>)
 80063c2:	602b      	str	r3, [r5, #0]
 80063c4:	f7fb fc55 	bl	8001c72 <_lseek>
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	d103      	bne.n	80063d4 <_lseek_r+0x20>
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d000      	beq.n	80063d4 <_lseek_r+0x20>
 80063d2:	6023      	str	r3, [r4, #0]
 80063d4:	bd70      	pop	{r4, r5, r6, pc}
 80063d6:	46c0      	nop			; (mov r8, r8)
 80063d8:	2000029c 	.word	0x2000029c

080063dc <__swhatbuf_r>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	000e      	movs	r6, r1
 80063e0:	001d      	movs	r5, r3
 80063e2:	230e      	movs	r3, #14
 80063e4:	5ec9      	ldrsh	r1, [r1, r3]
 80063e6:	0014      	movs	r4, r2
 80063e8:	b096      	sub	sp, #88	; 0x58
 80063ea:	2900      	cmp	r1, #0
 80063ec:	da08      	bge.n	8006400 <__swhatbuf_r+0x24>
 80063ee:	220c      	movs	r2, #12
 80063f0:	5eb3      	ldrsh	r3, [r6, r2]
 80063f2:	2200      	movs	r2, #0
 80063f4:	602a      	str	r2, [r5, #0]
 80063f6:	061b      	lsls	r3, r3, #24
 80063f8:	d411      	bmi.n	800641e <__swhatbuf_r+0x42>
 80063fa:	2380      	movs	r3, #128	; 0x80
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	e00f      	b.n	8006420 <__swhatbuf_r+0x44>
 8006400:	466a      	mov	r2, sp
 8006402:	f000 f8d1 	bl	80065a8 <_fstat_r>
 8006406:	2800      	cmp	r0, #0
 8006408:	dbf1      	blt.n	80063ee <__swhatbuf_r+0x12>
 800640a:	23f0      	movs	r3, #240	; 0xf0
 800640c:	9901      	ldr	r1, [sp, #4]
 800640e:	021b      	lsls	r3, r3, #8
 8006410:	4019      	ands	r1, r3
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <__swhatbuf_r+0x4c>)
 8006414:	18c9      	adds	r1, r1, r3
 8006416:	424b      	negs	r3, r1
 8006418:	4159      	adcs	r1, r3
 800641a:	6029      	str	r1, [r5, #0]
 800641c:	e7ed      	b.n	80063fa <__swhatbuf_r+0x1e>
 800641e:	2340      	movs	r3, #64	; 0x40
 8006420:	2000      	movs	r0, #0
 8006422:	6023      	str	r3, [r4, #0]
 8006424:	b016      	add	sp, #88	; 0x58
 8006426:	bd70      	pop	{r4, r5, r6, pc}
 8006428:	ffffe000 	.word	0xffffe000

0800642c <__smakebuf_r>:
 800642c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800642e:	2602      	movs	r6, #2
 8006430:	898b      	ldrh	r3, [r1, #12]
 8006432:	0005      	movs	r5, r0
 8006434:	000c      	movs	r4, r1
 8006436:	4233      	tst	r3, r6
 8006438:	d006      	beq.n	8006448 <__smakebuf_r+0x1c>
 800643a:	0023      	movs	r3, r4
 800643c:	3347      	adds	r3, #71	; 0x47
 800643e:	6023      	str	r3, [r4, #0]
 8006440:	6123      	str	r3, [r4, #16]
 8006442:	2301      	movs	r3, #1
 8006444:	6163      	str	r3, [r4, #20]
 8006446:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006448:	466a      	mov	r2, sp
 800644a:	ab01      	add	r3, sp, #4
 800644c:	f7ff ffc6 	bl	80063dc <__swhatbuf_r>
 8006450:	9900      	ldr	r1, [sp, #0]
 8006452:	0007      	movs	r7, r0
 8006454:	0028      	movs	r0, r5
 8006456:	f7ff fa35 	bl	80058c4 <_malloc_r>
 800645a:	2800      	cmp	r0, #0
 800645c:	d108      	bne.n	8006470 <__smakebuf_r+0x44>
 800645e:	220c      	movs	r2, #12
 8006460:	5ea3      	ldrsh	r3, [r4, r2]
 8006462:	059a      	lsls	r2, r3, #22
 8006464:	d4ef      	bmi.n	8006446 <__smakebuf_r+0x1a>
 8006466:	2203      	movs	r2, #3
 8006468:	4393      	bics	r3, r2
 800646a:	431e      	orrs	r6, r3
 800646c:	81a6      	strh	r6, [r4, #12]
 800646e:	e7e4      	b.n	800643a <__smakebuf_r+0xe>
 8006470:	4b0f      	ldr	r3, [pc, #60]	; (80064b0 <__smakebuf_r+0x84>)
 8006472:	62ab      	str	r3, [r5, #40]	; 0x28
 8006474:	2380      	movs	r3, #128	; 0x80
 8006476:	89a2      	ldrh	r2, [r4, #12]
 8006478:	6020      	str	r0, [r4, #0]
 800647a:	4313      	orrs	r3, r2
 800647c:	81a3      	strh	r3, [r4, #12]
 800647e:	9b00      	ldr	r3, [sp, #0]
 8006480:	6120      	str	r0, [r4, #16]
 8006482:	6163      	str	r3, [r4, #20]
 8006484:	9b01      	ldr	r3, [sp, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00d      	beq.n	80064a6 <__smakebuf_r+0x7a>
 800648a:	0028      	movs	r0, r5
 800648c:	230e      	movs	r3, #14
 800648e:	5ee1      	ldrsh	r1, [r4, r3]
 8006490:	f000 f89c 	bl	80065cc <_isatty_r>
 8006494:	2800      	cmp	r0, #0
 8006496:	d006      	beq.n	80064a6 <__smakebuf_r+0x7a>
 8006498:	2203      	movs	r2, #3
 800649a:	89a3      	ldrh	r3, [r4, #12]
 800649c:	4393      	bics	r3, r2
 800649e:	001a      	movs	r2, r3
 80064a0:	2301      	movs	r3, #1
 80064a2:	4313      	orrs	r3, r2
 80064a4:	81a3      	strh	r3, [r4, #12]
 80064a6:	89a0      	ldrh	r0, [r4, #12]
 80064a8:	4307      	orrs	r7, r0
 80064aa:	81a7      	strh	r7, [r4, #12]
 80064ac:	e7cb      	b.n	8006446 <__smakebuf_r+0x1a>
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	080056bd 	.word	0x080056bd

080064b4 <memchr>:
 80064b4:	b2c9      	uxtb	r1, r1
 80064b6:	1882      	adds	r2, r0, r2
 80064b8:	4290      	cmp	r0, r2
 80064ba:	d101      	bne.n	80064c0 <memchr+0xc>
 80064bc:	2000      	movs	r0, #0
 80064be:	4770      	bx	lr
 80064c0:	7803      	ldrb	r3, [r0, #0]
 80064c2:	428b      	cmp	r3, r1
 80064c4:	d0fb      	beq.n	80064be <memchr+0xa>
 80064c6:	3001      	adds	r0, #1
 80064c8:	e7f6      	b.n	80064b8 <memchr+0x4>
	...

080064cc <__malloc_lock>:
 80064cc:	b510      	push	{r4, lr}
 80064ce:	4802      	ldr	r0, [pc, #8]	; (80064d8 <__malloc_lock+0xc>)
 80064d0:	f7ff f9d3 	bl	800587a <__retarget_lock_acquire_recursive>
 80064d4:	bd10      	pop	{r4, pc}
 80064d6:	46c0      	nop			; (mov r8, r8)
 80064d8:	20000290 	.word	0x20000290

080064dc <__malloc_unlock>:
 80064dc:	b510      	push	{r4, lr}
 80064de:	4802      	ldr	r0, [pc, #8]	; (80064e8 <__malloc_unlock+0xc>)
 80064e0:	f7ff f9cc 	bl	800587c <__retarget_lock_release_recursive>
 80064e4:	bd10      	pop	{r4, pc}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	20000290 	.word	0x20000290

080064ec <_free_r>:
 80064ec:	b570      	push	{r4, r5, r6, lr}
 80064ee:	0005      	movs	r5, r0
 80064f0:	2900      	cmp	r1, #0
 80064f2:	d010      	beq.n	8006516 <_free_r+0x2a>
 80064f4:	1f0c      	subs	r4, r1, #4
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	da00      	bge.n	80064fe <_free_r+0x12>
 80064fc:	18e4      	adds	r4, r4, r3
 80064fe:	0028      	movs	r0, r5
 8006500:	f7ff ffe4 	bl	80064cc <__malloc_lock>
 8006504:	4a1d      	ldr	r2, [pc, #116]	; (800657c <_free_r+0x90>)
 8006506:	6813      	ldr	r3, [r2, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d105      	bne.n	8006518 <_free_r+0x2c>
 800650c:	6063      	str	r3, [r4, #4]
 800650e:	6014      	str	r4, [r2, #0]
 8006510:	0028      	movs	r0, r5
 8006512:	f7ff ffe3 	bl	80064dc <__malloc_unlock>
 8006516:	bd70      	pop	{r4, r5, r6, pc}
 8006518:	42a3      	cmp	r3, r4
 800651a:	d908      	bls.n	800652e <_free_r+0x42>
 800651c:	6821      	ldr	r1, [r4, #0]
 800651e:	1860      	adds	r0, r4, r1
 8006520:	4283      	cmp	r3, r0
 8006522:	d1f3      	bne.n	800650c <_free_r+0x20>
 8006524:	6818      	ldr	r0, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	1841      	adds	r1, r0, r1
 800652a:	6021      	str	r1, [r4, #0]
 800652c:	e7ee      	b.n	800650c <_free_r+0x20>
 800652e:	001a      	movs	r2, r3
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <_free_r+0x4e>
 8006536:	42a3      	cmp	r3, r4
 8006538:	d9f9      	bls.n	800652e <_free_r+0x42>
 800653a:	6811      	ldr	r1, [r2, #0]
 800653c:	1850      	adds	r0, r2, r1
 800653e:	42a0      	cmp	r0, r4
 8006540:	d10b      	bne.n	800655a <_free_r+0x6e>
 8006542:	6820      	ldr	r0, [r4, #0]
 8006544:	1809      	adds	r1, r1, r0
 8006546:	1850      	adds	r0, r2, r1
 8006548:	6011      	str	r1, [r2, #0]
 800654a:	4283      	cmp	r3, r0
 800654c:	d1e0      	bne.n	8006510 <_free_r+0x24>
 800654e:	6818      	ldr	r0, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	1841      	adds	r1, r0, r1
 8006554:	6011      	str	r1, [r2, #0]
 8006556:	6053      	str	r3, [r2, #4]
 8006558:	e7da      	b.n	8006510 <_free_r+0x24>
 800655a:	42a0      	cmp	r0, r4
 800655c:	d902      	bls.n	8006564 <_free_r+0x78>
 800655e:	230c      	movs	r3, #12
 8006560:	602b      	str	r3, [r5, #0]
 8006562:	e7d5      	b.n	8006510 <_free_r+0x24>
 8006564:	6821      	ldr	r1, [r4, #0]
 8006566:	1860      	adds	r0, r4, r1
 8006568:	4283      	cmp	r3, r0
 800656a:	d103      	bne.n	8006574 <_free_r+0x88>
 800656c:	6818      	ldr	r0, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	1841      	adds	r1, r0, r1
 8006572:	6021      	str	r1, [r4, #0]
 8006574:	6063      	str	r3, [r4, #4]
 8006576:	6054      	str	r4, [r2, #4]
 8006578:	e7ca      	b.n	8006510 <_free_r+0x24>
 800657a:	46c0      	nop			; (mov r8, r8)
 800657c:	20000294 	.word	0x20000294

08006580 <_read_r>:
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	0004      	movs	r4, r0
 8006584:	0008      	movs	r0, r1
 8006586:	0011      	movs	r1, r2
 8006588:	001a      	movs	r2, r3
 800658a:	2300      	movs	r3, #0
 800658c:	4d05      	ldr	r5, [pc, #20]	; (80065a4 <_read_r+0x24>)
 800658e:	602b      	str	r3, [r5, #0]
 8006590:	f7fb fb15 	bl	8001bbe <_read>
 8006594:	1c43      	adds	r3, r0, #1
 8006596:	d103      	bne.n	80065a0 <_read_r+0x20>
 8006598:	682b      	ldr	r3, [r5, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d000      	beq.n	80065a0 <_read_r+0x20>
 800659e:	6023      	str	r3, [r4, #0]
 80065a0:	bd70      	pop	{r4, r5, r6, pc}
 80065a2:	46c0      	nop			; (mov r8, r8)
 80065a4:	2000029c 	.word	0x2000029c

080065a8 <_fstat_r>:
 80065a8:	2300      	movs	r3, #0
 80065aa:	b570      	push	{r4, r5, r6, lr}
 80065ac:	4d06      	ldr	r5, [pc, #24]	; (80065c8 <_fstat_r+0x20>)
 80065ae:	0004      	movs	r4, r0
 80065b0:	0008      	movs	r0, r1
 80065b2:	0011      	movs	r1, r2
 80065b4:	602b      	str	r3, [r5, #0]
 80065b6:	f7fb fb45 	bl	8001c44 <_fstat>
 80065ba:	1c43      	adds	r3, r0, #1
 80065bc:	d103      	bne.n	80065c6 <_fstat_r+0x1e>
 80065be:	682b      	ldr	r3, [r5, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d000      	beq.n	80065c6 <_fstat_r+0x1e>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd70      	pop	{r4, r5, r6, pc}
 80065c8:	2000029c 	.word	0x2000029c

080065cc <_isatty_r>:
 80065cc:	2300      	movs	r3, #0
 80065ce:	b570      	push	{r4, r5, r6, lr}
 80065d0:	4d06      	ldr	r5, [pc, #24]	; (80065ec <_isatty_r+0x20>)
 80065d2:	0004      	movs	r4, r0
 80065d4:	0008      	movs	r0, r1
 80065d6:	602b      	str	r3, [r5, #0]
 80065d8:	f7fb fb42 	bl	8001c60 <_isatty>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	d103      	bne.n	80065e8 <_isatty_r+0x1c>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d000      	beq.n	80065e8 <_isatty_r+0x1c>
 80065e6:	6023      	str	r3, [r4, #0]
 80065e8:	bd70      	pop	{r4, r5, r6, pc}
 80065ea:	46c0      	nop			; (mov r8, r8)
 80065ec:	2000029c 	.word	0x2000029c

080065f0 <_init>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	46c0      	nop			; (mov r8, r8)
 80065f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f6:	bc08      	pop	{r3}
 80065f8:	469e      	mov	lr, r3
 80065fa:	4770      	bx	lr

080065fc <_fini>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	46c0      	nop			; (mov r8, r8)
 8006600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006602:	bc08      	pop	{r3}
 8006604:	469e      	mov	lr, r3
 8006606:	4770      	bx	lr
