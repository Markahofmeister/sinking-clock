
sinking-clock_master_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006398  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08006454  08006454  00016454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800697c  0800697c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800697c  0800697c  0001697c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006984  08006984  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006984  08006984  00016984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006988  08006988  00016988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800698c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200000a8  08006a34  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08006a34  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fd6  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002803  00000000  00000000  000340a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  000368b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  00037a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a84  00000000  00000000  00038a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001450b  00000000  00000000  000514cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b1d5  00000000  00000000  000659d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100bac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000468c  00000000  00000000  00100bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000a8 	.word	0x200000a8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800643c 	.word	0x0800643c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000ac 	.word	0x200000ac
 8000100:	0800643c 	.word	0x0800643c

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	469b      	mov	fp, r3
 80002a6:	d433      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a8:	465a      	mov	r2, fp
 80002aa:	4653      	mov	r3, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83a      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e078      	b.n	80003b4 <__udivmoddi4+0x144>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e075      	b.n	80003ba <__udivmoddi4+0x14a>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e028      	b.n	800033a <__udivmoddi4+0xca>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	2320      	movs	r3, #32
 8000314:	1a9b      	subs	r3, r3, r2
 8000316:	4652      	mov	r2, sl
 8000318:	40da      	lsrs	r2, r3
 800031a:	4641      	mov	r1, r8
 800031c:	0013      	movs	r3, r2
 800031e:	464a      	mov	r2, r9
 8000320:	408a      	lsls	r2, r1
 8000322:	0017      	movs	r7, r2
 8000324:	4642      	mov	r2, r8
 8000326:	431f      	orrs	r7, r3
 8000328:	4653      	mov	r3, sl
 800032a:	4093      	lsls	r3, r2
 800032c:	001e      	movs	r6, r3
 800032e:	42af      	cmp	r7, r5
 8000330:	d9c4      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0d9      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000340:	07fb      	lsls	r3, r7, #31
 8000342:	0872      	lsrs	r2, r6, #1
 8000344:	431a      	orrs	r2, r3
 8000346:	4646      	mov	r6, r8
 8000348:	087b      	lsrs	r3, r7, #1
 800034a:	e00e      	b.n	800036a <__udivmoddi4+0xfa>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d101      	bne.n	8000354 <__udivmoddi4+0xe4>
 8000350:	42a2      	cmp	r2, r4
 8000352:	d80c      	bhi.n	800036e <__udivmoddi4+0xfe>
 8000354:	1aa4      	subs	r4, r4, r2
 8000356:	419d      	sbcs	r5, r3
 8000358:	2001      	movs	r0, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2100      	movs	r1, #0
 8000360:	3e01      	subs	r6, #1
 8000362:	1824      	adds	r4, r4, r0
 8000364:	414d      	adcs	r5, r1
 8000366:	2e00      	cmp	r6, #0
 8000368:	d006      	beq.n	8000378 <__udivmoddi4+0x108>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d9ee      	bls.n	800034c <__udivmoddi4+0xdc>
 800036e:	3e01      	subs	r6, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2e00      	cmp	r6, #0
 8000376:	d1f8      	bne.n	800036a <__udivmoddi4+0xfa>
 8000378:	9800      	ldr	r0, [sp, #0]
 800037a:	9901      	ldr	r1, [sp, #4]
 800037c:	465b      	mov	r3, fp
 800037e:	1900      	adds	r0, r0, r4
 8000380:	4169      	adcs	r1, r5
 8000382:	2b00      	cmp	r3, #0
 8000384:	db24      	blt.n	80003d0 <__udivmoddi4+0x160>
 8000386:	002b      	movs	r3, r5
 8000388:	465a      	mov	r2, fp
 800038a:	4644      	mov	r4, r8
 800038c:	40d3      	lsrs	r3, r2
 800038e:	002a      	movs	r2, r5
 8000390:	40e2      	lsrs	r2, r4
 8000392:	001c      	movs	r4, r3
 8000394:	465b      	mov	r3, fp
 8000396:	0015      	movs	r5, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	db2a      	blt.n	80003f2 <__udivmoddi4+0x182>
 800039c:	0026      	movs	r6, r4
 800039e:	409e      	lsls	r6, r3
 80003a0:	0033      	movs	r3, r6
 80003a2:	0026      	movs	r6, r4
 80003a4:	4647      	mov	r7, r8
 80003a6:	40be      	lsls	r6, r7
 80003a8:	0032      	movs	r2, r6
 80003aa:	1a80      	subs	r0, r0, r2
 80003ac:	4199      	sbcs	r1, r3
 80003ae:	9000      	str	r0, [sp, #0]
 80003b0:	9101      	str	r1, [sp, #4]
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b4:	42a3      	cmp	r3, r4
 80003b6:	d8bc      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80003b8:	e783      	b.n	80002c2 <__udivmoddi4+0x52>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	2100      	movs	r1, #0
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	2200      	movs	r2, #0
 80003c4:	9100      	str	r1, [sp, #0]
 80003c6:	9201      	str	r2, [sp, #4]
 80003c8:	2201      	movs	r2, #1
 80003ca:	40da      	lsrs	r2, r3
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	e786      	b.n	80002de <__udivmoddi4+0x6e>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	4646      	mov	r6, r8
 80003da:	409a      	lsls	r2, r3
 80003dc:	0023      	movs	r3, r4
 80003de:	40f3      	lsrs	r3, r6
 80003e0:	4644      	mov	r4, r8
 80003e2:	4313      	orrs	r3, r2
 80003e4:	002a      	movs	r2, r5
 80003e6:	40e2      	lsrs	r2, r4
 80003e8:	001c      	movs	r4, r3
 80003ea:	465b      	mov	r3, fp
 80003ec:	0015      	movs	r5, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dad4      	bge.n	800039c <__udivmoddi4+0x12c>
 80003f2:	4642      	mov	r2, r8
 80003f4:	002f      	movs	r7, r5
 80003f6:	2320      	movs	r3, #32
 80003f8:	0026      	movs	r6, r4
 80003fa:	4097      	lsls	r7, r2
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	40de      	lsrs	r6, r3
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7cd      	b.n	80003a2 <__udivmoddi4+0x132>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <getRTCTime>:
				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
	}

}

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000468:	68b9      	ldr	r1, [r7, #8]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	2200      	movs	r2, #0
 800046e:	0018      	movs	r0, r3
 8000470:	f002 fee6 	bl	8003240 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000474:	6879      	ldr	r1, [r7, #4]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2200      	movs	r2, #0
 800047a:	0018      	movs	r0, r3
 800047c:	f002 ffce 	bl	800341c <HAL_RTC_GetDate>

}
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b004      	add	sp, #16
 8000486:	bd80      	pop	{r7, pc}

08000488 <getUserAlarmTime>:

void getUserAlarmTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *userAlarmTime) {
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b08d      	sub	sp, #52	; 0x34
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]

	// Store alarm data in alarm object pointer and extract alarm time data from alarm object
	RTC_AlarmTypeDef userAlarmObj;
	HAL_RTC_GetAlarm(hrtc, &userAlarmObj, userAlarm, RTCTimeFormat);
 8000492:	2380      	movs	r3, #128	; 0x80
 8000494:	009a      	lsls	r2, r3, #2
 8000496:	2408      	movs	r4, #8
 8000498:	1939      	adds	r1, r7, r4
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	2300      	movs	r3, #0
 800049e:	f003 f94b 	bl	8003738 <HAL_RTC_GetAlarm>
	*userAlarmTime = userAlarmObj.AlarmTime;
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	193a      	adds	r2, r7, r4
 80004a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004a8:	c313      	stmia	r3!, {r0, r1, r4}
 80004aa:	ca03      	ldmia	r2!, {r0, r1}
 80004ac:	c303      	stmia	r3!, {r0, r1}

}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b00d      	add	sp, #52	; 0x34
 80004b4:	bd90      	pop	{r4, r7, pc}

080004b6 <getUserAlarmObj>:

void getUserAlarmObj(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *userAlarmObj) {
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	6039      	str	r1, [r7, #0]

	// Store alarm data in alarm object pointer
	HAL_RTC_GetAlarm(hrtc, userAlarmObj, internalAlarm, FORMAT_BIN);
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	005a      	lsls	r2, r3, #1
 80004c4:	6839      	ldr	r1, [r7, #0]
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	2300      	movs	r3, #0
 80004ca:	f003 f935 	bl	8003738 <HAL_RTC_GetAlarm>

}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b002      	add	sp, #8
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80004e0:	2301      	movs	r3, #1
 80004e2:	425b      	negs	r3, r3
 80004e4:	1d39      	adds	r1, r7, #4
 80004e6:	4804      	ldr	r0, [pc, #16]	; (80004f8 <__io_putchar+0x20>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	f004 fabf 	bl	8004a6c <HAL_UART_Transmit>
  return ch;
 80004ee:	687b      	ldr	r3, [r7, #4]
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	2000018c 	.word	0x2000018c

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f001 fb69 	bl	8001bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f851 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 fa71 	bl	80009f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050e:	f000 fa3b 	bl	8000988 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000512:	f000 f897 	bl	8000644 <MX_RTC_Init>
  MX_TIM16_Init();
 8000516:	f000 fa0f 	bl	8000938 <MX_TIM16_Init>
  MX_TIM1_Init();
 800051a:	f000 f963 	bl	80007e4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  displayToggle = 2; 		// Display at 100% intensity for next display toggle
 800051e:	4b17      	ldr	r3, [pc, #92]	; (800057c <main+0x80>)
 8000520:	2202      	movs	r2, #2
 8000522:	701a      	strb	r2, [r3, #0]

  // Initialize all GPIOs to be used with 7 segment display
  sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <main+0x84>)
 8000526:	8818      	ldrh	r0, [r3, #0]
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <main+0x88>)
 800052a:	8819      	ldrh	r1, [r3, #0]
 800052c:	4b16      	ldr	r3, [pc, #88]	; (8000588 <main+0x8c>)
 800052e:	881c      	ldrh	r4, [r3, #0]
 8000530:	4b16      	ldr	r3, [pc, #88]	; (800058c <main+0x90>)
 8000532:	881d      	ldrh	r5, [r3, #0]
 8000534:	4b16      	ldr	r3, [pc, #88]	; (8000590 <main+0x94>)
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	4a16      	ldr	r2, [pc, #88]	; (8000594 <main+0x98>)
 800053a:	9203      	str	r2, [sp, #12]
 800053c:	4a16      	ldr	r2, [pc, #88]	; (8000598 <main+0x9c>)
 800053e:	9202      	str	r2, [sp, #8]
 8000540:	4a16      	ldr	r2, [pc, #88]	; (800059c <main+0xa0>)
 8000542:	9201      	str	r2, [sp, #4]
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	002b      	movs	r3, r5
 8000548:	0022      	movs	r2, r4
 800054a:	f000 ff0b 	bl	8001364 <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, &htim16, &htim1);

  	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 800054e:	1dfc      	adds	r4, r7, #7
 8000550:	f000 fb32 	bl	8000bb8 <updateAndDisplayTime>
 8000554:	0003      	movs	r3, r0
 8000556:	7023      	strb	r3, [r4, #0]

  	if(halRet != HAL_OK) {		//check HAL
 8000558:	1dfb      	adds	r3, r7, #7
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d004      	beq.n	800056a <main+0x6e>
  		printf("HAL Error - TX current time\n\r");
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <main+0xa4>)
 8000562:	0018      	movs	r0, r3
 8000564:	f004 ff92 	bl	800548c <iprintf>
 8000568:	e003      	b.n	8000572 <main+0x76>
  	} else {
  		printf("Display Updated with current time\n\r");
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <main+0xa8>)
 800056c:	0018      	movs	r0, r3
 800056e:	f004 ff8d 	bl	800548c <iprintf>
  	}

  userAlarmToggle = false;			//Default to off
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <main+0xac>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	e7fe      	b.n	8000578 <main+0x7c>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	200000c4 	.word	0x200000c4
 8000580:	20000000 	.word	0x20000000
 8000584:	20000002 	.word	0x20000002
 8000588:	20000004 	.word	0x20000004
 800058c:	20000006 	.word	0x20000006
 8000590:	20000008 	.word	0x20000008
 8000594:	200000f4 	.word	0x200000f4
 8000598:	20000140 	.word	0x20000140
 800059c:	2000000c 	.word	0x2000000c
 80005a0:	08006454 	.word	0x08006454
 80005a4:	08006474 	.word	0x08006474
 80005a8:	200000c5 	.word	0x200000c5

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b093      	sub	sp, #76	; 0x4c
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	2410      	movs	r4, #16
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	0018      	movs	r0, r3
 80005b8:	2338      	movs	r3, #56	; 0x38
 80005ba:	001a      	movs	r2, r3
 80005bc:	2100      	movs	r1, #0
 80005be:	f004 ff5d 	bl	800547c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c2:	003b      	movs	r3, r7
 80005c4:	0018      	movs	r0, r3
 80005c6:	2310      	movs	r3, #16
 80005c8:	001a      	movs	r2, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	f004 ff56 	bl	800547c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	0018      	movs	r0, r3
 80005d6:	f001 fe35 	bl	8002244 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	220a      	movs	r2, #10
 80005de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	0052      	lsls	r2, r2, #1
 80005e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005e8:	0021      	movs	r1, r4
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2240      	movs	r2, #64	; 0x40
 80005f4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2201      	movs	r2, #1
 80005fa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	187b      	adds	r3, r7, r1
 8000604:	0018      	movs	r0, r3
 8000606:	f001 fe93 	bl	8002330 <HAL_RCC_OscConfig>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800060e:	f000 fea3 	bl	8001358 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	003b      	movs	r3, r7
 8000614:	2207      	movs	r2, #7
 8000616:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000618:	003b      	movs	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	003b      	movs	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000624:	003b      	movs	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800062a:	003b      	movs	r3, r7
 800062c:	2100      	movs	r1, #0
 800062e:	0018      	movs	r0, r3
 8000630:	f002 f998 	bl	8002964 <HAL_RCC_ClockConfig>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000638:	f000 fe8e 	bl	8001358 <Error_Handler>
  }
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b013      	add	sp, #76	; 0x4c
 8000642:	bd90      	pop	{r4, r7, pc}

08000644 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b091      	sub	sp, #68	; 0x44
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800064a:	232c      	movs	r3, #44	; 0x2c
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	0018      	movs	r0, r3
 8000650:	2314      	movs	r3, #20
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f004 ff11 	bl	800547c <memset>
  RTC_DateTypeDef sDate = {0};
 800065a:	2328      	movs	r3, #40	; 0x28
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000662:	003b      	movs	r3, r7
 8000664:	0018      	movs	r0, r3
 8000666:	2328      	movs	r3, #40	; 0x28
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f004 ff06 	bl	800547c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000670:	4b55      	ldr	r3, [pc, #340]	; (80007c8 <MX_RTC_Init+0x184>)
 8000672:	4a56      	ldr	r2, [pc, #344]	; (80007cc <MX_RTC_Init+0x188>)
 8000674:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000676:	4b54      	ldr	r3, [pc, #336]	; (80007c8 <MX_RTC_Init+0x184>)
 8000678:	2240      	movs	r2, #64	; 0x40
 800067a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800067c:	4b52      	ldr	r3, [pc, #328]	; (80007c8 <MX_RTC_Init+0x184>)
 800067e:	227f      	movs	r2, #127	; 0x7f
 8000680:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000682:	4b51      	ldr	r3, [pc, #324]	; (80007c8 <MX_RTC_Init+0x184>)
 8000684:	22ff      	movs	r2, #255	; 0xff
 8000686:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000688:	4b4f      	ldr	r3, [pc, #316]	; (80007c8 <MX_RTC_Init+0x184>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800068e:	4b4e      	ldr	r3, [pc, #312]	; (80007c8 <MX_RTC_Init+0x184>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000694:	4b4c      	ldr	r3, [pc, #304]	; (80007c8 <MX_RTC_Init+0x184>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800069a:	4b4b      	ldr	r3, [pc, #300]	; (80007c8 <MX_RTC_Init+0x184>)
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	05d2      	lsls	r2, r2, #23
 80006a0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80006a2:	4b49      	ldr	r3, [pc, #292]	; (80007c8 <MX_RTC_Init+0x184>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006a8:	4b47      	ldr	r3, [pc, #284]	; (80007c8 <MX_RTC_Init+0x184>)
 80006aa:	0018      	movs	r0, r3
 80006ac:	f002 fc7e 	bl	8002fac <HAL_RTC_Init>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80006b4:	f000 fe50 	bl	8001358 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 80006b8:	212c      	movs	r1, #44	; 0x2c
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2200      	movs	r2, #0
 80006ca:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80006e4:	1879      	adds	r1, r7, r1
 80006e6:	4b38      	ldr	r3, [pc, #224]	; (80007c8 <MX_RTC_Init+0x184>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	0018      	movs	r0, r3
 80006ec:	f002 fd00 	bl	80030f0 <HAL_RTC_SetTime>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 80006f4:	f000 fe30 	bl	8001358 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006f8:	2128      	movs	r1, #40	; 0x28
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2201      	movs	r2, #1
 80006fe:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2201      	movs	r2, #1
 8000704:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2201      	movs	r2, #1
 800070a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000712:	1879      	adds	r1, r7, r1
 8000714:	4b2c      	ldr	r3, [pc, #176]	; (80007c8 <MX_RTC_Init+0x184>)
 8000716:	2200      	movs	r2, #0
 8000718:	0018      	movs	r0, r3
 800071a:	f002 fded 	bl	80032f8 <HAL_RTC_SetDate>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 8000722:	f000 fe19 	bl	8001358 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 1;
 8000726:	003b      	movs	r3, r7
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 1;
 800072c:	003b      	movs	r3, r7
 800072e:	2201      	movs	r2, #1
 8000730:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8000732:	003b      	movs	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000738:	003b      	movs	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800073e:	003b      	movs	r3, r7
 8000740:	2200      	movs	r2, #0
 8000742:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000744:	003b      	movs	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800074a:	003b      	movs	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000750:	003b      	movs	r3, r7
 8000752:	4a1f      	ldr	r2, [pc, #124]	; (80007d0 <MX_RTC_Init+0x18c>)
 8000754:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000756:	003b      	movs	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800075c:	003b      	movs	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000762:	003b      	movs	r3, r7
 8000764:	2220      	movs	r2, #32
 8000766:	2101      	movs	r1, #1
 8000768:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800076a:	003b      	movs	r3, r7
 800076c:	2280      	movs	r2, #128	; 0x80
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000772:	0039      	movs	r1, r7
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_RTC_Init+0x184>)
 8000776:	2200      	movs	r2, #0
 8000778:	0018      	movs	r0, r3
 800077a:	f002 fe9d 	bl	80034b8 <HAL_RTC_SetAlarm_IT>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d001      	beq.n	8000786 <MX_RTC_Init+0x142>
  {
    Error_Handler();
 8000782:	f000 fde9 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  currTime = sTime;
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_RTC_Init+0x190>)
 8000788:	222c      	movs	r2, #44	; 0x2c
 800078a:	18ba      	adds	r2, r7, r2
 800078c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800078e:	c313      	stmia	r3!, {r0, r1, r4}
 8000790:	ca03      	ldmia	r2!, {r0, r1}
 8000792:	c303      	stmia	r3!, {r0, r1}
  currDate = sDate;
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_RTC_Init+0x194>)
 8000796:	2228      	movs	r2, #40	; 0x28
 8000798:	18ba      	adds	r2, r7, r2
 800079a:	6812      	ldr	r2, [r2, #0]
 800079c:	601a      	str	r2, [r3, #0]
  userAlarmObj = sAlarm;
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_RTC_Init+0x198>)
 80007a0:	003a      	movs	r2, r7
 80007a2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007a4:	c313      	stmia	r3!, {r0, r1, r4}
 80007a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007a8:	c313      	stmia	r3!, {r0, r1, r4}
 80007aa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007ac:	c313      	stmia	r3!, {r0, r1, r4}
 80007ae:	6812      	ldr	r2, [r2, #0]
 80007b0:	601a      	str	r2, [r3, #0]
  userAlarmTime = userAlarmObj.AlarmTime;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_RTC_Init+0x19c>)
 80007b4:	4a09      	ldr	r2, [pc, #36]	; (80007dc <MX_RTC_Init+0x198>)
 80007b6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007b8:	c313      	stmia	r3!, {r0, r1, r4}
 80007ba:	ca03      	ldmia	r2!, {r0, r1}
 80007bc:	c303      	stmia	r3!, {r0, r1}

  /* USER CODE END RTC_Init 2 */

}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b011      	add	sp, #68	; 0x44
 80007c4:	bd90      	pop	{r4, r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	200000c8 	.word	0x200000c8
 80007cc:	40002800 	.word	0x40002800
 80007d0:	80800080 	.word	0x80800080
 80007d4:	20000220 	.word	0x20000220
 80007d8:	20000234 	.word	0x20000234
 80007dc:	2000024c 	.word	0x2000024c
 80007e0:	20000238 	.word	0x20000238

080007e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b098      	sub	sp, #96	; 0x60
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ea:	2354      	movs	r3, #84	; 0x54
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	0018      	movs	r0, r3
 80007f0:	230c      	movs	r3, #12
 80007f2:	001a      	movs	r2, r3
 80007f4:	2100      	movs	r1, #0
 80007f6:	f004 fe41 	bl	800547c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007fa:	2338      	movs	r3, #56	; 0x38
 80007fc:	18fb      	adds	r3, r7, r3
 80007fe:	0018      	movs	r0, r3
 8000800:	231c      	movs	r3, #28
 8000802:	001a      	movs	r2, r3
 8000804:	2100      	movs	r1, #0
 8000806:	f004 fe39 	bl	800547c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	0018      	movs	r0, r3
 800080e:	2334      	movs	r3, #52	; 0x34
 8000810:	001a      	movs	r2, r3
 8000812:	2100      	movs	r1, #0
 8000814:	f004 fe32 	bl	800547c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000818:	4b45      	ldr	r3, [pc, #276]	; (8000930 <MX_TIM1_Init+0x14c>)
 800081a:	4a46      	ldr	r2, [pc, #280]	; (8000934 <MX_TIM1_Init+0x150>)
 800081c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 800081e:	4b44      	ldr	r3, [pc, #272]	; (8000930 <MX_TIM1_Init+0x14c>)
 8000820:	229f      	movs	r2, #159	; 0x9f
 8000822:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000824:	4b42      	ldr	r3, [pc, #264]	; (8000930 <MX_TIM1_Init+0x14c>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800082a:	4b41      	ldr	r3, [pc, #260]	; (8000930 <MX_TIM1_Init+0x14c>)
 800082c:	2263      	movs	r2, #99	; 0x63
 800082e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000830:	4b3f      	ldr	r3, [pc, #252]	; (8000930 <MX_TIM1_Init+0x14c>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000836:	4b3e      	ldr	r3, [pc, #248]	; (8000930 <MX_TIM1_Init+0x14c>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083c:	4b3c      	ldr	r3, [pc, #240]	; (8000930 <MX_TIM1_Init+0x14c>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000842:	4b3b      	ldr	r3, [pc, #236]	; (8000930 <MX_TIM1_Init+0x14c>)
 8000844:	0018      	movs	r0, r3
 8000846:	f003 fa41 	bl	8003ccc <HAL_TIM_PWM_Init>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800084e:	f000 fd83 	bl	8001358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000852:	2154      	movs	r1, #84	; 0x54
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000866:	187a      	adds	r2, r7, r1
 8000868:	4b31      	ldr	r3, [pc, #196]	; (8000930 <MX_TIM1_Init+0x14c>)
 800086a:	0011      	movs	r1, r2
 800086c:	0018      	movs	r0, r3
 800086e:	f003 ff99 	bl	80047a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000872:	1e03      	subs	r3, r0, #0
 8000874:	d001      	beq.n	800087a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000876:	f000 fd6f 	bl	8001358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087a:	2138      	movs	r1, #56	; 0x38
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2260      	movs	r2, #96	; 0x60
 8000880:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008a6:	1879      	adds	r1, r7, r1
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_TIM1_Init+0x14c>)
 80008aa:	2204      	movs	r2, #4
 80008ac:	0018      	movs	r0, r3
 80008ae:	f003 fb43 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80008b6:	f000 fd4f 	bl	8001358 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2280      	movs	r2, #128	; 0x80
 80008dc:	0192      	lsls	r2, r2, #6
 80008de:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2280      	movs	r2, #128	; 0x80
 80008f6:	0492      	lsls	r2, r2, #18
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2200      	movs	r2, #0
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800090c:	1d3a      	adds	r2, r7, #4
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_TIM1_Init+0x14c>)
 8000910:	0011      	movs	r1, r2
 8000912:	0018      	movs	r0, r3
 8000914:	f003 ffae 	bl	8004874 <HAL_TIMEx_ConfigBreakDeadTime>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 800091c:	f000 fd1c 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <MX_TIM1_Init+0x14c>)
 8000922:	0018      	movs	r0, r3
 8000924:	f000 ffb8 	bl	8001898 <HAL_TIM_MspPostInit>

}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b018      	add	sp, #96	; 0x60
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200000f4 	.word	0x200000f4
 8000934:	40012c00 	.word	0x40012c00

08000938 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_TIM16_Init+0x44>)
 800093e:	4a10      	ldr	r2, [pc, #64]	; (8000980 <MX_TIM16_Init+0x48>)
 8000940:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 244;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_TIM16_Init+0x44>)
 8000944:	22f4      	movs	r2, #244	; 0xf4
 8000946:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_TIM16_Init+0x44>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_TIM16_Init+0x44>)
 8000950:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <MX_TIM16_Init+0x4c>)
 8000952:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_TIM16_Init+0x44>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_TIM16_Init+0x44>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_TIM16_Init+0x44>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <MX_TIM16_Init+0x44>)
 8000968:	0018      	movs	r0, r3
 800096a:	f003 f8e4 	bl	8003b36 <HAL_TIM_Base_Init>
 800096e:	1e03      	subs	r3, r0, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000972:	f000 fcf1 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000140 	.word	0x20000140
 8000980:	40014400 	.word	0x40014400
 8000984:	0000ffff 	.word	0x0000ffff

08000988 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <MX_USART2_UART_Init+0x60>)
 800098e:	4a17      	ldr	r2, [pc, #92]	; (80009ec <MX_USART2_UART_Init+0x64>)
 8000990:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_USART2_UART_Init+0x60>)
 8000994:	22e1      	movs	r2, #225	; 0xe1
 8000996:	0252      	lsls	r2, r2, #9
 8000998:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_USART2_UART_Init+0x60>)
 800099c:	2280      	movs	r2, #128	; 0x80
 800099e:	0152      	lsls	r2, r2, #5
 80009a0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART2_UART_Init+0x60>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_USART2_UART_Init+0x60>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART2_UART_Init+0x60>)
 80009b0:	220c      	movs	r2, #12
 80009b2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART2_UART_Init+0x60>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART2_UART_Init+0x60>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART2_UART_Init+0x60>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART2_UART_Init+0x60>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART2_UART_Init+0x60>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <MX_USART2_UART_Init+0x60>)
 80009d4:	0018      	movs	r0, r3
 80009d6:	f003 fff3 	bl	80049c0 <HAL_UART_Init>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80009de:	f000 fcbb 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2000018c 	.word	0x2000018c
 80009ec:	40004400 	.word	0x40004400

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b08b      	sub	sp, #44	; 0x2c
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	2414      	movs	r4, #20
 80009f8:	193b      	adds	r3, r7, r4
 80009fa:	0018      	movs	r0, r3
 80009fc:	2314      	movs	r3, #20
 80009fe:	001a      	movs	r2, r3
 8000a00:	2100      	movs	r1, #0
 8000a02:	f004 fd3b 	bl	800547c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4b67      	ldr	r3, [pc, #412]	; (8000ba4 <MX_GPIO_Init+0x1b4>)
 8000a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a0a:	4b66      	ldr	r3, [pc, #408]	; (8000ba4 <MX_GPIO_Init+0x1b4>)
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	635a      	str	r2, [r3, #52]	; 0x34
 8000a12:	4b64      	ldr	r3, [pc, #400]	; (8000ba4 <MX_GPIO_Init+0x1b4>)
 8000a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a16:	2204      	movs	r2, #4
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a1e:	4b61      	ldr	r3, [pc, #388]	; (8000ba4 <MX_GPIO_Init+0x1b4>)
 8000a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a22:	4b60      	ldr	r3, [pc, #384]	; (8000ba4 <MX_GPIO_Init+0x1b4>)
 8000a24:	2120      	movs	r1, #32
 8000a26:	430a      	orrs	r2, r1
 8000a28:	635a      	str	r2, [r3, #52]	; 0x34
 8000a2a:	4b5e      	ldr	r3, [pc, #376]	; (8000ba4 <MX_GPIO_Init+0x1b4>)
 8000a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a2e:	2220      	movs	r2, #32
 8000a30:	4013      	ands	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b5b      	ldr	r3, [pc, #364]	; (8000ba4 <MX_GPIO_Init+0x1b4>)
 8000a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3a:	4b5a      	ldr	r3, [pc, #360]	; (8000ba4 <MX_GPIO_Init+0x1b4>)
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	635a      	str	r2, [r3, #52]	; 0x34
 8000a42:	4b58      	ldr	r3, [pc, #352]	; (8000ba4 <MX_GPIO_Init+0x1b4>)
 8000a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a46:	2201      	movs	r2, #1
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	4b55      	ldr	r3, [pc, #340]	; (8000ba4 <MX_GPIO_Init+0x1b4>)
 8000a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a52:	4b54      	ldr	r3, [pc, #336]	; (8000ba4 <MX_GPIO_Init+0x1b4>)
 8000a54:	2102      	movs	r1, #2
 8000a56:	430a      	orrs	r2, r1
 8000a58:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5a:	4b52      	ldr	r3, [pc, #328]	; (8000ba4 <MX_GPIO_Init+0x1b4>)
 8000a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5e:	2202      	movs	r2, #2
 8000a60:	4013      	ands	r3, r2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Output_Pin|Shift_Store_Clock_Pin|Shift_Data_Clock_Pin|Shift_Master_Clear_Pin
 8000a66:	23f9      	movs	r3, #249	; 0xf9
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	484f      	ldr	r0, [pc, #316]	; (8000ba8 <MX_GPIO_Init+0x1b8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	0019      	movs	r1, r3
 8000a70:	f001 fb97 	bl	80021a2 <HAL_GPIO_WritePin>
                          |AM_PM_LED_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a74:	4b4d      	ldr	r3, [pc, #308]	; (8000bac <MX_GPIO_Init+0x1bc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	2140      	movs	r1, #64	; 0x40
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f001 fb91 	bl	80021a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Shift_Data_In_GPIO_Port, Shift_Data_In_Pin, GPIO_PIN_RESET);
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	0219      	lsls	r1, r3, #8
 8000a84:	23a0      	movs	r3, #160	; 0xa0
 8000a86:	05db      	lsls	r3, r3, #23
 8000a88:	2200      	movs	r2, #0
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f001 fb89 	bl	80021a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2204      	movs	r2, #4
 8000a94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2288      	movs	r2, #136	; 0x88
 8000a9a:	0352      	lsls	r2, r2, #13
 8000a9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	4a42      	ldr	r2, [pc, #264]	; (8000bb0 <MX_GPIO_Init+0x1c0>)
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	0010      	movs	r0, r2
 8000aac:	f001 f9f8 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_Button_Pin Alarm_Set_Button_Pin Hour_Set_Button_Pin Alarm_Enable_Button_Pin
                           Minute_Set_Button_Pin */
  GPIO_InitStruct.Pin = Display_Button_Pin|Alarm_Set_Button_Pin|Hour_Set_Button_Pin|Alarm_Enable_Button_Pin
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	4a40      	ldr	r2, [pc, #256]	; (8000bb4 <MX_GPIO_Init+0x1c4>)
 8000ab4:	601a      	str	r2, [r3, #0]
                          |Minute_Set_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	2284      	movs	r2, #132	; 0x84
 8000aba:	0392      	lsls	r2, r2, #14
 8000abc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	193a      	adds	r2, r7, r4
 8000ac6:	23a0      	movs	r3, #160	; 0xa0
 8000ac8:	05db      	lsls	r3, r3, #23
 8000aca:	0011      	movs	r1, r2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f001 f9e7 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Output_Pin Shift_Store_Clock_Pin Shift_Data_Clock_Pin Shift_Master_Clear_Pin
                           AM_PM_LED_Pin Alarm_LED_Pin */
  GPIO_InitStruct.Pin = Buzzer_Output_Pin|Shift_Store_Clock_Pin|Shift_Data_Clock_Pin|Shift_Master_Clear_Pin
 8000ad2:	0021      	movs	r1, r4
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	22f9      	movs	r2, #249	; 0xf9
 8000ad8:	0052      	lsls	r2, r2, #1
 8000ada:	601a      	str	r2, [r3, #0]
                          |AM_PM_LED_Pin|Alarm_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	000c      	movs	r4, r1
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	4a2d      	ldr	r2, [pc, #180]	; (8000ba8 <MX_GPIO_Init+0x1b8>)
 8000af4:	0019      	movs	r1, r3
 8000af6:	0010      	movs	r0, r2
 8000af8:	f001 f9d2 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	2240      	movs	r2, #64	; 0x40
 8000b00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2201      	movs	r2, #1
 8000b06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	4a25      	ldr	r2, [pc, #148]	; (8000bac <MX_GPIO_Init+0x1bc>)
 8000b18:	0019      	movs	r1, r3
 8000b1a:	0010      	movs	r0, r2
 8000b1c:	f001 f9c0 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Snooze_Button_Pin */
  GPIO_InitStruct.Pin = Snooze_Button_Pin;
 8000b20:	193b      	adds	r3, r7, r4
 8000b22:	2280      	movs	r2, #128	; 0x80
 8000b24:	0112      	lsls	r2, r2, #4
 8000b26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	2201      	movs	r2, #1
 8000b32:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Snooze_Button_GPIO_Port, &GPIO_InitStruct);
 8000b34:	193a      	adds	r2, r7, r4
 8000b36:	23a0      	movs	r3, #160	; 0xa0
 8000b38:	05db      	lsls	r3, r3, #23
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f001 f9af 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Shift_Data_In_Pin */
  GPIO_InitStruct.Pin = Shift_Data_In_Pin;
 8000b42:	0021      	movs	r1, r4
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	0212      	lsls	r2, r2, #8
 8000b4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2201      	movs	r2, #1
 8000b50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Shift_Data_In_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	187a      	adds	r2, r7, r1
 8000b60:	23a0      	movs	r3, #160	; 0xa0
 8000b62:	05db      	lsls	r3, r3, #23
 8000b64:	0011      	movs	r1, r2
 8000b66:	0018      	movs	r0, r3
 8000b68:	f001 f99a 	bl	8001ea0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2101      	movs	r1, #1
 8000b70:	2005      	movs	r0, #5
 8000b72:	f001 f963 	bl	8001e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000b76:	2005      	movs	r0, #5
 8000b78:	f001 f975 	bl	8001e66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2006      	movs	r0, #6
 8000b82:	f001 f95b 	bl	8001e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000b86:	2006      	movs	r0, #6
 8000b88:	f001 f96d 	bl	8001e66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2007      	movs	r0, #7
 8000b92:	f001 f953 	bl	8001e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000b96:	2007      	movs	r0, #7
 8000b98:	f001 f965 	bl	8001e66 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b00b      	add	sp, #44	; 0x2c
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	50000400 	.word	0x50000400
 8000bac:	50000800 	.word	0x50000800
 8000bb0:	50001400 	.word	0x50001400
 8000bb4:	00001063 	.word	0x00001063

08000bb8 <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8000bc4:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <updateAndDisplayTime+0x50>)
 8000bc6:	4911      	ldr	r1, [pc, #68]	; (8000c0c <updateAndDisplayTime+0x54>)
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <updateAndDisplayTime+0x58>)
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f7ff fc46 	bl	800045c <getRTCTime>
	sevSeg_updateDigits(&currTime);
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <updateAndDisplayTime+0x54>)
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 fcde 	bl	8001594 <sevSeg_updateDigits>

	if(currTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <updateAndDisplayTime+0x54>)
 8000bda:	78db      	ldrb	r3, [r3, #3]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d106      	bne.n	8000bee <updateAndDisplayTime+0x36>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000be0:	2180      	movs	r1, #128	; 0x80
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <updateAndDisplayTime+0x5c>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	0018      	movs	r0, r3
 8000be8:	f001 fadb 	bl	80021a2 <HAL_GPIO_WritePin>
 8000bec:	e005      	b.n	8000bfa <updateAndDisplayTime+0x42>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <updateAndDisplayTime+0x5c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f001 fad4 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	return halRet;
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]

}
 8000bfe:	0018      	movs	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b002      	add	sp, #8
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	20000234 	.word	0x20000234
 8000c0c:	20000220 	.word	0x20000220
 8000c10:	200000c8 	.word	0x200000c8
 8000c14:	50000400 	.word	0x50000400

08000c18 <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]

	getUserAlarmTime(&hrtc, &userAlarmTime);
 8000c24:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <updateAndDisplayAlarm+0x50>)
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <updateAndDisplayAlarm+0x54>)
 8000c28:	0011      	movs	r1, r2
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff fc2c 	bl	8000488 <getUserAlarmTime>
	sevSeg_updateDigits(&userAlarmTime);
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <updateAndDisplayAlarm+0x50>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 fcae 	bl	8001594 <sevSeg_updateDigits>

	if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <updateAndDisplayAlarm+0x50>)
 8000c3a:	78db      	ldrb	r3, [r3, #3]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d106      	bne.n	8000c4e <updateAndDisplayAlarm+0x36>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <updateAndDisplayAlarm+0x58>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	0018      	movs	r0, r3
 8000c48:	f001 faab 	bl	80021a2 <HAL_GPIO_WritePin>
 8000c4c:	e005      	b.n	8000c5a <updateAndDisplayAlarm+0x42>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000c4e:	2180      	movs	r1, #128	; 0x80
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <updateAndDisplayAlarm+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	0018      	movs	r0, r3
 8000c56:	f001 faa4 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	return halRet;
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]

}
 8000c5e:	0018      	movs	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b002      	add	sp, #8
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	20000238 	.word	0x20000238
 8000c6c:	200000c8 	.word	0x200000c8
 8000c70:	50000400 	.word	0x50000400

08000c74 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b08d      	sub	sp, #52	; 0x34
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

	  printf("Enter current time minute increment interrupt\n\r");
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <HAL_RTC_AlarmAEventCallback+0x88>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f004 fc04 	bl	800548c <iprintf>

	  RTC_AlarmTypeDef sAlarm;
	  getUserAlarmObj(hrtc, &sAlarm);
 8000c84:	2408      	movs	r4, #8
 8000c86:	193a      	adds	r2, r7, r4
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f7ff fc12 	bl	80004b6 <getUserAlarmObj>
	  getRTCTime(hrtc, &currTime, &currDate);
 8000c92:	4a1b      	ldr	r2, [pc, #108]	; (8000d00 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8000c94:	491b      	ldr	r1, [pc, #108]	; (8000d04 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff fbdf 	bl	800045c <getRTCTime>

	  if(sAlarm.AlarmTime.Minutes>58) {
 8000c9e:	0022      	movs	r2, r4
 8000ca0:	18bb      	adds	r3, r7, r2
 8000ca2:	785b      	ldrb	r3, [r3, #1]
 8000ca4:	2b3a      	cmp	r3, #58	; 0x3a
 8000ca6:	d907      	bls.n	8000cb8 <HAL_RTC_AlarmAEventCallback+0x44>
		sAlarm.AlarmTime.Minutes=0;
 8000ca8:	18bb      	adds	r3, r7, r2
 8000caa:	2200      	movs	r2, #0
 8000cac:	705a      	strb	r2, [r3, #1]
		printf("Reset alarm time\n\r");
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_RTC_AlarmAEventCallback+0x94>)
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f004 fbeb 	bl	800548c <iprintf>
 8000cb6:	e006      	b.n	8000cc6 <HAL_RTC_AlarmAEventCallback+0x52>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8000cb8:	2108      	movs	r1, #8
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	785b      	ldrb	r3, [r3, #1]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	2308      	movs	r3, #8
 8000cca:	18f9      	adds	r1, r7, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f002 fbf1 	bl	80034b8 <HAL_RTC_SetAlarm_IT>
 8000cd6:	1e03      	subs	r3, r0, #0
 8000cd8:	d1f6      	bne.n	8000cc8 <HAL_RTC_AlarmAEventCallback+0x54>

	  updateAndDisplayTime();
 8000cda:	f7ff ff6d 	bl	8000bb8 <updateAndDisplayTime>

	  printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	0019      	movs	r1, r3
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000ce6:	785b      	ldrb	r3, [r3, #1]
 8000ce8:	001a      	movs	r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000cec:	789b      	ldrb	r3, [r3, #2]
 8000cee:	4807      	ldr	r0, [pc, #28]	; (8000d0c <HAL_RTC_AlarmAEventCallback+0x98>)
 8000cf0:	f004 fbcc 	bl	800548c <iprintf>

}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b00d      	add	sp, #52	; 0x34
 8000cfa:	bd90      	pop	{r4, r7, pc}
 8000cfc:	08006498 	.word	0x08006498
 8000d00:	20000234 	.word	0x20000234
 8000d04:	20000220 	.word	0x20000220
 8000d08:	080064c8 	.word	0x080064c8
 8000d0c:	080064dc 	.word	0x080064dc

08000d10 <HAL_GPIO_EXTI_Falling_Callback>:

	HAL_TIM_Base_Stop(&htim16);

}

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000d10:	b5b0      	push	{r4, r5, r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	0002      	movs	r2, r0
 8000d18:	1dbb      	adds	r3, r7, #6
 8000d1a:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	1dbb      	adds	r3, r7, #6
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d113      	bne.n	8000d4e <HAL_GPIO_EXTI_Falling_Callback+0x3e>
		halRet = displayButtonISR();
 8000d26:	250f      	movs	r5, #15
 8000d28:	197c      	adds	r4, r7, r5
 8000d2a:	f000 f88f 	bl	8000e4c <displayButtonISR>
 8000d2e:	0003      	movs	r3, r0
 8000d30:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000d32:	197b      	adds	r3, r7, r5
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d004      	beq.n	8000d44 <HAL_GPIO_EXTI_Falling_Callback+0x34>
			printf("Error toggling display.\n\r");
 8000d3a:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <HAL_GPIO_EXTI_Falling_Callback+0x114>)
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f004 fba5 	bl	800548c <iprintf>
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8000d42:	e06a      	b.n	8000e1a <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Display intensity toggled.\n\r");
 8000d44:	4b38      	ldr	r3, [pc, #224]	; (8000e28 <HAL_GPIO_EXTI_Falling_Callback+0x118>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f004 fba0 	bl	800548c <iprintf>
}
 8000d4c:	e065      	b.n	8000e1a <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8000d4e:	2240      	movs	r2, #64	; 0x40
 8000d50:	1dbb      	adds	r3, r7, #6
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d113      	bne.n	8000d80 <HAL_GPIO_EXTI_Falling_Callback+0x70>
		halRet = alarmEnableISR();
 8000d58:	250f      	movs	r5, #15
 8000d5a:	197c      	adds	r4, r7, r5
 8000d5c:	f000 f8b2 	bl	8000ec4 <alarmEnableISR>
 8000d60:	0003      	movs	r3, r0
 8000d62:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000d64:	197b      	adds	r3, r7, r5
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d004      	beq.n	8000d76 <HAL_GPIO_EXTI_Falling_Callback+0x66>
			printf("Error toggling user alarm.\n\r");
 8000d6c:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <HAL_GPIO_EXTI_Falling_Callback+0x11c>)
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f004 fb8c 	bl	800548c <iprintf>
}
 8000d74:	e051      	b.n	8000e1a <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm toggled.\n\r");
 8000d76:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <HAL_GPIO_EXTI_Falling_Callback+0x120>)
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f004 fb87 	bl	800548c <iprintf>
}
 8000d7e:	e04c      	b.n	8000e1a <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8000d80:	2202      	movs	r2, #2
 8000d82:	1dbb      	adds	r3, r7, #6
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d113      	bne.n	8000db2 <HAL_GPIO_EXTI_Falling_Callback+0xa2>
		halRet = alarmSetISR();
 8000d8a:	250f      	movs	r5, #15
 8000d8c:	197c      	adds	r4, r7, r5
 8000d8e:	f000 f8e7 	bl	8000f60 <alarmSetISR>
 8000d92:	0003      	movs	r3, r0
 8000d94:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000d96:	197b      	adds	r3, r7, r5
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d004      	beq.n	8000da8 <HAL_GPIO_EXTI_Falling_Callback+0x98>
			printf("Error setting user alarm.\n\r");
 8000d9e:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <HAL_GPIO_EXTI_Falling_Callback+0x124>)
 8000da0:	0018      	movs	r0, r3
 8000da2:	f004 fb73 	bl	800548c <iprintf>
}
 8000da6:	e038      	b.n	8000e1a <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm set.\n\r");
 8000da8:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <HAL_GPIO_EXTI_Falling_Callback+0x128>)
 8000daa:	0018      	movs	r0, r3
 8000dac:	f004 fb6e 	bl	800548c <iprintf>
}
 8000db0:	e033      	b.n	8000e1a <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == hourSetButtonPin) {
 8000db2:	2220      	movs	r2, #32
 8000db4:	1dbb      	adds	r3, r7, #6
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d113      	bne.n	8000de4 <HAL_GPIO_EXTI_Falling_Callback+0xd4>
		halRet = hourSetISR();
 8000dbc:	250f      	movs	r5, #15
 8000dbe:	197c      	adds	r4, r7, r5
 8000dc0:	f000 f944 	bl	800104c <hourSetISR>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000dc8:	197b      	adds	r3, r7, r5
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d004      	beq.n	8000dda <HAL_GPIO_EXTI_Falling_Callback+0xca>
			printf("Error incrementing hour.\n\r");
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f004 fb5a 	bl	800548c <iprintf>
}
 8000dd8:	e01f      	b.n	8000e1a <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Hour increment ISR success.\n\r");
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <HAL_GPIO_EXTI_Falling_Callback+0x130>)
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f004 fb55 	bl	800548c <iprintf>
}
 8000de2:	e01a      	b.n	8000e1a <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	015b      	lsls	r3, r3, #5
 8000de8:	1dba      	adds	r2, r7, #6
 8000dea:	8812      	ldrh	r2, [r2, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d113      	bne.n	8000e18 <HAL_GPIO_EXTI_Falling_Callback+0x108>
		halRet = minuteSetISR();
 8000df0:	250f      	movs	r5, #15
 8000df2:	197c      	adds	r4, r7, r5
 8000df4:	f000 f9d6 	bl	80011a4 <minuteSetISR>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000dfc:	197b      	adds	r3, r7, r5
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d004      	beq.n	8000e0e <HAL_GPIO_EXTI_Falling_Callback+0xfe>
			printf("Error incrementing minute.\n\r");
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_GPIO_EXTI_Falling_Callback+0x134>)
 8000e06:	0018      	movs	r0, r3
 8000e08:	f004 fb40 	bl	800548c <iprintf>
}
 8000e0c:	e005      	b.n	8000e1a <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Minute increment ISR success.\n\r");
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_GPIO_EXTI_Falling_Callback+0x138>)
 8000e10:	0018      	movs	r0, r3
 8000e12:	f004 fb3b 	bl	800548c <iprintf>
}
 8000e16:	e000      	b.n	8000e1a <HAL_GPIO_EXTI_Falling_Callback+0x10a>
		__NOP();
 8000e18:	46c0      	nop			; (mov r8, r8)
}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b004      	add	sp, #16
 8000e20:	bdb0      	pop	{r4, r5, r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	0800651c 	.word	0x0800651c
 8000e28:	08006538 	.word	0x08006538
 8000e2c:	08006558 	.word	0x08006558
 8000e30:	08006578 	.word	0x08006578
 8000e34:	08006590 	.word	0x08006590
 8000e38:	080065ac 	.word	0x080065ac
 8000e3c:	080065c0 	.word	0x080065c0
 8000e40:	080065dc 	.word	0x080065dc
 8000e44:	080065fc 	.word	0x080065fc
 8000e48:	0800661c 	.word	0x0800661c

08000e4c <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0

	printf("Entered display toggle ISR\n\r");
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <displayButtonISR+0x64>)
 8000e54:	0018      	movs	r0, r3
 8000e56:	f004 fb19 	bl	800548c <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 8000e60:	f7ff feaa 	bl	8000bb8 <updateAndDisplayTime>

	sevSeg_setIntensity(&htim1, sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <displayButtonISR+0x68>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	001a      	movs	r2, r3
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <displayButtonISR+0x6c>)
 8000e6c:	5c9b      	ldrb	r3, [r3, r2]
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <displayButtonISR+0x70>)
 8000e72:	0011      	movs	r1, r2
 8000e74:	0018      	movs	r0, r3
 8000e76:	f000 fc31 	bl	80016dc <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <displayButtonISR+0x68>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d909      	bls.n	8000e96 <displayButtonISR+0x4a>
		displayToggle = 0;
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <displayButtonISR+0x68>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <displayButtonISR+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f001 f987 	bl	80021a2 <HAL_GPIO_WritePin>
 8000e94:	e005      	b.n	8000ea2 <displayButtonISR+0x56>
	} else {
		displayToggle++;
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <displayButtonISR+0x68>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <displayButtonISR+0x68>)
 8000ea0:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]

}
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b002      	add	sp, #8
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	0800663c 	.word	0x0800663c
 8000eb4:	200000c4 	.word	0x200000c4
 8000eb8:	08006804 	.word	0x08006804
 8000ebc:	200000f4 	.word	0x200000f4
 8000ec0:	50000400 	.word	0x50000400

08000ec4 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

	printf("Entered alarm toggle ISR\n\r");
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <alarmEnableISR+0x84>)
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f004 fadd 	bl	800548c <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <alarmEnableISR+0x88>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2201      	movs	r2, #1
 8000ede:	4053      	eors	r3, r2
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d015      	beq.n	8000f12 <alarmEnableISR+0x4e>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_SET);			// Turn on alarm LED
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4819      	ldr	r0, [pc, #100]	; (8000f50 <alarmEnableISR+0x8c>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	0019      	movs	r1, r3
 8000ef0:	f001 f957 	bl	80021a2 <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <alarmEnableISR+0x88>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]

		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <alarmEnableISR+0x90>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	0019      	movs	r1, r3
								userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <alarmEnableISR+0x90>)
 8000f02:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000f04:	001a      	movs	r2, r3
								userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <alarmEnableISR+0x90>)
 8000f08:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000f0a:	4813      	ldr	r0, [pc, #76]	; (8000f58 <alarmEnableISR+0x94>)
 8000f0c:	f004 fabe 	bl	800548c <iprintf>
 8000f10:	e013      	b.n	8000f3a <alarmEnableISR+0x76>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <alarmEnableISR+0x88>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d00e      	beq.n	8000f38 <alarmEnableISR+0x74>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_RESET);			// Turn off alarm LED
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	480c      	ldr	r0, [pc, #48]	; (8000f50 <alarmEnableISR+0x8c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	0019      	movs	r1, r3
 8000f24:	f001 f93d 	bl	80021a2 <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <alarmEnableISR+0x88>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]

		printf("User alarm disabled.\n\r");
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <alarmEnableISR+0x98>)
 8000f30:	0018      	movs	r0, r3
 8000f32:	f004 faab 	bl	800548c <iprintf>
 8000f36:	e000      	b.n	8000f3a <alarmEnableISR+0x76>
	}
	else {
		__NOP();							//Code should never reach here.
 8000f38:	46c0      	nop			; (mov r8, r8)
	}

	return halRet;
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]

}
 8000f3e:	0018      	movs	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b002      	add	sp, #8
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	0800665c 	.word	0x0800665c
 8000f4c:	200000c5 	.word	0x200000c5
 8000f50:	50000400 	.word	0x50000400
 8000f54:	20000238 	.word	0x20000238
 8000f58:	08006678 	.word	0x08006678
 8000f5c:	08006698 	.word	0x08006698

08000f60 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0

	printf("Enter user alarm set ISR.\n\r");
 8000f66:	4b32      	ldr	r3, [pc, #200]	; (8001030 <alarmSetISR+0xd0>)
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f004 fa8f 	bl	800548c <iprintf>

	getUserAlarmTime(&hrtc, &userAlarmTime);
 8000f6e:	4a31      	ldr	r2, [pc, #196]	; (8001034 <alarmSetISR+0xd4>)
 8000f70:	4b31      	ldr	r3, [pc, #196]	; (8001038 <alarmSetISR+0xd8>)
 8000f72:	0011      	movs	r1, r2
 8000f74:	0018      	movs	r0, r3
 8000f76:	f7ff fa87 	bl	8000488 <getUserAlarmTime>
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <alarmSetISR+0xd4>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	0019      	movs	r1, r3
			userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000f80:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <alarmSetISR+0xd4>)
 8000f82:	785b      	ldrb	r3, [r3, #1]
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000f84:	001a      	movs	r2, r3
			userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000f86:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <alarmSetISR+0xd4>)
 8000f88:	789b      	ldrb	r3, [r3, #2]
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000f8a:	482c      	ldr	r0, [pc, #176]	; (800103c <alarmSetISR+0xdc>)
 8000f8c:	f004 fa7e 	bl	800548c <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim16);						// Begin timer 16 counting (to 500 ms)
 8000f96:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <alarmSetISR+0xe0>)
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f002 fe25 	bl	8003be8 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(&htim16);	// Get initial timer value to compare to
 8000f9e:	4b28      	ldr	r3, [pc, #160]	; (8001040 <alarmSetISR+0xe0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fa4:	1dbb      	adds	r3, r7, #6
 8000fa6:	801a      	strh	r2, [r3, #0]
	bool displayBlink = false;
 8000fa8:	1d7b      	adds	r3, r7, #5
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]

	do {											// while the alarm set button is not held down, blink display.

		updateAndDisplayAlarm();
 8000fae:	f7ff fe33 	bl	8000c18 <updateAndDisplayAlarm>

		if(__HAL_TIM_GET_COUNTER(&htim16) - timerVal >= (65536 / 2)) {
 8000fb2:	4b23      	ldr	r3, [pc, #140]	; (8001040 <alarmSetISR+0xe0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fb8:	1dbb      	adds	r3, r7, #6
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	1ad2      	subs	r2, r2, r3
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d313      	bcc.n	8000fee <alarmSetISR+0x8e>

			//sevSeg_setIntensity (&htim1, sevSeg_intensityDuty[displayBlink + 1]);		// Initialize to whatever duty cycle

			timerVal = __HAL_TIM_GET_COUNTER(&htim16);
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <alarmSetISR+0xe0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fcc:	1dbb      	adds	r3, r7, #6
 8000fce:	801a      	strh	r2, [r3, #0]
			displayBlink = !displayBlink;
 8000fd0:	1d7b      	adds	r3, r7, #5
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	1e5a      	subs	r2, r3, #1
 8000fd6:	4193      	sbcs	r3, r2
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4053      	eors	r3, r2
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	1d7b      	adds	r3, r7, #5
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	781a      	ldrb	r2, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	400a      	ands	r2, r1
 8000fec:	701a      	strb	r2, [r3, #0]

		}

	}while(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == GPIO_PIN_RESET);
 8000fee:	2202      	movs	r2, #2
 8000ff0:	23a0      	movs	r3, #160	; 0xa0
 8000ff2:	05db      	lsls	r3, r3, #23
 8000ff4:	0011      	movs	r1, r2
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f001 f8b6 	bl	8002168 <HAL_GPIO_ReadPin>
 8000ffc:	1e03      	subs	r3, r0, #0
 8000ffe:	d0d6      	beq.n	8000fae <alarmSetISR+0x4e>

	//sevSeg_setIntensity(&htim1, sevSeg_intensityDuty[0]);			// Turn display back to full intensity

	HAL_TIM_Base_Stop(&htim16);
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <alarmSetISR+0xe0>)
 8001002:	0018      	movs	r0, r3
 8001004:	f002 fe3c 	bl	8003c80 <HAL_TIM_Base_Stop>

	updateAndDisplayTime();
 8001008:	f7ff fdd6 	bl	8000bb8 <updateAndDisplayTime>
	printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 800100c:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <alarmSetISR+0xe4>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	0019      	movs	r1, r3
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <alarmSetISR+0xe4>)
 8001014:	785b      	ldrb	r3, [r3, #1]
 8001016:	001a      	movs	r2, r3
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <alarmSetISR+0xe4>)
 800101a:	789b      	ldrb	r3, [r3, #2]
 800101c:	480a      	ldr	r0, [pc, #40]	; (8001048 <alarmSetISR+0xe8>)
 800101e:	f004 fa35 	bl	800548c <iprintf>

	return halRet;
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	781b      	ldrb	r3, [r3, #0]

}
 8001026:	0018      	movs	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	b002      	add	sp, #8
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	080066b0 	.word	0x080066b0
 8001034:	20000238 	.word	0x20000238
 8001038:	200000c8 	.word	0x200000c8
 800103c:	080066cc 	.word	0x080066cc
 8001040:	20000140 	.word	0x20000140
 8001044:	20000220 	.word	0x20000220
 8001048:	080066f4 	.word	0x080066f4

0800104c <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0

	printf("Entered hour set ISR.\n\r");
 8001052:	4b4c      	ldr	r3, [pc, #304]	; (8001184 <hourSetISR+0x138>)
 8001054:	0018      	movs	r0, r3
 8001056:	f004 fa19 	bl	800548c <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) != GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 8001060:	2202      	movs	r2, #2
 8001062:	23a0      	movs	r3, #160	; 0xa0
 8001064:	05db      	lsls	r3, r3, #23
 8001066:	0011      	movs	r1, r2
 8001068:	0018      	movs	r0, r3
 800106a:	f001 f87d 	bl	8002168 <HAL_GPIO_ReadPin>
 800106e:	0003      	movs	r3, r0
 8001070:	2b01      	cmp	r3, #1
 8001072:	d042      	beq.n	80010fa <hourSetISR+0xae>

		getUserAlarmTime(&hrtc, &userAlarmTime);
 8001074:	4a44      	ldr	r2, [pc, #272]	; (8001188 <hourSetISR+0x13c>)
 8001076:	4b45      	ldr	r3, [pc, #276]	; (800118c <hourSetISR+0x140>)
 8001078:	0011      	movs	r1, r2
 800107a:	0018      	movs	r0, r3
 800107c:	f7ff fa04 	bl	8000488 <getUserAlarmTime>

		if(userAlarmTime.Hours >= 12) {
 8001080:	4b41      	ldr	r3, [pc, #260]	; (8001188 <hourSetISR+0x13c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b0b      	cmp	r3, #11
 8001086:	d90e      	bls.n	80010a6 <hourSetISR+0x5a>
			userAlarmTime.Hours = 1;
 8001088:	4b3f      	ldr	r3, [pc, #252]	; (8001188 <hourSetISR+0x13c>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800108e:	4b3e      	ldr	r3, [pc, #248]	; (8001188 <hourSetISR+0x13c>)
 8001090:	78db      	ldrb	r3, [r3, #3]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d103      	bne.n	800109e <hourSetISR+0x52>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001096:	4b3c      	ldr	r3, [pc, #240]	; (8001188 <hourSetISR+0x13c>)
 8001098:	2201      	movs	r2, #1
 800109a:	70da      	strb	r2, [r3, #3]
 800109c:	e00f      	b.n	80010be <hourSetISR+0x72>
			} else {
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800109e:	4b3a      	ldr	r3, [pc, #232]	; (8001188 <hourSetISR+0x13c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	70da      	strb	r2, [r3, #3]
 80010a4:	e00b      	b.n	80010be <hourSetISR+0x72>
			}
		}
		else if(userAlarmTime.Hours < 12) {
 80010a6:	4b38      	ldr	r3, [pc, #224]	; (8001188 <hourSetISR+0x13c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b0b      	cmp	r3, #11
 80010ac:	d806      	bhi.n	80010bc <hourSetISR+0x70>
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 80010ae:	4b36      	ldr	r3, [pc, #216]	; (8001188 <hourSetISR+0x13c>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b34      	ldr	r3, [pc, #208]	; (8001188 <hourSetISR+0x13c>)
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	e000      	b.n	80010be <hourSetISR+0x72>
		}
		else {
			__NOP();
 80010bc:	46c0      	nop			; (mov r8, r8)
		}

		userAlarmObj.AlarmTime = userAlarmTime;
 80010be:	4b34      	ldr	r3, [pc, #208]	; (8001190 <hourSetISR+0x144>)
 80010c0:	4a31      	ldr	r2, [pc, #196]	; (8001188 <hourSetISR+0x13c>)
 80010c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80010c4:	c313      	stmia	r3!, {r0, r1, r4}
 80010c6:	ca03      	ldmia	r2!, {r0, r1}
 80010c8:	c303      	stmia	r3!, {r0, r1}

		HAL_RTC_SetAlarm_IT(&hrtc, &userAlarmObj, RTCTimeFormat);
 80010ca:	4931      	ldr	r1, [pc, #196]	; (8001190 <hourSetISR+0x144>)
 80010cc:	4b2f      	ldr	r3, [pc, #188]	; (800118c <hourSetISR+0x140>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	0018      	movs	r0, r3
 80010d2:	f002 f9f1 	bl	80034b8 <HAL_RTC_SetAlarm_IT>
		getUserAlarmTime(&hrtc, &userAlarmTime);
 80010d6:	4a2c      	ldr	r2, [pc, #176]	; (8001188 <hourSetISR+0x13c>)
 80010d8:	4b2c      	ldr	r3, [pc, #176]	; (800118c <hourSetISR+0x140>)
 80010da:	0011      	movs	r1, r2
 80010dc:	0018      	movs	r0, r3
 80010de:	f7ff f9d3 	bl	8000488 <getUserAlarmTime>

		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 80010e2:	4b29      	ldr	r3, [pc, #164]	; (8001188 <hourSetISR+0x13c>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	0019      	movs	r1, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 80010e8:	4b27      	ldr	r3, [pc, #156]	; (8001188 <hourSetISR+0x13c>)
 80010ea:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 80010ec:	001a      	movs	r2, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <hourSetISR+0x13c>)
 80010f0:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 80010f2:	4828      	ldr	r0, [pc, #160]	; (8001194 <hourSetISR+0x148>)
 80010f4:	f004 f9ca 	bl	800548c <iprintf>
 80010f8:	e03d      	b.n	8001176 <hourSetISR+0x12a>

	}
	else {									// Otherwise, change current time hour.

		getRTCTime(&hrtc, &currTime, &currDate);
 80010fa:	4a27      	ldr	r2, [pc, #156]	; (8001198 <hourSetISR+0x14c>)
 80010fc:	4927      	ldr	r1, [pc, #156]	; (800119c <hourSetISR+0x150>)
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <hourSetISR+0x140>)
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff f9ab 	bl	800045c <getRTCTime>
		if(currTime.Hours >= 12) {
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <hourSetISR+0x150>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b0b      	cmp	r3, #11
 800110c:	d90e      	bls.n	800112c <hourSetISR+0xe0>
			currTime.Hours = 1;
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <hourSetISR+0x150>)
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
			if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001114:	4b21      	ldr	r3, [pc, #132]	; (800119c <hourSetISR+0x150>)
 8001116:	78db      	ldrb	r3, [r3, #3]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d103      	bne.n	8001124 <hourSetISR+0xd8>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <hourSetISR+0x150>)
 800111e:	2201      	movs	r2, #1
 8001120:	70da      	strb	r2, [r3, #3]
 8001122:	e00f      	b.n	8001144 <hourSetISR+0xf8>
			} else {
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <hourSetISR+0x150>)
 8001126:	2200      	movs	r2, #0
 8001128:	70da      	strb	r2, [r3, #3]
 800112a:	e00b      	b.n	8001144 <hourSetISR+0xf8>
			}
		}
		else if(currTime.Hours < 12) {
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <hourSetISR+0x150>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b0b      	cmp	r3, #11
 8001132:	d806      	bhi.n	8001142 <hourSetISR+0xf6>
			currTime.Hours = currTime.Hours + 1;
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <hourSetISR+0x150>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	b2da      	uxtb	r2, r3
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <hourSetISR+0x150>)
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e000      	b.n	8001144 <hourSetISR+0xf8>
		}
		else {
			__NOP();
 8001142:	46c0      	nop			; (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001144:	4915      	ldr	r1, [pc, #84]	; (800119c <hourSetISR+0x150>)
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <hourSetISR+0x140>)
 8001148:	2200      	movs	r2, #0
 800114a:	0018      	movs	r0, r3
 800114c:	f001 ffd0 	bl	80030f0 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8001150:	f7ff fd32 	bl	8000bb8 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001154:	4a10      	ldr	r2, [pc, #64]	; (8001198 <hourSetISR+0x14c>)
 8001156:	4911      	ldr	r1, [pc, #68]	; (800119c <hourSetISR+0x150>)
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <hourSetISR+0x140>)
 800115a:	0018      	movs	r0, r3
 800115c:	f7ff f97e 	bl	800045c <getRTCTime>

		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <hourSetISR+0x150>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <hourSetISR+0x150>)
 8001168:	785b      	ldrb	r3, [r3, #1]
		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 800116a:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <hourSetISR+0x150>)
 800116e:	789b      	ldrb	r3, [r3, #2]
		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001170:	480b      	ldr	r0, [pc, #44]	; (80011a0 <hourSetISR+0x154>)
 8001172:	f004 f98b 	bl	800548c <iprintf>
	}

	return halRet;
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	781b      	ldrb	r3, [r3, #0]
}
 800117a:	0018      	movs	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	b003      	add	sp, #12
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	08006718 	.word	0x08006718
 8001188:	20000238 	.word	0x20000238
 800118c:	200000c8 	.word	0x200000c8
 8001190:	2000024c 	.word	0x2000024c
 8001194:	08006730 	.word	0x08006730
 8001198:	20000234 	.word	0x20000234
 800119c:	20000220 	.word	0x20000220
 80011a0:	0800675c 	.word	0x0800675c

080011a4 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0

	printf("Entered minute set ISR.\n\r");
 80011aa:	4b63      	ldr	r3, [pc, #396]	; (8001338 <minuteSetISR+0x194>)
 80011ac:	0018      	movs	r0, r3
 80011ae:	f004 f96d 	bl	800548c <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == !GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 80011b8:	2202      	movs	r2, #2
 80011ba:	23a0      	movs	r3, #160	; 0xa0
 80011bc:	05db      	lsls	r3, r3, #23
 80011be:	0011      	movs	r1, r2
 80011c0:	0018      	movs	r0, r3
 80011c2:	f000 ffd1 	bl	8002168 <HAL_GPIO_ReadPin>
 80011c6:	1e03      	subs	r3, r0, #0
 80011c8:	d157      	bne.n	800127a <minuteSetISR+0xd6>

		getUserAlarmTime(&hrtc, &userAlarmTime);
 80011ca:	4a5c      	ldr	r2, [pc, #368]	; (800133c <minuteSetISR+0x198>)
 80011cc:	4b5c      	ldr	r3, [pc, #368]	; (8001340 <minuteSetISR+0x19c>)
 80011ce:	0011      	movs	r1, r2
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff f959 	bl	8000488 <getUserAlarmTime>

		if(userAlarmTime.Minutes >= 59) {
 80011d6:	4b59      	ldr	r3, [pc, #356]	; (800133c <minuteSetISR+0x198>)
 80011d8:	785b      	ldrb	r3, [r3, #1]
 80011da:	2b3a      	cmp	r3, #58	; 0x3a
 80011dc:	d929      	bls.n	8001232 <minuteSetISR+0x8e>
			userAlarmTime.Minutes = 0;
 80011de:	4b57      	ldr	r3, [pc, #348]	; (800133c <minuteSetISR+0x198>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	705a      	strb	r2, [r3, #1]
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 80011e4:	4b55      	ldr	r3, [pc, #340]	; (800133c <minuteSetISR+0x198>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b53      	ldr	r3, [pc, #332]	; (800133c <minuteSetISR+0x198>)
 80011ee:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.Hours > 12) {
 80011f0:	4b52      	ldr	r3, [pc, #328]	; (800133c <minuteSetISR+0x198>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b0c      	cmp	r3, #12
 80011f6:	d902      	bls.n	80011fe <minuteSetISR+0x5a>
				userAlarmTime.Hours = 1;
 80011f8:	4b50      	ldr	r3, [pc, #320]	; (800133c <minuteSetISR+0x198>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
			}
			if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80011fe:	4b4f      	ldr	r3, [pc, #316]	; (800133c <minuteSetISR+0x198>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b0c      	cmp	r3, #12
 8001204:	d107      	bne.n	8001216 <minuteSetISR+0x72>
 8001206:	4b4d      	ldr	r3, [pc, #308]	; (800133c <minuteSetISR+0x198>)
 8001208:	78db      	ldrb	r3, [r3, #3]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d103      	bne.n	8001216 <minuteSetISR+0x72>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800120e:	4b4b      	ldr	r3, [pc, #300]	; (800133c <minuteSetISR+0x198>)
 8001210:	2201      	movs	r2, #1
 8001212:	70da      	strb	r2, [r3, #3]
 8001214:	e019      	b.n	800124a <minuteSetISR+0xa6>
			} else if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 8001216:	4b49      	ldr	r3, [pc, #292]	; (800133c <minuteSetISR+0x198>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b0c      	cmp	r3, #12
 800121c:	d107      	bne.n	800122e <minuteSetISR+0x8a>
 800121e:	4b47      	ldr	r3, [pc, #284]	; (800133c <minuteSetISR+0x198>)
 8001220:	78db      	ldrb	r3, [r3, #3]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d103      	bne.n	800122e <minuteSetISR+0x8a>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001226:	4b45      	ldr	r3, [pc, #276]	; (800133c <minuteSetISR+0x198>)
 8001228:	2200      	movs	r2, #0
 800122a:	70da      	strb	r2, [r3, #3]
 800122c:	e00d      	b.n	800124a <minuteSetISR+0xa6>
			}
			else {
				__NOP();
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	e00b      	b.n	800124a <minuteSetISR+0xa6>
			}
		}
		else if(userAlarmTime.Minutes < 59) {
 8001232:	4b42      	ldr	r3, [pc, #264]	; (800133c <minuteSetISR+0x198>)
 8001234:	785b      	ldrb	r3, [r3, #1]
 8001236:	2b3a      	cmp	r3, #58	; 0x3a
 8001238:	d806      	bhi.n	8001248 <minuteSetISR+0xa4>
			userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 800123a:	4b40      	ldr	r3, [pc, #256]	; (800133c <minuteSetISR+0x198>)
 800123c:	785b      	ldrb	r3, [r3, #1]
 800123e:	3301      	adds	r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b3e      	ldr	r3, [pc, #248]	; (800133c <minuteSetISR+0x198>)
 8001244:	705a      	strb	r2, [r3, #1]
 8001246:	e000      	b.n	800124a <minuteSetISR+0xa6>
		}
		else {
			__NOP();
 8001248:	46c0      	nop			; (mov r8, r8)
		}

		userAlarmObj.AlarmTime = userAlarmTime;
 800124a:	4b3e      	ldr	r3, [pc, #248]	; (8001344 <minuteSetISR+0x1a0>)
 800124c:	4a3b      	ldr	r2, [pc, #236]	; (800133c <minuteSetISR+0x198>)
 800124e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001250:	c313      	stmia	r3!, {r0, r1, r4}
 8001252:	ca03      	ldmia	r2!, {r0, r1}
 8001254:	c303      	stmia	r3!, {r0, r1}

		HAL_RTC_SetAlarm_IT(&hrtc, &userAlarmObj, RTCTimeFormat);
 8001256:	493b      	ldr	r1, [pc, #236]	; (8001344 <minuteSetISR+0x1a0>)
 8001258:	4b39      	ldr	r3, [pc, #228]	; (8001340 <minuteSetISR+0x19c>)
 800125a:	2200      	movs	r2, #0
 800125c:	0018      	movs	r0, r3
 800125e:	f002 f92b 	bl	80034b8 <HAL_RTC_SetAlarm_IT>

		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmObj.AlarmTime.Hours,
 8001262:	4b38      	ldr	r3, [pc, #224]	; (8001344 <minuteSetISR+0x1a0>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	0019      	movs	r1, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <minuteSetISR+0x1a0>)
 800126a:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmObj.AlarmTime.Hours,
 800126c:	001a      	movs	r2, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 800126e:	4b35      	ldr	r3, [pc, #212]	; (8001344 <minuteSetISR+0x1a0>)
 8001270:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmObj.AlarmTime.Hours,
 8001272:	4835      	ldr	r0, [pc, #212]	; (8001348 <minuteSetISR+0x1a4>)
 8001274:	f004 f90a 	bl	800548c <iprintf>
 8001278:	e058      	b.n	800132c <minuteSetISR+0x188>

	}
	else {									// Otherwise, change current time hour.

		getRTCTime(&hrtc, &currTime, &currDate);
 800127a:	4a34      	ldr	r2, [pc, #208]	; (800134c <minuteSetISR+0x1a8>)
 800127c:	4934      	ldr	r1, [pc, #208]	; (8001350 <minuteSetISR+0x1ac>)
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <minuteSetISR+0x19c>)
 8001280:	0018      	movs	r0, r3
 8001282:	f7ff f8eb 	bl	800045c <getRTCTime>

		if(currTime.Minutes >= 59) {
 8001286:	4b32      	ldr	r3, [pc, #200]	; (8001350 <minuteSetISR+0x1ac>)
 8001288:	785b      	ldrb	r3, [r3, #1]
 800128a:	2b3a      	cmp	r3, #58	; 0x3a
 800128c:	d929      	bls.n	80012e2 <minuteSetISR+0x13e>
			currTime.Minutes = 0;
 800128e:	4b30      	ldr	r3, [pc, #192]	; (8001350 <minuteSetISR+0x1ac>)
 8001290:	2200      	movs	r2, #0
 8001292:	705a      	strb	r2, [r3, #1]
			currTime.Hours = currTime.Hours + 1;
 8001294:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <minuteSetISR+0x1ac>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <minuteSetISR+0x1ac>)
 800129e:	701a      	strb	r2, [r3, #0]
			if(currTime.Hours > 12) {
 80012a0:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <minuteSetISR+0x1ac>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b0c      	cmp	r3, #12
 80012a6:	d902      	bls.n	80012ae <minuteSetISR+0x10a>
				currTime.Hours = 1;
 80012a8:	4b29      	ldr	r3, [pc, #164]	; (8001350 <minuteSetISR+0x1ac>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
			}
			if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80012ae:	4b28      	ldr	r3, [pc, #160]	; (8001350 <minuteSetISR+0x1ac>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b0c      	cmp	r3, #12
 80012b4:	d107      	bne.n	80012c6 <minuteSetISR+0x122>
 80012b6:	4b26      	ldr	r3, [pc, #152]	; (8001350 <minuteSetISR+0x1ac>)
 80012b8:	78db      	ldrb	r3, [r3, #3]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <minuteSetISR+0x122>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80012be:	4b24      	ldr	r3, [pc, #144]	; (8001350 <minuteSetISR+0x1ac>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	70da      	strb	r2, [r3, #3]
 80012c4:	e019      	b.n	80012fa <minuteSetISR+0x156>
			} else if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 80012c6:	4b22      	ldr	r3, [pc, #136]	; (8001350 <minuteSetISR+0x1ac>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b0c      	cmp	r3, #12
 80012cc:	d107      	bne.n	80012de <minuteSetISR+0x13a>
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <minuteSetISR+0x1ac>)
 80012d0:	78db      	ldrb	r3, [r3, #3]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d103      	bne.n	80012de <minuteSetISR+0x13a>
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80012d6:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <minuteSetISR+0x1ac>)
 80012d8:	2200      	movs	r2, #0
 80012da:	70da      	strb	r2, [r3, #3]
 80012dc:	e00d      	b.n	80012fa <minuteSetISR+0x156>
			}
			else {
				__NOP();
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	e00b      	b.n	80012fa <minuteSetISR+0x156>
			}
		}
		else if(currTime.Minutes < 59) {
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <minuteSetISR+0x1ac>)
 80012e4:	785b      	ldrb	r3, [r3, #1]
 80012e6:	2b3a      	cmp	r3, #58	; 0x3a
 80012e8:	d806      	bhi.n	80012f8 <minuteSetISR+0x154>
			currTime.Minutes = currTime.Minutes + 1;
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <minuteSetISR+0x1ac>)
 80012ec:	785b      	ldrb	r3, [r3, #1]
 80012ee:	3301      	adds	r3, #1
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <minuteSetISR+0x1ac>)
 80012f4:	705a      	strb	r2, [r3, #1]
 80012f6:	e000      	b.n	80012fa <minuteSetISR+0x156>
		}
		else {
			__NOP();
 80012f8:	46c0      	nop			; (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80012fa:	4915      	ldr	r1, [pc, #84]	; (8001350 <minuteSetISR+0x1ac>)
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <minuteSetISR+0x19c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	0018      	movs	r0, r3
 8001302:	f001 fef5 	bl	80030f0 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8001306:	f7ff fc57 	bl	8000bb8 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 800130a:	4a10      	ldr	r2, [pc, #64]	; (800134c <minuteSetISR+0x1a8>)
 800130c:	4910      	ldr	r1, [pc, #64]	; (8001350 <minuteSetISR+0x1ac>)
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <minuteSetISR+0x19c>)
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff f8a3 	bl	800045c <getRTCTime>

		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <minuteSetISR+0x1ac>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <minuteSetISR+0x1ac>)
 800131e:	785b      	ldrb	r3, [r3, #1]
		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001320:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <minuteSetISR+0x1ac>)
 8001324:	789b      	ldrb	r3, [r3, #2]
		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001326:	480b      	ldr	r0, [pc, #44]	; (8001354 <minuteSetISR+0x1b0>)
 8001328:	f004 f8b0 	bl	800548c <iprintf>
	}

	return halRet;
 800132c:	1dfb      	adds	r3, r7, #7
 800132e:	781b      	ldrb	r3, [r3, #0]
}
 8001330:	0018      	movs	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	b003      	add	sp, #12
 8001336:	bd90      	pop	{r4, r7, pc}
 8001338:	0800678c 	.word	0x0800678c
 800133c:	20000238 	.word	0x20000238
 8001340:	200000c8 	.word	0x200000c8
 8001344:	2000024c 	.word	0x2000024c
 8001348:	080067a8 	.word	0x080067a8
 800134c:	20000234 	.word	0x20000234
 8001350:	20000220 	.word	0x20000220
 8001354:	080067d4 	.word	0x080067d4

08001358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800135c:	b672      	cpsid	i
}
 800135e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001360:	e7fe      	b.n	8001360 <Error_Handler+0x8>
	...

08001364 <sevSeg_Init>:
GPIO_PinState GPIOPinSet[2] = {GPIO_PIN_RESET, GPIO_PIN_SET};


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM) {
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	0005      	movs	r5, r0
 800136c:	000c      	movs	r4, r1
 800136e:	0010      	movs	r0, r2
 8001370:	0019      	movs	r1, r3
 8001372:	1dbb      	adds	r3, r7, #6
 8001374:	1c2a      	adds	r2, r5, #0
 8001376:	801a      	strh	r2, [r3, #0]
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	1c22      	adds	r2, r4, #0
 800137c:	801a      	strh	r2, [r3, #0]
 800137e:	1cbb      	adds	r3, r7, #2
 8001380:	1c02      	adds	r2, r0, #0
 8001382:	801a      	strh	r2, [r3, #0]
 8001384:	003b      	movs	r3, r7
 8001386:	1c0a      	adds	r2, r1, #0
 8001388:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 800138a:	4b7a      	ldr	r3, [pc, #488]	; (8001574 <sevSeg_Init+0x210>)
 800138c:	1dba      	adds	r2, r7, #6
 800138e:	8812      	ldrh	r2, [r2, #0]
 8001390:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8001392:	4b79      	ldr	r3, [pc, #484]	; (8001578 <sevSeg_Init+0x214>)
 8001394:	1d3a      	adds	r2, r7, #4
 8001396:	8812      	ldrh	r2, [r2, #0]
 8001398:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 800139a:	4b78      	ldr	r3, [pc, #480]	; (800157c <sevSeg_Init+0x218>)
 800139c:	1cba      	adds	r2, r7, #2
 800139e:	8812      	ldrh	r2, [r2, #0]
 80013a0:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 80013a2:	4b77      	ldr	r3, [pc, #476]	; (8001580 <sevSeg_Init+0x21c>)
 80013a4:	003a      	movs	r2, r7
 80013a6:	8812      	ldrh	r2, [r2, #0]
 80013a8:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 80013aa:	4a76      	ldr	r2, [pc, #472]	; (8001584 <sevSeg_Init+0x220>)
 80013ac:	2330      	movs	r3, #48	; 0x30
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	8013      	strh	r3, [r2, #0]

	for(int i = 0; i < 5; i++) {
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	e00b      	b.n	80013d2 <sevSeg_Init+0x6e>
		portArray[i] = GPIOPortArray[i];
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013c0:	18d3      	adds	r3, r2, r3
 80013c2:	6819      	ldr	r1, [r3, #0]
 80013c4:	4b70      	ldr	r3, [pc, #448]	; (8001588 <sevSeg_Init+0x224>)
 80013c6:	69fa      	ldr	r2, [r7, #28]
 80013c8:	0092      	lsls	r2, r2, #2
 80013ca:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	3301      	adds	r3, #1
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	ddf0      	ble.n	80013ba <sevSeg_Init+0x56>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 80013d8:	4b6b      	ldr	r3, [pc, #428]	; (8001588 <sevSeg_Init+0x224>)
 80013da:	6918      	ldr	r0, [r3, #16]
 80013dc:	4b69      	ldr	r3, [pc, #420]	; (8001584 <sevSeg_Init+0x220>)
 80013de:	8819      	ldrh	r1, [r3, #0]
 80013e0:	4b6a      	ldr	r3, [pc, #424]	; (800158c <sevSeg_Init+0x228>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	001a      	movs	r2, r3
 80013e6:	f000 fedc 	bl	80021a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 80013ea:	4b67      	ldr	r3, [pc, #412]	; (8001588 <sevSeg_Init+0x224>)
 80013ec:	6918      	ldr	r0, [r3, #16]
 80013ee:	4b65      	ldr	r3, [pc, #404]	; (8001584 <sevSeg_Init+0x220>)
 80013f0:	8819      	ldrh	r1, [r3, #0]
 80013f2:	4b66      	ldr	r3, [pc, #408]	; (800158c <sevSeg_Init+0x228>)
 80013f4:	785b      	ldrb	r3, [r3, #1]
 80013f6:	001a      	movs	r2, r3
 80013f8:	f000 fed3 	bl	80021a2 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80013fc:	4b62      	ldr	r3, [pc, #392]	; (8001588 <sevSeg_Init+0x224>)
 80013fe:	6898      	ldr	r0, [r3, #8]
 8001400:	4b5e      	ldr	r3, [pc, #376]	; (800157c <sevSeg_Init+0x218>)
 8001402:	8819      	ldrh	r1, [r3, #0]
 8001404:	4b61      	ldr	r3, [pc, #388]	; (800158c <sevSeg_Init+0x228>)
 8001406:	785b      	ldrb	r3, [r3, #1]
 8001408:	001a      	movs	r2, r3
 800140a:	f000 feca 	bl	80021a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800140e:	4b5e      	ldr	r3, [pc, #376]	; (8001588 <sevSeg_Init+0x224>)
 8001410:	6898      	ldr	r0, [r3, #8]
 8001412:	4b5a      	ldr	r3, [pc, #360]	; (800157c <sevSeg_Init+0x218>)
 8001414:	8819      	ldrh	r1, [r3, #0]
 8001416:	4b5d      	ldr	r3, [pc, #372]	; (800158c <sevSeg_Init+0x228>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	001a      	movs	r2, r3
 800141c:	f000 fec1 	bl	80021a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8001420:	4b59      	ldr	r3, [pc, #356]	; (8001588 <sevSeg_Init+0x224>)
 8001422:	68d8      	ldr	r0, [r3, #12]
 8001424:	4b56      	ldr	r3, [pc, #344]	; (8001580 <sevSeg_Init+0x21c>)
 8001426:	8819      	ldrh	r1, [r3, #0]
 8001428:	4b58      	ldr	r3, [pc, #352]	; (800158c <sevSeg_Init+0x228>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	001a      	movs	r2, r3
 800142e:	f000 feb8 	bl	80021a2 <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(htim_PWM, 90);
 8001432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001434:	215a      	movs	r1, #90	; 0x5a
 8001436:	0018      	movs	r0, r3
 8001438:	f000 f950 	bl	80016dc <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 800143c:	2308      	movs	r3, #8
 800143e:	18fb      	adds	r3, r7, r3
 8001440:	4a53      	ldr	r2, [pc, #332]	; (8001590 <sevSeg_Init+0x22c>)
 8001442:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	e038      	b.n	80014bc <sevSeg_Init+0x158>

		sendByte = hofSymb[i];
 800144a:	231b      	movs	r3, #27
 800144c:	18fb      	adds	r3, r7, r3
 800144e:	2208      	movs	r2, #8
 8001450:	18b9      	adds	r1, r7, r2
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	188a      	adds	r2, r1, r2
 8001456:	7812      	ldrb	r2, [r2, #0]
 8001458:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	e027      	b.n	80014b0 <sevSeg_Init+0x14c>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001460:	4b49      	ldr	r3, [pc, #292]	; (8001588 <sevSeg_Init+0x224>)
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	4b43      	ldr	r3, [pc, #268]	; (8001574 <sevSeg_Init+0x210>)
 8001466:	8819      	ldrh	r1, [r3, #0]
 8001468:	241b      	movs	r4, #27
 800146a:	193b      	adds	r3, r7, r4
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2201      	movs	r2, #1
 8001470:	4013      	ands	r3, r2
 8001472:	4a46      	ldr	r2, [pc, #280]	; (800158c <sevSeg_Init+0x228>)
 8001474:	5cd3      	ldrb	r3, [r2, r3]
 8001476:	001a      	movs	r2, r3
 8001478:	f000 fe93 	bl	80021a2 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 800147c:	4b42      	ldr	r3, [pc, #264]	; (8001588 <sevSeg_Init+0x224>)
 800147e:	6858      	ldr	r0, [r3, #4]
 8001480:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <sevSeg_Init+0x214>)
 8001482:	8819      	ldrh	r1, [r3, #0]
 8001484:	4b41      	ldr	r3, [pc, #260]	; (800158c <sevSeg_Init+0x228>)
 8001486:	785b      	ldrb	r3, [r3, #1]
 8001488:	001a      	movs	r2, r3
 800148a:	f000 fe8a 	bl	80021a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 800148e:	4b3e      	ldr	r3, [pc, #248]	; (8001588 <sevSeg_Init+0x224>)
 8001490:	6858      	ldr	r0, [r3, #4]
 8001492:	4b39      	ldr	r3, [pc, #228]	; (8001578 <sevSeg_Init+0x214>)
 8001494:	8819      	ldrh	r1, [r3, #0]
 8001496:	4b3d      	ldr	r3, [pc, #244]	; (800158c <sevSeg_Init+0x228>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	001a      	movs	r2, r3
 800149c:	f000 fe81 	bl	80021a2 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 80014a0:	193b      	adds	r3, r7, r4
 80014a2:	193a      	adds	r2, r7, r4
 80014a4:	7812      	ldrb	r2, [r2, #0]
 80014a6:	0852      	lsrs	r2, r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	3301      	adds	r3, #1
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2b07      	cmp	r3, #7
 80014b4:	ddd4      	ble.n	8001460 <sevSeg_Init+0xfc>
	for(int i = 0; i <= 3; i++) {
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3301      	adds	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	ddc3      	ble.n	800144a <sevSeg_Init+0xe6>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80014c2:	4b31      	ldr	r3, [pc, #196]	; (8001588 <sevSeg_Init+0x224>)
 80014c4:	6898      	ldr	r0, [r3, #8]
 80014c6:	4b2d      	ldr	r3, [pc, #180]	; (800157c <sevSeg_Init+0x218>)
 80014c8:	8819      	ldrh	r1, [r3, #0]
 80014ca:	4b30      	ldr	r3, [pc, #192]	; (800158c <sevSeg_Init+0x228>)
 80014cc:	785b      	ldrb	r3, [r3, #1]
 80014ce:	001a      	movs	r2, r3
 80014d0:	f000 fe67 	bl	80021a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80014d4:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <sevSeg_Init+0x224>)
 80014d6:	6898      	ldr	r0, [r3, #8]
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <sevSeg_Init+0x218>)
 80014da:	8819      	ldrh	r1, [r3, #0]
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <sevSeg_Init+0x228>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	001a      	movs	r2, r3
 80014e2:	f000 fe5e 	bl	80021a2 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 80014e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014e8:	0018      	movs	r0, r3
 80014ea:	f002 fbc9 	bl	8003c80 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 80014ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f0:	0018      	movs	r0, r3
 80014f2:	f002 fb79 	bl	8003be8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 80014f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	60fb      	str	r3, [r7, #12]
	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 2)){ timerVal = __HAL_TIM_GET_COUNTER(htim); }
 80014fe:	e003      	b.n	8001508 <sevSeg_Init+0x1a4>
 8001500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1ad2      	subs	r2, r2, r3
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	429a      	cmp	r2, r3
 8001518:	d3f2      	bcc.n	8001500 <sevSeg_Init+0x19c>

	HAL_TIM_Base_Stop(htim);
 800151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151c:	0018      	movs	r0, r3
 800151e:	f002 fbaf 	bl	8003c80 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001522:	4b19      	ldr	r3, [pc, #100]	; (8001588 <sevSeg_Init+0x224>)
 8001524:	6918      	ldr	r0, [r3, #16]
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <sevSeg_Init+0x220>)
 8001528:	8819      	ldrh	r1, [r3, #0]
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <sevSeg_Init+0x228>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	001a      	movs	r2, r3
 8001530:	f000 fe37 	bl	80021a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <sevSeg_Init+0x224>)
 8001536:	6918      	ldr	r0, [r3, #16]
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <sevSeg_Init+0x220>)
 800153a:	8819      	ldrh	r1, [r3, #0]
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <sevSeg_Init+0x228>)
 800153e:	785b      	ldrb	r3, [r3, #1]
 8001540:	001a      	movs	r2, r3
 8001542:	f000 fe2e 	bl	80021a2 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <sevSeg_Init+0x224>)
 8001548:	6898      	ldr	r0, [r3, #8]
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <sevSeg_Init+0x218>)
 800154c:	8819      	ldrh	r1, [r3, #0]
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <sevSeg_Init+0x228>)
 8001550:	785b      	ldrb	r3, [r3, #1]
 8001552:	001a      	movs	r2, r3
 8001554:	f000 fe25 	bl	80021a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <sevSeg_Init+0x224>)
 800155a:	6898      	ldr	r0, [r3, #8]
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <sevSeg_Init+0x218>)
 800155e:	8819      	ldrh	r1, [r3, #0]
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <sevSeg_Init+0x228>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	001a      	movs	r2, r3
 8001566:	f000 fe1c 	bl	80021a2 <HAL_GPIO_WritePin>

}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b008      	add	sp, #32
 8001570:	bdb0      	pop	{r4, r5, r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	20000274 	.word	0x20000274
 8001578:	20000276 	.word	0x20000276
 800157c:	20000278 	.word	0x20000278
 8001580:	2000027a 	.word	0x2000027a
 8001584:	2000027c 	.word	0x2000027c
 8001588:	20000020 	.word	0x20000020
 800158c:	20000034 	.word	0x20000034
 8001590:	471d3700 	.word	0x471d3700

08001594 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	210a      	movs	r1, #10
 80015a2:	0018      	movs	r0, r3
 80015a4:	f7fe fdb8 	bl	8000118 <__udivsi3>
 80015a8:	0003      	movs	r3, r0
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	2408      	movs	r4, #8
 80015ae:	193b      	adds	r3, r7, r4
 80015b0:	701a      	strb	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	210a      	movs	r1, #10
 80015b8:	0018      	movs	r0, r3
 80015ba:	f7fe fe33 	bl	8000224 <__aeabi_uidivmod>
 80015be:	000b      	movs	r3, r1
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	193b      	adds	r3, r7, r4
 80015c4:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80015ca:	210a      	movs	r1, #10
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7fe fda3 	bl	8000118 <__udivsi3>
 80015d2:	0003      	movs	r3, r0
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	193b      	adds	r3, r7, r4
 80015d8:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80015de:	210a      	movs	r1, #10
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7fe fe1f 	bl	8000224 <__aeabi_uidivmod>
 80015e6:	000b      	movs	r3, r1
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	193b      	adds	r3, r7, r4
 80015ec:	70da      	strb	r2, [r3, #3]

	//uint8_t sendTime[4] = {8, 8, 8, 8};

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i < 4; i++) {
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	e04b      	b.n	800168c <sevSeg_updateDigits+0xf8>

		sendByte = dispDigits[sendTime[i]];
 80015f4:	2308      	movs	r3, #8
 80015f6:	18fa      	adds	r2, r7, r3
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	18d3      	adds	r3, r2, r3
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	0019      	movs	r1, r3
 8001600:	2417      	movs	r4, #23
 8001602:	193b      	adds	r3, r7, r4
 8001604:	4a2e      	ldr	r2, [pc, #184]	; (80016c0 <sevSeg_updateDigits+0x12c>)
 8001606:	5c52      	ldrb	r2, [r2, r1]
 8001608:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10c      	bne.n	800162a <sevSeg_updateDigits+0x96>
			sendByte = dig3Seg[updateTime->Hours / 10];
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	210a      	movs	r1, #10
 8001616:	0018      	movs	r0, r3
 8001618:	f7fe fd7e 	bl	8000118 <__udivsi3>
 800161c:	0003      	movs	r3, r0
 800161e:	b2db      	uxtb	r3, r3
 8001620:	0019      	movs	r1, r3
 8001622:	193b      	adds	r3, r7, r4
 8001624:	4a27      	ldr	r2, [pc, #156]	; (80016c4 <sevSeg_updateDigits+0x130>)
 8001626:	5c52      	ldrb	r2, [r2, r1]
 8001628:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	e027      	b.n	8001680 <sevSeg_updateDigits+0xec>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001630:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <sevSeg_updateDigits+0x134>)
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	4b25      	ldr	r3, [pc, #148]	; (80016cc <sevSeg_updateDigits+0x138>)
 8001636:	8819      	ldrh	r1, [r3, #0]
 8001638:	2417      	movs	r4, #23
 800163a:	193b      	adds	r3, r7, r4
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2201      	movs	r2, #1
 8001640:	4013      	ands	r3, r2
 8001642:	4a23      	ldr	r2, [pc, #140]	; (80016d0 <sevSeg_updateDigits+0x13c>)
 8001644:	5cd3      	ldrb	r3, [r2, r3]
 8001646:	001a      	movs	r2, r3
 8001648:	f000 fdab 	bl	80021a2 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 800164c:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <sevSeg_updateDigits+0x134>)
 800164e:	6858      	ldr	r0, [r3, #4]
 8001650:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <sevSeg_updateDigits+0x140>)
 8001652:	8819      	ldrh	r1, [r3, #0]
 8001654:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <sevSeg_updateDigits+0x13c>)
 8001656:	785b      	ldrb	r3, [r3, #1]
 8001658:	001a      	movs	r2, r3
 800165a:	f000 fda2 	bl	80021a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <sevSeg_updateDigits+0x134>)
 8001660:	6858      	ldr	r0, [r3, #4]
 8001662:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <sevSeg_updateDigits+0x140>)
 8001664:	8819      	ldrh	r1, [r3, #0]
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <sevSeg_updateDigits+0x13c>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	001a      	movs	r2, r3
 800166c:	f000 fd99 	bl	80021a2 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001670:	193b      	adds	r3, r7, r4
 8001672:	193a      	adds	r2, r7, r4
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	0852      	lsrs	r2, r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3301      	adds	r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2b07      	cmp	r3, #7
 8001684:	ddd4      	ble.n	8001630 <sevSeg_updateDigits+0x9c>
	for(int i = 0; i < 4; i++) {
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	3301      	adds	r3, #1
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	2b03      	cmp	r3, #3
 8001690:	ddb0      	ble.n	80015f4 <sevSeg_updateDigits+0x60>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <sevSeg_updateDigits+0x134>)
 8001694:	6898      	ldr	r0, [r3, #8]
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <sevSeg_updateDigits+0x144>)
 8001698:	8819      	ldrh	r1, [r3, #0]
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <sevSeg_updateDigits+0x13c>)
 800169c:	785b      	ldrb	r3, [r3, #1]
 800169e:	001a      	movs	r2, r3
 80016a0:	f000 fd7f 	bl	80021a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <sevSeg_updateDigits+0x134>)
 80016a6:	6898      	ldr	r0, [r3, #8]
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <sevSeg_updateDigits+0x144>)
 80016aa:	8819      	ldrh	r1, [r3, #0]
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <sevSeg_updateDigits+0x13c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	001a      	movs	r2, r3
 80016b2:	f000 fd76 	bl	80021a2 <HAL_GPIO_WritePin>

	return;
 80016b6:	46c0      	nop			; (mov r8, r8)

}
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b007      	add	sp, #28
 80016bc:	bd90      	pop	{r4, r7, pc}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	08006808 	.word	0x08006808
 80016c4:	08006814 	.word	0x08006814
 80016c8:	20000020 	.word	0x20000020
 80016cc:	20000274 	.word	0x20000274
 80016d0:	20000034 	.word	0x20000034
 80016d4:	20000276 	.word	0x20000276
 80016d8:	20000278 	.word	0x20000278

080016dc <sevSeg_setIntensity>:

void sevSeg_setIntensity(TIM_HandleTypeDef *htim_PWM, uint16_t dutyCycle) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	000a      	movs	r2, r1
 80016e6:	1cbb      	adds	r3, r7, #2
 80016e8:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(htim_PWM, TIM_CHANNEL_2, dutyCycle);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	1cba      	adds	r2, r7, #2
 80016f0:	8812      	ldrh	r2, [r2, #0]
 80016f2:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(htim_PWM, TIM_CHANNEL_2);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2104      	movs	r1, #4
 80016f8:	0018      	movs	r0, r3
 80016fa:	f002 fb3f 	bl	8003d7c <HAL_TIM_PWM_Start>

}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	b002      	add	sp, #8
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <HAL_MspInit+0x54>)
 8001710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_MspInit+0x54>)
 8001714:	2101      	movs	r1, #1
 8001716:	430a      	orrs	r2, r1
 8001718:	641a      	str	r2, [r3, #64]	; 0x40
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_MspInit+0x54>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	2201      	movs	r2, #1
 8001720:	4013      	ands	r3, r2
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <HAL_MspInit+0x54>)
 8001728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_MspInit+0x54>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	0549      	lsls	r1, r1, #21
 8001730:	430a      	orrs	r2, r1
 8001732:	63da      	str	r2, [r3, #60]	; 0x3c
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_MspInit+0x54>)
 8001736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	055b      	lsls	r3, r3, #21
 800173c:	4013      	ands	r3, r2
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	2001      	movs	r0, #1
 8001748:	f000 fb78 	bl	8001e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800174c:	2001      	movs	r0, #1
 800174e:	f000 fb8a 	bl	8001e66 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b08f      	sub	sp, #60	; 0x3c
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001768:	2410      	movs	r4, #16
 800176a:	193b      	adds	r3, r7, r4
 800176c:	0018      	movs	r0, r3
 800176e:	2328      	movs	r3, #40	; 0x28
 8001770:	001a      	movs	r2, r3
 8001772:	2100      	movs	r1, #0
 8001774:	f003 fe82 	bl	800547c <memset>
  if(hrtc->Instance==RTC)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <HAL_RTC_MspInit+0x84>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d12c      	bne.n	80017dc <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001782:	193b      	adds	r3, r7, r4
 8001784:	2280      	movs	r2, #128	; 0x80
 8001786:	0292      	lsls	r2, r2, #10
 8001788:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800178a:	193b      	adds	r3, r7, r4
 800178c:	2280      	movs	r2, #128	; 0x80
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001792:	193b      	adds	r3, r7, r4
 8001794:	0018      	movs	r0, r3
 8001796:	f001 fa8f 	bl	8002cb8 <HAL_RCCEx_PeriphCLKConfig>
 800179a:	1e03      	subs	r3, r0, #0
 800179c:	d001      	beq.n	80017a2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800179e:	f7ff fddb 	bl	8001358 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_RTC_MspInit+0x88>)
 80017a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <HAL_RTC_MspInit+0x88>)
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	0209      	lsls	r1, r1, #8
 80017ac:	430a      	orrs	r2, r1
 80017ae:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80017b0:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <HAL_RTC_MspInit+0x88>)
 80017b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_RTC_MspInit+0x88>)
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	00c9      	lsls	r1, r1, #3
 80017ba:	430a      	orrs	r2, r1
 80017bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_RTC_MspInit+0x88>)
 80017c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4013      	ands	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	2002      	movs	r0, #2
 80017d2:	f000 fb33 	bl	8001e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80017d6:	2002      	movs	r0, #2
 80017d8:	f000 fb45 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	b00f      	add	sp, #60	; 0x3c
 80017e2:	bd90      	pop	{r4, r7, pc}
 80017e4:	40002800 	.word	0x40002800
 80017e8:	40021000 	.word	0x40021000

080017ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b08f      	sub	sp, #60	; 0x3c
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f4:	2410      	movs	r4, #16
 80017f6:	193b      	adds	r3, r7, r4
 80017f8:	0018      	movs	r0, r3
 80017fa:	2328      	movs	r3, #40	; 0x28
 80017fc:	001a      	movs	r2, r3
 80017fe:	2100      	movs	r1, #0
 8001800:	f003 fe3c 	bl	800547c <memset>
  if(htim_pwm->Instance==TIM1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a11      	ldr	r2, [pc, #68]	; (8001850 <HAL_TIM_PWM_MspInit+0x64>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d11c      	bne.n	8001848 <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800180e:	193b      	adds	r3, r7, r4
 8001810:	2280      	movs	r2, #128	; 0x80
 8001812:	0392      	lsls	r2, r2, #14
 8001814:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001816:	193b      	adds	r3, r7, r4
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181c:	193b      	adds	r3, r7, r4
 800181e:	0018      	movs	r0, r3
 8001820:	f001 fa4a 	bl	8002cb8 <HAL_RCCEx_PeriphCLKConfig>
 8001824:	1e03      	subs	r3, r0, #0
 8001826:	d001      	beq.n	800182c <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8001828:	f7ff fd96 	bl	8001358 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_TIM_PWM_MspInit+0x68>)
 800182e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_TIM_PWM_MspInit+0x68>)
 8001832:	2180      	movs	r1, #128	; 0x80
 8001834:	0109      	lsls	r1, r1, #4
 8001836:	430a      	orrs	r2, r1
 8001838:	641a      	str	r2, [r3, #64]	; 0x40
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_TIM_PWM_MspInit+0x68>)
 800183c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	4013      	ands	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	b00f      	add	sp, #60	; 0x3c
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	40012c00 	.word	0x40012c00
 8001854:	40021000 	.word	0x40021000

08001858 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <HAL_TIM_Base_MspInit+0x38>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d10d      	bne.n	8001886 <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_TIM_Base_MspInit+0x3c>)
 800186c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_TIM_Base_MspInit+0x3c>)
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	0289      	lsls	r1, r1, #10
 8001874:	430a      	orrs	r2, r1
 8001876:	641a      	str	r2, [r3, #64]	; 0x40
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_TIM_Base_MspInit+0x3c>)
 800187a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	029b      	lsls	r3, r3, #10
 8001880:	4013      	ands	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	46bd      	mov	sp, r7
 800188a:	b004      	add	sp, #16
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	40014400 	.word	0x40014400
 8001894:	40021000 	.word	0x40021000

08001898 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	240c      	movs	r4, #12
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	0018      	movs	r0, r3
 80018a6:	2314      	movs	r3, #20
 80018a8:	001a      	movs	r2, r3
 80018aa:	2100      	movs	r1, #0
 80018ac:	f003 fde6 	bl	800547c <memset>
  if(htim->Instance==TIM1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a14      	ldr	r2, [pc, #80]	; (8001908 <HAL_TIM_MspPostInit+0x70>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d121      	bne.n	80018fe <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_TIM_MspPostInit+0x74>)
 80018bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_TIM_MspPostInit+0x74>)
 80018c0:	2102      	movs	r1, #2
 80018c2:	430a      	orrs	r2, r1
 80018c4:	635a      	str	r2, [r3, #52]	; 0x34
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_TIM_MspPostInit+0x74>)
 80018c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ca:	2202      	movs	r2, #2
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Shift_Output_En_Pin;
 80018d2:	0021      	movs	r1, r4
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	2208      	movs	r2, #8
 80018d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	2202      	movs	r2, #2
 80018de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	2200      	movs	r2, #0
 80018ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	2201      	movs	r2, #1
 80018f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Shift_Output_En_GPIO_Port, &GPIO_InitStruct);
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	4a06      	ldr	r2, [pc, #24]	; (8001910 <HAL_TIM_MspPostInit+0x78>)
 80018f6:	0019      	movs	r1, r3
 80018f8:	0010      	movs	r0, r2
 80018fa:	f000 fad1 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	b009      	add	sp, #36	; 0x24
 8001904:	bd90      	pop	{r4, r7, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	40012c00 	.word	0x40012c00
 800190c:	40021000 	.word	0x40021000
 8001910:	50000400 	.word	0x50000400

08001914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b08b      	sub	sp, #44	; 0x2c
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	2414      	movs	r4, #20
 800191e:	193b      	adds	r3, r7, r4
 8001920:	0018      	movs	r0, r3
 8001922:	2314      	movs	r3, #20
 8001924:	001a      	movs	r2, r3
 8001926:	2100      	movs	r1, #0
 8001928:	f003 fda8 	bl	800547c <memset>
  if(huart->Instance==USART2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <HAL_UART_MspInit+0x8c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d130      	bne.n	8001998 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001936:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_UART_MspInit+0x90>)
 8001938:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_UART_MspInit+0x90>)
 800193c:	2180      	movs	r1, #128	; 0x80
 800193e:	0289      	lsls	r1, r1, #10
 8001940:	430a      	orrs	r2, r1
 8001942:	63da      	str	r2, [r3, #60]	; 0x3c
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_UART_MspInit+0x90>)
 8001946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	029b      	lsls	r3, r3, #10
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <HAL_UART_MspInit+0x90>)
 8001954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_UART_MspInit+0x90>)
 8001958:	2101      	movs	r1, #1
 800195a:	430a      	orrs	r2, r1
 800195c:	635a      	str	r2, [r3, #52]	; 0x34
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_UART_MspInit+0x90>)
 8001960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001962:	2201      	movs	r2, #1
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800196a:	0021      	movs	r1, r4
 800196c:	187b      	adds	r3, r7, r1
 800196e:	220c      	movs	r2, #12
 8001970:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	187b      	adds	r3, r7, r1
 8001974:	2202      	movs	r2, #2
 8001976:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001978:	187b      	adds	r3, r7, r1
 800197a:	2201      	movs	r2, #1
 800197c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	187b      	adds	r3, r7, r1
 8001980:	2200      	movs	r2, #0
 8001982:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001984:	187b      	adds	r3, r7, r1
 8001986:	2201      	movs	r2, #1
 8001988:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	187a      	adds	r2, r7, r1
 800198c:	23a0      	movs	r3, #160	; 0xa0
 800198e:	05db      	lsls	r3, r3, #23
 8001990:	0011      	movs	r1, r2
 8001992:	0018      	movs	r0, r3
 8001994:	f000 fa84 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001998:	46c0      	nop			; (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	b00b      	add	sp, #44	; 0x2c
 800199e:	bd90      	pop	{r4, r7, pc}
 80019a0:	40004400 	.word	0x40004400
 80019a4:	40021000 	.word	0x40021000

080019a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <NMI_Handler+0x4>

080019ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <HardFault_Handler+0x4>

080019b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019cc:	f000 f96e 	bl	8001cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d0:	46c0      	nop			; (mov r8, r8)
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80019da:	f000 fc73 	bl	80022c4 <HAL_PWREx_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <RTC_TAMP_IRQHandler+0x14>)
 80019ea:	0018      	movs	r0, r3
 80019ec:	f001 ff6a 	bl	80038c4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80019f0:	46c0      	nop			; (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	200000c8 	.word	0x200000c8

080019fc <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Display_Button_Pin);
 8001a00:	2001      	movs	r0, #1
 8001a02:	f000 fbeb 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Set_Button_Pin);
 8001a06:	2002      	movs	r0, #2
 8001a08:	f000 fbe8 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_NRST_Pin);
 8001a16:	2004      	movs	r0, #4
 8001a18:	f000 fbe0 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001a1c:	46c0      	nop			; (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Hour_Set_Button_Pin);
 8001a26:	2020      	movs	r0, #32
 8001a28:	f000 fbd8 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Enable_Button_Pin);
 8001a2c:	2040      	movs	r0, #64	; 0x40
 8001a2e:	f000 fbd5 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Minute_Set_Button_Pin);
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	015b      	lsls	r3, r3, #5
 8001a36:	0018      	movs	r0, r3
 8001a38:	f000 fbd0 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001a3c:	46c0      	nop			; (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e00a      	b.n	8001a6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a54:	e000      	b.n	8001a58 <_read+0x16>
 8001a56:	bf00      	nop
 8001a58:	0001      	movs	r1, r0
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	60ba      	str	r2, [r7, #8]
 8001a60:	b2ca      	uxtb	r2, r1
 8001a62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3301      	adds	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	dbf0      	blt.n	8001a54 <_read+0x12>
  }

  return len;
 8001a72:	687b      	ldr	r3, [r7, #4]
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b006      	add	sp, #24
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e009      	b.n	8001aa2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	60ba      	str	r2, [r7, #8]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	0018      	movs	r0, r3
 8001a98:	f7fe fd1e 	bl	80004d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	dbf1      	blt.n	8001a8e <_write+0x12>
  }
  return len;
 8001aaa:	687b      	ldr	r3, [r7, #4]
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b006      	add	sp, #24
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_close>:

int _close(int file)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001abc:	2301      	movs	r3, #1
 8001abe:	425b      	negs	r3, r3
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2280      	movs	r2, #128	; 0x80
 8001ad6:	0192      	lsls	r2, r2, #6
 8001ad8:	605a      	str	r2, [r3, #4]
  return 0;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	0018      	movs	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_isatty>:

int _isatty(int file)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aec:	2301      	movs	r3, #1
}
 8001aee:	0018      	movs	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b002      	add	sp, #8
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b004      	add	sp, #16
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b14:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <_sbrk+0x5c>)
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <_sbrk+0x60>)
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <_sbrk+0x64>)
 8001b2a:	4a12      	ldr	r2, [pc, #72]	; (8001b74 <_sbrk+0x68>)
 8001b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	18d3      	adds	r3, r2, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d207      	bcs.n	8001b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b3c:	f003 fc74 	bl	8005428 <__errno>
 8001b40:	0003      	movs	r3, r0
 8001b42:	220c      	movs	r2, #12
 8001b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b46:	2301      	movs	r3, #1
 8001b48:	425b      	negs	r3, r3
 8001b4a:	e009      	b.n	8001b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <_sbrk+0x64>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	18d2      	adds	r2, r2, r3
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <_sbrk+0x64>)
 8001b5c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b006      	add	sp, #24
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20002000 	.word	0x20002000
 8001b6c:	00000400 	.word	0x00000400
 8001b70:	20000280 	.word	0x20000280
 8001b74:	20000298 	.word	0x20000298

08001b78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b84:	480d      	ldr	r0, [pc, #52]	; (8001bbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b86:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b88:	f7ff fff6 	bl	8001b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b8c:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b8e:	490d      	ldr	r1, [pc, #52]	; (8001bc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b90:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <LoopForever+0xe>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b94:	e002      	b.n	8001b9c <LoopCopyDataInit>

08001b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9a:	3304      	adds	r3, #4

08001b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba0:	d3f9      	bcc.n	8001b96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ba4:	4c0a      	ldr	r4, [pc, #40]	; (8001bd0 <LoopForever+0x16>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba8:	e001      	b.n	8001bae <LoopFillZerobss>

08001baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bac:	3204      	adds	r2, #4

08001bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb0:	d3fb      	bcc.n	8001baa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bb2:	f003 fc3f 	bl	8005434 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001bb6:	f7fe fca1 	bl	80004fc <main>

08001bba <LoopForever>:

LoopForever:
  b LoopForever
 8001bba:	e7fe      	b.n	8001bba <LoopForever>
  ldr   r0, =_estack
 8001bbc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc4:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001bc8:	0800698c 	.word	0x0800698c
  ldr r2, =_sbss
 8001bcc:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001bd0:	20000298 	.word	0x20000298

08001bd4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bd4:	e7fe      	b.n	8001bd4 <ADC1_IRQHandler>
	...

08001bd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bde:	1dfb      	adds	r3, r7, #7
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_Init+0x3c>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_Init+0x3c>)
 8001bea:	2180      	movs	r1, #128	; 0x80
 8001bec:	0049      	lsls	r1, r1, #1
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f000 f810 	bl	8001c18 <HAL_InitTick>
 8001bf8:	1e03      	subs	r3, r0, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001bfc:	1dfb      	adds	r3, r7, #7
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	e001      	b.n	8001c08 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001c04:	f7ff fd80 	bl	8001708 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c08:	1dfb      	adds	r3, r7, #7
 8001c0a:	781b      	ldrb	r3, [r3, #0]
}
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b002      	add	sp, #8
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40022000 	.word	0x40022000

08001c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c20:	230f      	movs	r3, #15
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001c28:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <HAL_InitTick+0x88>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d02b      	beq.n	8001c88 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <HAL_InitTick+0x8c>)
 8001c32:	681c      	ldr	r4, [r3, #0]
 8001c34:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_InitTick+0x88>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	0019      	movs	r1, r3
 8001c3a:	23fa      	movs	r3, #250	; 0xfa
 8001c3c:	0098      	lsls	r0, r3, #2
 8001c3e:	f7fe fa6b 	bl	8000118 <__udivsi3>
 8001c42:	0003      	movs	r3, r0
 8001c44:	0019      	movs	r1, r3
 8001c46:	0020      	movs	r0, r4
 8001c48:	f7fe fa66 	bl	8000118 <__udivsi3>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f000 f919 	bl	8001e86 <HAL_SYSTICK_Config>
 8001c54:	1e03      	subs	r3, r0, #0
 8001c56:	d112      	bne.n	8001c7e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d80a      	bhi.n	8001c74 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	2301      	movs	r3, #1
 8001c62:	425b      	negs	r3, r3
 8001c64:	2200      	movs	r2, #0
 8001c66:	0018      	movs	r0, r3
 8001c68:	f000 f8e8 	bl	8001e3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_InitTick+0x90>)
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	e00d      	b.n	8001c90 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001c74:	230f      	movs	r3, #15
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
 8001c7c:	e008      	b.n	8001c90 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c7e:	230f      	movs	r3, #15
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	2201      	movs	r2, #1
 8001c84:	701a      	strb	r2, [r3, #0]
 8001c86:	e003      	b.n	8001c90 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c88:	230f      	movs	r3, #15
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001c90:	230f      	movs	r3, #15
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	781b      	ldrb	r3, [r3, #0]
}
 8001c96:	0018      	movs	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b005      	add	sp, #20
 8001c9c:	bd90      	pop	{r4, r7, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	20000040 	.word	0x20000040
 8001ca4:	20000038 	.word	0x20000038
 8001ca8:	2000003c 	.word	0x2000003c

08001cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_IncTick+0x1c>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	001a      	movs	r2, r3
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_IncTick+0x20>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	18d2      	adds	r2, r2, r3
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <HAL_IncTick+0x20>)
 8001cbe:	601a      	str	r2, [r3, #0]
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	20000040 	.word	0x20000040
 8001ccc:	20000284 	.word	0x20000284

08001cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd4:	4b02      	ldr	r3, [pc, #8]	; (8001ce0 <HAL_GetTick+0x10>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	20000284 	.word	0x20000284

08001ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	0002      	movs	r2, r0
 8001cec:	1dfb      	adds	r3, r7, #7
 8001cee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cf0:	1dfb      	adds	r3, r7, #7
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8001cf6:	d809      	bhi.n	8001d0c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf8:	1dfb      	adds	r3, r7, #7
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	001a      	movs	r2, r3
 8001cfe:	231f      	movs	r3, #31
 8001d00:	401a      	ands	r2, r3
 8001d02:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <__NVIC_EnableIRQ+0x30>)
 8001d04:	2101      	movs	r1, #1
 8001d06:	4091      	lsls	r1, r2
 8001d08:	000a      	movs	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001d0c:	46c0      	nop			; (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b002      	add	sp, #8
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	e000e100 	.word	0xe000e100

08001d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	0002      	movs	r2, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	1dfb      	adds	r3, r7, #7
 8001d24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d26:	1dfb      	adds	r3, r7, #7
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d2c:	d828      	bhi.n	8001d80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d2e:	4a2f      	ldr	r2, [pc, #188]	; (8001dec <__NVIC_SetPriority+0xd4>)
 8001d30:	1dfb      	adds	r3, r7, #7
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	b25b      	sxtb	r3, r3
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	33c0      	adds	r3, #192	; 0xc0
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	589b      	ldr	r3, [r3, r2]
 8001d3e:	1dfa      	adds	r2, r7, #7
 8001d40:	7812      	ldrb	r2, [r2, #0]
 8001d42:	0011      	movs	r1, r2
 8001d44:	2203      	movs	r2, #3
 8001d46:	400a      	ands	r2, r1
 8001d48:	00d2      	lsls	r2, r2, #3
 8001d4a:	21ff      	movs	r1, #255	; 0xff
 8001d4c:	4091      	lsls	r1, r2
 8001d4e:	000a      	movs	r2, r1
 8001d50:	43d2      	mvns	r2, r2
 8001d52:	401a      	ands	r2, r3
 8001d54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	019b      	lsls	r3, r3, #6
 8001d5a:	22ff      	movs	r2, #255	; 0xff
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	1dfb      	adds	r3, r7, #7
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	0018      	movs	r0, r3
 8001d64:	2303      	movs	r3, #3
 8001d66:	4003      	ands	r3, r0
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d6c:	481f      	ldr	r0, [pc, #124]	; (8001dec <__NVIC_SetPriority+0xd4>)
 8001d6e:	1dfb      	adds	r3, r7, #7
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b25b      	sxtb	r3, r3
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	430a      	orrs	r2, r1
 8001d78:	33c0      	adds	r3, #192	; 0xc0
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d7e:	e031      	b.n	8001de4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d80:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <__NVIC_SetPriority+0xd8>)
 8001d82:	1dfb      	adds	r3, r7, #7
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	0019      	movs	r1, r3
 8001d88:	230f      	movs	r3, #15
 8001d8a:	400b      	ands	r3, r1
 8001d8c:	3b08      	subs	r3, #8
 8001d8e:	089b      	lsrs	r3, r3, #2
 8001d90:	3306      	adds	r3, #6
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	18d3      	adds	r3, r2, r3
 8001d96:	3304      	adds	r3, #4
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	1dfa      	adds	r2, r7, #7
 8001d9c:	7812      	ldrb	r2, [r2, #0]
 8001d9e:	0011      	movs	r1, r2
 8001da0:	2203      	movs	r2, #3
 8001da2:	400a      	ands	r2, r1
 8001da4:	00d2      	lsls	r2, r2, #3
 8001da6:	21ff      	movs	r1, #255	; 0xff
 8001da8:	4091      	lsls	r1, r2
 8001daa:	000a      	movs	r2, r1
 8001dac:	43d2      	mvns	r2, r2
 8001dae:	401a      	ands	r2, r3
 8001db0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	019b      	lsls	r3, r3, #6
 8001db6:	22ff      	movs	r2, #255	; 0xff
 8001db8:	401a      	ands	r2, r3
 8001dba:	1dfb      	adds	r3, r7, #7
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	4003      	ands	r3, r0
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dc8:	4809      	ldr	r0, [pc, #36]	; (8001df0 <__NVIC_SetPriority+0xd8>)
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	001c      	movs	r4, r3
 8001dd0:	230f      	movs	r3, #15
 8001dd2:	4023      	ands	r3, r4
 8001dd4:	3b08      	subs	r3, #8
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	3306      	adds	r3, #6
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	18c3      	adds	r3, r0, r3
 8001de0:	3304      	adds	r3, #4
 8001de2:	601a      	str	r2, [r3, #0]
}
 8001de4:	46c0      	nop			; (mov r8, r8)
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b003      	add	sp, #12
 8001dea:	bd90      	pop	{r4, r7, pc}
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	1e5a      	subs	r2, r3, #1
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	045b      	lsls	r3, r3, #17
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d301      	bcc.n	8001e0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e010      	b.n	8001e2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <SysTick_Config+0x44>)
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	3a01      	subs	r2, #1
 8001e12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e14:	2301      	movs	r3, #1
 8001e16:	425b      	negs	r3, r3
 8001e18:	2103      	movs	r1, #3
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f7ff ff7c 	bl	8001d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <SysTick_Config+0x44>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <SysTick_Config+0x44>)
 8001e28:	2207      	movs	r2, #7
 8001e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b002      	add	sp, #8
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	e000e010 	.word	0xe000e010

08001e3c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	210f      	movs	r1, #15
 8001e48:	187b      	adds	r3, r7, r1
 8001e4a:	1c02      	adds	r2, r0, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b25b      	sxtb	r3, r3
 8001e56:	0011      	movs	r1, r2
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f7ff ff5d 	bl	8001d18 <__NVIC_SetPriority>
}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b004      	add	sp, #16
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	1dfb      	adds	r3, r7, #7
 8001e70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e72:	1dfb      	adds	r3, r7, #7
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	b25b      	sxtb	r3, r3
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f7ff ff33 	bl	8001ce4 <__NVIC_EnableIRQ>
}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b002      	add	sp, #8
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7ff ffaf 	bl	8001df4 <SysTick_Config>
 8001e96:	0003      	movs	r3, r0
}
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b002      	add	sp, #8
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eae:	e147      	b.n	8002140 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4091      	lsls	r1, r2
 8001eba:	000a      	movs	r2, r1
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d100      	bne.n	8001ec8 <HAL_GPIO_Init+0x28>
 8001ec6:	e138      	b.n	800213a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2203      	movs	r2, #3
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d005      	beq.n	8001ee0 <HAL_GPIO_Init+0x40>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2203      	movs	r2, #3
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d130      	bne.n	8001f42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	409a      	lsls	r2, r3
 8001eee:	0013      	movs	r3, r2
 8001ef0:	43da      	mvns	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	409a      	lsls	r2, r3
 8001f02:	0013      	movs	r3, r2
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f16:	2201      	movs	r2, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	0013      	movs	r3, r2
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	401a      	ands	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	409a      	lsls	r2, r3
 8001f34:	0013      	movs	r3, r2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2203      	movs	r2, #3
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d017      	beq.n	8001f7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	0013      	movs	r3, r2
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	0013      	movs	r3, r2
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2203      	movs	r2, #3
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d123      	bne.n	8001fd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	08da      	lsrs	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3208      	adds	r2, #8
 8001f92:	0092      	lsls	r2, r2, #2
 8001f94:	58d3      	ldr	r3, [r2, r3]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2207      	movs	r2, #7
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	0013      	movs	r3, r2
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2107      	movs	r1, #7
 8001fb6:	400b      	ands	r3, r1
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	0013      	movs	r3, r2
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	08da      	lsrs	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3208      	adds	r2, #8
 8001fcc:	0092      	lsls	r2, r2, #2
 8001fce:	6939      	ldr	r1, [r7, #16]
 8001fd0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	2203      	movs	r2, #3
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	0013      	movs	r3, r2
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2203      	movs	r2, #3
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	0013      	movs	r3, r2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	23c0      	movs	r3, #192	; 0xc0
 800200c:	029b      	lsls	r3, r3, #10
 800200e:	4013      	ands	r3, r2
 8002010:	d100      	bne.n	8002014 <HAL_GPIO_Init+0x174>
 8002012:	e092      	b.n	800213a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002014:	4a50      	ldr	r2, [pc, #320]	; (8002158 <HAL_GPIO_Init+0x2b8>)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3318      	adds	r3, #24
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	589b      	ldr	r3, [r3, r2]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2203      	movs	r2, #3
 8002026:	4013      	ands	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	220f      	movs	r2, #15
 800202c:	409a      	lsls	r2, r3
 800202e:	0013      	movs	r3, r2
 8002030:	43da      	mvns	r2, r3
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	23a0      	movs	r3, #160	; 0xa0
 800203c:	05db      	lsls	r3, r3, #23
 800203e:	429a      	cmp	r2, r3
 8002040:	d013      	beq.n	800206a <HAL_GPIO_Init+0x1ca>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a45      	ldr	r2, [pc, #276]	; (800215c <HAL_GPIO_Init+0x2bc>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00d      	beq.n	8002066 <HAL_GPIO_Init+0x1c6>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a44      	ldr	r2, [pc, #272]	; (8002160 <HAL_GPIO_Init+0x2c0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d007      	beq.n	8002062 <HAL_GPIO_Init+0x1c2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a43      	ldr	r2, [pc, #268]	; (8002164 <HAL_GPIO_Init+0x2c4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d101      	bne.n	800205e <HAL_GPIO_Init+0x1be>
 800205a:	2303      	movs	r3, #3
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x1cc>
 800205e:	2305      	movs	r3, #5
 8002060:	e004      	b.n	800206c <HAL_GPIO_Init+0x1cc>
 8002062:	2302      	movs	r3, #2
 8002064:	e002      	b.n	800206c <HAL_GPIO_Init+0x1cc>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_GPIO_Init+0x1cc>
 800206a:	2300      	movs	r3, #0
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	2103      	movs	r1, #3
 8002070:	400a      	ands	r2, r1
 8002072:	00d2      	lsls	r2, r2, #3
 8002074:	4093      	lsls	r3, r2
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800207c:	4936      	ldr	r1, [pc, #216]	; (8002158 <HAL_GPIO_Init+0x2b8>)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	3318      	adds	r3, #24
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800208a:	4b33      	ldr	r3, [pc, #204]	; (8002158 <HAL_GPIO_Init+0x2b8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	43da      	mvns	r2, r3
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	035b      	lsls	r3, r3, #13
 80020a2:	4013      	ands	r3, r2
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020ae:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <HAL_GPIO_Init+0x2b8>)
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80020b4:	4b28      	ldr	r3, [pc, #160]	; (8002158 <HAL_GPIO_Init+0x2b8>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	43da      	mvns	r2, r3
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	039b      	lsls	r3, r3, #14
 80020cc:	4013      	ands	r3, r2
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020d8:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <HAL_GPIO_Init+0x2b8>)
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020de:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <HAL_GPIO_Init+0x2b8>)
 80020e0:	2384      	movs	r3, #132	; 0x84
 80020e2:	58d3      	ldr	r3, [r2, r3]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	43da      	mvns	r2, r3
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	029b      	lsls	r3, r3, #10
 80020f8:	4013      	ands	r3, r2
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002104:	4914      	ldr	r1, [pc, #80]	; (8002158 <HAL_GPIO_Init+0x2b8>)
 8002106:	2284      	movs	r2, #132	; 0x84
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800210c:	4a12      	ldr	r2, [pc, #72]	; (8002158 <HAL_GPIO_Init+0x2b8>)
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	58d3      	ldr	r3, [r2, r3]
 8002112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	43da      	mvns	r2, r3
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	025b      	lsls	r3, r3, #9
 8002126:	4013      	ands	r3, r2
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002132:	4909      	ldr	r1, [pc, #36]	; (8002158 <HAL_GPIO_Init+0x2b8>)
 8002134:	2280      	movs	r2, #128	; 0x80
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	3301      	adds	r3, #1
 800213e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	40da      	lsrs	r2, r3
 8002148:	1e13      	subs	r3, r2, #0
 800214a:	d000      	beq.n	800214e <HAL_GPIO_Init+0x2ae>
 800214c:	e6b0      	b.n	8001eb0 <HAL_GPIO_Init+0x10>
  }
}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	46c0      	nop			; (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	b006      	add	sp, #24
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021800 	.word	0x40021800
 800215c:	50000400 	.word	0x50000400
 8002160:	50000800 	.word	0x50000800
 8002164:	50000c00 	.word	0x50000c00

08002168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	000a      	movs	r2, r1
 8002172:	1cbb      	adds	r3, r7, #2
 8002174:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	1cba      	adds	r2, r7, #2
 800217c:	8812      	ldrh	r2, [r2, #0]
 800217e:	4013      	ands	r3, r2
 8002180:	d004      	beq.n	800218c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002182:	230f      	movs	r3, #15
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
 800218a:	e003      	b.n	8002194 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800218c:	230f      	movs	r3, #15
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002194:	230f      	movs	r3, #15
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	781b      	ldrb	r3, [r3, #0]
}
 800219a:	0018      	movs	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	b004      	add	sp, #16
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	0008      	movs	r0, r1
 80021ac:	0011      	movs	r1, r2
 80021ae:	1cbb      	adds	r3, r7, #2
 80021b0:	1c02      	adds	r2, r0, #0
 80021b2:	801a      	strh	r2, [r3, #0]
 80021b4:	1c7b      	adds	r3, r7, #1
 80021b6:	1c0a      	adds	r2, r1, #0
 80021b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ba:	1c7b      	adds	r3, r7, #1
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d004      	beq.n	80021cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021c2:	1cbb      	adds	r3, r7, #2
 80021c4:	881a      	ldrh	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021ca:	e003      	b.n	80021d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021cc:	1cbb      	adds	r3, r7, #2
 80021ce:	881a      	ldrh	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b002      	add	sp, #8
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	0002      	movs	r2, r0
 80021e4:	1dbb      	adds	r3, r7, #6
 80021e6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80021e8:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	1dba      	adds	r2, r7, #6
 80021ee:	8812      	ldrh	r2, [r2, #0]
 80021f0:	4013      	ands	r3, r2
 80021f2:	d008      	beq.n	8002206 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80021f4:	4b0d      	ldr	r3, [pc, #52]	; (800222c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021f6:	1dba      	adds	r2, r7, #6
 80021f8:	8812      	ldrh	r2, [r2, #0]
 80021fa:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80021fc:	1dbb      	adds	r3, r7, #6
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	0018      	movs	r0, r3
 8002202:	f000 f815 	bl	8002230 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	1dba      	adds	r2, r7, #6
 800220c:	8812      	ldrh	r2, [r2, #0]
 800220e:	4013      	ands	r3, r2
 8002210:	d008      	beq.n	8002224 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002214:	1dba      	adds	r2, r7, #6
 8002216:	8812      	ldrh	r2, [r2, #0]
 8002218:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800221a:	1dbb      	adds	r3, r7, #6
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	0018      	movs	r0, r3
 8002220:	f7fe fd76 	bl	8000d10 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002224:	46c0      	nop			; (mov r8, r8)
 8002226:	46bd      	mov	sp, r7
 8002228:	b002      	add	sp, #8
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021800 	.word	0x40021800

08002230 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	0002      	movs	r2, r0
 8002238:	1dbb      	adds	r3, r7, #6
 800223a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800223c:	46c0      	nop			; (mov r8, r8)
 800223e:	46bd      	mov	sp, r7
 8002240:	b002      	add	sp, #8
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a19      	ldr	r2, [pc, #100]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002252:	4013      	ands	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	429a      	cmp	r2, r3
 8002266:	d11f      	bne.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	0013      	movs	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	189b      	adds	r3, r3, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4912      	ldr	r1, [pc, #72]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002276:	0018      	movs	r0, r3
 8002278:	f7fd ff4e 	bl	8000118 <__udivsi3>
 800227c:	0003      	movs	r3, r0
 800227e:	3301      	adds	r3, #1
 8002280:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002282:	e008      	b.n	8002296 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	3b01      	subs	r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e001      	b.n	8002296 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e009      	b.n	80022aa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	401a      	ands	r2, r3
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d0ed      	beq.n	8002284 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	0018      	movs	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b004      	add	sp, #16
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	40007000 	.word	0x40007000
 80022b8:	fffff9ff 	.word	0xfffff9ff
 80022bc:	20000038 	.word	0x20000038
 80022c0:	000f4240 	.word	0x000f4240

080022c4 <HAL_PWREx_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* Check PWR exti Rising flag */
  if (__HAL_PWR_PVD_EXTI_GET_RISING_FLAG() != 0x0U)
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	025b      	lsls	r3, r3, #9
 80022d0:	4013      	ands	r3, r2
 80022d2:	d005      	beq.n	80022e0 <HAL_PWREx_PVD_IRQHandler+0x1c>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_RISING_FLAG();
 80022d4:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80022d6:	2280      	movs	r2, #128	; 0x80
 80022d8:	0252      	lsls	r2, r2, #9
 80022da:	60da      	str	r2, [r3, #12]

    /* PWR PVD interrupt rising user callback */
    HAL_PWREx_PVD_Rising_Callback();
 80022dc:	f000 f812 	bl	8002304 <HAL_PWREx_PVD_Rising_Callback>
  }

  /* Check PWR exti fallling flag */
  if (__HAL_PWR_PVD_EXTI_GET_FALLING_FLAG() != 0x0U)
 80022e0:	4b07      	ldr	r3, [pc, #28]	; (8002300 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	025b      	lsls	r3, r3, #9
 80022e8:	4013      	ands	r3, r2
 80022ea:	d005      	beq.n	80022f8 <HAL_PWREx_PVD_IRQHandler+0x34>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FALLING_FLAG();
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80022ee:	2280      	movs	r2, #128	; 0x80
 80022f0:	0252      	lsls	r2, r2, #9
 80022f2:	611a      	str	r2, [r3, #16]

    /* PWR PVD interrupt falling user callback */
    HAL_PWREx_PVD_Falling_Callback();
 80022f4:	f000 f80b 	bl	800230e <HAL_PWREx_PVD_Falling_Callback>
  }
}
 80022f8:	46c0      	nop			; (mov r8, r8)
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	40021800 	.word	0x40021800

08002304 <HAL_PWREx_PVD_Rising_Callback>:
/**
  * @brief  PWR PVD interrupt rising callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Rising_Callback(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Rising_Callback can be implemented in the user file
  */
}
 8002308:	46c0      	nop			; (mov r8, r8)
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_PWREx_PVD_Falling_Callback>:
/**
  * @brief  PWR PVD interrupt Falling callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Falling_Callback(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Falling_Callback can be implemented in the user file
  */
}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <LL_RCC_GetAPB1Prescaler+0x14>)
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	23e0      	movs	r3, #224	; 0xe0
 8002322:	01db      	lsls	r3, r3, #7
 8002324:	4013      	ands	r3, r2
}
 8002326:	0018      	movs	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40021000 	.word	0x40021000

08002330 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e2fe      	b.n	8002940 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2201      	movs	r2, #1
 8002348:	4013      	ands	r3, r2
 800234a:	d100      	bne.n	800234e <HAL_RCC_OscConfig+0x1e>
 800234c:	e07c      	b.n	8002448 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800234e:	4bc3      	ldr	r3, [pc, #780]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2238      	movs	r2, #56	; 0x38
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002358:	4bc0      	ldr	r3, [pc, #768]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2203      	movs	r2, #3
 800235e:	4013      	ands	r3, r2
 8002360:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b10      	cmp	r3, #16
 8002366:	d102      	bne.n	800236e <HAL_RCC_OscConfig+0x3e>
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d002      	beq.n	8002374 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2b08      	cmp	r3, #8
 8002372:	d10b      	bne.n	800238c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	4bb9      	ldr	r3, [pc, #740]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	029b      	lsls	r3, r3, #10
 800237c:	4013      	ands	r3, r2
 800237e:	d062      	beq.n	8002446 <HAL_RCC_OscConfig+0x116>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d15e      	bne.n	8002446 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e2d9      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	025b      	lsls	r3, r3, #9
 8002394:	429a      	cmp	r2, r3
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_OscConfig+0x78>
 8002398:	4bb0      	ldr	r3, [pc, #704]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4baf      	ldr	r3, [pc, #700]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 800239e:	2180      	movs	r1, #128	; 0x80
 80023a0:	0249      	lsls	r1, r1, #9
 80023a2:	430a      	orrs	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	e020      	b.n	80023ea <HAL_RCC_OscConfig+0xba>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	23a0      	movs	r3, #160	; 0xa0
 80023ae:	02db      	lsls	r3, r3, #11
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d10e      	bne.n	80023d2 <HAL_RCC_OscConfig+0xa2>
 80023b4:	4ba9      	ldr	r3, [pc, #676]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4ba8      	ldr	r3, [pc, #672]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80023ba:	2180      	movs	r1, #128	; 0x80
 80023bc:	02c9      	lsls	r1, r1, #11
 80023be:	430a      	orrs	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	4ba6      	ldr	r3, [pc, #664]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	4ba5      	ldr	r3, [pc, #660]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80023c8:	2180      	movs	r1, #128	; 0x80
 80023ca:	0249      	lsls	r1, r1, #9
 80023cc:	430a      	orrs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e00b      	b.n	80023ea <HAL_RCC_OscConfig+0xba>
 80023d2:	4ba2      	ldr	r3, [pc, #648]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4ba1      	ldr	r3, [pc, #644]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80023d8:	49a1      	ldr	r1, [pc, #644]	; (8002660 <HAL_RCC_OscConfig+0x330>)
 80023da:	400a      	ands	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	4b9f      	ldr	r3, [pc, #636]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b9e      	ldr	r3, [pc, #632]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80023e4:	499f      	ldr	r1, [pc, #636]	; (8002664 <HAL_RCC_OscConfig+0x334>)
 80023e6:	400a      	ands	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d014      	beq.n	800241c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f2:	f7ff fc6d 	bl	8001cd0 <HAL_GetTick>
 80023f6:	0003      	movs	r3, r0
 80023f8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023fc:	f7ff fc68 	bl	8001cd0 <HAL_GetTick>
 8002400:	0002      	movs	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	; 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e298      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240e:	4b93      	ldr	r3, [pc, #588]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	029b      	lsls	r3, r3, #10
 8002416:	4013      	ands	r3, r2
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0xcc>
 800241a:	e015      	b.n	8002448 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7ff fc58 	bl	8001cd0 <HAL_GetTick>
 8002420:	0003      	movs	r3, r0
 8002422:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002426:	f7ff fc53 	bl	8001cd0 <HAL_GetTick>
 800242a:	0002      	movs	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b64      	cmp	r3, #100	; 0x64
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e283      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002438:	4b88      	ldr	r3, [pc, #544]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	029b      	lsls	r3, r3, #10
 8002440:	4013      	ands	r3, r2
 8002442:	d1f0      	bne.n	8002426 <HAL_RCC_OscConfig+0xf6>
 8002444:	e000      	b.n	8002448 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002446:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2202      	movs	r2, #2
 800244e:	4013      	ands	r3, r2
 8002450:	d100      	bne.n	8002454 <HAL_RCC_OscConfig+0x124>
 8002452:	e099      	b.n	8002588 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002454:	4b81      	ldr	r3, [pc, #516]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2238      	movs	r2, #56	; 0x38
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800245e:	4b7f      	ldr	r3, [pc, #508]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2203      	movs	r2, #3
 8002464:	4013      	ands	r3, r2
 8002466:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2b10      	cmp	r3, #16
 800246c:	d102      	bne.n	8002474 <HAL_RCC_OscConfig+0x144>
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d002      	beq.n	800247a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d135      	bne.n	80024e6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800247a:	4b78      	ldr	r3, [pc, #480]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4013      	ands	r3, r2
 8002484:	d005      	beq.n	8002492 <HAL_RCC_OscConfig+0x162>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e256      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002492:	4b72      	ldr	r3, [pc, #456]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4a74      	ldr	r2, [pc, #464]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 8002498:	4013      	ands	r3, r2
 800249a:	0019      	movs	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	021a      	lsls	r2, r3, #8
 80024a2:	4b6e      	ldr	r3, [pc, #440]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80024a4:	430a      	orrs	r2, r1
 80024a6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d112      	bne.n	80024d4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024ae:	4b6b      	ldr	r3, [pc, #428]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a6e      	ldr	r2, [pc, #440]	; (800266c <HAL_RCC_OscConfig+0x33c>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	0019      	movs	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	4b67      	ldr	r3, [pc, #412]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80024be:	430a      	orrs	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80024c2:	4b66      	ldr	r3, [pc, #408]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0adb      	lsrs	r3, r3, #11
 80024c8:	2207      	movs	r2, #7
 80024ca:	4013      	ands	r3, r2
 80024cc:	4a68      	ldr	r2, [pc, #416]	; (8002670 <HAL_RCC_OscConfig+0x340>)
 80024ce:	40da      	lsrs	r2, r3
 80024d0:	4b68      	ldr	r3, [pc, #416]	; (8002674 <HAL_RCC_OscConfig+0x344>)
 80024d2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024d4:	4b68      	ldr	r3, [pc, #416]	; (8002678 <HAL_RCC_OscConfig+0x348>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0018      	movs	r0, r3
 80024da:	f7ff fb9d 	bl	8001c18 <HAL_InitTick>
 80024de:	1e03      	subs	r3, r0, #0
 80024e0:	d051      	beq.n	8002586 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e22c      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d030      	beq.n	8002550 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024ee:	4b5b      	ldr	r3, [pc, #364]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a5e      	ldr	r2, [pc, #376]	; (800266c <HAL_RCC_OscConfig+0x33c>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	0019      	movs	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	4b57      	ldr	r3, [pc, #348]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80024fe:	430a      	orrs	r2, r1
 8002500:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002502:	4b56      	ldr	r3, [pc, #344]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b55      	ldr	r3, [pc, #340]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 8002508:	2180      	movs	r1, #128	; 0x80
 800250a:	0049      	lsls	r1, r1, #1
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7ff fbde 	bl	8001cd0 <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800251a:	f7ff fbd9 	bl	8001cd0 <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e209      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800252c:	4b4b      	ldr	r3, [pc, #300]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4013      	ands	r3, r2
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002538:	4b48      	ldr	r3, [pc, #288]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4a4a      	ldr	r2, [pc, #296]	; (8002668 <HAL_RCC_OscConfig+0x338>)
 800253e:	4013      	ands	r3, r2
 8002540:	0019      	movs	r1, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	021a      	lsls	r2, r3, #8
 8002548:	4b44      	ldr	r3, [pc, #272]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 800254a:	430a      	orrs	r2, r1
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	e01b      	b.n	8002588 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002550:	4b42      	ldr	r3, [pc, #264]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b41      	ldr	r3, [pc, #260]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 8002556:	4949      	ldr	r1, [pc, #292]	; (800267c <HAL_RCC_OscConfig+0x34c>)
 8002558:	400a      	ands	r2, r1
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7ff fbb8 	bl	8001cd0 <HAL_GetTick>
 8002560:	0003      	movs	r3, r0
 8002562:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002566:	f7ff fbb3 	bl	8001cd0 <HAL_GetTick>
 800256a:	0002      	movs	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e1e3      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002578:	4b38      	ldr	r3, [pc, #224]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4013      	ands	r3, r2
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x236>
 8002584:	e000      	b.n	8002588 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002586:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2208      	movs	r2, #8
 800258e:	4013      	ands	r3, r2
 8002590:	d047      	beq.n	8002622 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002592:	4b32      	ldr	r3, [pc, #200]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2238      	movs	r2, #56	; 0x38
 8002598:	4013      	ands	r3, r2
 800259a:	2b18      	cmp	r3, #24
 800259c:	d10a      	bne.n	80025b4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800259e:	4b2f      	ldr	r3, [pc, #188]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80025a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a2:	2202      	movs	r2, #2
 80025a4:	4013      	ands	r3, r2
 80025a6:	d03c      	beq.n	8002622 <HAL_RCC_OscConfig+0x2f2>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d138      	bne.n	8002622 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e1c5      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d019      	beq.n	80025f0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80025bc:	4b27      	ldr	r3, [pc, #156]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80025be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025c0:	4b26      	ldr	r3, [pc, #152]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80025c2:	2101      	movs	r1, #1
 80025c4:	430a      	orrs	r2, r1
 80025c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7ff fb82 	bl	8001cd0 <HAL_GetTick>
 80025cc:	0003      	movs	r3, r0
 80025ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d2:	f7ff fb7d 	bl	8001cd0 <HAL_GetTick>
 80025d6:	0002      	movs	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e1ad      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80025e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e8:	2202      	movs	r2, #2
 80025ea:	4013      	ands	r3, r2
 80025ec:	d0f1      	beq.n	80025d2 <HAL_RCC_OscConfig+0x2a2>
 80025ee:	e018      	b.n	8002622 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80025f0:	4b1a      	ldr	r3, [pc, #104]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80025f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 80025f6:	2101      	movs	r1, #1
 80025f8:	438a      	bics	r2, r1
 80025fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7ff fb68 	bl	8001cd0 <HAL_GetTick>
 8002600:	0003      	movs	r3, r0
 8002602:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002606:	f7ff fb63 	bl	8001cd0 <HAL_GetTick>
 800260a:	0002      	movs	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e193      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002618:	4b10      	ldr	r3, [pc, #64]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 800261a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261c:	2202      	movs	r2, #2
 800261e:	4013      	ands	r3, r2
 8002620:	d1f1      	bne.n	8002606 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2204      	movs	r2, #4
 8002628:	4013      	ands	r3, r2
 800262a:	d100      	bne.n	800262e <HAL_RCC_OscConfig+0x2fe>
 800262c:	e0c6      	b.n	80027bc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262e:	231f      	movs	r3, #31
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002636:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2238      	movs	r2, #56	; 0x38
 800263c:	4013      	ands	r3, r2
 800263e:	2b20      	cmp	r3, #32
 8002640:	d11e      	bne.n	8002680 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_RCC_OscConfig+0x32c>)
 8002644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002646:	2202      	movs	r2, #2
 8002648:	4013      	ands	r3, r2
 800264a:	d100      	bne.n	800264e <HAL_RCC_OscConfig+0x31e>
 800264c:	e0b6      	b.n	80027bc <HAL_RCC_OscConfig+0x48c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d000      	beq.n	8002658 <HAL_RCC_OscConfig+0x328>
 8002656:	e0b1      	b.n	80027bc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e171      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
 800265c:	40021000 	.word	0x40021000
 8002660:	fffeffff 	.word	0xfffeffff
 8002664:	fffbffff 	.word	0xfffbffff
 8002668:	ffff80ff 	.word	0xffff80ff
 800266c:	ffffc7ff 	.word	0xffffc7ff
 8002670:	00f42400 	.word	0x00f42400
 8002674:	20000038 	.word	0x20000038
 8002678:	2000003c 	.word	0x2000003c
 800267c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002680:	4bb1      	ldr	r3, [pc, #708]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 8002682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	055b      	lsls	r3, r3, #21
 8002688:	4013      	ands	r3, r2
 800268a:	d101      	bne.n	8002690 <HAL_RCC_OscConfig+0x360>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <HAL_RCC_OscConfig+0x362>
 8002690:	2300      	movs	r3, #0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d011      	beq.n	80026ba <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	4bac      	ldr	r3, [pc, #688]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 8002698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800269a:	4bab      	ldr	r3, [pc, #684]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 800269c:	2180      	movs	r1, #128	; 0x80
 800269e:	0549      	lsls	r1, r1, #21
 80026a0:	430a      	orrs	r2, r1
 80026a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80026a4:	4ba8      	ldr	r3, [pc, #672]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 80026a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	055b      	lsls	r3, r3, #21
 80026ac:	4013      	ands	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80026b2:	231f      	movs	r3, #31
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	2201      	movs	r2, #1
 80026b8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ba:	4ba4      	ldr	r3, [pc, #656]	; (800294c <HAL_RCC_OscConfig+0x61c>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4013      	ands	r3, r2
 80026c4:	d11a      	bne.n	80026fc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c6:	4ba1      	ldr	r3, [pc, #644]	; (800294c <HAL_RCC_OscConfig+0x61c>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4ba0      	ldr	r3, [pc, #640]	; (800294c <HAL_RCC_OscConfig+0x61c>)
 80026cc:	2180      	movs	r1, #128	; 0x80
 80026ce:	0049      	lsls	r1, r1, #1
 80026d0:	430a      	orrs	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80026d4:	f7ff fafc 	bl	8001cd0 <HAL_GetTick>
 80026d8:	0003      	movs	r3, r0
 80026da:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026de:	f7ff faf7 	bl	8001cd0 <HAL_GetTick>
 80026e2:	0002      	movs	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e127      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f0:	4b96      	ldr	r3, [pc, #600]	; (800294c <HAL_RCC_OscConfig+0x61c>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4013      	ands	r3, r2
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x3e2>
 8002704:	4b90      	ldr	r3, [pc, #576]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 8002706:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002708:	4b8f      	ldr	r3, [pc, #572]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 800270a:	2101      	movs	r1, #1
 800270c:	430a      	orrs	r2, r1
 800270e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002710:	e01c      	b.n	800274c <HAL_RCC_OscConfig+0x41c>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b05      	cmp	r3, #5
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x404>
 800271a:	4b8b      	ldr	r3, [pc, #556]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 800271c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800271e:	4b8a      	ldr	r3, [pc, #552]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 8002720:	2104      	movs	r1, #4
 8002722:	430a      	orrs	r2, r1
 8002724:	65da      	str	r2, [r3, #92]	; 0x5c
 8002726:	4b88      	ldr	r3, [pc, #544]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 8002728:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800272a:	4b87      	ldr	r3, [pc, #540]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 800272c:	2101      	movs	r1, #1
 800272e:	430a      	orrs	r2, r1
 8002730:	65da      	str	r2, [r3, #92]	; 0x5c
 8002732:	e00b      	b.n	800274c <HAL_RCC_OscConfig+0x41c>
 8002734:	4b84      	ldr	r3, [pc, #528]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 8002736:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002738:	4b83      	ldr	r3, [pc, #524]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 800273a:	2101      	movs	r1, #1
 800273c:	438a      	bics	r2, r1
 800273e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002740:	4b81      	ldr	r3, [pc, #516]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 8002742:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002744:	4b80      	ldr	r3, [pc, #512]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 8002746:	2104      	movs	r1, #4
 8002748:	438a      	bics	r2, r1
 800274a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d014      	beq.n	800277e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7ff fabc 	bl	8001cd0 <HAL_GetTick>
 8002758:	0003      	movs	r3, r0
 800275a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800275c:	e009      	b.n	8002772 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275e:	f7ff fab7 	bl	8001cd0 <HAL_GetTick>
 8002762:	0002      	movs	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	4a79      	ldr	r2, [pc, #484]	; (8002950 <HAL_RCC_OscConfig+0x620>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e0e6      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002772:	4b75      	ldr	r3, [pc, #468]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	2202      	movs	r2, #2
 8002778:	4013      	ands	r3, r2
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x42e>
 800277c:	e013      	b.n	80027a6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7ff faa7 	bl	8001cd0 <HAL_GetTick>
 8002782:	0003      	movs	r3, r0
 8002784:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002786:	e009      	b.n	800279c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002788:	f7ff faa2 	bl	8001cd0 <HAL_GetTick>
 800278c:	0002      	movs	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	4a6f      	ldr	r2, [pc, #444]	; (8002950 <HAL_RCC_OscConfig+0x620>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e0d1      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800279c:	4b6a      	ldr	r3, [pc, #424]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 800279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a0:	2202      	movs	r2, #2
 80027a2:	4013      	ands	r3, r2
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80027a6:	231f      	movs	r3, #31
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d105      	bne.n	80027bc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80027b0:	4b65      	ldr	r3, [pc, #404]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 80027b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027b4:	4b64      	ldr	r3, [pc, #400]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 80027b6:	4967      	ldr	r1, [pc, #412]	; (8002954 <HAL_RCC_OscConfig+0x624>)
 80027b8:	400a      	ands	r2, r1
 80027ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d100      	bne.n	80027c6 <HAL_RCC_OscConfig+0x496>
 80027c4:	e0bb      	b.n	800293e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c6:	4b60      	ldr	r3, [pc, #384]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2238      	movs	r2, #56	; 0x38
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b10      	cmp	r3, #16
 80027d0:	d100      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4a4>
 80027d2:	e07b      	b.n	80028cc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d156      	bne.n	800288a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027dc:	4b5a      	ldr	r3, [pc, #360]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b59      	ldr	r3, [pc, #356]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 80027e2:	495d      	ldr	r1, [pc, #372]	; (8002958 <HAL_RCC_OscConfig+0x628>)
 80027e4:	400a      	ands	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7ff fa72 	bl	8001cd0 <HAL_GetTick>
 80027ec:	0003      	movs	r3, r0
 80027ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f2:	f7ff fa6d 	bl	8001cd0 <HAL_GetTick>
 80027f6:	0002      	movs	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e09d      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002804:	4b50      	ldr	r3, [pc, #320]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	049b      	lsls	r3, r3, #18
 800280c:	4013      	ands	r3, r2
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002810:	4b4d      	ldr	r3, [pc, #308]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4a51      	ldr	r2, [pc, #324]	; (800295c <HAL_RCC_OscConfig+0x62c>)
 8002816:	4013      	ands	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1a      	ldr	r2, [r3, #32]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283c:	431a      	orrs	r2, r3
 800283e:	4b42      	ldr	r3, [pc, #264]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 8002840:	430a      	orrs	r2, r1
 8002842:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002844:	4b40      	ldr	r3, [pc, #256]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 800284a:	2180      	movs	r1, #128	; 0x80
 800284c:	0449      	lsls	r1, r1, #17
 800284e:	430a      	orrs	r2, r1
 8002850:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002852:	4b3d      	ldr	r3, [pc, #244]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	4b3c      	ldr	r3, [pc, #240]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 8002858:	2180      	movs	r1, #128	; 0x80
 800285a:	0549      	lsls	r1, r1, #21
 800285c:	430a      	orrs	r2, r1
 800285e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7ff fa36 	bl	8001cd0 <HAL_GetTick>
 8002864:	0003      	movs	r3, r0
 8002866:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286a:	f7ff fa31 	bl	8001cd0 <HAL_GetTick>
 800286e:	0002      	movs	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e061      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287c:	4b32      	ldr	r3, [pc, #200]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	049b      	lsls	r3, r3, #18
 8002884:	4013      	ands	r3, r2
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x53a>
 8002888:	e059      	b.n	800293e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288a:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	4b2e      	ldr	r3, [pc, #184]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 8002890:	4931      	ldr	r1, [pc, #196]	; (8002958 <HAL_RCC_OscConfig+0x628>)
 8002892:	400a      	ands	r2, r1
 8002894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7ff fa1b 	bl	8001cd0 <HAL_GetTick>
 800289a:	0003      	movs	r3, r0
 800289c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7ff fa16 	bl	8001cd0 <HAL_GetTick>
 80028a4:	0002      	movs	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e046      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b2:	4b25      	ldr	r3, [pc, #148]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	049b      	lsls	r3, r3, #18
 80028ba:	4013      	ands	r3, r2
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80028be:	4b22      	ldr	r3, [pc, #136]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	4b21      	ldr	r3, [pc, #132]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 80028c4:	4926      	ldr	r1, [pc, #152]	; (8002960 <HAL_RCC_OscConfig+0x630>)
 80028c6:	400a      	ands	r2, r1
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	e038      	b.n	800293e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e033      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <HAL_RCC_OscConfig+0x618>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2203      	movs	r2, #3
 80028e2:	401a      	ands	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d126      	bne.n	800293a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2270      	movs	r2, #112	; 0x70
 80028f0:	401a      	ands	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d11f      	bne.n	800293a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	23fe      	movs	r3, #254	; 0xfe
 80028fe:	01db      	lsls	r3, r3, #7
 8002900:	401a      	ands	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d116      	bne.n	800293a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	23f8      	movs	r3, #248	; 0xf8
 8002910:	039b      	lsls	r3, r3, #14
 8002912:	401a      	ands	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d10e      	bne.n	800293a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	23e0      	movs	r3, #224	; 0xe0
 8002920:	051b      	lsls	r3, r3, #20
 8002922:	401a      	ands	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	0f5b      	lsrs	r3, r3, #29
 8002930:	075a      	lsls	r2, r3, #29
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d001      	beq.n	800293e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	b008      	add	sp, #32
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000
 800294c:	40007000 	.word	0x40007000
 8002950:	00001388 	.word	0x00001388
 8002954:	efffffff 	.word	0xefffffff
 8002958:	feffffff 	.word	0xfeffffff
 800295c:	11c1808c 	.word	0x11c1808c
 8002960:	eefefffc 	.word	0xeefefffc

08002964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0e9      	b.n	8002b4c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002978:	4b76      	ldr	r3, [pc, #472]	; (8002b54 <HAL_RCC_ClockConfig+0x1f0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2207      	movs	r2, #7
 800297e:	4013      	ands	r3, r2
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d91e      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b73      	ldr	r3, [pc, #460]	; (8002b54 <HAL_RCC_ClockConfig+0x1f0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2207      	movs	r2, #7
 800298c:	4393      	bics	r3, r2
 800298e:	0019      	movs	r1, r3
 8002990:	4b70      	ldr	r3, [pc, #448]	; (8002b54 <HAL_RCC_ClockConfig+0x1f0>)
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002998:	f7ff f99a 	bl	8001cd0 <HAL_GetTick>
 800299c:	0003      	movs	r3, r0
 800299e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029a0:	e009      	b.n	80029b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a2:	f7ff f995 	bl	8001cd0 <HAL_GetTick>
 80029a6:	0002      	movs	r2, r0
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	4a6a      	ldr	r2, [pc, #424]	; (8002b58 <HAL_RCC_ClockConfig+0x1f4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e0ca      	b.n	8002b4c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029b6:	4b67      	ldr	r3, [pc, #412]	; (8002b54 <HAL_RCC_ClockConfig+0x1f0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2207      	movs	r2, #7
 80029bc:	4013      	ands	r3, r2
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d1ee      	bne.n	80029a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2202      	movs	r2, #2
 80029ca:	4013      	ands	r3, r2
 80029cc:	d015      	beq.n	80029fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2204      	movs	r2, #4
 80029d4:	4013      	ands	r3, r2
 80029d6:	d006      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80029d8:	4b60      	ldr	r3, [pc, #384]	; (8002b5c <HAL_RCC_ClockConfig+0x1f8>)
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	4b5f      	ldr	r3, [pc, #380]	; (8002b5c <HAL_RCC_ClockConfig+0x1f8>)
 80029de:	21e0      	movs	r1, #224	; 0xe0
 80029e0:	01c9      	lsls	r1, r1, #7
 80029e2:	430a      	orrs	r2, r1
 80029e4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e6:	4b5d      	ldr	r3, [pc, #372]	; (8002b5c <HAL_RCC_ClockConfig+0x1f8>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	4a5d      	ldr	r2, [pc, #372]	; (8002b60 <HAL_RCC_ClockConfig+0x1fc>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	0019      	movs	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	4b59      	ldr	r3, [pc, #356]	; (8002b5c <HAL_RCC_ClockConfig+0x1f8>)
 80029f6:	430a      	orrs	r2, r1
 80029f8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2201      	movs	r2, #1
 8002a00:	4013      	ands	r3, r2
 8002a02:	d057      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d107      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a0c:	4b53      	ldr	r3, [pc, #332]	; (8002b5c <HAL_RCC_ClockConfig+0x1f8>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	029b      	lsls	r3, r3, #10
 8002a14:	4013      	ands	r3, r2
 8002a16:	d12b      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e097      	b.n	8002b4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a24:	4b4d      	ldr	r3, [pc, #308]	; (8002b5c <HAL_RCC_ClockConfig+0x1f8>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	049b      	lsls	r3, r3, #18
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d11f      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e08b      	b.n	8002b4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a3c:	4b47      	ldr	r3, [pc, #284]	; (8002b5c <HAL_RCC_ClockConfig+0x1f8>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4013      	ands	r3, r2
 8002a46:	d113      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e07f      	b.n	8002b4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d106      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a54:	4b41      	ldr	r3, [pc, #260]	; (8002b5c <HAL_RCC_ClockConfig+0x1f8>)
 8002a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a58:	2202      	movs	r2, #2
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d108      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e074      	b.n	8002b4c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a62:	4b3e      	ldr	r3, [pc, #248]	; (8002b5c <HAL_RCC_ClockConfig+0x1f8>)
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	2202      	movs	r2, #2
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e06d      	b.n	8002b4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a70:	4b3a      	ldr	r3, [pc, #232]	; (8002b5c <HAL_RCC_ClockConfig+0x1f8>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2207      	movs	r2, #7
 8002a76:	4393      	bics	r3, r2
 8002a78:	0019      	movs	r1, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	4b37      	ldr	r3, [pc, #220]	; (8002b5c <HAL_RCC_ClockConfig+0x1f8>)
 8002a80:	430a      	orrs	r2, r1
 8002a82:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a84:	f7ff f924 	bl	8001cd0 <HAL_GetTick>
 8002a88:	0003      	movs	r3, r0
 8002a8a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8c:	e009      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8e:	f7ff f91f 	bl	8001cd0 <HAL_GetTick>
 8002a92:	0002      	movs	r2, r0
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	4a2f      	ldr	r2, [pc, #188]	; (8002b58 <HAL_RCC_ClockConfig+0x1f4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e054      	b.n	8002b4c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	4b2e      	ldr	r3, [pc, #184]	; (8002b5c <HAL_RCC_ClockConfig+0x1f8>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2238      	movs	r2, #56	; 0x38
 8002aa8:	401a      	ands	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d1ec      	bne.n	8002a8e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2207      	movs	r2, #7
 8002aba:	4013      	ands	r3, r2
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d21e      	bcs.n	8002b00 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2207      	movs	r2, #7
 8002ac8:	4393      	bics	r3, r2
 8002aca:	0019      	movs	r1, r3
 8002acc:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <HAL_RCC_ClockConfig+0x1f0>)
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ad4:	f7ff f8fc 	bl	8001cd0 <HAL_GetTick>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002adc:	e009      	b.n	8002af2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ade:	f7ff f8f7 	bl	8001cd0 <HAL_GetTick>
 8002ae2:	0002      	movs	r2, r0
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	4a1b      	ldr	r2, [pc, #108]	; (8002b58 <HAL_RCC_ClockConfig+0x1f4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e02c      	b.n	8002b4c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002af2:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_RCC_ClockConfig+0x1f0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2207      	movs	r2, #7
 8002af8:	4013      	ands	r3, r2
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d1ee      	bne.n	8002ade <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2204      	movs	r2, #4
 8002b06:	4013      	ands	r3, r2
 8002b08:	d009      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <HAL_RCC_ClockConfig+0x1f8>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	4a15      	ldr	r2, [pc, #84]	; (8002b64 <HAL_RCC_ClockConfig+0x200>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	0019      	movs	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <HAL_RCC_ClockConfig+0x1f8>)
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002b1e:	f000 f829 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8002b22:	0001      	movs	r1, r0
 8002b24:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <HAL_RCC_ClockConfig+0x1f8>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	0a1b      	lsrs	r3, r3, #8
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_RCC_ClockConfig+0x204>)
 8002b30:	0092      	lsls	r2, r2, #2
 8002b32:	58d3      	ldr	r3, [r2, r3]
 8002b34:	221f      	movs	r2, #31
 8002b36:	4013      	ands	r3, r2
 8002b38:	000a      	movs	r2, r1
 8002b3a:	40da      	lsrs	r2, r3
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_RCC_ClockConfig+0x208>)
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_RCC_ClockConfig+0x20c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7ff f867 	bl	8001c18 <HAL_InitTick>
 8002b4a:	0003      	movs	r3, r0
}
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b004      	add	sp, #16
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40022000 	.word	0x40022000
 8002b58:	00001388 	.word	0x00001388
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	fffff0ff 	.word	0xfffff0ff
 8002b64:	ffff8fff 	.word	0xffff8fff
 8002b68:	08006818 	.word	0x08006818
 8002b6c:	20000038 	.word	0x20000038
 8002b70:	2000003c 	.word	0x2000003c

08002b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b7a:	4b3c      	ldr	r3, [pc, #240]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2238      	movs	r2, #56	; 0x38
 8002b80:	4013      	ands	r3, r2
 8002b82:	d10f      	bne.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002b84:	4b39      	ldr	r3, [pc, #228]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	0adb      	lsrs	r3, r3, #11
 8002b8a:	2207      	movs	r2, #7
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2201      	movs	r2, #1
 8002b90:	409a      	lsls	r2, r3
 8002b92:	0013      	movs	r3, r2
 8002b94:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b96:	6839      	ldr	r1, [r7, #0]
 8002b98:	4835      	ldr	r0, [pc, #212]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b9a:	f7fd fabd 	bl	8000118 <__udivsi3>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	e05d      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ba4:	4b31      	ldr	r3, [pc, #196]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2238      	movs	r2, #56	; 0x38
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d102      	bne.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bb0:	4b30      	ldr	r3, [pc, #192]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x100>)
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	e054      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bb6:	4b2d      	ldr	r3, [pc, #180]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2238      	movs	r2, #56	; 0x38
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b10      	cmp	r3, #16
 8002bc0:	d138      	bne.n	8002c34 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002bc2:	4b2a      	ldr	r3, [pc, #168]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bcc:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	2207      	movs	r2, #7
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d10d      	bne.n	8002bfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	4824      	ldr	r0, [pc, #144]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x100>)
 8002be4:	f7fd fa98 	bl	8000118 <__udivsi3>
 8002be8:	0003      	movs	r3, r0
 8002bea:	0019      	movs	r1, r3
 8002bec:	4b1f      	ldr	r3, [pc, #124]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	0a1b      	lsrs	r3, r3, #8
 8002bf2:	227f      	movs	r2, #127	; 0x7f
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	434b      	muls	r3, r1
 8002bf8:	617b      	str	r3, [r7, #20]
        break;
 8002bfa:	e00d      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	481c      	ldr	r0, [pc, #112]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c00:	f7fd fa8a 	bl	8000118 <__udivsi3>
 8002c04:	0003      	movs	r3, r0
 8002c06:	0019      	movs	r1, r3
 8002c08:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	227f      	movs	r2, #127	; 0x7f
 8002c10:	4013      	ands	r3, r2
 8002c12:	434b      	muls	r3, r1
 8002c14:	617b      	str	r3, [r7, #20]
        break;
 8002c16:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002c18:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	0f5b      	lsrs	r3, r3, #29
 8002c1e:	2207      	movs	r2, #7
 8002c20:	4013      	ands	r3, r2
 8002c22:	3301      	adds	r3, #1
 8002c24:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	6978      	ldr	r0, [r7, #20]
 8002c2a:	f7fd fa75 	bl	8000118 <__udivsi3>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	e015      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c34:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2238      	movs	r2, #56	; 0x38
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d103      	bne.n	8002c48 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	021b      	lsls	r3, r3, #8
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	e00b      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2238      	movs	r2, #56	; 0x38
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b18      	cmp	r3, #24
 8002c52:	d103      	bne.n	8002c5c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002c54:	23fa      	movs	r3, #250	; 0xfa
 8002c56:	01db      	lsls	r3, r3, #7
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	e001      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c60:	693b      	ldr	r3, [r7, #16]
}
 8002c62:	0018      	movs	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b006      	add	sp, #24
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	00f42400 	.word	0x00f42400
 8002c74:	007a1200 	.word	0x007a1200

08002c78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c7c:	4b02      	ldr	r3, [pc, #8]	; (8002c88 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
}
 8002c80:	0018      	movs	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	20000038 	.word	0x20000038

08002c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c8c:	b5b0      	push	{r4, r5, r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c90:	f7ff fff2 	bl	8002c78 <HAL_RCC_GetHCLKFreq>
 8002c94:	0004      	movs	r4, r0
 8002c96:	f7ff fb3f 	bl	8002318 <LL_RCC_GetAPB1Prescaler>
 8002c9a:	0003      	movs	r3, r0
 8002c9c:	0b1a      	lsrs	r2, r3, #12
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ca0:	0092      	lsls	r2, r2, #2
 8002ca2:	58d3      	ldr	r3, [r2, r3]
 8002ca4:	221f      	movs	r2, #31
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	40dc      	lsrs	r4, r3
 8002caa:	0023      	movs	r3, r4
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	08006858 	.word	0x08006858

08002cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002cc0:	2313      	movs	r3, #19
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cc8:	2312      	movs	r3, #18
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	029b      	lsls	r3, r3, #10
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d100      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002cdc:	e0a3      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cde:	2011      	movs	r0, #17
 8002ce0:	183b      	adds	r3, r7, r0
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce6:	4ba5      	ldr	r3, [pc, #660]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ce8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	055b      	lsls	r3, r3, #21
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d110      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	4ba2      	ldr	r3, [pc, #648]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf6:	4ba1      	ldr	r3, [pc, #644]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cf8:	2180      	movs	r1, #128	; 0x80
 8002cfa:	0549      	lsls	r1, r1, #21
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d00:	4b9e      	ldr	r3, [pc, #632]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	055b      	lsls	r3, r3, #21
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0e:	183b      	adds	r3, r7, r0
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d14:	4b9a      	ldr	r3, [pc, #616]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b99      	ldr	r3, [pc, #612]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002d1a:	2180      	movs	r1, #128	; 0x80
 8002d1c:	0049      	lsls	r1, r1, #1
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d22:	f7fe ffd5 	bl	8001cd0 <HAL_GetTick>
 8002d26:	0003      	movs	r3, r0
 8002d28:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d2a:	e00b      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2c:	f7fe ffd0 	bl	8001cd0 <HAL_GetTick>
 8002d30:	0002      	movs	r2, r0
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d904      	bls.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002d3a:	2313      	movs	r3, #19
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	2203      	movs	r2, #3
 8002d40:	701a      	strb	r2, [r3, #0]
        break;
 8002d42:	e005      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d44:	4b8e      	ldr	r3, [pc, #568]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d0ed      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002d50:	2313      	movs	r3, #19
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d154      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d5a:	4b88      	ldr	r3, [pc, #544]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d5e:	23c0      	movs	r3, #192	; 0xc0
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4013      	ands	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d019      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d014      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d76:	4b81      	ldr	r3, [pc, #516]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	4a82      	ldr	r2, [pc, #520]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d80:	4b7e      	ldr	r3, [pc, #504]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d84:	4b7d      	ldr	r3, [pc, #500]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d86:	2180      	movs	r1, #128	; 0x80
 8002d88:	0249      	lsls	r1, r1, #9
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d8e:	4b7b      	ldr	r3, [pc, #492]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d92:	4b7a      	ldr	r3, [pc, #488]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d94:	497c      	ldr	r1, [pc, #496]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002d96:	400a      	ands	r2, r1
 8002d98:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d9a:	4b78      	ldr	r3, [pc, #480]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2201      	movs	r2, #1
 8002da4:	4013      	ands	r3, r2
 8002da6:	d016      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe ff92 	bl	8001cd0 <HAL_GetTick>
 8002dac:	0003      	movs	r3, r0
 8002dae:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db0:	e00c      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe ff8d 	bl	8001cd0 <HAL_GetTick>
 8002db6:	0002      	movs	r2, r0
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	4a73      	ldr	r2, [pc, #460]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d904      	bls.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002dc2:	2313      	movs	r3, #19
 8002dc4:	18fb      	adds	r3, r7, r3
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	701a      	strb	r2, [r3, #0]
            break;
 8002dca:	e004      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dcc:	4b6b      	ldr	r3, [pc, #428]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d0ed      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002dd6:	2313      	movs	r3, #19
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10a      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de0:	4b66      	ldr	r3, [pc, #408]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de4:	4a67      	ldr	r2, [pc, #412]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	0019      	movs	r1, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dee:	4b63      	ldr	r3, [pc, #396]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002df0:	430a      	orrs	r2, r1
 8002df2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002df4:	e00c      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002df6:	2312      	movs	r3, #18
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	2213      	movs	r2, #19
 8002dfc:	18ba      	adds	r2, r7, r2
 8002dfe:	7812      	ldrb	r2, [r2, #0]
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	e005      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e04:	2312      	movs	r3, #18
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	2213      	movs	r2, #19
 8002e0a:	18ba      	adds	r2, r7, r2
 8002e0c:	7812      	ldrb	r2, [r2, #0]
 8002e0e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e10:	2311      	movs	r3, #17
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d105      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1a:	4b58      	ldr	r3, [pc, #352]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e1e:	4b57      	ldr	r3, [pc, #348]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e20:	495b      	ldr	r1, [pc, #364]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002e22:	400a      	ands	r2, r1
 8002e24:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d009      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e30:	4b52      	ldr	r3, [pc, #328]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e34:	2203      	movs	r2, #3
 8002e36:	4393      	bics	r3, r2
 8002e38:	0019      	movs	r1, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	4b4f      	ldr	r3, [pc, #316]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e40:	430a      	orrs	r2, r1
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2210      	movs	r2, #16
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d009      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e4e:	4b4b      	ldr	r3, [pc, #300]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e52:	4a50      	ldr	r2, [pc, #320]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	0019      	movs	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	4b47      	ldr	r3, [pc, #284]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	2380      	movs	r3, #128	; 0x80
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e6e:	4b43      	ldr	r3, [pc, #268]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	4a49      	ldr	r2, [pc, #292]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	4b3f      	ldr	r3, [pc, #252]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d009      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e8e:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e92:	4a42      	ldr	r2, [pc, #264]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	0019      	movs	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d009      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eac:	4b33      	ldr	r3, [pc, #204]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb0:	4a3b      	ldr	r2, [pc, #236]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	0019      	movs	r1, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	4b30      	ldr	r3, [pc, #192]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	01db      	lsls	r3, r3, #7
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d015      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ecc:	4b2b      	ldr	r3, [pc, #172]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	0899      	lsrs	r1, r3, #2
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002eda:	430a      	orrs	r2, r1
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69da      	ldr	r2, [r3, #28]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	05db      	lsls	r3, r3, #23
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d106      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002eea:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	4b23      	ldr	r3, [pc, #140]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ef0:	2180      	movs	r1, #128	; 0x80
 8002ef2:	0249      	lsls	r1, r1, #9
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	039b      	lsls	r3, r3, #14
 8002f00:	4013      	ands	r3, r2
 8002f02:	d016      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f04:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	4a26      	ldr	r2, [pc, #152]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1a      	ldr	r2, [r3, #32]
 8002f12:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f14:	430a      	orrs	r2, r1
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1a      	ldr	r2, [r3, #32]
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	03db      	lsls	r3, r3, #15
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d106      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f24:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f2a:	2180      	movs	r1, #128	; 0x80
 8002f2c:	0449      	lsls	r1, r1, #17
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d016      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002f3e:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f42:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	0019      	movs	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	01db      	lsls	r3, r3, #7
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d106      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f5e:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	0249      	lsls	r1, r1, #9
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002f6c:	2312      	movs	r3, #18
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	781b      	ldrb	r3, [r3, #0]
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b006      	add	sp, #24
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40007000 	.word	0x40007000
 8002f84:	fffffcff 	.word	0xfffffcff
 8002f88:	fffeffff 	.word	0xfffeffff
 8002f8c:	00001388 	.word	0x00001388
 8002f90:	efffffff 	.word	0xefffffff
 8002f94:	fffff3ff 	.word	0xfffff3ff
 8002f98:	fff3ffff 	.word	0xfff3ffff
 8002f9c:	ffcfffff 	.word	0xffcfffff
 8002fa0:	ffffcfff 	.word	0xffffcfff
 8002fa4:	ffbfffff 	.word	0xffbfffff
 8002fa8:	ffff3fff 	.word	0xffff3fff

08002fac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002fac:	b5b0      	push	{r4, r5, r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002fb4:	230f      	movs	r3, #15
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d100      	bne.n	8002fc4 <HAL_RTC_Init+0x18>
 8002fc2:	e08c      	b.n	80030de <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2229      	movs	r2, #41	; 0x29
 8002fc8:	5c9b      	ldrb	r3, [r3, r2]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10b      	bne.n	8002fe8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2228      	movs	r2, #40	; 0x28
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2288      	movs	r2, #136	; 0x88
 8002fdc:	0212      	lsls	r2, r2, #8
 8002fde:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7fe fbbc 	bl	8001760 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2229      	movs	r2, #41	; 0x29
 8002fec:	2102      	movs	r1, #2
 8002fee:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2210      	movs	r2, #16
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d062      	beq.n	80030c4 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	22ca      	movs	r2, #202	; 0xca
 8003004:	625a      	str	r2, [r3, #36]	; 0x24
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2253      	movs	r2, #83	; 0x53
 800300c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800300e:	250f      	movs	r5, #15
 8003010:	197c      	adds	r4, r7, r5
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	0018      	movs	r0, r3
 8003016:	f000 fcba 	bl	800398e <RTC_EnterInitMode>
 800301a:	0003      	movs	r3, r0
 800301c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800301e:	0028      	movs	r0, r5
 8003020:	183b      	adds	r3, r7, r0
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d12c      	bne.n	8003082 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	492e      	ldr	r1, [pc, #184]	; (80030ec <HAL_RTC_Init+0x140>)
 8003034:	400a      	ands	r2, r1
 8003036:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6999      	ldr	r1, [r3, #24]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6912      	ldr	r2, [r2, #16]
 800305e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6919      	ldr	r1, [r3, #16]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	041a      	lsls	r2, r3, #16
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003074:	183c      	adds	r4, r7, r0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	0018      	movs	r0, r3
 800307a:	f000 fccb 	bl	8003a14 <RTC_ExitInitMode>
 800307e:	0003      	movs	r3, r0
 8003080:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8003082:	230f      	movs	r3, #15
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d116      	bne.n	80030ba <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	00d2      	lsls	r2, r2, #3
 8003098:	08d2      	lsrs	r2, r2, #3
 800309a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6999      	ldr	r1, [r3, #24]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	22ff      	movs	r2, #255	; 0xff
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24
 80030c2:	e003      	b.n	80030cc <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80030c4:	230f      	movs	r3, #15
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80030cc:	230f      	movs	r3, #15
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d103      	bne.n	80030de <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2229      	movs	r2, #41	; 0x29
 80030da:	2101      	movs	r1, #1
 80030dc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80030de:	230f      	movs	r3, #15
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	781b      	ldrb	r3, [r3, #0]
}
 80030e4:	0018      	movs	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b004      	add	sp, #16
 80030ea:	bdb0      	pop	{r4, r5, r7, pc}
 80030ec:	fb8fffbf 	.word	0xfb8fffbf

080030f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030f0:	b5b0      	push	{r4, r5, r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2228      	movs	r2, #40	; 0x28
 8003100:	5c9b      	ldrb	r3, [r3, r2]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_RTC_SetTime+0x1a>
 8003106:	2302      	movs	r3, #2
 8003108:	e092      	b.n	8003230 <HAL_RTC_SetTime+0x140>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2228      	movs	r2, #40	; 0x28
 800310e:	2101      	movs	r1, #1
 8003110:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2229      	movs	r2, #41	; 0x29
 8003116:	2102      	movs	r1, #2
 8003118:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	22ca      	movs	r2, #202	; 0xca
 8003120:	625a      	str	r2, [r3, #36]	; 0x24
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2253      	movs	r2, #83	; 0x53
 8003128:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800312a:	2513      	movs	r5, #19
 800312c:	197c      	adds	r4, r7, r5
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	0018      	movs	r0, r3
 8003132:	f000 fc2c 	bl	800398e <RTC_EnterInitMode>
 8003136:	0003      	movs	r3, r0
 8003138:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800313a:	197b      	adds	r3, r7, r5
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d162      	bne.n	8003208 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d125      	bne.n	8003194 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	2240      	movs	r2, #64	; 0x40
 8003150:	4013      	ands	r3, r2
 8003152:	d102      	bne.n	800315a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2200      	movs	r2, #0
 8003158:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	0018      	movs	r0, r3
 8003160:	f000 fc9c 	bl	8003a9c <RTC_ByteToBcd2>
 8003164:	0003      	movs	r3, r0
 8003166:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	785b      	ldrb	r3, [r3, #1]
 800316c:	0018      	movs	r0, r3
 800316e:	f000 fc95 	bl	8003a9c <RTC_ByteToBcd2>
 8003172:	0003      	movs	r3, r0
 8003174:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003176:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	789b      	ldrb	r3, [r3, #2]
 800317c:	0018      	movs	r0, r3
 800317e:	f000 fc8d 	bl	8003a9c <RTC_ByteToBcd2>
 8003182:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003184:	0022      	movs	r2, r4
 8003186:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	78db      	ldrb	r3, [r3, #3]
 800318c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800318e:	4313      	orrs	r3, r2
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	e017      	b.n	80031c4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	2240      	movs	r2, #64	; 0x40
 800319c:	4013      	ands	r3, r2
 800319e:	d102      	bne.n	80031a6 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2200      	movs	r2, #0
 80031a4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	785b      	ldrb	r3, [r3, #1]
 80031b0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80031b2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031b8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	78db      	ldrb	r3, [r3, #3]
 80031be:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	491b      	ldr	r1, [pc, #108]	; (8003238 <HAL_RTC_SetTime+0x148>)
 80031cc:	400a      	ands	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4918      	ldr	r1, [pc, #96]	; (800323c <HAL_RTC_SetTime+0x14c>)
 80031dc:	400a      	ands	r2, r1
 80031de:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6999      	ldr	r1, [r3, #24]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80031f8:	2313      	movs	r3, #19
 80031fa:	18fc      	adds	r4, r7, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	0018      	movs	r0, r3
 8003200:	f000 fc08 	bl	8003a14 <RTC_ExitInitMode>
 8003204:	0003      	movs	r3, r0
 8003206:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	22ff      	movs	r2, #255	; 0xff
 800320e:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8003210:	2313      	movs	r3, #19
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d103      	bne.n	8003222 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2229      	movs	r2, #41	; 0x29
 800321e:	2101      	movs	r1, #1
 8003220:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2228      	movs	r2, #40	; 0x28
 8003226:	2100      	movs	r1, #0
 8003228:	5499      	strb	r1, [r3, r2]

  return status;
 800322a:	2313      	movs	r3, #19
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	781b      	ldrb	r3, [r3, #0]
}
 8003230:	0018      	movs	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	b006      	add	sp, #24
 8003236:	bdb0      	pop	{r4, r5, r7, pc}
 8003238:	007f7f7f 	.word	0x007f7f7f
 800323c:	fffbffff 	.word	0xfffbffff

08003240 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	045b      	lsls	r3, r3, #17
 800325e:	0c5a      	lsrs	r2, r3, #17
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a22      	ldr	r2, [pc, #136]	; (80032f4 <HAL_RTC_GetTime+0xb4>)
 800326c:	4013      	ands	r3, r2
 800326e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	0c1b      	lsrs	r3, r3, #16
 8003274:	b2db      	uxtb	r3, r3
 8003276:	223f      	movs	r2, #63	; 0x3f
 8003278:	4013      	ands	r3, r2
 800327a:	b2da      	uxtb	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	b2db      	uxtb	r3, r3
 8003286:	227f      	movs	r2, #127	; 0x7f
 8003288:	4013      	ands	r3, r2
 800328a:	b2da      	uxtb	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	227f      	movs	r2, #127	; 0x7f
 8003296:	4013      	ands	r3, r2
 8003298:	b2da      	uxtb	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	0d9b      	lsrs	r3, r3, #22
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2201      	movs	r2, #1
 80032a6:	4013      	ands	r3, r2
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d11a      	bne.n	80032ea <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	0018      	movs	r0, r3
 80032ba:	f000 fc17 	bl	8003aec <RTC_Bcd2ToByte>
 80032be:	0003      	movs	r3, r0
 80032c0:	001a      	movs	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	785b      	ldrb	r3, [r3, #1]
 80032ca:	0018      	movs	r0, r3
 80032cc:	f000 fc0e 	bl	8003aec <RTC_Bcd2ToByte>
 80032d0:	0003      	movs	r3, r0
 80032d2:	001a      	movs	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	789b      	ldrb	r3, [r3, #2]
 80032dc:	0018      	movs	r0, r3
 80032de:	f000 fc05 	bl	8003aec <RTC_Bcd2ToByte>
 80032e2:	0003      	movs	r3, r0
 80032e4:	001a      	movs	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	0018      	movs	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b006      	add	sp, #24
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	007f7f7f 	.word	0x007f7f7f

080032f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032f8:	b5b0      	push	{r4, r5, r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2228      	movs	r2, #40	; 0x28
 8003308:	5c9b      	ldrb	r3, [r3, r2]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_RTC_SetDate+0x1a>
 800330e:	2302      	movs	r3, #2
 8003310:	e07e      	b.n	8003410 <HAL_RTC_SetDate+0x118>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2228      	movs	r2, #40	; 0x28
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2229      	movs	r2, #41	; 0x29
 800331e:	2102      	movs	r1, #2
 8003320:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10e      	bne.n	8003346 <HAL_RTC_SetDate+0x4e>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	785b      	ldrb	r3, [r3, #1]
 800332c:	001a      	movs	r2, r3
 800332e:	2310      	movs	r3, #16
 8003330:	4013      	ands	r3, r2
 8003332:	d008      	beq.n	8003346 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	785b      	ldrb	r3, [r3, #1]
 8003338:	2210      	movs	r2, #16
 800333a:	4393      	bics	r3, r2
 800333c:	b2db      	uxtb	r3, r3
 800333e:	330a      	adds	r3, #10
 8003340:	b2da      	uxtb	r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d11c      	bne.n	8003386 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	78db      	ldrb	r3, [r3, #3]
 8003350:	0018      	movs	r0, r3
 8003352:	f000 fba3 	bl	8003a9c <RTC_ByteToBcd2>
 8003356:	0003      	movs	r3, r0
 8003358:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	785b      	ldrb	r3, [r3, #1]
 800335e:	0018      	movs	r0, r3
 8003360:	f000 fb9c 	bl	8003a9c <RTC_ByteToBcd2>
 8003364:	0003      	movs	r3, r0
 8003366:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003368:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	789b      	ldrb	r3, [r3, #2]
 800336e:	0018      	movs	r0, r3
 8003370:	f000 fb94 	bl	8003a9c <RTC_ByteToBcd2>
 8003374:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003376:	0022      	movs	r2, r4
 8003378:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	e00e      	b.n	80033a4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	78db      	ldrb	r3, [r3, #3]
 800338a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	785b      	ldrb	r3, [r3, #1]
 8003390:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003392:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003398:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	22ca      	movs	r2, #202	; 0xca
 80033aa:	625a      	str	r2, [r3, #36]	; 0x24
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2253      	movs	r2, #83	; 0x53
 80033b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80033b4:	2513      	movs	r5, #19
 80033b6:	197c      	adds	r4, r7, r5
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 fae7 	bl	800398e <RTC_EnterInitMode>
 80033c0:	0003      	movs	r3, r0
 80033c2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80033c4:	0028      	movs	r0, r5
 80033c6:	183b      	adds	r3, r7, r0
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10c      	bne.n	80033e8 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4910      	ldr	r1, [pc, #64]	; (8003418 <HAL_RTC_SetDate+0x120>)
 80033d6:	400a      	ands	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80033da:	183c      	adds	r4, r7, r0
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	0018      	movs	r0, r3
 80033e0:	f000 fb18 	bl	8003a14 <RTC_ExitInitMode>
 80033e4:	0003      	movs	r3, r0
 80033e6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	22ff      	movs	r2, #255	; 0xff
 80033ee:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80033f0:	2313      	movs	r3, #19
 80033f2:	18fb      	adds	r3, r7, r3
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d103      	bne.n	8003402 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2229      	movs	r2, #41	; 0x29
 80033fe:	2101      	movs	r1, #1
 8003400:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2228      	movs	r2, #40	; 0x28
 8003406:	2100      	movs	r1, #0
 8003408:	5499      	strb	r1, [r3, r2]

  return status;
 800340a:	2313      	movs	r3, #19
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	781b      	ldrb	r3, [r3, #0]
}
 8003410:	0018      	movs	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	b006      	add	sp, #24
 8003416:	bdb0      	pop	{r4, r5, r7, pc}
 8003418:	00ffff3f 	.word	0x00ffff3f

0800341c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4a21      	ldr	r2, [pc, #132]	; (80034b4 <HAL_RTC_GetDate+0x98>)
 8003430:	4013      	ands	r3, r2
 8003432:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	0c1b      	lsrs	r3, r3, #16
 8003438:	b2da      	uxtb	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	0a1b      	lsrs	r3, r3, #8
 8003442:	b2db      	uxtb	r3, r3
 8003444:	221f      	movs	r2, #31
 8003446:	4013      	ands	r3, r2
 8003448:	b2da      	uxtb	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	223f      	movs	r2, #63	; 0x3f
 8003454:	4013      	ands	r3, r2
 8003456:	b2da      	uxtb	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	0b5b      	lsrs	r3, r3, #13
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2207      	movs	r2, #7
 8003464:	4013      	ands	r3, r2
 8003466:	b2da      	uxtb	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d11a      	bne.n	80034a8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	78db      	ldrb	r3, [r3, #3]
 8003476:	0018      	movs	r0, r3
 8003478:	f000 fb38 	bl	8003aec <RTC_Bcd2ToByte>
 800347c:	0003      	movs	r3, r0
 800347e:	001a      	movs	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	785b      	ldrb	r3, [r3, #1]
 8003488:	0018      	movs	r0, r3
 800348a:	f000 fb2f 	bl	8003aec <RTC_Bcd2ToByte>
 800348e:	0003      	movs	r3, r0
 8003490:	001a      	movs	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	789b      	ldrb	r3, [r3, #2]
 800349a:	0018      	movs	r0, r3
 800349c:	f000 fb26 	bl	8003aec <RTC_Bcd2ToByte>
 80034a0:	0003      	movs	r3, r0
 80034a2:	001a      	movs	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	0018      	movs	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b006      	add	sp, #24
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	00ffff3f 	.word	0x00ffff3f

080034b8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b089      	sub	sp, #36	; 0x24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2228      	movs	r2, #40	; 0x28
 80034c8:	5c9b      	ldrb	r3, [r3, r2]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <HAL_RTC_SetAlarm_IT+0x1a>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e127      	b.n	8003722 <HAL_RTC_SetAlarm_IT+0x26a>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2228      	movs	r2, #40	; 0x28
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2229      	movs	r2, #41	; 0x29
 80034de:	2102      	movs	r1, #2
 80034e0:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d136      	bne.n	8003556 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2240      	movs	r2, #64	; 0x40
 80034f0:	4013      	ands	r3, r2
 80034f2:	d102      	bne.n	80034fa <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2200      	movs	r2, #0
 80034f8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	0018      	movs	r0, r3
 8003500:	f000 facc 	bl	8003a9c <RTC_ByteToBcd2>
 8003504:	0003      	movs	r3, r0
 8003506:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	785b      	ldrb	r3, [r3, #1]
 800350c:	0018      	movs	r0, r3
 800350e:	f000 fac5 	bl	8003a9c <RTC_ByteToBcd2>
 8003512:	0003      	movs	r3, r0
 8003514:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003516:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	789b      	ldrb	r3, [r3, #2]
 800351c:	0018      	movs	r0, r3
 800351e:	f000 fabd 	bl	8003a9c <RTC_ByteToBcd2>
 8003522:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003524:	0022      	movs	r2, r4
 8003526:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	78db      	ldrb	r3, [r3, #3]
 800352c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800352e:	431a      	orrs	r2, r3
 8003530:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2220      	movs	r2, #32
 8003536:	5c9b      	ldrb	r3, [r3, r2]
 8003538:	0018      	movs	r0, r3
 800353a:	f000 faaf 	bl	8003a9c <RTC_ByteToBcd2>
 800353e:	0003      	movs	r3, r0
 8003540:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003542:	0022      	movs	r2, r4
 8003544:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800354a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003550:	4313      	orrs	r3, r2
 8003552:	61fb      	str	r3, [r7, #28]
 8003554:	e022      	b.n	800359c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	2240      	movs	r2, #64	; 0x40
 800355e:	4013      	ands	r3, r2
 8003560:	d102      	bne.n	8003568 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2200      	movs	r2, #0
 8003566:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	785b      	ldrb	r3, [r3, #1]
 8003572:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003574:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800357a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	78db      	ldrb	r3, [r3, #3]
 8003580:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003582:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2120      	movs	r1, #32
 8003588:	5c5b      	ldrb	r3, [r3, r1]
 800358a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800358c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003592:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003598:	4313      	orrs	r3, r2
 800359a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	22ca      	movs	r2, #202	; 0xca
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2253      	movs	r2, #83	; 0x53
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d14c      	bne.n	800365e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4957      	ldr	r1, [pc, #348]	; (800372c <HAL_RTC_SetAlarm_IT+0x274>)
 80035d0:	400a      	ands	r2, r1
 80035d2:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2101      	movs	r1, #1
 80035e0:	430a      	orrs	r2, r1
 80035e2:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80035e4:	f7fe fb74 	bl	8001cd0 <HAL_GetTick>
 80035e8:	0003      	movs	r3, r0
 80035ea:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80035ec:	e016      	b.n	800361c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80035ee:	f7fe fb6f 	bl	8001cd0 <HAL_GetTick>
 80035f2:	0002      	movs	r2, r0
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	1ad2      	subs	r2, r2, r3
 80035f8:	23fa      	movs	r3, #250	; 0xfa
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d90d      	bls.n	800361c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	22ff      	movs	r2, #255	; 0xff
 8003606:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2229      	movs	r2, #41	; 0x29
 800360c:	2103      	movs	r1, #3
 800360e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2228      	movs	r2, #40	; 0x28
 8003614:	2100      	movs	r1, #0
 8003616:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e082      	b.n	8003722 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	4013      	ands	r3, r2
 8003626:	d0e2      	beq.n	80035ee <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2180      	movs	r1, #128	; 0x80
 8003644:	0049      	lsls	r1, r1, #1
 8003646:	430a      	orrs	r2, r1
 8003648:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699a      	ldr	r2, [r3, #24]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2180      	movs	r1, #128	; 0x80
 8003656:	0149      	lsls	r1, r1, #5
 8003658:	430a      	orrs	r2, r1
 800365a:	619a      	str	r2, [r3, #24]
 800365c:	e04b      	b.n	80036f6 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	699a      	ldr	r2, [r3, #24]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4931      	ldr	r1, [pc, #196]	; (8003730 <HAL_RTC_SetAlarm_IT+0x278>)
 800366a:	400a      	ands	r2, r1
 800366c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2102      	movs	r1, #2
 800367a:	430a      	orrs	r2, r1
 800367c:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800367e:	f7fe fb27 	bl	8001cd0 <HAL_GetTick>
 8003682:	0003      	movs	r3, r0
 8003684:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003686:	e016      	b.n	80036b6 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003688:	f7fe fb22 	bl	8001cd0 <HAL_GetTick>
 800368c:	0002      	movs	r2, r0
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	1ad2      	subs	r2, r2, r3
 8003692:	23fa      	movs	r3, #250	; 0xfa
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	429a      	cmp	r2, r3
 8003698:	d90d      	bls.n	80036b6 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	22ff      	movs	r2, #255	; 0xff
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2229      	movs	r2, #41	; 0x29
 80036a6:	2103      	movs	r1, #3
 80036a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2228      	movs	r2, #40	; 0x28
 80036ae:	2100      	movs	r1, #0
 80036b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e035      	b.n	8003722 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	2202      	movs	r2, #2
 80036be:	4013      	ands	r3, r2
 80036c0:	d0e2      	beq.n	8003688 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699a      	ldr	r2, [r3, #24]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2180      	movs	r1, #128	; 0x80
 80036de:	0089      	lsls	r1, r1, #2
 80036e0:	430a      	orrs	r2, r1
 80036e2:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2180      	movs	r1, #128	; 0x80
 80036f0:	0189      	lsls	r1, r1, #6
 80036f2:	430a      	orrs	r2, r1
 80036f4:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80036f6:	4a0f      	ldr	r2, [pc, #60]	; (8003734 <HAL_RTC_SetAlarm_IT+0x27c>)
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	58d3      	ldr	r3, [r2, r3]
 80036fc:	490d      	ldr	r1, [pc, #52]	; (8003734 <HAL_RTC_SetAlarm_IT+0x27c>)
 80036fe:	2280      	movs	r2, #128	; 0x80
 8003700:	0312      	lsls	r2, r2, #12
 8003702:	4313      	orrs	r3, r2
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	22ff      	movs	r2, #255	; 0xff
 800370e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2229      	movs	r2, #41	; 0x29
 8003714:	2101      	movs	r1, #1
 8003716:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2228      	movs	r2, #40	; 0x28
 800371c:	2100      	movs	r1, #0
 800371e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	0018      	movs	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	b009      	add	sp, #36	; 0x24
 8003728:	bd90      	pop	{r4, r7, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	fffffeff 	.word	0xfffffeff
 8003730:	fffffdff 	.word	0xfffffdff
 8003734:	40021800 	.word	0x40021800

08003738 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	429a      	cmp	r2, r3
 800374e:	d144      	bne.n	80037da <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2280      	movs	r2, #128	; 0x80
 8003754:	0052      	lsls	r2, r2, #1
 8003756:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	045b      	lsls	r3, r3, #17
 8003768:	0c5b      	lsrs	r3, r3, #17
 800376a:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	0c1b      	lsrs	r3, r3, #16
 8003770:	b2db      	uxtb	r3, r3
 8003772:	223f      	movs	r2, #63	; 0x3f
 8003774:	4013      	ands	r3, r2
 8003776:	b2da      	uxtb	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	0a1b      	lsrs	r3, r3, #8
 8003780:	b2db      	uxtb	r3, r3
 8003782:	227f      	movs	r2, #127	; 0x7f
 8003784:	4013      	ands	r3, r2
 8003786:	b2da      	uxtb	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	227f      	movs	r2, #127	; 0x7f
 8003792:	4013      	ands	r3, r2
 8003794:	b2da      	uxtb	r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	0d9b      	lsrs	r3, r3, #22
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2201      	movs	r2, #1
 80037a2:	4013      	ands	r3, r2
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	0e1b      	lsrs	r3, r3, #24
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	223f      	movs	r2, #63	; 0x3f
 80037b8:	4013      	ands	r3, r2
 80037ba:	b2d9      	uxtb	r1, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2220      	movs	r2, #32
 80037c0:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	05db      	lsls	r3, r3, #23
 80037c8:	401a      	ands	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	4a3b      	ldr	r2, [pc, #236]	; (80038c0 <HAL_RTC_GetAlarm+0x188>)
 80037d2:	401a      	ands	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	615a      	str	r2, [r3, #20]
 80037d8:	e043      	b.n	8003862 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2280      	movs	r2, #128	; 0x80
 80037de:	0092      	lsls	r2, r2, #2
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e8:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f0:	045b      	lsls	r3, r3, #17
 80037f2:	0c5b      	lsrs	r3, r3, #17
 80037f4:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	0c1b      	lsrs	r3, r3, #16
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	223f      	movs	r2, #63	; 0x3f
 80037fe:	4013      	ands	r3, r2
 8003800:	b2da      	uxtb	r2, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	0a1b      	lsrs	r3, r3, #8
 800380a:	b2db      	uxtb	r3, r3
 800380c:	227f      	movs	r2, #127	; 0x7f
 800380e:	4013      	ands	r3, r2
 8003810:	b2da      	uxtb	r2, r3
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	227f      	movs	r2, #127	; 0x7f
 800381c:	4013      	ands	r3, r2
 800381e:	b2da      	uxtb	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	0d9b      	lsrs	r3, r3, #22
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2201      	movs	r2, #1
 800382c:	4013      	ands	r3, r2
 800382e:	b2da      	uxtb	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	0e1b      	lsrs	r3, r3, #24
 800383e:	b2db      	uxtb	r3, r3
 8003840:	223f      	movs	r2, #63	; 0x3f
 8003842:	4013      	ands	r3, r2
 8003844:	b2d9      	uxtb	r1, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2220      	movs	r2, #32
 800384a:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	05db      	lsls	r3, r3, #23
 8003852:	401a      	ands	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	4a19      	ldr	r2, [pc, #100]	; (80038c0 <HAL_RTC_GetAlarm+0x188>)
 800385c:	401a      	ands	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d125      	bne.n	80038b4 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	0018      	movs	r0, r3
 800386e:	f000 f93d 	bl	8003aec <RTC_Bcd2ToByte>
 8003872:	0003      	movs	r3, r0
 8003874:	001a      	movs	r2, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	785b      	ldrb	r3, [r3, #1]
 800387e:	0018      	movs	r0, r3
 8003880:	f000 f934 	bl	8003aec <RTC_Bcd2ToByte>
 8003884:	0003      	movs	r3, r0
 8003886:	001a      	movs	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	789b      	ldrb	r3, [r3, #2]
 8003890:	0018      	movs	r0, r3
 8003892:	f000 f92b 	bl	8003aec <RTC_Bcd2ToByte>
 8003896:	0003      	movs	r3, r0
 8003898:	001a      	movs	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2220      	movs	r2, #32
 80038a2:	5c9b      	ldrb	r3, [r3, r2]
 80038a4:	0018      	movs	r0, r3
 80038a6:	f000 f921 	bl	8003aec <RTC_Bcd2ToByte>
 80038aa:	0003      	movs	r3, r0
 80038ac:	0019      	movs	r1, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2220      	movs	r2, #32
 80038b2:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	0018      	movs	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b006      	add	sp, #24
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	80808080 	.word	0x80808080

080038c4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	015b      	lsls	r3, r3, #5
 80038d6:	4013      	ands	r3, r2
 80038d8:	d011      	beq.n	80038fe <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e0:	2201      	movs	r2, #1
 80038e2:	4013      	ands	r3, r2
 80038e4:	d00b      	beq.n	80038fe <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2101      	movs	r1, #1
 80038f2:	430a      	orrs	r2, r1
 80038f4:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	0018      	movs	r0, r3
 80038fa:	f7fd f9bb 	bl	8000c74 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699a      	ldr	r2, [r3, #24]
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	019b      	lsls	r3, r3, #6
 8003908:	4013      	ands	r3, r2
 800390a:	d011      	beq.n	8003930 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003912:	2202      	movs	r2, #2
 8003914:	4013      	ands	r3, r2
 8003916:	d00b      	beq.n	8003930 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2102      	movs	r1, #2
 8003924:	430a      	orrs	r2, r1
 8003926:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	0018      	movs	r0, r3
 800392c:	f000 f8fb 	bl	8003b26 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2229      	movs	r2, #41	; 0x29
 8003934:	2101      	movs	r1, #1
 8003936:	5499      	strb	r1, [r3, r2]
}
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	21a0      	movs	r1, #160	; 0xa0
 8003954:	438a      	bics	r2, r1
 8003956:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003958:	f7fe f9ba 	bl	8001cd0 <HAL_GetTick>
 800395c:	0003      	movs	r3, r0
 800395e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003960:	e00a      	b.n	8003978 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003962:	f7fe f9b5 	bl	8001cd0 <HAL_GetTick>
 8003966:	0002      	movs	r2, r0
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1ad2      	subs	r2, r2, r3
 800396c:	23fa      	movs	r3, #250	; 0xfa
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	429a      	cmp	r2, r3
 8003972:	d901      	bls.n	8003978 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e006      	b.n	8003986 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	4013      	ands	r3, r2
 8003982:	d0ee      	beq.n	8003962 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	0018      	movs	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	b004      	add	sp, #16
 800398c:	bd80      	pop	{r7, pc}

0800398e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8003996:	230f      	movs	r3, #15
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	2240      	movs	r2, #64	; 0x40
 80039a6:	4013      	ands	r3, r2
 80039a8:	d12c      	bne.n	8003a04 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2180      	movs	r1, #128	; 0x80
 80039b6:	430a      	orrs	r2, r1
 80039b8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80039ba:	f7fe f989 	bl	8001cd0 <HAL_GetTick>
 80039be:	0003      	movs	r3, r0
 80039c0:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80039c2:	e014      	b.n	80039ee <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80039c4:	f7fe f984 	bl	8001cd0 <HAL_GetTick>
 80039c8:	0002      	movs	r2, r0
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	1ad2      	subs	r2, r2, r3
 80039ce:	200f      	movs	r0, #15
 80039d0:	183b      	adds	r3, r7, r0
 80039d2:	1839      	adds	r1, r7, r0
 80039d4:	7809      	ldrb	r1, [r1, #0]
 80039d6:	7019      	strb	r1, [r3, #0]
 80039d8:	23fa      	movs	r3, #250	; 0xfa
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	429a      	cmp	r2, r3
 80039de:	d906      	bls.n	80039ee <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80039e0:	183b      	adds	r3, r7, r0
 80039e2:	2203      	movs	r2, #3
 80039e4:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2229      	movs	r2, #41	; 0x29
 80039ea:	2103      	movs	r1, #3
 80039ec:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2240      	movs	r2, #64	; 0x40
 80039f6:	4013      	ands	r3, r2
 80039f8:	d104      	bne.n	8003a04 <RTC_EnterInitMode+0x76>
 80039fa:	230f      	movs	r3, #15
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d1df      	bne.n	80039c4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003a04:	230f      	movs	r3, #15
 8003a06:	18fb      	adds	r3, r7, r3
 8003a08:	781b      	ldrb	r3, [r3, #0]
}
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	b004      	add	sp, #16
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a14:	b590      	push	{r4, r7, lr}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1c:	240f      	movs	r4, #15
 8003a1e:	193b      	adds	r3, r7, r4
 8003a20:	2200      	movs	r2, #0
 8003a22:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003a24:	4b1c      	ldr	r3, [pc, #112]	; (8003a98 <RTC_ExitInitMode+0x84>)
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <RTC_ExitInitMode+0x84>)
 8003a2a:	2180      	movs	r1, #128	; 0x80
 8003a2c:	438a      	bics	r2, r1
 8003a2e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003a30:	4b19      	ldr	r3, [pc, #100]	; (8003a98 <RTC_ExitInitMode+0x84>)
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	2220      	movs	r2, #32
 8003a36:	4013      	ands	r3, r2
 8003a38:	d10d      	bne.n	8003a56 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f7ff ff7f 	bl	8003940 <HAL_RTC_WaitForSynchro>
 8003a42:	1e03      	subs	r3, r0, #0
 8003a44:	d021      	beq.n	8003a8a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2229      	movs	r2, #41	; 0x29
 8003a4a:	2103      	movs	r1, #3
 8003a4c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003a4e:	193b      	adds	r3, r7, r4
 8003a50:	2203      	movs	r2, #3
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	e019      	b.n	8003a8a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <RTC_ExitInitMode+0x84>)
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <RTC_ExitInitMode+0x84>)
 8003a5c:	2120      	movs	r1, #32
 8003a5e:	438a      	bics	r2, r1
 8003a60:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f7ff ff6b 	bl	8003940 <HAL_RTC_WaitForSynchro>
 8003a6a:	1e03      	subs	r3, r0, #0
 8003a6c:	d007      	beq.n	8003a7e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2229      	movs	r2, #41	; 0x29
 8003a72:	2103      	movs	r1, #3
 8003a74:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003a76:	230f      	movs	r3, #15
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <RTC_ExitInitMode+0x84>)
 8003a80:	699a      	ldr	r2, [r3, #24]
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <RTC_ExitInitMode+0x84>)
 8003a84:	2120      	movs	r1, #32
 8003a86:	430a      	orrs	r2, r1
 8003a88:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003a8a:	230f      	movs	r3, #15
 8003a8c:	18fb      	adds	r3, r7, r3
 8003a8e:	781b      	ldrb	r3, [r3, #0]
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b005      	add	sp, #20
 8003a96:	bd90      	pop	{r4, r7, pc}
 8003a98:	40002800 	.word	0x40002800

08003a9c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	0002      	movs	r2, r0
 8003aa4:	1dfb      	adds	r3, r7, #7
 8003aa6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003aac:	230b      	movs	r3, #11
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	1dfa      	adds	r2, r7, #7
 8003ab2:	7812      	ldrb	r2, [r2, #0]
 8003ab4:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8003ab6:	e008      	b.n	8003aca <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	3301      	adds	r3, #1
 8003abc:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003abe:	220b      	movs	r2, #11
 8003ac0:	18bb      	adds	r3, r7, r2
 8003ac2:	18ba      	adds	r2, r7, r2
 8003ac4:	7812      	ldrb	r2, [r2, #0]
 8003ac6:	3a0a      	subs	r2, #10
 8003ac8:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003aca:	210b      	movs	r1, #11
 8003acc:	187b      	adds	r3, r7, r1
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b09      	cmp	r3, #9
 8003ad2:	d8f1      	bhi.n	8003ab8 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	187b      	adds	r3, r7, r1
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	b2db      	uxtb	r3, r3
}
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b004      	add	sp, #16
 8003aea:	bd80      	pop	{r7, pc}

08003aec <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	0002      	movs	r2, r0
 8003af4:	1dfb      	adds	r3, r7, #7
 8003af6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003af8:	1dfb      	adds	r3, r7, #7
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	001a      	movs	r2, r3
 8003b02:	0013      	movs	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	189b      	adds	r3, r3, r2
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	1dfb      	adds	r3, r7, #7
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	210f      	movs	r1, #15
 8003b16:	400b      	ands	r3, r1
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	18d3      	adds	r3, r2, r3
 8003b1c:	b2db      	uxtb	r3, r3
}
 8003b1e:	0018      	movs	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b004      	add	sp, #16
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	46bd      	mov	sp, r7
 8003b32:	b002      	add	sp, #8
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e04a      	b.n	8003bde <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	223d      	movs	r2, #61	; 0x3d
 8003b4c:	5c9b      	ldrb	r3, [r3, r2]
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d107      	bne.n	8003b64 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	223c      	movs	r2, #60	; 0x3c
 8003b58:	2100      	movs	r1, #0
 8003b5a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f7fd fe7a 	bl	8001858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	223d      	movs	r2, #61	; 0x3d
 8003b68:	2102      	movs	r1, #2
 8003b6a:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	0019      	movs	r1, r3
 8003b76:	0010      	movs	r0, r2
 8003b78:	f000 fade 	bl	8004138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2248      	movs	r2, #72	; 0x48
 8003b80:	2101      	movs	r1, #1
 8003b82:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	223e      	movs	r2, #62	; 0x3e
 8003b88:	2101      	movs	r1, #1
 8003b8a:	5499      	strb	r1, [r3, r2]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	223f      	movs	r2, #63	; 0x3f
 8003b90:	2101      	movs	r1, #1
 8003b92:	5499      	strb	r1, [r3, r2]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2240      	movs	r2, #64	; 0x40
 8003b98:	2101      	movs	r1, #1
 8003b9a:	5499      	strb	r1, [r3, r2]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2241      	movs	r2, #65	; 0x41
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	5499      	strb	r1, [r3, r2]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2242      	movs	r2, #66	; 0x42
 8003ba8:	2101      	movs	r1, #1
 8003baa:	5499      	strb	r1, [r3, r2]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2243      	movs	r2, #67	; 0x43
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2244      	movs	r2, #68	; 0x44
 8003bb8:	2101      	movs	r1, #1
 8003bba:	5499      	strb	r1, [r3, r2]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2245      	movs	r2, #69	; 0x45
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	5499      	strb	r1, [r3, r2]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2246      	movs	r2, #70	; 0x46
 8003bc8:	2101      	movs	r1, #1
 8003bca:	5499      	strb	r1, [r3, r2]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2247      	movs	r2, #71	; 0x47
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	223d      	movs	r2, #61	; 0x3d
 8003bd8:	2101      	movs	r1, #1
 8003bda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b002      	add	sp, #8
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	223d      	movs	r2, #61	; 0x3d
 8003bf4:	5c9b      	ldrb	r3, [r3, r2]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d001      	beq.n	8003c00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e035      	b.n	8003c6c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	223d      	movs	r2, #61	; 0x3d
 8003c04:	2102      	movs	r1, #2
 8003c06:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a19      	ldr	r2, [pc, #100]	; (8003c74 <HAL_TIM_Base_Start+0x8c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00a      	beq.n	8003c28 <HAL_TIM_Base_Start+0x40>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	05db      	lsls	r3, r3, #23
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d004      	beq.n	8003c28 <HAL_TIM_Base_Start+0x40>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a15      	ldr	r2, [pc, #84]	; (8003c78 <HAL_TIM_Base_Start+0x90>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d116      	bne.n	8003c56 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <HAL_TIM_Base_Start+0x94>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b06      	cmp	r3, #6
 8003c38:	d016      	beq.n	8003c68 <HAL_TIM_Base_Start+0x80>
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	2380      	movs	r3, #128	; 0x80
 8003c3e:	025b      	lsls	r3, r3, #9
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d011      	beq.n	8003c68 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2101      	movs	r1, #1
 8003c50:	430a      	orrs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c54:	e008      	b.n	8003c68 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2101      	movs	r1, #1
 8003c62:	430a      	orrs	r2, r1
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	e000      	b.n	8003c6a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c68:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b004      	add	sp, #16
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40012c00 	.word	0x40012c00
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	00010007 	.word	0x00010007

08003c80 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	4a0d      	ldr	r2, [pc, #52]	; (8003cc4 <HAL_TIM_Base_Stop+0x44>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	d10d      	bne.n	8003cb0 <HAL_TIM_Base_Stop+0x30>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	4a0b      	ldr	r2, [pc, #44]	; (8003cc8 <HAL_TIM_Base_Stop+0x48>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d107      	bne.n	8003cb0 <HAL_TIM_Base_Stop+0x30>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2101      	movs	r1, #1
 8003cac:	438a      	bics	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	223d      	movs	r2, #61	; 0x3d
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	0018      	movs	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b002      	add	sp, #8
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	00001111 	.word	0x00001111
 8003cc8:	00000444 	.word	0x00000444

08003ccc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e04a      	b.n	8003d74 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	223d      	movs	r2, #61	; 0x3d
 8003ce2:	5c9b      	ldrb	r3, [r3, r2]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d107      	bne.n	8003cfa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	223c      	movs	r2, #60	; 0x3c
 8003cee:	2100      	movs	r1, #0
 8003cf0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f7fd fd79 	bl	80017ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	223d      	movs	r2, #61	; 0x3d
 8003cfe:	2102      	movs	r1, #2
 8003d00:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	0019      	movs	r1, r3
 8003d0c:	0010      	movs	r0, r2
 8003d0e:	f000 fa13 	bl	8004138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2248      	movs	r2, #72	; 0x48
 8003d16:	2101      	movs	r1, #1
 8003d18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	223e      	movs	r2, #62	; 0x3e
 8003d1e:	2101      	movs	r1, #1
 8003d20:	5499      	strb	r1, [r3, r2]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	223f      	movs	r2, #63	; 0x3f
 8003d26:	2101      	movs	r1, #1
 8003d28:	5499      	strb	r1, [r3, r2]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2240      	movs	r2, #64	; 0x40
 8003d2e:	2101      	movs	r1, #1
 8003d30:	5499      	strb	r1, [r3, r2]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2241      	movs	r2, #65	; 0x41
 8003d36:	2101      	movs	r1, #1
 8003d38:	5499      	strb	r1, [r3, r2]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2242      	movs	r2, #66	; 0x42
 8003d3e:	2101      	movs	r1, #1
 8003d40:	5499      	strb	r1, [r3, r2]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2243      	movs	r2, #67	; 0x43
 8003d46:	2101      	movs	r1, #1
 8003d48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2244      	movs	r2, #68	; 0x44
 8003d4e:	2101      	movs	r1, #1
 8003d50:	5499      	strb	r1, [r3, r2]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2245      	movs	r2, #69	; 0x45
 8003d56:	2101      	movs	r1, #1
 8003d58:	5499      	strb	r1, [r3, r2]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2246      	movs	r2, #70	; 0x46
 8003d5e:	2101      	movs	r1, #1
 8003d60:	5499      	strb	r1, [r3, r2]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2247      	movs	r2, #71	; 0x47
 8003d66:	2101      	movs	r1, #1
 8003d68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	223d      	movs	r2, #61	; 0x3d
 8003d6e:	2101      	movs	r1, #1
 8003d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b002      	add	sp, #8
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d108      	bne.n	8003d9e <HAL_TIM_PWM_Start+0x22>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	223e      	movs	r2, #62	; 0x3e
 8003d90:	5c9b      	ldrb	r3, [r3, r2]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	1e5a      	subs	r2, r3, #1
 8003d98:	4193      	sbcs	r3, r2
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	e037      	b.n	8003e0e <HAL_TIM_PWM_Start+0x92>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d108      	bne.n	8003db6 <HAL_TIM_PWM_Start+0x3a>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	223f      	movs	r2, #63	; 0x3f
 8003da8:	5c9b      	ldrb	r3, [r3, r2]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	1e5a      	subs	r2, r3, #1
 8003db0:	4193      	sbcs	r3, r2
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	e02b      	b.n	8003e0e <HAL_TIM_PWM_Start+0x92>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d108      	bne.n	8003dce <HAL_TIM_PWM_Start+0x52>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2240      	movs	r2, #64	; 0x40
 8003dc0:	5c9b      	ldrb	r3, [r3, r2]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	1e5a      	subs	r2, r3, #1
 8003dc8:	4193      	sbcs	r3, r2
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	e01f      	b.n	8003e0e <HAL_TIM_PWM_Start+0x92>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b0c      	cmp	r3, #12
 8003dd2:	d108      	bne.n	8003de6 <HAL_TIM_PWM_Start+0x6a>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2241      	movs	r2, #65	; 0x41
 8003dd8:	5c9b      	ldrb	r3, [r3, r2]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	1e5a      	subs	r2, r3, #1
 8003de0:	4193      	sbcs	r3, r2
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e013      	b.n	8003e0e <HAL_TIM_PWM_Start+0x92>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b10      	cmp	r3, #16
 8003dea:	d108      	bne.n	8003dfe <HAL_TIM_PWM_Start+0x82>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2242      	movs	r2, #66	; 0x42
 8003df0:	5c9b      	ldrb	r3, [r3, r2]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	1e5a      	subs	r2, r3, #1
 8003df8:	4193      	sbcs	r3, r2
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	e007      	b.n	8003e0e <HAL_TIM_PWM_Start+0x92>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2243      	movs	r2, #67	; 0x43
 8003e02:	5c9b      	ldrb	r3, [r3, r2]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	1e5a      	subs	r2, r3, #1
 8003e0a:	4193      	sbcs	r3, r2
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e081      	b.n	8003f1a <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d104      	bne.n	8003e26 <HAL_TIM_PWM_Start+0xaa>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	223e      	movs	r2, #62	; 0x3e
 8003e20:	2102      	movs	r1, #2
 8003e22:	5499      	strb	r1, [r3, r2]
 8003e24:	e023      	b.n	8003e6e <HAL_TIM_PWM_Start+0xf2>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d104      	bne.n	8003e36 <HAL_TIM_PWM_Start+0xba>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	223f      	movs	r2, #63	; 0x3f
 8003e30:	2102      	movs	r1, #2
 8003e32:	5499      	strb	r1, [r3, r2]
 8003e34:	e01b      	b.n	8003e6e <HAL_TIM_PWM_Start+0xf2>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d104      	bne.n	8003e46 <HAL_TIM_PWM_Start+0xca>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2240      	movs	r2, #64	; 0x40
 8003e40:	2102      	movs	r1, #2
 8003e42:	5499      	strb	r1, [r3, r2]
 8003e44:	e013      	b.n	8003e6e <HAL_TIM_PWM_Start+0xf2>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b0c      	cmp	r3, #12
 8003e4a:	d104      	bne.n	8003e56 <HAL_TIM_PWM_Start+0xda>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2241      	movs	r2, #65	; 0x41
 8003e50:	2102      	movs	r1, #2
 8003e52:	5499      	strb	r1, [r3, r2]
 8003e54:	e00b      	b.n	8003e6e <HAL_TIM_PWM_Start+0xf2>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d104      	bne.n	8003e66 <HAL_TIM_PWM_Start+0xea>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2242      	movs	r2, #66	; 0x42
 8003e60:	2102      	movs	r1, #2
 8003e62:	5499      	strb	r1, [r3, r2]
 8003e64:	e003      	b.n	8003e6e <HAL_TIM_PWM_Start+0xf2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2243      	movs	r2, #67	; 0x43
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6839      	ldr	r1, [r7, #0]
 8003e74:	2201      	movs	r2, #1
 8003e76:	0018      	movs	r0, r3
 8003e78:	f000 fc70 	bl	800475c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a28      	ldr	r2, [pc, #160]	; (8003f24 <HAL_TIM_PWM_Start+0x1a8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d009      	beq.n	8003e9a <HAL_TIM_PWM_Start+0x11e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a27      	ldr	r2, [pc, #156]	; (8003f28 <HAL_TIM_PWM_Start+0x1ac>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d004      	beq.n	8003e9a <HAL_TIM_PWM_Start+0x11e>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a25      	ldr	r2, [pc, #148]	; (8003f2c <HAL_TIM_PWM_Start+0x1b0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d101      	bne.n	8003e9e <HAL_TIM_PWM_Start+0x122>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <HAL_TIM_PWM_Start+0x124>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	0209      	lsls	r1, r1, #8
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1a      	ldr	r2, [pc, #104]	; (8003f24 <HAL_TIM_PWM_Start+0x1a8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_TIM_PWM_Start+0x15a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	05db      	lsls	r3, r3, #23
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d004      	beq.n	8003ed6 <HAL_TIM_PWM_Start+0x15a>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a17      	ldr	r2, [pc, #92]	; (8003f30 <HAL_TIM_PWM_Start+0x1b4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d116      	bne.n	8003f04 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4a15      	ldr	r2, [pc, #84]	; (8003f34 <HAL_TIM_PWM_Start+0x1b8>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b06      	cmp	r3, #6
 8003ee6:	d016      	beq.n	8003f16 <HAL_TIM_PWM_Start+0x19a>
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	2380      	movs	r3, #128	; 0x80
 8003eec:	025b      	lsls	r3, r3, #9
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d011      	beq.n	8003f16 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2101      	movs	r1, #1
 8003efe:	430a      	orrs	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f02:	e008      	b.n	8003f16 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2101      	movs	r1, #1
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	e000      	b.n	8003f18 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f16:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b004      	add	sp, #16
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	40012c00 	.word	0x40012c00
 8003f28:	40014400 	.word	0x40014400
 8003f2c:	40014800 	.word	0x40014800
 8003f30:	40000400 	.word	0x40000400
 8003f34:	00010007 	.word	0x00010007

08003f38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f44:	2317      	movs	r3, #23
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	223c      	movs	r2, #60	; 0x3c
 8003f50:	5c9b      	ldrb	r3, [r3, r2]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d101      	bne.n	8003f5a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003f56:	2302      	movs	r3, #2
 8003f58:	e0e5      	b.n	8004126 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	223c      	movs	r2, #60	; 0x3c
 8003f5e:	2101      	movs	r1, #1
 8003f60:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b14      	cmp	r3, #20
 8003f66:	d900      	bls.n	8003f6a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003f68:	e0d1      	b.n	800410e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	009a      	lsls	r2, r3, #2
 8003f6e:	4b70      	ldr	r3, [pc, #448]	; (8004130 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003f70:	18d3      	adds	r3, r2, r3
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	0011      	movs	r1, r2
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f000 f950 	bl	8004224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2108      	movs	r1, #8
 8003f90:	430a      	orrs	r2, r1
 8003f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2104      	movs	r1, #4
 8003fa0:	438a      	bics	r2, r1
 8003fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6999      	ldr	r1, [r3, #24]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	619a      	str	r2, [r3, #24]
      break;
 8003fb6:	e0af      	b.n	8004118 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	0011      	movs	r1, r2
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f000 f9af 	bl	8004324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699a      	ldr	r2, [r3, #24]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2180      	movs	r1, #128	; 0x80
 8003fd2:	0109      	lsls	r1, r1, #4
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4954      	ldr	r1, [pc, #336]	; (8004134 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003fe4:	400a      	ands	r2, r1
 8003fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6999      	ldr	r1, [r3, #24]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	021a      	lsls	r2, r3, #8
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	619a      	str	r2, [r3, #24]
      break;
 8003ffc:	e08c      	b.n	8004118 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	0011      	movs	r1, r2
 8004006:	0018      	movs	r0, r3
 8004008:	f000 fa0a 	bl	8004420 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2108      	movs	r1, #8
 8004018:	430a      	orrs	r2, r1
 800401a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	69da      	ldr	r2, [r3, #28]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2104      	movs	r1, #4
 8004028:	438a      	bics	r2, r1
 800402a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69d9      	ldr	r1, [r3, #28]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	61da      	str	r2, [r3, #28]
      break;
 800403e:	e06b      	b.n	8004118 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	0011      	movs	r1, r2
 8004048:	0018      	movs	r0, r3
 800404a:	f000 fa6b 	bl	8004524 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69da      	ldr	r2, [r3, #28]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2180      	movs	r1, #128	; 0x80
 800405a:	0109      	lsls	r1, r1, #4
 800405c:	430a      	orrs	r2, r1
 800405e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69da      	ldr	r2, [r3, #28]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4932      	ldr	r1, [pc, #200]	; (8004134 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800406c:	400a      	ands	r2, r1
 800406e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69d9      	ldr	r1, [r3, #28]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	021a      	lsls	r2, r3, #8
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	61da      	str	r2, [r3, #28]
      break;
 8004084:	e048      	b.n	8004118 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	0011      	movs	r1, r2
 800408e:	0018      	movs	r0, r3
 8004090:	f000 faac 	bl	80045ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2108      	movs	r1, #8
 80040a0:	430a      	orrs	r2, r1
 80040a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2104      	movs	r1, #4
 80040b0:	438a      	bics	r2, r1
 80040b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	691a      	ldr	r2, [r3, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040c6:	e027      	b.n	8004118 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	0011      	movs	r1, r2
 80040d0:	0018      	movs	r0, r3
 80040d2:	f000 fae5 	bl	80046a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2180      	movs	r1, #128	; 0x80
 80040e2:	0109      	lsls	r1, r1, #4
 80040e4:	430a      	orrs	r2, r1
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4910      	ldr	r1, [pc, #64]	; (8004134 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80040f4:	400a      	ands	r2, r1
 80040f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	021a      	lsls	r2, r3, #8
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800410c:	e004      	b.n	8004118 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800410e:	2317      	movs	r3, #23
 8004110:	18fb      	adds	r3, r7, r3
 8004112:	2201      	movs	r2, #1
 8004114:	701a      	strb	r2, [r3, #0]
      break;
 8004116:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	223c      	movs	r2, #60	; 0x3c
 800411c:	2100      	movs	r1, #0
 800411e:	5499      	strb	r1, [r3, r2]

  return status;
 8004120:	2317      	movs	r3, #23
 8004122:	18fb      	adds	r3, r7, r3
 8004124:	781b      	ldrb	r3, [r3, #0]
}
 8004126:	0018      	movs	r0, r3
 8004128:	46bd      	mov	sp, r7
 800412a:	b006      	add	sp, #24
 800412c:	bd80      	pop	{r7, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	08006878 	.word	0x08006878
 8004134:	fffffbff 	.word	0xfffffbff

08004138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a30      	ldr	r2, [pc, #192]	; (800420c <TIM_Base_SetConfig+0xd4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d008      	beq.n	8004162 <TIM_Base_SetConfig+0x2a>
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	2380      	movs	r3, #128	; 0x80
 8004154:	05db      	lsls	r3, r3, #23
 8004156:	429a      	cmp	r2, r3
 8004158:	d003      	beq.n	8004162 <TIM_Base_SetConfig+0x2a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a2c      	ldr	r2, [pc, #176]	; (8004210 <TIM_Base_SetConfig+0xd8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d108      	bne.n	8004174 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2270      	movs	r2, #112	; 0x70
 8004166:	4393      	bics	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a25      	ldr	r2, [pc, #148]	; (800420c <TIM_Base_SetConfig+0xd4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d014      	beq.n	80041a6 <TIM_Base_SetConfig+0x6e>
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	05db      	lsls	r3, r3, #23
 8004182:	429a      	cmp	r2, r3
 8004184:	d00f      	beq.n	80041a6 <TIM_Base_SetConfig+0x6e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a21      	ldr	r2, [pc, #132]	; (8004210 <TIM_Base_SetConfig+0xd8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00b      	beq.n	80041a6 <TIM_Base_SetConfig+0x6e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a20      	ldr	r2, [pc, #128]	; (8004214 <TIM_Base_SetConfig+0xdc>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d007      	beq.n	80041a6 <TIM_Base_SetConfig+0x6e>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a1f      	ldr	r2, [pc, #124]	; (8004218 <TIM_Base_SetConfig+0xe0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d003      	beq.n	80041a6 <TIM_Base_SetConfig+0x6e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a1e      	ldr	r2, [pc, #120]	; (800421c <TIM_Base_SetConfig+0xe4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d108      	bne.n	80041b8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4a1d      	ldr	r2, [pc, #116]	; (8004220 <TIM_Base_SetConfig+0xe8>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2280      	movs	r2, #128	; 0x80
 80041bc:	4393      	bics	r3, r2
 80041be:	001a      	movs	r2, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a0a      	ldr	r2, [pc, #40]	; (800420c <TIM_Base_SetConfig+0xd4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d007      	beq.n	80041f6 <TIM_Base_SetConfig+0xbe>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a0b      	ldr	r2, [pc, #44]	; (8004218 <TIM_Base_SetConfig+0xe0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d003      	beq.n	80041f6 <TIM_Base_SetConfig+0xbe>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a0a      	ldr	r2, [pc, #40]	; (800421c <TIM_Base_SetConfig+0xe4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d103      	bne.n	80041fe <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	615a      	str	r2, [r3, #20]
}
 8004204:	46c0      	nop			; (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	b004      	add	sp, #16
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40012c00 	.word	0x40012c00
 8004210:	40000400 	.word	0x40000400
 8004214:	40002000 	.word	0x40002000
 8004218:	40014400 	.word	0x40014400
 800421c:	40014800 	.word	0x40014800
 8004220:	fffffcff 	.word	0xfffffcff

08004224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	2201      	movs	r2, #1
 8004234:	4393      	bics	r3, r2
 8004236:	001a      	movs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4a2e      	ldr	r2, [pc, #184]	; (800430c <TIM_OC1_SetConfig+0xe8>)
 8004252:	4013      	ands	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2203      	movs	r2, #3
 800425a:	4393      	bics	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2202      	movs	r2, #2
 800426c:	4393      	bics	r3, r2
 800426e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a24      	ldr	r2, [pc, #144]	; (8004310 <TIM_OC1_SetConfig+0xec>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d007      	beq.n	8004292 <TIM_OC1_SetConfig+0x6e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a23      	ldr	r2, [pc, #140]	; (8004314 <TIM_OC1_SetConfig+0xf0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d003      	beq.n	8004292 <TIM_OC1_SetConfig+0x6e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a22      	ldr	r2, [pc, #136]	; (8004318 <TIM_OC1_SetConfig+0xf4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d10c      	bne.n	80042ac <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2208      	movs	r2, #8
 8004296:	4393      	bics	r3, r2
 8004298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2204      	movs	r2, #4
 80042a8:	4393      	bics	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a18      	ldr	r2, [pc, #96]	; (8004310 <TIM_OC1_SetConfig+0xec>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d007      	beq.n	80042c4 <TIM_OC1_SetConfig+0xa0>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a17      	ldr	r2, [pc, #92]	; (8004314 <TIM_OC1_SetConfig+0xf0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d003      	beq.n	80042c4 <TIM_OC1_SetConfig+0xa0>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a16      	ldr	r2, [pc, #88]	; (8004318 <TIM_OC1_SetConfig+0xf4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d111      	bne.n	80042e8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	4a15      	ldr	r2, [pc, #84]	; (800431c <TIM_OC1_SetConfig+0xf8>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	4a14      	ldr	r2, [pc, #80]	; (8004320 <TIM_OC1_SetConfig+0xfc>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	621a      	str	r2, [r3, #32]
}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	46bd      	mov	sp, r7
 8004306:	b006      	add	sp, #24
 8004308:	bd80      	pop	{r7, pc}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	fffeff8f 	.word	0xfffeff8f
 8004310:	40012c00 	.word	0x40012c00
 8004314:	40014400 	.word	0x40014400
 8004318:	40014800 	.word	0x40014800
 800431c:	fffffeff 	.word	0xfffffeff
 8004320:	fffffdff 	.word	0xfffffdff

08004324 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	2210      	movs	r2, #16
 8004334:	4393      	bics	r3, r2
 8004336:	001a      	movs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4a2c      	ldr	r2, [pc, #176]	; (8004404 <TIM_OC2_SetConfig+0xe0>)
 8004352:	4013      	ands	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a2b      	ldr	r2, [pc, #172]	; (8004408 <TIM_OC2_SetConfig+0xe4>)
 800435a:	4013      	ands	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	021b      	lsls	r3, r3, #8
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2220      	movs	r2, #32
 800436e:	4393      	bics	r3, r2
 8004370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a22      	ldr	r2, [pc, #136]	; (800440c <TIM_OC2_SetConfig+0xe8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d10d      	bne.n	80043a2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2280      	movs	r2, #128	; 0x80
 800438a:	4393      	bics	r3, r2
 800438c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2240      	movs	r2, #64	; 0x40
 800439e:	4393      	bics	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a19      	ldr	r2, [pc, #100]	; (800440c <TIM_OC2_SetConfig+0xe8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d007      	beq.n	80043ba <TIM_OC2_SetConfig+0x96>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a18      	ldr	r2, [pc, #96]	; (8004410 <TIM_OC2_SetConfig+0xec>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d003      	beq.n	80043ba <TIM_OC2_SetConfig+0x96>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a17      	ldr	r2, [pc, #92]	; (8004414 <TIM_OC2_SetConfig+0xf0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d113      	bne.n	80043e2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4a16      	ldr	r2, [pc, #88]	; (8004418 <TIM_OC2_SetConfig+0xf4>)
 80043be:	4013      	ands	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	4a15      	ldr	r2, [pc, #84]	; (800441c <TIM_OC2_SetConfig+0xf8>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	621a      	str	r2, [r3, #32]
}
 80043fc:	46c0      	nop			; (mov r8, r8)
 80043fe:	46bd      	mov	sp, r7
 8004400:	b006      	add	sp, #24
 8004402:	bd80      	pop	{r7, pc}
 8004404:	feff8fff 	.word	0xfeff8fff
 8004408:	fffffcff 	.word	0xfffffcff
 800440c:	40012c00 	.word	0x40012c00
 8004410:	40014400 	.word	0x40014400
 8004414:	40014800 	.word	0x40014800
 8004418:	fffffbff 	.word	0xfffffbff
 800441c:	fffff7ff 	.word	0xfffff7ff

08004420 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	4a33      	ldr	r2, [pc, #204]	; (80044fc <TIM_OC3_SetConfig+0xdc>)
 8004430:	401a      	ands	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4a2d      	ldr	r2, [pc, #180]	; (8004500 <TIM_OC3_SetConfig+0xe0>)
 800444c:	4013      	ands	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2203      	movs	r2, #3
 8004454:	4393      	bics	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	4a27      	ldr	r2, [pc, #156]	; (8004504 <TIM_OC3_SetConfig+0xe4>)
 8004466:	4013      	ands	r3, r2
 8004468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a23      	ldr	r2, [pc, #140]	; (8004508 <TIM_OC3_SetConfig+0xe8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d10d      	bne.n	800449a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	4a22      	ldr	r2, [pc, #136]	; (800450c <TIM_OC3_SetConfig+0xec>)
 8004482:	4013      	ands	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	4a1e      	ldr	r2, [pc, #120]	; (8004510 <TIM_OC3_SetConfig+0xf0>)
 8004496:	4013      	ands	r3, r2
 8004498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a1a      	ldr	r2, [pc, #104]	; (8004508 <TIM_OC3_SetConfig+0xe8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d007      	beq.n	80044b2 <TIM_OC3_SetConfig+0x92>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a1b      	ldr	r2, [pc, #108]	; (8004514 <TIM_OC3_SetConfig+0xf4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d003      	beq.n	80044b2 <TIM_OC3_SetConfig+0x92>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a1a      	ldr	r2, [pc, #104]	; (8004518 <TIM_OC3_SetConfig+0xf8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d113      	bne.n	80044da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4a19      	ldr	r2, [pc, #100]	; (800451c <TIM_OC3_SetConfig+0xfc>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4a18      	ldr	r2, [pc, #96]	; (8004520 <TIM_OC3_SetConfig+0x100>)
 80044be:	4013      	ands	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	621a      	str	r2, [r3, #32]
}
 80044f4:	46c0      	nop			; (mov r8, r8)
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b006      	add	sp, #24
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	fffffeff 	.word	0xfffffeff
 8004500:	fffeff8f 	.word	0xfffeff8f
 8004504:	fffffdff 	.word	0xfffffdff
 8004508:	40012c00 	.word	0x40012c00
 800450c:	fffff7ff 	.word	0xfffff7ff
 8004510:	fffffbff 	.word	0xfffffbff
 8004514:	40014400 	.word	0x40014400
 8004518:	40014800 	.word	0x40014800
 800451c:	ffffefff 	.word	0xffffefff
 8004520:	ffffdfff 	.word	0xffffdfff

08004524 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	4a26      	ldr	r2, [pc, #152]	; (80045cc <TIM_OC4_SetConfig+0xa8>)
 8004534:	401a      	ands	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4a20      	ldr	r2, [pc, #128]	; (80045d0 <TIM_OC4_SetConfig+0xac>)
 8004550:	4013      	ands	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4a1f      	ldr	r2, [pc, #124]	; (80045d4 <TIM_OC4_SetConfig+0xb0>)
 8004558:	4013      	ands	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4a1b      	ldr	r2, [pc, #108]	; (80045d8 <TIM_OC4_SetConfig+0xb4>)
 800456c:	4013      	ands	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	031b      	lsls	r3, r3, #12
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a17      	ldr	r2, [pc, #92]	; (80045dc <TIM_OC4_SetConfig+0xb8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d007      	beq.n	8004594 <TIM_OC4_SetConfig+0x70>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a16      	ldr	r2, [pc, #88]	; (80045e0 <TIM_OC4_SetConfig+0xbc>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <TIM_OC4_SetConfig+0x70>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <TIM_OC4_SetConfig+0xc0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d109      	bne.n	80045a8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	4a14      	ldr	r2, [pc, #80]	; (80045e8 <TIM_OC4_SetConfig+0xc4>)
 8004598:	4013      	ands	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	019b      	lsls	r3, r3, #6
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	621a      	str	r2, [r3, #32]
}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b006      	add	sp, #24
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	ffffefff 	.word	0xffffefff
 80045d0:	feff8fff 	.word	0xfeff8fff
 80045d4:	fffffcff 	.word	0xfffffcff
 80045d8:	ffffdfff 	.word	0xffffdfff
 80045dc:	40012c00 	.word	0x40012c00
 80045e0:	40014400 	.word	0x40014400
 80045e4:	40014800 	.word	0x40014800
 80045e8:	ffffbfff 	.word	0xffffbfff

080045ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	4a23      	ldr	r2, [pc, #140]	; (8004688 <TIM_OC5_SetConfig+0x9c>)
 80045fc:	401a      	ands	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4a1d      	ldr	r2, [pc, #116]	; (800468c <TIM_OC5_SetConfig+0xa0>)
 8004618:	4013      	ands	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4a19      	ldr	r2, [pc, #100]	; (8004690 <TIM_OC5_SetConfig+0xa4>)
 800462a:	4013      	ands	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	041b      	lsls	r3, r3, #16
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a15      	ldr	r2, [pc, #84]	; (8004694 <TIM_OC5_SetConfig+0xa8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d007      	beq.n	8004652 <TIM_OC5_SetConfig+0x66>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a14      	ldr	r2, [pc, #80]	; (8004698 <TIM_OC5_SetConfig+0xac>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d003      	beq.n	8004652 <TIM_OC5_SetConfig+0x66>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a13      	ldr	r2, [pc, #76]	; (800469c <TIM_OC5_SetConfig+0xb0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d109      	bne.n	8004666 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	4a0c      	ldr	r2, [pc, #48]	; (8004688 <TIM_OC5_SetConfig+0x9c>)
 8004656:	4013      	ands	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	021b      	lsls	r3, r3, #8
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	621a      	str	r2, [r3, #32]
}
 8004680:	46c0      	nop			; (mov r8, r8)
 8004682:	46bd      	mov	sp, r7
 8004684:	b006      	add	sp, #24
 8004686:	bd80      	pop	{r7, pc}
 8004688:	fffeffff 	.word	0xfffeffff
 800468c:	fffeff8f 	.word	0xfffeff8f
 8004690:	fffdffff 	.word	0xfffdffff
 8004694:	40012c00 	.word	0x40012c00
 8004698:	40014400 	.word	0x40014400
 800469c:	40014800 	.word	0x40014800

080046a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	4a24      	ldr	r2, [pc, #144]	; (8004740 <TIM_OC6_SetConfig+0xa0>)
 80046b0:	401a      	ands	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4a1e      	ldr	r2, [pc, #120]	; (8004744 <TIM_OC6_SetConfig+0xa4>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	021b      	lsls	r3, r3, #8
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4a1a      	ldr	r2, [pc, #104]	; (8004748 <TIM_OC6_SetConfig+0xa8>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	051b      	lsls	r3, r3, #20
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a16      	ldr	r2, [pc, #88]	; (800474c <TIM_OC6_SetConfig+0xac>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d007      	beq.n	8004708 <TIM_OC6_SetConfig+0x68>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a15      	ldr	r2, [pc, #84]	; (8004750 <TIM_OC6_SetConfig+0xb0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d003      	beq.n	8004708 <TIM_OC6_SetConfig+0x68>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a14      	ldr	r2, [pc, #80]	; (8004754 <TIM_OC6_SetConfig+0xb4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d109      	bne.n	800471c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	4a13      	ldr	r2, [pc, #76]	; (8004758 <TIM_OC6_SetConfig+0xb8>)
 800470c:	4013      	ands	r3, r2
 800470e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	029b      	lsls	r3, r3, #10
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	621a      	str	r2, [r3, #32]
}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	46bd      	mov	sp, r7
 800473a:	b006      	add	sp, #24
 800473c:	bd80      	pop	{r7, pc}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	ffefffff 	.word	0xffefffff
 8004744:	feff8fff 	.word	0xfeff8fff
 8004748:	ffdfffff 	.word	0xffdfffff
 800474c:	40012c00 	.word	0x40012c00
 8004750:	40014400 	.word	0x40014400
 8004754:	40014800 	.word	0x40014800
 8004758:	fffbffff 	.word	0xfffbffff

0800475c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	221f      	movs	r2, #31
 800476c:	4013      	ands	r3, r2
 800476e:	2201      	movs	r2, #1
 8004770:	409a      	lsls	r2, r3
 8004772:	0013      	movs	r3, r2
 8004774:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	43d2      	mvns	r2, r2
 800477e:	401a      	ands	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a1a      	ldr	r2, [r3, #32]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	211f      	movs	r1, #31
 800478c:	400b      	ands	r3, r1
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4099      	lsls	r1, r3
 8004792:	000b      	movs	r3, r1
 8004794:	431a      	orrs	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	621a      	str	r2, [r3, #32]
}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	46bd      	mov	sp, r7
 800479e:	b006      	add	sp, #24
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	223c      	movs	r2, #60	; 0x3c
 80047b2:	5c9b      	ldrb	r3, [r3, r2]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e050      	b.n	800485e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	223c      	movs	r2, #60	; 0x3c
 80047c0:	2101      	movs	r1, #1
 80047c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	223d      	movs	r2, #61	; 0x3d
 80047c8:	2102      	movs	r1, #2
 80047ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a21      	ldr	r2, [pc, #132]	; (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d108      	bne.n	80047f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4a20      	ldr	r2, [pc, #128]	; (800486c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2270      	movs	r2, #112	; 0x70
 80047fc:	4393      	bics	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a14      	ldr	r2, [pc, #80]	; (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00a      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	2380      	movs	r3, #128	; 0x80
 8004822:	05db      	lsls	r3, r3, #23
 8004824:	429a      	cmp	r2, r3
 8004826:	d004      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a10      	ldr	r2, [pc, #64]	; (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d10c      	bne.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2280      	movs	r2, #128	; 0x80
 8004836:	4393      	bics	r3, r2
 8004838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	4313      	orrs	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	223d      	movs	r2, #61	; 0x3d
 8004850:	2101      	movs	r1, #1
 8004852:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	223c      	movs	r2, #60	; 0x3c
 8004858:	2100      	movs	r1, #0
 800485a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	0018      	movs	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	b004      	add	sp, #16
 8004864:	bd80      	pop	{r7, pc}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	40012c00 	.word	0x40012c00
 800486c:	ff0fffff 	.word	0xff0fffff
 8004870:	40000400 	.word	0x40000400

08004874 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	223c      	movs	r2, #60	; 0x3c
 8004886:	5c9b      	ldrb	r3, [r3, r2]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800488c:	2302      	movs	r3, #2
 800488e:	e079      	b.n	8004984 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	223c      	movs	r2, #60	; 0x3c
 8004894:	2101      	movs	r1, #1
 8004896:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	22ff      	movs	r2, #255	; 0xff
 800489c:	4393      	bics	r3, r2
 800489e:	001a      	movs	r2, r3
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4a38      	ldr	r2, [pc, #224]	; (800498c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80048ac:	401a      	ands	r2, r3
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4a35      	ldr	r2, [pc, #212]	; (8004990 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80048ba:	401a      	ands	r2, r3
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4a33      	ldr	r2, [pc, #204]	; (8004994 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80048c8:	401a      	ands	r2, r3
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4a30      	ldr	r2, [pc, #192]	; (8004998 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80048d6:	401a      	ands	r2, r3
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4a2e      	ldr	r2, [pc, #184]	; (800499c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80048e4:	401a      	ands	r2, r3
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4a2b      	ldr	r2, [pc, #172]	; (80049a0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80048f2:	401a      	ands	r2, r3
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4a29      	ldr	r2, [pc, #164]	; (80049a4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004900:	401a      	ands	r2, r3
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	041b      	lsls	r3, r3, #16
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a25      	ldr	r2, [pc, #148]	; (80049a8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d106      	bne.n	8004924 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a24      	ldr	r2, [pc, #144]	; (80049ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800491a:	401a      	ands	r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a1f      	ldr	r2, [pc, #124]	; (80049a8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d121      	bne.n	8004972 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a1f      	ldr	r2, [pc, #124]	; (80049b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004932:	401a      	ands	r2, r3
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	051b      	lsls	r3, r3, #20
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a1c      	ldr	r2, [pc, #112]	; (80049b4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004942:	401a      	ands	r2, r3
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4a1a      	ldr	r2, [pc, #104]	; (80049b8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004950:	401a      	ands	r2, r3
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a12      	ldr	r2, [pc, #72]	; (80049a8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d106      	bne.n	8004972 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4a15      	ldr	r2, [pc, #84]	; (80049bc <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004968:	401a      	ands	r2, r3
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	223c      	movs	r2, #60	; 0x3c
 800497e:	2100      	movs	r1, #0
 8004980:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	0018      	movs	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	b004      	add	sp, #16
 800498a:	bd80      	pop	{r7, pc}
 800498c:	fffffcff 	.word	0xfffffcff
 8004990:	fffffbff 	.word	0xfffffbff
 8004994:	fffff7ff 	.word	0xfffff7ff
 8004998:	ffffefff 	.word	0xffffefff
 800499c:	ffffdfff 	.word	0xffffdfff
 80049a0:	ffffbfff 	.word	0xffffbfff
 80049a4:	fff0ffff 	.word	0xfff0ffff
 80049a8:	40012c00 	.word	0x40012c00
 80049ac:	efffffff 	.word	0xefffffff
 80049b0:	ff0fffff 	.word	0xff0fffff
 80049b4:	feffffff 	.word	0xfeffffff
 80049b8:	fdffffff 	.word	0xfdffffff
 80049bc:	dfffffff 	.word	0xdfffffff

080049c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e046      	b.n	8004a60 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2288      	movs	r2, #136	; 0x88
 80049d6:	589b      	ldr	r3, [r3, r2]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d107      	bne.n	80049ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2284      	movs	r2, #132	; 0x84
 80049e0:	2100      	movs	r1, #0
 80049e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	0018      	movs	r0, r3
 80049e8:	f7fc ff94 	bl	8001914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2288      	movs	r2, #136	; 0x88
 80049f0:	2124      	movs	r1, #36	; 0x24
 80049f2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2101      	movs	r1, #1
 8004a00:	438a      	bics	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	0018      	movs	r0, r3
 8004a08:	f000 f8cc 	bl	8004ba4 <UART_SetConfig>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e024      	b.n	8004a60 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	0018      	movs	r0, r3
 8004a22:	f000 fb37 	bl	8005094 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	490d      	ldr	r1, [pc, #52]	; (8004a68 <HAL_UART_Init+0xa8>)
 8004a32:	400a      	ands	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	212a      	movs	r1, #42	; 0x2a
 8004a42:	438a      	bics	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2101      	movs	r1, #1
 8004a52:	430a      	orrs	r2, r1
 8004a54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f000 fbcf 	bl	80051fc <UART_CheckIdleState>
 8004a5e:	0003      	movs	r3, r0
}
 8004a60:	0018      	movs	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b002      	add	sp, #8
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	ffffb7ff 	.word	0xffffb7ff

08004a6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08a      	sub	sp, #40	; 0x28
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	1dbb      	adds	r3, r7, #6
 8004a7a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2288      	movs	r2, #136	; 0x88
 8004a80:	589b      	ldr	r3, [r3, r2]
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d000      	beq.n	8004a88 <HAL_UART_Transmit+0x1c>
 8004a86:	e088      	b.n	8004b9a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_UART_Transmit+0x2a>
 8004a8e:	1dbb      	adds	r3, r7, #6
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e080      	b.n	8004b9c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	2380      	movs	r3, #128	; 0x80
 8004aa0:	015b      	lsls	r3, r3, #5
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d109      	bne.n	8004aba <HAL_UART_Transmit+0x4e>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d105      	bne.n	8004aba <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d001      	beq.n	8004aba <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e070      	b.n	8004b9c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2290      	movs	r2, #144	; 0x90
 8004abe:	2100      	movs	r1, #0
 8004ac0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2288      	movs	r2, #136	; 0x88
 8004ac6:	2121      	movs	r1, #33	; 0x21
 8004ac8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aca:	f7fd f901 	bl	8001cd0 <HAL_GetTick>
 8004ace:	0003      	movs	r3, r0
 8004ad0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	1dba      	adds	r2, r7, #6
 8004ad6:	2154      	movs	r1, #84	; 0x54
 8004ad8:	8812      	ldrh	r2, [r2, #0]
 8004ada:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	1dba      	adds	r2, r7, #6
 8004ae0:	2156      	movs	r1, #86	; 0x56
 8004ae2:	8812      	ldrh	r2, [r2, #0]
 8004ae4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	2380      	movs	r3, #128	; 0x80
 8004aec:	015b      	lsls	r3, r3, #5
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d108      	bne.n	8004b04 <HAL_UART_Transmit+0x98>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d104      	bne.n	8004b04 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	e003      	b.n	8004b0c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b0c:	e02c      	b.n	8004b68 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	0013      	movs	r3, r2
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2180      	movs	r1, #128	; 0x80
 8004b1c:	f000 fbbc 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 8004b20:	1e03      	subs	r3, r0, #0
 8004b22:	d001      	beq.n	8004b28 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e039      	b.n	8004b9c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	001a      	movs	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	05d2      	lsls	r2, r2, #23
 8004b3a:	0dd2      	lsrs	r2, r2, #23
 8004b3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	3302      	adds	r3, #2
 8004b42:	61bb      	str	r3, [r7, #24]
 8004b44:	e007      	b.n	8004b56 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	781a      	ldrb	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	3301      	adds	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2256      	movs	r2, #86	; 0x56
 8004b5a:	5a9b      	ldrh	r3, [r3, r2]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b299      	uxth	r1, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2256      	movs	r2, #86	; 0x56
 8004b66:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2256      	movs	r2, #86	; 0x56
 8004b6c:	5a9b      	ldrh	r3, [r3, r2]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1cc      	bne.n	8004b0e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	0013      	movs	r3, r2
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2140      	movs	r1, #64	; 0x40
 8004b82:	f000 fb89 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 8004b86:	1e03      	subs	r3, r0, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e006      	b.n	8004b9c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2288      	movs	r2, #136	; 0x88
 8004b92:	2120      	movs	r1, #32
 8004b94:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	e000      	b.n	8004b9c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004b9a:	2302      	movs	r3, #2
  }
}
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	b008      	add	sp, #32
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ba4:	b5b0      	push	{r4, r5, r7, lr}
 8004ba6:	b090      	sub	sp, #64	; 0x40
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bac:	231a      	movs	r3, #26
 8004bae:	2220      	movs	r2, #32
 8004bb0:	189b      	adds	r3, r3, r2
 8004bb2:	19db      	adds	r3, r3, r7
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4ac4      	ldr	r2, [pc, #784]	; (8004ee8 <UART_SetConfig+0x344>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	0019      	movs	r1, r3
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be2:	430b      	orrs	r3, r1
 8004be4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	4abf      	ldr	r2, [pc, #764]	; (8004eec <UART_SetConfig+0x348>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	68d9      	ldr	r1, [r3, #12]
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	0003      	movs	r3, r0
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4ab9      	ldr	r2, [pc, #740]	; (8004ef0 <UART_SetConfig+0x34c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d004      	beq.n	8004c1a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c16:	4313      	orrs	r3, r2
 8004c18:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	4ab4      	ldr	r2, [pc, #720]	; (8004ef4 <UART_SetConfig+0x350>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	0019      	movs	r1, r3
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	220f      	movs	r2, #15
 8004c38:	4393      	bics	r3, r2
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	0003      	movs	r3, r0
 8004c46:	430b      	orrs	r3, r1
 8004c48:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4aaa      	ldr	r2, [pc, #680]	; (8004ef8 <UART_SetConfig+0x354>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d131      	bne.n	8004cb8 <UART_SetConfig+0x114>
 8004c54:	4ba9      	ldr	r3, [pc, #676]	; (8004efc <UART_SetConfig+0x358>)
 8004c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c58:	2203      	movs	r2, #3
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	d01d      	beq.n	8004c9c <UART_SetConfig+0xf8>
 8004c60:	d823      	bhi.n	8004caa <UART_SetConfig+0x106>
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d00c      	beq.n	8004c80 <UART_SetConfig+0xdc>
 8004c66:	d820      	bhi.n	8004caa <UART_SetConfig+0x106>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <UART_SetConfig+0xce>
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d00e      	beq.n	8004c8e <UART_SetConfig+0xea>
 8004c70:	e01b      	b.n	8004caa <UART_SetConfig+0x106>
 8004c72:	231b      	movs	r3, #27
 8004c74:	2220      	movs	r2, #32
 8004c76:	189b      	adds	r3, r3, r2
 8004c78:	19db      	adds	r3, r3, r7
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	701a      	strb	r2, [r3, #0]
 8004c7e:	e071      	b.n	8004d64 <UART_SetConfig+0x1c0>
 8004c80:	231b      	movs	r3, #27
 8004c82:	2220      	movs	r2, #32
 8004c84:	189b      	adds	r3, r3, r2
 8004c86:	19db      	adds	r3, r3, r7
 8004c88:	2202      	movs	r2, #2
 8004c8a:	701a      	strb	r2, [r3, #0]
 8004c8c:	e06a      	b.n	8004d64 <UART_SetConfig+0x1c0>
 8004c8e:	231b      	movs	r3, #27
 8004c90:	2220      	movs	r2, #32
 8004c92:	189b      	adds	r3, r3, r2
 8004c94:	19db      	adds	r3, r3, r7
 8004c96:	2204      	movs	r2, #4
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	e063      	b.n	8004d64 <UART_SetConfig+0x1c0>
 8004c9c:	231b      	movs	r3, #27
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	189b      	adds	r3, r3, r2
 8004ca2:	19db      	adds	r3, r3, r7
 8004ca4:	2208      	movs	r2, #8
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	e05c      	b.n	8004d64 <UART_SetConfig+0x1c0>
 8004caa:	231b      	movs	r3, #27
 8004cac:	2220      	movs	r2, #32
 8004cae:	189b      	adds	r3, r3, r2
 8004cb0:	19db      	adds	r3, r3, r7
 8004cb2:	2210      	movs	r2, #16
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	e055      	b.n	8004d64 <UART_SetConfig+0x1c0>
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a90      	ldr	r2, [pc, #576]	; (8004f00 <UART_SetConfig+0x35c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d106      	bne.n	8004cd0 <UART_SetConfig+0x12c>
 8004cc2:	231b      	movs	r3, #27
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	189b      	adds	r3, r3, r2
 8004cc8:	19db      	adds	r3, r3, r7
 8004cca:	2200      	movs	r2, #0
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e049      	b.n	8004d64 <UART_SetConfig+0x1c0>
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a86      	ldr	r2, [pc, #536]	; (8004ef0 <UART_SetConfig+0x34c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d13e      	bne.n	8004d58 <UART_SetConfig+0x1b4>
 8004cda:	4b88      	ldr	r3, [pc, #544]	; (8004efc <UART_SetConfig+0x358>)
 8004cdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cde:	23c0      	movs	r3, #192	; 0xc0
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	22c0      	movs	r2, #192	; 0xc0
 8004ce6:	0112      	lsls	r2, r2, #4
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d027      	beq.n	8004d3c <UART_SetConfig+0x198>
 8004cec:	22c0      	movs	r2, #192	; 0xc0
 8004cee:	0112      	lsls	r2, r2, #4
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d82a      	bhi.n	8004d4a <UART_SetConfig+0x1a6>
 8004cf4:	2280      	movs	r2, #128	; 0x80
 8004cf6:	0112      	lsls	r2, r2, #4
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d011      	beq.n	8004d20 <UART_SetConfig+0x17c>
 8004cfc:	2280      	movs	r2, #128	; 0x80
 8004cfe:	0112      	lsls	r2, r2, #4
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d822      	bhi.n	8004d4a <UART_SetConfig+0x1a6>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d004      	beq.n	8004d12 <UART_SetConfig+0x16e>
 8004d08:	2280      	movs	r2, #128	; 0x80
 8004d0a:	00d2      	lsls	r2, r2, #3
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00e      	beq.n	8004d2e <UART_SetConfig+0x18a>
 8004d10:	e01b      	b.n	8004d4a <UART_SetConfig+0x1a6>
 8004d12:	231b      	movs	r3, #27
 8004d14:	2220      	movs	r2, #32
 8004d16:	189b      	adds	r3, r3, r2
 8004d18:	19db      	adds	r3, r3, r7
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	e021      	b.n	8004d64 <UART_SetConfig+0x1c0>
 8004d20:	231b      	movs	r3, #27
 8004d22:	2220      	movs	r2, #32
 8004d24:	189b      	adds	r3, r3, r2
 8004d26:	19db      	adds	r3, r3, r7
 8004d28:	2202      	movs	r2, #2
 8004d2a:	701a      	strb	r2, [r3, #0]
 8004d2c:	e01a      	b.n	8004d64 <UART_SetConfig+0x1c0>
 8004d2e:	231b      	movs	r3, #27
 8004d30:	2220      	movs	r2, #32
 8004d32:	189b      	adds	r3, r3, r2
 8004d34:	19db      	adds	r3, r3, r7
 8004d36:	2204      	movs	r2, #4
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	e013      	b.n	8004d64 <UART_SetConfig+0x1c0>
 8004d3c:	231b      	movs	r3, #27
 8004d3e:	2220      	movs	r2, #32
 8004d40:	189b      	adds	r3, r3, r2
 8004d42:	19db      	adds	r3, r3, r7
 8004d44:	2208      	movs	r2, #8
 8004d46:	701a      	strb	r2, [r3, #0]
 8004d48:	e00c      	b.n	8004d64 <UART_SetConfig+0x1c0>
 8004d4a:	231b      	movs	r3, #27
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	189b      	adds	r3, r3, r2
 8004d50:	19db      	adds	r3, r3, r7
 8004d52:	2210      	movs	r2, #16
 8004d54:	701a      	strb	r2, [r3, #0]
 8004d56:	e005      	b.n	8004d64 <UART_SetConfig+0x1c0>
 8004d58:	231b      	movs	r3, #27
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	189b      	adds	r3, r3, r2
 8004d5e:	19db      	adds	r3, r3, r7
 8004d60:	2210      	movs	r2, #16
 8004d62:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a61      	ldr	r2, [pc, #388]	; (8004ef0 <UART_SetConfig+0x34c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d000      	beq.n	8004d70 <UART_SetConfig+0x1cc>
 8004d6e:	e092      	b.n	8004e96 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d70:	231b      	movs	r3, #27
 8004d72:	2220      	movs	r2, #32
 8004d74:	189b      	adds	r3, r3, r2
 8004d76:	19db      	adds	r3, r3, r7
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d015      	beq.n	8004daa <UART_SetConfig+0x206>
 8004d7e:	dc18      	bgt.n	8004db2 <UART_SetConfig+0x20e>
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d00d      	beq.n	8004da0 <UART_SetConfig+0x1fc>
 8004d84:	dc15      	bgt.n	8004db2 <UART_SetConfig+0x20e>
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <UART_SetConfig+0x1ec>
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d005      	beq.n	8004d9a <UART_SetConfig+0x1f6>
 8004d8e:	e010      	b.n	8004db2 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d90:	f7fd ff7c 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8004d94:	0003      	movs	r3, r0
 8004d96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d98:	e014      	b.n	8004dc4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d9a:	4b5a      	ldr	r3, [pc, #360]	; (8004f04 <UART_SetConfig+0x360>)
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d9e:	e011      	b.n	8004dc4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004da0:	f7fd fee8 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8004da4:	0003      	movs	r3, r0
 8004da6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004da8:	e00c      	b.n	8004dc4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004db0:	e008      	b.n	8004dc4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004db6:	231a      	movs	r3, #26
 8004db8:	2220      	movs	r2, #32
 8004dba:	189b      	adds	r3, r3, r2
 8004dbc:	19db      	adds	r3, r3, r7
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	701a      	strb	r2, [r3, #0]
        break;
 8004dc2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d100      	bne.n	8004dcc <UART_SetConfig+0x228>
 8004dca:	e147      	b.n	800505c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dd0:	4b4d      	ldr	r3, [pc, #308]	; (8004f08 <UART_SetConfig+0x364>)
 8004dd2:	0052      	lsls	r2, r2, #1
 8004dd4:	5ad3      	ldrh	r3, [r2, r3]
 8004dd6:	0019      	movs	r1, r3
 8004dd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004dda:	f7fb f99d 	bl	8000118 <__udivsi3>
 8004dde:	0003      	movs	r3, r0
 8004de0:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	0013      	movs	r3, r2
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	189b      	adds	r3, r3, r2
 8004dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d305      	bcc.n	8004dfe <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d906      	bls.n	8004e0c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004dfe:	231a      	movs	r3, #26
 8004e00:	2220      	movs	r2, #32
 8004e02:	189b      	adds	r3, r3, r2
 8004e04:	19db      	adds	r3, r3, r7
 8004e06:	2201      	movs	r2, #1
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	e127      	b.n	800505c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0e:	61bb      	str	r3, [r7, #24]
 8004e10:	2300      	movs	r3, #0
 8004e12:	61fb      	str	r3, [r7, #28]
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e18:	4b3b      	ldr	r3, [pc, #236]	; (8004f08 <UART_SetConfig+0x364>)
 8004e1a:	0052      	lsls	r2, r2, #1
 8004e1c:	5ad3      	ldrh	r3, [r2, r3]
 8004e1e:	613b      	str	r3, [r7, #16]
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	69b8      	ldr	r0, [r7, #24]
 8004e2a:	69f9      	ldr	r1, [r7, #28]
 8004e2c:	f7fb fa00 	bl	8000230 <__aeabi_uldivmod>
 8004e30:	0002      	movs	r2, r0
 8004e32:	000b      	movs	r3, r1
 8004e34:	0e11      	lsrs	r1, r2, #24
 8004e36:	021d      	lsls	r5, r3, #8
 8004e38:	430d      	orrs	r5, r1
 8004e3a:	0214      	lsls	r4, r2, #8
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	085b      	lsrs	r3, r3, #1
 8004e42:	60bb      	str	r3, [r7, #8]
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68b8      	ldr	r0, [r7, #8]
 8004e4a:	68f9      	ldr	r1, [r7, #12]
 8004e4c:	1900      	adds	r0, r0, r4
 8004e4e:	4169      	adcs	r1, r5
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	603b      	str	r3, [r7, #0]
 8004e56:	2300      	movs	r3, #0
 8004e58:	607b      	str	r3, [r7, #4]
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f7fb f9e7 	bl	8000230 <__aeabi_uldivmod>
 8004e62:	0002      	movs	r2, r0
 8004e64:	000b      	movs	r3, r1
 8004e66:	0013      	movs	r3, r2
 8004e68:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e6c:	23c0      	movs	r3, #192	; 0xc0
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d309      	bcc.n	8004e88 <UART_SetConfig+0x2e4>
 8004e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e76:	2380      	movs	r3, #128	; 0x80
 8004e78:	035b      	lsls	r3, r3, #13
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d204      	bcs.n	8004e88 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e84:	60da      	str	r2, [r3, #12]
 8004e86:	e0e9      	b.n	800505c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004e88:	231a      	movs	r3, #26
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	189b      	adds	r3, r3, r2
 8004e8e:	19db      	adds	r3, r3, r7
 8004e90:	2201      	movs	r2, #1
 8004e92:	701a      	strb	r2, [r3, #0]
 8004e94:	e0e2      	b.n	800505c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	69da      	ldr	r2, [r3, #28]
 8004e9a:	2380      	movs	r3, #128	; 0x80
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d000      	beq.n	8004ea4 <UART_SetConfig+0x300>
 8004ea2:	e083      	b.n	8004fac <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004ea4:	231b      	movs	r3, #27
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	189b      	adds	r3, r3, r2
 8004eaa:	19db      	adds	r3, r3, r7
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d015      	beq.n	8004ede <UART_SetConfig+0x33a>
 8004eb2:	dc2b      	bgt.n	8004f0c <UART_SetConfig+0x368>
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d00d      	beq.n	8004ed4 <UART_SetConfig+0x330>
 8004eb8:	dc28      	bgt.n	8004f0c <UART_SetConfig+0x368>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <UART_SetConfig+0x320>
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d005      	beq.n	8004ece <UART_SetConfig+0x32a>
 8004ec2:	e023      	b.n	8004f0c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec4:	f7fd fee2 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ecc:	e027      	b.n	8004f1e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ece:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <UART_SetConfig+0x360>)
 8004ed0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ed2:	e024      	b.n	8004f1e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ed4:	f7fd fe4e 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8004ed8:	0003      	movs	r3, r0
 8004eda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004edc:	e01f      	b.n	8004f1e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ede:	2380      	movs	r3, #128	; 0x80
 8004ee0:	021b      	lsls	r3, r3, #8
 8004ee2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ee4:	e01b      	b.n	8004f1e <UART_SetConfig+0x37a>
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	cfff69f3 	.word	0xcfff69f3
 8004eec:	ffffcfff 	.word	0xffffcfff
 8004ef0:	40008000 	.word	0x40008000
 8004ef4:	11fff4ff 	.word	0x11fff4ff
 8004ef8:	40013800 	.word	0x40013800
 8004efc:	40021000 	.word	0x40021000
 8004f00:	40004400 	.word	0x40004400
 8004f04:	00f42400 	.word	0x00f42400
 8004f08:	080068cc 	.word	0x080068cc
      default:
        pclk = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004f10:	231a      	movs	r3, #26
 8004f12:	2220      	movs	r2, #32
 8004f14:	189b      	adds	r3, r3, r2
 8004f16:	19db      	adds	r3, r3, r7
 8004f18:	2201      	movs	r2, #1
 8004f1a:	701a      	strb	r2, [r3, #0]
        break;
 8004f1c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d100      	bne.n	8004f26 <UART_SetConfig+0x382>
 8004f24:	e09a      	b.n	800505c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f2a:	4b58      	ldr	r3, [pc, #352]	; (800508c <UART_SetConfig+0x4e8>)
 8004f2c:	0052      	lsls	r2, r2, #1
 8004f2e:	5ad3      	ldrh	r3, [r2, r3]
 8004f30:	0019      	movs	r1, r3
 8004f32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004f34:	f7fb f8f0 	bl	8000118 <__udivsi3>
 8004f38:	0003      	movs	r3, r0
 8004f3a:	005a      	lsls	r2, r3, #1
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	085b      	lsrs	r3, r3, #1
 8004f42:	18d2      	adds	r2, r2, r3
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	0019      	movs	r1, r3
 8004f4a:	0010      	movs	r0, r2
 8004f4c:	f7fb f8e4 	bl	8000118 <__udivsi3>
 8004f50:	0003      	movs	r3, r0
 8004f52:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f56:	2b0f      	cmp	r3, #15
 8004f58:	d921      	bls.n	8004f9e <UART_SetConfig+0x3fa>
 8004f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	025b      	lsls	r3, r3, #9
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d21c      	bcs.n	8004f9e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	200e      	movs	r0, #14
 8004f6a:	2420      	movs	r4, #32
 8004f6c:	1903      	adds	r3, r0, r4
 8004f6e:	19db      	adds	r3, r3, r7
 8004f70:	210f      	movs	r1, #15
 8004f72:	438a      	bics	r2, r1
 8004f74:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	085b      	lsrs	r3, r3, #1
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2207      	movs	r2, #7
 8004f7e:	4013      	ands	r3, r2
 8004f80:	b299      	uxth	r1, r3
 8004f82:	1903      	adds	r3, r0, r4
 8004f84:	19db      	adds	r3, r3, r7
 8004f86:	1902      	adds	r2, r0, r4
 8004f88:	19d2      	adds	r2, r2, r7
 8004f8a:	8812      	ldrh	r2, [r2, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	1902      	adds	r2, r0, r4
 8004f96:	19d2      	adds	r2, r2, r7
 8004f98:	8812      	ldrh	r2, [r2, #0]
 8004f9a:	60da      	str	r2, [r3, #12]
 8004f9c:	e05e      	b.n	800505c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f9e:	231a      	movs	r3, #26
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	189b      	adds	r3, r3, r2
 8004fa4:	19db      	adds	r3, r3, r7
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	e057      	b.n	800505c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fac:	231b      	movs	r3, #27
 8004fae:	2220      	movs	r2, #32
 8004fb0:	189b      	adds	r3, r3, r2
 8004fb2:	19db      	adds	r3, r3, r7
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d015      	beq.n	8004fe6 <UART_SetConfig+0x442>
 8004fba:	dc18      	bgt.n	8004fee <UART_SetConfig+0x44a>
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d00d      	beq.n	8004fdc <UART_SetConfig+0x438>
 8004fc0:	dc15      	bgt.n	8004fee <UART_SetConfig+0x44a>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <UART_SetConfig+0x428>
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d005      	beq.n	8004fd6 <UART_SetConfig+0x432>
 8004fca:	e010      	b.n	8004fee <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fcc:	f7fd fe5e 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8004fd0:	0003      	movs	r3, r0
 8004fd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fd4:	e014      	b.n	8005000 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fd6:	4b2e      	ldr	r3, [pc, #184]	; (8005090 <UART_SetConfig+0x4ec>)
 8004fd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fda:	e011      	b.n	8005000 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fdc:	f7fd fdca 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8004fe0:	0003      	movs	r3, r0
 8004fe2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fe4:	e00c      	b.n	8005000 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fe6:	2380      	movs	r3, #128	; 0x80
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fec:	e008      	b.n	8005000 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004ff2:	231a      	movs	r3, #26
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	189b      	adds	r3, r3, r2
 8004ff8:	19db      	adds	r3, r3, r7
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	701a      	strb	r2, [r3, #0]
        break;
 8004ffe:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005002:	2b00      	cmp	r3, #0
 8005004:	d02a      	beq.n	800505c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800500a:	4b20      	ldr	r3, [pc, #128]	; (800508c <UART_SetConfig+0x4e8>)
 800500c:	0052      	lsls	r2, r2, #1
 800500e:	5ad3      	ldrh	r3, [r2, r3]
 8005010:	0019      	movs	r1, r3
 8005012:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005014:	f7fb f880 	bl	8000118 <__udivsi3>
 8005018:	0003      	movs	r3, r0
 800501a:	001a      	movs	r2, r3
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	085b      	lsrs	r3, r3, #1
 8005022:	18d2      	adds	r2, r2, r3
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	0019      	movs	r1, r3
 800502a:	0010      	movs	r0, r2
 800502c:	f7fb f874 	bl	8000118 <__udivsi3>
 8005030:	0003      	movs	r3, r0
 8005032:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	2b0f      	cmp	r3, #15
 8005038:	d90a      	bls.n	8005050 <UART_SetConfig+0x4ac>
 800503a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800503c:	2380      	movs	r3, #128	; 0x80
 800503e:	025b      	lsls	r3, r3, #9
 8005040:	429a      	cmp	r2, r3
 8005042:	d205      	bcs.n	8005050 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	b29a      	uxth	r2, r3
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	60da      	str	r2, [r3, #12]
 800504e:	e005      	b.n	800505c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005050:	231a      	movs	r3, #26
 8005052:	2220      	movs	r2, #32
 8005054:	189b      	adds	r3, r3, r2
 8005056:	19db      	adds	r3, r3, r7
 8005058:	2201      	movs	r2, #1
 800505a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	226a      	movs	r2, #106	; 0x6a
 8005060:	2101      	movs	r1, #1
 8005062:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	2268      	movs	r2, #104	; 0x68
 8005068:	2101      	movs	r1, #1
 800506a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	2200      	movs	r2, #0
 8005070:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	2200      	movs	r2, #0
 8005076:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005078:	231a      	movs	r3, #26
 800507a:	2220      	movs	r2, #32
 800507c:	189b      	adds	r3, r3, r2
 800507e:	19db      	adds	r3, r3, r7
 8005080:	781b      	ldrb	r3, [r3, #0]
}
 8005082:	0018      	movs	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	b010      	add	sp, #64	; 0x40
 8005088:	bdb0      	pop	{r4, r5, r7, pc}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	080068cc 	.word	0x080068cc
 8005090:	00f42400 	.word	0x00f42400

08005094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a0:	2201      	movs	r2, #1
 80050a2:	4013      	ands	r3, r2
 80050a4:	d00b      	beq.n	80050be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	4a4a      	ldr	r2, [pc, #296]	; (80051d8 <UART_AdvFeatureConfig+0x144>)
 80050ae:	4013      	ands	r3, r2
 80050b0:	0019      	movs	r1, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	2202      	movs	r2, #2
 80050c4:	4013      	ands	r3, r2
 80050c6:	d00b      	beq.n	80050e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	4a43      	ldr	r2, [pc, #268]	; (80051dc <UART_AdvFeatureConfig+0x148>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	0019      	movs	r1, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e4:	2204      	movs	r2, #4
 80050e6:	4013      	ands	r3, r2
 80050e8:	d00b      	beq.n	8005102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	4a3b      	ldr	r2, [pc, #236]	; (80051e0 <UART_AdvFeatureConfig+0x14c>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	0019      	movs	r1, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005106:	2208      	movs	r2, #8
 8005108:	4013      	ands	r3, r2
 800510a:	d00b      	beq.n	8005124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	4a34      	ldr	r2, [pc, #208]	; (80051e4 <UART_AdvFeatureConfig+0x150>)
 8005114:	4013      	ands	r3, r2
 8005116:	0019      	movs	r1, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	2210      	movs	r2, #16
 800512a:	4013      	ands	r3, r2
 800512c:	d00b      	beq.n	8005146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	4a2c      	ldr	r2, [pc, #176]	; (80051e8 <UART_AdvFeatureConfig+0x154>)
 8005136:	4013      	ands	r3, r2
 8005138:	0019      	movs	r1, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514a:	2220      	movs	r2, #32
 800514c:	4013      	ands	r3, r2
 800514e:	d00b      	beq.n	8005168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	4a25      	ldr	r2, [pc, #148]	; (80051ec <UART_AdvFeatureConfig+0x158>)
 8005158:	4013      	ands	r3, r2
 800515a:	0019      	movs	r1, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516c:	2240      	movs	r2, #64	; 0x40
 800516e:	4013      	ands	r3, r2
 8005170:	d01d      	beq.n	80051ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	4a1d      	ldr	r2, [pc, #116]	; (80051f0 <UART_AdvFeatureConfig+0x15c>)
 800517a:	4013      	ands	r3, r2
 800517c:	0019      	movs	r1, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800518e:	2380      	movs	r3, #128	; 0x80
 8005190:	035b      	lsls	r3, r3, #13
 8005192:	429a      	cmp	r2, r3
 8005194:	d10b      	bne.n	80051ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	4a15      	ldr	r2, [pc, #84]	; (80051f4 <UART_AdvFeatureConfig+0x160>)
 800519e:	4013      	ands	r3, r2
 80051a0:	0019      	movs	r1, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b2:	2280      	movs	r2, #128	; 0x80
 80051b4:	4013      	ands	r3, r2
 80051b6:	d00b      	beq.n	80051d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	4a0e      	ldr	r2, [pc, #56]	; (80051f8 <UART_AdvFeatureConfig+0x164>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	0019      	movs	r1, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	605a      	str	r2, [r3, #4]
  }
}
 80051d0:	46c0      	nop			; (mov r8, r8)
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b002      	add	sp, #8
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	fffdffff 	.word	0xfffdffff
 80051dc:	fffeffff 	.word	0xfffeffff
 80051e0:	fffbffff 	.word	0xfffbffff
 80051e4:	ffff7fff 	.word	0xffff7fff
 80051e8:	ffffefff 	.word	0xffffefff
 80051ec:	ffffdfff 	.word	0xffffdfff
 80051f0:	ffefffff 	.word	0xffefffff
 80051f4:	ff9fffff 	.word	0xff9fffff
 80051f8:	fff7ffff 	.word	0xfff7ffff

080051fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af02      	add	r7, sp, #8
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2290      	movs	r2, #144	; 0x90
 8005208:	2100      	movs	r1, #0
 800520a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800520c:	f7fc fd60 	bl	8001cd0 <HAL_GetTick>
 8005210:	0003      	movs	r3, r0
 8005212:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2208      	movs	r2, #8
 800521c:	4013      	ands	r3, r2
 800521e:	2b08      	cmp	r3, #8
 8005220:	d10c      	bne.n	800523c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2280      	movs	r2, #128	; 0x80
 8005226:	0391      	lsls	r1, r2, #14
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	4a1a      	ldr	r2, [pc, #104]	; (8005294 <UART_CheckIdleState+0x98>)
 800522c:	9200      	str	r2, [sp, #0]
 800522e:	2200      	movs	r2, #0
 8005230:	f000 f832 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 8005234:	1e03      	subs	r3, r0, #0
 8005236:	d001      	beq.n	800523c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e026      	b.n	800528a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2204      	movs	r2, #4
 8005244:	4013      	ands	r3, r2
 8005246:	2b04      	cmp	r3, #4
 8005248:	d10c      	bne.n	8005264 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2280      	movs	r2, #128	; 0x80
 800524e:	03d1      	lsls	r1, r2, #15
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	4a10      	ldr	r2, [pc, #64]	; (8005294 <UART_CheckIdleState+0x98>)
 8005254:	9200      	str	r2, [sp, #0]
 8005256:	2200      	movs	r2, #0
 8005258:	f000 f81e 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 800525c:	1e03      	subs	r3, r0, #0
 800525e:	d001      	beq.n	8005264 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e012      	b.n	800528a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2288      	movs	r2, #136	; 0x88
 8005268:	2120      	movs	r1, #32
 800526a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	228c      	movs	r2, #140	; 0x8c
 8005270:	2120      	movs	r1, #32
 8005272:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2284      	movs	r2, #132	; 0x84
 8005284:	2100      	movs	r1, #0
 8005286:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	0018      	movs	r0, r3
 800528c:	46bd      	mov	sp, r7
 800528e:	b004      	add	sp, #16
 8005290:	bd80      	pop	{r7, pc}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	01ffffff 	.word	0x01ffffff

08005298 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b094      	sub	sp, #80	; 0x50
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	603b      	str	r3, [r7, #0]
 80052a4:	1dfb      	adds	r3, r7, #7
 80052a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a8:	e0a7      	b.n	80053fa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052ac:	3301      	adds	r3, #1
 80052ae:	d100      	bne.n	80052b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80052b0:	e0a3      	b.n	80053fa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b2:	f7fc fd0d 	bl	8001cd0 <HAL_GetTick>
 80052b6:	0002      	movs	r2, r0
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052be:	429a      	cmp	r2, r3
 80052c0:	d302      	bcc.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d13f      	bne.n	8005348 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c8:	f3ef 8310 	mrs	r3, PRIMASK
 80052cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80052d0:	647b      	str	r3, [r7, #68]	; 0x44
 80052d2:	2301      	movs	r3, #1
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d8:	f383 8810 	msr	PRIMASK, r3
}
 80052dc:	46c0      	nop			; (mov r8, r8)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	494e      	ldr	r1, [pc, #312]	; (8005424 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80052ea:	400a      	ands	r2, r1
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	f383 8810 	msr	PRIMASK, r3
}
 80052f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052fa:	f3ef 8310 	mrs	r3, PRIMASK
 80052fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005302:	643b      	str	r3, [r7, #64]	; 0x40
 8005304:	2301      	movs	r3, #1
 8005306:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530a:	f383 8810 	msr	PRIMASK, r3
}
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2101      	movs	r1, #1
 800531c:	438a      	bics	r2, r1
 800531e:	609a      	str	r2, [r3, #8]
 8005320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005322:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005326:	f383 8810 	msr	PRIMASK, r3
}
 800532a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2288      	movs	r2, #136	; 0x88
 8005330:	2120      	movs	r1, #32
 8005332:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	228c      	movs	r2, #140	; 0x8c
 8005338:	2120      	movs	r1, #32
 800533a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2284      	movs	r2, #132	; 0x84
 8005340:	2100      	movs	r1, #0
 8005342:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e069      	b.n	800541c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2204      	movs	r2, #4
 8005350:	4013      	ands	r3, r2
 8005352:	d052      	beq.n	80053fa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	69da      	ldr	r2, [r3, #28]
 800535a:	2380      	movs	r3, #128	; 0x80
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	401a      	ands	r2, r3
 8005360:	2380      	movs	r3, #128	; 0x80
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	429a      	cmp	r2, r3
 8005366:	d148      	bne.n	80053fa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2280      	movs	r2, #128	; 0x80
 800536e:	0112      	lsls	r2, r2, #4
 8005370:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005372:	f3ef 8310 	mrs	r3, PRIMASK
 8005376:	613b      	str	r3, [r7, #16]
  return(result);
 8005378:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800537a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800537c:	2301      	movs	r3, #1
 800537e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f383 8810 	msr	PRIMASK, r3
}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4924      	ldr	r1, [pc, #144]	; (8005424 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005394:	400a      	ands	r2, r1
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	f383 8810 	msr	PRIMASK, r3
}
 80053a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053a4:	f3ef 8310 	mrs	r3, PRIMASK
 80053a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80053aa:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80053ae:	2301      	movs	r3, #1
 80053b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	f383 8810 	msr	PRIMASK, r3
}
 80053b8:	46c0      	nop			; (mov r8, r8)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2101      	movs	r1, #1
 80053c6:	438a      	bics	r2, r1
 80053c8:	609a      	str	r2, [r3, #8]
 80053ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	f383 8810 	msr	PRIMASK, r3
}
 80053d4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2288      	movs	r2, #136	; 0x88
 80053da:	2120      	movs	r1, #32
 80053dc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	228c      	movs	r2, #140	; 0x8c
 80053e2:	2120      	movs	r1, #32
 80053e4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2290      	movs	r2, #144	; 0x90
 80053ea:	2120      	movs	r1, #32
 80053ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2284      	movs	r2, #132	; 0x84
 80053f2:	2100      	movs	r1, #0
 80053f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e010      	b.n	800541c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	4013      	ands	r3, r2
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	425a      	negs	r2, r3
 800540a:	4153      	adcs	r3, r2
 800540c:	b2db      	uxtb	r3, r3
 800540e:	001a      	movs	r2, r3
 8005410:	1dfb      	adds	r3, r7, #7
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d100      	bne.n	800541a <UART_WaitOnFlagUntilTimeout+0x182>
 8005418:	e747      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	0018      	movs	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	b014      	add	sp, #80	; 0x50
 8005422:	bd80      	pop	{r7, pc}
 8005424:	fffffe5f 	.word	0xfffffe5f

08005428 <__errno>:
 8005428:	4b01      	ldr	r3, [pc, #4]	; (8005430 <__errno+0x8>)
 800542a:	6818      	ldr	r0, [r3, #0]
 800542c:	4770      	bx	lr
 800542e:	46c0      	nop			; (mov r8, r8)
 8005430:	20000044 	.word	0x20000044

08005434 <__libc_init_array>:
 8005434:	b570      	push	{r4, r5, r6, lr}
 8005436:	2600      	movs	r6, #0
 8005438:	4d0c      	ldr	r5, [pc, #48]	; (800546c <__libc_init_array+0x38>)
 800543a:	4c0d      	ldr	r4, [pc, #52]	; (8005470 <__libc_init_array+0x3c>)
 800543c:	1b64      	subs	r4, r4, r5
 800543e:	10a4      	asrs	r4, r4, #2
 8005440:	42a6      	cmp	r6, r4
 8005442:	d109      	bne.n	8005458 <__libc_init_array+0x24>
 8005444:	2600      	movs	r6, #0
 8005446:	f000 fff9 	bl	800643c <_init>
 800544a:	4d0a      	ldr	r5, [pc, #40]	; (8005474 <__libc_init_array+0x40>)
 800544c:	4c0a      	ldr	r4, [pc, #40]	; (8005478 <__libc_init_array+0x44>)
 800544e:	1b64      	subs	r4, r4, r5
 8005450:	10a4      	asrs	r4, r4, #2
 8005452:	42a6      	cmp	r6, r4
 8005454:	d105      	bne.n	8005462 <__libc_init_array+0x2e>
 8005456:	bd70      	pop	{r4, r5, r6, pc}
 8005458:	00b3      	lsls	r3, r6, #2
 800545a:	58eb      	ldr	r3, [r5, r3]
 800545c:	4798      	blx	r3
 800545e:	3601      	adds	r6, #1
 8005460:	e7ee      	b.n	8005440 <__libc_init_array+0xc>
 8005462:	00b3      	lsls	r3, r6, #2
 8005464:	58eb      	ldr	r3, [r5, r3]
 8005466:	4798      	blx	r3
 8005468:	3601      	adds	r6, #1
 800546a:	e7f2      	b.n	8005452 <__libc_init_array+0x1e>
 800546c:	08006984 	.word	0x08006984
 8005470:	08006984 	.word	0x08006984
 8005474:	08006984 	.word	0x08006984
 8005478:	08006988 	.word	0x08006988

0800547c <memset>:
 800547c:	0003      	movs	r3, r0
 800547e:	1882      	adds	r2, r0, r2
 8005480:	4293      	cmp	r3, r2
 8005482:	d100      	bne.n	8005486 <memset+0xa>
 8005484:	4770      	bx	lr
 8005486:	7019      	strb	r1, [r3, #0]
 8005488:	3301      	adds	r3, #1
 800548a:	e7f9      	b.n	8005480 <memset+0x4>

0800548c <iprintf>:
 800548c:	b40f      	push	{r0, r1, r2, r3}
 800548e:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <iprintf+0x30>)
 8005490:	b513      	push	{r0, r1, r4, lr}
 8005492:	681c      	ldr	r4, [r3, #0]
 8005494:	2c00      	cmp	r4, #0
 8005496:	d005      	beq.n	80054a4 <iprintf+0x18>
 8005498:	69a3      	ldr	r3, [r4, #24]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d102      	bne.n	80054a4 <iprintf+0x18>
 800549e:	0020      	movs	r0, r4
 80054a0:	f000 f870 	bl	8005584 <__sinit>
 80054a4:	ab05      	add	r3, sp, #20
 80054a6:	0020      	movs	r0, r4
 80054a8:	9a04      	ldr	r2, [sp, #16]
 80054aa:	68a1      	ldr	r1, [r4, #8]
 80054ac:	9301      	str	r3, [sp, #4]
 80054ae:	f000 f9cd 	bl	800584c <_vfiprintf_r>
 80054b2:	bc16      	pop	{r1, r2, r4}
 80054b4:	bc08      	pop	{r3}
 80054b6:	b004      	add	sp, #16
 80054b8:	4718      	bx	r3
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	20000044 	.word	0x20000044

080054c0 <std>:
 80054c0:	2300      	movs	r3, #0
 80054c2:	b510      	push	{r4, lr}
 80054c4:	0004      	movs	r4, r0
 80054c6:	6003      	str	r3, [r0, #0]
 80054c8:	6043      	str	r3, [r0, #4]
 80054ca:	6083      	str	r3, [r0, #8]
 80054cc:	8181      	strh	r1, [r0, #12]
 80054ce:	6643      	str	r3, [r0, #100]	; 0x64
 80054d0:	0019      	movs	r1, r3
 80054d2:	81c2      	strh	r2, [r0, #14]
 80054d4:	6103      	str	r3, [r0, #16]
 80054d6:	6143      	str	r3, [r0, #20]
 80054d8:	6183      	str	r3, [r0, #24]
 80054da:	2208      	movs	r2, #8
 80054dc:	305c      	adds	r0, #92	; 0x5c
 80054de:	f7ff ffcd 	bl	800547c <memset>
 80054e2:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <std+0x38>)
 80054e4:	6224      	str	r4, [r4, #32]
 80054e6:	6263      	str	r3, [r4, #36]	; 0x24
 80054e8:	4b04      	ldr	r3, [pc, #16]	; (80054fc <std+0x3c>)
 80054ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80054ec:	4b04      	ldr	r3, [pc, #16]	; (8005500 <std+0x40>)
 80054ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054f0:	4b04      	ldr	r3, [pc, #16]	; (8005504 <std+0x44>)
 80054f2:	6323      	str	r3, [r4, #48]	; 0x30
 80054f4:	bd10      	pop	{r4, pc}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	08005de9 	.word	0x08005de9
 80054fc:	08005e11 	.word	0x08005e11
 8005500:	08005e49 	.word	0x08005e49
 8005504:	08005e75 	.word	0x08005e75

08005508 <_cleanup_r>:
 8005508:	b510      	push	{r4, lr}
 800550a:	4902      	ldr	r1, [pc, #8]	; (8005514 <_cleanup_r+0xc>)
 800550c:	f000 f8ba 	bl	8005684 <_fwalk_reent>
 8005510:	bd10      	pop	{r4, pc}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	08006181 	.word	0x08006181

08005518 <__sfmoreglue>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	2568      	movs	r5, #104	; 0x68
 800551c:	1e4a      	subs	r2, r1, #1
 800551e:	4355      	muls	r5, r2
 8005520:	000e      	movs	r6, r1
 8005522:	0029      	movs	r1, r5
 8005524:	3174      	adds	r1, #116	; 0x74
 8005526:	f000 f8f3 	bl	8005710 <_malloc_r>
 800552a:	1e04      	subs	r4, r0, #0
 800552c:	d008      	beq.n	8005540 <__sfmoreglue+0x28>
 800552e:	2100      	movs	r1, #0
 8005530:	002a      	movs	r2, r5
 8005532:	6001      	str	r1, [r0, #0]
 8005534:	6046      	str	r6, [r0, #4]
 8005536:	300c      	adds	r0, #12
 8005538:	60a0      	str	r0, [r4, #8]
 800553a:	3268      	adds	r2, #104	; 0x68
 800553c:	f7ff ff9e 	bl	800547c <memset>
 8005540:	0020      	movs	r0, r4
 8005542:	bd70      	pop	{r4, r5, r6, pc}

08005544 <__sfp_lock_acquire>:
 8005544:	b510      	push	{r4, lr}
 8005546:	4802      	ldr	r0, [pc, #8]	; (8005550 <__sfp_lock_acquire+0xc>)
 8005548:	f000 f8bd 	bl	80056c6 <__retarget_lock_acquire_recursive>
 800554c:	bd10      	pop	{r4, pc}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	20000289 	.word	0x20000289

08005554 <__sfp_lock_release>:
 8005554:	b510      	push	{r4, lr}
 8005556:	4802      	ldr	r0, [pc, #8]	; (8005560 <__sfp_lock_release+0xc>)
 8005558:	f000 f8b6 	bl	80056c8 <__retarget_lock_release_recursive>
 800555c:	bd10      	pop	{r4, pc}
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	20000289 	.word	0x20000289

08005564 <__sinit_lock_acquire>:
 8005564:	b510      	push	{r4, lr}
 8005566:	4802      	ldr	r0, [pc, #8]	; (8005570 <__sinit_lock_acquire+0xc>)
 8005568:	f000 f8ad 	bl	80056c6 <__retarget_lock_acquire_recursive>
 800556c:	bd10      	pop	{r4, pc}
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	2000028a 	.word	0x2000028a

08005574 <__sinit_lock_release>:
 8005574:	b510      	push	{r4, lr}
 8005576:	4802      	ldr	r0, [pc, #8]	; (8005580 <__sinit_lock_release+0xc>)
 8005578:	f000 f8a6 	bl	80056c8 <__retarget_lock_release_recursive>
 800557c:	bd10      	pop	{r4, pc}
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	2000028a 	.word	0x2000028a

08005584 <__sinit>:
 8005584:	b513      	push	{r0, r1, r4, lr}
 8005586:	0004      	movs	r4, r0
 8005588:	f7ff ffec 	bl	8005564 <__sinit_lock_acquire>
 800558c:	69a3      	ldr	r3, [r4, #24]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <__sinit+0x14>
 8005592:	f7ff ffef 	bl	8005574 <__sinit_lock_release>
 8005596:	bd13      	pop	{r0, r1, r4, pc}
 8005598:	64a3      	str	r3, [r4, #72]	; 0x48
 800559a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800559c:	6523      	str	r3, [r4, #80]	; 0x50
 800559e:	4b13      	ldr	r3, [pc, #76]	; (80055ec <__sinit+0x68>)
 80055a0:	4a13      	ldr	r2, [pc, #76]	; (80055f0 <__sinit+0x6c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80055a6:	9301      	str	r3, [sp, #4]
 80055a8:	42a3      	cmp	r3, r4
 80055aa:	d101      	bne.n	80055b0 <__sinit+0x2c>
 80055ac:	2301      	movs	r3, #1
 80055ae:	61a3      	str	r3, [r4, #24]
 80055b0:	0020      	movs	r0, r4
 80055b2:	f000 f81f 	bl	80055f4 <__sfp>
 80055b6:	6060      	str	r0, [r4, #4]
 80055b8:	0020      	movs	r0, r4
 80055ba:	f000 f81b 	bl	80055f4 <__sfp>
 80055be:	60a0      	str	r0, [r4, #8]
 80055c0:	0020      	movs	r0, r4
 80055c2:	f000 f817 	bl	80055f4 <__sfp>
 80055c6:	2200      	movs	r2, #0
 80055c8:	2104      	movs	r1, #4
 80055ca:	60e0      	str	r0, [r4, #12]
 80055cc:	6860      	ldr	r0, [r4, #4]
 80055ce:	f7ff ff77 	bl	80054c0 <std>
 80055d2:	2201      	movs	r2, #1
 80055d4:	2109      	movs	r1, #9
 80055d6:	68a0      	ldr	r0, [r4, #8]
 80055d8:	f7ff ff72 	bl	80054c0 <std>
 80055dc:	2202      	movs	r2, #2
 80055de:	2112      	movs	r1, #18
 80055e0:	68e0      	ldr	r0, [r4, #12]
 80055e2:	f7ff ff6d 	bl	80054c0 <std>
 80055e6:	2301      	movs	r3, #1
 80055e8:	61a3      	str	r3, [r4, #24]
 80055ea:	e7d2      	b.n	8005592 <__sinit+0xe>
 80055ec:	080068e4 	.word	0x080068e4
 80055f0:	08005509 	.word	0x08005509

080055f4 <__sfp>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	0007      	movs	r7, r0
 80055f8:	f7ff ffa4 	bl	8005544 <__sfp_lock_acquire>
 80055fc:	4b1f      	ldr	r3, [pc, #124]	; (800567c <__sfp+0x88>)
 80055fe:	681e      	ldr	r6, [r3, #0]
 8005600:	69b3      	ldr	r3, [r6, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d102      	bne.n	800560c <__sfp+0x18>
 8005606:	0030      	movs	r0, r6
 8005608:	f7ff ffbc 	bl	8005584 <__sinit>
 800560c:	3648      	adds	r6, #72	; 0x48
 800560e:	68b4      	ldr	r4, [r6, #8]
 8005610:	6873      	ldr	r3, [r6, #4]
 8005612:	3b01      	subs	r3, #1
 8005614:	d504      	bpl.n	8005620 <__sfp+0x2c>
 8005616:	6833      	ldr	r3, [r6, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d022      	beq.n	8005662 <__sfp+0x6e>
 800561c:	6836      	ldr	r6, [r6, #0]
 800561e:	e7f6      	b.n	800560e <__sfp+0x1a>
 8005620:	220c      	movs	r2, #12
 8005622:	5ea5      	ldrsh	r5, [r4, r2]
 8005624:	2d00      	cmp	r5, #0
 8005626:	d11a      	bne.n	800565e <__sfp+0x6a>
 8005628:	0020      	movs	r0, r4
 800562a:	4b15      	ldr	r3, [pc, #84]	; (8005680 <__sfp+0x8c>)
 800562c:	3058      	adds	r0, #88	; 0x58
 800562e:	60e3      	str	r3, [r4, #12]
 8005630:	6665      	str	r5, [r4, #100]	; 0x64
 8005632:	f000 f847 	bl	80056c4 <__retarget_lock_init_recursive>
 8005636:	f7ff ff8d 	bl	8005554 <__sfp_lock_release>
 800563a:	0020      	movs	r0, r4
 800563c:	2208      	movs	r2, #8
 800563e:	0029      	movs	r1, r5
 8005640:	6025      	str	r5, [r4, #0]
 8005642:	60a5      	str	r5, [r4, #8]
 8005644:	6065      	str	r5, [r4, #4]
 8005646:	6125      	str	r5, [r4, #16]
 8005648:	6165      	str	r5, [r4, #20]
 800564a:	61a5      	str	r5, [r4, #24]
 800564c:	305c      	adds	r0, #92	; 0x5c
 800564e:	f7ff ff15 	bl	800547c <memset>
 8005652:	6365      	str	r5, [r4, #52]	; 0x34
 8005654:	63a5      	str	r5, [r4, #56]	; 0x38
 8005656:	64a5      	str	r5, [r4, #72]	; 0x48
 8005658:	64e5      	str	r5, [r4, #76]	; 0x4c
 800565a:	0020      	movs	r0, r4
 800565c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800565e:	3468      	adds	r4, #104	; 0x68
 8005660:	e7d7      	b.n	8005612 <__sfp+0x1e>
 8005662:	2104      	movs	r1, #4
 8005664:	0038      	movs	r0, r7
 8005666:	f7ff ff57 	bl	8005518 <__sfmoreglue>
 800566a:	1e04      	subs	r4, r0, #0
 800566c:	6030      	str	r0, [r6, #0]
 800566e:	d1d5      	bne.n	800561c <__sfp+0x28>
 8005670:	f7ff ff70 	bl	8005554 <__sfp_lock_release>
 8005674:	230c      	movs	r3, #12
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	e7ef      	b.n	800565a <__sfp+0x66>
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	080068e4 	.word	0x080068e4
 8005680:	ffff0001 	.word	0xffff0001

08005684 <_fwalk_reent>:
 8005684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005686:	0004      	movs	r4, r0
 8005688:	0006      	movs	r6, r0
 800568a:	2700      	movs	r7, #0
 800568c:	9101      	str	r1, [sp, #4]
 800568e:	3448      	adds	r4, #72	; 0x48
 8005690:	6863      	ldr	r3, [r4, #4]
 8005692:	68a5      	ldr	r5, [r4, #8]
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	9b00      	ldr	r3, [sp, #0]
 8005698:	3b01      	subs	r3, #1
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	d504      	bpl.n	80056a8 <_fwalk_reent+0x24>
 800569e:	6824      	ldr	r4, [r4, #0]
 80056a0:	2c00      	cmp	r4, #0
 80056a2:	d1f5      	bne.n	8005690 <_fwalk_reent+0xc>
 80056a4:	0038      	movs	r0, r7
 80056a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056a8:	89ab      	ldrh	r3, [r5, #12]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d908      	bls.n	80056c0 <_fwalk_reent+0x3c>
 80056ae:	220e      	movs	r2, #14
 80056b0:	5eab      	ldrsh	r3, [r5, r2]
 80056b2:	3301      	adds	r3, #1
 80056b4:	d004      	beq.n	80056c0 <_fwalk_reent+0x3c>
 80056b6:	0029      	movs	r1, r5
 80056b8:	0030      	movs	r0, r6
 80056ba:	9b01      	ldr	r3, [sp, #4]
 80056bc:	4798      	blx	r3
 80056be:	4307      	orrs	r7, r0
 80056c0:	3568      	adds	r5, #104	; 0x68
 80056c2:	e7e8      	b.n	8005696 <_fwalk_reent+0x12>

080056c4 <__retarget_lock_init_recursive>:
 80056c4:	4770      	bx	lr

080056c6 <__retarget_lock_acquire_recursive>:
 80056c6:	4770      	bx	lr

080056c8 <__retarget_lock_release_recursive>:
 80056c8:	4770      	bx	lr
	...

080056cc <sbrk_aligned>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	4e0f      	ldr	r6, [pc, #60]	; (800570c <sbrk_aligned+0x40>)
 80056d0:	000d      	movs	r5, r1
 80056d2:	6831      	ldr	r1, [r6, #0]
 80056d4:	0004      	movs	r4, r0
 80056d6:	2900      	cmp	r1, #0
 80056d8:	d102      	bne.n	80056e0 <sbrk_aligned+0x14>
 80056da:	f000 fb73 	bl	8005dc4 <_sbrk_r>
 80056de:	6030      	str	r0, [r6, #0]
 80056e0:	0029      	movs	r1, r5
 80056e2:	0020      	movs	r0, r4
 80056e4:	f000 fb6e 	bl	8005dc4 <_sbrk_r>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d00a      	beq.n	8005702 <sbrk_aligned+0x36>
 80056ec:	2303      	movs	r3, #3
 80056ee:	1cc5      	adds	r5, r0, #3
 80056f0:	439d      	bics	r5, r3
 80056f2:	42a8      	cmp	r0, r5
 80056f4:	d007      	beq.n	8005706 <sbrk_aligned+0x3a>
 80056f6:	1a29      	subs	r1, r5, r0
 80056f8:	0020      	movs	r0, r4
 80056fa:	f000 fb63 	bl	8005dc4 <_sbrk_r>
 80056fe:	1c43      	adds	r3, r0, #1
 8005700:	d101      	bne.n	8005706 <sbrk_aligned+0x3a>
 8005702:	2501      	movs	r5, #1
 8005704:	426d      	negs	r5, r5
 8005706:	0028      	movs	r0, r5
 8005708:	bd70      	pop	{r4, r5, r6, pc}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	20000290 	.word	0x20000290

08005710 <_malloc_r>:
 8005710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005712:	2203      	movs	r2, #3
 8005714:	1ccb      	adds	r3, r1, #3
 8005716:	4393      	bics	r3, r2
 8005718:	3308      	adds	r3, #8
 800571a:	0006      	movs	r6, r0
 800571c:	001f      	movs	r7, r3
 800571e:	2b0c      	cmp	r3, #12
 8005720:	d232      	bcs.n	8005788 <_malloc_r+0x78>
 8005722:	270c      	movs	r7, #12
 8005724:	42b9      	cmp	r1, r7
 8005726:	d831      	bhi.n	800578c <_malloc_r+0x7c>
 8005728:	0030      	movs	r0, r6
 800572a:	f000 fdf5 	bl	8006318 <__malloc_lock>
 800572e:	4d32      	ldr	r5, [pc, #200]	; (80057f8 <_malloc_r+0xe8>)
 8005730:	682b      	ldr	r3, [r5, #0]
 8005732:	001c      	movs	r4, r3
 8005734:	2c00      	cmp	r4, #0
 8005736:	d12e      	bne.n	8005796 <_malloc_r+0x86>
 8005738:	0039      	movs	r1, r7
 800573a:	0030      	movs	r0, r6
 800573c:	f7ff ffc6 	bl	80056cc <sbrk_aligned>
 8005740:	0004      	movs	r4, r0
 8005742:	1c43      	adds	r3, r0, #1
 8005744:	d11e      	bne.n	8005784 <_malloc_r+0x74>
 8005746:	682c      	ldr	r4, [r5, #0]
 8005748:	0025      	movs	r5, r4
 800574a:	2d00      	cmp	r5, #0
 800574c:	d14a      	bne.n	80057e4 <_malloc_r+0xd4>
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	0029      	movs	r1, r5
 8005752:	18e3      	adds	r3, r4, r3
 8005754:	0030      	movs	r0, r6
 8005756:	9301      	str	r3, [sp, #4]
 8005758:	f000 fb34 	bl	8005dc4 <_sbrk_r>
 800575c:	9b01      	ldr	r3, [sp, #4]
 800575e:	4283      	cmp	r3, r0
 8005760:	d143      	bne.n	80057ea <_malloc_r+0xda>
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	3703      	adds	r7, #3
 8005766:	1aff      	subs	r7, r7, r3
 8005768:	2303      	movs	r3, #3
 800576a:	439f      	bics	r7, r3
 800576c:	3708      	adds	r7, #8
 800576e:	2f0c      	cmp	r7, #12
 8005770:	d200      	bcs.n	8005774 <_malloc_r+0x64>
 8005772:	270c      	movs	r7, #12
 8005774:	0039      	movs	r1, r7
 8005776:	0030      	movs	r0, r6
 8005778:	f7ff ffa8 	bl	80056cc <sbrk_aligned>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	d034      	beq.n	80057ea <_malloc_r+0xda>
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	19df      	adds	r7, r3, r7
 8005784:	6027      	str	r7, [r4, #0]
 8005786:	e013      	b.n	80057b0 <_malloc_r+0xa0>
 8005788:	2b00      	cmp	r3, #0
 800578a:	dacb      	bge.n	8005724 <_malloc_r+0x14>
 800578c:	230c      	movs	r3, #12
 800578e:	2500      	movs	r5, #0
 8005790:	6033      	str	r3, [r6, #0]
 8005792:	0028      	movs	r0, r5
 8005794:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005796:	6822      	ldr	r2, [r4, #0]
 8005798:	1bd1      	subs	r1, r2, r7
 800579a:	d420      	bmi.n	80057de <_malloc_r+0xce>
 800579c:	290b      	cmp	r1, #11
 800579e:	d917      	bls.n	80057d0 <_malloc_r+0xc0>
 80057a0:	19e2      	adds	r2, r4, r7
 80057a2:	6027      	str	r7, [r4, #0]
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	d111      	bne.n	80057cc <_malloc_r+0xbc>
 80057a8:	602a      	str	r2, [r5, #0]
 80057aa:	6863      	ldr	r3, [r4, #4]
 80057ac:	6011      	str	r1, [r2, #0]
 80057ae:	6053      	str	r3, [r2, #4]
 80057b0:	0030      	movs	r0, r6
 80057b2:	0025      	movs	r5, r4
 80057b4:	f000 fdb8 	bl	8006328 <__malloc_unlock>
 80057b8:	2207      	movs	r2, #7
 80057ba:	350b      	adds	r5, #11
 80057bc:	1d23      	adds	r3, r4, #4
 80057be:	4395      	bics	r5, r2
 80057c0:	1aea      	subs	r2, r5, r3
 80057c2:	429d      	cmp	r5, r3
 80057c4:	d0e5      	beq.n	8005792 <_malloc_r+0x82>
 80057c6:	1b5b      	subs	r3, r3, r5
 80057c8:	50a3      	str	r3, [r4, r2]
 80057ca:	e7e2      	b.n	8005792 <_malloc_r+0x82>
 80057cc:	605a      	str	r2, [r3, #4]
 80057ce:	e7ec      	b.n	80057aa <_malloc_r+0x9a>
 80057d0:	6862      	ldr	r2, [r4, #4]
 80057d2:	42a3      	cmp	r3, r4
 80057d4:	d101      	bne.n	80057da <_malloc_r+0xca>
 80057d6:	602a      	str	r2, [r5, #0]
 80057d8:	e7ea      	b.n	80057b0 <_malloc_r+0xa0>
 80057da:	605a      	str	r2, [r3, #4]
 80057dc:	e7e8      	b.n	80057b0 <_malloc_r+0xa0>
 80057de:	0023      	movs	r3, r4
 80057e0:	6864      	ldr	r4, [r4, #4]
 80057e2:	e7a7      	b.n	8005734 <_malloc_r+0x24>
 80057e4:	002c      	movs	r4, r5
 80057e6:	686d      	ldr	r5, [r5, #4]
 80057e8:	e7af      	b.n	800574a <_malloc_r+0x3a>
 80057ea:	230c      	movs	r3, #12
 80057ec:	0030      	movs	r0, r6
 80057ee:	6033      	str	r3, [r6, #0]
 80057f0:	f000 fd9a 	bl	8006328 <__malloc_unlock>
 80057f4:	e7cd      	b.n	8005792 <_malloc_r+0x82>
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	2000028c 	.word	0x2000028c

080057fc <__sfputc_r>:
 80057fc:	6893      	ldr	r3, [r2, #8]
 80057fe:	b510      	push	{r4, lr}
 8005800:	3b01      	subs	r3, #1
 8005802:	6093      	str	r3, [r2, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	da04      	bge.n	8005812 <__sfputc_r+0x16>
 8005808:	6994      	ldr	r4, [r2, #24]
 800580a:	42a3      	cmp	r3, r4
 800580c:	db07      	blt.n	800581e <__sfputc_r+0x22>
 800580e:	290a      	cmp	r1, #10
 8005810:	d005      	beq.n	800581e <__sfputc_r+0x22>
 8005812:	6813      	ldr	r3, [r2, #0]
 8005814:	1c58      	adds	r0, r3, #1
 8005816:	6010      	str	r0, [r2, #0]
 8005818:	7019      	strb	r1, [r3, #0]
 800581a:	0008      	movs	r0, r1
 800581c:	bd10      	pop	{r4, pc}
 800581e:	f000 fb2f 	bl	8005e80 <__swbuf_r>
 8005822:	0001      	movs	r1, r0
 8005824:	e7f9      	b.n	800581a <__sfputc_r+0x1e>

08005826 <__sfputs_r>:
 8005826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005828:	0006      	movs	r6, r0
 800582a:	000f      	movs	r7, r1
 800582c:	0014      	movs	r4, r2
 800582e:	18d5      	adds	r5, r2, r3
 8005830:	42ac      	cmp	r4, r5
 8005832:	d101      	bne.n	8005838 <__sfputs_r+0x12>
 8005834:	2000      	movs	r0, #0
 8005836:	e007      	b.n	8005848 <__sfputs_r+0x22>
 8005838:	7821      	ldrb	r1, [r4, #0]
 800583a:	003a      	movs	r2, r7
 800583c:	0030      	movs	r0, r6
 800583e:	f7ff ffdd 	bl	80057fc <__sfputc_r>
 8005842:	3401      	adds	r4, #1
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d1f3      	bne.n	8005830 <__sfputs_r+0xa>
 8005848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800584c <_vfiprintf_r>:
 800584c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800584e:	b0a1      	sub	sp, #132	; 0x84
 8005850:	0006      	movs	r6, r0
 8005852:	000c      	movs	r4, r1
 8005854:	001f      	movs	r7, r3
 8005856:	9203      	str	r2, [sp, #12]
 8005858:	2800      	cmp	r0, #0
 800585a:	d004      	beq.n	8005866 <_vfiprintf_r+0x1a>
 800585c:	6983      	ldr	r3, [r0, #24]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <_vfiprintf_r+0x1a>
 8005862:	f7ff fe8f 	bl	8005584 <__sinit>
 8005866:	4b8e      	ldr	r3, [pc, #568]	; (8005aa0 <_vfiprintf_r+0x254>)
 8005868:	429c      	cmp	r4, r3
 800586a:	d11c      	bne.n	80058a6 <_vfiprintf_r+0x5a>
 800586c:	6874      	ldr	r4, [r6, #4]
 800586e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005870:	07db      	lsls	r3, r3, #31
 8005872:	d405      	bmi.n	8005880 <_vfiprintf_r+0x34>
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	059b      	lsls	r3, r3, #22
 8005878:	d402      	bmi.n	8005880 <_vfiprintf_r+0x34>
 800587a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800587c:	f7ff ff23 	bl	80056c6 <__retarget_lock_acquire_recursive>
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	071b      	lsls	r3, r3, #28
 8005884:	d502      	bpl.n	800588c <_vfiprintf_r+0x40>
 8005886:	6923      	ldr	r3, [r4, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d11d      	bne.n	80058c8 <_vfiprintf_r+0x7c>
 800588c:	0021      	movs	r1, r4
 800588e:	0030      	movs	r0, r6
 8005890:	f000 fb60 	bl	8005f54 <__swsetup_r>
 8005894:	2800      	cmp	r0, #0
 8005896:	d017      	beq.n	80058c8 <_vfiprintf_r+0x7c>
 8005898:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800589a:	07db      	lsls	r3, r3, #31
 800589c:	d50d      	bpl.n	80058ba <_vfiprintf_r+0x6e>
 800589e:	2001      	movs	r0, #1
 80058a0:	4240      	negs	r0, r0
 80058a2:	b021      	add	sp, #132	; 0x84
 80058a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a6:	4b7f      	ldr	r3, [pc, #508]	; (8005aa4 <_vfiprintf_r+0x258>)
 80058a8:	429c      	cmp	r4, r3
 80058aa:	d101      	bne.n	80058b0 <_vfiprintf_r+0x64>
 80058ac:	68b4      	ldr	r4, [r6, #8]
 80058ae:	e7de      	b.n	800586e <_vfiprintf_r+0x22>
 80058b0:	4b7d      	ldr	r3, [pc, #500]	; (8005aa8 <_vfiprintf_r+0x25c>)
 80058b2:	429c      	cmp	r4, r3
 80058b4:	d1db      	bne.n	800586e <_vfiprintf_r+0x22>
 80058b6:	68f4      	ldr	r4, [r6, #12]
 80058b8:	e7d9      	b.n	800586e <_vfiprintf_r+0x22>
 80058ba:	89a3      	ldrh	r3, [r4, #12]
 80058bc:	059b      	lsls	r3, r3, #22
 80058be:	d4ee      	bmi.n	800589e <_vfiprintf_r+0x52>
 80058c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058c2:	f7ff ff01 	bl	80056c8 <__retarget_lock_release_recursive>
 80058c6:	e7ea      	b.n	800589e <_vfiprintf_r+0x52>
 80058c8:	2300      	movs	r3, #0
 80058ca:	ad08      	add	r5, sp, #32
 80058cc:	616b      	str	r3, [r5, #20]
 80058ce:	3320      	adds	r3, #32
 80058d0:	766b      	strb	r3, [r5, #25]
 80058d2:	3310      	adds	r3, #16
 80058d4:	76ab      	strb	r3, [r5, #26]
 80058d6:	9707      	str	r7, [sp, #28]
 80058d8:	9f03      	ldr	r7, [sp, #12]
 80058da:	783b      	ldrb	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <_vfiprintf_r+0x98>
 80058e0:	2b25      	cmp	r3, #37	; 0x25
 80058e2:	d14e      	bne.n	8005982 <_vfiprintf_r+0x136>
 80058e4:	9b03      	ldr	r3, [sp, #12]
 80058e6:	1afb      	subs	r3, r7, r3
 80058e8:	9305      	str	r3, [sp, #20]
 80058ea:	9b03      	ldr	r3, [sp, #12]
 80058ec:	429f      	cmp	r7, r3
 80058ee:	d00d      	beq.n	800590c <_vfiprintf_r+0xc0>
 80058f0:	9b05      	ldr	r3, [sp, #20]
 80058f2:	0021      	movs	r1, r4
 80058f4:	0030      	movs	r0, r6
 80058f6:	9a03      	ldr	r2, [sp, #12]
 80058f8:	f7ff ff95 	bl	8005826 <__sfputs_r>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d100      	bne.n	8005902 <_vfiprintf_r+0xb6>
 8005900:	e0b5      	b.n	8005a6e <_vfiprintf_r+0x222>
 8005902:	696a      	ldr	r2, [r5, #20]
 8005904:	9b05      	ldr	r3, [sp, #20]
 8005906:	4694      	mov	ip, r2
 8005908:	4463      	add	r3, ip
 800590a:	616b      	str	r3, [r5, #20]
 800590c:	783b      	ldrb	r3, [r7, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d100      	bne.n	8005914 <_vfiprintf_r+0xc8>
 8005912:	e0ac      	b.n	8005a6e <_vfiprintf_r+0x222>
 8005914:	2201      	movs	r2, #1
 8005916:	1c7b      	adds	r3, r7, #1
 8005918:	9303      	str	r3, [sp, #12]
 800591a:	2300      	movs	r3, #0
 800591c:	4252      	negs	r2, r2
 800591e:	606a      	str	r2, [r5, #4]
 8005920:	a904      	add	r1, sp, #16
 8005922:	3254      	adds	r2, #84	; 0x54
 8005924:	1852      	adds	r2, r2, r1
 8005926:	602b      	str	r3, [r5, #0]
 8005928:	60eb      	str	r3, [r5, #12]
 800592a:	60ab      	str	r3, [r5, #8]
 800592c:	7013      	strb	r3, [r2, #0]
 800592e:	65ab      	str	r3, [r5, #88]	; 0x58
 8005930:	9b03      	ldr	r3, [sp, #12]
 8005932:	2205      	movs	r2, #5
 8005934:	7819      	ldrb	r1, [r3, #0]
 8005936:	485d      	ldr	r0, [pc, #372]	; (8005aac <_vfiprintf_r+0x260>)
 8005938:	f000 fce2 	bl	8006300 <memchr>
 800593c:	9b03      	ldr	r3, [sp, #12]
 800593e:	1c5f      	adds	r7, r3, #1
 8005940:	2800      	cmp	r0, #0
 8005942:	d120      	bne.n	8005986 <_vfiprintf_r+0x13a>
 8005944:	682a      	ldr	r2, [r5, #0]
 8005946:	06d3      	lsls	r3, r2, #27
 8005948:	d504      	bpl.n	8005954 <_vfiprintf_r+0x108>
 800594a:	2353      	movs	r3, #83	; 0x53
 800594c:	a904      	add	r1, sp, #16
 800594e:	185b      	adds	r3, r3, r1
 8005950:	2120      	movs	r1, #32
 8005952:	7019      	strb	r1, [r3, #0]
 8005954:	0713      	lsls	r3, r2, #28
 8005956:	d504      	bpl.n	8005962 <_vfiprintf_r+0x116>
 8005958:	2353      	movs	r3, #83	; 0x53
 800595a:	a904      	add	r1, sp, #16
 800595c:	185b      	adds	r3, r3, r1
 800595e:	212b      	movs	r1, #43	; 0x2b
 8005960:	7019      	strb	r1, [r3, #0]
 8005962:	9b03      	ldr	r3, [sp, #12]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	2b2a      	cmp	r3, #42	; 0x2a
 8005968:	d016      	beq.n	8005998 <_vfiprintf_r+0x14c>
 800596a:	2100      	movs	r1, #0
 800596c:	68eb      	ldr	r3, [r5, #12]
 800596e:	9f03      	ldr	r7, [sp, #12]
 8005970:	783a      	ldrb	r2, [r7, #0]
 8005972:	1c78      	adds	r0, r7, #1
 8005974:	3a30      	subs	r2, #48	; 0x30
 8005976:	4684      	mov	ip, r0
 8005978:	2a09      	cmp	r2, #9
 800597a:	d94f      	bls.n	8005a1c <_vfiprintf_r+0x1d0>
 800597c:	2900      	cmp	r1, #0
 800597e:	d111      	bne.n	80059a4 <_vfiprintf_r+0x158>
 8005980:	e017      	b.n	80059b2 <_vfiprintf_r+0x166>
 8005982:	3701      	adds	r7, #1
 8005984:	e7a9      	b.n	80058da <_vfiprintf_r+0x8e>
 8005986:	4b49      	ldr	r3, [pc, #292]	; (8005aac <_vfiprintf_r+0x260>)
 8005988:	682a      	ldr	r2, [r5, #0]
 800598a:	1ac0      	subs	r0, r0, r3
 800598c:	2301      	movs	r3, #1
 800598e:	4083      	lsls	r3, r0
 8005990:	4313      	orrs	r3, r2
 8005992:	602b      	str	r3, [r5, #0]
 8005994:	9703      	str	r7, [sp, #12]
 8005996:	e7cb      	b.n	8005930 <_vfiprintf_r+0xe4>
 8005998:	9b07      	ldr	r3, [sp, #28]
 800599a:	1d19      	adds	r1, r3, #4
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	9107      	str	r1, [sp, #28]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	db01      	blt.n	80059a8 <_vfiprintf_r+0x15c>
 80059a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80059a6:	e004      	b.n	80059b2 <_vfiprintf_r+0x166>
 80059a8:	425b      	negs	r3, r3
 80059aa:	60eb      	str	r3, [r5, #12]
 80059ac:	2302      	movs	r3, #2
 80059ae:	4313      	orrs	r3, r2
 80059b0:	602b      	str	r3, [r5, #0]
 80059b2:	783b      	ldrb	r3, [r7, #0]
 80059b4:	2b2e      	cmp	r3, #46	; 0x2e
 80059b6:	d10a      	bne.n	80059ce <_vfiprintf_r+0x182>
 80059b8:	787b      	ldrb	r3, [r7, #1]
 80059ba:	2b2a      	cmp	r3, #42	; 0x2a
 80059bc:	d137      	bne.n	8005a2e <_vfiprintf_r+0x1e2>
 80059be:	9b07      	ldr	r3, [sp, #28]
 80059c0:	3702      	adds	r7, #2
 80059c2:	1d1a      	adds	r2, r3, #4
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	9207      	str	r2, [sp, #28]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	db2d      	blt.n	8005a28 <_vfiprintf_r+0x1dc>
 80059cc:	9309      	str	r3, [sp, #36]	; 0x24
 80059ce:	2203      	movs	r2, #3
 80059d0:	7839      	ldrb	r1, [r7, #0]
 80059d2:	4837      	ldr	r0, [pc, #220]	; (8005ab0 <_vfiprintf_r+0x264>)
 80059d4:	f000 fc94 	bl	8006300 <memchr>
 80059d8:	2800      	cmp	r0, #0
 80059da:	d007      	beq.n	80059ec <_vfiprintf_r+0x1a0>
 80059dc:	4b34      	ldr	r3, [pc, #208]	; (8005ab0 <_vfiprintf_r+0x264>)
 80059de:	682a      	ldr	r2, [r5, #0]
 80059e0:	1ac0      	subs	r0, r0, r3
 80059e2:	2340      	movs	r3, #64	; 0x40
 80059e4:	4083      	lsls	r3, r0
 80059e6:	4313      	orrs	r3, r2
 80059e8:	3701      	adds	r7, #1
 80059ea:	602b      	str	r3, [r5, #0]
 80059ec:	7839      	ldrb	r1, [r7, #0]
 80059ee:	1c7b      	adds	r3, r7, #1
 80059f0:	2206      	movs	r2, #6
 80059f2:	4830      	ldr	r0, [pc, #192]	; (8005ab4 <_vfiprintf_r+0x268>)
 80059f4:	9303      	str	r3, [sp, #12]
 80059f6:	7629      	strb	r1, [r5, #24]
 80059f8:	f000 fc82 	bl	8006300 <memchr>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d045      	beq.n	8005a8c <_vfiprintf_r+0x240>
 8005a00:	4b2d      	ldr	r3, [pc, #180]	; (8005ab8 <_vfiprintf_r+0x26c>)
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d127      	bne.n	8005a56 <_vfiprintf_r+0x20a>
 8005a06:	2207      	movs	r2, #7
 8005a08:	9b07      	ldr	r3, [sp, #28]
 8005a0a:	3307      	adds	r3, #7
 8005a0c:	4393      	bics	r3, r2
 8005a0e:	3308      	adds	r3, #8
 8005a10:	9307      	str	r3, [sp, #28]
 8005a12:	696b      	ldr	r3, [r5, #20]
 8005a14:	9a04      	ldr	r2, [sp, #16]
 8005a16:	189b      	adds	r3, r3, r2
 8005a18:	616b      	str	r3, [r5, #20]
 8005a1a:	e75d      	b.n	80058d8 <_vfiprintf_r+0x8c>
 8005a1c:	210a      	movs	r1, #10
 8005a1e:	434b      	muls	r3, r1
 8005a20:	4667      	mov	r7, ip
 8005a22:	189b      	adds	r3, r3, r2
 8005a24:	3909      	subs	r1, #9
 8005a26:	e7a3      	b.n	8005970 <_vfiprintf_r+0x124>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	425b      	negs	r3, r3
 8005a2c:	e7ce      	b.n	80059cc <_vfiprintf_r+0x180>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	001a      	movs	r2, r3
 8005a32:	3701      	adds	r7, #1
 8005a34:	606b      	str	r3, [r5, #4]
 8005a36:	7839      	ldrb	r1, [r7, #0]
 8005a38:	1c78      	adds	r0, r7, #1
 8005a3a:	3930      	subs	r1, #48	; 0x30
 8005a3c:	4684      	mov	ip, r0
 8005a3e:	2909      	cmp	r1, #9
 8005a40:	d903      	bls.n	8005a4a <_vfiprintf_r+0x1fe>
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0c3      	beq.n	80059ce <_vfiprintf_r+0x182>
 8005a46:	9209      	str	r2, [sp, #36]	; 0x24
 8005a48:	e7c1      	b.n	80059ce <_vfiprintf_r+0x182>
 8005a4a:	230a      	movs	r3, #10
 8005a4c:	435a      	muls	r2, r3
 8005a4e:	4667      	mov	r7, ip
 8005a50:	1852      	adds	r2, r2, r1
 8005a52:	3b09      	subs	r3, #9
 8005a54:	e7ef      	b.n	8005a36 <_vfiprintf_r+0x1ea>
 8005a56:	ab07      	add	r3, sp, #28
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	0022      	movs	r2, r4
 8005a5c:	0029      	movs	r1, r5
 8005a5e:	0030      	movs	r0, r6
 8005a60:	4b16      	ldr	r3, [pc, #88]	; (8005abc <_vfiprintf_r+0x270>)
 8005a62:	e000      	b.n	8005a66 <_vfiprintf_r+0x21a>
 8005a64:	bf00      	nop
 8005a66:	9004      	str	r0, [sp, #16]
 8005a68:	9b04      	ldr	r3, [sp, #16]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	d1d1      	bne.n	8005a12 <_vfiprintf_r+0x1c6>
 8005a6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a70:	07db      	lsls	r3, r3, #31
 8005a72:	d405      	bmi.n	8005a80 <_vfiprintf_r+0x234>
 8005a74:	89a3      	ldrh	r3, [r4, #12]
 8005a76:	059b      	lsls	r3, r3, #22
 8005a78:	d402      	bmi.n	8005a80 <_vfiprintf_r+0x234>
 8005a7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a7c:	f7ff fe24 	bl	80056c8 <__retarget_lock_release_recursive>
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	065b      	lsls	r3, r3, #25
 8005a84:	d500      	bpl.n	8005a88 <_vfiprintf_r+0x23c>
 8005a86:	e70a      	b.n	800589e <_vfiprintf_r+0x52>
 8005a88:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005a8a:	e70a      	b.n	80058a2 <_vfiprintf_r+0x56>
 8005a8c:	ab07      	add	r3, sp, #28
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	0022      	movs	r2, r4
 8005a92:	0029      	movs	r1, r5
 8005a94:	0030      	movs	r0, r6
 8005a96:	4b09      	ldr	r3, [pc, #36]	; (8005abc <_vfiprintf_r+0x270>)
 8005a98:	f000 f882 	bl	8005ba0 <_printf_i>
 8005a9c:	e7e3      	b.n	8005a66 <_vfiprintf_r+0x21a>
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	08006908 	.word	0x08006908
 8005aa4:	08006928 	.word	0x08006928
 8005aa8:	080068e8 	.word	0x080068e8
 8005aac:	08006948 	.word	0x08006948
 8005ab0:	0800694e 	.word	0x0800694e
 8005ab4:	08006952 	.word	0x08006952
 8005ab8:	00000000 	.word	0x00000000
 8005abc:	08005827 	.word	0x08005827

08005ac0 <_printf_common>:
 8005ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ac2:	0015      	movs	r5, r2
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	688a      	ldr	r2, [r1, #8]
 8005ac8:	690b      	ldr	r3, [r1, #16]
 8005aca:	000c      	movs	r4, r1
 8005acc:	9000      	str	r0, [sp, #0]
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	da00      	bge.n	8005ad4 <_printf_common+0x14>
 8005ad2:	0013      	movs	r3, r2
 8005ad4:	0022      	movs	r2, r4
 8005ad6:	602b      	str	r3, [r5, #0]
 8005ad8:	3243      	adds	r2, #67	; 0x43
 8005ada:	7812      	ldrb	r2, [r2, #0]
 8005adc:	2a00      	cmp	r2, #0
 8005ade:	d001      	beq.n	8005ae4 <_printf_common+0x24>
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	602b      	str	r3, [r5, #0]
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	069b      	lsls	r3, r3, #26
 8005ae8:	d502      	bpl.n	8005af0 <_printf_common+0x30>
 8005aea:	682b      	ldr	r3, [r5, #0]
 8005aec:	3302      	adds	r3, #2
 8005aee:	602b      	str	r3, [r5, #0]
 8005af0:	6822      	ldr	r2, [r4, #0]
 8005af2:	2306      	movs	r3, #6
 8005af4:	0017      	movs	r7, r2
 8005af6:	401f      	ands	r7, r3
 8005af8:	421a      	tst	r2, r3
 8005afa:	d027      	beq.n	8005b4c <_printf_common+0x8c>
 8005afc:	0023      	movs	r3, r4
 8005afe:	3343      	adds	r3, #67	; 0x43
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	1e5a      	subs	r2, r3, #1
 8005b04:	4193      	sbcs	r3, r2
 8005b06:	6822      	ldr	r2, [r4, #0]
 8005b08:	0692      	lsls	r2, r2, #26
 8005b0a:	d430      	bmi.n	8005b6e <_printf_common+0xae>
 8005b0c:	0022      	movs	r2, r4
 8005b0e:	9901      	ldr	r1, [sp, #4]
 8005b10:	9800      	ldr	r0, [sp, #0]
 8005b12:	9e08      	ldr	r6, [sp, #32]
 8005b14:	3243      	adds	r2, #67	; 0x43
 8005b16:	47b0      	blx	r6
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	d025      	beq.n	8005b68 <_printf_common+0xa8>
 8005b1c:	2306      	movs	r3, #6
 8005b1e:	6820      	ldr	r0, [r4, #0]
 8005b20:	682a      	ldr	r2, [r5, #0]
 8005b22:	68e1      	ldr	r1, [r4, #12]
 8005b24:	2500      	movs	r5, #0
 8005b26:	4003      	ands	r3, r0
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d103      	bne.n	8005b34 <_printf_common+0x74>
 8005b2c:	1a8d      	subs	r5, r1, r2
 8005b2e:	43eb      	mvns	r3, r5
 8005b30:	17db      	asrs	r3, r3, #31
 8005b32:	401d      	ands	r5, r3
 8005b34:	68a3      	ldr	r3, [r4, #8]
 8005b36:	6922      	ldr	r2, [r4, #16]
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	dd01      	ble.n	8005b40 <_printf_common+0x80>
 8005b3c:	1a9b      	subs	r3, r3, r2
 8005b3e:	18ed      	adds	r5, r5, r3
 8005b40:	2700      	movs	r7, #0
 8005b42:	42bd      	cmp	r5, r7
 8005b44:	d120      	bne.n	8005b88 <_printf_common+0xc8>
 8005b46:	2000      	movs	r0, #0
 8005b48:	e010      	b.n	8005b6c <_printf_common+0xac>
 8005b4a:	3701      	adds	r7, #1
 8005b4c:	68e3      	ldr	r3, [r4, #12]
 8005b4e:	682a      	ldr	r2, [r5, #0]
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	42bb      	cmp	r3, r7
 8005b54:	ddd2      	ble.n	8005afc <_printf_common+0x3c>
 8005b56:	0022      	movs	r2, r4
 8005b58:	2301      	movs	r3, #1
 8005b5a:	9901      	ldr	r1, [sp, #4]
 8005b5c:	9800      	ldr	r0, [sp, #0]
 8005b5e:	9e08      	ldr	r6, [sp, #32]
 8005b60:	3219      	adds	r2, #25
 8005b62:	47b0      	blx	r6
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	d1f0      	bne.n	8005b4a <_printf_common+0x8a>
 8005b68:	2001      	movs	r0, #1
 8005b6a:	4240      	negs	r0, r0
 8005b6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b6e:	2030      	movs	r0, #48	; 0x30
 8005b70:	18e1      	adds	r1, r4, r3
 8005b72:	3143      	adds	r1, #67	; 0x43
 8005b74:	7008      	strb	r0, [r1, #0]
 8005b76:	0021      	movs	r1, r4
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	3145      	adds	r1, #69	; 0x45
 8005b7c:	7809      	ldrb	r1, [r1, #0]
 8005b7e:	18a2      	adds	r2, r4, r2
 8005b80:	3243      	adds	r2, #67	; 0x43
 8005b82:	3302      	adds	r3, #2
 8005b84:	7011      	strb	r1, [r2, #0]
 8005b86:	e7c1      	b.n	8005b0c <_printf_common+0x4c>
 8005b88:	0022      	movs	r2, r4
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	9901      	ldr	r1, [sp, #4]
 8005b8e:	9800      	ldr	r0, [sp, #0]
 8005b90:	9e08      	ldr	r6, [sp, #32]
 8005b92:	321a      	adds	r2, #26
 8005b94:	47b0      	blx	r6
 8005b96:	1c43      	adds	r3, r0, #1
 8005b98:	d0e6      	beq.n	8005b68 <_printf_common+0xa8>
 8005b9a:	3701      	adds	r7, #1
 8005b9c:	e7d1      	b.n	8005b42 <_printf_common+0x82>
	...

08005ba0 <_printf_i>:
 8005ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ba2:	b08b      	sub	sp, #44	; 0x2c
 8005ba4:	9206      	str	r2, [sp, #24]
 8005ba6:	000a      	movs	r2, r1
 8005ba8:	3243      	adds	r2, #67	; 0x43
 8005baa:	9307      	str	r3, [sp, #28]
 8005bac:	9005      	str	r0, [sp, #20]
 8005bae:	9204      	str	r2, [sp, #16]
 8005bb0:	7e0a      	ldrb	r2, [r1, #24]
 8005bb2:	000c      	movs	r4, r1
 8005bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bb6:	2a78      	cmp	r2, #120	; 0x78
 8005bb8:	d807      	bhi.n	8005bca <_printf_i+0x2a>
 8005bba:	2a62      	cmp	r2, #98	; 0x62
 8005bbc:	d809      	bhi.n	8005bd2 <_printf_i+0x32>
 8005bbe:	2a00      	cmp	r2, #0
 8005bc0:	d100      	bne.n	8005bc4 <_printf_i+0x24>
 8005bc2:	e0c1      	b.n	8005d48 <_printf_i+0x1a8>
 8005bc4:	2a58      	cmp	r2, #88	; 0x58
 8005bc6:	d100      	bne.n	8005bca <_printf_i+0x2a>
 8005bc8:	e08c      	b.n	8005ce4 <_printf_i+0x144>
 8005bca:	0026      	movs	r6, r4
 8005bcc:	3642      	adds	r6, #66	; 0x42
 8005bce:	7032      	strb	r2, [r6, #0]
 8005bd0:	e022      	b.n	8005c18 <_printf_i+0x78>
 8005bd2:	0010      	movs	r0, r2
 8005bd4:	3863      	subs	r0, #99	; 0x63
 8005bd6:	2815      	cmp	r0, #21
 8005bd8:	d8f7      	bhi.n	8005bca <_printf_i+0x2a>
 8005bda:	f7fa fa93 	bl	8000104 <__gnu_thumb1_case_shi>
 8005bde:	0016      	.short	0x0016
 8005be0:	fff6001f 	.word	0xfff6001f
 8005be4:	fff6fff6 	.word	0xfff6fff6
 8005be8:	001ffff6 	.word	0x001ffff6
 8005bec:	fff6fff6 	.word	0xfff6fff6
 8005bf0:	fff6fff6 	.word	0xfff6fff6
 8005bf4:	003600a8 	.word	0x003600a8
 8005bf8:	fff6009a 	.word	0xfff6009a
 8005bfc:	00b9fff6 	.word	0x00b9fff6
 8005c00:	0036fff6 	.word	0x0036fff6
 8005c04:	fff6fff6 	.word	0xfff6fff6
 8005c08:	009e      	.short	0x009e
 8005c0a:	0026      	movs	r6, r4
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	3642      	adds	r6, #66	; 0x42
 8005c10:	1d11      	adds	r1, r2, #4
 8005c12:	6019      	str	r1, [r3, #0]
 8005c14:	6813      	ldr	r3, [r2, #0]
 8005c16:	7033      	strb	r3, [r6, #0]
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e0a7      	b.n	8005d6c <_printf_i+0x1cc>
 8005c1c:	6808      	ldr	r0, [r1, #0]
 8005c1e:	6819      	ldr	r1, [r3, #0]
 8005c20:	1d0a      	adds	r2, r1, #4
 8005c22:	0605      	lsls	r5, r0, #24
 8005c24:	d50b      	bpl.n	8005c3e <_printf_i+0x9e>
 8005c26:	680d      	ldr	r5, [r1, #0]
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	2d00      	cmp	r5, #0
 8005c2c:	da03      	bge.n	8005c36 <_printf_i+0x96>
 8005c2e:	232d      	movs	r3, #45	; 0x2d
 8005c30:	9a04      	ldr	r2, [sp, #16]
 8005c32:	426d      	negs	r5, r5
 8005c34:	7013      	strb	r3, [r2, #0]
 8005c36:	4b61      	ldr	r3, [pc, #388]	; (8005dbc <_printf_i+0x21c>)
 8005c38:	270a      	movs	r7, #10
 8005c3a:	9303      	str	r3, [sp, #12]
 8005c3c:	e01b      	b.n	8005c76 <_printf_i+0xd6>
 8005c3e:	680d      	ldr	r5, [r1, #0]
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	0641      	lsls	r1, r0, #25
 8005c44:	d5f1      	bpl.n	8005c2a <_printf_i+0x8a>
 8005c46:	b22d      	sxth	r5, r5
 8005c48:	e7ef      	b.n	8005c2a <_printf_i+0x8a>
 8005c4a:	680d      	ldr	r5, [r1, #0]
 8005c4c:	6819      	ldr	r1, [r3, #0]
 8005c4e:	1d08      	adds	r0, r1, #4
 8005c50:	6018      	str	r0, [r3, #0]
 8005c52:	062e      	lsls	r6, r5, #24
 8005c54:	d501      	bpl.n	8005c5a <_printf_i+0xba>
 8005c56:	680d      	ldr	r5, [r1, #0]
 8005c58:	e003      	b.n	8005c62 <_printf_i+0xc2>
 8005c5a:	066d      	lsls	r5, r5, #25
 8005c5c:	d5fb      	bpl.n	8005c56 <_printf_i+0xb6>
 8005c5e:	680d      	ldr	r5, [r1, #0]
 8005c60:	b2ad      	uxth	r5, r5
 8005c62:	4b56      	ldr	r3, [pc, #344]	; (8005dbc <_printf_i+0x21c>)
 8005c64:	2708      	movs	r7, #8
 8005c66:	9303      	str	r3, [sp, #12]
 8005c68:	2a6f      	cmp	r2, #111	; 0x6f
 8005c6a:	d000      	beq.n	8005c6e <_printf_i+0xce>
 8005c6c:	3702      	adds	r7, #2
 8005c6e:	0023      	movs	r3, r4
 8005c70:	2200      	movs	r2, #0
 8005c72:	3343      	adds	r3, #67	; 0x43
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	6863      	ldr	r3, [r4, #4]
 8005c78:	60a3      	str	r3, [r4, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	db03      	blt.n	8005c86 <_printf_i+0xe6>
 8005c7e:	2204      	movs	r2, #4
 8005c80:	6821      	ldr	r1, [r4, #0]
 8005c82:	4391      	bics	r1, r2
 8005c84:	6021      	str	r1, [r4, #0]
 8005c86:	2d00      	cmp	r5, #0
 8005c88:	d102      	bne.n	8005c90 <_printf_i+0xf0>
 8005c8a:	9e04      	ldr	r6, [sp, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00c      	beq.n	8005caa <_printf_i+0x10a>
 8005c90:	9e04      	ldr	r6, [sp, #16]
 8005c92:	0028      	movs	r0, r5
 8005c94:	0039      	movs	r1, r7
 8005c96:	f7fa fac5 	bl	8000224 <__aeabi_uidivmod>
 8005c9a:	9b03      	ldr	r3, [sp, #12]
 8005c9c:	3e01      	subs	r6, #1
 8005c9e:	5c5b      	ldrb	r3, [r3, r1]
 8005ca0:	7033      	strb	r3, [r6, #0]
 8005ca2:	002b      	movs	r3, r5
 8005ca4:	0005      	movs	r5, r0
 8005ca6:	429f      	cmp	r7, r3
 8005ca8:	d9f3      	bls.n	8005c92 <_printf_i+0xf2>
 8005caa:	2f08      	cmp	r7, #8
 8005cac:	d109      	bne.n	8005cc2 <_printf_i+0x122>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	07db      	lsls	r3, r3, #31
 8005cb2:	d506      	bpl.n	8005cc2 <_printf_i+0x122>
 8005cb4:	6863      	ldr	r3, [r4, #4]
 8005cb6:	6922      	ldr	r2, [r4, #16]
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	dc02      	bgt.n	8005cc2 <_printf_i+0x122>
 8005cbc:	2330      	movs	r3, #48	; 0x30
 8005cbe:	3e01      	subs	r6, #1
 8005cc0:	7033      	strb	r3, [r6, #0]
 8005cc2:	9b04      	ldr	r3, [sp, #16]
 8005cc4:	1b9b      	subs	r3, r3, r6
 8005cc6:	6123      	str	r3, [r4, #16]
 8005cc8:	9b07      	ldr	r3, [sp, #28]
 8005cca:	0021      	movs	r1, r4
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	9805      	ldr	r0, [sp, #20]
 8005cd0:	9b06      	ldr	r3, [sp, #24]
 8005cd2:	aa09      	add	r2, sp, #36	; 0x24
 8005cd4:	f7ff fef4 	bl	8005ac0 <_printf_common>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	d14c      	bne.n	8005d76 <_printf_i+0x1d6>
 8005cdc:	2001      	movs	r0, #1
 8005cde:	4240      	negs	r0, r0
 8005ce0:	b00b      	add	sp, #44	; 0x2c
 8005ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ce4:	3145      	adds	r1, #69	; 0x45
 8005ce6:	700a      	strb	r2, [r1, #0]
 8005ce8:	4a34      	ldr	r2, [pc, #208]	; (8005dbc <_printf_i+0x21c>)
 8005cea:	9203      	str	r2, [sp, #12]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	6821      	ldr	r1, [r4, #0]
 8005cf0:	ca20      	ldmia	r2!, {r5}
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	0608      	lsls	r0, r1, #24
 8005cf6:	d516      	bpl.n	8005d26 <_printf_i+0x186>
 8005cf8:	07cb      	lsls	r3, r1, #31
 8005cfa:	d502      	bpl.n	8005d02 <_printf_i+0x162>
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	4319      	orrs	r1, r3
 8005d00:	6021      	str	r1, [r4, #0]
 8005d02:	2710      	movs	r7, #16
 8005d04:	2d00      	cmp	r5, #0
 8005d06:	d1b2      	bne.n	8005c6e <_printf_i+0xce>
 8005d08:	2320      	movs	r3, #32
 8005d0a:	6822      	ldr	r2, [r4, #0]
 8005d0c:	439a      	bics	r2, r3
 8005d0e:	6022      	str	r2, [r4, #0]
 8005d10:	e7ad      	b.n	8005c6e <_printf_i+0xce>
 8005d12:	2220      	movs	r2, #32
 8005d14:	6809      	ldr	r1, [r1, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	6022      	str	r2, [r4, #0]
 8005d1a:	0022      	movs	r2, r4
 8005d1c:	2178      	movs	r1, #120	; 0x78
 8005d1e:	3245      	adds	r2, #69	; 0x45
 8005d20:	7011      	strb	r1, [r2, #0]
 8005d22:	4a27      	ldr	r2, [pc, #156]	; (8005dc0 <_printf_i+0x220>)
 8005d24:	e7e1      	b.n	8005cea <_printf_i+0x14a>
 8005d26:	0648      	lsls	r0, r1, #25
 8005d28:	d5e6      	bpl.n	8005cf8 <_printf_i+0x158>
 8005d2a:	b2ad      	uxth	r5, r5
 8005d2c:	e7e4      	b.n	8005cf8 <_printf_i+0x158>
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	680d      	ldr	r5, [r1, #0]
 8005d32:	1d10      	adds	r0, r2, #4
 8005d34:	6949      	ldr	r1, [r1, #20]
 8005d36:	6018      	str	r0, [r3, #0]
 8005d38:	6813      	ldr	r3, [r2, #0]
 8005d3a:	062e      	lsls	r6, r5, #24
 8005d3c:	d501      	bpl.n	8005d42 <_printf_i+0x1a2>
 8005d3e:	6019      	str	r1, [r3, #0]
 8005d40:	e002      	b.n	8005d48 <_printf_i+0x1a8>
 8005d42:	066d      	lsls	r5, r5, #25
 8005d44:	d5fb      	bpl.n	8005d3e <_printf_i+0x19e>
 8005d46:	8019      	strh	r1, [r3, #0]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9e04      	ldr	r6, [sp, #16]
 8005d4c:	6123      	str	r3, [r4, #16]
 8005d4e:	e7bb      	b.n	8005cc8 <_printf_i+0x128>
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	1d11      	adds	r1, r2, #4
 8005d54:	6019      	str	r1, [r3, #0]
 8005d56:	6816      	ldr	r6, [r2, #0]
 8005d58:	2100      	movs	r1, #0
 8005d5a:	0030      	movs	r0, r6
 8005d5c:	6862      	ldr	r2, [r4, #4]
 8005d5e:	f000 facf 	bl	8006300 <memchr>
 8005d62:	2800      	cmp	r0, #0
 8005d64:	d001      	beq.n	8005d6a <_printf_i+0x1ca>
 8005d66:	1b80      	subs	r0, r0, r6
 8005d68:	6060      	str	r0, [r4, #4]
 8005d6a:	6863      	ldr	r3, [r4, #4]
 8005d6c:	6123      	str	r3, [r4, #16]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	9a04      	ldr	r2, [sp, #16]
 8005d72:	7013      	strb	r3, [r2, #0]
 8005d74:	e7a8      	b.n	8005cc8 <_printf_i+0x128>
 8005d76:	6923      	ldr	r3, [r4, #16]
 8005d78:	0032      	movs	r2, r6
 8005d7a:	9906      	ldr	r1, [sp, #24]
 8005d7c:	9805      	ldr	r0, [sp, #20]
 8005d7e:	9d07      	ldr	r5, [sp, #28]
 8005d80:	47a8      	blx	r5
 8005d82:	1c43      	adds	r3, r0, #1
 8005d84:	d0aa      	beq.n	8005cdc <_printf_i+0x13c>
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	079b      	lsls	r3, r3, #30
 8005d8a:	d415      	bmi.n	8005db8 <_printf_i+0x218>
 8005d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d8e:	68e0      	ldr	r0, [r4, #12]
 8005d90:	4298      	cmp	r0, r3
 8005d92:	daa5      	bge.n	8005ce0 <_printf_i+0x140>
 8005d94:	0018      	movs	r0, r3
 8005d96:	e7a3      	b.n	8005ce0 <_printf_i+0x140>
 8005d98:	0022      	movs	r2, r4
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	9906      	ldr	r1, [sp, #24]
 8005d9e:	9805      	ldr	r0, [sp, #20]
 8005da0:	9e07      	ldr	r6, [sp, #28]
 8005da2:	3219      	adds	r2, #25
 8005da4:	47b0      	blx	r6
 8005da6:	1c43      	adds	r3, r0, #1
 8005da8:	d098      	beq.n	8005cdc <_printf_i+0x13c>
 8005daa:	3501      	adds	r5, #1
 8005dac:	68e3      	ldr	r3, [r4, #12]
 8005dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	42ab      	cmp	r3, r5
 8005db4:	dcf0      	bgt.n	8005d98 <_printf_i+0x1f8>
 8005db6:	e7e9      	b.n	8005d8c <_printf_i+0x1ec>
 8005db8:	2500      	movs	r5, #0
 8005dba:	e7f7      	b.n	8005dac <_printf_i+0x20c>
 8005dbc:	08006959 	.word	0x08006959
 8005dc0:	0800696a 	.word	0x0800696a

08005dc4 <_sbrk_r>:
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	b570      	push	{r4, r5, r6, lr}
 8005dc8:	4d06      	ldr	r5, [pc, #24]	; (8005de4 <_sbrk_r+0x20>)
 8005dca:	0004      	movs	r4, r0
 8005dcc:	0008      	movs	r0, r1
 8005dce:	602b      	str	r3, [r5, #0]
 8005dd0:	f7fb fe9c 	bl	8001b0c <_sbrk>
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d103      	bne.n	8005de0 <_sbrk_r+0x1c>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d000      	beq.n	8005de0 <_sbrk_r+0x1c>
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	bd70      	pop	{r4, r5, r6, pc}
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	20000294 	.word	0x20000294

08005de8 <__sread>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	000c      	movs	r4, r1
 8005dec:	250e      	movs	r5, #14
 8005dee:	5f49      	ldrsh	r1, [r1, r5]
 8005df0:	f000 faec 	bl	80063cc <_read_r>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	db03      	blt.n	8005e00 <__sread+0x18>
 8005df8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005dfa:	181b      	adds	r3, r3, r0
 8005dfc:	6563      	str	r3, [r4, #84]	; 0x54
 8005dfe:	bd70      	pop	{r4, r5, r6, pc}
 8005e00:	89a3      	ldrh	r3, [r4, #12]
 8005e02:	4a02      	ldr	r2, [pc, #8]	; (8005e0c <__sread+0x24>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	81a3      	strh	r3, [r4, #12]
 8005e08:	e7f9      	b.n	8005dfe <__sread+0x16>
 8005e0a:	46c0      	nop			; (mov r8, r8)
 8005e0c:	ffffefff 	.word	0xffffefff

08005e10 <__swrite>:
 8005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e12:	001f      	movs	r7, r3
 8005e14:	898b      	ldrh	r3, [r1, #12]
 8005e16:	0005      	movs	r5, r0
 8005e18:	000c      	movs	r4, r1
 8005e1a:	0016      	movs	r6, r2
 8005e1c:	05db      	lsls	r3, r3, #23
 8005e1e:	d505      	bpl.n	8005e2c <__swrite+0x1c>
 8005e20:	230e      	movs	r3, #14
 8005e22:	5ec9      	ldrsh	r1, [r1, r3]
 8005e24:	2200      	movs	r2, #0
 8005e26:	2302      	movs	r3, #2
 8005e28:	f000 f9ea 	bl	8006200 <_lseek_r>
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	4a05      	ldr	r2, [pc, #20]	; (8005e44 <__swrite+0x34>)
 8005e30:	0028      	movs	r0, r5
 8005e32:	4013      	ands	r3, r2
 8005e34:	81a3      	strh	r3, [r4, #12]
 8005e36:	0032      	movs	r2, r6
 8005e38:	230e      	movs	r3, #14
 8005e3a:	5ee1      	ldrsh	r1, [r4, r3]
 8005e3c:	003b      	movs	r3, r7
 8005e3e:	f000 f875 	bl	8005f2c <_write_r>
 8005e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e44:	ffffefff 	.word	0xffffefff

08005e48 <__sseek>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	000c      	movs	r4, r1
 8005e4c:	250e      	movs	r5, #14
 8005e4e:	5f49      	ldrsh	r1, [r1, r5]
 8005e50:	f000 f9d6 	bl	8006200 <_lseek_r>
 8005e54:	89a3      	ldrh	r3, [r4, #12]
 8005e56:	1c42      	adds	r2, r0, #1
 8005e58:	d103      	bne.n	8005e62 <__sseek+0x1a>
 8005e5a:	4a05      	ldr	r2, [pc, #20]	; (8005e70 <__sseek+0x28>)
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	81a3      	strh	r3, [r4, #12]
 8005e60:	bd70      	pop	{r4, r5, r6, pc}
 8005e62:	2280      	movs	r2, #128	; 0x80
 8005e64:	0152      	lsls	r2, r2, #5
 8005e66:	4313      	orrs	r3, r2
 8005e68:	81a3      	strh	r3, [r4, #12]
 8005e6a:	6560      	str	r0, [r4, #84]	; 0x54
 8005e6c:	e7f8      	b.n	8005e60 <__sseek+0x18>
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	ffffefff 	.word	0xffffefff

08005e74 <__sclose>:
 8005e74:	b510      	push	{r4, lr}
 8005e76:	230e      	movs	r3, #14
 8005e78:	5ec9      	ldrsh	r1, [r1, r3]
 8005e7a:	f000 f8e3 	bl	8006044 <_close_r>
 8005e7e:	bd10      	pop	{r4, pc}

08005e80 <__swbuf_r>:
 8005e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e82:	0005      	movs	r5, r0
 8005e84:	000e      	movs	r6, r1
 8005e86:	0014      	movs	r4, r2
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	d004      	beq.n	8005e96 <__swbuf_r+0x16>
 8005e8c:	6983      	ldr	r3, [r0, #24]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <__swbuf_r+0x16>
 8005e92:	f7ff fb77 	bl	8005584 <__sinit>
 8005e96:	4b22      	ldr	r3, [pc, #136]	; (8005f20 <__swbuf_r+0xa0>)
 8005e98:	429c      	cmp	r4, r3
 8005e9a:	d12e      	bne.n	8005efa <__swbuf_r+0x7a>
 8005e9c:	686c      	ldr	r4, [r5, #4]
 8005e9e:	69a3      	ldr	r3, [r4, #24]
 8005ea0:	60a3      	str	r3, [r4, #8]
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	071b      	lsls	r3, r3, #28
 8005ea6:	d532      	bpl.n	8005f0e <__swbuf_r+0x8e>
 8005ea8:	6923      	ldr	r3, [r4, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d02f      	beq.n	8005f0e <__swbuf_r+0x8e>
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	6922      	ldr	r2, [r4, #16]
 8005eb2:	b2f7      	uxtb	r7, r6
 8005eb4:	1a98      	subs	r0, r3, r2
 8005eb6:	6963      	ldr	r3, [r4, #20]
 8005eb8:	b2f6      	uxtb	r6, r6
 8005eba:	4283      	cmp	r3, r0
 8005ebc:	dc05      	bgt.n	8005eca <__swbuf_r+0x4a>
 8005ebe:	0021      	movs	r1, r4
 8005ec0:	0028      	movs	r0, r5
 8005ec2:	f000 f95d 	bl	8006180 <_fflush_r>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d127      	bne.n	8005f1a <__swbuf_r+0x9a>
 8005eca:	68a3      	ldr	r3, [r4, #8]
 8005ecc:	3001      	adds	r0, #1
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	60a3      	str	r3, [r4, #8]
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	6022      	str	r2, [r4, #0]
 8005ed8:	701f      	strb	r7, [r3, #0]
 8005eda:	6963      	ldr	r3, [r4, #20]
 8005edc:	4283      	cmp	r3, r0
 8005ede:	d004      	beq.n	8005eea <__swbuf_r+0x6a>
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	07db      	lsls	r3, r3, #31
 8005ee4:	d507      	bpl.n	8005ef6 <__swbuf_r+0x76>
 8005ee6:	2e0a      	cmp	r6, #10
 8005ee8:	d105      	bne.n	8005ef6 <__swbuf_r+0x76>
 8005eea:	0021      	movs	r1, r4
 8005eec:	0028      	movs	r0, r5
 8005eee:	f000 f947 	bl	8006180 <_fflush_r>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d111      	bne.n	8005f1a <__swbuf_r+0x9a>
 8005ef6:	0030      	movs	r0, r6
 8005ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005efa:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <__swbuf_r+0xa4>)
 8005efc:	429c      	cmp	r4, r3
 8005efe:	d101      	bne.n	8005f04 <__swbuf_r+0x84>
 8005f00:	68ac      	ldr	r4, [r5, #8]
 8005f02:	e7cc      	b.n	8005e9e <__swbuf_r+0x1e>
 8005f04:	4b08      	ldr	r3, [pc, #32]	; (8005f28 <__swbuf_r+0xa8>)
 8005f06:	429c      	cmp	r4, r3
 8005f08:	d1c9      	bne.n	8005e9e <__swbuf_r+0x1e>
 8005f0a:	68ec      	ldr	r4, [r5, #12]
 8005f0c:	e7c7      	b.n	8005e9e <__swbuf_r+0x1e>
 8005f0e:	0021      	movs	r1, r4
 8005f10:	0028      	movs	r0, r5
 8005f12:	f000 f81f 	bl	8005f54 <__swsetup_r>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	d0c9      	beq.n	8005eae <__swbuf_r+0x2e>
 8005f1a:	2601      	movs	r6, #1
 8005f1c:	4276      	negs	r6, r6
 8005f1e:	e7ea      	b.n	8005ef6 <__swbuf_r+0x76>
 8005f20:	08006908 	.word	0x08006908
 8005f24:	08006928 	.word	0x08006928
 8005f28:	080068e8 	.word	0x080068e8

08005f2c <_write_r>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	0004      	movs	r4, r0
 8005f30:	0008      	movs	r0, r1
 8005f32:	0011      	movs	r1, r2
 8005f34:	001a      	movs	r2, r3
 8005f36:	2300      	movs	r3, #0
 8005f38:	4d05      	ldr	r5, [pc, #20]	; (8005f50 <_write_r+0x24>)
 8005f3a:	602b      	str	r3, [r5, #0]
 8005f3c:	f7fb fd9e 	bl	8001a7c <_write>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d103      	bne.n	8005f4c <_write_r+0x20>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d000      	beq.n	8005f4c <_write_r+0x20>
 8005f4a:	6023      	str	r3, [r4, #0]
 8005f4c:	bd70      	pop	{r4, r5, r6, pc}
 8005f4e:	46c0      	nop			; (mov r8, r8)
 8005f50:	20000294 	.word	0x20000294

08005f54 <__swsetup_r>:
 8005f54:	4b37      	ldr	r3, [pc, #220]	; (8006034 <__swsetup_r+0xe0>)
 8005f56:	b570      	push	{r4, r5, r6, lr}
 8005f58:	681d      	ldr	r5, [r3, #0]
 8005f5a:	0006      	movs	r6, r0
 8005f5c:	000c      	movs	r4, r1
 8005f5e:	2d00      	cmp	r5, #0
 8005f60:	d005      	beq.n	8005f6e <__swsetup_r+0x1a>
 8005f62:	69ab      	ldr	r3, [r5, #24]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d102      	bne.n	8005f6e <__swsetup_r+0x1a>
 8005f68:	0028      	movs	r0, r5
 8005f6a:	f7ff fb0b 	bl	8005584 <__sinit>
 8005f6e:	4b32      	ldr	r3, [pc, #200]	; (8006038 <__swsetup_r+0xe4>)
 8005f70:	429c      	cmp	r4, r3
 8005f72:	d10f      	bne.n	8005f94 <__swsetup_r+0x40>
 8005f74:	686c      	ldr	r4, [r5, #4]
 8005f76:	230c      	movs	r3, #12
 8005f78:	5ee2      	ldrsh	r2, [r4, r3]
 8005f7a:	b293      	uxth	r3, r2
 8005f7c:	0711      	lsls	r1, r2, #28
 8005f7e:	d42d      	bmi.n	8005fdc <__swsetup_r+0x88>
 8005f80:	06d9      	lsls	r1, r3, #27
 8005f82:	d411      	bmi.n	8005fa8 <__swsetup_r+0x54>
 8005f84:	2309      	movs	r3, #9
 8005f86:	2001      	movs	r0, #1
 8005f88:	6033      	str	r3, [r6, #0]
 8005f8a:	3337      	adds	r3, #55	; 0x37
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	4240      	negs	r0, r0
 8005f92:	bd70      	pop	{r4, r5, r6, pc}
 8005f94:	4b29      	ldr	r3, [pc, #164]	; (800603c <__swsetup_r+0xe8>)
 8005f96:	429c      	cmp	r4, r3
 8005f98:	d101      	bne.n	8005f9e <__swsetup_r+0x4a>
 8005f9a:	68ac      	ldr	r4, [r5, #8]
 8005f9c:	e7eb      	b.n	8005f76 <__swsetup_r+0x22>
 8005f9e:	4b28      	ldr	r3, [pc, #160]	; (8006040 <__swsetup_r+0xec>)
 8005fa0:	429c      	cmp	r4, r3
 8005fa2:	d1e8      	bne.n	8005f76 <__swsetup_r+0x22>
 8005fa4:	68ec      	ldr	r4, [r5, #12]
 8005fa6:	e7e6      	b.n	8005f76 <__swsetup_r+0x22>
 8005fa8:	075b      	lsls	r3, r3, #29
 8005faa:	d513      	bpl.n	8005fd4 <__swsetup_r+0x80>
 8005fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fae:	2900      	cmp	r1, #0
 8005fb0:	d008      	beq.n	8005fc4 <__swsetup_r+0x70>
 8005fb2:	0023      	movs	r3, r4
 8005fb4:	3344      	adds	r3, #68	; 0x44
 8005fb6:	4299      	cmp	r1, r3
 8005fb8:	d002      	beq.n	8005fc0 <__swsetup_r+0x6c>
 8005fba:	0030      	movs	r0, r6
 8005fbc:	f000 f9bc 	bl	8006338 <_free_r>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	6363      	str	r3, [r4, #52]	; 0x34
 8005fc4:	2224      	movs	r2, #36	; 0x24
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	4393      	bics	r3, r2
 8005fca:	81a3      	strh	r3, [r4, #12]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	6063      	str	r3, [r4, #4]
 8005fd0:	6923      	ldr	r3, [r4, #16]
 8005fd2:	6023      	str	r3, [r4, #0]
 8005fd4:	2308      	movs	r3, #8
 8005fd6:	89a2      	ldrh	r2, [r4, #12]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	81a3      	strh	r3, [r4, #12]
 8005fdc:	6923      	ldr	r3, [r4, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10b      	bne.n	8005ffa <__swsetup_r+0xa6>
 8005fe2:	21a0      	movs	r1, #160	; 0xa0
 8005fe4:	2280      	movs	r2, #128	; 0x80
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	0089      	lsls	r1, r1, #2
 8005fea:	0092      	lsls	r2, r2, #2
 8005fec:	400b      	ands	r3, r1
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d003      	beq.n	8005ffa <__swsetup_r+0xa6>
 8005ff2:	0021      	movs	r1, r4
 8005ff4:	0030      	movs	r0, r6
 8005ff6:	f000 f93f 	bl	8006278 <__smakebuf_r>
 8005ffa:	220c      	movs	r2, #12
 8005ffc:	5ea3      	ldrsh	r3, [r4, r2]
 8005ffe:	2001      	movs	r0, #1
 8006000:	001a      	movs	r2, r3
 8006002:	b299      	uxth	r1, r3
 8006004:	4002      	ands	r2, r0
 8006006:	4203      	tst	r3, r0
 8006008:	d00f      	beq.n	800602a <__swsetup_r+0xd6>
 800600a:	2200      	movs	r2, #0
 800600c:	60a2      	str	r2, [r4, #8]
 800600e:	6962      	ldr	r2, [r4, #20]
 8006010:	4252      	negs	r2, r2
 8006012:	61a2      	str	r2, [r4, #24]
 8006014:	2000      	movs	r0, #0
 8006016:	6922      	ldr	r2, [r4, #16]
 8006018:	4282      	cmp	r2, r0
 800601a:	d1ba      	bne.n	8005f92 <__swsetup_r+0x3e>
 800601c:	060a      	lsls	r2, r1, #24
 800601e:	d5b8      	bpl.n	8005f92 <__swsetup_r+0x3e>
 8006020:	2240      	movs	r2, #64	; 0x40
 8006022:	4313      	orrs	r3, r2
 8006024:	81a3      	strh	r3, [r4, #12]
 8006026:	3801      	subs	r0, #1
 8006028:	e7b3      	b.n	8005f92 <__swsetup_r+0x3e>
 800602a:	0788      	lsls	r0, r1, #30
 800602c:	d400      	bmi.n	8006030 <__swsetup_r+0xdc>
 800602e:	6962      	ldr	r2, [r4, #20]
 8006030:	60a2      	str	r2, [r4, #8]
 8006032:	e7ef      	b.n	8006014 <__swsetup_r+0xc0>
 8006034:	20000044 	.word	0x20000044
 8006038:	08006908 	.word	0x08006908
 800603c:	08006928 	.word	0x08006928
 8006040:	080068e8 	.word	0x080068e8

08006044 <_close_r>:
 8006044:	2300      	movs	r3, #0
 8006046:	b570      	push	{r4, r5, r6, lr}
 8006048:	4d06      	ldr	r5, [pc, #24]	; (8006064 <_close_r+0x20>)
 800604a:	0004      	movs	r4, r0
 800604c:	0008      	movs	r0, r1
 800604e:	602b      	str	r3, [r5, #0]
 8006050:	f7fb fd30 	bl	8001ab4 <_close>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d103      	bne.n	8006060 <_close_r+0x1c>
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d000      	beq.n	8006060 <_close_r+0x1c>
 800605e:	6023      	str	r3, [r4, #0]
 8006060:	bd70      	pop	{r4, r5, r6, pc}
 8006062:	46c0      	nop			; (mov r8, r8)
 8006064:	20000294 	.word	0x20000294

08006068 <__sflush_r>:
 8006068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800606a:	898b      	ldrh	r3, [r1, #12]
 800606c:	0005      	movs	r5, r0
 800606e:	000c      	movs	r4, r1
 8006070:	071a      	lsls	r2, r3, #28
 8006072:	d45f      	bmi.n	8006134 <__sflush_r+0xcc>
 8006074:	684a      	ldr	r2, [r1, #4]
 8006076:	2a00      	cmp	r2, #0
 8006078:	dc04      	bgt.n	8006084 <__sflush_r+0x1c>
 800607a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800607c:	2a00      	cmp	r2, #0
 800607e:	dc01      	bgt.n	8006084 <__sflush_r+0x1c>
 8006080:	2000      	movs	r0, #0
 8006082:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006084:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006086:	2f00      	cmp	r7, #0
 8006088:	d0fa      	beq.n	8006080 <__sflush_r+0x18>
 800608a:	2200      	movs	r2, #0
 800608c:	2180      	movs	r1, #128	; 0x80
 800608e:	682e      	ldr	r6, [r5, #0]
 8006090:	602a      	str	r2, [r5, #0]
 8006092:	001a      	movs	r2, r3
 8006094:	0149      	lsls	r1, r1, #5
 8006096:	400a      	ands	r2, r1
 8006098:	420b      	tst	r3, r1
 800609a:	d034      	beq.n	8006106 <__sflush_r+0x9e>
 800609c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800609e:	89a3      	ldrh	r3, [r4, #12]
 80060a0:	075b      	lsls	r3, r3, #29
 80060a2:	d506      	bpl.n	80060b2 <__sflush_r+0x4a>
 80060a4:	6863      	ldr	r3, [r4, #4]
 80060a6:	1ac0      	subs	r0, r0, r3
 80060a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <__sflush_r+0x4a>
 80060ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060b0:	1ac0      	subs	r0, r0, r3
 80060b2:	0002      	movs	r2, r0
 80060b4:	6a21      	ldr	r1, [r4, #32]
 80060b6:	2300      	movs	r3, #0
 80060b8:	0028      	movs	r0, r5
 80060ba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80060bc:	47b8      	blx	r7
 80060be:	89a1      	ldrh	r1, [r4, #12]
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d106      	bne.n	80060d2 <__sflush_r+0x6a>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	2b1d      	cmp	r3, #29
 80060c8:	d831      	bhi.n	800612e <__sflush_r+0xc6>
 80060ca:	4a2c      	ldr	r2, [pc, #176]	; (800617c <__sflush_r+0x114>)
 80060cc:	40da      	lsrs	r2, r3
 80060ce:	07d3      	lsls	r3, r2, #31
 80060d0:	d52d      	bpl.n	800612e <__sflush_r+0xc6>
 80060d2:	2300      	movs	r3, #0
 80060d4:	6063      	str	r3, [r4, #4]
 80060d6:	6923      	ldr	r3, [r4, #16]
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	04cb      	lsls	r3, r1, #19
 80060dc:	d505      	bpl.n	80060ea <__sflush_r+0x82>
 80060de:	1c43      	adds	r3, r0, #1
 80060e0:	d102      	bne.n	80060e8 <__sflush_r+0x80>
 80060e2:	682b      	ldr	r3, [r5, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d100      	bne.n	80060ea <__sflush_r+0x82>
 80060e8:	6560      	str	r0, [r4, #84]	; 0x54
 80060ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060ec:	602e      	str	r6, [r5, #0]
 80060ee:	2900      	cmp	r1, #0
 80060f0:	d0c6      	beq.n	8006080 <__sflush_r+0x18>
 80060f2:	0023      	movs	r3, r4
 80060f4:	3344      	adds	r3, #68	; 0x44
 80060f6:	4299      	cmp	r1, r3
 80060f8:	d002      	beq.n	8006100 <__sflush_r+0x98>
 80060fa:	0028      	movs	r0, r5
 80060fc:	f000 f91c 	bl	8006338 <_free_r>
 8006100:	2000      	movs	r0, #0
 8006102:	6360      	str	r0, [r4, #52]	; 0x34
 8006104:	e7bd      	b.n	8006082 <__sflush_r+0x1a>
 8006106:	2301      	movs	r3, #1
 8006108:	0028      	movs	r0, r5
 800610a:	6a21      	ldr	r1, [r4, #32]
 800610c:	47b8      	blx	r7
 800610e:	1c43      	adds	r3, r0, #1
 8006110:	d1c5      	bne.n	800609e <__sflush_r+0x36>
 8006112:	682b      	ldr	r3, [r5, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0c2      	beq.n	800609e <__sflush_r+0x36>
 8006118:	2b1d      	cmp	r3, #29
 800611a:	d001      	beq.n	8006120 <__sflush_r+0xb8>
 800611c:	2b16      	cmp	r3, #22
 800611e:	d101      	bne.n	8006124 <__sflush_r+0xbc>
 8006120:	602e      	str	r6, [r5, #0]
 8006122:	e7ad      	b.n	8006080 <__sflush_r+0x18>
 8006124:	2340      	movs	r3, #64	; 0x40
 8006126:	89a2      	ldrh	r2, [r4, #12]
 8006128:	4313      	orrs	r3, r2
 800612a:	81a3      	strh	r3, [r4, #12]
 800612c:	e7a9      	b.n	8006082 <__sflush_r+0x1a>
 800612e:	2340      	movs	r3, #64	; 0x40
 8006130:	430b      	orrs	r3, r1
 8006132:	e7fa      	b.n	800612a <__sflush_r+0xc2>
 8006134:	690f      	ldr	r7, [r1, #16]
 8006136:	2f00      	cmp	r7, #0
 8006138:	d0a2      	beq.n	8006080 <__sflush_r+0x18>
 800613a:	680a      	ldr	r2, [r1, #0]
 800613c:	600f      	str	r7, [r1, #0]
 800613e:	1bd2      	subs	r2, r2, r7
 8006140:	9201      	str	r2, [sp, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	079b      	lsls	r3, r3, #30
 8006146:	d100      	bne.n	800614a <__sflush_r+0xe2>
 8006148:	694a      	ldr	r2, [r1, #20]
 800614a:	60a2      	str	r2, [r4, #8]
 800614c:	9b01      	ldr	r3, [sp, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	dc00      	bgt.n	8006154 <__sflush_r+0xec>
 8006152:	e795      	b.n	8006080 <__sflush_r+0x18>
 8006154:	003a      	movs	r2, r7
 8006156:	0028      	movs	r0, r5
 8006158:	9b01      	ldr	r3, [sp, #4]
 800615a:	6a21      	ldr	r1, [r4, #32]
 800615c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800615e:	47b0      	blx	r6
 8006160:	2800      	cmp	r0, #0
 8006162:	dc06      	bgt.n	8006172 <__sflush_r+0x10a>
 8006164:	2340      	movs	r3, #64	; 0x40
 8006166:	2001      	movs	r0, #1
 8006168:	89a2      	ldrh	r2, [r4, #12]
 800616a:	4240      	negs	r0, r0
 800616c:	4313      	orrs	r3, r2
 800616e:	81a3      	strh	r3, [r4, #12]
 8006170:	e787      	b.n	8006082 <__sflush_r+0x1a>
 8006172:	9b01      	ldr	r3, [sp, #4]
 8006174:	183f      	adds	r7, r7, r0
 8006176:	1a1b      	subs	r3, r3, r0
 8006178:	9301      	str	r3, [sp, #4]
 800617a:	e7e7      	b.n	800614c <__sflush_r+0xe4>
 800617c:	20400001 	.word	0x20400001

08006180 <_fflush_r>:
 8006180:	690b      	ldr	r3, [r1, #16]
 8006182:	b570      	push	{r4, r5, r6, lr}
 8006184:	0005      	movs	r5, r0
 8006186:	000c      	movs	r4, r1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d102      	bne.n	8006192 <_fflush_r+0x12>
 800618c:	2500      	movs	r5, #0
 800618e:	0028      	movs	r0, r5
 8006190:	bd70      	pop	{r4, r5, r6, pc}
 8006192:	2800      	cmp	r0, #0
 8006194:	d004      	beq.n	80061a0 <_fflush_r+0x20>
 8006196:	6983      	ldr	r3, [r0, #24]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <_fflush_r+0x20>
 800619c:	f7ff f9f2 	bl	8005584 <__sinit>
 80061a0:	4b14      	ldr	r3, [pc, #80]	; (80061f4 <_fflush_r+0x74>)
 80061a2:	429c      	cmp	r4, r3
 80061a4:	d11b      	bne.n	80061de <_fflush_r+0x5e>
 80061a6:	686c      	ldr	r4, [r5, #4]
 80061a8:	220c      	movs	r2, #12
 80061aa:	5ea3      	ldrsh	r3, [r4, r2]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0ed      	beq.n	800618c <_fflush_r+0xc>
 80061b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061b2:	07d2      	lsls	r2, r2, #31
 80061b4:	d404      	bmi.n	80061c0 <_fflush_r+0x40>
 80061b6:	059b      	lsls	r3, r3, #22
 80061b8:	d402      	bmi.n	80061c0 <_fflush_r+0x40>
 80061ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061bc:	f7ff fa83 	bl	80056c6 <__retarget_lock_acquire_recursive>
 80061c0:	0028      	movs	r0, r5
 80061c2:	0021      	movs	r1, r4
 80061c4:	f7ff ff50 	bl	8006068 <__sflush_r>
 80061c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061ca:	0005      	movs	r5, r0
 80061cc:	07db      	lsls	r3, r3, #31
 80061ce:	d4de      	bmi.n	800618e <_fflush_r+0xe>
 80061d0:	89a3      	ldrh	r3, [r4, #12]
 80061d2:	059b      	lsls	r3, r3, #22
 80061d4:	d4db      	bmi.n	800618e <_fflush_r+0xe>
 80061d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061d8:	f7ff fa76 	bl	80056c8 <__retarget_lock_release_recursive>
 80061dc:	e7d7      	b.n	800618e <_fflush_r+0xe>
 80061de:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <_fflush_r+0x78>)
 80061e0:	429c      	cmp	r4, r3
 80061e2:	d101      	bne.n	80061e8 <_fflush_r+0x68>
 80061e4:	68ac      	ldr	r4, [r5, #8]
 80061e6:	e7df      	b.n	80061a8 <_fflush_r+0x28>
 80061e8:	4b04      	ldr	r3, [pc, #16]	; (80061fc <_fflush_r+0x7c>)
 80061ea:	429c      	cmp	r4, r3
 80061ec:	d1dc      	bne.n	80061a8 <_fflush_r+0x28>
 80061ee:	68ec      	ldr	r4, [r5, #12]
 80061f0:	e7da      	b.n	80061a8 <_fflush_r+0x28>
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	08006908 	.word	0x08006908
 80061f8:	08006928 	.word	0x08006928
 80061fc:	080068e8 	.word	0x080068e8

08006200 <_lseek_r>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	0004      	movs	r4, r0
 8006204:	0008      	movs	r0, r1
 8006206:	0011      	movs	r1, r2
 8006208:	001a      	movs	r2, r3
 800620a:	2300      	movs	r3, #0
 800620c:	4d05      	ldr	r5, [pc, #20]	; (8006224 <_lseek_r+0x24>)
 800620e:	602b      	str	r3, [r5, #0]
 8006210:	f7fb fc71 	bl	8001af6 <_lseek>
 8006214:	1c43      	adds	r3, r0, #1
 8006216:	d103      	bne.n	8006220 <_lseek_r+0x20>
 8006218:	682b      	ldr	r3, [r5, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d000      	beq.n	8006220 <_lseek_r+0x20>
 800621e:	6023      	str	r3, [r4, #0]
 8006220:	bd70      	pop	{r4, r5, r6, pc}
 8006222:	46c0      	nop			; (mov r8, r8)
 8006224:	20000294 	.word	0x20000294

08006228 <__swhatbuf_r>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	000e      	movs	r6, r1
 800622c:	001d      	movs	r5, r3
 800622e:	230e      	movs	r3, #14
 8006230:	5ec9      	ldrsh	r1, [r1, r3]
 8006232:	0014      	movs	r4, r2
 8006234:	b096      	sub	sp, #88	; 0x58
 8006236:	2900      	cmp	r1, #0
 8006238:	da08      	bge.n	800624c <__swhatbuf_r+0x24>
 800623a:	220c      	movs	r2, #12
 800623c:	5eb3      	ldrsh	r3, [r6, r2]
 800623e:	2200      	movs	r2, #0
 8006240:	602a      	str	r2, [r5, #0]
 8006242:	061b      	lsls	r3, r3, #24
 8006244:	d411      	bmi.n	800626a <__swhatbuf_r+0x42>
 8006246:	2380      	movs	r3, #128	; 0x80
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	e00f      	b.n	800626c <__swhatbuf_r+0x44>
 800624c:	466a      	mov	r2, sp
 800624e:	f000 f8d1 	bl	80063f4 <_fstat_r>
 8006252:	2800      	cmp	r0, #0
 8006254:	dbf1      	blt.n	800623a <__swhatbuf_r+0x12>
 8006256:	23f0      	movs	r3, #240	; 0xf0
 8006258:	9901      	ldr	r1, [sp, #4]
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	4019      	ands	r1, r3
 800625e:	4b05      	ldr	r3, [pc, #20]	; (8006274 <__swhatbuf_r+0x4c>)
 8006260:	18c9      	adds	r1, r1, r3
 8006262:	424b      	negs	r3, r1
 8006264:	4159      	adcs	r1, r3
 8006266:	6029      	str	r1, [r5, #0]
 8006268:	e7ed      	b.n	8006246 <__swhatbuf_r+0x1e>
 800626a:	2340      	movs	r3, #64	; 0x40
 800626c:	2000      	movs	r0, #0
 800626e:	6023      	str	r3, [r4, #0]
 8006270:	b016      	add	sp, #88	; 0x58
 8006272:	bd70      	pop	{r4, r5, r6, pc}
 8006274:	ffffe000 	.word	0xffffe000

08006278 <__smakebuf_r>:
 8006278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800627a:	2602      	movs	r6, #2
 800627c:	898b      	ldrh	r3, [r1, #12]
 800627e:	0005      	movs	r5, r0
 8006280:	000c      	movs	r4, r1
 8006282:	4233      	tst	r3, r6
 8006284:	d006      	beq.n	8006294 <__smakebuf_r+0x1c>
 8006286:	0023      	movs	r3, r4
 8006288:	3347      	adds	r3, #71	; 0x47
 800628a:	6023      	str	r3, [r4, #0]
 800628c:	6123      	str	r3, [r4, #16]
 800628e:	2301      	movs	r3, #1
 8006290:	6163      	str	r3, [r4, #20]
 8006292:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006294:	466a      	mov	r2, sp
 8006296:	ab01      	add	r3, sp, #4
 8006298:	f7ff ffc6 	bl	8006228 <__swhatbuf_r>
 800629c:	9900      	ldr	r1, [sp, #0]
 800629e:	0007      	movs	r7, r0
 80062a0:	0028      	movs	r0, r5
 80062a2:	f7ff fa35 	bl	8005710 <_malloc_r>
 80062a6:	2800      	cmp	r0, #0
 80062a8:	d108      	bne.n	80062bc <__smakebuf_r+0x44>
 80062aa:	220c      	movs	r2, #12
 80062ac:	5ea3      	ldrsh	r3, [r4, r2]
 80062ae:	059a      	lsls	r2, r3, #22
 80062b0:	d4ef      	bmi.n	8006292 <__smakebuf_r+0x1a>
 80062b2:	2203      	movs	r2, #3
 80062b4:	4393      	bics	r3, r2
 80062b6:	431e      	orrs	r6, r3
 80062b8:	81a6      	strh	r6, [r4, #12]
 80062ba:	e7e4      	b.n	8006286 <__smakebuf_r+0xe>
 80062bc:	4b0f      	ldr	r3, [pc, #60]	; (80062fc <__smakebuf_r+0x84>)
 80062be:	62ab      	str	r3, [r5, #40]	; 0x28
 80062c0:	2380      	movs	r3, #128	; 0x80
 80062c2:	89a2      	ldrh	r2, [r4, #12]
 80062c4:	6020      	str	r0, [r4, #0]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	81a3      	strh	r3, [r4, #12]
 80062ca:	9b00      	ldr	r3, [sp, #0]
 80062cc:	6120      	str	r0, [r4, #16]
 80062ce:	6163      	str	r3, [r4, #20]
 80062d0:	9b01      	ldr	r3, [sp, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00d      	beq.n	80062f2 <__smakebuf_r+0x7a>
 80062d6:	0028      	movs	r0, r5
 80062d8:	230e      	movs	r3, #14
 80062da:	5ee1      	ldrsh	r1, [r4, r3]
 80062dc:	f000 f89c 	bl	8006418 <_isatty_r>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d006      	beq.n	80062f2 <__smakebuf_r+0x7a>
 80062e4:	2203      	movs	r2, #3
 80062e6:	89a3      	ldrh	r3, [r4, #12]
 80062e8:	4393      	bics	r3, r2
 80062ea:	001a      	movs	r2, r3
 80062ec:	2301      	movs	r3, #1
 80062ee:	4313      	orrs	r3, r2
 80062f0:	81a3      	strh	r3, [r4, #12]
 80062f2:	89a0      	ldrh	r0, [r4, #12]
 80062f4:	4307      	orrs	r7, r0
 80062f6:	81a7      	strh	r7, [r4, #12]
 80062f8:	e7cb      	b.n	8006292 <__smakebuf_r+0x1a>
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	08005509 	.word	0x08005509

08006300 <memchr>:
 8006300:	b2c9      	uxtb	r1, r1
 8006302:	1882      	adds	r2, r0, r2
 8006304:	4290      	cmp	r0, r2
 8006306:	d101      	bne.n	800630c <memchr+0xc>
 8006308:	2000      	movs	r0, #0
 800630a:	4770      	bx	lr
 800630c:	7803      	ldrb	r3, [r0, #0]
 800630e:	428b      	cmp	r3, r1
 8006310:	d0fb      	beq.n	800630a <memchr+0xa>
 8006312:	3001      	adds	r0, #1
 8006314:	e7f6      	b.n	8006304 <memchr+0x4>
	...

08006318 <__malloc_lock>:
 8006318:	b510      	push	{r4, lr}
 800631a:	4802      	ldr	r0, [pc, #8]	; (8006324 <__malloc_lock+0xc>)
 800631c:	f7ff f9d3 	bl	80056c6 <__retarget_lock_acquire_recursive>
 8006320:	bd10      	pop	{r4, pc}
 8006322:	46c0      	nop			; (mov r8, r8)
 8006324:	20000288 	.word	0x20000288

08006328 <__malloc_unlock>:
 8006328:	b510      	push	{r4, lr}
 800632a:	4802      	ldr	r0, [pc, #8]	; (8006334 <__malloc_unlock+0xc>)
 800632c:	f7ff f9cc 	bl	80056c8 <__retarget_lock_release_recursive>
 8006330:	bd10      	pop	{r4, pc}
 8006332:	46c0      	nop			; (mov r8, r8)
 8006334:	20000288 	.word	0x20000288

08006338 <_free_r>:
 8006338:	b570      	push	{r4, r5, r6, lr}
 800633a:	0005      	movs	r5, r0
 800633c:	2900      	cmp	r1, #0
 800633e:	d010      	beq.n	8006362 <_free_r+0x2a>
 8006340:	1f0c      	subs	r4, r1, #4
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	da00      	bge.n	800634a <_free_r+0x12>
 8006348:	18e4      	adds	r4, r4, r3
 800634a:	0028      	movs	r0, r5
 800634c:	f7ff ffe4 	bl	8006318 <__malloc_lock>
 8006350:	4a1d      	ldr	r2, [pc, #116]	; (80063c8 <_free_r+0x90>)
 8006352:	6813      	ldr	r3, [r2, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d105      	bne.n	8006364 <_free_r+0x2c>
 8006358:	6063      	str	r3, [r4, #4]
 800635a:	6014      	str	r4, [r2, #0]
 800635c:	0028      	movs	r0, r5
 800635e:	f7ff ffe3 	bl	8006328 <__malloc_unlock>
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	42a3      	cmp	r3, r4
 8006366:	d908      	bls.n	800637a <_free_r+0x42>
 8006368:	6821      	ldr	r1, [r4, #0]
 800636a:	1860      	adds	r0, r4, r1
 800636c:	4283      	cmp	r3, r0
 800636e:	d1f3      	bne.n	8006358 <_free_r+0x20>
 8006370:	6818      	ldr	r0, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	1841      	adds	r1, r0, r1
 8006376:	6021      	str	r1, [r4, #0]
 8006378:	e7ee      	b.n	8006358 <_free_r+0x20>
 800637a:	001a      	movs	r2, r3
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <_free_r+0x4e>
 8006382:	42a3      	cmp	r3, r4
 8006384:	d9f9      	bls.n	800637a <_free_r+0x42>
 8006386:	6811      	ldr	r1, [r2, #0]
 8006388:	1850      	adds	r0, r2, r1
 800638a:	42a0      	cmp	r0, r4
 800638c:	d10b      	bne.n	80063a6 <_free_r+0x6e>
 800638e:	6820      	ldr	r0, [r4, #0]
 8006390:	1809      	adds	r1, r1, r0
 8006392:	1850      	adds	r0, r2, r1
 8006394:	6011      	str	r1, [r2, #0]
 8006396:	4283      	cmp	r3, r0
 8006398:	d1e0      	bne.n	800635c <_free_r+0x24>
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	1841      	adds	r1, r0, r1
 80063a0:	6011      	str	r1, [r2, #0]
 80063a2:	6053      	str	r3, [r2, #4]
 80063a4:	e7da      	b.n	800635c <_free_r+0x24>
 80063a6:	42a0      	cmp	r0, r4
 80063a8:	d902      	bls.n	80063b0 <_free_r+0x78>
 80063aa:	230c      	movs	r3, #12
 80063ac:	602b      	str	r3, [r5, #0]
 80063ae:	e7d5      	b.n	800635c <_free_r+0x24>
 80063b0:	6821      	ldr	r1, [r4, #0]
 80063b2:	1860      	adds	r0, r4, r1
 80063b4:	4283      	cmp	r3, r0
 80063b6:	d103      	bne.n	80063c0 <_free_r+0x88>
 80063b8:	6818      	ldr	r0, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	1841      	adds	r1, r0, r1
 80063be:	6021      	str	r1, [r4, #0]
 80063c0:	6063      	str	r3, [r4, #4]
 80063c2:	6054      	str	r4, [r2, #4]
 80063c4:	e7ca      	b.n	800635c <_free_r+0x24>
 80063c6:	46c0      	nop			; (mov r8, r8)
 80063c8:	2000028c 	.word	0x2000028c

080063cc <_read_r>:
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	0004      	movs	r4, r0
 80063d0:	0008      	movs	r0, r1
 80063d2:	0011      	movs	r1, r2
 80063d4:	001a      	movs	r2, r3
 80063d6:	2300      	movs	r3, #0
 80063d8:	4d05      	ldr	r5, [pc, #20]	; (80063f0 <_read_r+0x24>)
 80063da:	602b      	str	r3, [r5, #0]
 80063dc:	f7fb fb31 	bl	8001a42 <_read>
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	d103      	bne.n	80063ec <_read_r+0x20>
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d000      	beq.n	80063ec <_read_r+0x20>
 80063ea:	6023      	str	r3, [r4, #0]
 80063ec:	bd70      	pop	{r4, r5, r6, pc}
 80063ee:	46c0      	nop			; (mov r8, r8)
 80063f0:	20000294 	.word	0x20000294

080063f4 <_fstat_r>:
 80063f4:	2300      	movs	r3, #0
 80063f6:	b570      	push	{r4, r5, r6, lr}
 80063f8:	4d06      	ldr	r5, [pc, #24]	; (8006414 <_fstat_r+0x20>)
 80063fa:	0004      	movs	r4, r0
 80063fc:	0008      	movs	r0, r1
 80063fe:	0011      	movs	r1, r2
 8006400:	602b      	str	r3, [r5, #0]
 8006402:	f7fb fb61 	bl	8001ac8 <_fstat>
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	d103      	bne.n	8006412 <_fstat_r+0x1e>
 800640a:	682b      	ldr	r3, [r5, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d000      	beq.n	8006412 <_fstat_r+0x1e>
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	20000294 	.word	0x20000294

08006418 <_isatty_r>:
 8006418:	2300      	movs	r3, #0
 800641a:	b570      	push	{r4, r5, r6, lr}
 800641c:	4d06      	ldr	r5, [pc, #24]	; (8006438 <_isatty_r+0x20>)
 800641e:	0004      	movs	r4, r0
 8006420:	0008      	movs	r0, r1
 8006422:	602b      	str	r3, [r5, #0]
 8006424:	f7fb fb5e 	bl	8001ae4 <_isatty>
 8006428:	1c43      	adds	r3, r0, #1
 800642a:	d103      	bne.n	8006434 <_isatty_r+0x1c>
 800642c:	682b      	ldr	r3, [r5, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d000      	beq.n	8006434 <_isatty_r+0x1c>
 8006432:	6023      	str	r3, [r4, #0]
 8006434:	bd70      	pop	{r4, r5, r6, pc}
 8006436:	46c0      	nop			; (mov r8, r8)
 8006438:	20000294 	.word	0x20000294

0800643c <_init>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr

08006448 <_fini>:
 8006448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644a:	46c0      	nop			; (mov r8, r8)
 800644c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800644e:	bc08      	pop	{r3}
 8006450:	469e      	mov	lr, r3
 8006452:	4770      	bx	lr
