
sinking-clock_master_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060a0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800615c  0800615c  0001615c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006684  08006684  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  08006684  08006684  00016684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800668c  0800668c  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800668c  0800668c  0001668c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006690  08006690  00016690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08006694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000238  080068cc  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  080068cc  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ed2  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002817  00000000  00000000  00034132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00036950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  00037aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a84  00000000  00000000  00038ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014489  00000000  00000000  0005156c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b1cb  00000000  00000000  000659f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100bc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000468c  00000000  00000000  00100c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000238 	.word	0x20000238
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006144 	.word	0x08006144

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000023c 	.word	0x2000023c
 8000100:	08006144 	.word	0x08006144

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	469b      	mov	fp, r3
 80002a6:	d433      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a8:	465a      	mov	r2, fp
 80002aa:	4653      	mov	r3, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83a      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e078      	b.n	80003b4 <__udivmoddi4+0x144>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e075      	b.n	80003ba <__udivmoddi4+0x14a>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e028      	b.n	800033a <__udivmoddi4+0xca>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	2320      	movs	r3, #32
 8000314:	1a9b      	subs	r3, r3, r2
 8000316:	4652      	mov	r2, sl
 8000318:	40da      	lsrs	r2, r3
 800031a:	4641      	mov	r1, r8
 800031c:	0013      	movs	r3, r2
 800031e:	464a      	mov	r2, r9
 8000320:	408a      	lsls	r2, r1
 8000322:	0017      	movs	r7, r2
 8000324:	4642      	mov	r2, r8
 8000326:	431f      	orrs	r7, r3
 8000328:	4653      	mov	r3, sl
 800032a:	4093      	lsls	r3, r2
 800032c:	001e      	movs	r6, r3
 800032e:	42af      	cmp	r7, r5
 8000330:	d9c4      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0d9      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000340:	07fb      	lsls	r3, r7, #31
 8000342:	0872      	lsrs	r2, r6, #1
 8000344:	431a      	orrs	r2, r3
 8000346:	4646      	mov	r6, r8
 8000348:	087b      	lsrs	r3, r7, #1
 800034a:	e00e      	b.n	800036a <__udivmoddi4+0xfa>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d101      	bne.n	8000354 <__udivmoddi4+0xe4>
 8000350:	42a2      	cmp	r2, r4
 8000352:	d80c      	bhi.n	800036e <__udivmoddi4+0xfe>
 8000354:	1aa4      	subs	r4, r4, r2
 8000356:	419d      	sbcs	r5, r3
 8000358:	2001      	movs	r0, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2100      	movs	r1, #0
 8000360:	3e01      	subs	r6, #1
 8000362:	1824      	adds	r4, r4, r0
 8000364:	414d      	adcs	r5, r1
 8000366:	2e00      	cmp	r6, #0
 8000368:	d006      	beq.n	8000378 <__udivmoddi4+0x108>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d9ee      	bls.n	800034c <__udivmoddi4+0xdc>
 800036e:	3e01      	subs	r6, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2e00      	cmp	r6, #0
 8000376:	d1f8      	bne.n	800036a <__udivmoddi4+0xfa>
 8000378:	9800      	ldr	r0, [sp, #0]
 800037a:	9901      	ldr	r1, [sp, #4]
 800037c:	465b      	mov	r3, fp
 800037e:	1900      	adds	r0, r0, r4
 8000380:	4169      	adcs	r1, r5
 8000382:	2b00      	cmp	r3, #0
 8000384:	db24      	blt.n	80003d0 <__udivmoddi4+0x160>
 8000386:	002b      	movs	r3, r5
 8000388:	465a      	mov	r2, fp
 800038a:	4644      	mov	r4, r8
 800038c:	40d3      	lsrs	r3, r2
 800038e:	002a      	movs	r2, r5
 8000390:	40e2      	lsrs	r2, r4
 8000392:	001c      	movs	r4, r3
 8000394:	465b      	mov	r3, fp
 8000396:	0015      	movs	r5, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	db2a      	blt.n	80003f2 <__udivmoddi4+0x182>
 800039c:	0026      	movs	r6, r4
 800039e:	409e      	lsls	r6, r3
 80003a0:	0033      	movs	r3, r6
 80003a2:	0026      	movs	r6, r4
 80003a4:	4647      	mov	r7, r8
 80003a6:	40be      	lsls	r6, r7
 80003a8:	0032      	movs	r2, r6
 80003aa:	1a80      	subs	r0, r0, r2
 80003ac:	4199      	sbcs	r1, r3
 80003ae:	9000      	str	r0, [sp, #0]
 80003b0:	9101      	str	r1, [sp, #4]
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b4:	42a3      	cmp	r3, r4
 80003b6:	d8bc      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80003b8:	e783      	b.n	80002c2 <__udivmoddi4+0x52>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	2100      	movs	r1, #0
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	2200      	movs	r2, #0
 80003c4:	9100      	str	r1, [sp, #0]
 80003c6:	9201      	str	r2, [sp, #4]
 80003c8:	2201      	movs	r2, #1
 80003ca:	40da      	lsrs	r2, r3
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	e786      	b.n	80002de <__udivmoddi4+0x6e>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	4646      	mov	r6, r8
 80003da:	409a      	lsls	r2, r3
 80003dc:	0023      	movs	r3, r4
 80003de:	40f3      	lsrs	r3, r6
 80003e0:	4644      	mov	r4, r8
 80003e2:	4313      	orrs	r3, r2
 80003e4:	002a      	movs	r2, r5
 80003e6:	40e2      	lsrs	r2, r4
 80003e8:	001c      	movs	r4, r3
 80003ea:	465b      	mov	r3, fp
 80003ec:	0015      	movs	r5, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dad4      	bge.n	800039c <__udivmoddi4+0x12c>
 80003f2:	4642      	mov	r2, r8
 80003f4:	002f      	movs	r7, r5
 80003f6:	2320      	movs	r3, #32
 80003f8:	0026      	movs	r6, r4
 80003fa:	4097      	lsls	r7, r2
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	40de      	lsrs	r6, r3
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7cd      	b.n	80003a2 <__udivmoddi4+0x132>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <getRTCTime>:
				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
	}

}

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000468:	68b9      	ldr	r1, [r7, #8]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	2200      	movs	r2, #0
 800046e:	0018      	movs	r0, r3
 8000470:	f002 fe6c 	bl	800314c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000474:	6879      	ldr	r1, [r7, #4]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2200      	movs	r2, #0
 800047a:	0018      	movs	r0, r3
 800047c:	f002 ff54 	bl	8003328 <HAL_RTC_GetDate>

}
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b004      	add	sp, #16
 8000486:	bd80      	pop	{r7, pc}

08000488 <getUserAlarmTime>:

void getUserAlarmTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *userAlarmTime) {
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b08d      	sub	sp, #52	; 0x34
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]

	// Store alarm data in alarm object pointer and extract alarm time data from alarm object
	RTC_AlarmTypeDef userAlarmObj;
	HAL_RTC_GetAlarm(hrtc, &userAlarmObj, userAlarm, RTCTimeFormat);
 8000492:	2380      	movs	r3, #128	; 0x80
 8000494:	009a      	lsls	r2, r3, #2
 8000496:	2408      	movs	r4, #8
 8000498:	1939      	adds	r1, r7, r4
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	2300      	movs	r3, #0
 800049e:	f003 f8d1 	bl	8003644 <HAL_RTC_GetAlarm>
	*userAlarmTime = userAlarmObj.AlarmTime;
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	193a      	adds	r2, r7, r4
 80004a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004a8:	c313      	stmia	r3!, {r0, r1, r4}
 80004aa:	ca03      	ldmia	r2!, {r0, r1}
 80004ac:	c303      	stmia	r3!, {r0, r1}

}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b00d      	add	sp, #52	; 0x34
 80004b4:	bd90      	pop	{r4, r7, pc}

080004b6 <getUserAlarmObj>:

void getUserAlarmObj(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *userAlarmObj) {
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	6039      	str	r1, [r7, #0]

	// Store alarm data in alarm object pointer
	HAL_RTC_GetAlarm(hrtc, userAlarmObj, internalAlarm, FORMAT_BIN);
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	005a      	lsls	r2, r3, #1
 80004c4:	6839      	ldr	r1, [r7, #0]
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	2300      	movs	r3, #0
 80004ca:	f003 f8bb 	bl	8003644 <HAL_RTC_GetAlarm>

}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b002      	add	sp, #8
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80004e0:	2301      	movs	r3, #1
 80004e2:	425b      	negs	r3, r3
 80004e4:	1d39      	adds	r1, r7, #4
 80004e6:	4804      	ldr	r0, [pc, #16]	; (80004f8 <__io_putchar+0x20>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	f004 f943 	bl	8004774 <HAL_UART_Transmit>
  return ch;
 80004ee:	687b      	ldr	r3, [r7, #4]
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	2000031c 	.word	0x2000031c

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f001 faef 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f855 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 fa8b 	bl	8000a24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050e:	f000 fa55 	bl	80009bc <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000512:	f000 f89b 	bl	800064c <MX_RTC_Init>
  MX_TIM16_Init();
 8000516:	f000 fa29 	bl	800096c <MX_TIM16_Init>
  MX_TIM1_Init();
 800051a:	f000 f97b 	bl	8000814 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  displayToggle = 2; 		// Display at 100% intensity for next display toggle
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <main+0x88>)
 8000520:	2202      	movs	r2, #2
 8000522:	701a      	strb	r2, [r3, #0]

  // Initialize all GPIOs to be used with 7 segment display
  sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000524:	4b18      	ldr	r3, [pc, #96]	; (8000588 <main+0x8c>)
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	b2d8      	uxtb	r0, r3
 800052a:	4b18      	ldr	r3, [pc, #96]	; (800058c <main+0x90>)
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	b2d9      	uxtb	r1, r3
 8000530:	4b17      	ldr	r3, [pc, #92]	; (8000590 <main+0x94>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	b2dc      	uxtb	r4, r3
 8000536:	4b17      	ldr	r3, [pc, #92]	; (8000594 <main+0x98>)
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	b2dd      	uxtb	r5, r3
 800053c:	4b16      	ldr	r3, [pc, #88]	; (8000598 <main+0x9c>)
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	4a16      	ldr	r2, [pc, #88]	; (800059c <main+0xa0>)
 8000544:	9203      	str	r2, [sp, #12]
 8000546:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <main+0xa4>)
 8000548:	9202      	str	r2, [sp, #8]
 800054a:	4a16      	ldr	r2, [pc, #88]	; (80005a4 <main+0xa8>)
 800054c:	9201      	str	r2, [sp, #4]
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	002b      	movs	r3, r5
 8000552:	0022      	movs	r2, r4
 8000554:	f000 ff32 	bl	80013bc <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, &htim16, &htim1);

  	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 8000558:	1dfc      	adds	r4, r7, #7
 800055a:	f000 fb47 	bl	8000bec <updateAndDisplayTime>
 800055e:	0003      	movs	r3, r0
 8000560:	7023      	strb	r3, [r4, #0]

  	if(halRet != HAL_OK) {		//check HAL
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d004      	beq.n	8000574 <main+0x78>
  		printf("HAL Error - TX current time\n\r");
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <main+0xac>)
 800056c:	0018      	movs	r0, r3
 800056e:	f004 fe11 	bl	8005194 <iprintf>
 8000572:	e003      	b.n	800057c <main+0x80>
  	} else {
  		printf("Display Updated with current time\n\r");
 8000574:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <main+0xb0>)
 8000576:	0018      	movs	r0, r3
 8000578:	f004 fe0c 	bl	8005194 <iprintf>
  	}

  userAlarmToggle = false;			//Default to off
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <main+0xb4>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000582:	e7fe      	b.n	8000582 <main+0x86>
 8000584:	20000254 	.word	0x20000254
 8000588:	20000000 	.word	0x20000000
 800058c:	20000002 	.word	0x20000002
 8000590:	20000004 	.word	0x20000004
 8000594:	20000006 	.word	0x20000006
 8000598:	20000008 	.word	0x20000008
 800059c:	20000284 	.word	0x20000284
 80005a0:	200002d0 	.word	0x200002d0
 80005a4:	2000000c 	.word	0x2000000c
 80005a8:	0800615c 	.word	0x0800615c
 80005ac:	0800617c 	.word	0x0800617c
 80005b0:	20000255 	.word	0x20000255

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b093      	sub	sp, #76	; 0x4c
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	2410      	movs	r4, #16
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	0018      	movs	r0, r3
 80005c0:	2338      	movs	r3, #56	; 0x38
 80005c2:	001a      	movs	r2, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	f004 fddd 	bl	8005184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ca:	003b      	movs	r3, r7
 80005cc:	0018      	movs	r0, r3
 80005ce:	2310      	movs	r3, #16
 80005d0:	001a      	movs	r2, r3
 80005d2:	2100      	movs	r1, #0
 80005d4:	f004 fdd6 	bl	8005184 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 fdb7 	bl	8002150 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	220a      	movs	r2, #10
 80005e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	2280      	movs	r2, #128	; 0x80
 80005ec:	0052      	lsls	r2, r2, #1
 80005ee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005f0:	0021      	movs	r1, r4
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2240      	movs	r2, #64	; 0x40
 80005fc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2201      	movs	r2, #1
 8000602:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	187b      	adds	r3, r7, r1
 800060c:	0018      	movs	r0, r3
 800060e:	f001 fe15 	bl	800223c <HAL_RCC_OscConfig>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000616:	f000 fecb 	bl	80013b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	003b      	movs	r3, r7
 800061c:	2207      	movs	r2, #7
 800061e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000620:	003b      	movs	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	003b      	movs	r3, r7
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062c:	003b      	movs	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000632:	003b      	movs	r3, r7
 8000634:	2100      	movs	r1, #0
 8000636:	0018      	movs	r0, r3
 8000638:	f002 f91a 	bl	8002870 <HAL_RCC_ClockConfig>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000640:	f000 feb6 	bl	80013b0 <Error_Handler>
  }
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b013      	add	sp, #76	; 0x4c
 800064a:	bd90      	pop	{r4, r7, pc}

0800064c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b091      	sub	sp, #68	; 0x44
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000652:	232c      	movs	r3, #44	; 0x2c
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	0018      	movs	r0, r3
 8000658:	2314      	movs	r3, #20
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f004 fd91 	bl	8005184 <memset>
  RTC_DateTypeDef sDate = {0};
 8000662:	2328      	movs	r3, #40	; 0x28
 8000664:	18fb      	adds	r3, r7, r3
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800066a:	003b      	movs	r3, r7
 800066c:	0018      	movs	r0, r3
 800066e:	2328      	movs	r3, #40	; 0x28
 8000670:	001a      	movs	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	f004 fd86 	bl	8005184 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000678:	4b5f      	ldr	r3, [pc, #380]	; (80007f8 <MX_RTC_Init+0x1ac>)
 800067a:	4a60      	ldr	r2, [pc, #384]	; (80007fc <MX_RTC_Init+0x1b0>)
 800067c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800067e:	4b5e      	ldr	r3, [pc, #376]	; (80007f8 <MX_RTC_Init+0x1ac>)
 8000680:	2240      	movs	r2, #64	; 0x40
 8000682:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000684:	4b5c      	ldr	r3, [pc, #368]	; (80007f8 <MX_RTC_Init+0x1ac>)
 8000686:	227f      	movs	r2, #127	; 0x7f
 8000688:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800068a:	4b5b      	ldr	r3, [pc, #364]	; (80007f8 <MX_RTC_Init+0x1ac>)
 800068c:	22ff      	movs	r2, #255	; 0xff
 800068e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000690:	4b59      	ldr	r3, [pc, #356]	; (80007f8 <MX_RTC_Init+0x1ac>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000696:	4b58      	ldr	r3, [pc, #352]	; (80007f8 <MX_RTC_Init+0x1ac>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800069c:	4b56      	ldr	r3, [pc, #344]	; (80007f8 <MX_RTC_Init+0x1ac>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006a2:	4b55      	ldr	r3, [pc, #340]	; (80007f8 <MX_RTC_Init+0x1ac>)
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	05d2      	lsls	r2, r2, #23
 80006a8:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80006aa:	4b53      	ldr	r3, [pc, #332]	; (80007f8 <MX_RTC_Init+0x1ac>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006b0:	4b51      	ldr	r3, [pc, #324]	; (80007f8 <MX_RTC_Init+0x1ac>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f002 fc00 	bl	8002eb8 <HAL_RTC_Init>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80006bc:	f000 fe78 	bl	80013b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 80006c0:	212c      	movs	r1, #44	; 0x2c
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2201      	movs	r2, #1
 80006c6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80006ec:	1879      	adds	r1, r7, r1
 80006ee:	4b42      	ldr	r3, [pc, #264]	; (80007f8 <MX_RTC_Init+0x1ac>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	0018      	movs	r0, r3
 80006f4:	f002 fc82 	bl	8002ffc <HAL_RTC_SetTime>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 80006fc:	f000 fe58 	bl	80013b0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000700:	2128      	movs	r1, #40	; 0x28
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2201      	movs	r2, #1
 8000706:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2201      	movs	r2, #1
 800070c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2201      	movs	r2, #1
 8000712:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2200      	movs	r2, #0
 8000718:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800071a:	1879      	adds	r1, r7, r1
 800071c:	4b36      	ldr	r3, [pc, #216]	; (80007f8 <MX_RTC_Init+0x1ac>)
 800071e:	2200      	movs	r2, #0
 8000720:	0018      	movs	r0, r3
 8000722:	f002 fd6f 	bl	8003204 <HAL_RTC_SetDate>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 800072a:	f000 fe41 	bl	80013b0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 1;
 800072e:	003b      	movs	r3, r7
 8000730:	2201      	movs	r2, #1
 8000732:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 1;
 8000734:	003b      	movs	r3, r7
 8000736:	2201      	movs	r2, #1
 8000738:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800073a:	003b      	movs	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000740:	003b      	movs	r3, r7
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000746:	003b      	movs	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800074c:	003b      	movs	r3, r7
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000752:	003b      	movs	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000758:	003b      	movs	r3, r7
 800075a:	4a29      	ldr	r2, [pc, #164]	; (8000800 <MX_RTC_Init+0x1b4>)
 800075c:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800075e:	003b      	movs	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000764:	003b      	movs	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800076a:	003b      	movs	r3, r7
 800076c:	2220      	movs	r2, #32
 800076e:	2101      	movs	r1, #1
 8000770:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000772:	003b      	movs	r3, r7
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800077a:	0039      	movs	r1, r7
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <MX_RTC_Init+0x1ac>)
 800077e:	2200      	movs	r2, #0
 8000780:	0018      	movs	r0, r3
 8000782:	f002 fe1f 	bl	80033c4 <HAL_RTC_SetAlarm_IT>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <MX_RTC_Init+0x142>
  {
    Error_Handler();
 800078a:	f000 fe11 	bl	80013b0 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Seconds = 10;
 800078e:	003b      	movs	r3, r7
 8000790:	220a      	movs	r2, #10
 8000792:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8000794:	003b      	movs	r3, r7
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	0612      	lsls	r2, r2, #24
 800079a:	615a      	str	r2, [r3, #20]
  sAlarm.Alarm = RTC_ALARM_B;
 800079c:	003b      	movs	r3, r7
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	0092      	lsls	r2, r2, #2
 80007a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80007a4:	0039      	movs	r1, r7
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_RTC_Init+0x1ac>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	0018      	movs	r0, r3
 80007ac:	f002 fe0a 	bl	80033c4 <HAL_RTC_SetAlarm_IT>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_RTC_Init+0x16c>
  {
    Error_Handler();
 80007b4:	f000 fdfc 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  currTime = sTime;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_RTC_Init+0x1b8>)
 80007ba:	222c      	movs	r2, #44	; 0x2c
 80007bc:	18ba      	adds	r2, r7, r2
 80007be:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007c0:	c313      	stmia	r3!, {r0, r1, r4}
 80007c2:	ca03      	ldmia	r2!, {r0, r1}
 80007c4:	c303      	stmia	r3!, {r0, r1}
  currDate = sDate;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_RTC_Init+0x1bc>)
 80007c8:	2228      	movs	r2, #40	; 0x28
 80007ca:	18ba      	adds	r2, r7, r2
 80007cc:	6812      	ldr	r2, [r2, #0]
 80007ce:	601a      	str	r2, [r3, #0]
  userAlarmObj = sAlarm;
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_RTC_Init+0x1c0>)
 80007d2:	003a      	movs	r2, r7
 80007d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007d6:	c313      	stmia	r3!, {r0, r1, r4}
 80007d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007da:	c313      	stmia	r3!, {r0, r1, r4}
 80007dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007de:	c313      	stmia	r3!, {r0, r1, r4}
 80007e0:	6812      	ldr	r2, [r2, #0]
 80007e2:	601a      	str	r2, [r3, #0]
  userAlarmTime = userAlarmObj.AlarmTime;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_RTC_Init+0x1c4>)
 80007e6:	4a09      	ldr	r2, [pc, #36]	; (800080c <MX_RTC_Init+0x1c0>)
 80007e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007ea:	c313      	stmia	r3!, {r0, r1, r4}
 80007ec:	ca03      	ldmia	r2!, {r0, r1}
 80007ee:	c303      	stmia	r3!, {r0, r1}

  /* USER CODE END RTC_Init 2 */

}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b011      	add	sp, #68	; 0x44
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	20000258 	.word	0x20000258
 80007fc:	40002800 	.word	0x40002800
 8000800:	80800080 	.word	0x80800080
 8000804:	200003b0 	.word	0x200003b0
 8000808:	200003c4 	.word	0x200003c4
 800080c:	200003dc 	.word	0x200003dc
 8000810:	200003c8 	.word	0x200003c8

08000814 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b098      	sub	sp, #96	; 0x60
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081a:	2354      	movs	r3, #84	; 0x54
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	0018      	movs	r0, r3
 8000820:	230c      	movs	r3, #12
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f004 fcad 	bl	8005184 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082a:	2338      	movs	r3, #56	; 0x38
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	0018      	movs	r0, r3
 8000830:	231c      	movs	r3, #28
 8000832:	001a      	movs	r2, r3
 8000834:	2100      	movs	r1, #0
 8000836:	f004 fca5 	bl	8005184 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	0018      	movs	r0, r3
 800083e:	2334      	movs	r3, #52	; 0x34
 8000840:	001a      	movs	r2, r3
 8000842:	2100      	movs	r1, #0
 8000844:	f004 fc9e 	bl	8005184 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000848:	4b45      	ldr	r3, [pc, #276]	; (8000960 <MX_TIM1_Init+0x14c>)
 800084a:	4a46      	ldr	r2, [pc, #280]	; (8000964 <MX_TIM1_Init+0x150>)
 800084c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800084e:	4b44      	ldr	r3, [pc, #272]	; (8000960 <MX_TIM1_Init+0x14c>)
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000854:	4b42      	ldr	r3, [pc, #264]	; (8000960 <MX_TIM1_Init+0x14c>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800085a:	4b41      	ldr	r3, [pc, #260]	; (8000960 <MX_TIM1_Init+0x14c>)
 800085c:	4a42      	ldr	r2, [pc, #264]	; (8000968 <MX_TIM1_Init+0x154>)
 800085e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000860:	4b3f      	ldr	r3, [pc, #252]	; (8000960 <MX_TIM1_Init+0x14c>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000866:	4b3e      	ldr	r3, [pc, #248]	; (8000960 <MX_TIM1_Init+0x14c>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086c:	4b3c      	ldr	r3, [pc, #240]	; (8000960 <MX_TIM1_Init+0x14c>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000872:	4b3b      	ldr	r3, [pc, #236]	; (8000960 <MX_TIM1_Init+0x14c>)
 8000874:	0018      	movs	r0, r3
 8000876:	f003 f9af 	bl	8003bd8 <HAL_TIM_PWM_Init>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 fd97 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000882:	2154      	movs	r1, #84	; 0x54
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000896:	187a      	adds	r2, r7, r1
 8000898:	4b31      	ldr	r3, [pc, #196]	; (8000960 <MX_TIM1_Init+0x14c>)
 800089a:	0011      	movs	r1, r2
 800089c:	0018      	movs	r0, r3
 800089e:	f003 fe05 	bl	80044ac <HAL_TIMEx_MasterConfigSynchronization>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008a6:	f000 fd83 	bl	80013b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008aa:	2138      	movs	r1, #56	; 0x38
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2260      	movs	r2, #96	; 0x60
 80008b0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008d6:	1879      	adds	r1, r7, r1
 80008d8:	4b21      	ldr	r3, [pc, #132]	; (8000960 <MX_TIM1_Init+0x14c>)
 80008da:	2204      	movs	r2, #4
 80008dc:	0018      	movs	r0, r3
 80008de:	f003 f9d3 	bl	8003c88 <HAL_TIM_PWM_ConfigChannel>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80008e6:	f000 fd63 	bl	80013b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	0192      	lsls	r2, r2, #6
 800090e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	0492      	lsls	r2, r2, #18
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2200      	movs	r2, #0
 8000934:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800093c:	1d3a      	adds	r2, r7, #4
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_TIM1_Init+0x14c>)
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f003 fe1a 	bl	800457c <HAL_TIMEx_ConfigBreakDeadTime>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 800094c:	f000 fd30 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <MX_TIM1_Init+0x14c>)
 8000952:	0018      	movs	r0, r3
 8000954:	f000 ff26 	bl	80017a4 <HAL_TIM_MspPostInit>

}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b018      	add	sp, #96	; 0x60
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000284 	.word	0x20000284
 8000964:	40012c00 	.word	0x40012c00
 8000968:	0000ffff 	.word	0x0000ffff

0800096c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_TIM16_Init+0x44>)
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <MX_TIM16_Init+0x48>)
 8000974:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 244;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_TIM16_Init+0x44>)
 8000978:	22f4      	movs	r2, #244	; 0xf4
 800097a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_TIM16_Init+0x44>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_TIM16_Init+0x44>)
 8000984:	4a0c      	ldr	r2, [pc, #48]	; (80009b8 <MX_TIM16_Init+0x4c>)
 8000986:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_TIM16_Init+0x44>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_TIM16_Init+0x44>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_TIM16_Init+0x44>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <MX_TIM16_Init+0x44>)
 800099c:	0018      	movs	r0, r3
 800099e:	f003 f850 	bl	8003a42 <HAL_TIM_Base_Init>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80009a6:	f000 fd03 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200002d0 	.word	0x200002d0
 80009b4:	40014400 	.word	0x40014400
 80009b8:	0000ffff 	.word	0x0000ffff

080009bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_USART2_UART_Init+0x60>)
 80009c2:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <MX_USART2_UART_Init+0x64>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_USART2_UART_Init+0x60>)
 80009c8:	22e1      	movs	r2, #225	; 0xe1
 80009ca:	0252      	lsls	r2, r2, #9
 80009cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_USART2_UART_Init+0x60>)
 80009d0:	2280      	movs	r2, #128	; 0x80
 80009d2:	0152      	lsls	r2, r2, #5
 80009d4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART2_UART_Init+0x60>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_USART2_UART_Init+0x60>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART2_UART_Init+0x60>)
 80009e4:	220c      	movs	r2, #12
 80009e6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART2_UART_Init+0x60>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART2_UART_Init+0x60>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART2_UART_Init+0x60>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART2_UART_Init+0x60>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART2_UART_Init+0x60>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <MX_USART2_UART_Init+0x60>)
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f003 fe5d 	bl	80046c8 <HAL_UART_Init>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000a12:	f000 fccd 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000031c 	.word	0x2000031c
 8000a20:	40004400 	.word	0x40004400

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b08b      	sub	sp, #44	; 0x2c
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	2414      	movs	r4, #20
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	0018      	movs	r0, r3
 8000a30:	2314      	movs	r3, #20
 8000a32:	001a      	movs	r2, r3
 8000a34:	2100      	movs	r1, #0
 8000a36:	f004 fba5 	bl	8005184 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b67      	ldr	r3, [pc, #412]	; (8000bd8 <MX_GPIO_Init+0x1b4>)
 8000a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3e:	4b66      	ldr	r3, [pc, #408]	; (8000bd8 <MX_GPIO_Init+0x1b4>)
 8000a40:	2104      	movs	r1, #4
 8000a42:	430a      	orrs	r2, r1
 8000a44:	635a      	str	r2, [r3, #52]	; 0x34
 8000a46:	4b64      	ldr	r3, [pc, #400]	; (8000bd8 <MX_GPIO_Init+0x1b4>)
 8000a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4a:	2204      	movs	r2, #4
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a52:	4b61      	ldr	r3, [pc, #388]	; (8000bd8 <MX_GPIO_Init+0x1b4>)
 8000a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a56:	4b60      	ldr	r3, [pc, #384]	; (8000bd8 <MX_GPIO_Init+0x1b4>)
 8000a58:	2120      	movs	r1, #32
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5e:	4b5e      	ldr	r3, [pc, #376]	; (8000bd8 <MX_GPIO_Init+0x1b4>)
 8000a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a62:	2220      	movs	r2, #32
 8000a64:	4013      	ands	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b5b      	ldr	r3, [pc, #364]	; (8000bd8 <MX_GPIO_Init+0x1b4>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a6e:	4b5a      	ldr	r3, [pc, #360]	; (8000bd8 <MX_GPIO_Init+0x1b4>)
 8000a70:	2101      	movs	r1, #1
 8000a72:	430a      	orrs	r2, r1
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
 8000a76:	4b58      	ldr	r3, [pc, #352]	; (8000bd8 <MX_GPIO_Init+0x1b4>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b55      	ldr	r3, [pc, #340]	; (8000bd8 <MX_GPIO_Init+0x1b4>)
 8000a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a86:	4b54      	ldr	r3, [pc, #336]	; (8000bd8 <MX_GPIO_Init+0x1b4>)
 8000a88:	2102      	movs	r1, #2
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a8e:	4b52      	ldr	r3, [pc, #328]	; (8000bd8 <MX_GPIO_Init+0x1b4>)
 8000a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a92:	2202      	movs	r2, #2
 8000a94:	4013      	ands	r3, r2
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Output_Pin|Shift_Store_Clock_Pin|Shift_Data_Clock_Pin|Shift_Master_Clear_Pin
 8000a9a:	23f9      	movs	r3, #249	; 0xf9
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	484f      	ldr	r0, [pc, #316]	; (8000bdc <MX_GPIO_Init+0x1b8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	0019      	movs	r1, r3
 8000aa4:	f001 fb03 	bl	80020ae <HAL_GPIO_WritePin>
                          |AM_PM_LED_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000aa8:	4b4d      	ldr	r3, [pc, #308]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2140      	movs	r1, #64	; 0x40
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f001 fafd 	bl	80020ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Shift_Data_In_GPIO_Port, Shift_Data_In_Pin, GPIO_PIN_RESET);
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	0219      	lsls	r1, r3, #8
 8000ab8:	23a0      	movs	r3, #160	; 0xa0
 8000aba:	05db      	lsls	r3, r3, #23
 8000abc:	2200      	movs	r2, #0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f001 faf5 	bl	80020ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	2288      	movs	r2, #136	; 0x88
 8000ace:	0352      	lsls	r2, r2, #13
 8000ad0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	4a42      	ldr	r2, [pc, #264]	; (8000be4 <MX_GPIO_Init+0x1c0>)
 8000adc:	0019      	movs	r1, r3
 8000ade:	0010      	movs	r0, r2
 8000ae0:	f001 f964 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_Button_Pin Alarm_Set_Button_Pin Hour_Set_Button_Pin Alarm_Enable_Button_Pin
                           Minute_Set_Button_Pin */
  GPIO_InitStruct.Pin = Display_Button_Pin|Alarm_Set_Button_Pin|Hour_Set_Button_Pin|Alarm_Enable_Button_Pin
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	4a40      	ldr	r2, [pc, #256]	; (8000be8 <MX_GPIO_Init+0x1c4>)
 8000ae8:	601a      	str	r2, [r3, #0]
                          |Minute_Set_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	2284      	movs	r2, #132	; 0x84
 8000aee:	0392      	lsls	r2, r2, #14
 8000af0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2201      	movs	r2, #1
 8000af6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	193a      	adds	r2, r7, r4
 8000afa:	23a0      	movs	r3, #160	; 0xa0
 8000afc:	05db      	lsls	r3, r3, #23
 8000afe:	0011      	movs	r1, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f001 f953 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Output_Pin Shift_Store_Clock_Pin Shift_Data_Clock_Pin Shift_Master_Clear_Pin
                           AM_PM_LED_Pin Alarm_LED_Pin */
  GPIO_InitStruct.Pin = Buzzer_Output_Pin|Shift_Store_Clock_Pin|Shift_Data_Clock_Pin|Shift_Master_Clear_Pin
 8000b06:	0021      	movs	r1, r4
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	22f9      	movs	r2, #249	; 0xf9
 8000b0c:	0052      	lsls	r2, r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
                          |AM_PM_LED_Pin|Alarm_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	000c      	movs	r4, r1
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2201      	movs	r2, #1
 8000b16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	4a2d      	ldr	r2, [pc, #180]	; (8000bdc <MX_GPIO_Init+0x1b8>)
 8000b28:	0019      	movs	r1, r3
 8000b2a:	0010      	movs	r0, r2
 8000b2c:	f001 f93e 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	2240      	movs	r2, #64	; 0x40
 8000b34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	2201      	movs	r2, #1
 8000b3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	4a25      	ldr	r2, [pc, #148]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	0010      	movs	r0, r2
 8000b50:	f001 f92c 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pin : Snooze_Button_Pin */
  GPIO_InitStruct.Pin = Snooze_Button_Pin;
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	2201      	movs	r2, #1
 8000b66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Snooze_Button_GPIO_Port, &GPIO_InitStruct);
 8000b68:	193a      	adds	r2, r7, r4
 8000b6a:	23a0      	movs	r3, #160	; 0xa0
 8000b6c:	05db      	lsls	r3, r3, #23
 8000b6e:	0011      	movs	r1, r2
 8000b70:	0018      	movs	r0, r3
 8000b72:	f001 f91b 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pin : Shift_Data_In_Pin */
  GPIO_InitStruct.Pin = Shift_Data_In_Pin;
 8000b76:	0021      	movs	r1, r4
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2280      	movs	r2, #128	; 0x80
 8000b7c:	0212      	lsls	r2, r2, #8
 8000b7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2201      	movs	r2, #1
 8000b84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Shift_Data_In_GPIO_Port, &GPIO_InitStruct);
 8000b92:	187a      	adds	r2, r7, r1
 8000b94:	23a0      	movs	r3, #160	; 0xa0
 8000b96:	05db      	lsls	r3, r3, #23
 8000b98:	0011      	movs	r1, r2
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f001 f906 	bl	8001dac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	2005      	movs	r0, #5
 8000ba6:	f001 f8cf 	bl	8001d48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000baa:	2005      	movs	r0, #5
 8000bac:	f001 f8e1 	bl	8001d72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2006      	movs	r0, #6
 8000bb6:	f001 f8c7 	bl	8001d48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000bba:	2006      	movs	r0, #6
 8000bbc:	f001 f8d9 	bl	8001d72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2007      	movs	r0, #7
 8000bc6:	f001 f8bf 	bl	8001d48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000bca:	2007      	movs	r0, #7
 8000bcc:	f001 f8d1 	bl	8001d72 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b00b      	add	sp, #44	; 0x2c
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	50000400 	.word	0x50000400
 8000be0:	50000800 	.word	0x50000800
 8000be4:	50001400 	.word	0x50001400
 8000be8:	00001063 	.word	0x00001063

08000bec <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8000bf8:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <updateAndDisplayTime+0x50>)
 8000bfa:	4911      	ldr	r1, [pc, #68]	; (8000c40 <updateAndDisplayTime+0x54>)
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <updateAndDisplayTime+0x58>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f7ff fc2c 	bl	800045c <getRTCTime>
	sevSeg_updateDigits(&currTime);
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <updateAndDisplayTime+0x54>)
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 fc62 	bl	80014d0 <sevSeg_updateDigits>

	if(currTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <updateAndDisplayTime+0x54>)
 8000c0e:	78db      	ldrb	r3, [r3, #3]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d106      	bne.n	8000c22 <updateAndDisplayTime+0x36>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <updateAndDisplayTime+0x5c>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f001 fa47 	bl	80020ae <HAL_GPIO_WritePin>
 8000c20:	e005      	b.n	8000c2e <updateAndDisplayTime+0x42>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000c22:	2180      	movs	r1, #128	; 0x80
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <updateAndDisplayTime+0x5c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f001 fa40 	bl	80020ae <HAL_GPIO_WritePin>
	}

	return halRet;
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]

}
 8000c32:	0018      	movs	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	200003c4 	.word	0x200003c4
 8000c40:	200003b0 	.word	0x200003b0
 8000c44:	20000258 	.word	0x20000258
 8000c48:	50000400 	.word	0x50000400

08000c4c <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]

	getUserAlarmTime(&hrtc, &userAlarmTime);
 8000c58:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <updateAndDisplayAlarm+0x50>)
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <updateAndDisplayAlarm+0x54>)
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f7ff fc12 	bl	8000488 <getUserAlarmTime>
	sevSeg_updateDigits(&userAlarmTime);
 8000c64:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <updateAndDisplayAlarm+0x50>)
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 fc32 	bl	80014d0 <sevSeg_updateDigits>

	if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <updateAndDisplayAlarm+0x50>)
 8000c6e:	78db      	ldrb	r3, [r3, #3]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d106      	bne.n	8000c82 <updateAndDisplayAlarm+0x36>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000c74:	2180      	movs	r1, #128	; 0x80
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <updateAndDisplayAlarm+0x58>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f001 fa17 	bl	80020ae <HAL_GPIO_WritePin>
 8000c80:	e005      	b.n	8000c8e <updateAndDisplayAlarm+0x42>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000c82:	2180      	movs	r1, #128	; 0x80
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <updateAndDisplayAlarm+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f001 fa10 	bl	80020ae <HAL_GPIO_WritePin>
	}

	return halRet;
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]

}
 8000c92:	0018      	movs	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	200003c8 	.word	0x200003c8
 8000ca0:	20000258 	.word	0x20000258
 8000ca4:	50000400 	.word	0x50000400

08000ca8 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b08d      	sub	sp, #52	; 0x34
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

	  printf("Enter current time minute increment interrupt\n\r");
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f004 fa6e 	bl	8005194 <iprintf>

	  RTC_AlarmTypeDef sAlarm;
	  getUserAlarmObj(hrtc, &sAlarm);
 8000cb8:	2408      	movs	r4, #8
 8000cba:	193a      	adds	r2, r7, r4
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff fbf8 	bl	80004b6 <getUserAlarmObj>
	  getRTCTime(hrtc, &currTime, &currDate);
 8000cc6:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8000cc8:	491b      	ldr	r1, [pc, #108]	; (8000d38 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff fbc5 	bl	800045c <getRTCTime>

	  if(sAlarm.AlarmTime.Minutes>58) {
 8000cd2:	0022      	movs	r2, r4
 8000cd4:	18bb      	adds	r3, r7, r2
 8000cd6:	785b      	ldrb	r3, [r3, #1]
 8000cd8:	2b3a      	cmp	r3, #58	; 0x3a
 8000cda:	d907      	bls.n	8000cec <HAL_RTC_AlarmAEventCallback+0x44>
		sAlarm.AlarmTime.Minutes=0;
 8000cdc:	18bb      	adds	r3, r7, r2
 8000cde:	2200      	movs	r2, #0
 8000ce0:	705a      	strb	r2, [r3, #1]
		printf("Reset alarm time\n\r");
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <HAL_RTC_AlarmAEventCallback+0x94>)
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f004 fa55 	bl	8005194 <iprintf>
 8000cea:	e006      	b.n	8000cfa <HAL_RTC_AlarmAEventCallback+0x52>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8000cec:	2108      	movs	r1, #8
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	785b      	ldrb	r3, [r3, #1]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	18f9      	adds	r1, r7, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	0018      	movs	r0, r3
 8000d06:	f002 fb5d 	bl	80033c4 <HAL_RTC_SetAlarm_IT>
 8000d0a:	1e03      	subs	r3, r0, #0
 8000d0c:	d1f6      	bne.n	8000cfc <HAL_RTC_AlarmAEventCallback+0x54>

	  updateAndDisplayTime();
 8000d0e:	f7ff ff6d 	bl	8000bec <updateAndDisplayTime>

	  printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	0019      	movs	r1, r3
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000d1a:	785b      	ldrb	r3, [r3, #1]
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000d20:	789b      	ldrb	r3, [r3, #2]
 8000d22:	4807      	ldr	r0, [pc, #28]	; (8000d40 <HAL_RTC_AlarmAEventCallback+0x98>)
 8000d24:	f004 fa36 	bl	8005194 <iprintf>

}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b00d      	add	sp, #52	; 0x34
 8000d2e:	bd90      	pop	{r4, r7, pc}
 8000d30:	080061a0 	.word	0x080061a0
 8000d34:	200003c4 	.word	0x200003c4
 8000d38:	200003b0 	.word	0x200003b0
 8000d3c:	080061d0 	.word	0x080061d0
 8000d40:	080061e4 	.word	0x080061e4

08000d44 <HAL_GPIO_EXTI_Falling_Callback>:

	HAL_TIM_Base_Stop(&htim16);

}

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	0002      	movs	r2, r0
 8000d4c:	1dbb      	adds	r3, r7, #6
 8000d4e:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8000d50:	2201      	movs	r2, #1
 8000d52:	1dbb      	adds	r3, r7, #6
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d113      	bne.n	8000d82 <HAL_GPIO_EXTI_Falling_Callback+0x3e>
		halRet = displayButtonISR();
 8000d5a:	250f      	movs	r5, #15
 8000d5c:	197c      	adds	r4, r7, r5
 8000d5e:	f000 f88f 	bl	8000e80 <displayButtonISR>
 8000d62:	0003      	movs	r3, r0
 8000d64:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000d66:	197b      	adds	r3, r7, r5
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d004      	beq.n	8000d78 <HAL_GPIO_EXTI_Falling_Callback+0x34>
			printf("Error toggling display.\n\r");
 8000d6e:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <HAL_GPIO_EXTI_Falling_Callback+0x114>)
 8000d70:	0018      	movs	r0, r3
 8000d72:	f004 fa0f 	bl	8005194 <iprintf>
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8000d76:	e06a      	b.n	8000e4e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Display intensity toggled.\n\r");
 8000d78:	4b38      	ldr	r3, [pc, #224]	; (8000e5c <HAL_GPIO_EXTI_Falling_Callback+0x118>)
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f004 fa0a 	bl	8005194 <iprintf>
}
 8000d80:	e065      	b.n	8000e4e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8000d82:	2240      	movs	r2, #64	; 0x40
 8000d84:	1dbb      	adds	r3, r7, #6
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d113      	bne.n	8000db4 <HAL_GPIO_EXTI_Falling_Callback+0x70>
		halRet = alarmEnableISR();
 8000d8c:	250f      	movs	r5, #15
 8000d8e:	197c      	adds	r4, r7, r5
 8000d90:	f000 f8b0 	bl	8000ef4 <alarmEnableISR>
 8000d94:	0003      	movs	r3, r0
 8000d96:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000d98:	197b      	adds	r3, r7, r5
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d004      	beq.n	8000daa <HAL_GPIO_EXTI_Falling_Callback+0x66>
			printf("Error toggling user alarm.\n\r");
 8000da0:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <HAL_GPIO_EXTI_Falling_Callback+0x11c>)
 8000da2:	0018      	movs	r0, r3
 8000da4:	f004 f9f6 	bl	8005194 <iprintf>
}
 8000da8:	e051      	b.n	8000e4e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm toggled.\n\r");
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <HAL_GPIO_EXTI_Falling_Callback+0x120>)
 8000dac:	0018      	movs	r0, r3
 8000dae:	f004 f9f1 	bl	8005194 <iprintf>
}
 8000db2:	e04c      	b.n	8000e4e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8000db4:	2202      	movs	r2, #2
 8000db6:	1dbb      	adds	r3, r7, #6
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d113      	bne.n	8000de6 <HAL_GPIO_EXTI_Falling_Callback+0xa2>
		halRet = alarmSetISR();
 8000dbe:	250f      	movs	r5, #15
 8000dc0:	197c      	adds	r4, r7, r5
 8000dc2:	f000 f8e5 	bl	8000f90 <alarmSetISR>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000dca:	197b      	adds	r3, r7, r5
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <HAL_GPIO_EXTI_Falling_Callback+0x98>
			printf("Error setting user alarm.\n\r");
 8000dd2:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <HAL_GPIO_EXTI_Falling_Callback+0x124>)
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f004 f9dd 	bl	8005194 <iprintf>
}
 8000dda:	e038      	b.n	8000e4e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm set.\n\r");
 8000ddc:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <HAL_GPIO_EXTI_Falling_Callback+0x128>)
 8000dde:	0018      	movs	r0, r3
 8000de0:	f004 f9d8 	bl	8005194 <iprintf>
}
 8000de4:	e033      	b.n	8000e4e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == hourSetButtonPin) {
 8000de6:	2220      	movs	r2, #32
 8000de8:	1dbb      	adds	r3, r7, #6
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d113      	bne.n	8000e18 <HAL_GPIO_EXTI_Falling_Callback+0xd4>
		halRet = hourSetISR();
 8000df0:	250f      	movs	r5, #15
 8000df2:	197c      	adds	r4, r7, r5
 8000df4:	f000 f956 	bl	80010a4 <hourSetISR>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000dfc:	197b      	adds	r3, r7, r5
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d004      	beq.n	8000e0e <HAL_GPIO_EXTI_Falling_Callback+0xca>
			printf("Error incrementing hour.\n\r");
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 8000e06:	0018      	movs	r0, r3
 8000e08:	f004 f9c4 	bl	8005194 <iprintf>
}
 8000e0c:	e01f      	b.n	8000e4e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Hour increment ISR success.\n\r");
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <HAL_GPIO_EXTI_Falling_Callback+0x130>)
 8000e10:	0018      	movs	r0, r3
 8000e12:	f004 f9bf 	bl	8005194 <iprintf>
}
 8000e16:	e01a      	b.n	8000e4e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	015b      	lsls	r3, r3, #5
 8000e1c:	1dba      	adds	r2, r7, #6
 8000e1e:	8812      	ldrh	r2, [r2, #0]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d113      	bne.n	8000e4c <HAL_GPIO_EXTI_Falling_Callback+0x108>
		halRet = minuteSetISR();
 8000e24:	250f      	movs	r5, #15
 8000e26:	197c      	adds	r4, r7, r5
 8000e28:	f000 f9e8 	bl	80011fc <minuteSetISR>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000e30:	197b      	adds	r3, r7, r5
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d004      	beq.n	8000e42 <HAL_GPIO_EXTI_Falling_Callback+0xfe>
			printf("Error incrementing minute.\n\r");
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <HAL_GPIO_EXTI_Falling_Callback+0x134>)
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f004 f9aa 	bl	8005194 <iprintf>
}
 8000e40:	e005      	b.n	8000e4e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Minute increment ISR success.\n\r");
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_GPIO_EXTI_Falling_Callback+0x138>)
 8000e44:	0018      	movs	r0, r3
 8000e46:	f004 f9a5 	bl	8005194 <iprintf>
}
 8000e4a:	e000      	b.n	8000e4e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
		__NOP();
 8000e4c:	46c0      	nop			; (mov r8, r8)
}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b004      	add	sp, #16
 8000e54:	bdb0      	pop	{r4, r5, r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	08006224 	.word	0x08006224
 8000e5c:	08006240 	.word	0x08006240
 8000e60:	08006260 	.word	0x08006260
 8000e64:	08006280 	.word	0x08006280
 8000e68:	08006298 	.word	0x08006298
 8000e6c:	080062b4 	.word	0x080062b4
 8000e70:	080062c8 	.word	0x080062c8
 8000e74:	080062e4 	.word	0x080062e4
 8000e78:	08006304 	.word	0x08006304
 8000e7c:	08006324 	.word	0x08006324

08000e80 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0

	printf("Entered display toggle ISR\n\r");
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <displayButtonISR+0x60>)
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f004 f983 	bl	8005194 <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 8000e94:	f7ff feaa 	bl	8000bec <updateAndDisplayTime>

	sevSeg_setIntensity(&htim1, sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <displayButtonISR+0x64>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <displayButtonISR+0x68>)
 8000ea0:	5c9a      	ldrb	r2, [r3, r2]
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <displayButtonISR+0x6c>)
 8000ea4:	0011      	movs	r1, r2
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f000 fba8 	bl	80015fc <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <displayButtonISR+0x64>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d909      	bls.n	8000ec8 <displayButtonISR+0x48>
		displayToggle = 0;
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <displayButtonISR+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
 8000eba:	2180      	movs	r1, #128	; 0x80
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <displayButtonISR+0x70>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f001 f8f4 	bl	80020ae <HAL_GPIO_WritePin>
 8000ec6:	e005      	b.n	8000ed4 <displayButtonISR+0x54>
	} else {
		displayToggle++;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <displayButtonISR+0x64>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <displayButtonISR+0x64>)
 8000ed2:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]

}
 8000ed8:	0018      	movs	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b002      	add	sp, #8
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	08006344 	.word	0x08006344
 8000ee4:	20000254 	.word	0x20000254
 8000ee8:	0800650c 	.word	0x0800650c
 8000eec:	20000284 	.word	0x20000284
 8000ef0:	50000400 	.word	0x50000400

08000ef4 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0

	printf("Entered alarm toggle ISR\n\r");
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <alarmEnableISR+0x84>)
 8000efc:	0018      	movs	r0, r3
 8000efe:	f004 f949 	bl	8005194 <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8000f08:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <alarmEnableISR+0x88>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4053      	eors	r3, r2
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d015      	beq.n	8000f42 <alarmEnableISR+0x4e>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_SET);			// Turn on alarm LED
 8000f16:	2380      	movs	r3, #128	; 0x80
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4819      	ldr	r0, [pc, #100]	; (8000f80 <alarmEnableISR+0x8c>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	0019      	movs	r1, r3
 8000f20:	f001 f8c5 	bl	80020ae <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <alarmEnableISR+0x88>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]

		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <alarmEnableISR+0x90>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	0019      	movs	r1, r3
								userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <alarmEnableISR+0x90>)
 8000f32:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000f34:	001a      	movs	r2, r3
								userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <alarmEnableISR+0x90>)
 8000f38:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000f3a:	4813      	ldr	r0, [pc, #76]	; (8000f88 <alarmEnableISR+0x94>)
 8000f3c:	f004 f92a 	bl	8005194 <iprintf>
 8000f40:	e013      	b.n	8000f6a <alarmEnableISR+0x76>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <alarmEnableISR+0x88>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d00e      	beq.n	8000f68 <alarmEnableISR+0x74>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_RESET);			// Turn off alarm LED
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	480c      	ldr	r0, [pc, #48]	; (8000f80 <alarmEnableISR+0x8c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	0019      	movs	r1, r3
 8000f54:	f001 f8ab 	bl	80020ae <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <alarmEnableISR+0x88>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]

		printf("User alarm disabled.\n\r");
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <alarmEnableISR+0x98>)
 8000f60:	0018      	movs	r0, r3
 8000f62:	f004 f917 	bl	8005194 <iprintf>
 8000f66:	e000      	b.n	8000f6a <alarmEnableISR+0x76>
	}
	else {
		__NOP();							//Code should never reach here.
 8000f68:	46c0      	nop			; (mov r8, r8)
	}

	return halRet;
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]

}
 8000f6e:	0018      	movs	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b002      	add	sp, #8
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	08006364 	.word	0x08006364
 8000f7c:	20000255 	.word	0x20000255
 8000f80:	50000400 	.word	0x50000400
 8000f84:	200003c8 	.word	0x200003c8
 8000f88:	08006380 	.word	0x08006380
 8000f8c:	080063a0 	.word	0x080063a0

08000f90 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0

	printf("Enter user alarm set ISR.\n\r");
 8000f96:	4b3a      	ldr	r3, [pc, #232]	; (8001080 <alarmSetISR+0xf0>)
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f004 f8fb 	bl	8005194 <iprintf>

	getUserAlarmTime(&hrtc, &userAlarmTime);
 8000f9e:	4a39      	ldr	r2, [pc, #228]	; (8001084 <alarmSetISR+0xf4>)
 8000fa0:	4b39      	ldr	r3, [pc, #228]	; (8001088 <alarmSetISR+0xf8>)
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f7ff fa6f 	bl	8000488 <getUserAlarmTime>
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000faa:	4b36      	ldr	r3, [pc, #216]	; (8001084 <alarmSetISR+0xf4>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	0019      	movs	r1, r3
			userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000fb0:	4b34      	ldr	r3, [pc, #208]	; (8001084 <alarmSetISR+0xf4>)
 8000fb2:	785b      	ldrb	r3, [r3, #1]
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000fb4:	001a      	movs	r2, r3
			userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000fb6:	4b33      	ldr	r3, [pc, #204]	; (8001084 <alarmSetISR+0xf4>)
 8000fb8:	789b      	ldrb	r3, [r3, #2]
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000fba:	4834      	ldr	r0, [pc, #208]	; (800108c <alarmSetISR+0xfc>)
 8000fbc:	f004 f8ea 	bl	8005194 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim16);						// Begin timer 16 counting (to 500 ms)
 8000fc6:	4b32      	ldr	r3, [pc, #200]	; (8001090 <alarmSetISR+0x100>)
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f002 fd93 	bl	8003af4 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(&htim16);	// Get initial timer value to compare to
 8000fce:	4b30      	ldr	r3, [pc, #192]	; (8001090 <alarmSetISR+0x100>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fd4:	1dbb      	adds	r3, r7, #6
 8000fd6:	801a      	strh	r2, [r3, #0]
	bool displayBlink = false;
 8000fd8:	1d7b      	adds	r3, r7, #5
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]

	do {											// while the alarm set button is not held down, blink display.

		updateAndDisplayAlarm();
 8000fde:	f7ff fe35 	bl	8000c4c <updateAndDisplayAlarm>

		if(__HAL_TIM_GET_COUNTER(&htim16) - timerVal >= (65536 / 2)) {
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <alarmSetISR+0x100>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fe8:	1dbb      	adds	r3, r7, #6
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	1ad2      	subs	r2, r2, r3
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d31d      	bcc.n	8001032 <alarmSetISR+0xa2>

			sevSeg_setIntensity (&htim1, sevSeg_intensityDuty[displayBlink + 1]);		// Initialize to whatever duty cycle
 8000ff6:	1d7b      	adds	r3, r7, #5
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	4a25      	ldr	r2, [pc, #148]	; (8001094 <alarmSetISR+0x104>)
 8000ffe:	5cd2      	ldrb	r2, [r2, r3]
 8001000:	4b25      	ldr	r3, [pc, #148]	; (8001098 <alarmSetISR+0x108>)
 8001002:	0011      	movs	r1, r2
 8001004:	0018      	movs	r0, r3
 8001006:	f000 faf9 	bl	80015fc <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(&htim16);
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <alarmSetISR+0x100>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001010:	1dbb      	adds	r3, r7, #6
 8001012:	801a      	strh	r2, [r3, #0]
			displayBlink = !displayBlink;
 8001014:	1d7b      	adds	r3, r7, #5
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	1e5a      	subs	r2, r3, #1
 800101a:	4193      	sbcs	r3, r2
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2201      	movs	r2, #1
 8001020:	4053      	eors	r3, r2
 8001022:	b2db      	uxtb	r3, r3
 8001024:	001a      	movs	r2, r3
 8001026:	1d7b      	adds	r3, r7, #5
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	781a      	ldrb	r2, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	400a      	ands	r2, r1
 8001030:	701a      	strb	r2, [r3, #0]

		}

	}while(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == GPIO_PIN_RESET);
 8001032:	2202      	movs	r2, #2
 8001034:	23a0      	movs	r3, #160	; 0xa0
 8001036:	05db      	lsls	r3, r3, #23
 8001038:	0011      	movs	r1, r2
 800103a:	0018      	movs	r0, r3
 800103c:	f001 f81a 	bl	8002074 <HAL_GPIO_ReadPin>
 8001040:	1e03      	subs	r3, r0, #0
 8001042:	d0cc      	beq.n	8000fde <alarmSetISR+0x4e>

	sevSeg_setIntensity(&htim1, sevSeg_intensityDuty[0]);			// Turn display back to full intensity
 8001044:	2264      	movs	r2, #100	; 0x64
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <alarmSetISR+0x108>)
 8001048:	0011      	movs	r1, r2
 800104a:	0018      	movs	r0, r3
 800104c:	f000 fad6 	bl	80015fc <sevSeg_setIntensity>

	HAL_TIM_Base_Stop(&htim16);
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <alarmSetISR+0x100>)
 8001052:	0018      	movs	r0, r3
 8001054:	f002 fd9a 	bl	8003b8c <HAL_TIM_Base_Stop>

	updateAndDisplayTime();
 8001058:	f7ff fdc8 	bl	8000bec <updateAndDisplayTime>
	printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <alarmSetISR+0x10c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	0019      	movs	r1, r3
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <alarmSetISR+0x10c>)
 8001064:	785b      	ldrb	r3, [r3, #1]
 8001066:	001a      	movs	r2, r3
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <alarmSetISR+0x10c>)
 800106a:	789b      	ldrb	r3, [r3, #2]
 800106c:	480c      	ldr	r0, [pc, #48]	; (80010a0 <alarmSetISR+0x110>)
 800106e:	f004 f891 	bl	8005194 <iprintf>

	return halRet;
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	781b      	ldrb	r3, [r3, #0]

}
 8001076:	0018      	movs	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	b002      	add	sp, #8
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	080063b8 	.word	0x080063b8
 8001084:	200003c8 	.word	0x200003c8
 8001088:	20000258 	.word	0x20000258
 800108c:	080063d4 	.word	0x080063d4
 8001090:	200002d0 	.word	0x200002d0
 8001094:	0800650c 	.word	0x0800650c
 8001098:	20000284 	.word	0x20000284
 800109c:	200003b0 	.word	0x200003b0
 80010a0:	080063fc 	.word	0x080063fc

080010a4 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0

	printf("Entered hour set ISR.\n\r");
 80010aa:	4b4c      	ldr	r3, [pc, #304]	; (80011dc <hourSetISR+0x138>)
 80010ac:	0018      	movs	r0, r3
 80010ae:	f004 f871 	bl	8005194 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 80010b2:	1dfb      	adds	r3, r7, #7
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) != GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 80010b8:	2202      	movs	r2, #2
 80010ba:	23a0      	movs	r3, #160	; 0xa0
 80010bc:	05db      	lsls	r3, r3, #23
 80010be:	0011      	movs	r1, r2
 80010c0:	0018      	movs	r0, r3
 80010c2:	f000 ffd7 	bl	8002074 <HAL_GPIO_ReadPin>
 80010c6:	0003      	movs	r3, r0
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d042      	beq.n	8001152 <hourSetISR+0xae>

		getUserAlarmTime(&hrtc, &userAlarmTime);
 80010cc:	4a44      	ldr	r2, [pc, #272]	; (80011e0 <hourSetISR+0x13c>)
 80010ce:	4b45      	ldr	r3, [pc, #276]	; (80011e4 <hourSetISR+0x140>)
 80010d0:	0011      	movs	r1, r2
 80010d2:	0018      	movs	r0, r3
 80010d4:	f7ff f9d8 	bl	8000488 <getUserAlarmTime>

		if(userAlarmTime.Hours >= 12) {
 80010d8:	4b41      	ldr	r3, [pc, #260]	; (80011e0 <hourSetISR+0x13c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b0b      	cmp	r3, #11
 80010de:	d90e      	bls.n	80010fe <hourSetISR+0x5a>
			userAlarmTime.Hours = 1;
 80010e0:	4b3f      	ldr	r3, [pc, #252]	; (80011e0 <hourSetISR+0x13c>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80010e6:	4b3e      	ldr	r3, [pc, #248]	; (80011e0 <hourSetISR+0x13c>)
 80010e8:	78db      	ldrb	r3, [r3, #3]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d103      	bne.n	80010f6 <hourSetISR+0x52>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80010ee:	4b3c      	ldr	r3, [pc, #240]	; (80011e0 <hourSetISR+0x13c>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	70da      	strb	r2, [r3, #3]
 80010f4:	e00f      	b.n	8001116 <hourSetISR+0x72>
			} else {
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80010f6:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <hourSetISR+0x13c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	70da      	strb	r2, [r3, #3]
 80010fc:	e00b      	b.n	8001116 <hourSetISR+0x72>
			}
		}
		else if(userAlarmTime.Hours < 12) {
 80010fe:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <hourSetISR+0x13c>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b0b      	cmp	r3, #11
 8001104:	d806      	bhi.n	8001114 <hourSetISR+0x70>
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001106:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <hourSetISR+0x13c>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <hourSetISR+0x13c>)
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	e000      	b.n	8001116 <hourSetISR+0x72>
		}
		else {
			__NOP();
 8001114:	46c0      	nop			; (mov r8, r8)
		}

		userAlarmObj.AlarmTime = userAlarmTime;
 8001116:	4b34      	ldr	r3, [pc, #208]	; (80011e8 <hourSetISR+0x144>)
 8001118:	4a31      	ldr	r2, [pc, #196]	; (80011e0 <hourSetISR+0x13c>)
 800111a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800111c:	c313      	stmia	r3!, {r0, r1, r4}
 800111e:	ca03      	ldmia	r2!, {r0, r1}
 8001120:	c303      	stmia	r3!, {r0, r1}

		HAL_RTC_SetAlarm_IT(&hrtc, &userAlarmObj, RTCTimeFormat);
 8001122:	4931      	ldr	r1, [pc, #196]	; (80011e8 <hourSetISR+0x144>)
 8001124:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <hourSetISR+0x140>)
 8001126:	2200      	movs	r2, #0
 8001128:	0018      	movs	r0, r3
 800112a:	f002 f94b 	bl	80033c4 <HAL_RTC_SetAlarm_IT>
		getUserAlarmTime(&hrtc, &userAlarmTime);
 800112e:	4a2c      	ldr	r2, [pc, #176]	; (80011e0 <hourSetISR+0x13c>)
 8001130:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <hourSetISR+0x140>)
 8001132:	0011      	movs	r1, r2
 8001134:	0018      	movs	r0, r3
 8001136:	f7ff f9a7 	bl	8000488 <getUserAlarmTime>

		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 800113a:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <hourSetISR+0x13c>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	0019      	movs	r1, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 8001140:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <hourSetISR+0x13c>)
 8001142:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 8001144:	001a      	movs	r2, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 8001146:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <hourSetISR+0x13c>)
 8001148:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 800114a:	4828      	ldr	r0, [pc, #160]	; (80011ec <hourSetISR+0x148>)
 800114c:	f004 f822 	bl	8005194 <iprintf>
 8001150:	e03d      	b.n	80011ce <hourSetISR+0x12a>

	}
	else {									// Otherwise, change current time hour.

		getRTCTime(&hrtc, &currTime, &currDate);
 8001152:	4a27      	ldr	r2, [pc, #156]	; (80011f0 <hourSetISR+0x14c>)
 8001154:	4927      	ldr	r1, [pc, #156]	; (80011f4 <hourSetISR+0x150>)
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <hourSetISR+0x140>)
 8001158:	0018      	movs	r0, r3
 800115a:	f7ff f97f 	bl	800045c <getRTCTime>
		if(currTime.Hours >= 12) {
 800115e:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <hourSetISR+0x150>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b0b      	cmp	r3, #11
 8001164:	d90e      	bls.n	8001184 <hourSetISR+0xe0>
			currTime.Hours = 1;
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <hourSetISR+0x150>)
 8001168:	2201      	movs	r2, #1
 800116a:	701a      	strb	r2, [r3, #0]
			if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800116c:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <hourSetISR+0x150>)
 800116e:	78db      	ldrb	r3, [r3, #3]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d103      	bne.n	800117c <hourSetISR+0xd8>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <hourSetISR+0x150>)
 8001176:	2201      	movs	r2, #1
 8001178:	70da      	strb	r2, [r3, #3]
 800117a:	e00f      	b.n	800119c <hourSetISR+0xf8>
			} else {
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <hourSetISR+0x150>)
 800117e:	2200      	movs	r2, #0
 8001180:	70da      	strb	r2, [r3, #3]
 8001182:	e00b      	b.n	800119c <hourSetISR+0xf8>
			}
		}
		else if(currTime.Hours < 12) {
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <hourSetISR+0x150>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b0b      	cmp	r3, #11
 800118a:	d806      	bhi.n	800119a <hourSetISR+0xf6>
			currTime.Hours = currTime.Hours + 1;
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <hourSetISR+0x150>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <hourSetISR+0x150>)
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e000      	b.n	800119c <hourSetISR+0xf8>
		}
		else {
			__NOP();
 800119a:	46c0      	nop			; (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 800119c:	4915      	ldr	r1, [pc, #84]	; (80011f4 <hourSetISR+0x150>)
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <hourSetISR+0x140>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	0018      	movs	r0, r3
 80011a4:	f001 ff2a 	bl	8002ffc <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80011a8:	f7ff fd20 	bl	8000bec <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80011ac:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <hourSetISR+0x14c>)
 80011ae:	4911      	ldr	r1, [pc, #68]	; (80011f4 <hourSetISR+0x150>)
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <hourSetISR+0x140>)
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff f952 	bl	800045c <getRTCTime>

		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <hourSetISR+0x150>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <hourSetISR+0x150>)
 80011c0:	785b      	ldrb	r3, [r3, #1]
		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 80011c2:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <hourSetISR+0x150>)
 80011c6:	789b      	ldrb	r3, [r3, #2]
		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 80011c8:	480b      	ldr	r0, [pc, #44]	; (80011f8 <hourSetISR+0x154>)
 80011ca:	f003 ffe3 	bl	8005194 <iprintf>
	}

	return halRet;
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
}
 80011d2:	0018      	movs	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b003      	add	sp, #12
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	08006420 	.word	0x08006420
 80011e0:	200003c8 	.word	0x200003c8
 80011e4:	20000258 	.word	0x20000258
 80011e8:	200003dc 	.word	0x200003dc
 80011ec:	08006438 	.word	0x08006438
 80011f0:	200003c4 	.word	0x200003c4
 80011f4:	200003b0 	.word	0x200003b0
 80011f8:	08006464 	.word	0x08006464

080011fc <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0

	printf("Entered minute set ISR.\n\r");
 8001202:	4b63      	ldr	r3, [pc, #396]	; (8001390 <minuteSetISR+0x194>)
 8001204:	0018      	movs	r0, r3
 8001206:	f003 ffc5 	bl	8005194 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == !GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 8001210:	2202      	movs	r2, #2
 8001212:	23a0      	movs	r3, #160	; 0xa0
 8001214:	05db      	lsls	r3, r3, #23
 8001216:	0011      	movs	r1, r2
 8001218:	0018      	movs	r0, r3
 800121a:	f000 ff2b 	bl	8002074 <HAL_GPIO_ReadPin>
 800121e:	1e03      	subs	r3, r0, #0
 8001220:	d157      	bne.n	80012d2 <minuteSetISR+0xd6>

		getUserAlarmTime(&hrtc, &userAlarmTime);
 8001222:	4a5c      	ldr	r2, [pc, #368]	; (8001394 <minuteSetISR+0x198>)
 8001224:	4b5c      	ldr	r3, [pc, #368]	; (8001398 <minuteSetISR+0x19c>)
 8001226:	0011      	movs	r1, r2
 8001228:	0018      	movs	r0, r3
 800122a:	f7ff f92d 	bl	8000488 <getUserAlarmTime>

		if(userAlarmTime.Minutes >= 59) {
 800122e:	4b59      	ldr	r3, [pc, #356]	; (8001394 <minuteSetISR+0x198>)
 8001230:	785b      	ldrb	r3, [r3, #1]
 8001232:	2b3a      	cmp	r3, #58	; 0x3a
 8001234:	d929      	bls.n	800128a <minuteSetISR+0x8e>
			userAlarmTime.Minutes = 0;
 8001236:	4b57      	ldr	r3, [pc, #348]	; (8001394 <minuteSetISR+0x198>)
 8001238:	2200      	movs	r2, #0
 800123a:	705a      	strb	r2, [r3, #1]
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 800123c:	4b55      	ldr	r3, [pc, #340]	; (8001394 <minuteSetISR+0x198>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b53      	ldr	r3, [pc, #332]	; (8001394 <minuteSetISR+0x198>)
 8001246:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.Hours > 12) {
 8001248:	4b52      	ldr	r3, [pc, #328]	; (8001394 <minuteSetISR+0x198>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b0c      	cmp	r3, #12
 800124e:	d902      	bls.n	8001256 <minuteSetISR+0x5a>
				userAlarmTime.Hours = 1;
 8001250:	4b50      	ldr	r3, [pc, #320]	; (8001394 <minuteSetISR+0x198>)
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
			}
			if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001256:	4b4f      	ldr	r3, [pc, #316]	; (8001394 <minuteSetISR+0x198>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b0c      	cmp	r3, #12
 800125c:	d107      	bne.n	800126e <minuteSetISR+0x72>
 800125e:	4b4d      	ldr	r3, [pc, #308]	; (8001394 <minuteSetISR+0x198>)
 8001260:	78db      	ldrb	r3, [r3, #3]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d103      	bne.n	800126e <minuteSetISR+0x72>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001266:	4b4b      	ldr	r3, [pc, #300]	; (8001394 <minuteSetISR+0x198>)
 8001268:	2201      	movs	r2, #1
 800126a:	70da      	strb	r2, [r3, #3]
 800126c:	e019      	b.n	80012a2 <minuteSetISR+0xa6>
			} else if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 800126e:	4b49      	ldr	r3, [pc, #292]	; (8001394 <minuteSetISR+0x198>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b0c      	cmp	r3, #12
 8001274:	d107      	bne.n	8001286 <minuteSetISR+0x8a>
 8001276:	4b47      	ldr	r3, [pc, #284]	; (8001394 <minuteSetISR+0x198>)
 8001278:	78db      	ldrb	r3, [r3, #3]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d103      	bne.n	8001286 <minuteSetISR+0x8a>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800127e:	4b45      	ldr	r3, [pc, #276]	; (8001394 <minuteSetISR+0x198>)
 8001280:	2200      	movs	r2, #0
 8001282:	70da      	strb	r2, [r3, #3]
 8001284:	e00d      	b.n	80012a2 <minuteSetISR+0xa6>
			}
			else {
				__NOP();
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	e00b      	b.n	80012a2 <minuteSetISR+0xa6>
			}
		}
		else if(userAlarmTime.Minutes < 59) {
 800128a:	4b42      	ldr	r3, [pc, #264]	; (8001394 <minuteSetISR+0x198>)
 800128c:	785b      	ldrb	r3, [r3, #1]
 800128e:	2b3a      	cmp	r3, #58	; 0x3a
 8001290:	d806      	bhi.n	80012a0 <minuteSetISR+0xa4>
			userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001292:	4b40      	ldr	r3, [pc, #256]	; (8001394 <minuteSetISR+0x198>)
 8001294:	785b      	ldrb	r3, [r3, #1]
 8001296:	3301      	adds	r3, #1
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4b3e      	ldr	r3, [pc, #248]	; (8001394 <minuteSetISR+0x198>)
 800129c:	705a      	strb	r2, [r3, #1]
 800129e:	e000      	b.n	80012a2 <minuteSetISR+0xa6>
		}
		else {
			__NOP();
 80012a0:	46c0      	nop			; (mov r8, r8)
		}

		userAlarmObj.AlarmTime = userAlarmTime;
 80012a2:	4b3e      	ldr	r3, [pc, #248]	; (800139c <minuteSetISR+0x1a0>)
 80012a4:	4a3b      	ldr	r2, [pc, #236]	; (8001394 <minuteSetISR+0x198>)
 80012a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012a8:	c313      	stmia	r3!, {r0, r1, r4}
 80012aa:	ca03      	ldmia	r2!, {r0, r1}
 80012ac:	c303      	stmia	r3!, {r0, r1}

		HAL_RTC_SetAlarm_IT(&hrtc, &userAlarmObj, RTCTimeFormat);
 80012ae:	493b      	ldr	r1, [pc, #236]	; (800139c <minuteSetISR+0x1a0>)
 80012b0:	4b39      	ldr	r3, [pc, #228]	; (8001398 <minuteSetISR+0x19c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	0018      	movs	r0, r3
 80012b6:	f002 f885 	bl	80033c4 <HAL_RTC_SetAlarm_IT>

		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmObj.AlarmTime.Hours,
 80012ba:	4b38      	ldr	r3, [pc, #224]	; (800139c <minuteSetISR+0x1a0>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	0019      	movs	r1, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 80012c0:	4b36      	ldr	r3, [pc, #216]	; (800139c <minuteSetISR+0x1a0>)
 80012c2:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmObj.AlarmTime.Hours,
 80012c4:	001a      	movs	r2, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 80012c6:	4b35      	ldr	r3, [pc, #212]	; (800139c <minuteSetISR+0x1a0>)
 80012c8:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmObj.AlarmTime.Hours,
 80012ca:	4835      	ldr	r0, [pc, #212]	; (80013a0 <minuteSetISR+0x1a4>)
 80012cc:	f003 ff62 	bl	8005194 <iprintf>
 80012d0:	e058      	b.n	8001384 <minuteSetISR+0x188>

	}
	else {									// Otherwise, change current time hour.

		getRTCTime(&hrtc, &currTime, &currDate);
 80012d2:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <minuteSetISR+0x1a8>)
 80012d4:	4934      	ldr	r1, [pc, #208]	; (80013a8 <minuteSetISR+0x1ac>)
 80012d6:	4b30      	ldr	r3, [pc, #192]	; (8001398 <minuteSetISR+0x19c>)
 80012d8:	0018      	movs	r0, r3
 80012da:	f7ff f8bf 	bl	800045c <getRTCTime>

		if(currTime.Minutes >= 59) {
 80012de:	4b32      	ldr	r3, [pc, #200]	; (80013a8 <minuteSetISR+0x1ac>)
 80012e0:	785b      	ldrb	r3, [r3, #1]
 80012e2:	2b3a      	cmp	r3, #58	; 0x3a
 80012e4:	d929      	bls.n	800133a <minuteSetISR+0x13e>
			currTime.Minutes = 0;
 80012e6:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <minuteSetISR+0x1ac>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	705a      	strb	r2, [r3, #1]
			currTime.Hours = currTime.Hours + 1;
 80012ec:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <minuteSetISR+0x1ac>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <minuteSetISR+0x1ac>)
 80012f6:	701a      	strb	r2, [r3, #0]
			if(currTime.Hours > 12) {
 80012f8:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <minuteSetISR+0x1ac>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b0c      	cmp	r3, #12
 80012fe:	d902      	bls.n	8001306 <minuteSetISR+0x10a>
				currTime.Hours = 1;
 8001300:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <minuteSetISR+0x1ac>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
			}
			if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001306:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <minuteSetISR+0x1ac>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b0c      	cmp	r3, #12
 800130c:	d107      	bne.n	800131e <minuteSetISR+0x122>
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <minuteSetISR+0x1ac>)
 8001310:	78db      	ldrb	r3, [r3, #3]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d103      	bne.n	800131e <minuteSetISR+0x122>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001316:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <minuteSetISR+0x1ac>)
 8001318:	2201      	movs	r2, #1
 800131a:	70da      	strb	r2, [r3, #3]
 800131c:	e019      	b.n	8001352 <minuteSetISR+0x156>
			} else if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <minuteSetISR+0x1ac>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b0c      	cmp	r3, #12
 8001324:	d107      	bne.n	8001336 <minuteSetISR+0x13a>
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <minuteSetISR+0x1ac>)
 8001328:	78db      	ldrb	r3, [r3, #3]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d103      	bne.n	8001336 <minuteSetISR+0x13a>
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800132e:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <minuteSetISR+0x1ac>)
 8001330:	2200      	movs	r2, #0
 8001332:	70da      	strb	r2, [r3, #3]
 8001334:	e00d      	b.n	8001352 <minuteSetISR+0x156>
			}
			else {
				__NOP();
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	e00b      	b.n	8001352 <minuteSetISR+0x156>
			}
		}
		else if(currTime.Minutes < 59) {
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <minuteSetISR+0x1ac>)
 800133c:	785b      	ldrb	r3, [r3, #1]
 800133e:	2b3a      	cmp	r3, #58	; 0x3a
 8001340:	d806      	bhi.n	8001350 <minuteSetISR+0x154>
			currTime.Minutes = currTime.Minutes + 1;
 8001342:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <minuteSetISR+0x1ac>)
 8001344:	785b      	ldrb	r3, [r3, #1]
 8001346:	3301      	adds	r3, #1
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <minuteSetISR+0x1ac>)
 800134c:	705a      	strb	r2, [r3, #1]
 800134e:	e000      	b.n	8001352 <minuteSetISR+0x156>
		}
		else {
			__NOP();
 8001350:	46c0      	nop			; (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001352:	4915      	ldr	r1, [pc, #84]	; (80013a8 <minuteSetISR+0x1ac>)
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <minuteSetISR+0x19c>)
 8001356:	2200      	movs	r2, #0
 8001358:	0018      	movs	r0, r3
 800135a:	f001 fe4f 	bl	8002ffc <HAL_RTC_SetTime>

		updateAndDisplayTime();
 800135e:	f7ff fc45 	bl	8000bec <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001362:	4a10      	ldr	r2, [pc, #64]	; (80013a4 <minuteSetISR+0x1a8>)
 8001364:	4910      	ldr	r1, [pc, #64]	; (80013a8 <minuteSetISR+0x1ac>)
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <minuteSetISR+0x19c>)
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff f877 	bl	800045c <getRTCTime>

		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <minuteSetISR+0x1ac>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <minuteSetISR+0x1ac>)
 8001376:	785b      	ldrb	r3, [r3, #1]
		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001378:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <minuteSetISR+0x1ac>)
 800137c:	789b      	ldrb	r3, [r3, #2]
		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 800137e:	480b      	ldr	r0, [pc, #44]	; (80013ac <minuteSetISR+0x1b0>)
 8001380:	f003 ff08 	bl	8005194 <iprintf>
	}

	return halRet;
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	781b      	ldrb	r3, [r3, #0]
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	b003      	add	sp, #12
 800138e:	bd90      	pop	{r4, r7, pc}
 8001390:	08006494 	.word	0x08006494
 8001394:	200003c8 	.word	0x200003c8
 8001398:	20000258 	.word	0x20000258
 800139c:	200003dc 	.word	0x200003dc
 80013a0:	080064b0 	.word	0x080064b0
 80013a4:	200003c4 	.word	0x200003c4
 80013a8:	200003b0 	.word	0x200003b0
 80013ac:	080064dc 	.word	0x080064dc

080013b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <Error_Handler+0x8>
	...

080013bc <sevSeg_Init>:
GPIO_PinState GPIOPinSet[2] = {GPIO_PIN_RESET, GPIO_PIN_SET};


void sevSeg_Init(uint8_t shiftDataPin, uint8_t shiftDataClockPin, uint8_t shiftStoreClockPin,
					uint8_t shiftOutputEnablePin, uint8_t shiftMCLRPin,
					GPIO_TypeDef *GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM) {
 80013bc:	b5b0      	push	{r4, r5, r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	0005      	movs	r5, r0
 80013c4:	000c      	movs	r4, r1
 80013c6:	0010      	movs	r0, r2
 80013c8:	0019      	movs	r1, r3
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	1c2a      	adds	r2, r5, #0
 80013ce:	701a      	strb	r2, [r3, #0]
 80013d0:	1dbb      	adds	r3, r7, #6
 80013d2:	1c22      	adds	r2, r4, #0
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	1d7b      	adds	r3, r7, #5
 80013d8:	1c02      	adds	r2, r0, #0
 80013da:	701a      	strb	r2, [r3, #0]
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	1c0a      	adds	r2, r1, #0
 80013e0:	701a      	strb	r2, [r3, #0]

	shiftData = shiftDataPin;
 80013e2:	1dfb      	adds	r3, r7, #7
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <sevSeg_Init+0xec>)
 80013ea:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 80013ec:	1dbb      	adds	r3, r7, #6
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <sevSeg_Init+0xf0>)
 80013f4:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 80013f6:	1d7b      	adds	r3, r7, #5
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <sevSeg_Init+0xf4>)
 80013fe:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	b29a      	uxth	r2, r3
 8001406:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <sevSeg_Init+0xf8>)
 8001408:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 800140a:	2320      	movs	r3, #32
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b29a      	uxth	r2, r3
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <sevSeg_Init+0xfc>)
 8001414:	801a      	strh	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	e015      	b.n	8001448 <sevSeg_Init+0x8c>
		portArray[i] = GPIOPortArray[i];
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	222c      	movs	r2, #44	; 0x2c
 8001420:	4353      	muls	r3, r2
 8001422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001424:	18d0      	adds	r0, r2, r3
 8001426:	4a25      	ldr	r2, [pc, #148]	; (80014bc <sevSeg_Init+0x100>)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	212c      	movs	r1, #44	; 0x2c
 800142c:	434b      	muls	r3, r1
 800142e:	18d3      	adds	r3, r2, r3
 8001430:	0002      	movs	r2, r0
 8001432:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001434:	c313      	stmia	r3!, {r0, r1, r4}
 8001436:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001438:	c313      	stmia	r3!, {r0, r1, r4}
 800143a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800143c:	c313      	stmia	r3!, {r0, r1, r4}
 800143e:	ca03      	ldmia	r2!, {r0, r1}
 8001440:	c303      	stmia	r3!, {r0, r1}
	for(int i = 0; i < 5; i++) {
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3301      	adds	r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b04      	cmp	r3, #4
 800144c:	dde6      	ble.n	800141c <sevSeg_Init+0x60>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(&portArray[4], shiftMCLR, GPIOPinSet[0]);
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <sevSeg_Init+0xfc>)
 8001450:	8819      	ldrh	r1, [r3, #0]
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <sevSeg_Init+0x104>)
 8001454:	781a      	ldrb	r2, [r3, #0]
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <sevSeg_Init+0x108>)
 8001458:	0018      	movs	r0, r3
 800145a:	f000 fe28 	bl	80020ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(&portArray[4], shiftMCLR, GPIOPinSet[1]);
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <sevSeg_Init+0xfc>)
 8001460:	8819      	ldrh	r1, [r3, #0]
 8001462:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <sevSeg_Init+0x104>)
 8001464:	785a      	ldrb	r2, [r3, #1]
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <sevSeg_Init+0x108>)
 8001468:	0018      	movs	r0, r3
 800146a:	f000 fe20 	bl	80020ae <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(&portArray[2], shiftStoreClock, GPIOPinSet[1]);
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <sevSeg_Init+0xf4>)
 8001470:	8819      	ldrh	r1, [r3, #0]
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <sevSeg_Init+0x104>)
 8001474:	785a      	ldrb	r2, [r3, #1]
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <sevSeg_Init+0x10c>)
 8001478:	0018      	movs	r0, r3
 800147a:	f000 fe18 	bl	80020ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(&portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <sevSeg_Init+0xf4>)
 8001480:	8819      	ldrh	r1, [r3, #0]
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <sevSeg_Init+0x104>)
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <sevSeg_Init+0x10c>)
 8001488:	0018      	movs	r0, r3
 800148a:	f000 fe10 	bl	80020ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(&portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <sevSeg_Init+0xf8>)
 8001490:	8819      	ldrh	r1, [r3, #0]
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <sevSeg_Init+0x104>)
 8001494:	781a      	ldrb	r2, [r3, #0]
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <sevSeg_Init+0x110>)
 8001498:	0018      	movs	r0, r3
 800149a:	f000 fe08 	bl	80020ae <HAL_GPIO_WritePin>

	//sevSeg_setIntensity(htim, 50);

	//Flash an initializing "Hof" symbol

}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b004      	add	sp, #16
 80014a4:	bdb0      	pop	{r4, r5, r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	20000404 	.word	0x20000404
 80014ac:	20000406 	.word	0x20000406
 80014b0:	20000408 	.word	0x20000408
 80014b4:	2000040a 	.word	0x2000040a
 80014b8:	2000040c 	.word	0x2000040c
 80014bc:	200000e8 	.word	0x200000e8
 80014c0:	200001c4 	.word	0x200001c4
 80014c4:	20000198 	.word	0x20000198
 80014c8:	20000140 	.word	0x20000140
 80014cc:	2000016c 	.word	0x2000016c

080014d0 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {dig3Seg[updateTime->Hours / 10], updateTime->Hours % 10,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	210a      	movs	r1, #10
 80014de:	0018      	movs	r0, r3
 80014e0:	f7fe fe1a 	bl	8000118 <__udivsi3>
 80014e4:	0003      	movs	r3, r0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	001a      	movs	r2, r3
 80014ea:	4b3b      	ldr	r3, [pc, #236]	; (80015d8 <sevSeg_updateDigits+0x108>)
 80014ec:	5c9a      	ldrb	r2, [r3, r2]
 80014ee:	2408      	movs	r4, #8
 80014f0:	193b      	adds	r3, r7, r4
 80014f2:	701a      	strb	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	210a      	movs	r1, #10
 80014fa:	0018      	movs	r0, r3
 80014fc:	f7fe fe92 	bl	8000224 <__aeabi_uidivmod>
 8001500:	000b      	movs	r3, r1
 8001502:	b2da      	uxtb	r2, r3
 8001504:	193b      	adds	r3, r7, r4
 8001506:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {dig3Seg[updateTime->Hours / 10], updateTime->Hours % 10,
 800150c:	210a      	movs	r1, #10
 800150e:	0018      	movs	r0, r3
 8001510:	f7fe fe02 	bl	8000118 <__udivsi3>
 8001514:	0003      	movs	r3, r0
 8001516:	b2da      	uxtb	r2, r3
 8001518:	193b      	adds	r3, r7, r4
 800151a:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {dig3Seg[updateTime->Hours / 10], updateTime->Hours % 10,
 8001520:	210a      	movs	r1, #10
 8001522:	0018      	movs	r0, r3
 8001524:	f7fe fe7e 	bl	8000224 <__aeabi_uidivmod>
 8001528:	000b      	movs	r3, r1
 800152a:	b2da      	uxtb	r2, r3
 800152c:	193b      	adds	r3, r7, r4
 800152e:	70da      	strb	r2, [r3, #3]


	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	e038      	b.n	80015a8 <sevSeg_updateDigits+0xd8>

		sendByte = dispDigits[sendTime[i]];
 8001536:	2308      	movs	r3, #8
 8001538:	18fa      	adds	r2, r7, r3
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	18d3      	adds	r3, r2, r3
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	0019      	movs	r1, r3
 8001542:	2317      	movs	r3, #23
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	4a25      	ldr	r2, [pc, #148]	; (80015dc <sevSeg_updateDigits+0x10c>)
 8001548:	5c52      	ldrb	r2, [r2, r1]
 800154a:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e024      	b.n	800159c <sevSeg_updateDigits+0xcc>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(&portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <sevSeg_updateDigits+0x110>)
 8001554:	8819      	ldrh	r1, [r3, #0]
 8001556:	2417      	movs	r4, #23
 8001558:	193b      	adds	r3, r7, r4
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2201      	movs	r2, #1
 800155e:	4013      	ands	r3, r2
 8001560:	4a20      	ldr	r2, [pc, #128]	; (80015e4 <sevSeg_updateDigits+0x114>)
 8001562:	5cd2      	ldrb	r2, [r2, r3]
 8001564:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <sevSeg_updateDigits+0x118>)
 8001566:	0018      	movs	r0, r3
 8001568:	f000 fda1 	bl	80020ae <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(&portArray[1], shiftDataClock, GPIOPinSet[1]);
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <sevSeg_updateDigits+0x11c>)
 800156e:	8819      	ldrh	r1, [r3, #0]
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <sevSeg_updateDigits+0x114>)
 8001572:	785a      	ldrb	r2, [r3, #1]
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <sevSeg_updateDigits+0x120>)
 8001576:	0018      	movs	r0, r3
 8001578:	f000 fd99 	bl	80020ae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(&portArray[1], shiftDataClock, GPIOPinSet[0]);
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <sevSeg_updateDigits+0x11c>)
 800157e:	8819      	ldrh	r1, [r3, #0]
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <sevSeg_updateDigits+0x114>)
 8001582:	781a      	ldrb	r2, [r3, #0]
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <sevSeg_updateDigits+0x120>)
 8001586:	0018      	movs	r0, r3
 8001588:	f000 fd91 	bl	80020ae <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 800158c:	193b      	adds	r3, r7, r4
 800158e:	193a      	adds	r2, r7, r4
 8001590:	7812      	ldrb	r2, [r2, #0]
 8001592:	0852      	lsrs	r2, r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3301      	adds	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b07      	cmp	r3, #7
 80015a0:	ddd7      	ble.n	8001552 <sevSeg_updateDigits+0x82>
	for(int i = 0; i <= 3; i++) {
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	3301      	adds	r3, #1
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	ddc3      	ble.n	8001536 <sevSeg_updateDigits+0x66>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(&portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <sevSeg_updateDigits+0x124>)
 80015b0:	8819      	ldrh	r1, [r3, #0]
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <sevSeg_updateDigits+0x114>)
 80015b4:	785a      	ldrb	r2, [r3, #1]
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <sevSeg_updateDigits+0x128>)
 80015b8:	0018      	movs	r0, r3
 80015ba:	f000 fd78 	bl	80020ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(&portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80015be:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <sevSeg_updateDigits+0x124>)
 80015c0:	8819      	ldrh	r1, [r3, #0]
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <sevSeg_updateDigits+0x114>)
 80015c4:	781a      	ldrb	r2, [r3, #0]
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <sevSeg_updateDigits+0x128>)
 80015c8:	0018      	movs	r0, r3
 80015ca:	f000 fd70 	bl	80020ae <HAL_GPIO_WritePin>

	return;
 80015ce:	46c0      	nop			; (mov r8, r8)

}
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b007      	add	sp, #28
 80015d4:	bd90      	pop	{r4, r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	0800651c 	.word	0x0800651c
 80015dc:	08006510 	.word	0x08006510
 80015e0:	20000404 	.word	0x20000404
 80015e4:	200001c4 	.word	0x200001c4
 80015e8:	200000e8 	.word	0x200000e8
 80015ec:	20000406 	.word	0x20000406
 80015f0:	20000114 	.word	0x20000114
 80015f4:	20000408 	.word	0x20000408
 80015f8:	20000140 	.word	0x20000140

080015fc <sevSeg_setIntensity>:

void sevSeg_setIntensity(TIM_HandleTypeDef *htim, uint8_t dutyCycle) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	000a      	movs	r2, r1
 8001606:	1cfb      	adds	r3, r7, #3
 8001608:	701a      	strb	r2, [r3, #0]

	//TIM1->CCR2 = dutyCycle * 2;
	//HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);

}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	b002      	add	sp, #8
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <HAL_MspInit+0x54>)
 800161c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_MspInit+0x54>)
 8001620:	2101      	movs	r1, #1
 8001622:	430a      	orrs	r2, r1
 8001624:	641a      	str	r2, [r3, #64]	; 0x40
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_MspInit+0x54>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	2201      	movs	r2, #1
 800162c:	4013      	ands	r3, r2
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_MspInit+0x54>)
 8001634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_MspInit+0x54>)
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	0549      	lsls	r1, r1, #21
 800163c:	430a      	orrs	r2, r1
 800163e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_MspInit+0x54>)
 8001642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	055b      	lsls	r3, r3, #21
 8001648:	4013      	ands	r3, r2
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	2001      	movs	r0, #1
 8001654:	f000 fb78 	bl	8001d48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001658:	2001      	movs	r0, #1
 800165a:	f000 fb8a 	bl	8001d72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	46bd      	mov	sp, r7
 8001662:	b002      	add	sp, #8
 8001664:	bd80      	pop	{r7, pc}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	40021000 	.word	0x40021000

0800166c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b08f      	sub	sp, #60	; 0x3c
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001674:	2410      	movs	r4, #16
 8001676:	193b      	adds	r3, r7, r4
 8001678:	0018      	movs	r0, r3
 800167a:	2328      	movs	r3, #40	; 0x28
 800167c:	001a      	movs	r2, r3
 800167e:	2100      	movs	r1, #0
 8001680:	f003 fd80 	bl	8005184 <memset>
  if(hrtc->Instance==RTC)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a19      	ldr	r2, [pc, #100]	; (80016f0 <HAL_RTC_MspInit+0x84>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d12c      	bne.n	80016e8 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800168e:	193b      	adds	r3, r7, r4
 8001690:	2280      	movs	r2, #128	; 0x80
 8001692:	0292      	lsls	r2, r2, #10
 8001694:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001696:	193b      	adds	r3, r7, r4
 8001698:	2280      	movs	r2, #128	; 0x80
 800169a:	0092      	lsls	r2, r2, #2
 800169c:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800169e:	193b      	adds	r3, r7, r4
 80016a0:	0018      	movs	r0, r3
 80016a2:	f001 fa8f 	bl	8002bc4 <HAL_RCCEx_PeriphCLKConfig>
 80016a6:	1e03      	subs	r3, r0, #0
 80016a8:	d001      	beq.n	80016ae <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80016aa:	f7ff fe81 	bl	80013b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_RTC_MspInit+0x88>)
 80016b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_RTC_MspInit+0x88>)
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	0209      	lsls	r1, r1, #8
 80016b8:	430a      	orrs	r2, r1
 80016ba:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_RTC_MspInit+0x88>)
 80016be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <HAL_RTC_MspInit+0x88>)
 80016c2:	2180      	movs	r1, #128	; 0x80
 80016c4:	00c9      	lsls	r1, r1, #3
 80016c6:	430a      	orrs	r2, r1
 80016c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_RTC_MspInit+0x88>)
 80016cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4013      	ands	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	2002      	movs	r0, #2
 80016de:	f000 fb33 	bl	8001d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80016e2:	2002      	movs	r0, #2
 80016e4:	f000 fb45 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80016e8:	46c0      	nop			; (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b00f      	add	sp, #60	; 0x3c
 80016ee:	bd90      	pop	{r4, r7, pc}
 80016f0:	40002800 	.word	0x40002800
 80016f4:	40021000 	.word	0x40021000

080016f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b08f      	sub	sp, #60	; 0x3c
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001700:	2410      	movs	r4, #16
 8001702:	193b      	adds	r3, r7, r4
 8001704:	0018      	movs	r0, r3
 8001706:	2328      	movs	r3, #40	; 0x28
 8001708:	001a      	movs	r2, r3
 800170a:	2100      	movs	r1, #0
 800170c:	f003 fd3a 	bl	8005184 <memset>
  if(htim_pwm->Instance==TIM1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a11      	ldr	r2, [pc, #68]	; (800175c <HAL_TIM_PWM_MspInit+0x64>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d11c      	bne.n	8001754 <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800171a:	193b      	adds	r3, r7, r4
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	0392      	lsls	r2, r2, #14
 8001720:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001722:	193b      	adds	r3, r7, r4
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001728:	193b      	adds	r3, r7, r4
 800172a:	0018      	movs	r0, r3
 800172c:	f001 fa4a 	bl	8002bc4 <HAL_RCCEx_PeriphCLKConfig>
 8001730:	1e03      	subs	r3, r0, #0
 8001732:	d001      	beq.n	8001738 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8001734:	f7ff fe3c 	bl	80013b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_TIM_PWM_MspInit+0x68>)
 800173a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_TIM_PWM_MspInit+0x68>)
 800173e:	2180      	movs	r1, #128	; 0x80
 8001740:	0109      	lsls	r1, r1, #4
 8001742:	430a      	orrs	r2, r1
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_TIM_PWM_MspInit+0x68>)
 8001748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	4013      	ands	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b00f      	add	sp, #60	; 0x3c
 800175a:	bd90      	pop	{r4, r7, pc}
 800175c:	40012c00 	.word	0x40012c00
 8001760:	40021000 	.word	0x40021000

08001764 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0a      	ldr	r2, [pc, #40]	; (800179c <HAL_TIM_Base_MspInit+0x38>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d10d      	bne.n	8001792 <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_TIM_Base_MspInit+0x3c>)
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	0289      	lsls	r1, r1, #10
 8001780:	430a      	orrs	r2, r1
 8001782:	641a      	str	r2, [r3, #64]	; 0x40
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	029b      	lsls	r3, r3, #10
 800178c:	4013      	ands	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	46bd      	mov	sp, r7
 8001796:	b004      	add	sp, #16
 8001798:	bd80      	pop	{r7, pc}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	40014400 	.word	0x40014400
 80017a0:	40021000 	.word	0x40021000

080017a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	240c      	movs	r4, #12
 80017ae:	193b      	adds	r3, r7, r4
 80017b0:	0018      	movs	r0, r3
 80017b2:	2314      	movs	r3, #20
 80017b4:	001a      	movs	r2, r3
 80017b6:	2100      	movs	r1, #0
 80017b8:	f003 fce4 	bl	8005184 <memset>
  if(htim->Instance==TIM1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a14      	ldr	r2, [pc, #80]	; (8001814 <HAL_TIM_MspPostInit+0x70>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d121      	bne.n	800180a <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <HAL_TIM_MspPostInit+0x74>)
 80017c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <HAL_TIM_MspPostInit+0x74>)
 80017cc:	2102      	movs	r1, #2
 80017ce:	430a      	orrs	r2, r1
 80017d0:	635a      	str	r2, [r3, #52]	; 0x34
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_TIM_MspPostInit+0x74>)
 80017d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d6:	2202      	movs	r2, #2
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Shift_Output_Enable_Pin;
 80017de:	0021      	movs	r1, r4
 80017e0:	187b      	adds	r3, r7, r1
 80017e2:	2208      	movs	r2, #8
 80017e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	187b      	adds	r3, r7, r1
 80017e8:	2202      	movs	r2, #2
 80017ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	187b      	adds	r3, r7, r1
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	187b      	adds	r3, r7, r1
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017f8:	187b      	adds	r3, r7, r1
 80017fa:	2201      	movs	r2, #1
 80017fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Shift_Output_Enable_GPIO_Port, &GPIO_InitStruct);
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	4a06      	ldr	r2, [pc, #24]	; (800181c <HAL_TIM_MspPostInit+0x78>)
 8001802:	0019      	movs	r1, r3
 8001804:	0010      	movs	r0, r2
 8001806:	f000 fad1 	bl	8001dac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	46bd      	mov	sp, r7
 800180e:	b009      	add	sp, #36	; 0x24
 8001810:	bd90      	pop	{r4, r7, pc}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	40012c00 	.word	0x40012c00
 8001818:	40021000 	.word	0x40021000
 800181c:	50000400 	.word	0x50000400

08001820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b08b      	sub	sp, #44	; 0x2c
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	2414      	movs	r4, #20
 800182a:	193b      	adds	r3, r7, r4
 800182c:	0018      	movs	r0, r3
 800182e:	2314      	movs	r3, #20
 8001830:	001a      	movs	r2, r3
 8001832:	2100      	movs	r1, #0
 8001834:	f003 fca6 	bl	8005184 <memset>
  if(huart->Instance==USART2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a1b      	ldr	r2, [pc, #108]	; (80018ac <HAL_UART_MspInit+0x8c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d130      	bne.n	80018a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001842:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <HAL_UART_MspInit+0x90>)
 8001844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <HAL_UART_MspInit+0x90>)
 8001848:	2180      	movs	r1, #128	; 0x80
 800184a:	0289      	lsls	r1, r1, #10
 800184c:	430a      	orrs	r2, r1
 800184e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <HAL_UART_MspInit+0x90>)
 8001852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	029b      	lsls	r3, r3, #10
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_UART_MspInit+0x90>)
 8001860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <HAL_UART_MspInit+0x90>)
 8001864:	2101      	movs	r1, #1
 8001866:	430a      	orrs	r2, r1
 8001868:	635a      	str	r2, [r3, #52]	; 0x34
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_UART_MspInit+0x90>)
 800186c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186e:	2201      	movs	r2, #1
 8001870:	4013      	ands	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001876:	0021      	movs	r1, r4
 8001878:	187b      	adds	r3, r7, r1
 800187a:	220c      	movs	r2, #12
 800187c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	187b      	adds	r3, r7, r1
 8001880:	2202      	movs	r2, #2
 8001882:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001884:	187b      	adds	r3, r7, r1
 8001886:	2201      	movs	r2, #1
 8001888:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	187b      	adds	r3, r7, r1
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001890:	187b      	adds	r3, r7, r1
 8001892:	2201      	movs	r2, #1
 8001894:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	187a      	adds	r2, r7, r1
 8001898:	23a0      	movs	r3, #160	; 0xa0
 800189a:	05db      	lsls	r3, r3, #23
 800189c:	0011      	movs	r1, r2
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 fa84 	bl	8001dac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018a4:	46c0      	nop			; (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b00b      	add	sp, #44	; 0x2c
 80018aa:	bd90      	pop	{r4, r7, pc}
 80018ac:	40004400 	.word	0x40004400
 80018b0:	40021000 	.word	0x40021000

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <NMI_Handler+0x4>

080018ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <HardFault_Handler+0x4>

080018c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018c4:	46c0      	nop			; (mov r8, r8)
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d8:	f000 f96e 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80018e6:	f000 fc73 	bl	80021d0 <HAL_PWREx_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <RTC_TAMP_IRQHandler+0x14>)
 80018f6:	0018      	movs	r0, r3
 80018f8:	f001 ff6a 	bl	80037d0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	20000258 	.word	0x20000258

08001908 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Display_Button_Pin);
 800190c:	2001      	movs	r0, #1
 800190e:	f000 fbeb 	bl	80020e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Set_Button_Pin);
 8001912:	2002      	movs	r0, #2
 8001914:	f000 fbe8 	bl	80020e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_NRST_Pin);
 8001922:	2004      	movs	r0, #4
 8001924:	f000 fbe0 	bl	80020e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001928:	46c0      	nop			; (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Hour_Set_Button_Pin);
 8001932:	2020      	movs	r0, #32
 8001934:	f000 fbd8 	bl	80020e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Enable_Button_Pin);
 8001938:	2040      	movs	r0, #64	; 0x40
 800193a:	f000 fbd5 	bl	80020e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Minute_Set_Button_Pin);
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	015b      	lsls	r3, r3, #5
 8001942:	0018      	movs	r0, r3
 8001944:	f000 fbd0 	bl	80020e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e00a      	b.n	8001976 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001960:	e000      	b.n	8001964 <_read+0x16>
 8001962:	bf00      	nop
 8001964:	0001      	movs	r1, r0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	60ba      	str	r2, [r7, #8]
 800196c:	b2ca      	uxtb	r2, r1
 800196e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	3301      	adds	r3, #1
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	dbf0      	blt.n	8001960 <_read+0x12>
  }

  return len;
 800197e:	687b      	ldr	r3, [r7, #4]
}
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	b006      	add	sp, #24
 8001986:	bd80      	pop	{r7, pc}

08001988 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	e009      	b.n	80019ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	60ba      	str	r2, [r7, #8]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	0018      	movs	r0, r3
 80019a4:	f7fe fd98 	bl	80004d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3301      	adds	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	dbf1      	blt.n	800199a <_write+0x12>
  }
  return len;
 80019b6:	687b      	ldr	r3, [r7, #4]
}
 80019b8:	0018      	movs	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b006      	add	sp, #24
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_close>:

int _close(int file)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019c8:	2301      	movs	r3, #1
 80019ca:	425b      	negs	r3, r3
}
 80019cc:	0018      	movs	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b002      	add	sp, #8
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	0192      	lsls	r2, r2, #6
 80019e4:	605a      	str	r2, [r3, #4]
  return 0;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	0018      	movs	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b002      	add	sp, #8
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_isatty>:

int _isatty(int file)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019f8:	2301      	movs	r3, #1
}
 80019fa:	0018      	movs	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b002      	add	sp, #8
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b004      	add	sp, #16
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a20:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <_sbrk+0x5c>)
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <_sbrk+0x60>)
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <_sbrk+0x64>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <_sbrk+0x68>)
 8001a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	18d3      	adds	r3, r2, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d207      	bcs.n	8001a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a48:	f003 fb72 	bl	8005130 <__errno>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	220c      	movs	r2, #12
 8001a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	425b      	negs	r3, r3
 8001a56:	e009      	b.n	8001a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <_sbrk+0x64>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	18d2      	adds	r2, r2, r3
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <_sbrk+0x64>)
 8001a68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b006      	add	sp, #24
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20002000 	.word	0x20002000
 8001a78:	00000400 	.word	0x00000400
 8001a7c:	20000410 	.word	0x20000410
 8001a80:	20000428 	.word	0x20000428

08001a84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a88:	46c0      	nop			; (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a90:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a94:	f7ff fff6 	bl	8001a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a98:	480c      	ldr	r0, [pc, #48]	; (8001acc <LoopForever+0x6>)
  ldr r1, =_edata
 8001a9a:	490d      	ldr	r1, [pc, #52]	; (8001ad0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ad4 <LoopForever+0xe>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa0:	e002      	b.n	8001aa8 <LoopCopyDataInit>

08001aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa6:	3304      	adds	r3, #4

08001aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aac:	d3f9      	bcc.n	8001aa2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ab0:	4c0a      	ldr	r4, [pc, #40]	; (8001adc <LoopForever+0x16>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab4:	e001      	b.n	8001aba <LoopFillZerobss>

08001ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab8:	3204      	adds	r2, #4

08001aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001abc:	d3fb      	bcc.n	8001ab6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001abe:	f003 fb3d 	bl	800513c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001ac2:	f7fe fd1b 	bl	80004fc <main>

08001ac6 <LoopForever>:

LoopForever:
  b LoopForever
 8001ac6:	e7fe      	b.n	8001ac6 <LoopForever>
  ldr   r0, =_estack
 8001ac8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad0:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8001ad4:	08006694 	.word	0x08006694
  ldr r2, =_sbss
 8001ad8:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8001adc:	20000428 	.word	0x20000428

08001ae0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae0:	e7fe      	b.n	8001ae0 <ADC1_IRQHandler>
	...

08001ae4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aea:	1dfb      	adds	r3, r7, #7
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_Init+0x3c>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_Init+0x3c>)
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	0049      	lsls	r1, r1, #1
 8001afa:	430a      	orrs	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afe:	2000      	movs	r0, #0
 8001b00:	f000 f810 	bl	8001b24 <HAL_InitTick>
 8001b04:	1e03      	subs	r3, r0, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001b08:	1dfb      	adds	r3, r7, #7
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]
 8001b0e:	e001      	b.n	8001b14 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001b10:	f7ff fd80 	bl	8001614 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b14:	1dfb      	adds	r3, r7, #7
 8001b16:	781b      	ldrb	r3, [r3, #0]
}
 8001b18:	0018      	movs	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b002      	add	sp, #8
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40022000 	.word	0x40022000

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_InitTick+0x88>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d02b      	beq.n	8001b94 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001b3c:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <HAL_InitTick+0x8c>)
 8001b3e:	681c      	ldr	r4, [r3, #0]
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <HAL_InitTick+0x88>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	0019      	movs	r1, r3
 8001b46:	23fa      	movs	r3, #250	; 0xfa
 8001b48:	0098      	lsls	r0, r3, #2
 8001b4a:	f7fe fae5 	bl	8000118 <__udivsi3>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	0019      	movs	r1, r3
 8001b52:	0020      	movs	r0, r4
 8001b54:	f7fe fae0 	bl	8000118 <__udivsi3>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f000 f919 	bl	8001d92 <HAL_SYSTICK_Config>
 8001b60:	1e03      	subs	r3, r0, #0
 8001b62:	d112      	bne.n	8001b8a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d80a      	bhi.n	8001b80 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	425b      	negs	r3, r3
 8001b70:	2200      	movs	r2, #0
 8001b72:	0018      	movs	r0, r3
 8001b74:	f000 f8e8 	bl	8001d48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_InitTick+0x90>)
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	e00d      	b.n	8001b9c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001b80:	230f      	movs	r3, #15
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	e008      	b.n	8001b9c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b8a:	230f      	movs	r3, #15
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	2201      	movs	r2, #1
 8001b90:	701a      	strb	r2, [r3, #0]
 8001b92:	e003      	b.n	8001b9c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b94:	230f      	movs	r3, #15
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	781b      	ldrb	r3, [r3, #0]
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b005      	add	sp, #20
 8001ba8:	bd90      	pop	{r4, r7, pc}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	200001d0 	.word	0x200001d0
 8001bb0:	200001c8 	.word	0x200001c8
 8001bb4:	200001cc 	.word	0x200001cc

08001bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_IncTick+0x1c>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	001a      	movs	r2, r3
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	18d2      	adds	r2, r2, r3
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bca:	601a      	str	r2, [r3, #0]
}
 8001bcc:	46c0      	nop			; (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	200001d0 	.word	0x200001d0
 8001bd8:	20000414 	.word	0x20000414

08001bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  return uwTick;
 8001be0:	4b02      	ldr	r3, [pc, #8]	; (8001bec <HAL_GetTick+0x10>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	0018      	movs	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	20000414 	.word	0x20000414

08001bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	1dfb      	adds	r3, r7, #7
 8001bfa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	1dfb      	adds	r3, r7, #7
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b7f      	cmp	r3, #127	; 0x7f
 8001c02:	d809      	bhi.n	8001c18 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c04:	1dfb      	adds	r3, r7, #7
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	001a      	movs	r2, r3
 8001c0a:	231f      	movs	r3, #31
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <__NVIC_EnableIRQ+0x30>)
 8001c10:	2101      	movs	r1, #1
 8001c12:	4091      	lsls	r1, r2
 8001c14:	000a      	movs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001c18:	46c0      	nop			; (mov r8, r8)
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b002      	add	sp, #8
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	1dfb      	adds	r3, r7, #7
 8001c30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c32:	1dfb      	adds	r3, r7, #7
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b7f      	cmp	r3, #127	; 0x7f
 8001c38:	d828      	bhi.n	8001c8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c3a:	4a2f      	ldr	r2, [pc, #188]	; (8001cf8 <__NVIC_SetPriority+0xd4>)
 8001c3c:	1dfb      	adds	r3, r7, #7
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b25b      	sxtb	r3, r3
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	33c0      	adds	r3, #192	; 0xc0
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	589b      	ldr	r3, [r3, r2]
 8001c4a:	1dfa      	adds	r2, r7, #7
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	0011      	movs	r1, r2
 8001c50:	2203      	movs	r2, #3
 8001c52:	400a      	ands	r2, r1
 8001c54:	00d2      	lsls	r2, r2, #3
 8001c56:	21ff      	movs	r1, #255	; 0xff
 8001c58:	4091      	lsls	r1, r2
 8001c5a:	000a      	movs	r2, r1
 8001c5c:	43d2      	mvns	r2, r2
 8001c5e:	401a      	ands	r2, r3
 8001c60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	019b      	lsls	r3, r3, #6
 8001c66:	22ff      	movs	r2, #255	; 0xff
 8001c68:	401a      	ands	r2, r3
 8001c6a:	1dfb      	adds	r3, r7, #7
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	0018      	movs	r0, r3
 8001c70:	2303      	movs	r3, #3
 8001c72:	4003      	ands	r3, r0
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c78:	481f      	ldr	r0, [pc, #124]	; (8001cf8 <__NVIC_SetPriority+0xd4>)
 8001c7a:	1dfb      	adds	r3, r7, #7
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b25b      	sxtb	r3, r3
 8001c80:	089b      	lsrs	r3, r3, #2
 8001c82:	430a      	orrs	r2, r1
 8001c84:	33c0      	adds	r3, #192	; 0xc0
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c8a:	e031      	b.n	8001cf0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c8c:	4a1b      	ldr	r2, [pc, #108]	; (8001cfc <__NVIC_SetPriority+0xd8>)
 8001c8e:	1dfb      	adds	r3, r7, #7
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	0019      	movs	r1, r3
 8001c94:	230f      	movs	r3, #15
 8001c96:	400b      	ands	r3, r1
 8001c98:	3b08      	subs	r3, #8
 8001c9a:	089b      	lsrs	r3, r3, #2
 8001c9c:	3306      	adds	r3, #6
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	18d3      	adds	r3, r2, r3
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	1dfa      	adds	r2, r7, #7
 8001ca8:	7812      	ldrb	r2, [r2, #0]
 8001caa:	0011      	movs	r1, r2
 8001cac:	2203      	movs	r2, #3
 8001cae:	400a      	ands	r2, r1
 8001cb0:	00d2      	lsls	r2, r2, #3
 8001cb2:	21ff      	movs	r1, #255	; 0xff
 8001cb4:	4091      	lsls	r1, r2
 8001cb6:	000a      	movs	r2, r1
 8001cb8:	43d2      	mvns	r2, r2
 8001cba:	401a      	ands	r2, r3
 8001cbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	019b      	lsls	r3, r3, #6
 8001cc2:	22ff      	movs	r2, #255	; 0xff
 8001cc4:	401a      	ands	r2, r3
 8001cc6:	1dfb      	adds	r3, r7, #7
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	0018      	movs	r0, r3
 8001ccc:	2303      	movs	r3, #3
 8001cce:	4003      	ands	r3, r0
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cd4:	4809      	ldr	r0, [pc, #36]	; (8001cfc <__NVIC_SetPriority+0xd8>)
 8001cd6:	1dfb      	adds	r3, r7, #7
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	001c      	movs	r4, r3
 8001cdc:	230f      	movs	r3, #15
 8001cde:	4023      	ands	r3, r4
 8001ce0:	3b08      	subs	r3, #8
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	3306      	adds	r3, #6
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	18c3      	adds	r3, r0, r3
 8001cec:	3304      	adds	r3, #4
 8001cee:	601a      	str	r2, [r3, #0]
}
 8001cf0:	46c0      	nop			; (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b003      	add	sp, #12
 8001cf6:	bd90      	pop	{r4, r7, pc}
 8001cf8:	e000e100 	.word	0xe000e100
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	1e5a      	subs	r2, r3, #1
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	045b      	lsls	r3, r3, #17
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d301      	bcc.n	8001d18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d14:	2301      	movs	r3, #1
 8001d16:	e010      	b.n	8001d3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <SysTick_Config+0x44>)
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	3a01      	subs	r2, #1
 8001d1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d20:	2301      	movs	r3, #1
 8001d22:	425b      	negs	r3, r3
 8001d24:	2103      	movs	r1, #3
 8001d26:	0018      	movs	r0, r3
 8001d28:	f7ff ff7c 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <SysTick_Config+0x44>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <SysTick_Config+0x44>)
 8001d34:	2207      	movs	r2, #7
 8001d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b002      	add	sp, #8
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	e000e010 	.word	0xe000e010

08001d48 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	210f      	movs	r1, #15
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	1c02      	adds	r2, r0, #0
 8001d58:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	b25b      	sxtb	r3, r3
 8001d62:	0011      	movs	r1, r2
 8001d64:	0018      	movs	r0, r3
 8001d66:	f7ff ff5d 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b004      	add	sp, #16
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	0002      	movs	r2, r0
 8001d7a:	1dfb      	adds	r3, r7, #7
 8001d7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7e:	1dfb      	adds	r3, r7, #7
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	b25b      	sxtb	r3, r3
 8001d84:	0018      	movs	r0, r3
 8001d86:	f7ff ff33 	bl	8001bf0 <__NVIC_EnableIRQ>
}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b002      	add	sp, #8
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f7ff ffaf 	bl	8001d00 <SysTick_Config>
 8001da2:	0003      	movs	r3, r0
}
 8001da4:	0018      	movs	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b002      	add	sp, #8
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dba:	e147      	b.n	800204c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4091      	lsls	r1, r2
 8001dc6:	000a      	movs	r2, r1
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d100      	bne.n	8001dd4 <HAL_GPIO_Init+0x28>
 8001dd2:	e138      	b.n	8002046 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2203      	movs	r2, #3
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d005      	beq.n	8001dec <HAL_GPIO_Init+0x40>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2203      	movs	r2, #3
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d130      	bne.n	8001e4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	0013      	movs	r3, r2
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	0013      	movs	r3, r2
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e22:	2201      	movs	r2, #1
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
 8001e28:	0013      	movs	r3, r2
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	2201      	movs	r2, #1
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	0013      	movs	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2203      	movs	r2, #3
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d017      	beq.n	8001e8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	2203      	movs	r2, #3
 8001e66:	409a      	lsls	r2, r3
 8001e68:	0013      	movs	r3, r2
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	0013      	movs	r3, r2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2203      	movs	r2, #3
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d123      	bne.n	8001ede <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	08da      	lsrs	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3208      	adds	r2, #8
 8001e9e:	0092      	lsls	r2, r2, #2
 8001ea0:	58d3      	ldr	r3, [r2, r3]
 8001ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	220f      	movs	r2, #15
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	0013      	movs	r3, r2
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2107      	movs	r1, #7
 8001ec2:	400b      	ands	r3, r1
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	0013      	movs	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	08da      	lsrs	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3208      	adds	r2, #8
 8001ed8:	0092      	lsls	r2, r2, #2
 8001eda:	6939      	ldr	r1, [r7, #16]
 8001edc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	2203      	movs	r2, #3
 8001eea:	409a      	lsls	r2, r3
 8001eec:	0013      	movs	r3, r2
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2203      	movs	r2, #3
 8001efc:	401a      	ands	r2, r3
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	409a      	lsls	r2, r3
 8001f04:	0013      	movs	r3, r2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	23c0      	movs	r3, #192	; 0xc0
 8001f18:	029b      	lsls	r3, r3, #10
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d100      	bne.n	8001f20 <HAL_GPIO_Init+0x174>
 8001f1e:	e092      	b.n	8002046 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001f20:	4a50      	ldr	r2, [pc, #320]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	3318      	adds	r3, #24
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	589b      	ldr	r3, [r3, r2]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2203      	movs	r2, #3
 8001f32:	4013      	ands	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	220f      	movs	r2, #15
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	0013      	movs	r3, r2
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	23a0      	movs	r3, #160	; 0xa0
 8001f48:	05db      	lsls	r3, r3, #23
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0x1ca>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a45      	ldr	r2, [pc, #276]	; (8002068 <HAL_GPIO_Init+0x2bc>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00d      	beq.n	8001f72 <HAL_GPIO_Init+0x1c6>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a44      	ldr	r2, [pc, #272]	; (800206c <HAL_GPIO_Init+0x2c0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <HAL_GPIO_Init+0x1c2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a43      	ldr	r2, [pc, #268]	; (8002070 <HAL_GPIO_Init+0x2c4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_GPIO_Init+0x1be>
 8001f66:	2303      	movs	r3, #3
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x1cc>
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	e004      	b.n	8001f78 <HAL_GPIO_Init+0x1cc>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e002      	b.n	8001f78 <HAL_GPIO_Init+0x1cc>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_GPIO_Init+0x1cc>
 8001f76:	2300      	movs	r3, #0
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	2103      	movs	r1, #3
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	00d2      	lsls	r2, r2, #3
 8001f80:	4093      	lsls	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001f88:	4936      	ldr	r1, [pc, #216]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3318      	adds	r3, #24
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f96:	4b33      	ldr	r3, [pc, #204]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	035b      	lsls	r3, r3, #13
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fba:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001fc0:	4b28      	ldr	r3, [pc, #160]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	43da      	mvns	r2, r3
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	039b      	lsls	r3, r3, #14
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fea:	4a1e      	ldr	r2, [pc, #120]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001fec:	2384      	movs	r3, #132	; 0x84
 8001fee:	58d3      	ldr	r3, [r2, r3]
 8001ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	43da      	mvns	r2, r3
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	029b      	lsls	r3, r3, #10
 8002004:	4013      	ands	r3, r2
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002010:	4914      	ldr	r1, [pc, #80]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8002012:	2284      	movs	r2, #132	; 0x84
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002018:	4a12      	ldr	r2, [pc, #72]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	58d3      	ldr	r3, [r2, r3]
 800201e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	43da      	mvns	r2, r3
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	025b      	lsls	r3, r3, #9
 8002032:	4013      	ands	r3, r2
 8002034:	d003      	beq.n	800203e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800203e:	4909      	ldr	r1, [pc, #36]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8002040:	2280      	movs	r2, #128	; 0x80
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	3301      	adds	r3, #1
 800204a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	40da      	lsrs	r2, r3
 8002054:	1e13      	subs	r3, r2, #0
 8002056:	d000      	beq.n	800205a <HAL_GPIO_Init+0x2ae>
 8002058:	e6b0      	b.n	8001dbc <HAL_GPIO_Init+0x10>
  }
}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b006      	add	sp, #24
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021800 	.word	0x40021800
 8002068:	50000400 	.word	0x50000400
 800206c:	50000800 	.word	0x50000800
 8002070:	50000c00 	.word	0x50000c00

08002074 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	000a      	movs	r2, r1
 800207e:	1cbb      	adds	r3, r7, #2
 8002080:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	1cba      	adds	r2, r7, #2
 8002088:	8812      	ldrh	r2, [r2, #0]
 800208a:	4013      	ands	r3, r2
 800208c:	d004      	beq.n	8002098 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800208e:	230f      	movs	r3, #15
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
 8002096:	e003      	b.n	80020a0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002098:	230f      	movs	r3, #15
 800209a:	18fb      	adds	r3, r7, r3
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80020a0:	230f      	movs	r3, #15
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	781b      	ldrb	r3, [r3, #0]
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b004      	add	sp, #16
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	0008      	movs	r0, r1
 80020b8:	0011      	movs	r1, r2
 80020ba:	1cbb      	adds	r3, r7, #2
 80020bc:	1c02      	adds	r2, r0, #0
 80020be:	801a      	strh	r2, [r3, #0]
 80020c0:	1c7b      	adds	r3, r7, #1
 80020c2:	1c0a      	adds	r2, r1, #0
 80020c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c6:	1c7b      	adds	r3, r7, #1
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ce:	1cbb      	adds	r3, r7, #2
 80020d0:	881a      	ldrh	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020d6:	e003      	b.n	80020e0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020d8:	1cbb      	adds	r3, r7, #2
 80020da:	881a      	ldrh	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020e0:	46c0      	nop			; (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b002      	add	sp, #8
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	0002      	movs	r2, r0
 80020f0:	1dbb      	adds	r3, r7, #6
 80020f2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80020f4:	4b10      	ldr	r3, [pc, #64]	; (8002138 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	1dba      	adds	r2, r7, #6
 80020fa:	8812      	ldrh	r2, [r2, #0]
 80020fc:	4013      	ands	r3, r2
 80020fe:	d008      	beq.n	8002112 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002102:	1dba      	adds	r2, r7, #6
 8002104:	8812      	ldrh	r2, [r2, #0]
 8002106:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002108:	1dbb      	adds	r3, r7, #6
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	0018      	movs	r0, r3
 800210e:	f000 f815 	bl	800213c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	1dba      	adds	r2, r7, #6
 8002118:	8812      	ldrh	r2, [r2, #0]
 800211a:	4013      	ands	r3, r2
 800211c:	d008      	beq.n	8002130 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002120:	1dba      	adds	r2, r7, #6
 8002122:	8812      	ldrh	r2, [r2, #0]
 8002124:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002126:	1dbb      	adds	r3, r7, #6
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	0018      	movs	r0, r3
 800212c:	f7fe fe0a 	bl	8000d44 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002130:	46c0      	nop			; (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	b002      	add	sp, #8
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021800 	.word	0x40021800

0800213c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	0002      	movs	r2, r0
 8002144:	1dbb      	adds	r3, r7, #6
 8002146:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	46bd      	mov	sp, r7
 800214c:	b002      	add	sp, #8
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800215e:	4013      	ands	r3, r2
 8002160:	0019      	movs	r1, r3
 8002162:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	430a      	orrs	r2, r1
 8002168:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	429a      	cmp	r2, r3
 8002172:	d11f      	bne.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002174:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	0013      	movs	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	189b      	adds	r3, r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	4912      	ldr	r1, [pc, #72]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002182:	0018      	movs	r0, r3
 8002184:	f7fd ffc8 	bl	8000118 <__udivsi3>
 8002188:	0003      	movs	r3, r0
 800218a:	3301      	adds	r3, #1
 800218c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800218e:	e008      	b.n	80021a2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3b01      	subs	r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	e001      	b.n	80021a2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e009      	b.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	401a      	ands	r2, r3
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d0ed      	beq.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	0018      	movs	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b004      	add	sp, #16
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	40007000 	.word	0x40007000
 80021c4:	fffff9ff 	.word	0xfffff9ff
 80021c8:	200001c8 	.word	0x200001c8
 80021cc:	000f4240 	.word	0x000f4240

080021d0 <HAL_PWREx_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Check PWR exti Rising flag */
  if (__HAL_PWR_PVD_EXTI_GET_RISING_FLAG() != 0x0U)
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	025b      	lsls	r3, r3, #9
 80021dc:	4013      	ands	r3, r2
 80021de:	d005      	beq.n	80021ec <HAL_PWREx_PVD_IRQHandler+0x1c>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_RISING_FLAG();
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80021e2:	2280      	movs	r2, #128	; 0x80
 80021e4:	0252      	lsls	r2, r2, #9
 80021e6:	60da      	str	r2, [r3, #12]

    /* PWR PVD interrupt rising user callback */
    HAL_PWREx_PVD_Rising_Callback();
 80021e8:	f000 f812 	bl	8002210 <HAL_PWREx_PVD_Rising_Callback>
  }

  /* Check PWR exti fallling flag */
  if (__HAL_PWR_PVD_EXTI_GET_FALLING_FLAG() != 0x0U)
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	025b      	lsls	r3, r3, #9
 80021f4:	4013      	ands	r3, r2
 80021f6:	d005      	beq.n	8002204 <HAL_PWREx_PVD_IRQHandler+0x34>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FALLING_FLAG();
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <HAL_PWREx_PVD_IRQHandler+0x3c>)
 80021fa:	2280      	movs	r2, #128	; 0x80
 80021fc:	0252      	lsls	r2, r2, #9
 80021fe:	611a      	str	r2, [r3, #16]

    /* PWR PVD interrupt falling user callback */
    HAL_PWREx_PVD_Falling_Callback();
 8002200:	f000 f80b 	bl	800221a <HAL_PWREx_PVD_Falling_Callback>
  }
}
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	40021800 	.word	0x40021800

08002210 <HAL_PWREx_PVD_Rising_Callback>:
/**
  * @brief  PWR PVD interrupt rising callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Rising_Callback(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Rising_Callback can be implemented in the user file
  */
}
 8002214:	46c0      	nop			; (mov r8, r8)
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_PWREx_PVD_Falling_Callback>:
/**
  * @brief  PWR PVD interrupt Falling callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Falling_Callback(void)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Falling_Callback can be implemented in the user file
  */
}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <LL_RCC_GetAPB1Prescaler+0x14>)
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	23e0      	movs	r3, #224	; 0xe0
 800222e:	01db      	lsls	r3, r3, #7
 8002230:	4013      	ands	r3, r2
}
 8002232:	0018      	movs	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000

0800223c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e2fe      	b.n	800284c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2201      	movs	r2, #1
 8002254:	4013      	ands	r3, r2
 8002256:	d100      	bne.n	800225a <HAL_RCC_OscConfig+0x1e>
 8002258:	e07c      	b.n	8002354 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225a:	4bc3      	ldr	r3, [pc, #780]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2238      	movs	r2, #56	; 0x38
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002264:	4bc0      	ldr	r3, [pc, #768]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2203      	movs	r2, #3
 800226a:	4013      	ands	r3, r2
 800226c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	2b10      	cmp	r3, #16
 8002272:	d102      	bne.n	800227a <HAL_RCC_OscConfig+0x3e>
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d002      	beq.n	8002280 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	2b08      	cmp	r3, #8
 800227e:	d10b      	bne.n	8002298 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002280:	4bb9      	ldr	r3, [pc, #740]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	029b      	lsls	r3, r3, #10
 8002288:	4013      	ands	r3, r2
 800228a:	d062      	beq.n	8002352 <HAL_RCC_OscConfig+0x116>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d15e      	bne.n	8002352 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e2d9      	b.n	800284c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	025b      	lsls	r3, r3, #9
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_OscConfig+0x78>
 80022a4:	4bb0      	ldr	r3, [pc, #704]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4baf      	ldr	r3, [pc, #700]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80022aa:	2180      	movs	r1, #128	; 0x80
 80022ac:	0249      	lsls	r1, r1, #9
 80022ae:	430a      	orrs	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e020      	b.n	80022f6 <HAL_RCC_OscConfig+0xba>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	23a0      	movs	r3, #160	; 0xa0
 80022ba:	02db      	lsls	r3, r3, #11
 80022bc:	429a      	cmp	r2, r3
 80022be:	d10e      	bne.n	80022de <HAL_RCC_OscConfig+0xa2>
 80022c0:	4ba9      	ldr	r3, [pc, #676]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4ba8      	ldr	r3, [pc, #672]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	02c9      	lsls	r1, r1, #11
 80022ca:	430a      	orrs	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	4ba6      	ldr	r3, [pc, #664]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4ba5      	ldr	r3, [pc, #660]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80022d4:	2180      	movs	r1, #128	; 0x80
 80022d6:	0249      	lsls	r1, r1, #9
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e00b      	b.n	80022f6 <HAL_RCC_OscConfig+0xba>
 80022de:	4ba2      	ldr	r3, [pc, #648]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4ba1      	ldr	r3, [pc, #644]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80022e4:	49a1      	ldr	r1, [pc, #644]	; (800256c <HAL_RCC_OscConfig+0x330>)
 80022e6:	400a      	ands	r2, r1
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	4b9f      	ldr	r3, [pc, #636]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	4b9e      	ldr	r3, [pc, #632]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80022f0:	499f      	ldr	r1, [pc, #636]	; (8002570 <HAL_RCC_OscConfig+0x334>)
 80022f2:	400a      	ands	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d014      	beq.n	8002328 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fe:	f7ff fc6d 	bl	8001bdc <HAL_GetTick>
 8002302:	0003      	movs	r3, r0
 8002304:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002308:	f7ff fc68 	bl	8001bdc <HAL_GetTick>
 800230c:	0002      	movs	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e298      	b.n	800284c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800231a:	4b93      	ldr	r3, [pc, #588]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	029b      	lsls	r3, r3, #10
 8002322:	4013      	ands	r3, r2
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0xcc>
 8002326:	e015      	b.n	8002354 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7ff fc58 	bl	8001bdc <HAL_GetTick>
 800232c:	0003      	movs	r3, r0
 800232e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002332:	f7ff fc53 	bl	8001bdc <HAL_GetTick>
 8002336:	0002      	movs	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b64      	cmp	r3, #100	; 0x64
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e283      	b.n	800284c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002344:	4b88      	ldr	r3, [pc, #544]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	029b      	lsls	r3, r3, #10
 800234c:	4013      	ands	r3, r2
 800234e:	d1f0      	bne.n	8002332 <HAL_RCC_OscConfig+0xf6>
 8002350:	e000      	b.n	8002354 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002352:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2202      	movs	r2, #2
 800235a:	4013      	ands	r3, r2
 800235c:	d100      	bne.n	8002360 <HAL_RCC_OscConfig+0x124>
 800235e:	e099      	b.n	8002494 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002360:	4b81      	ldr	r3, [pc, #516]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2238      	movs	r2, #56	; 0x38
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800236a:	4b7f      	ldr	r3, [pc, #508]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2203      	movs	r2, #3
 8002370:	4013      	ands	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	2b10      	cmp	r3, #16
 8002378:	d102      	bne.n	8002380 <HAL_RCC_OscConfig+0x144>
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d002      	beq.n	8002386 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d135      	bne.n	80023f2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002386:	4b78      	ldr	r3, [pc, #480]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4013      	ands	r3, r2
 8002390:	d005      	beq.n	800239e <HAL_RCC_OscConfig+0x162>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e256      	b.n	800284c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239e:	4b72      	ldr	r3, [pc, #456]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4a74      	ldr	r2, [pc, #464]	; (8002574 <HAL_RCC_OscConfig+0x338>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	0019      	movs	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	021a      	lsls	r2, r3, #8
 80023ae:	4b6e      	ldr	r3, [pc, #440]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80023b0:	430a      	orrs	r2, r1
 80023b2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d112      	bne.n	80023e0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023ba:	4b6b      	ldr	r3, [pc, #428]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a6e      	ldr	r2, [pc, #440]	; (8002578 <HAL_RCC_OscConfig+0x33c>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	0019      	movs	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	4b67      	ldr	r3, [pc, #412]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80023ca:	430a      	orrs	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80023ce:	4b66      	ldr	r3, [pc, #408]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	0adb      	lsrs	r3, r3, #11
 80023d4:	2207      	movs	r2, #7
 80023d6:	4013      	ands	r3, r2
 80023d8:	4a68      	ldr	r2, [pc, #416]	; (800257c <HAL_RCC_OscConfig+0x340>)
 80023da:	40da      	lsrs	r2, r3
 80023dc:	4b68      	ldr	r3, [pc, #416]	; (8002580 <HAL_RCC_OscConfig+0x344>)
 80023de:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023e0:	4b68      	ldr	r3, [pc, #416]	; (8002584 <HAL_RCC_OscConfig+0x348>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7ff fb9d 	bl	8001b24 <HAL_InitTick>
 80023ea:	1e03      	subs	r3, r0, #0
 80023ec:	d051      	beq.n	8002492 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e22c      	b.n	800284c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d030      	beq.n	800245c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023fa:	4b5b      	ldr	r3, [pc, #364]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a5e      	ldr	r2, [pc, #376]	; (8002578 <HAL_RCC_OscConfig+0x33c>)
 8002400:	4013      	ands	r3, r2
 8002402:	0019      	movs	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	4b57      	ldr	r3, [pc, #348]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 800240a:	430a      	orrs	r2, r1
 800240c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800240e:	4b56      	ldr	r3, [pc, #344]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	4b55      	ldr	r3, [pc, #340]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	0049      	lsls	r1, r1, #1
 8002418:	430a      	orrs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7ff fbde 	bl	8001bdc <HAL_GetTick>
 8002420:	0003      	movs	r3, r0
 8002422:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002426:	f7ff fbd9 	bl	8001bdc <HAL_GetTick>
 800242a:	0002      	movs	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e209      	b.n	800284c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002438:	4b4b      	ldr	r3, [pc, #300]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4013      	ands	r3, r2
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002444:	4b48      	ldr	r3, [pc, #288]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4a4a      	ldr	r2, [pc, #296]	; (8002574 <HAL_RCC_OscConfig+0x338>)
 800244a:	4013      	ands	r3, r2
 800244c:	0019      	movs	r1, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	021a      	lsls	r2, r3, #8
 8002454:	4b44      	ldr	r3, [pc, #272]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	e01b      	b.n	8002494 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800245c:	4b42      	ldr	r3, [pc, #264]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b41      	ldr	r3, [pc, #260]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 8002462:	4949      	ldr	r1, [pc, #292]	; (8002588 <HAL_RCC_OscConfig+0x34c>)
 8002464:	400a      	ands	r2, r1
 8002466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7ff fbb8 	bl	8001bdc <HAL_GetTick>
 800246c:	0003      	movs	r3, r0
 800246e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002472:	f7ff fbb3 	bl	8001bdc <HAL_GetTick>
 8002476:	0002      	movs	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e1e3      	b.n	800284c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002484:	4b38      	ldr	r3, [pc, #224]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4013      	ands	r3, r2
 800248e:	d1f0      	bne.n	8002472 <HAL_RCC_OscConfig+0x236>
 8002490:	e000      	b.n	8002494 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002492:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2208      	movs	r2, #8
 800249a:	4013      	ands	r3, r2
 800249c:	d047      	beq.n	800252e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800249e:	4b32      	ldr	r3, [pc, #200]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2238      	movs	r2, #56	; 0x38
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b18      	cmp	r3, #24
 80024a8:	d10a      	bne.n	80024c0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80024aa:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80024ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ae:	2202      	movs	r2, #2
 80024b0:	4013      	ands	r3, r2
 80024b2:	d03c      	beq.n	800252e <HAL_RCC_OscConfig+0x2f2>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d138      	bne.n	800252e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e1c5      	b.n	800284c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d019      	beq.n	80024fc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80024c8:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80024ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024cc:	4b26      	ldr	r3, [pc, #152]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80024ce:	2101      	movs	r1, #1
 80024d0:	430a      	orrs	r2, r1
 80024d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7ff fb82 	bl	8001bdc <HAL_GetTick>
 80024d8:	0003      	movs	r3, r0
 80024da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024de:	f7ff fb7d 	bl	8001bdc <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e1ad      	b.n	800284c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024f0:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80024f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f4:	2202      	movs	r2, #2
 80024f6:	4013      	ands	r3, r2
 80024f8:	d0f1      	beq.n	80024de <HAL_RCC_OscConfig+0x2a2>
 80024fa:	e018      	b.n	800252e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80024fc:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 80024fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 8002502:	2101      	movs	r1, #1
 8002504:	438a      	bics	r2, r1
 8002506:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7ff fb68 	bl	8001bdc <HAL_GetTick>
 800250c:	0003      	movs	r3, r0
 800250e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002512:	f7ff fb63 	bl	8001bdc <HAL_GetTick>
 8002516:	0002      	movs	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e193      	b.n	800284c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002524:	4b10      	ldr	r3, [pc, #64]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 8002526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002528:	2202      	movs	r2, #2
 800252a:	4013      	ands	r3, r2
 800252c:	d1f1      	bne.n	8002512 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2204      	movs	r2, #4
 8002534:	4013      	ands	r3, r2
 8002536:	d100      	bne.n	800253a <HAL_RCC_OscConfig+0x2fe>
 8002538:	e0c6      	b.n	80026c8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253a:	231f      	movs	r3, #31
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2238      	movs	r2, #56	; 0x38
 8002548:	4013      	ands	r3, r2
 800254a:	2b20      	cmp	r3, #32
 800254c:	d11e      	bne.n	800258c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_RCC_OscConfig+0x32c>)
 8002550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002552:	2202      	movs	r2, #2
 8002554:	4013      	ands	r3, r2
 8002556:	d100      	bne.n	800255a <HAL_RCC_OscConfig+0x31e>
 8002558:	e0b6      	b.n	80026c8 <HAL_RCC_OscConfig+0x48c>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d000      	beq.n	8002564 <HAL_RCC_OscConfig+0x328>
 8002562:	e0b1      	b.n	80026c8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e171      	b.n	800284c <HAL_RCC_OscConfig+0x610>
 8002568:	40021000 	.word	0x40021000
 800256c:	fffeffff 	.word	0xfffeffff
 8002570:	fffbffff 	.word	0xfffbffff
 8002574:	ffff80ff 	.word	0xffff80ff
 8002578:	ffffc7ff 	.word	0xffffc7ff
 800257c:	00f42400 	.word	0x00f42400
 8002580:	200001c8 	.word	0x200001c8
 8002584:	200001cc 	.word	0x200001cc
 8002588:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800258c:	4bb1      	ldr	r3, [pc, #708]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 800258e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	055b      	lsls	r3, r3, #21
 8002594:	4013      	ands	r3, r2
 8002596:	d101      	bne.n	800259c <HAL_RCC_OscConfig+0x360>
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x362>
 800259c:	2300      	movs	r3, #0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d011      	beq.n	80025c6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	4bac      	ldr	r3, [pc, #688]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 80025a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025a6:	4bab      	ldr	r3, [pc, #684]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 80025a8:	2180      	movs	r1, #128	; 0x80
 80025aa:	0549      	lsls	r1, r1, #21
 80025ac:	430a      	orrs	r2, r1
 80025ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80025b0:	4ba8      	ldr	r3, [pc, #672]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 80025b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	055b      	lsls	r3, r3, #21
 80025b8:	4013      	ands	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80025be:	231f      	movs	r3, #31
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c6:	4ba4      	ldr	r3, [pc, #656]	; (8002858 <HAL_RCC_OscConfig+0x61c>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4013      	ands	r3, r2
 80025d0:	d11a      	bne.n	8002608 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d2:	4ba1      	ldr	r3, [pc, #644]	; (8002858 <HAL_RCC_OscConfig+0x61c>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4ba0      	ldr	r3, [pc, #640]	; (8002858 <HAL_RCC_OscConfig+0x61c>)
 80025d8:	2180      	movs	r1, #128	; 0x80
 80025da:	0049      	lsls	r1, r1, #1
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80025e0:	f7ff fafc 	bl	8001bdc <HAL_GetTick>
 80025e4:	0003      	movs	r3, r0
 80025e6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ea:	f7ff faf7 	bl	8001bdc <HAL_GetTick>
 80025ee:	0002      	movs	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e127      	b.n	800284c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025fc:	4b96      	ldr	r3, [pc, #600]	; (8002858 <HAL_RCC_OscConfig+0x61c>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4013      	ands	r3, r2
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x3e2>
 8002610:	4b90      	ldr	r3, [pc, #576]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 8002612:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002614:	4b8f      	ldr	r3, [pc, #572]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 8002616:	2101      	movs	r1, #1
 8002618:	430a      	orrs	r2, r1
 800261a:	65da      	str	r2, [r3, #92]	; 0x5c
 800261c:	e01c      	b.n	8002658 <HAL_RCC_OscConfig+0x41c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b05      	cmp	r3, #5
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x404>
 8002626:	4b8b      	ldr	r3, [pc, #556]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 8002628:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800262a:	4b8a      	ldr	r3, [pc, #552]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 800262c:	2104      	movs	r1, #4
 800262e:	430a      	orrs	r2, r1
 8002630:	65da      	str	r2, [r3, #92]	; 0x5c
 8002632:	4b88      	ldr	r3, [pc, #544]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 8002634:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002636:	4b87      	ldr	r3, [pc, #540]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 8002638:	2101      	movs	r1, #1
 800263a:	430a      	orrs	r2, r1
 800263c:	65da      	str	r2, [r3, #92]	; 0x5c
 800263e:	e00b      	b.n	8002658 <HAL_RCC_OscConfig+0x41c>
 8002640:	4b84      	ldr	r3, [pc, #528]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 8002642:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002644:	4b83      	ldr	r3, [pc, #524]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 8002646:	2101      	movs	r1, #1
 8002648:	438a      	bics	r2, r1
 800264a:	65da      	str	r2, [r3, #92]	; 0x5c
 800264c:	4b81      	ldr	r3, [pc, #516]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 800264e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002650:	4b80      	ldr	r3, [pc, #512]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 8002652:	2104      	movs	r1, #4
 8002654:	438a      	bics	r2, r1
 8002656:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d014      	beq.n	800268a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7ff fabc 	bl	8001bdc <HAL_GetTick>
 8002664:	0003      	movs	r3, r0
 8002666:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002668:	e009      	b.n	800267e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7ff fab7 	bl	8001bdc <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	4a79      	ldr	r2, [pc, #484]	; (800285c <HAL_RCC_OscConfig+0x620>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e0e6      	b.n	800284c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800267e:	4b75      	ldr	r3, [pc, #468]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 8002680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002682:	2202      	movs	r2, #2
 8002684:	4013      	ands	r3, r2
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x42e>
 8002688:	e013      	b.n	80026b2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268a:	f7ff faa7 	bl	8001bdc <HAL_GetTick>
 800268e:	0003      	movs	r3, r0
 8002690:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002692:	e009      	b.n	80026a8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002694:	f7ff faa2 	bl	8001bdc <HAL_GetTick>
 8002698:	0002      	movs	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	4a6f      	ldr	r2, [pc, #444]	; (800285c <HAL_RCC_OscConfig+0x620>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e0d1      	b.n	800284c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026a8:	4b6a      	ldr	r3, [pc, #424]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 80026aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ac:	2202      	movs	r2, #2
 80026ae:	4013      	ands	r3, r2
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80026b2:	231f      	movs	r3, #31
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d105      	bne.n	80026c8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80026bc:	4b65      	ldr	r3, [pc, #404]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 80026be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026c0:	4b64      	ldr	r3, [pc, #400]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 80026c2:	4967      	ldr	r1, [pc, #412]	; (8002860 <HAL_RCC_OscConfig+0x624>)
 80026c4:	400a      	ands	r2, r1
 80026c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d100      	bne.n	80026d2 <HAL_RCC_OscConfig+0x496>
 80026d0:	e0bb      	b.n	800284a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d2:	4b60      	ldr	r3, [pc, #384]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2238      	movs	r2, #56	; 0x38
 80026d8:	4013      	ands	r3, r2
 80026da:	2b10      	cmp	r3, #16
 80026dc:	d100      	bne.n	80026e0 <HAL_RCC_OscConfig+0x4a4>
 80026de:	e07b      	b.n	80027d8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d156      	bne.n	8002796 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e8:	4b5a      	ldr	r3, [pc, #360]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b59      	ldr	r3, [pc, #356]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 80026ee:	495d      	ldr	r1, [pc, #372]	; (8002864 <HAL_RCC_OscConfig+0x628>)
 80026f0:	400a      	ands	r2, r1
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7ff fa72 	bl	8001bdc <HAL_GetTick>
 80026f8:	0003      	movs	r3, r0
 80026fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fe:	f7ff fa6d 	bl	8001bdc <HAL_GetTick>
 8002702:	0002      	movs	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e09d      	b.n	800284c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002710:	4b50      	ldr	r3, [pc, #320]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	049b      	lsls	r3, r3, #18
 8002718:	4013      	ands	r3, r2
 800271a:	d1f0      	bne.n	80026fe <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800271c:	4b4d      	ldr	r3, [pc, #308]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4a51      	ldr	r2, [pc, #324]	; (8002868 <HAL_RCC_OscConfig+0x62c>)
 8002722:	4013      	ands	r3, r2
 8002724:	0019      	movs	r1, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1a      	ldr	r2, [r3, #32]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002748:	431a      	orrs	r2, r3
 800274a:	4b42      	ldr	r3, [pc, #264]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 800274c:	430a      	orrs	r2, r1
 800274e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002750:	4b40      	ldr	r3, [pc, #256]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b3f      	ldr	r3, [pc, #252]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 8002756:	2180      	movs	r1, #128	; 0x80
 8002758:	0449      	lsls	r1, r1, #17
 800275a:	430a      	orrs	r2, r1
 800275c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	4b3c      	ldr	r3, [pc, #240]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 8002764:	2180      	movs	r1, #128	; 0x80
 8002766:	0549      	lsls	r1, r1, #21
 8002768:	430a      	orrs	r2, r1
 800276a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7ff fa36 	bl	8001bdc <HAL_GetTick>
 8002770:	0003      	movs	r3, r0
 8002772:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002776:	f7ff fa31 	bl	8001bdc <HAL_GetTick>
 800277a:	0002      	movs	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e061      	b.n	800284c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002788:	4b32      	ldr	r3, [pc, #200]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	049b      	lsls	r3, r3, #18
 8002790:	4013      	ands	r3, r2
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x53a>
 8002794:	e059      	b.n	800284a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002796:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	4b2e      	ldr	r3, [pc, #184]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 800279c:	4931      	ldr	r1, [pc, #196]	; (8002864 <HAL_RCC_OscConfig+0x628>)
 800279e:	400a      	ands	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7ff fa1b 	bl	8001bdc <HAL_GetTick>
 80027a6:	0003      	movs	r3, r0
 80027a8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ac:	f7ff fa16 	bl	8001bdc <HAL_GetTick>
 80027b0:	0002      	movs	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e046      	b.n	800284c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027be:	4b25      	ldr	r3, [pc, #148]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	049b      	lsls	r3, r3, #18
 80027c6:	4013      	ands	r3, r2
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	4b21      	ldr	r3, [pc, #132]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 80027d0:	4926      	ldr	r1, [pc, #152]	; (800286c <HAL_RCC_OscConfig+0x630>)
 80027d2:	400a      	ands	r2, r1
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	e038      	b.n	800284a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e033      	b.n	800284c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80027e4:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <HAL_RCC_OscConfig+0x618>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2203      	movs	r2, #3
 80027ee:	401a      	ands	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d126      	bne.n	8002846 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2270      	movs	r2, #112	; 0x70
 80027fc:	401a      	ands	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d11f      	bne.n	8002846 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	23fe      	movs	r3, #254	; 0xfe
 800280a:	01db      	lsls	r3, r3, #7
 800280c:	401a      	ands	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002812:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d116      	bne.n	8002846 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	23f8      	movs	r3, #248	; 0xf8
 800281c:	039b      	lsls	r3, r3, #14
 800281e:	401a      	ands	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002824:	429a      	cmp	r2, r3
 8002826:	d10e      	bne.n	8002846 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	23e0      	movs	r3, #224	; 0xe0
 800282c:	051b      	lsls	r3, r3, #20
 800282e:	401a      	ands	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002834:	429a      	cmp	r2, r3
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	0f5b      	lsrs	r3, r3, #29
 800283c:	075a      	lsls	r2, r3, #29
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002842:	429a      	cmp	r2, r3
 8002844:	d001      	beq.n	800284a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	b008      	add	sp, #32
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	40007000 	.word	0x40007000
 800285c:	00001388 	.word	0x00001388
 8002860:	efffffff 	.word	0xefffffff
 8002864:	feffffff 	.word	0xfeffffff
 8002868:	11c1808c 	.word	0x11c1808c
 800286c:	eefefffc 	.word	0xeefefffc

08002870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0e9      	b.n	8002a58 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002884:	4b76      	ldr	r3, [pc, #472]	; (8002a60 <HAL_RCC_ClockConfig+0x1f0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2207      	movs	r2, #7
 800288a:	4013      	ands	r3, r2
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d91e      	bls.n	80028d0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b73      	ldr	r3, [pc, #460]	; (8002a60 <HAL_RCC_ClockConfig+0x1f0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2207      	movs	r2, #7
 8002898:	4393      	bics	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	4b70      	ldr	r3, [pc, #448]	; (8002a60 <HAL_RCC_ClockConfig+0x1f0>)
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028a4:	f7ff f99a 	bl	8001bdc <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028ac:	e009      	b.n	80028c2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ae:	f7ff f995 	bl	8001bdc <HAL_GetTick>
 80028b2:	0002      	movs	r2, r0
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	4a6a      	ldr	r2, [pc, #424]	; (8002a64 <HAL_RCC_ClockConfig+0x1f4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e0ca      	b.n	8002a58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028c2:	4b67      	ldr	r3, [pc, #412]	; (8002a60 <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2207      	movs	r2, #7
 80028c8:	4013      	ands	r3, r2
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d1ee      	bne.n	80028ae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2202      	movs	r2, #2
 80028d6:	4013      	ands	r3, r2
 80028d8:	d015      	beq.n	8002906 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2204      	movs	r2, #4
 80028e0:	4013      	ands	r3, r2
 80028e2:	d006      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80028e4:	4b60      	ldr	r3, [pc, #384]	; (8002a68 <HAL_RCC_ClockConfig+0x1f8>)
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	4b5f      	ldr	r3, [pc, #380]	; (8002a68 <HAL_RCC_ClockConfig+0x1f8>)
 80028ea:	21e0      	movs	r1, #224	; 0xe0
 80028ec:	01c9      	lsls	r1, r1, #7
 80028ee:	430a      	orrs	r2, r1
 80028f0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f2:	4b5d      	ldr	r3, [pc, #372]	; (8002a68 <HAL_RCC_ClockConfig+0x1f8>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	4a5d      	ldr	r2, [pc, #372]	; (8002a6c <HAL_RCC_ClockConfig+0x1fc>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	0019      	movs	r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	4b59      	ldr	r3, [pc, #356]	; (8002a68 <HAL_RCC_ClockConfig+0x1f8>)
 8002902:	430a      	orrs	r2, r1
 8002904:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2201      	movs	r2, #1
 800290c:	4013      	ands	r3, r2
 800290e:	d057      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d107      	bne.n	8002928 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002918:	4b53      	ldr	r3, [pc, #332]	; (8002a68 <HAL_RCC_ClockConfig+0x1f8>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	029b      	lsls	r3, r3, #10
 8002920:	4013      	ands	r3, r2
 8002922:	d12b      	bne.n	800297c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e097      	b.n	8002a58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d107      	bne.n	8002940 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002930:	4b4d      	ldr	r3, [pc, #308]	; (8002a68 <HAL_RCC_ClockConfig+0x1f8>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	049b      	lsls	r3, r3, #18
 8002938:	4013      	ands	r3, r2
 800293a:	d11f      	bne.n	800297c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e08b      	b.n	8002a58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d107      	bne.n	8002958 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002948:	4b47      	ldr	r3, [pc, #284]	; (8002a68 <HAL_RCC_ClockConfig+0x1f8>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4013      	ands	r3, r2
 8002952:	d113      	bne.n	800297c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e07f      	b.n	8002a58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b03      	cmp	r3, #3
 800295e:	d106      	bne.n	800296e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002960:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <HAL_RCC_ClockConfig+0x1f8>)
 8002962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002964:	2202      	movs	r2, #2
 8002966:	4013      	ands	r3, r2
 8002968:	d108      	bne.n	800297c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e074      	b.n	8002a58 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296e:	4b3e      	ldr	r3, [pc, #248]	; (8002a68 <HAL_RCC_ClockConfig+0x1f8>)
 8002970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002972:	2202      	movs	r2, #2
 8002974:	4013      	ands	r3, r2
 8002976:	d101      	bne.n	800297c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e06d      	b.n	8002a58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800297c:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <HAL_RCC_ClockConfig+0x1f8>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2207      	movs	r2, #7
 8002982:	4393      	bics	r3, r2
 8002984:	0019      	movs	r1, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <HAL_RCC_ClockConfig+0x1f8>)
 800298c:	430a      	orrs	r2, r1
 800298e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002990:	f7ff f924 	bl	8001bdc <HAL_GetTick>
 8002994:	0003      	movs	r3, r0
 8002996:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002998:	e009      	b.n	80029ae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800299a:	f7ff f91f 	bl	8001bdc <HAL_GetTick>
 800299e:	0002      	movs	r2, r0
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	4a2f      	ldr	r2, [pc, #188]	; (8002a64 <HAL_RCC_ClockConfig+0x1f4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e054      	b.n	8002a58 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	4b2e      	ldr	r3, [pc, #184]	; (8002a68 <HAL_RCC_ClockConfig+0x1f8>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2238      	movs	r2, #56	; 0x38
 80029b4:	401a      	ands	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1ec      	bne.n	800299a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029c0:	4b27      	ldr	r3, [pc, #156]	; (8002a60 <HAL_RCC_ClockConfig+0x1f0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2207      	movs	r2, #7
 80029c6:	4013      	ands	r3, r2
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d21e      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b24      	ldr	r3, [pc, #144]	; (8002a60 <HAL_RCC_ClockConfig+0x1f0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2207      	movs	r2, #7
 80029d4:	4393      	bics	r3, r2
 80029d6:	0019      	movs	r1, r3
 80029d8:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <HAL_RCC_ClockConfig+0x1f0>)
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029e0:	f7ff f8fc 	bl	8001bdc <HAL_GetTick>
 80029e4:	0003      	movs	r3, r0
 80029e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029e8:	e009      	b.n	80029fe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ea:	f7ff f8f7 	bl	8001bdc <HAL_GetTick>
 80029ee:	0002      	movs	r2, r0
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	4a1b      	ldr	r2, [pc, #108]	; (8002a64 <HAL_RCC_ClockConfig+0x1f4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e02c      	b.n	8002a58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029fe:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <HAL_RCC_ClockConfig+0x1f0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2207      	movs	r2, #7
 8002a04:	4013      	ands	r3, r2
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d1ee      	bne.n	80029ea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2204      	movs	r2, #4
 8002a12:	4013      	ands	r3, r2
 8002a14:	d009      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a16:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_RCC_ClockConfig+0x1f8>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <HAL_RCC_ClockConfig+0x200>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	0019      	movs	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_RCC_ClockConfig+0x1f8>)
 8002a26:	430a      	orrs	r2, r1
 8002a28:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a2a:	f000 f829 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8002a2e:	0001      	movs	r1, r0
 8002a30:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <HAL_RCC_ClockConfig+0x1f8>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	0a1b      	lsrs	r3, r3, #8
 8002a36:	220f      	movs	r2, #15
 8002a38:	401a      	ands	r2, r3
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <HAL_RCC_ClockConfig+0x204>)
 8002a3c:	0092      	lsls	r2, r2, #2
 8002a3e:	58d3      	ldr	r3, [r2, r3]
 8002a40:	221f      	movs	r2, #31
 8002a42:	4013      	ands	r3, r2
 8002a44:	000a      	movs	r2, r1
 8002a46:	40da      	lsrs	r2, r3
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCC_ClockConfig+0x208>)
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_RCC_ClockConfig+0x20c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f7ff f867 	bl	8001b24 <HAL_InitTick>
 8002a56:	0003      	movs	r3, r0
}
 8002a58:	0018      	movs	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b004      	add	sp, #16
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40022000 	.word	0x40022000
 8002a64:	00001388 	.word	0x00001388
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	fffff0ff 	.word	0xfffff0ff
 8002a70:	ffff8fff 	.word	0xffff8fff
 8002a74:	08006520 	.word	0x08006520
 8002a78:	200001c8 	.word	0x200001c8
 8002a7c:	200001cc 	.word	0x200001cc

08002a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a86:	4b3c      	ldr	r3, [pc, #240]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2238      	movs	r2, #56	; 0x38
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d10f      	bne.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a90:	4b39      	ldr	r3, [pc, #228]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	0adb      	lsrs	r3, r3, #11
 8002a96:	2207      	movs	r2, #7
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	0013      	movs	r3, r2
 8002aa0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002aa2:	6839      	ldr	r1, [r7, #0]
 8002aa4:	4835      	ldr	r0, [pc, #212]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002aa6:	f7fd fb37 	bl	8000118 <__udivsi3>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	e05d      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ab0:	4b31      	ldr	r3, [pc, #196]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2238      	movs	r2, #56	; 0x38
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d102      	bne.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002abc:	4b30      	ldr	r3, [pc, #192]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x100>)
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	e054      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac2:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2238      	movs	r2, #56	; 0x38
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b10      	cmp	r3, #16
 8002acc:	d138      	bne.n	8002b40 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002ace:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ad8:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	2207      	movs	r2, #7
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d10d      	bne.n	8002b08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	4824      	ldr	r0, [pc, #144]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x100>)
 8002af0:	f7fd fb12 	bl	8000118 <__udivsi3>
 8002af4:	0003      	movs	r3, r0
 8002af6:	0019      	movs	r1, r3
 8002af8:	4b1f      	ldr	r3, [pc, #124]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	227f      	movs	r2, #127	; 0x7f
 8002b00:	4013      	ands	r3, r2
 8002b02:	434b      	muls	r3, r1
 8002b04:	617b      	str	r3, [r7, #20]
        break;
 8002b06:	e00d      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	481c      	ldr	r0, [pc, #112]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b0c:	f7fd fb04 	bl	8000118 <__udivsi3>
 8002b10:	0003      	movs	r3, r0
 8002b12:	0019      	movs	r1, r3
 8002b14:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	0a1b      	lsrs	r3, r3, #8
 8002b1a:	227f      	movs	r2, #127	; 0x7f
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	434b      	muls	r3, r1
 8002b20:	617b      	str	r3, [r7, #20]
        break;
 8002b22:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b24:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	0f5b      	lsrs	r3, r3, #29
 8002b2a:	2207      	movs	r2, #7
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	3301      	adds	r3, #1
 8002b30:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	6978      	ldr	r0, [r7, #20]
 8002b36:	f7fd faef 	bl	8000118 <__udivsi3>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	e015      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b40:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2238      	movs	r2, #56	; 0x38
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d103      	bne.n	8002b54 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	e00b      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b54:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2238      	movs	r2, #56	; 0x38
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b18      	cmp	r3, #24
 8002b5e:	d103      	bne.n	8002b68 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b60:	23fa      	movs	r3, #250	; 0xfa
 8002b62:	01db      	lsls	r3, r3, #7
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	e001      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b6c:	693b      	ldr	r3, [r7, #16]
}
 8002b6e:	0018      	movs	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b006      	add	sp, #24
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	00f42400 	.word	0x00f42400
 8002b80:	007a1200 	.word	0x007a1200

08002b84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b88:	4b02      	ldr	r3, [pc, #8]	; (8002b94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
}
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	200001c8 	.word	0x200001c8

08002b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b98:	b5b0      	push	{r4, r5, r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b9c:	f7ff fff2 	bl	8002b84 <HAL_RCC_GetHCLKFreq>
 8002ba0:	0004      	movs	r4, r0
 8002ba2:	f7ff fb3f 	bl	8002224 <LL_RCC_GetAPB1Prescaler>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	0b1a      	lsrs	r2, r3, #12
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bac:	0092      	lsls	r2, r2, #2
 8002bae:	58d3      	ldr	r3, [r2, r3]
 8002bb0:	221f      	movs	r2, #31
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	40dc      	lsrs	r4, r3
 8002bb6:	0023      	movs	r3, r4
}
 8002bb8:	0018      	movs	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	08006560 	.word	0x08006560

08002bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002bcc:	2313      	movs	r3, #19
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bd4:	2312      	movs	r3, #18
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	029b      	lsls	r3, r3, #10
 8002be4:	4013      	ands	r3, r2
 8002be6:	d100      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002be8:	e0a3      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bea:	2011      	movs	r0, #17
 8002bec:	183b      	adds	r3, r7, r0
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf2:	4ba5      	ldr	r3, [pc, #660]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	055b      	lsls	r3, r3, #21
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d110      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfe:	4ba2      	ldr	r3, [pc, #648]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c02:	4ba1      	ldr	r3, [pc, #644]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	0549      	lsls	r1, r1, #21
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c0c:	4b9e      	ldr	r3, [pc, #632]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	055b      	lsls	r3, r3, #21
 8002c14:	4013      	ands	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1a:	183b      	adds	r3, r7, r0
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c20:	4b9a      	ldr	r3, [pc, #616]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4b99      	ldr	r3, [pc, #612]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002c26:	2180      	movs	r1, #128	; 0x80
 8002c28:	0049      	lsls	r1, r1, #1
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c2e:	f7fe ffd5 	bl	8001bdc <HAL_GetTick>
 8002c32:	0003      	movs	r3, r0
 8002c34:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c36:	e00b      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c38:	f7fe ffd0 	bl	8001bdc <HAL_GetTick>
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d904      	bls.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002c46:	2313      	movs	r3, #19
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	701a      	strb	r2, [r3, #0]
        break;
 8002c4e:	e005      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c50:	4b8e      	ldr	r3, [pc, #568]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d0ed      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002c5c:	2313      	movs	r3, #19
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d154      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c66:	4b88      	ldr	r3, [pc, #544]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c6a:	23c0      	movs	r3, #192	; 0xc0
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4013      	ands	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d019      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d014      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c82:	4b81      	ldr	r3, [pc, #516]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c86:	4a82      	ldr	r2, [pc, #520]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c8c:	4b7e      	ldr	r3, [pc, #504]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c90:	4b7d      	ldr	r3, [pc, #500]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c92:	2180      	movs	r1, #128	; 0x80
 8002c94:	0249      	lsls	r1, r1, #9
 8002c96:	430a      	orrs	r2, r1
 8002c98:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c9a:	4b7b      	ldr	r3, [pc, #492]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c9e:	4b7a      	ldr	r3, [pc, #488]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ca0:	497c      	ldr	r1, [pc, #496]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002ca2:	400a      	ands	r2, r1
 8002ca4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ca6:	4b78      	ldr	r3, [pc, #480]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d016      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe ff92 	bl	8001bdc <HAL_GetTick>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cbc:	e00c      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7fe ff8d 	bl	8001bdc <HAL_GetTick>
 8002cc2:	0002      	movs	r2, r0
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	4a73      	ldr	r2, [pc, #460]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d904      	bls.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002cce:	2313      	movs	r3, #19
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	701a      	strb	r2, [r3, #0]
            break;
 8002cd6:	e004      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd8:	4b6b      	ldr	r3, [pc, #428]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cdc:	2202      	movs	r2, #2
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d0ed      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002ce2:	2313      	movs	r3, #19
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10a      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cec:	4b66      	ldr	r3, [pc, #408]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	4a67      	ldr	r2, [pc, #412]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	0019      	movs	r1, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cfa:	4b63      	ldr	r3, [pc, #396]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d00:	e00c      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d02:	2312      	movs	r3, #18
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	2213      	movs	r2, #19
 8002d08:	18ba      	adds	r2, r7, r2
 8002d0a:	7812      	ldrb	r2, [r2, #0]
 8002d0c:	701a      	strb	r2, [r3, #0]
 8002d0e:	e005      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d10:	2312      	movs	r3, #18
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	2213      	movs	r2, #19
 8002d16:	18ba      	adds	r2, r7, r2
 8002d18:	7812      	ldrb	r2, [r2, #0]
 8002d1a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d1c:	2311      	movs	r3, #17
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d105      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d26:	4b58      	ldr	r3, [pc, #352]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d2a:	4b57      	ldr	r3, [pc, #348]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d2c:	495b      	ldr	r1, [pc, #364]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002d2e:	400a      	ands	r2, r1
 8002d30:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2201      	movs	r2, #1
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d009      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d3c:	4b52      	ldr	r3, [pc, #328]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d40:	2203      	movs	r2, #3
 8002d42:	4393      	bics	r3, r2
 8002d44:	0019      	movs	r1, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	4b4f      	ldr	r3, [pc, #316]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2210      	movs	r2, #16
 8002d56:	4013      	ands	r3, r2
 8002d58:	d009      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d5a:	4b4b      	ldr	r3, [pc, #300]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	4a50      	ldr	r2, [pc, #320]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	0019      	movs	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	4b47      	ldr	r3, [pc, #284]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	2380      	movs	r3, #128	; 0x80
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4013      	ands	r3, r2
 8002d78:	d009      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d7a:	4b43      	ldr	r3, [pc, #268]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7e:	4a49      	ldr	r2, [pc, #292]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	0019      	movs	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	4b3f      	ldr	r3, [pc, #252]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4013      	ands	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d9a:	4b3b      	ldr	r3, [pc, #236]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	4a42      	ldr	r2, [pc, #264]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	0019      	movs	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699a      	ldr	r2, [r3, #24]
 8002da8:	4b37      	ldr	r3, [pc, #220]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002daa:	430a      	orrs	r2, r1
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2220      	movs	r2, #32
 8002db4:	4013      	ands	r3, r2
 8002db6:	d009      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002db8:	4b33      	ldr	r3, [pc, #204]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbc:	4a3b      	ldr	r2, [pc, #236]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	4b30      	ldr	r3, [pc, #192]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	01db      	lsls	r3, r3, #7
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d015      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dd8:	4b2b      	ldr	r3, [pc, #172]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	0899      	lsrs	r1, r3, #2
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69da      	ldr	r2, [r3, #28]
 8002de4:	4b28      	ldr	r3, [pc, #160]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002de6:	430a      	orrs	r2, r1
 8002de8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	05db      	lsls	r3, r3, #23
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d106      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002df6:	4b24      	ldr	r3, [pc, #144]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dfc:	2180      	movs	r1, #128	; 0x80
 8002dfe:	0249      	lsls	r1, r1, #9
 8002e00:	430a      	orrs	r2, r1
 8002e02:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	039b      	lsls	r3, r3, #14
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d016      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e14:	4a26      	ldr	r2, [pc, #152]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	0019      	movs	r1, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1a      	ldr	r2, [r3, #32]
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e20:	430a      	orrs	r2, r1
 8002e22:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1a      	ldr	r2, [r3, #32]
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	03db      	lsls	r3, r3, #15
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d106      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e30:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e36:	2180      	movs	r1, #128	; 0x80
 8002e38:	0449      	lsls	r1, r1, #17
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	4013      	ands	r3, r2
 8002e48:	d016      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e4a:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4e:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	0019      	movs	r1, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	01db      	lsls	r3, r3, #7
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d106      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e6a:	4b07      	ldr	r3, [pc, #28]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e70:	2180      	movs	r1, #128	; 0x80
 8002e72:	0249      	lsls	r1, r1, #9
 8002e74:	430a      	orrs	r2, r1
 8002e76:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e78:	2312      	movs	r3, #18
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	781b      	ldrb	r3, [r3, #0]
}
 8002e7e:	0018      	movs	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b006      	add	sp, #24
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40007000 	.word	0x40007000
 8002e90:	fffffcff 	.word	0xfffffcff
 8002e94:	fffeffff 	.word	0xfffeffff
 8002e98:	00001388 	.word	0x00001388
 8002e9c:	efffffff 	.word	0xefffffff
 8002ea0:	fffff3ff 	.word	0xfffff3ff
 8002ea4:	fff3ffff 	.word	0xfff3ffff
 8002ea8:	ffcfffff 	.word	0xffcfffff
 8002eac:	ffffcfff 	.word	0xffffcfff
 8002eb0:	ffbfffff 	.word	0xffbfffff
 8002eb4:	ffff3fff 	.word	0xffff3fff

08002eb8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002eb8:	b5b0      	push	{r4, r5, r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ec0:	230f      	movs	r3, #15
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d100      	bne.n	8002ed0 <HAL_RTC_Init+0x18>
 8002ece:	e08c      	b.n	8002fea <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2229      	movs	r2, #41	; 0x29
 8002ed4:	5c9b      	ldrb	r3, [r3, r2]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10b      	bne.n	8002ef4 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2228      	movs	r2, #40	; 0x28
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2288      	movs	r2, #136	; 0x88
 8002ee8:	0212      	lsls	r2, r2, #8
 8002eea:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f7fe fbbc 	bl	800166c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2229      	movs	r2, #41	; 0x29
 8002ef8:	2102      	movs	r1, #2
 8002efa:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2210      	movs	r2, #16
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b10      	cmp	r3, #16
 8002f08:	d062      	beq.n	8002fd0 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	22ca      	movs	r2, #202	; 0xca
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2253      	movs	r2, #83	; 0x53
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002f1a:	250f      	movs	r5, #15
 8002f1c:	197c      	adds	r4, r7, r5
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f000 fcba 	bl	800389a <RTC_EnterInitMode>
 8002f26:	0003      	movs	r3, r0
 8002f28:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002f2a:	0028      	movs	r0, r5
 8002f2c:	183b      	adds	r3, r7, r0
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d12c      	bne.n	8002f8e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	492e      	ldr	r1, [pc, #184]	; (8002ff8 <HAL_RTC_Init+0x140>)
 8002f40:	400a      	ands	r2, r1
 8002f42:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6999      	ldr	r1, [r3, #24]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6912      	ldr	r2, [r2, #16]
 8002f6a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6919      	ldr	r1, [r3, #16]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	041a      	lsls	r2, r3, #16
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002f80:	183c      	adds	r4, r7, r0
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f000 fccb 	bl	8003920 <RTC_ExitInitMode>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002f8e:	230f      	movs	r3, #15
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d116      	bne.n	8002fc6 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	00d2      	lsls	r2, r2, #3
 8002fa4:	08d2      	lsrs	r2, r2, #3
 8002fa6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6999      	ldr	r1, [r3, #24]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	22ff      	movs	r2, #255	; 0xff
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24
 8002fce:	e003      	b.n	8002fd8 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002fd0:	230f      	movs	r3, #15
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002fd8:	230f      	movs	r3, #15
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d103      	bne.n	8002fea <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2229      	movs	r2, #41	; 0x29
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002fea:	230f      	movs	r3, #15
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	781b      	ldrb	r3, [r3, #0]
}
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b004      	add	sp, #16
 8002ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ff8:	fb8fffbf 	.word	0xfb8fffbf

08002ffc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ffc:	b5b0      	push	{r4, r5, r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2228      	movs	r2, #40	; 0x28
 800300c:	5c9b      	ldrb	r3, [r3, r2]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_RTC_SetTime+0x1a>
 8003012:	2302      	movs	r3, #2
 8003014:	e092      	b.n	800313c <HAL_RTC_SetTime+0x140>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2228      	movs	r2, #40	; 0x28
 800301a:	2101      	movs	r1, #1
 800301c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2229      	movs	r2, #41	; 0x29
 8003022:	2102      	movs	r1, #2
 8003024:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	22ca      	movs	r2, #202	; 0xca
 800302c:	625a      	str	r2, [r3, #36]	; 0x24
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2253      	movs	r2, #83	; 0x53
 8003034:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003036:	2513      	movs	r5, #19
 8003038:	197c      	adds	r4, r7, r5
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	0018      	movs	r0, r3
 800303e:	f000 fc2c 	bl	800389a <RTC_EnterInitMode>
 8003042:	0003      	movs	r3, r0
 8003044:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003046:	197b      	adds	r3, r7, r5
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d162      	bne.n	8003114 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d125      	bne.n	80030a0 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2240      	movs	r2, #64	; 0x40
 800305c:	4013      	ands	r3, r2
 800305e:	d102      	bne.n	8003066 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2200      	movs	r2, #0
 8003064:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	0018      	movs	r0, r3
 800306c:	f000 fc9c 	bl	80039a8 <RTC_ByteToBcd2>
 8003070:	0003      	movs	r3, r0
 8003072:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	785b      	ldrb	r3, [r3, #1]
 8003078:	0018      	movs	r0, r3
 800307a:	f000 fc95 	bl	80039a8 <RTC_ByteToBcd2>
 800307e:	0003      	movs	r3, r0
 8003080:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003082:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	789b      	ldrb	r3, [r3, #2]
 8003088:	0018      	movs	r0, r3
 800308a:	f000 fc8d 	bl	80039a8 <RTC_ByteToBcd2>
 800308e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003090:	0022      	movs	r2, r4
 8003092:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	78db      	ldrb	r3, [r3, #3]
 8003098:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800309a:	4313      	orrs	r3, r2
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	e017      	b.n	80030d0 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2240      	movs	r2, #64	; 0x40
 80030a8:	4013      	ands	r3, r2
 80030aa:	d102      	bne.n	80030b2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2200      	movs	r2, #0
 80030b0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	785b      	ldrb	r3, [r3, #1]
 80030bc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030be:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030c4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	78db      	ldrb	r3, [r3, #3]
 80030ca:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	491b      	ldr	r1, [pc, #108]	; (8003144 <HAL_RTC_SetTime+0x148>)
 80030d8:	400a      	ands	r2, r1
 80030da:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4918      	ldr	r1, [pc, #96]	; (8003148 <HAL_RTC_SetTime+0x14c>)
 80030e8:	400a      	ands	r2, r1
 80030ea:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6999      	ldr	r1, [r3, #24]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003104:	2313      	movs	r3, #19
 8003106:	18fc      	adds	r4, r7, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	0018      	movs	r0, r3
 800310c:	f000 fc08 	bl	8003920 <RTC_ExitInitMode>
 8003110:	0003      	movs	r3, r0
 8003112:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	22ff      	movs	r2, #255	; 0xff
 800311a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 800311c:	2313      	movs	r3, #19
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d103      	bne.n	800312e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2229      	movs	r2, #41	; 0x29
 800312a:	2101      	movs	r1, #1
 800312c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2228      	movs	r2, #40	; 0x28
 8003132:	2100      	movs	r1, #0
 8003134:	5499      	strb	r1, [r3, r2]

  return status;
 8003136:	2313      	movs	r3, #19
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	781b      	ldrb	r3, [r3, #0]
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	b006      	add	sp, #24
 8003142:	bdb0      	pop	{r4, r5, r7, pc}
 8003144:	007f7f7f 	.word	0x007f7f7f
 8003148:	fffbffff 	.word	0xfffbffff

0800314c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	045b      	lsls	r3, r3, #17
 800316a:	0c5a      	lsrs	r2, r3, #17
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a22      	ldr	r2, [pc, #136]	; (8003200 <HAL_RTC_GetTime+0xb4>)
 8003178:	4013      	ands	r3, r2
 800317a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	0c1b      	lsrs	r3, r3, #16
 8003180:	b2db      	uxtb	r3, r3
 8003182:	223f      	movs	r2, #63	; 0x3f
 8003184:	4013      	ands	r3, r2
 8003186:	b2da      	uxtb	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	b2db      	uxtb	r3, r3
 8003192:	227f      	movs	r2, #127	; 0x7f
 8003194:	4013      	ands	r3, r2
 8003196:	b2da      	uxtb	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	227f      	movs	r2, #127	; 0x7f
 80031a2:	4013      	ands	r3, r2
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	0d9b      	lsrs	r3, r3, #22
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2201      	movs	r2, #1
 80031b2:	4013      	ands	r3, r2
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d11a      	bne.n	80031f6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f000 fc17 	bl	80039f8 <RTC_Bcd2ToByte>
 80031ca:	0003      	movs	r3, r0
 80031cc:	001a      	movs	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	785b      	ldrb	r3, [r3, #1]
 80031d6:	0018      	movs	r0, r3
 80031d8:	f000 fc0e 	bl	80039f8 <RTC_Bcd2ToByte>
 80031dc:	0003      	movs	r3, r0
 80031de:	001a      	movs	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	789b      	ldrb	r3, [r3, #2]
 80031e8:	0018      	movs	r0, r3
 80031ea:	f000 fc05 	bl	80039f8 <RTC_Bcd2ToByte>
 80031ee:	0003      	movs	r3, r0
 80031f0:	001a      	movs	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	0018      	movs	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b006      	add	sp, #24
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	007f7f7f 	.word	0x007f7f7f

08003204 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003204:	b5b0      	push	{r4, r5, r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2228      	movs	r2, #40	; 0x28
 8003214:	5c9b      	ldrb	r3, [r3, r2]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_RTC_SetDate+0x1a>
 800321a:	2302      	movs	r3, #2
 800321c:	e07e      	b.n	800331c <HAL_RTC_SetDate+0x118>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2228      	movs	r2, #40	; 0x28
 8003222:	2101      	movs	r1, #1
 8003224:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2229      	movs	r2, #41	; 0x29
 800322a:	2102      	movs	r1, #2
 800322c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10e      	bne.n	8003252 <HAL_RTC_SetDate+0x4e>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	785b      	ldrb	r3, [r3, #1]
 8003238:	001a      	movs	r2, r3
 800323a:	2310      	movs	r3, #16
 800323c:	4013      	ands	r3, r2
 800323e:	d008      	beq.n	8003252 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	785b      	ldrb	r3, [r3, #1]
 8003244:	2210      	movs	r2, #16
 8003246:	4393      	bics	r3, r2
 8003248:	b2db      	uxtb	r3, r3
 800324a:	330a      	adds	r3, #10
 800324c:	b2da      	uxtb	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d11c      	bne.n	8003292 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	78db      	ldrb	r3, [r3, #3]
 800325c:	0018      	movs	r0, r3
 800325e:	f000 fba3 	bl	80039a8 <RTC_ByteToBcd2>
 8003262:	0003      	movs	r3, r0
 8003264:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	785b      	ldrb	r3, [r3, #1]
 800326a:	0018      	movs	r0, r3
 800326c:	f000 fb9c 	bl	80039a8 <RTC_ByteToBcd2>
 8003270:	0003      	movs	r3, r0
 8003272:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003274:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	789b      	ldrb	r3, [r3, #2]
 800327a:	0018      	movs	r0, r3
 800327c:	f000 fb94 	bl	80039a8 <RTC_ByteToBcd2>
 8003280:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003282:	0022      	movs	r2, r4
 8003284:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	e00e      	b.n	80032b0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	78db      	ldrb	r3, [r3, #3]
 8003296:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	785b      	ldrb	r3, [r3, #1]
 800329c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800329e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80032a4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	22ca      	movs	r2, #202	; 0xca
 80032b6:	625a      	str	r2, [r3, #36]	; 0x24
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2253      	movs	r2, #83	; 0x53
 80032be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80032c0:	2513      	movs	r5, #19
 80032c2:	197c      	adds	r4, r7, r5
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	0018      	movs	r0, r3
 80032c8:	f000 fae7 	bl	800389a <RTC_EnterInitMode>
 80032cc:	0003      	movs	r3, r0
 80032ce:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80032d0:	0028      	movs	r0, r5
 80032d2:	183b      	adds	r3, r7, r0
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10c      	bne.n	80032f4 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4910      	ldr	r1, [pc, #64]	; (8003324 <HAL_RTC_SetDate+0x120>)
 80032e2:	400a      	ands	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80032e6:	183c      	adds	r4, r7, r0
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	0018      	movs	r0, r3
 80032ec:	f000 fb18 	bl	8003920 <RTC_ExitInitMode>
 80032f0:	0003      	movs	r3, r0
 80032f2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	22ff      	movs	r2, #255	; 0xff
 80032fa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80032fc:	2313      	movs	r3, #19
 80032fe:	18fb      	adds	r3, r7, r3
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d103      	bne.n	800330e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2229      	movs	r2, #41	; 0x29
 800330a:	2101      	movs	r1, #1
 800330c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2228      	movs	r2, #40	; 0x28
 8003312:	2100      	movs	r1, #0
 8003314:	5499      	strb	r1, [r3, r2]

  return status;
 8003316:	2313      	movs	r3, #19
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	781b      	ldrb	r3, [r3, #0]
}
 800331c:	0018      	movs	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	b006      	add	sp, #24
 8003322:	bdb0      	pop	{r4, r5, r7, pc}
 8003324:	00ffff3f 	.word	0x00ffff3f

08003328 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4a21      	ldr	r2, [pc, #132]	; (80033c0 <HAL_RTC_GetDate+0x98>)
 800333c:	4013      	ands	r3, r2
 800333e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	0c1b      	lsrs	r3, r3, #16
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	b2db      	uxtb	r3, r3
 8003350:	221f      	movs	r2, #31
 8003352:	4013      	ands	r3, r2
 8003354:	b2da      	uxtb	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	223f      	movs	r2, #63	; 0x3f
 8003360:	4013      	ands	r3, r2
 8003362:	b2da      	uxtb	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	0b5b      	lsrs	r3, r3, #13
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2207      	movs	r2, #7
 8003370:	4013      	ands	r3, r2
 8003372:	b2da      	uxtb	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d11a      	bne.n	80033b4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	78db      	ldrb	r3, [r3, #3]
 8003382:	0018      	movs	r0, r3
 8003384:	f000 fb38 	bl	80039f8 <RTC_Bcd2ToByte>
 8003388:	0003      	movs	r3, r0
 800338a:	001a      	movs	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	785b      	ldrb	r3, [r3, #1]
 8003394:	0018      	movs	r0, r3
 8003396:	f000 fb2f 	bl	80039f8 <RTC_Bcd2ToByte>
 800339a:	0003      	movs	r3, r0
 800339c:	001a      	movs	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	789b      	ldrb	r3, [r3, #2]
 80033a6:	0018      	movs	r0, r3
 80033a8:	f000 fb26 	bl	80039f8 <RTC_Bcd2ToByte>
 80033ac:	0003      	movs	r3, r0
 80033ae:	001a      	movs	r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b006      	add	sp, #24
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	00ffff3f 	.word	0x00ffff3f

080033c4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b089      	sub	sp, #36	; 0x24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2228      	movs	r2, #40	; 0x28
 80033d4:	5c9b      	ldrb	r3, [r3, r2]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_RTC_SetAlarm_IT+0x1a>
 80033da:	2302      	movs	r3, #2
 80033dc:	e127      	b.n	800362e <HAL_RTC_SetAlarm_IT+0x26a>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2228      	movs	r2, #40	; 0x28
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2229      	movs	r2, #41	; 0x29
 80033ea:	2102      	movs	r1, #2
 80033ec:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d136      	bne.n	8003462 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2240      	movs	r2, #64	; 0x40
 80033fc:	4013      	ands	r3, r2
 80033fe:	d102      	bne.n	8003406 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2200      	movs	r2, #0
 8003404:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	0018      	movs	r0, r3
 800340c:	f000 facc 	bl	80039a8 <RTC_ByteToBcd2>
 8003410:	0003      	movs	r3, r0
 8003412:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	785b      	ldrb	r3, [r3, #1]
 8003418:	0018      	movs	r0, r3
 800341a:	f000 fac5 	bl	80039a8 <RTC_ByteToBcd2>
 800341e:	0003      	movs	r3, r0
 8003420:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003422:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	789b      	ldrb	r3, [r3, #2]
 8003428:	0018      	movs	r0, r3
 800342a:	f000 fabd 	bl	80039a8 <RTC_ByteToBcd2>
 800342e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003430:	0022      	movs	r2, r4
 8003432:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	78db      	ldrb	r3, [r3, #3]
 8003438:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800343a:	431a      	orrs	r2, r3
 800343c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2220      	movs	r2, #32
 8003442:	5c9b      	ldrb	r3, [r3, r2]
 8003444:	0018      	movs	r0, r3
 8003446:	f000 faaf 	bl	80039a8 <RTC_ByteToBcd2>
 800344a:	0003      	movs	r3, r0
 800344c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800344e:	0022      	movs	r2, r4
 8003450:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003456:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800345c:	4313      	orrs	r3, r2
 800345e:	61fb      	str	r3, [r7, #28]
 8003460:	e022      	b.n	80034a8 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	2240      	movs	r2, #64	; 0x40
 800346a:	4013      	ands	r3, r2
 800346c:	d102      	bne.n	8003474 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2200      	movs	r2, #0
 8003472:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	785b      	ldrb	r3, [r3, #1]
 800347e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003480:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003486:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	78db      	ldrb	r3, [r3, #3]
 800348c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800348e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2120      	movs	r1, #32
 8003494:	5c5b      	ldrb	r3, [r3, r1]
 8003496:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003498:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800349e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	22ca      	movs	r2, #202	; 0xca
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2253      	movs	r2, #83	; 0x53
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d14c      	bne.n	800356a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4957      	ldr	r1, [pc, #348]	; (8003638 <HAL_RTC_SetAlarm_IT+0x274>)
 80034dc:	400a      	ands	r2, r1
 80034de:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2101      	movs	r1, #1
 80034ec:	430a      	orrs	r2, r1
 80034ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80034f0:	f7fe fb74 	bl	8001bdc <HAL_GetTick>
 80034f4:	0003      	movs	r3, r0
 80034f6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80034f8:	e016      	b.n	8003528 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80034fa:	f7fe fb6f 	bl	8001bdc <HAL_GetTick>
 80034fe:	0002      	movs	r2, r0
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	1ad2      	subs	r2, r2, r3
 8003504:	23fa      	movs	r3, #250	; 0xfa
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	429a      	cmp	r2, r3
 800350a:	d90d      	bls.n	8003528 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	22ff      	movs	r2, #255	; 0xff
 8003512:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2229      	movs	r2, #41	; 0x29
 8003518:	2103      	movs	r1, #3
 800351a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2228      	movs	r2, #40	; 0x28
 8003520:	2100      	movs	r1, #0
 8003522:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e082      	b.n	800362e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2201      	movs	r2, #1
 8003530:	4013      	ands	r3, r2
 8003532:	d0e2      	beq.n	80034fa <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69fa      	ldr	r2, [r7, #28]
 800353a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2180      	movs	r1, #128	; 0x80
 8003550:	0049      	lsls	r1, r1, #1
 8003552:	430a      	orrs	r2, r1
 8003554:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	699a      	ldr	r2, [r3, #24]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2180      	movs	r1, #128	; 0x80
 8003562:	0149      	lsls	r1, r1, #5
 8003564:	430a      	orrs	r2, r1
 8003566:	619a      	str	r2, [r3, #24]
 8003568:	e04b      	b.n	8003602 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699a      	ldr	r2, [r3, #24]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4931      	ldr	r1, [pc, #196]	; (800363c <HAL_RTC_SetAlarm_IT+0x278>)
 8003576:	400a      	ands	r2, r1
 8003578:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2102      	movs	r1, #2
 8003586:	430a      	orrs	r2, r1
 8003588:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800358a:	f7fe fb27 	bl	8001bdc <HAL_GetTick>
 800358e:	0003      	movs	r3, r0
 8003590:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003592:	e016      	b.n	80035c2 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003594:	f7fe fb22 	bl	8001bdc <HAL_GetTick>
 8003598:	0002      	movs	r2, r0
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	1ad2      	subs	r2, r2, r3
 800359e:	23fa      	movs	r3, #250	; 0xfa
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d90d      	bls.n	80035c2 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	22ff      	movs	r2, #255	; 0xff
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2229      	movs	r2, #41	; 0x29
 80035b2:	2103      	movs	r1, #3
 80035b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2228      	movs	r2, #40	; 0x28
 80035ba:	2100      	movs	r1, #0
 80035bc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e035      	b.n	800362e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	2202      	movs	r2, #2
 80035ca:	4013      	ands	r3, r2
 80035cc:	d0e2      	beq.n	8003594 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699a      	ldr	r2, [r3, #24]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2180      	movs	r1, #128	; 0x80
 80035ea:	0089      	lsls	r1, r1, #2
 80035ec:	430a      	orrs	r2, r1
 80035ee:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2180      	movs	r1, #128	; 0x80
 80035fc:	0189      	lsls	r1, r1, #6
 80035fe:	430a      	orrs	r2, r1
 8003600:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003602:	4a0f      	ldr	r2, [pc, #60]	; (8003640 <HAL_RTC_SetAlarm_IT+0x27c>)
 8003604:	2380      	movs	r3, #128	; 0x80
 8003606:	58d3      	ldr	r3, [r2, r3]
 8003608:	490d      	ldr	r1, [pc, #52]	; (8003640 <HAL_RTC_SetAlarm_IT+0x27c>)
 800360a:	2280      	movs	r2, #128	; 0x80
 800360c:	0312      	lsls	r2, r2, #12
 800360e:	4313      	orrs	r3, r2
 8003610:	2280      	movs	r2, #128	; 0x80
 8003612:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	22ff      	movs	r2, #255	; 0xff
 800361a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2229      	movs	r2, #41	; 0x29
 8003620:	2101      	movs	r1, #1
 8003622:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2228      	movs	r2, #40	; 0x28
 8003628:	2100      	movs	r1, #0
 800362a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	0018      	movs	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	b009      	add	sp, #36	; 0x24
 8003634:	bd90      	pop	{r4, r7, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	fffffeff 	.word	0xfffffeff
 800363c:	fffffdff 	.word	0xfffffdff
 8003640:	40021800 	.word	0x40021800

08003644 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	2380      	movs	r3, #128	; 0x80
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	429a      	cmp	r2, r3
 800365a:	d144      	bne.n	80036e6 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2280      	movs	r2, #128	; 0x80
 8003660:	0052      	lsls	r2, r2, #1
 8003662:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	045b      	lsls	r3, r3, #17
 8003674:	0c5b      	lsrs	r3, r3, #17
 8003676:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	0c1b      	lsrs	r3, r3, #16
 800367c:	b2db      	uxtb	r3, r3
 800367e:	223f      	movs	r2, #63	; 0x3f
 8003680:	4013      	ands	r3, r2
 8003682:	b2da      	uxtb	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	0a1b      	lsrs	r3, r3, #8
 800368c:	b2db      	uxtb	r3, r3
 800368e:	227f      	movs	r2, #127	; 0x7f
 8003690:	4013      	ands	r3, r2
 8003692:	b2da      	uxtb	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	227f      	movs	r2, #127	; 0x7f
 800369e:	4013      	ands	r3, r2
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	0d9b      	lsrs	r3, r3, #22
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2201      	movs	r2, #1
 80036ae:	4013      	ands	r3, r2
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	0e1b      	lsrs	r3, r3, #24
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	223f      	movs	r2, #63	; 0x3f
 80036c4:	4013      	ands	r3, r2
 80036c6:	b2d9      	uxtb	r1, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2220      	movs	r2, #32
 80036cc:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	05db      	lsls	r3, r3, #23
 80036d4:	401a      	ands	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	4a3b      	ldr	r2, [pc, #236]	; (80037cc <HAL_RTC_GetAlarm+0x188>)
 80036de:	401a      	ands	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	615a      	str	r2, [r3, #20]
 80036e4:	e043      	b.n	800376e <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2280      	movs	r2, #128	; 0x80
 80036ea:	0092      	lsls	r2, r2, #2
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f4:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fc:	045b      	lsls	r3, r3, #17
 80036fe:	0c5b      	lsrs	r3, r3, #17
 8003700:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	b2db      	uxtb	r3, r3
 8003708:	223f      	movs	r2, #63	; 0x3f
 800370a:	4013      	ands	r3, r2
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	0a1b      	lsrs	r3, r3, #8
 8003716:	b2db      	uxtb	r3, r3
 8003718:	227f      	movs	r2, #127	; 0x7f
 800371a:	4013      	ands	r3, r2
 800371c:	b2da      	uxtb	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	227f      	movs	r2, #127	; 0x7f
 8003728:	4013      	ands	r3, r2
 800372a:	b2da      	uxtb	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	0d9b      	lsrs	r3, r3, #22
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2201      	movs	r2, #1
 8003738:	4013      	ands	r3, r2
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	0e1b      	lsrs	r3, r3, #24
 800374a:	b2db      	uxtb	r3, r3
 800374c:	223f      	movs	r2, #63	; 0x3f
 800374e:	4013      	ands	r3, r2
 8003750:	b2d9      	uxtb	r1, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2220      	movs	r2, #32
 8003756:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	05db      	lsls	r3, r3, #23
 800375e:	401a      	ands	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	4a19      	ldr	r2, [pc, #100]	; (80037cc <HAL_RTC_GetAlarm+0x188>)
 8003768:	401a      	ands	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d125      	bne.n	80037c0 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	0018      	movs	r0, r3
 800377a:	f000 f93d 	bl	80039f8 <RTC_Bcd2ToByte>
 800377e:	0003      	movs	r3, r0
 8003780:	001a      	movs	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	785b      	ldrb	r3, [r3, #1]
 800378a:	0018      	movs	r0, r3
 800378c:	f000 f934 	bl	80039f8 <RTC_Bcd2ToByte>
 8003790:	0003      	movs	r3, r0
 8003792:	001a      	movs	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	789b      	ldrb	r3, [r3, #2]
 800379c:	0018      	movs	r0, r3
 800379e:	f000 f92b 	bl	80039f8 <RTC_Bcd2ToByte>
 80037a2:	0003      	movs	r3, r0
 80037a4:	001a      	movs	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2220      	movs	r2, #32
 80037ae:	5c9b      	ldrb	r3, [r3, r2]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f000 f921 	bl	80039f8 <RTC_Bcd2ToByte>
 80037b6:	0003      	movs	r3, r0
 80037b8:	0019      	movs	r1, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2220      	movs	r2, #32
 80037be:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	0018      	movs	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b006      	add	sp, #24
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	80808080 	.word	0x80808080

080037d0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	2380      	movs	r3, #128	; 0x80
 80037e0:	015b      	lsls	r3, r3, #5
 80037e2:	4013      	ands	r3, r2
 80037e4:	d011      	beq.n	800380a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ec:	2201      	movs	r2, #1
 80037ee:	4013      	ands	r3, r2
 80037f0:	d00b      	beq.n	800380a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2101      	movs	r1, #1
 80037fe:	430a      	orrs	r2, r1
 8003800:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	0018      	movs	r0, r3
 8003806:	f7fd fa4f 	bl	8000ca8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699a      	ldr	r2, [r3, #24]
 8003810:	2380      	movs	r3, #128	; 0x80
 8003812:	019b      	lsls	r3, r3, #6
 8003814:	4013      	ands	r3, r2
 8003816:	d011      	beq.n	800383c <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381e:	2202      	movs	r2, #2
 8003820:	4013      	ands	r3, r2
 8003822:	d00b      	beq.n	800383c <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2102      	movs	r1, #2
 8003830:	430a      	orrs	r2, r1
 8003832:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	0018      	movs	r0, r3
 8003838:	f000 f8fb 	bl	8003a32 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2229      	movs	r2, #41	; 0x29
 8003840:	2101      	movs	r1, #1
 8003842:	5499      	strb	r1, [r3, r2]
}
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	b002      	add	sp, #8
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	21a0      	movs	r1, #160	; 0xa0
 8003860:	438a      	bics	r2, r1
 8003862:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003864:	f7fe f9ba 	bl	8001bdc <HAL_GetTick>
 8003868:	0003      	movs	r3, r0
 800386a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800386c:	e00a      	b.n	8003884 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800386e:	f7fe f9b5 	bl	8001bdc <HAL_GetTick>
 8003872:	0002      	movs	r2, r0
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1ad2      	subs	r2, r2, r3
 8003878:	23fa      	movs	r3, #250	; 0xfa
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	429a      	cmp	r2, r3
 800387e:	d901      	bls.n	8003884 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e006      	b.n	8003892 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	2220      	movs	r2, #32
 800388c:	4013      	ands	r3, r2
 800388e:	d0ee      	beq.n	800386e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	0018      	movs	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	b004      	add	sp, #16
 8003898:	bd80      	pop	{r7, pc}

0800389a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80038a2:	230f      	movs	r3, #15
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	2200      	movs	r2, #0
 80038a8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	2240      	movs	r2, #64	; 0x40
 80038b2:	4013      	ands	r3, r2
 80038b4:	d12c      	bne.n	8003910 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2180      	movs	r1, #128	; 0x80
 80038c2:	430a      	orrs	r2, r1
 80038c4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80038c6:	f7fe f989 	bl	8001bdc <HAL_GetTick>
 80038ca:	0003      	movs	r3, r0
 80038cc:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80038ce:	e014      	b.n	80038fa <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80038d0:	f7fe f984 	bl	8001bdc <HAL_GetTick>
 80038d4:	0002      	movs	r2, r0
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	1ad2      	subs	r2, r2, r3
 80038da:	200f      	movs	r0, #15
 80038dc:	183b      	adds	r3, r7, r0
 80038de:	1839      	adds	r1, r7, r0
 80038e0:	7809      	ldrb	r1, [r1, #0]
 80038e2:	7019      	strb	r1, [r3, #0]
 80038e4:	23fa      	movs	r3, #250	; 0xfa
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d906      	bls.n	80038fa <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80038ec:	183b      	adds	r3, r7, r0
 80038ee:	2203      	movs	r2, #3
 80038f0:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2229      	movs	r2, #41	; 0x29
 80038f6:	2103      	movs	r1, #3
 80038f8:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2240      	movs	r2, #64	; 0x40
 8003902:	4013      	ands	r3, r2
 8003904:	d104      	bne.n	8003910 <RTC_EnterInitMode+0x76>
 8003906:	230f      	movs	r3, #15
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b03      	cmp	r3, #3
 800390e:	d1df      	bne.n	80038d0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003910:	230f      	movs	r3, #15
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	781b      	ldrb	r3, [r3, #0]
}
 8003916:	0018      	movs	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	b004      	add	sp, #16
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003920:	b590      	push	{r4, r7, lr}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003928:	240f      	movs	r4, #15
 800392a:	193b      	adds	r3, r7, r4
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003930:	4b1c      	ldr	r3, [pc, #112]	; (80039a4 <RTC_ExitInitMode+0x84>)
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <RTC_ExitInitMode+0x84>)
 8003936:	2180      	movs	r1, #128	; 0x80
 8003938:	438a      	bics	r2, r1
 800393a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800393c:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <RTC_ExitInitMode+0x84>)
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2220      	movs	r2, #32
 8003942:	4013      	ands	r3, r2
 8003944:	d10d      	bne.n	8003962 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	0018      	movs	r0, r3
 800394a:	f7ff ff7f 	bl	800384c <HAL_RTC_WaitForSynchro>
 800394e:	1e03      	subs	r3, r0, #0
 8003950:	d021      	beq.n	8003996 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2229      	movs	r2, #41	; 0x29
 8003956:	2103      	movs	r1, #3
 8003958:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800395a:	193b      	adds	r3, r7, r4
 800395c:	2203      	movs	r2, #3
 800395e:	701a      	strb	r2, [r3, #0]
 8003960:	e019      	b.n	8003996 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003962:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <RTC_ExitInitMode+0x84>)
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <RTC_ExitInitMode+0x84>)
 8003968:	2120      	movs	r1, #32
 800396a:	438a      	bics	r2, r1
 800396c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	0018      	movs	r0, r3
 8003972:	f7ff ff6b 	bl	800384c <HAL_RTC_WaitForSynchro>
 8003976:	1e03      	subs	r3, r0, #0
 8003978:	d007      	beq.n	800398a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2229      	movs	r2, #41	; 0x29
 800397e:	2103      	movs	r1, #3
 8003980:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003982:	230f      	movs	r3, #15
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	2203      	movs	r2, #3
 8003988:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <RTC_ExitInitMode+0x84>)
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <RTC_ExitInitMode+0x84>)
 8003990:	2120      	movs	r1, #32
 8003992:	430a      	orrs	r2, r1
 8003994:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003996:	230f      	movs	r3, #15
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	781b      	ldrb	r3, [r3, #0]
}
 800399c:	0018      	movs	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	b005      	add	sp, #20
 80039a2:	bd90      	pop	{r4, r7, pc}
 80039a4:	40002800 	.word	0x40002800

080039a8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	0002      	movs	r2, r0
 80039b0:	1dfb      	adds	r3, r7, #7
 80039b2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80039b8:	230b      	movs	r3, #11
 80039ba:	18fb      	adds	r3, r7, r3
 80039bc:	1dfa      	adds	r2, r7, #7
 80039be:	7812      	ldrb	r2, [r2, #0]
 80039c0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80039c2:	e008      	b.n	80039d6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3301      	adds	r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80039ca:	220b      	movs	r2, #11
 80039cc:	18bb      	adds	r3, r7, r2
 80039ce:	18ba      	adds	r2, r7, r2
 80039d0:	7812      	ldrb	r2, [r2, #0]
 80039d2:	3a0a      	subs	r2, #10
 80039d4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80039d6:	210b      	movs	r1, #11
 80039d8:	187b      	adds	r3, r7, r1
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b09      	cmp	r3, #9
 80039de:	d8f1      	bhi.n	80039c4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	187b      	adds	r3, r7, r1
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	b2db      	uxtb	r3, r3
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b004      	add	sp, #16
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	0002      	movs	r2, r0
 8003a00:	1dfb      	adds	r3, r7, #7
 8003a02:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003a04:	1dfb      	adds	r3, r7, #7
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	091b      	lsrs	r3, r3, #4
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	001a      	movs	r2, r3
 8003a0e:	0013      	movs	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	189b      	adds	r3, r3, r2
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	1dfb      	adds	r3, r7, #7
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	210f      	movs	r1, #15
 8003a22:	400b      	ands	r3, r1
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	18d3      	adds	r3, r2, r3
 8003a28:	b2db      	uxtb	r3, r3
}
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b004      	add	sp, #16
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b002      	add	sp, #8
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e04a      	b.n	8003aea <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	223d      	movs	r2, #61	; 0x3d
 8003a58:	5c9b      	ldrb	r3, [r3, r2]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d107      	bne.n	8003a70 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	223c      	movs	r2, #60	; 0x3c
 8003a64:	2100      	movs	r1, #0
 8003a66:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f7fd fe7a 	bl	8001764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	223d      	movs	r2, #61	; 0x3d
 8003a74:	2102      	movs	r1, #2
 8003a76:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	0019      	movs	r1, r3
 8003a82:	0010      	movs	r0, r2
 8003a84:	f000 fa00 	bl	8003e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2248      	movs	r2, #72	; 0x48
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	223e      	movs	r2, #62	; 0x3e
 8003a94:	2101      	movs	r1, #1
 8003a96:	5499      	strb	r1, [r3, r2]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	223f      	movs	r2, #63	; 0x3f
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	5499      	strb	r1, [r3, r2]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2240      	movs	r2, #64	; 0x40
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	5499      	strb	r1, [r3, r2]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2241      	movs	r2, #65	; 0x41
 8003aac:	2101      	movs	r1, #1
 8003aae:	5499      	strb	r1, [r3, r2]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2242      	movs	r2, #66	; 0x42
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	5499      	strb	r1, [r3, r2]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2243      	movs	r2, #67	; 0x43
 8003abc:	2101      	movs	r1, #1
 8003abe:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2244      	movs	r2, #68	; 0x44
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	5499      	strb	r1, [r3, r2]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2245      	movs	r2, #69	; 0x45
 8003acc:	2101      	movs	r1, #1
 8003ace:	5499      	strb	r1, [r3, r2]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2246      	movs	r2, #70	; 0x46
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	5499      	strb	r1, [r3, r2]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2247      	movs	r2, #71	; 0x47
 8003adc:	2101      	movs	r1, #1
 8003ade:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	223d      	movs	r2, #61	; 0x3d
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	0018      	movs	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b002      	add	sp, #8
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	223d      	movs	r2, #61	; 0x3d
 8003b00:	5c9b      	ldrb	r3, [r3, r2]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d001      	beq.n	8003b0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e035      	b.n	8003b78 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	223d      	movs	r2, #61	; 0x3d
 8003b10:	2102      	movs	r1, #2
 8003b12:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a19      	ldr	r2, [pc, #100]	; (8003b80 <HAL_TIM_Base_Start+0x8c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00a      	beq.n	8003b34 <HAL_TIM_Base_Start+0x40>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	05db      	lsls	r3, r3, #23
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d004      	beq.n	8003b34 <HAL_TIM_Base_Start+0x40>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <HAL_TIM_Base_Start+0x90>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d116      	bne.n	8003b62 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	4a13      	ldr	r2, [pc, #76]	; (8003b88 <HAL_TIM_Base_Start+0x94>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b06      	cmp	r3, #6
 8003b44:	d016      	beq.n	8003b74 <HAL_TIM_Base_Start+0x80>
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	025b      	lsls	r3, r3, #9
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d011      	beq.n	8003b74 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b60:	e008      	b.n	8003b74 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	e000      	b.n	8003b76 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b74:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b004      	add	sp, #16
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40012c00 	.word	0x40012c00
 8003b84:	40000400 	.word	0x40000400
 8003b88:	00010007 	.word	0x00010007

08003b8c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	4a0d      	ldr	r2, [pc, #52]	; (8003bd0 <HAL_TIM_Base_Stop+0x44>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d10d      	bne.n	8003bbc <HAL_TIM_Base_Stop+0x30>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	4a0b      	ldr	r2, [pc, #44]	; (8003bd4 <HAL_TIM_Base_Stop+0x48>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d107      	bne.n	8003bbc <HAL_TIM_Base_Stop+0x30>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	438a      	bics	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	223d      	movs	r2, #61	; 0x3d
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b002      	add	sp, #8
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	00001111 	.word	0x00001111
 8003bd4:	00000444 	.word	0x00000444

08003bd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e04a      	b.n	8003c80 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	223d      	movs	r2, #61	; 0x3d
 8003bee:	5c9b      	ldrb	r3, [r3, r2]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d107      	bne.n	8003c06 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	223c      	movs	r2, #60	; 0x3c
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f7fd fd79 	bl	80016f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	223d      	movs	r2, #61	; 0x3d
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3304      	adds	r3, #4
 8003c16:	0019      	movs	r1, r3
 8003c18:	0010      	movs	r0, r2
 8003c1a:	f000 f935 	bl	8003e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2248      	movs	r2, #72	; 0x48
 8003c22:	2101      	movs	r1, #1
 8003c24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	223e      	movs	r2, #62	; 0x3e
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	5499      	strb	r1, [r3, r2]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	223f      	movs	r2, #63	; 0x3f
 8003c32:	2101      	movs	r1, #1
 8003c34:	5499      	strb	r1, [r3, r2]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2240      	movs	r2, #64	; 0x40
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	5499      	strb	r1, [r3, r2]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2241      	movs	r2, #65	; 0x41
 8003c42:	2101      	movs	r1, #1
 8003c44:	5499      	strb	r1, [r3, r2]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2242      	movs	r2, #66	; 0x42
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	5499      	strb	r1, [r3, r2]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2243      	movs	r2, #67	; 0x43
 8003c52:	2101      	movs	r1, #1
 8003c54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2244      	movs	r2, #68	; 0x44
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	5499      	strb	r1, [r3, r2]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2245      	movs	r2, #69	; 0x45
 8003c62:	2101      	movs	r1, #1
 8003c64:	5499      	strb	r1, [r3, r2]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2246      	movs	r2, #70	; 0x46
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	5499      	strb	r1, [r3, r2]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2247      	movs	r2, #71	; 0x47
 8003c72:	2101      	movs	r1, #1
 8003c74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	223d      	movs	r2, #61	; 0x3d
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	0018      	movs	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b002      	add	sp, #8
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c94:	2317      	movs	r3, #23
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	223c      	movs	r2, #60	; 0x3c
 8003ca0:	5c9b      	ldrb	r3, [r3, r2]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_PWM_ConfigChannel+0x22>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e0e5      	b.n	8003e76 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	223c      	movs	r2, #60	; 0x3c
 8003cae:	2101      	movs	r1, #1
 8003cb0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b14      	cmp	r3, #20
 8003cb6:	d900      	bls.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x32>
 8003cb8:	e0d1      	b.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	009a      	lsls	r2, r3, #2
 8003cbe:	4b70      	ldr	r3, [pc, #448]	; (8003e80 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003cc0:	18d3      	adds	r3, r2, r3
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	0011      	movs	r1, r2
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f000 f950 	bl	8003f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2108      	movs	r1, #8
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2104      	movs	r1, #4
 8003cf0:	438a      	bics	r2, r1
 8003cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6999      	ldr	r1, [r3, #24]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	619a      	str	r2, [r3, #24]
      break;
 8003d06:	e0af      	b.n	8003e68 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	0011      	movs	r1, r2
 8003d10:	0018      	movs	r0, r3
 8003d12:	f000 f9af 	bl	8004074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699a      	ldr	r2, [r3, #24]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2180      	movs	r1, #128	; 0x80
 8003d22:	0109      	lsls	r1, r1, #4
 8003d24:	430a      	orrs	r2, r1
 8003d26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4954      	ldr	r1, [pc, #336]	; (8003e84 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003d34:	400a      	ands	r2, r1
 8003d36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6999      	ldr	r1, [r3, #24]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	021a      	lsls	r2, r3, #8
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	619a      	str	r2, [r3, #24]
      break;
 8003d4c:	e08c      	b.n	8003e68 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	0011      	movs	r1, r2
 8003d56:	0018      	movs	r0, r3
 8003d58:	f000 fa0a 	bl	8004170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69da      	ldr	r2, [r3, #28]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2108      	movs	r1, #8
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	69da      	ldr	r2, [r3, #28]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2104      	movs	r1, #4
 8003d78:	438a      	bics	r2, r1
 8003d7a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69d9      	ldr	r1, [r3, #28]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	61da      	str	r2, [r3, #28]
      break;
 8003d8e:	e06b      	b.n	8003e68 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	0011      	movs	r1, r2
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f000 fa6b 	bl	8004274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69da      	ldr	r2, [r3, #28]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2180      	movs	r1, #128	; 0x80
 8003daa:	0109      	lsls	r1, r1, #4
 8003dac:	430a      	orrs	r2, r1
 8003dae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	69da      	ldr	r2, [r3, #28]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4932      	ldr	r1, [pc, #200]	; (8003e84 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003dbc:	400a      	ands	r2, r1
 8003dbe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	69d9      	ldr	r1, [r3, #28]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	021a      	lsls	r2, r3, #8
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	61da      	str	r2, [r3, #28]
      break;
 8003dd4:	e048      	b.n	8003e68 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	0011      	movs	r1, r2
 8003dde:	0018      	movs	r0, r3
 8003de0:	f000 faac 	bl	800433c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2108      	movs	r1, #8
 8003df0:	430a      	orrs	r2, r1
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2104      	movs	r1, #4
 8003e00:	438a      	bics	r2, r1
 8003e02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	691a      	ldr	r2, [r3, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e16:	e027      	b.n	8003e68 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	0011      	movs	r1, r2
 8003e20:	0018      	movs	r0, r3
 8003e22:	f000 fae5 	bl	80043f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2180      	movs	r1, #128	; 0x80
 8003e32:	0109      	lsls	r1, r1, #4
 8003e34:	430a      	orrs	r2, r1
 8003e36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4910      	ldr	r1, [pc, #64]	; (8003e84 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003e44:	400a      	ands	r2, r1
 8003e46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	021a      	lsls	r2, r3, #8
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e5c:	e004      	b.n	8003e68 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003e5e:	2317      	movs	r3, #23
 8003e60:	18fb      	adds	r3, r7, r3
 8003e62:	2201      	movs	r2, #1
 8003e64:	701a      	strb	r2, [r3, #0]
      break;
 8003e66:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	223c      	movs	r2, #60	; 0x3c
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	5499      	strb	r1, [r3, r2]

  return status;
 8003e70:	2317      	movs	r3, #23
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	781b      	ldrb	r3, [r3, #0]
}
 8003e76:	0018      	movs	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b006      	add	sp, #24
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	08006580 	.word	0x08006580
 8003e84:	fffffbff 	.word	0xfffffbff

08003e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a30      	ldr	r2, [pc, #192]	; (8003f5c <TIM_Base_SetConfig+0xd4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d008      	beq.n	8003eb2 <TIM_Base_SetConfig+0x2a>
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	05db      	lsls	r3, r3, #23
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d003      	beq.n	8003eb2 <TIM_Base_SetConfig+0x2a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a2c      	ldr	r2, [pc, #176]	; (8003f60 <TIM_Base_SetConfig+0xd8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d108      	bne.n	8003ec4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2270      	movs	r2, #112	; 0x70
 8003eb6:	4393      	bics	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a25      	ldr	r2, [pc, #148]	; (8003f5c <TIM_Base_SetConfig+0xd4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d014      	beq.n	8003ef6 <TIM_Base_SetConfig+0x6e>
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	2380      	movs	r3, #128	; 0x80
 8003ed0:	05db      	lsls	r3, r3, #23
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d00f      	beq.n	8003ef6 <TIM_Base_SetConfig+0x6e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a21      	ldr	r2, [pc, #132]	; (8003f60 <TIM_Base_SetConfig+0xd8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00b      	beq.n	8003ef6 <TIM_Base_SetConfig+0x6e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a20      	ldr	r2, [pc, #128]	; (8003f64 <TIM_Base_SetConfig+0xdc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d007      	beq.n	8003ef6 <TIM_Base_SetConfig+0x6e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a1f      	ldr	r2, [pc, #124]	; (8003f68 <TIM_Base_SetConfig+0xe0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d003      	beq.n	8003ef6 <TIM_Base_SetConfig+0x6e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a1e      	ldr	r2, [pc, #120]	; (8003f6c <TIM_Base_SetConfig+0xe4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d108      	bne.n	8003f08 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	; (8003f70 <TIM_Base_SetConfig+0xe8>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2280      	movs	r2, #128	; 0x80
 8003f0c:	4393      	bics	r3, r2
 8003f0e:	001a      	movs	r2, r3
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a0a      	ldr	r2, [pc, #40]	; (8003f5c <TIM_Base_SetConfig+0xd4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d007      	beq.n	8003f46 <TIM_Base_SetConfig+0xbe>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <TIM_Base_SetConfig+0xe0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d003      	beq.n	8003f46 <TIM_Base_SetConfig+0xbe>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a0a      	ldr	r2, [pc, #40]	; (8003f6c <TIM_Base_SetConfig+0xe4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d103      	bne.n	8003f4e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	615a      	str	r2, [r3, #20]
}
 8003f54:	46c0      	nop			; (mov r8, r8)
 8003f56:	46bd      	mov	sp, r7
 8003f58:	b004      	add	sp, #16
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	40000400 	.word	0x40000400
 8003f64:	40002000 	.word	0x40002000
 8003f68:	40014400 	.word	0x40014400
 8003f6c:	40014800 	.word	0x40014800
 8003f70:	fffffcff 	.word	0xfffffcff

08003f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	2201      	movs	r2, #1
 8003f84:	4393      	bics	r3, r2
 8003f86:	001a      	movs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4a2e      	ldr	r2, [pc, #184]	; (800405c <TIM_OC1_SetConfig+0xe8>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2203      	movs	r2, #3
 8003faa:	4393      	bics	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	4393      	bics	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a24      	ldr	r2, [pc, #144]	; (8004060 <TIM_OC1_SetConfig+0xec>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d007      	beq.n	8003fe2 <TIM_OC1_SetConfig+0x6e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a23      	ldr	r2, [pc, #140]	; (8004064 <TIM_OC1_SetConfig+0xf0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <TIM_OC1_SetConfig+0x6e>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a22      	ldr	r2, [pc, #136]	; (8004068 <TIM_OC1_SetConfig+0xf4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d10c      	bne.n	8003ffc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	4393      	bics	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2204      	movs	r2, #4
 8003ff8:	4393      	bics	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a18      	ldr	r2, [pc, #96]	; (8004060 <TIM_OC1_SetConfig+0xec>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d007      	beq.n	8004014 <TIM_OC1_SetConfig+0xa0>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a17      	ldr	r2, [pc, #92]	; (8004064 <TIM_OC1_SetConfig+0xf0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d003      	beq.n	8004014 <TIM_OC1_SetConfig+0xa0>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a16      	ldr	r2, [pc, #88]	; (8004068 <TIM_OC1_SetConfig+0xf4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d111      	bne.n	8004038 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4a15      	ldr	r2, [pc, #84]	; (800406c <TIM_OC1_SetConfig+0xf8>)
 8004018:	4013      	ands	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4a14      	ldr	r2, [pc, #80]	; (8004070 <TIM_OC1_SetConfig+0xfc>)
 8004020:	4013      	ands	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	621a      	str	r2, [r3, #32]
}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	46bd      	mov	sp, r7
 8004056:	b006      	add	sp, #24
 8004058:	bd80      	pop	{r7, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	fffeff8f 	.word	0xfffeff8f
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40014400 	.word	0x40014400
 8004068:	40014800 	.word	0x40014800
 800406c:	fffffeff 	.word	0xfffffeff
 8004070:	fffffdff 	.word	0xfffffdff

08004074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	2210      	movs	r2, #16
 8004084:	4393      	bics	r3, r2
 8004086:	001a      	movs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4a2c      	ldr	r2, [pc, #176]	; (8004154 <TIM_OC2_SetConfig+0xe0>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4a2b      	ldr	r2, [pc, #172]	; (8004158 <TIM_OC2_SetConfig+0xe4>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2220      	movs	r2, #32
 80040be:	4393      	bics	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a22      	ldr	r2, [pc, #136]	; (800415c <TIM_OC2_SetConfig+0xe8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d10d      	bne.n	80040f2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2280      	movs	r2, #128	; 0x80
 80040da:	4393      	bics	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2240      	movs	r2, #64	; 0x40
 80040ee:	4393      	bics	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a19      	ldr	r2, [pc, #100]	; (800415c <TIM_OC2_SetConfig+0xe8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d007      	beq.n	800410a <TIM_OC2_SetConfig+0x96>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a18      	ldr	r2, [pc, #96]	; (8004160 <TIM_OC2_SetConfig+0xec>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d003      	beq.n	800410a <TIM_OC2_SetConfig+0x96>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a17      	ldr	r2, [pc, #92]	; (8004164 <TIM_OC2_SetConfig+0xf0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d113      	bne.n	8004132 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4a16      	ldr	r2, [pc, #88]	; (8004168 <TIM_OC2_SetConfig+0xf4>)
 800410e:	4013      	ands	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4a15      	ldr	r2, [pc, #84]	; (800416c <TIM_OC2_SetConfig+0xf8>)
 8004116:	4013      	ands	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	621a      	str	r2, [r3, #32]
}
 800414c:	46c0      	nop			; (mov r8, r8)
 800414e:	46bd      	mov	sp, r7
 8004150:	b006      	add	sp, #24
 8004152:	bd80      	pop	{r7, pc}
 8004154:	feff8fff 	.word	0xfeff8fff
 8004158:	fffffcff 	.word	0xfffffcff
 800415c:	40012c00 	.word	0x40012c00
 8004160:	40014400 	.word	0x40014400
 8004164:	40014800 	.word	0x40014800
 8004168:	fffffbff 	.word	0xfffffbff
 800416c:	fffff7ff 	.word	0xfffff7ff

08004170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	4a33      	ldr	r2, [pc, #204]	; (800424c <TIM_OC3_SetConfig+0xdc>)
 8004180:	401a      	ands	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4a2d      	ldr	r2, [pc, #180]	; (8004250 <TIM_OC3_SetConfig+0xe0>)
 800419c:	4013      	ands	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2203      	movs	r2, #3
 80041a4:	4393      	bics	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	4a27      	ldr	r2, [pc, #156]	; (8004254 <TIM_OC3_SetConfig+0xe4>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	021b      	lsls	r3, r3, #8
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a23      	ldr	r2, [pc, #140]	; (8004258 <TIM_OC3_SetConfig+0xe8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d10d      	bne.n	80041ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	4a22      	ldr	r2, [pc, #136]	; (800425c <TIM_OC3_SetConfig+0xec>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	4a1e      	ldr	r2, [pc, #120]	; (8004260 <TIM_OC3_SetConfig+0xf0>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a1a      	ldr	r2, [pc, #104]	; (8004258 <TIM_OC3_SetConfig+0xe8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d007      	beq.n	8004202 <TIM_OC3_SetConfig+0x92>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a1b      	ldr	r2, [pc, #108]	; (8004264 <TIM_OC3_SetConfig+0xf4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d003      	beq.n	8004202 <TIM_OC3_SetConfig+0x92>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a1a      	ldr	r2, [pc, #104]	; (8004268 <TIM_OC3_SetConfig+0xf8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d113      	bne.n	800422a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	4a19      	ldr	r2, [pc, #100]	; (800426c <TIM_OC3_SetConfig+0xfc>)
 8004206:	4013      	ands	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4a18      	ldr	r2, [pc, #96]	; (8004270 <TIM_OC3_SetConfig+0x100>)
 800420e:	4013      	ands	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	621a      	str	r2, [r3, #32]
}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b006      	add	sp, #24
 800424a:	bd80      	pop	{r7, pc}
 800424c:	fffffeff 	.word	0xfffffeff
 8004250:	fffeff8f 	.word	0xfffeff8f
 8004254:	fffffdff 	.word	0xfffffdff
 8004258:	40012c00 	.word	0x40012c00
 800425c:	fffff7ff 	.word	0xfffff7ff
 8004260:	fffffbff 	.word	0xfffffbff
 8004264:	40014400 	.word	0x40014400
 8004268:	40014800 	.word	0x40014800
 800426c:	ffffefff 	.word	0xffffefff
 8004270:	ffffdfff 	.word	0xffffdfff

08004274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	4a26      	ldr	r2, [pc, #152]	; (800431c <TIM_OC4_SetConfig+0xa8>)
 8004284:	401a      	ands	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4a20      	ldr	r2, [pc, #128]	; (8004320 <TIM_OC4_SetConfig+0xac>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4a1f      	ldr	r2, [pc, #124]	; (8004324 <TIM_OC4_SetConfig+0xb0>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	4a1b      	ldr	r2, [pc, #108]	; (8004328 <TIM_OC4_SetConfig+0xb4>)
 80042bc:	4013      	ands	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	031b      	lsls	r3, r3, #12
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a17      	ldr	r2, [pc, #92]	; (800432c <TIM_OC4_SetConfig+0xb8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d007      	beq.n	80042e4 <TIM_OC4_SetConfig+0x70>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a16      	ldr	r2, [pc, #88]	; (8004330 <TIM_OC4_SetConfig+0xbc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d003      	beq.n	80042e4 <TIM_OC4_SetConfig+0x70>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a15      	ldr	r2, [pc, #84]	; (8004334 <TIM_OC4_SetConfig+0xc0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d109      	bne.n	80042f8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	4a14      	ldr	r2, [pc, #80]	; (8004338 <TIM_OC4_SetConfig+0xc4>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	019b      	lsls	r3, r3, #6
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	46bd      	mov	sp, r7
 8004316:	b006      	add	sp, #24
 8004318:	bd80      	pop	{r7, pc}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	ffffefff 	.word	0xffffefff
 8004320:	feff8fff 	.word	0xfeff8fff
 8004324:	fffffcff 	.word	0xfffffcff
 8004328:	ffffdfff 	.word	0xffffdfff
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800
 8004338:	ffffbfff 	.word	0xffffbfff

0800433c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	4a23      	ldr	r2, [pc, #140]	; (80043d8 <TIM_OC5_SetConfig+0x9c>)
 800434c:	401a      	ands	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4a1d      	ldr	r2, [pc, #116]	; (80043dc <TIM_OC5_SetConfig+0xa0>)
 8004368:	4013      	ands	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	4a19      	ldr	r2, [pc, #100]	; (80043e0 <TIM_OC5_SetConfig+0xa4>)
 800437a:	4013      	ands	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	041b      	lsls	r3, r3, #16
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <TIM_OC5_SetConfig+0xa8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d007      	beq.n	80043a2 <TIM_OC5_SetConfig+0x66>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a14      	ldr	r2, [pc, #80]	; (80043e8 <TIM_OC5_SetConfig+0xac>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d003      	beq.n	80043a2 <TIM_OC5_SetConfig+0x66>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a13      	ldr	r2, [pc, #76]	; (80043ec <TIM_OC5_SetConfig+0xb0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d109      	bne.n	80043b6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	4a0c      	ldr	r2, [pc, #48]	; (80043d8 <TIM_OC5_SetConfig+0x9c>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	021b      	lsls	r3, r3, #8
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	621a      	str	r2, [r3, #32]
}
 80043d0:	46c0      	nop			; (mov r8, r8)
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b006      	add	sp, #24
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	fffeffff 	.word	0xfffeffff
 80043dc:	fffeff8f 	.word	0xfffeff8f
 80043e0:	fffdffff 	.word	0xfffdffff
 80043e4:	40012c00 	.word	0x40012c00
 80043e8:	40014400 	.word	0x40014400
 80043ec:	40014800 	.word	0x40014800

080043f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	4a24      	ldr	r2, [pc, #144]	; (8004490 <TIM_OC6_SetConfig+0xa0>)
 8004400:	401a      	ands	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4a1e      	ldr	r2, [pc, #120]	; (8004494 <TIM_OC6_SetConfig+0xa4>)
 800441c:	4013      	ands	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4a1a      	ldr	r2, [pc, #104]	; (8004498 <TIM_OC6_SetConfig+0xa8>)
 8004430:	4013      	ands	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	051b      	lsls	r3, r3, #20
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a16      	ldr	r2, [pc, #88]	; (800449c <TIM_OC6_SetConfig+0xac>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d007      	beq.n	8004458 <TIM_OC6_SetConfig+0x68>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <TIM_OC6_SetConfig+0xb0>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d003      	beq.n	8004458 <TIM_OC6_SetConfig+0x68>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a14      	ldr	r2, [pc, #80]	; (80044a4 <TIM_OC6_SetConfig+0xb4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d109      	bne.n	800446c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	4a13      	ldr	r2, [pc, #76]	; (80044a8 <TIM_OC6_SetConfig+0xb8>)
 800445c:	4013      	ands	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	029b      	lsls	r3, r3, #10
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	621a      	str	r2, [r3, #32]
}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	46bd      	mov	sp, r7
 800448a:	b006      	add	sp, #24
 800448c:	bd80      	pop	{r7, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	ffefffff 	.word	0xffefffff
 8004494:	feff8fff 	.word	0xfeff8fff
 8004498:	ffdfffff 	.word	0xffdfffff
 800449c:	40012c00 	.word	0x40012c00
 80044a0:	40014400 	.word	0x40014400
 80044a4:	40014800 	.word	0x40014800
 80044a8:	fffbffff 	.word	0xfffbffff

080044ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	223c      	movs	r2, #60	; 0x3c
 80044ba:	5c9b      	ldrb	r3, [r3, r2]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e050      	b.n	8004566 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	223c      	movs	r2, #60	; 0x3c
 80044c8:	2101      	movs	r1, #1
 80044ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	223d      	movs	r2, #61	; 0x3d
 80044d0:	2102      	movs	r1, #2
 80044d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a21      	ldr	r2, [pc, #132]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d108      	bne.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a20      	ldr	r2, [pc, #128]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2270      	movs	r2, #112	; 0x70
 8004504:	4393      	bics	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a14      	ldr	r2, [pc, #80]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00a      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	2380      	movs	r3, #128	; 0x80
 800452a:	05db      	lsls	r3, r3, #23
 800452c:	429a      	cmp	r2, r3
 800452e:	d004      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a10      	ldr	r2, [pc, #64]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d10c      	bne.n	8004554 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2280      	movs	r2, #128	; 0x80
 800453e:	4393      	bics	r3, r2
 8004540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	4313      	orrs	r3, r2
 800454a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	223d      	movs	r2, #61	; 0x3d
 8004558:	2101      	movs	r1, #1
 800455a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	223c      	movs	r2, #60	; 0x3c
 8004560:	2100      	movs	r1, #0
 8004562:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	0018      	movs	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	b004      	add	sp, #16
 800456c:	bd80      	pop	{r7, pc}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	40012c00 	.word	0x40012c00
 8004574:	ff0fffff 	.word	0xff0fffff
 8004578:	40000400 	.word	0x40000400

0800457c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	223c      	movs	r2, #60	; 0x3c
 800458e:	5c9b      	ldrb	r3, [r3, r2]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004594:	2302      	movs	r3, #2
 8004596:	e079      	b.n	800468c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	223c      	movs	r2, #60	; 0x3c
 800459c:	2101      	movs	r1, #1
 800459e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	22ff      	movs	r2, #255	; 0xff
 80045a4:	4393      	bics	r3, r2
 80045a6:	001a      	movs	r2, r3
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4a38      	ldr	r2, [pc, #224]	; (8004694 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80045b4:	401a      	ands	r2, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4a35      	ldr	r2, [pc, #212]	; (8004698 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80045c2:	401a      	ands	r2, r3
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4a33      	ldr	r2, [pc, #204]	; (800469c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80045d0:	401a      	ands	r2, r3
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4a30      	ldr	r2, [pc, #192]	; (80046a0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80045de:	401a      	ands	r2, r3
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4a2e      	ldr	r2, [pc, #184]	; (80046a4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80045ec:	401a      	ands	r2, r3
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4a2b      	ldr	r2, [pc, #172]	; (80046a8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80045fa:	401a      	ands	r2, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4a29      	ldr	r2, [pc, #164]	; (80046ac <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004608:	401a      	ands	r2, r3
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	041b      	lsls	r3, r3, #16
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a25      	ldr	r2, [pc, #148]	; (80046b0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d106      	bne.n	800462c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4a24      	ldr	r2, [pc, #144]	; (80046b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004622:	401a      	ands	r2, r3
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a1f      	ldr	r2, [pc, #124]	; (80046b0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d121      	bne.n	800467a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4a1f      	ldr	r2, [pc, #124]	; (80046b8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800463a:	401a      	ands	r2, r3
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	051b      	lsls	r3, r3, #20
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800464a:	401a      	ands	r2, r3
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4a1a      	ldr	r2, [pc, #104]	; (80046c0 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004658:	401a      	ands	r2, r3
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a12      	ldr	r2, [pc, #72]	; (80046b0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d106      	bne.n	800467a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4a15      	ldr	r2, [pc, #84]	; (80046c4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004670:	401a      	ands	r2, r3
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	223c      	movs	r2, #60	; 0x3c
 8004686:	2100      	movs	r1, #0
 8004688:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	0018      	movs	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	b004      	add	sp, #16
 8004692:	bd80      	pop	{r7, pc}
 8004694:	fffffcff 	.word	0xfffffcff
 8004698:	fffffbff 	.word	0xfffffbff
 800469c:	fffff7ff 	.word	0xfffff7ff
 80046a0:	ffffefff 	.word	0xffffefff
 80046a4:	ffffdfff 	.word	0xffffdfff
 80046a8:	ffffbfff 	.word	0xffffbfff
 80046ac:	fff0ffff 	.word	0xfff0ffff
 80046b0:	40012c00 	.word	0x40012c00
 80046b4:	efffffff 	.word	0xefffffff
 80046b8:	ff0fffff 	.word	0xff0fffff
 80046bc:	feffffff 	.word	0xfeffffff
 80046c0:	fdffffff 	.word	0xfdffffff
 80046c4:	dfffffff 	.word	0xdfffffff

080046c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e046      	b.n	8004768 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2288      	movs	r2, #136	; 0x88
 80046de:	589b      	ldr	r3, [r3, r2]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d107      	bne.n	80046f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2284      	movs	r2, #132	; 0x84
 80046e8:	2100      	movs	r1, #0
 80046ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	0018      	movs	r0, r3
 80046f0:	f7fd f896 	bl	8001820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2288      	movs	r2, #136	; 0x88
 80046f8:	2124      	movs	r1, #36	; 0x24
 80046fa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2101      	movs	r1, #1
 8004708:	438a      	bics	r2, r1
 800470a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	0018      	movs	r0, r3
 8004710:	f000 f8cc 	bl	80048ac <UART_SetConfig>
 8004714:	0003      	movs	r3, r0
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e024      	b.n	8004768 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	0018      	movs	r0, r3
 800472a:	f000 fb37 	bl	8004d9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	490d      	ldr	r1, [pc, #52]	; (8004770 <HAL_UART_Init+0xa8>)
 800473a:	400a      	ands	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	212a      	movs	r1, #42	; 0x2a
 800474a:	438a      	bics	r2, r1
 800474c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2101      	movs	r1, #1
 800475a:	430a      	orrs	r2, r1
 800475c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	0018      	movs	r0, r3
 8004762:	f000 fbcf 	bl	8004f04 <UART_CheckIdleState>
 8004766:	0003      	movs	r3, r0
}
 8004768:	0018      	movs	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	b002      	add	sp, #8
 800476e:	bd80      	pop	{r7, pc}
 8004770:	ffffb7ff 	.word	0xffffb7ff

08004774 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08a      	sub	sp, #40	; 0x28
 8004778:	af02      	add	r7, sp, #8
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	1dbb      	adds	r3, r7, #6
 8004782:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2288      	movs	r2, #136	; 0x88
 8004788:	589b      	ldr	r3, [r3, r2]
 800478a:	2b20      	cmp	r3, #32
 800478c:	d000      	beq.n	8004790 <HAL_UART_Transmit+0x1c>
 800478e:	e088      	b.n	80048a2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_UART_Transmit+0x2a>
 8004796:	1dbb      	adds	r3, r7, #6
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e080      	b.n	80048a4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	2380      	movs	r3, #128	; 0x80
 80047a8:	015b      	lsls	r3, r3, #5
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d109      	bne.n	80047c2 <HAL_UART_Transmit+0x4e>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d105      	bne.n	80047c2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2201      	movs	r2, #1
 80047ba:	4013      	ands	r3, r2
 80047bc:	d001      	beq.n	80047c2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e070      	b.n	80048a4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2290      	movs	r2, #144	; 0x90
 80047c6:	2100      	movs	r1, #0
 80047c8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2288      	movs	r2, #136	; 0x88
 80047ce:	2121      	movs	r1, #33	; 0x21
 80047d0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047d2:	f7fd fa03 	bl	8001bdc <HAL_GetTick>
 80047d6:	0003      	movs	r3, r0
 80047d8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1dba      	adds	r2, r7, #6
 80047de:	2154      	movs	r1, #84	; 0x54
 80047e0:	8812      	ldrh	r2, [r2, #0]
 80047e2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	1dba      	adds	r2, r7, #6
 80047e8:	2156      	movs	r1, #86	; 0x56
 80047ea:	8812      	ldrh	r2, [r2, #0]
 80047ec:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	2380      	movs	r3, #128	; 0x80
 80047f4:	015b      	lsls	r3, r3, #5
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d108      	bne.n	800480c <HAL_UART_Transmit+0x98>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d104      	bne.n	800480c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	61bb      	str	r3, [r7, #24]
 800480a:	e003      	b.n	8004814 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004810:	2300      	movs	r3, #0
 8004812:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004814:	e02c      	b.n	8004870 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	0013      	movs	r3, r2
 8004820:	2200      	movs	r2, #0
 8004822:	2180      	movs	r1, #128	; 0x80
 8004824:	f000 fbbc 	bl	8004fa0 <UART_WaitOnFlagUntilTimeout>
 8004828:	1e03      	subs	r3, r0, #0
 800482a:	d001      	beq.n	8004830 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e039      	b.n	80048a4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10b      	bne.n	800484e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	001a      	movs	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	05d2      	lsls	r2, r2, #23
 8004842:	0dd2      	lsrs	r2, r2, #23
 8004844:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	3302      	adds	r3, #2
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	e007      	b.n	800485e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	3301      	adds	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2256      	movs	r2, #86	; 0x56
 8004862:	5a9b      	ldrh	r3, [r3, r2]
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b299      	uxth	r1, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2256      	movs	r2, #86	; 0x56
 800486e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2256      	movs	r2, #86	; 0x56
 8004874:	5a9b      	ldrh	r3, [r3, r2]
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1cc      	bne.n	8004816 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	0013      	movs	r3, r2
 8004886:	2200      	movs	r2, #0
 8004888:	2140      	movs	r1, #64	; 0x40
 800488a:	f000 fb89 	bl	8004fa0 <UART_WaitOnFlagUntilTimeout>
 800488e:	1e03      	subs	r3, r0, #0
 8004890:	d001      	beq.n	8004896 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e006      	b.n	80048a4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2288      	movs	r2, #136	; 0x88
 800489a:	2120      	movs	r1, #32
 800489c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	e000      	b.n	80048a4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80048a2:	2302      	movs	r3, #2
  }
}
 80048a4:	0018      	movs	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b008      	add	sp, #32
 80048aa:	bd80      	pop	{r7, pc}

080048ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048ac:	b5b0      	push	{r4, r5, r7, lr}
 80048ae:	b090      	sub	sp, #64	; 0x40
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048b4:	231a      	movs	r3, #26
 80048b6:	2220      	movs	r2, #32
 80048b8:	189b      	adds	r3, r3, r2
 80048ba:	19db      	adds	r3, r3, r7
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	431a      	orrs	r2, r3
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4ac4      	ldr	r2, [pc, #784]	; (8004bf0 <UART_SetConfig+0x344>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	0019      	movs	r1, r3
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ea:	430b      	orrs	r3, r1
 80048ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	4abf      	ldr	r2, [pc, #764]	; (8004bf4 <UART_SetConfig+0x348>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	0018      	movs	r0, r3
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	68d9      	ldr	r1, [r3, #12]
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	0003      	movs	r3, r0
 8004904:	430b      	orrs	r3, r1
 8004906:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4ab9      	ldr	r2, [pc, #740]	; (8004bf8 <UART_SetConfig+0x34c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d004      	beq.n	8004922 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800491e:	4313      	orrs	r3, r2
 8004920:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	4ab4      	ldr	r2, [pc, #720]	; (8004bfc <UART_SetConfig+0x350>)
 800492a:	4013      	ands	r3, r2
 800492c:	0019      	movs	r1, r3
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004934:	430b      	orrs	r3, r1
 8004936:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	220f      	movs	r2, #15
 8004940:	4393      	bics	r3, r2
 8004942:	0018      	movs	r0, r3
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	0003      	movs	r3, r0
 800494e:	430b      	orrs	r3, r1
 8004950:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4aaa      	ldr	r2, [pc, #680]	; (8004c00 <UART_SetConfig+0x354>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d131      	bne.n	80049c0 <UART_SetConfig+0x114>
 800495c:	4ba9      	ldr	r3, [pc, #676]	; (8004c04 <UART_SetConfig+0x358>)
 800495e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004960:	2203      	movs	r2, #3
 8004962:	4013      	ands	r3, r2
 8004964:	2b03      	cmp	r3, #3
 8004966:	d01d      	beq.n	80049a4 <UART_SetConfig+0xf8>
 8004968:	d823      	bhi.n	80049b2 <UART_SetConfig+0x106>
 800496a:	2b02      	cmp	r3, #2
 800496c:	d00c      	beq.n	8004988 <UART_SetConfig+0xdc>
 800496e:	d820      	bhi.n	80049b2 <UART_SetConfig+0x106>
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <UART_SetConfig+0xce>
 8004974:	2b01      	cmp	r3, #1
 8004976:	d00e      	beq.n	8004996 <UART_SetConfig+0xea>
 8004978:	e01b      	b.n	80049b2 <UART_SetConfig+0x106>
 800497a:	231b      	movs	r3, #27
 800497c:	2220      	movs	r2, #32
 800497e:	189b      	adds	r3, r3, r2
 8004980:	19db      	adds	r3, r3, r7
 8004982:	2200      	movs	r2, #0
 8004984:	701a      	strb	r2, [r3, #0]
 8004986:	e071      	b.n	8004a6c <UART_SetConfig+0x1c0>
 8004988:	231b      	movs	r3, #27
 800498a:	2220      	movs	r2, #32
 800498c:	189b      	adds	r3, r3, r2
 800498e:	19db      	adds	r3, r3, r7
 8004990:	2202      	movs	r2, #2
 8004992:	701a      	strb	r2, [r3, #0]
 8004994:	e06a      	b.n	8004a6c <UART_SetConfig+0x1c0>
 8004996:	231b      	movs	r3, #27
 8004998:	2220      	movs	r2, #32
 800499a:	189b      	adds	r3, r3, r2
 800499c:	19db      	adds	r3, r3, r7
 800499e:	2204      	movs	r2, #4
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	e063      	b.n	8004a6c <UART_SetConfig+0x1c0>
 80049a4:	231b      	movs	r3, #27
 80049a6:	2220      	movs	r2, #32
 80049a8:	189b      	adds	r3, r3, r2
 80049aa:	19db      	adds	r3, r3, r7
 80049ac:	2208      	movs	r2, #8
 80049ae:	701a      	strb	r2, [r3, #0]
 80049b0:	e05c      	b.n	8004a6c <UART_SetConfig+0x1c0>
 80049b2:	231b      	movs	r3, #27
 80049b4:	2220      	movs	r2, #32
 80049b6:	189b      	adds	r3, r3, r2
 80049b8:	19db      	adds	r3, r3, r7
 80049ba:	2210      	movs	r2, #16
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	e055      	b.n	8004a6c <UART_SetConfig+0x1c0>
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a90      	ldr	r2, [pc, #576]	; (8004c08 <UART_SetConfig+0x35c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d106      	bne.n	80049d8 <UART_SetConfig+0x12c>
 80049ca:	231b      	movs	r3, #27
 80049cc:	2220      	movs	r2, #32
 80049ce:	189b      	adds	r3, r3, r2
 80049d0:	19db      	adds	r3, r3, r7
 80049d2:	2200      	movs	r2, #0
 80049d4:	701a      	strb	r2, [r3, #0]
 80049d6:	e049      	b.n	8004a6c <UART_SetConfig+0x1c0>
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a86      	ldr	r2, [pc, #536]	; (8004bf8 <UART_SetConfig+0x34c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d13e      	bne.n	8004a60 <UART_SetConfig+0x1b4>
 80049e2:	4b88      	ldr	r3, [pc, #544]	; (8004c04 <UART_SetConfig+0x358>)
 80049e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049e6:	23c0      	movs	r3, #192	; 0xc0
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	4013      	ands	r3, r2
 80049ec:	22c0      	movs	r2, #192	; 0xc0
 80049ee:	0112      	lsls	r2, r2, #4
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d027      	beq.n	8004a44 <UART_SetConfig+0x198>
 80049f4:	22c0      	movs	r2, #192	; 0xc0
 80049f6:	0112      	lsls	r2, r2, #4
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d82a      	bhi.n	8004a52 <UART_SetConfig+0x1a6>
 80049fc:	2280      	movs	r2, #128	; 0x80
 80049fe:	0112      	lsls	r2, r2, #4
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d011      	beq.n	8004a28 <UART_SetConfig+0x17c>
 8004a04:	2280      	movs	r2, #128	; 0x80
 8004a06:	0112      	lsls	r2, r2, #4
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d822      	bhi.n	8004a52 <UART_SetConfig+0x1a6>
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d004      	beq.n	8004a1a <UART_SetConfig+0x16e>
 8004a10:	2280      	movs	r2, #128	; 0x80
 8004a12:	00d2      	lsls	r2, r2, #3
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <UART_SetConfig+0x18a>
 8004a18:	e01b      	b.n	8004a52 <UART_SetConfig+0x1a6>
 8004a1a:	231b      	movs	r3, #27
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	189b      	adds	r3, r3, r2
 8004a20:	19db      	adds	r3, r3, r7
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	e021      	b.n	8004a6c <UART_SetConfig+0x1c0>
 8004a28:	231b      	movs	r3, #27
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	189b      	adds	r3, r3, r2
 8004a2e:	19db      	adds	r3, r3, r7
 8004a30:	2202      	movs	r2, #2
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	e01a      	b.n	8004a6c <UART_SetConfig+0x1c0>
 8004a36:	231b      	movs	r3, #27
 8004a38:	2220      	movs	r2, #32
 8004a3a:	189b      	adds	r3, r3, r2
 8004a3c:	19db      	adds	r3, r3, r7
 8004a3e:	2204      	movs	r2, #4
 8004a40:	701a      	strb	r2, [r3, #0]
 8004a42:	e013      	b.n	8004a6c <UART_SetConfig+0x1c0>
 8004a44:	231b      	movs	r3, #27
 8004a46:	2220      	movs	r2, #32
 8004a48:	189b      	adds	r3, r3, r2
 8004a4a:	19db      	adds	r3, r3, r7
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	e00c      	b.n	8004a6c <UART_SetConfig+0x1c0>
 8004a52:	231b      	movs	r3, #27
 8004a54:	2220      	movs	r2, #32
 8004a56:	189b      	adds	r3, r3, r2
 8004a58:	19db      	adds	r3, r3, r7
 8004a5a:	2210      	movs	r2, #16
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	e005      	b.n	8004a6c <UART_SetConfig+0x1c0>
 8004a60:	231b      	movs	r3, #27
 8004a62:	2220      	movs	r2, #32
 8004a64:	189b      	adds	r3, r3, r2
 8004a66:	19db      	adds	r3, r3, r7
 8004a68:	2210      	movs	r2, #16
 8004a6a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a61      	ldr	r2, [pc, #388]	; (8004bf8 <UART_SetConfig+0x34c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d000      	beq.n	8004a78 <UART_SetConfig+0x1cc>
 8004a76:	e092      	b.n	8004b9e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a78:	231b      	movs	r3, #27
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	189b      	adds	r3, r3, r2
 8004a7e:	19db      	adds	r3, r3, r7
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d015      	beq.n	8004ab2 <UART_SetConfig+0x206>
 8004a86:	dc18      	bgt.n	8004aba <UART_SetConfig+0x20e>
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d00d      	beq.n	8004aa8 <UART_SetConfig+0x1fc>
 8004a8c:	dc15      	bgt.n	8004aba <UART_SetConfig+0x20e>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <UART_SetConfig+0x1ec>
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d005      	beq.n	8004aa2 <UART_SetConfig+0x1f6>
 8004a96:	e010      	b.n	8004aba <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a98:	f7fe f87e 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004aa0:	e014      	b.n	8004acc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aa2:	4b5a      	ldr	r3, [pc, #360]	; (8004c0c <UART_SetConfig+0x360>)
 8004aa4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004aa6:	e011      	b.n	8004acc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa8:	f7fd ffea 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8004aac:	0003      	movs	r3, r0
 8004aae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ab0:	e00c      	b.n	8004acc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ab2:	2380      	movs	r3, #128	; 0x80
 8004ab4:	021b      	lsls	r3, r3, #8
 8004ab6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ab8:	e008      	b.n	8004acc <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004abe:	231a      	movs	r3, #26
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	189b      	adds	r3, r3, r2
 8004ac4:	19db      	adds	r3, r3, r7
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	701a      	strb	r2, [r3, #0]
        break;
 8004aca:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d100      	bne.n	8004ad4 <UART_SetConfig+0x228>
 8004ad2:	e147      	b.n	8004d64 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ad8:	4b4d      	ldr	r3, [pc, #308]	; (8004c10 <UART_SetConfig+0x364>)
 8004ada:	0052      	lsls	r2, r2, #1
 8004adc:	5ad3      	ldrh	r3, [r2, r3]
 8004ade:	0019      	movs	r1, r3
 8004ae0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ae2:	f7fb fb19 	bl	8000118 <__udivsi3>
 8004ae6:	0003      	movs	r3, r0
 8004ae8:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	0013      	movs	r3, r2
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	189b      	adds	r3, r3, r2
 8004af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d305      	bcc.n	8004b06 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d906      	bls.n	8004b14 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004b06:	231a      	movs	r3, #26
 8004b08:	2220      	movs	r2, #32
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	19db      	adds	r3, r3, r7
 8004b0e:	2201      	movs	r2, #1
 8004b10:	701a      	strb	r2, [r3, #0]
 8004b12:	e127      	b.n	8004d64 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b16:	61bb      	str	r3, [r7, #24]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61fb      	str	r3, [r7, #28]
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b20:	4b3b      	ldr	r3, [pc, #236]	; (8004c10 <UART_SetConfig+0x364>)
 8004b22:	0052      	lsls	r2, r2, #1
 8004b24:	5ad3      	ldrh	r3, [r2, r3]
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	69b8      	ldr	r0, [r7, #24]
 8004b32:	69f9      	ldr	r1, [r7, #28]
 8004b34:	f7fb fb7c 	bl	8000230 <__aeabi_uldivmod>
 8004b38:	0002      	movs	r2, r0
 8004b3a:	000b      	movs	r3, r1
 8004b3c:	0e11      	lsrs	r1, r2, #24
 8004b3e:	021d      	lsls	r5, r3, #8
 8004b40:	430d      	orrs	r5, r1
 8004b42:	0214      	lsls	r4, r2, #8
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	085b      	lsrs	r3, r3, #1
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	68b8      	ldr	r0, [r7, #8]
 8004b52:	68f9      	ldr	r1, [r7, #12]
 8004b54:	1900      	adds	r0, r0, r4
 8004b56:	4169      	adcs	r1, r5
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	607b      	str	r3, [r7, #4]
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f7fb fb63 	bl	8000230 <__aeabi_uldivmod>
 8004b6a:	0002      	movs	r2, r0
 8004b6c:	000b      	movs	r3, r1
 8004b6e:	0013      	movs	r3, r2
 8004b70:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b74:	23c0      	movs	r3, #192	; 0xc0
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d309      	bcc.n	8004b90 <UART_SetConfig+0x2e4>
 8004b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	035b      	lsls	r3, r3, #13
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d204      	bcs.n	8004b90 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b8c:	60da      	str	r2, [r3, #12]
 8004b8e:	e0e9      	b.n	8004d64 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004b90:	231a      	movs	r3, #26
 8004b92:	2220      	movs	r2, #32
 8004b94:	189b      	adds	r3, r3, r2
 8004b96:	19db      	adds	r3, r3, r7
 8004b98:	2201      	movs	r2, #1
 8004b9a:	701a      	strb	r2, [r3, #0]
 8004b9c:	e0e2      	b.n	8004d64 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	69da      	ldr	r2, [r3, #28]
 8004ba2:	2380      	movs	r3, #128	; 0x80
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d000      	beq.n	8004bac <UART_SetConfig+0x300>
 8004baa:	e083      	b.n	8004cb4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004bac:	231b      	movs	r3, #27
 8004bae:	2220      	movs	r2, #32
 8004bb0:	189b      	adds	r3, r3, r2
 8004bb2:	19db      	adds	r3, r3, r7
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d015      	beq.n	8004be6 <UART_SetConfig+0x33a>
 8004bba:	dc2b      	bgt.n	8004c14 <UART_SetConfig+0x368>
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d00d      	beq.n	8004bdc <UART_SetConfig+0x330>
 8004bc0:	dc28      	bgt.n	8004c14 <UART_SetConfig+0x368>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <UART_SetConfig+0x320>
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d005      	beq.n	8004bd6 <UART_SetConfig+0x32a>
 8004bca:	e023      	b.n	8004c14 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bcc:	f7fd ffe4 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bd4:	e027      	b.n	8004c26 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <UART_SetConfig+0x360>)
 8004bd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bda:	e024      	b.n	8004c26 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bdc:	f7fd ff50 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8004be0:	0003      	movs	r3, r0
 8004be2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004be4:	e01f      	b.n	8004c26 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004be6:	2380      	movs	r3, #128	; 0x80
 8004be8:	021b      	lsls	r3, r3, #8
 8004bea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bec:	e01b      	b.n	8004c26 <UART_SetConfig+0x37a>
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	cfff69f3 	.word	0xcfff69f3
 8004bf4:	ffffcfff 	.word	0xffffcfff
 8004bf8:	40008000 	.word	0x40008000
 8004bfc:	11fff4ff 	.word	0x11fff4ff
 8004c00:	40013800 	.word	0x40013800
 8004c04:	40021000 	.word	0x40021000
 8004c08:	40004400 	.word	0x40004400
 8004c0c:	00f42400 	.word	0x00f42400
 8004c10:	080065d4 	.word	0x080065d4
      default:
        pclk = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004c18:	231a      	movs	r3, #26
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	189b      	adds	r3, r3, r2
 8004c1e:	19db      	adds	r3, r3, r7
 8004c20:	2201      	movs	r2, #1
 8004c22:	701a      	strb	r2, [r3, #0]
        break;
 8004c24:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d100      	bne.n	8004c2e <UART_SetConfig+0x382>
 8004c2c:	e09a      	b.n	8004d64 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c32:	4b58      	ldr	r3, [pc, #352]	; (8004d94 <UART_SetConfig+0x4e8>)
 8004c34:	0052      	lsls	r2, r2, #1
 8004c36:	5ad3      	ldrh	r3, [r2, r3]
 8004c38:	0019      	movs	r1, r3
 8004c3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c3c:	f7fb fa6c 	bl	8000118 <__udivsi3>
 8004c40:	0003      	movs	r3, r0
 8004c42:	005a      	lsls	r2, r3, #1
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	18d2      	adds	r2, r2, r3
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	0019      	movs	r1, r3
 8004c52:	0010      	movs	r0, r2
 8004c54:	f7fb fa60 	bl	8000118 <__udivsi3>
 8004c58:	0003      	movs	r3, r0
 8004c5a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	2b0f      	cmp	r3, #15
 8004c60:	d921      	bls.n	8004ca6 <UART_SetConfig+0x3fa>
 8004c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c64:	2380      	movs	r3, #128	; 0x80
 8004c66:	025b      	lsls	r3, r3, #9
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d21c      	bcs.n	8004ca6 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	200e      	movs	r0, #14
 8004c72:	2420      	movs	r4, #32
 8004c74:	1903      	adds	r3, r0, r4
 8004c76:	19db      	adds	r3, r3, r7
 8004c78:	210f      	movs	r1, #15
 8004c7a:	438a      	bics	r2, r1
 8004c7c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	085b      	lsrs	r3, r3, #1
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2207      	movs	r2, #7
 8004c86:	4013      	ands	r3, r2
 8004c88:	b299      	uxth	r1, r3
 8004c8a:	1903      	adds	r3, r0, r4
 8004c8c:	19db      	adds	r3, r3, r7
 8004c8e:	1902      	adds	r2, r0, r4
 8004c90:	19d2      	adds	r2, r2, r7
 8004c92:	8812      	ldrh	r2, [r2, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	1902      	adds	r2, r0, r4
 8004c9e:	19d2      	adds	r2, r2, r7
 8004ca0:	8812      	ldrh	r2, [r2, #0]
 8004ca2:	60da      	str	r2, [r3, #12]
 8004ca4:	e05e      	b.n	8004d64 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca6:	231a      	movs	r3, #26
 8004ca8:	2220      	movs	r2, #32
 8004caa:	189b      	adds	r3, r3, r2
 8004cac:	19db      	adds	r3, r3, r7
 8004cae:	2201      	movs	r2, #1
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	e057      	b.n	8004d64 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cb4:	231b      	movs	r3, #27
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	189b      	adds	r3, r3, r2
 8004cba:	19db      	adds	r3, r3, r7
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d015      	beq.n	8004cee <UART_SetConfig+0x442>
 8004cc2:	dc18      	bgt.n	8004cf6 <UART_SetConfig+0x44a>
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d00d      	beq.n	8004ce4 <UART_SetConfig+0x438>
 8004cc8:	dc15      	bgt.n	8004cf6 <UART_SetConfig+0x44a>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <UART_SetConfig+0x428>
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d005      	beq.n	8004cde <UART_SetConfig+0x432>
 8004cd2:	e010      	b.n	8004cf6 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd4:	f7fd ff60 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cdc:	e014      	b.n	8004d08 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cde:	4b2e      	ldr	r3, [pc, #184]	; (8004d98 <UART_SetConfig+0x4ec>)
 8004ce0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ce2:	e011      	b.n	8004d08 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce4:	f7fd fecc 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cec:	e00c      	b.n	8004d08 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cee:	2380      	movs	r3, #128	; 0x80
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cf4:	e008      	b.n	8004d08 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004cfa:	231a      	movs	r3, #26
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	189b      	adds	r3, r3, r2
 8004d00:	19db      	adds	r3, r3, r7
 8004d02:	2201      	movs	r2, #1
 8004d04:	701a      	strb	r2, [r3, #0]
        break;
 8004d06:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d02a      	beq.n	8004d64 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d12:	4b20      	ldr	r3, [pc, #128]	; (8004d94 <UART_SetConfig+0x4e8>)
 8004d14:	0052      	lsls	r2, r2, #1
 8004d16:	5ad3      	ldrh	r3, [r2, r3]
 8004d18:	0019      	movs	r1, r3
 8004d1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d1c:	f7fb f9fc 	bl	8000118 <__udivsi3>
 8004d20:	0003      	movs	r3, r0
 8004d22:	001a      	movs	r2, r3
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	085b      	lsrs	r3, r3, #1
 8004d2a:	18d2      	adds	r2, r2, r3
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	0019      	movs	r1, r3
 8004d32:	0010      	movs	r0, r2
 8004d34:	f7fb f9f0 	bl	8000118 <__udivsi3>
 8004d38:	0003      	movs	r3, r0
 8004d3a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	2b0f      	cmp	r3, #15
 8004d40:	d90a      	bls.n	8004d58 <UART_SetConfig+0x4ac>
 8004d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d44:	2380      	movs	r3, #128	; 0x80
 8004d46:	025b      	lsls	r3, r3, #9
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d205      	bcs.n	8004d58 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	60da      	str	r2, [r3, #12]
 8004d56:	e005      	b.n	8004d64 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004d58:	231a      	movs	r3, #26
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	189b      	adds	r3, r3, r2
 8004d5e:	19db      	adds	r3, r3, r7
 8004d60:	2201      	movs	r2, #1
 8004d62:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	226a      	movs	r2, #106	; 0x6a
 8004d68:	2101      	movs	r1, #1
 8004d6a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	2268      	movs	r2, #104	; 0x68
 8004d70:	2101      	movs	r1, #1
 8004d72:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	2200      	movs	r2, #0
 8004d78:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004d80:	231a      	movs	r3, #26
 8004d82:	2220      	movs	r2, #32
 8004d84:	189b      	adds	r3, r3, r2
 8004d86:	19db      	adds	r3, r3, r7
 8004d88:	781b      	ldrb	r3, [r3, #0]
}
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b010      	add	sp, #64	; 0x40
 8004d90:	bdb0      	pop	{r4, r5, r7, pc}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	080065d4 	.word	0x080065d4
 8004d98:	00f42400 	.word	0x00f42400

08004d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	2201      	movs	r2, #1
 8004daa:	4013      	ands	r3, r2
 8004dac:	d00b      	beq.n	8004dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	4a4a      	ldr	r2, [pc, #296]	; (8004ee0 <UART_AdvFeatureConfig+0x144>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	0019      	movs	r1, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	2202      	movs	r2, #2
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d00b      	beq.n	8004de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4a43      	ldr	r2, [pc, #268]	; (8004ee4 <UART_AdvFeatureConfig+0x148>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	0019      	movs	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	2204      	movs	r2, #4
 8004dee:	4013      	ands	r3, r2
 8004df0:	d00b      	beq.n	8004e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	4a3b      	ldr	r2, [pc, #236]	; (8004ee8 <UART_AdvFeatureConfig+0x14c>)
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	0019      	movs	r1, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	2208      	movs	r2, #8
 8004e10:	4013      	ands	r3, r2
 8004e12:	d00b      	beq.n	8004e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	4a34      	ldr	r2, [pc, #208]	; (8004eec <UART_AdvFeatureConfig+0x150>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	0019      	movs	r1, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	2210      	movs	r2, #16
 8004e32:	4013      	ands	r3, r2
 8004e34:	d00b      	beq.n	8004e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	4a2c      	ldr	r2, [pc, #176]	; (8004ef0 <UART_AdvFeatureConfig+0x154>)
 8004e3e:	4013      	ands	r3, r2
 8004e40:	0019      	movs	r1, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e52:	2220      	movs	r2, #32
 8004e54:	4013      	ands	r3, r2
 8004e56:	d00b      	beq.n	8004e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	4a25      	ldr	r2, [pc, #148]	; (8004ef4 <UART_AdvFeatureConfig+0x158>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	0019      	movs	r1, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	2240      	movs	r2, #64	; 0x40
 8004e76:	4013      	ands	r3, r2
 8004e78:	d01d      	beq.n	8004eb6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	4a1d      	ldr	r2, [pc, #116]	; (8004ef8 <UART_AdvFeatureConfig+0x15c>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	0019      	movs	r1, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	035b      	lsls	r3, r3, #13
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d10b      	bne.n	8004eb6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4a15      	ldr	r2, [pc, #84]	; (8004efc <UART_AdvFeatureConfig+0x160>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	0019      	movs	r1, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	2280      	movs	r2, #128	; 0x80
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d00b      	beq.n	8004ed8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4a0e      	ldr	r2, [pc, #56]	; (8004f00 <UART_AdvFeatureConfig+0x164>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	0019      	movs	r1, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
  }
}
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	46bd      	mov	sp, r7
 8004edc:	b002      	add	sp, #8
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	fffdffff 	.word	0xfffdffff
 8004ee4:	fffeffff 	.word	0xfffeffff
 8004ee8:	fffbffff 	.word	0xfffbffff
 8004eec:	ffff7fff 	.word	0xffff7fff
 8004ef0:	ffffefff 	.word	0xffffefff
 8004ef4:	ffffdfff 	.word	0xffffdfff
 8004ef8:	ffefffff 	.word	0xffefffff
 8004efc:	ff9fffff 	.word	0xff9fffff
 8004f00:	fff7ffff 	.word	0xfff7ffff

08004f04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2290      	movs	r2, #144	; 0x90
 8004f10:	2100      	movs	r1, #0
 8004f12:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f14:	f7fc fe62 	bl	8001bdc <HAL_GetTick>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2208      	movs	r2, #8
 8004f24:	4013      	ands	r3, r2
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d10c      	bne.n	8004f44 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2280      	movs	r2, #128	; 0x80
 8004f2e:	0391      	lsls	r1, r2, #14
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	4a1a      	ldr	r2, [pc, #104]	; (8004f9c <UART_CheckIdleState+0x98>)
 8004f34:	9200      	str	r2, [sp, #0]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f000 f832 	bl	8004fa0 <UART_WaitOnFlagUntilTimeout>
 8004f3c:	1e03      	subs	r3, r0, #0
 8004f3e:	d001      	beq.n	8004f44 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e026      	b.n	8004f92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d10c      	bne.n	8004f6c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2280      	movs	r2, #128	; 0x80
 8004f56:	03d1      	lsls	r1, r2, #15
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	4a10      	ldr	r2, [pc, #64]	; (8004f9c <UART_CheckIdleState+0x98>)
 8004f5c:	9200      	str	r2, [sp, #0]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f000 f81e 	bl	8004fa0 <UART_WaitOnFlagUntilTimeout>
 8004f64:	1e03      	subs	r3, r0, #0
 8004f66:	d001      	beq.n	8004f6c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e012      	b.n	8004f92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2288      	movs	r2, #136	; 0x88
 8004f70:	2120      	movs	r1, #32
 8004f72:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	228c      	movs	r2, #140	; 0x8c
 8004f78:	2120      	movs	r1, #32
 8004f7a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2284      	movs	r2, #132	; 0x84
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	0018      	movs	r0, r3
 8004f94:	46bd      	mov	sp, r7
 8004f96:	b004      	add	sp, #16
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	46c0      	nop			; (mov r8, r8)
 8004f9c:	01ffffff 	.word	0x01ffffff

08004fa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b094      	sub	sp, #80	; 0x50
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	1dfb      	adds	r3, r7, #7
 8004fae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb0:	e0a7      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	d100      	bne.n	8004fba <UART_WaitOnFlagUntilTimeout+0x1a>
 8004fb8:	e0a3      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fba:	f7fc fe0f 	bl	8001bdc <HAL_GetTick>
 8004fbe:	0002      	movs	r2, r0
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d302      	bcc.n	8004fd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d13f      	bne.n	8005050 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8004fda:	2301      	movs	r3, #1
 8004fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	f383 8810 	msr	PRIMASK, r3
}
 8004fe4:	46c0      	nop			; (mov r8, r8)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	494e      	ldr	r1, [pc, #312]	; (800512c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004ff2:	400a      	ands	r2, r1
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	f383 8810 	msr	PRIMASK, r3
}
 8005000:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005002:	f3ef 8310 	mrs	r3, PRIMASK
 8005006:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500a:	643b      	str	r3, [r7, #64]	; 0x40
 800500c:	2301      	movs	r3, #1
 800500e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005012:	f383 8810 	msr	PRIMASK, r3
}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2101      	movs	r1, #1
 8005024:	438a      	bics	r2, r1
 8005026:	609a      	str	r2, [r3, #8]
 8005028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800502a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800502e:	f383 8810 	msr	PRIMASK, r3
}
 8005032:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2288      	movs	r2, #136	; 0x88
 8005038:	2120      	movs	r1, #32
 800503a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	228c      	movs	r2, #140	; 0x8c
 8005040:	2120      	movs	r1, #32
 8005042:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2284      	movs	r2, #132	; 0x84
 8005048:	2100      	movs	r1, #0
 800504a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e069      	b.n	8005124 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2204      	movs	r2, #4
 8005058:	4013      	ands	r3, r2
 800505a:	d052      	beq.n	8005102 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69da      	ldr	r2, [r3, #28]
 8005062:	2380      	movs	r3, #128	; 0x80
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	401a      	ands	r2, r3
 8005068:	2380      	movs	r3, #128	; 0x80
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	429a      	cmp	r2, r3
 800506e:	d148      	bne.n	8005102 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2280      	movs	r2, #128	; 0x80
 8005076:	0112      	lsls	r2, r2, #4
 8005078:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800507a:	f3ef 8310 	mrs	r3, PRIMASK
 800507e:	613b      	str	r3, [r7, #16]
  return(result);
 8005080:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005084:	2301      	movs	r3, #1
 8005086:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f383 8810 	msr	PRIMASK, r3
}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4924      	ldr	r1, [pc, #144]	; (800512c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800509c:	400a      	ands	r2, r1
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f383 8810 	msr	PRIMASK, r3
}
 80050aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ac:	f3ef 8310 	mrs	r3, PRIMASK
 80050b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80050b2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80050b6:	2301      	movs	r3, #1
 80050b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f383 8810 	msr	PRIMASK, r3
}
 80050c0:	46c0      	nop			; (mov r8, r8)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2101      	movs	r1, #1
 80050ce:	438a      	bics	r2, r1
 80050d0:	609a      	str	r2, [r3, #8]
 80050d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	f383 8810 	msr	PRIMASK, r3
}
 80050dc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2288      	movs	r2, #136	; 0x88
 80050e2:	2120      	movs	r1, #32
 80050e4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	228c      	movs	r2, #140	; 0x8c
 80050ea:	2120      	movs	r1, #32
 80050ec:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2290      	movs	r2, #144	; 0x90
 80050f2:	2120      	movs	r1, #32
 80050f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2284      	movs	r2, #132	; 0x84
 80050fa:	2100      	movs	r1, #0
 80050fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e010      	b.n	8005124 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	4013      	ands	r3, r2
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	425a      	negs	r2, r3
 8005112:	4153      	adcs	r3, r2
 8005114:	b2db      	uxtb	r3, r3
 8005116:	001a      	movs	r2, r3
 8005118:	1dfb      	adds	r3, r7, #7
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d100      	bne.n	8005122 <UART_WaitOnFlagUntilTimeout+0x182>
 8005120:	e747      	b.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	0018      	movs	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	b014      	add	sp, #80	; 0x50
 800512a:	bd80      	pop	{r7, pc}
 800512c:	fffffe5f 	.word	0xfffffe5f

08005130 <__errno>:
 8005130:	4b01      	ldr	r3, [pc, #4]	; (8005138 <__errno+0x8>)
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	4770      	bx	lr
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	200001d4 	.word	0x200001d4

0800513c <__libc_init_array>:
 800513c:	b570      	push	{r4, r5, r6, lr}
 800513e:	2600      	movs	r6, #0
 8005140:	4d0c      	ldr	r5, [pc, #48]	; (8005174 <__libc_init_array+0x38>)
 8005142:	4c0d      	ldr	r4, [pc, #52]	; (8005178 <__libc_init_array+0x3c>)
 8005144:	1b64      	subs	r4, r4, r5
 8005146:	10a4      	asrs	r4, r4, #2
 8005148:	42a6      	cmp	r6, r4
 800514a:	d109      	bne.n	8005160 <__libc_init_array+0x24>
 800514c:	2600      	movs	r6, #0
 800514e:	f000 fff9 	bl	8006144 <_init>
 8005152:	4d0a      	ldr	r5, [pc, #40]	; (800517c <__libc_init_array+0x40>)
 8005154:	4c0a      	ldr	r4, [pc, #40]	; (8005180 <__libc_init_array+0x44>)
 8005156:	1b64      	subs	r4, r4, r5
 8005158:	10a4      	asrs	r4, r4, #2
 800515a:	42a6      	cmp	r6, r4
 800515c:	d105      	bne.n	800516a <__libc_init_array+0x2e>
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	00b3      	lsls	r3, r6, #2
 8005162:	58eb      	ldr	r3, [r5, r3]
 8005164:	4798      	blx	r3
 8005166:	3601      	adds	r6, #1
 8005168:	e7ee      	b.n	8005148 <__libc_init_array+0xc>
 800516a:	00b3      	lsls	r3, r6, #2
 800516c:	58eb      	ldr	r3, [r5, r3]
 800516e:	4798      	blx	r3
 8005170:	3601      	adds	r6, #1
 8005172:	e7f2      	b.n	800515a <__libc_init_array+0x1e>
 8005174:	0800668c 	.word	0x0800668c
 8005178:	0800668c 	.word	0x0800668c
 800517c:	0800668c 	.word	0x0800668c
 8005180:	08006690 	.word	0x08006690

08005184 <memset>:
 8005184:	0003      	movs	r3, r0
 8005186:	1882      	adds	r2, r0, r2
 8005188:	4293      	cmp	r3, r2
 800518a:	d100      	bne.n	800518e <memset+0xa>
 800518c:	4770      	bx	lr
 800518e:	7019      	strb	r1, [r3, #0]
 8005190:	3301      	adds	r3, #1
 8005192:	e7f9      	b.n	8005188 <memset+0x4>

08005194 <iprintf>:
 8005194:	b40f      	push	{r0, r1, r2, r3}
 8005196:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <iprintf+0x30>)
 8005198:	b513      	push	{r0, r1, r4, lr}
 800519a:	681c      	ldr	r4, [r3, #0]
 800519c:	2c00      	cmp	r4, #0
 800519e:	d005      	beq.n	80051ac <iprintf+0x18>
 80051a0:	69a3      	ldr	r3, [r4, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <iprintf+0x18>
 80051a6:	0020      	movs	r0, r4
 80051a8:	f000 f870 	bl	800528c <__sinit>
 80051ac:	ab05      	add	r3, sp, #20
 80051ae:	0020      	movs	r0, r4
 80051b0:	9a04      	ldr	r2, [sp, #16]
 80051b2:	68a1      	ldr	r1, [r4, #8]
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	f000 f9cd 	bl	8005554 <_vfiprintf_r>
 80051ba:	bc16      	pop	{r1, r2, r4}
 80051bc:	bc08      	pop	{r3}
 80051be:	b004      	add	sp, #16
 80051c0:	4718      	bx	r3
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	200001d4 	.word	0x200001d4

080051c8 <std>:
 80051c8:	2300      	movs	r3, #0
 80051ca:	b510      	push	{r4, lr}
 80051cc:	0004      	movs	r4, r0
 80051ce:	6003      	str	r3, [r0, #0]
 80051d0:	6043      	str	r3, [r0, #4]
 80051d2:	6083      	str	r3, [r0, #8]
 80051d4:	8181      	strh	r1, [r0, #12]
 80051d6:	6643      	str	r3, [r0, #100]	; 0x64
 80051d8:	0019      	movs	r1, r3
 80051da:	81c2      	strh	r2, [r0, #14]
 80051dc:	6103      	str	r3, [r0, #16]
 80051de:	6143      	str	r3, [r0, #20]
 80051e0:	6183      	str	r3, [r0, #24]
 80051e2:	2208      	movs	r2, #8
 80051e4:	305c      	adds	r0, #92	; 0x5c
 80051e6:	f7ff ffcd 	bl	8005184 <memset>
 80051ea:	4b05      	ldr	r3, [pc, #20]	; (8005200 <std+0x38>)
 80051ec:	6224      	str	r4, [r4, #32]
 80051ee:	6263      	str	r3, [r4, #36]	; 0x24
 80051f0:	4b04      	ldr	r3, [pc, #16]	; (8005204 <std+0x3c>)
 80051f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80051f4:	4b04      	ldr	r3, [pc, #16]	; (8005208 <std+0x40>)
 80051f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051f8:	4b04      	ldr	r3, [pc, #16]	; (800520c <std+0x44>)
 80051fa:	6323      	str	r3, [r4, #48]	; 0x30
 80051fc:	bd10      	pop	{r4, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	08005af1 	.word	0x08005af1
 8005204:	08005b19 	.word	0x08005b19
 8005208:	08005b51 	.word	0x08005b51
 800520c:	08005b7d 	.word	0x08005b7d

08005210 <_cleanup_r>:
 8005210:	b510      	push	{r4, lr}
 8005212:	4902      	ldr	r1, [pc, #8]	; (800521c <_cleanup_r+0xc>)
 8005214:	f000 f8ba 	bl	800538c <_fwalk_reent>
 8005218:	bd10      	pop	{r4, pc}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	08005e89 	.word	0x08005e89

08005220 <__sfmoreglue>:
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	2568      	movs	r5, #104	; 0x68
 8005224:	1e4a      	subs	r2, r1, #1
 8005226:	4355      	muls	r5, r2
 8005228:	000e      	movs	r6, r1
 800522a:	0029      	movs	r1, r5
 800522c:	3174      	adds	r1, #116	; 0x74
 800522e:	f000 f8f3 	bl	8005418 <_malloc_r>
 8005232:	1e04      	subs	r4, r0, #0
 8005234:	d008      	beq.n	8005248 <__sfmoreglue+0x28>
 8005236:	2100      	movs	r1, #0
 8005238:	002a      	movs	r2, r5
 800523a:	6001      	str	r1, [r0, #0]
 800523c:	6046      	str	r6, [r0, #4]
 800523e:	300c      	adds	r0, #12
 8005240:	60a0      	str	r0, [r4, #8]
 8005242:	3268      	adds	r2, #104	; 0x68
 8005244:	f7ff ff9e 	bl	8005184 <memset>
 8005248:	0020      	movs	r0, r4
 800524a:	bd70      	pop	{r4, r5, r6, pc}

0800524c <__sfp_lock_acquire>:
 800524c:	b510      	push	{r4, lr}
 800524e:	4802      	ldr	r0, [pc, #8]	; (8005258 <__sfp_lock_acquire+0xc>)
 8005250:	f000 f8bd 	bl	80053ce <__retarget_lock_acquire_recursive>
 8005254:	bd10      	pop	{r4, pc}
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	20000419 	.word	0x20000419

0800525c <__sfp_lock_release>:
 800525c:	b510      	push	{r4, lr}
 800525e:	4802      	ldr	r0, [pc, #8]	; (8005268 <__sfp_lock_release+0xc>)
 8005260:	f000 f8b6 	bl	80053d0 <__retarget_lock_release_recursive>
 8005264:	bd10      	pop	{r4, pc}
 8005266:	46c0      	nop			; (mov r8, r8)
 8005268:	20000419 	.word	0x20000419

0800526c <__sinit_lock_acquire>:
 800526c:	b510      	push	{r4, lr}
 800526e:	4802      	ldr	r0, [pc, #8]	; (8005278 <__sinit_lock_acquire+0xc>)
 8005270:	f000 f8ad 	bl	80053ce <__retarget_lock_acquire_recursive>
 8005274:	bd10      	pop	{r4, pc}
 8005276:	46c0      	nop			; (mov r8, r8)
 8005278:	2000041a 	.word	0x2000041a

0800527c <__sinit_lock_release>:
 800527c:	b510      	push	{r4, lr}
 800527e:	4802      	ldr	r0, [pc, #8]	; (8005288 <__sinit_lock_release+0xc>)
 8005280:	f000 f8a6 	bl	80053d0 <__retarget_lock_release_recursive>
 8005284:	bd10      	pop	{r4, pc}
 8005286:	46c0      	nop			; (mov r8, r8)
 8005288:	2000041a 	.word	0x2000041a

0800528c <__sinit>:
 800528c:	b513      	push	{r0, r1, r4, lr}
 800528e:	0004      	movs	r4, r0
 8005290:	f7ff ffec 	bl	800526c <__sinit_lock_acquire>
 8005294:	69a3      	ldr	r3, [r4, #24]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <__sinit+0x14>
 800529a:	f7ff ffef 	bl	800527c <__sinit_lock_release>
 800529e:	bd13      	pop	{r0, r1, r4, pc}
 80052a0:	64a3      	str	r3, [r4, #72]	; 0x48
 80052a2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80052a4:	6523      	str	r3, [r4, #80]	; 0x50
 80052a6:	4b13      	ldr	r3, [pc, #76]	; (80052f4 <__sinit+0x68>)
 80052a8:	4a13      	ldr	r2, [pc, #76]	; (80052f8 <__sinit+0x6c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80052ae:	9301      	str	r3, [sp, #4]
 80052b0:	42a3      	cmp	r3, r4
 80052b2:	d101      	bne.n	80052b8 <__sinit+0x2c>
 80052b4:	2301      	movs	r3, #1
 80052b6:	61a3      	str	r3, [r4, #24]
 80052b8:	0020      	movs	r0, r4
 80052ba:	f000 f81f 	bl	80052fc <__sfp>
 80052be:	6060      	str	r0, [r4, #4]
 80052c0:	0020      	movs	r0, r4
 80052c2:	f000 f81b 	bl	80052fc <__sfp>
 80052c6:	60a0      	str	r0, [r4, #8]
 80052c8:	0020      	movs	r0, r4
 80052ca:	f000 f817 	bl	80052fc <__sfp>
 80052ce:	2200      	movs	r2, #0
 80052d0:	2104      	movs	r1, #4
 80052d2:	60e0      	str	r0, [r4, #12]
 80052d4:	6860      	ldr	r0, [r4, #4]
 80052d6:	f7ff ff77 	bl	80051c8 <std>
 80052da:	2201      	movs	r2, #1
 80052dc:	2109      	movs	r1, #9
 80052de:	68a0      	ldr	r0, [r4, #8]
 80052e0:	f7ff ff72 	bl	80051c8 <std>
 80052e4:	2202      	movs	r2, #2
 80052e6:	2112      	movs	r1, #18
 80052e8:	68e0      	ldr	r0, [r4, #12]
 80052ea:	f7ff ff6d 	bl	80051c8 <std>
 80052ee:	2301      	movs	r3, #1
 80052f0:	61a3      	str	r3, [r4, #24]
 80052f2:	e7d2      	b.n	800529a <__sinit+0xe>
 80052f4:	080065ec 	.word	0x080065ec
 80052f8:	08005211 	.word	0x08005211

080052fc <__sfp>:
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	0007      	movs	r7, r0
 8005300:	f7ff ffa4 	bl	800524c <__sfp_lock_acquire>
 8005304:	4b1f      	ldr	r3, [pc, #124]	; (8005384 <__sfp+0x88>)
 8005306:	681e      	ldr	r6, [r3, #0]
 8005308:	69b3      	ldr	r3, [r6, #24]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d102      	bne.n	8005314 <__sfp+0x18>
 800530e:	0030      	movs	r0, r6
 8005310:	f7ff ffbc 	bl	800528c <__sinit>
 8005314:	3648      	adds	r6, #72	; 0x48
 8005316:	68b4      	ldr	r4, [r6, #8]
 8005318:	6873      	ldr	r3, [r6, #4]
 800531a:	3b01      	subs	r3, #1
 800531c:	d504      	bpl.n	8005328 <__sfp+0x2c>
 800531e:	6833      	ldr	r3, [r6, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d022      	beq.n	800536a <__sfp+0x6e>
 8005324:	6836      	ldr	r6, [r6, #0]
 8005326:	e7f6      	b.n	8005316 <__sfp+0x1a>
 8005328:	220c      	movs	r2, #12
 800532a:	5ea5      	ldrsh	r5, [r4, r2]
 800532c:	2d00      	cmp	r5, #0
 800532e:	d11a      	bne.n	8005366 <__sfp+0x6a>
 8005330:	0020      	movs	r0, r4
 8005332:	4b15      	ldr	r3, [pc, #84]	; (8005388 <__sfp+0x8c>)
 8005334:	3058      	adds	r0, #88	; 0x58
 8005336:	60e3      	str	r3, [r4, #12]
 8005338:	6665      	str	r5, [r4, #100]	; 0x64
 800533a:	f000 f847 	bl	80053cc <__retarget_lock_init_recursive>
 800533e:	f7ff ff8d 	bl	800525c <__sfp_lock_release>
 8005342:	0020      	movs	r0, r4
 8005344:	2208      	movs	r2, #8
 8005346:	0029      	movs	r1, r5
 8005348:	6025      	str	r5, [r4, #0]
 800534a:	60a5      	str	r5, [r4, #8]
 800534c:	6065      	str	r5, [r4, #4]
 800534e:	6125      	str	r5, [r4, #16]
 8005350:	6165      	str	r5, [r4, #20]
 8005352:	61a5      	str	r5, [r4, #24]
 8005354:	305c      	adds	r0, #92	; 0x5c
 8005356:	f7ff ff15 	bl	8005184 <memset>
 800535a:	6365      	str	r5, [r4, #52]	; 0x34
 800535c:	63a5      	str	r5, [r4, #56]	; 0x38
 800535e:	64a5      	str	r5, [r4, #72]	; 0x48
 8005360:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005362:	0020      	movs	r0, r4
 8005364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005366:	3468      	adds	r4, #104	; 0x68
 8005368:	e7d7      	b.n	800531a <__sfp+0x1e>
 800536a:	2104      	movs	r1, #4
 800536c:	0038      	movs	r0, r7
 800536e:	f7ff ff57 	bl	8005220 <__sfmoreglue>
 8005372:	1e04      	subs	r4, r0, #0
 8005374:	6030      	str	r0, [r6, #0]
 8005376:	d1d5      	bne.n	8005324 <__sfp+0x28>
 8005378:	f7ff ff70 	bl	800525c <__sfp_lock_release>
 800537c:	230c      	movs	r3, #12
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	e7ef      	b.n	8005362 <__sfp+0x66>
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	080065ec 	.word	0x080065ec
 8005388:	ffff0001 	.word	0xffff0001

0800538c <_fwalk_reent>:
 800538c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800538e:	0004      	movs	r4, r0
 8005390:	0006      	movs	r6, r0
 8005392:	2700      	movs	r7, #0
 8005394:	9101      	str	r1, [sp, #4]
 8005396:	3448      	adds	r4, #72	; 0x48
 8005398:	6863      	ldr	r3, [r4, #4]
 800539a:	68a5      	ldr	r5, [r4, #8]
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	9b00      	ldr	r3, [sp, #0]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	d504      	bpl.n	80053b0 <_fwalk_reent+0x24>
 80053a6:	6824      	ldr	r4, [r4, #0]
 80053a8:	2c00      	cmp	r4, #0
 80053aa:	d1f5      	bne.n	8005398 <_fwalk_reent+0xc>
 80053ac:	0038      	movs	r0, r7
 80053ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80053b0:	89ab      	ldrh	r3, [r5, #12]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d908      	bls.n	80053c8 <_fwalk_reent+0x3c>
 80053b6:	220e      	movs	r2, #14
 80053b8:	5eab      	ldrsh	r3, [r5, r2]
 80053ba:	3301      	adds	r3, #1
 80053bc:	d004      	beq.n	80053c8 <_fwalk_reent+0x3c>
 80053be:	0029      	movs	r1, r5
 80053c0:	0030      	movs	r0, r6
 80053c2:	9b01      	ldr	r3, [sp, #4]
 80053c4:	4798      	blx	r3
 80053c6:	4307      	orrs	r7, r0
 80053c8:	3568      	adds	r5, #104	; 0x68
 80053ca:	e7e8      	b.n	800539e <_fwalk_reent+0x12>

080053cc <__retarget_lock_init_recursive>:
 80053cc:	4770      	bx	lr

080053ce <__retarget_lock_acquire_recursive>:
 80053ce:	4770      	bx	lr

080053d0 <__retarget_lock_release_recursive>:
 80053d0:	4770      	bx	lr
	...

080053d4 <sbrk_aligned>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	4e0f      	ldr	r6, [pc, #60]	; (8005414 <sbrk_aligned+0x40>)
 80053d8:	000d      	movs	r5, r1
 80053da:	6831      	ldr	r1, [r6, #0]
 80053dc:	0004      	movs	r4, r0
 80053de:	2900      	cmp	r1, #0
 80053e0:	d102      	bne.n	80053e8 <sbrk_aligned+0x14>
 80053e2:	f000 fb73 	bl	8005acc <_sbrk_r>
 80053e6:	6030      	str	r0, [r6, #0]
 80053e8:	0029      	movs	r1, r5
 80053ea:	0020      	movs	r0, r4
 80053ec:	f000 fb6e 	bl	8005acc <_sbrk_r>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d00a      	beq.n	800540a <sbrk_aligned+0x36>
 80053f4:	2303      	movs	r3, #3
 80053f6:	1cc5      	adds	r5, r0, #3
 80053f8:	439d      	bics	r5, r3
 80053fa:	42a8      	cmp	r0, r5
 80053fc:	d007      	beq.n	800540e <sbrk_aligned+0x3a>
 80053fe:	1a29      	subs	r1, r5, r0
 8005400:	0020      	movs	r0, r4
 8005402:	f000 fb63 	bl	8005acc <_sbrk_r>
 8005406:	1c43      	adds	r3, r0, #1
 8005408:	d101      	bne.n	800540e <sbrk_aligned+0x3a>
 800540a:	2501      	movs	r5, #1
 800540c:	426d      	negs	r5, r5
 800540e:	0028      	movs	r0, r5
 8005410:	bd70      	pop	{r4, r5, r6, pc}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	20000420 	.word	0x20000420

08005418 <_malloc_r>:
 8005418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800541a:	2203      	movs	r2, #3
 800541c:	1ccb      	adds	r3, r1, #3
 800541e:	4393      	bics	r3, r2
 8005420:	3308      	adds	r3, #8
 8005422:	0006      	movs	r6, r0
 8005424:	001f      	movs	r7, r3
 8005426:	2b0c      	cmp	r3, #12
 8005428:	d232      	bcs.n	8005490 <_malloc_r+0x78>
 800542a:	270c      	movs	r7, #12
 800542c:	42b9      	cmp	r1, r7
 800542e:	d831      	bhi.n	8005494 <_malloc_r+0x7c>
 8005430:	0030      	movs	r0, r6
 8005432:	f000 fdf5 	bl	8006020 <__malloc_lock>
 8005436:	4d32      	ldr	r5, [pc, #200]	; (8005500 <_malloc_r+0xe8>)
 8005438:	682b      	ldr	r3, [r5, #0]
 800543a:	001c      	movs	r4, r3
 800543c:	2c00      	cmp	r4, #0
 800543e:	d12e      	bne.n	800549e <_malloc_r+0x86>
 8005440:	0039      	movs	r1, r7
 8005442:	0030      	movs	r0, r6
 8005444:	f7ff ffc6 	bl	80053d4 <sbrk_aligned>
 8005448:	0004      	movs	r4, r0
 800544a:	1c43      	adds	r3, r0, #1
 800544c:	d11e      	bne.n	800548c <_malloc_r+0x74>
 800544e:	682c      	ldr	r4, [r5, #0]
 8005450:	0025      	movs	r5, r4
 8005452:	2d00      	cmp	r5, #0
 8005454:	d14a      	bne.n	80054ec <_malloc_r+0xd4>
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	0029      	movs	r1, r5
 800545a:	18e3      	adds	r3, r4, r3
 800545c:	0030      	movs	r0, r6
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	f000 fb34 	bl	8005acc <_sbrk_r>
 8005464:	9b01      	ldr	r3, [sp, #4]
 8005466:	4283      	cmp	r3, r0
 8005468:	d143      	bne.n	80054f2 <_malloc_r+0xda>
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	3703      	adds	r7, #3
 800546e:	1aff      	subs	r7, r7, r3
 8005470:	2303      	movs	r3, #3
 8005472:	439f      	bics	r7, r3
 8005474:	3708      	adds	r7, #8
 8005476:	2f0c      	cmp	r7, #12
 8005478:	d200      	bcs.n	800547c <_malloc_r+0x64>
 800547a:	270c      	movs	r7, #12
 800547c:	0039      	movs	r1, r7
 800547e:	0030      	movs	r0, r6
 8005480:	f7ff ffa8 	bl	80053d4 <sbrk_aligned>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d034      	beq.n	80054f2 <_malloc_r+0xda>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	19df      	adds	r7, r3, r7
 800548c:	6027      	str	r7, [r4, #0]
 800548e:	e013      	b.n	80054b8 <_malloc_r+0xa0>
 8005490:	2b00      	cmp	r3, #0
 8005492:	dacb      	bge.n	800542c <_malloc_r+0x14>
 8005494:	230c      	movs	r3, #12
 8005496:	2500      	movs	r5, #0
 8005498:	6033      	str	r3, [r6, #0]
 800549a:	0028      	movs	r0, r5
 800549c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800549e:	6822      	ldr	r2, [r4, #0]
 80054a0:	1bd1      	subs	r1, r2, r7
 80054a2:	d420      	bmi.n	80054e6 <_malloc_r+0xce>
 80054a4:	290b      	cmp	r1, #11
 80054a6:	d917      	bls.n	80054d8 <_malloc_r+0xc0>
 80054a8:	19e2      	adds	r2, r4, r7
 80054aa:	6027      	str	r7, [r4, #0]
 80054ac:	42a3      	cmp	r3, r4
 80054ae:	d111      	bne.n	80054d4 <_malloc_r+0xbc>
 80054b0:	602a      	str	r2, [r5, #0]
 80054b2:	6863      	ldr	r3, [r4, #4]
 80054b4:	6011      	str	r1, [r2, #0]
 80054b6:	6053      	str	r3, [r2, #4]
 80054b8:	0030      	movs	r0, r6
 80054ba:	0025      	movs	r5, r4
 80054bc:	f000 fdb8 	bl	8006030 <__malloc_unlock>
 80054c0:	2207      	movs	r2, #7
 80054c2:	350b      	adds	r5, #11
 80054c4:	1d23      	adds	r3, r4, #4
 80054c6:	4395      	bics	r5, r2
 80054c8:	1aea      	subs	r2, r5, r3
 80054ca:	429d      	cmp	r5, r3
 80054cc:	d0e5      	beq.n	800549a <_malloc_r+0x82>
 80054ce:	1b5b      	subs	r3, r3, r5
 80054d0:	50a3      	str	r3, [r4, r2]
 80054d2:	e7e2      	b.n	800549a <_malloc_r+0x82>
 80054d4:	605a      	str	r2, [r3, #4]
 80054d6:	e7ec      	b.n	80054b2 <_malloc_r+0x9a>
 80054d8:	6862      	ldr	r2, [r4, #4]
 80054da:	42a3      	cmp	r3, r4
 80054dc:	d101      	bne.n	80054e2 <_malloc_r+0xca>
 80054de:	602a      	str	r2, [r5, #0]
 80054e0:	e7ea      	b.n	80054b8 <_malloc_r+0xa0>
 80054e2:	605a      	str	r2, [r3, #4]
 80054e4:	e7e8      	b.n	80054b8 <_malloc_r+0xa0>
 80054e6:	0023      	movs	r3, r4
 80054e8:	6864      	ldr	r4, [r4, #4]
 80054ea:	e7a7      	b.n	800543c <_malloc_r+0x24>
 80054ec:	002c      	movs	r4, r5
 80054ee:	686d      	ldr	r5, [r5, #4]
 80054f0:	e7af      	b.n	8005452 <_malloc_r+0x3a>
 80054f2:	230c      	movs	r3, #12
 80054f4:	0030      	movs	r0, r6
 80054f6:	6033      	str	r3, [r6, #0]
 80054f8:	f000 fd9a 	bl	8006030 <__malloc_unlock>
 80054fc:	e7cd      	b.n	800549a <_malloc_r+0x82>
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	2000041c 	.word	0x2000041c

08005504 <__sfputc_r>:
 8005504:	6893      	ldr	r3, [r2, #8]
 8005506:	b510      	push	{r4, lr}
 8005508:	3b01      	subs	r3, #1
 800550a:	6093      	str	r3, [r2, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	da04      	bge.n	800551a <__sfputc_r+0x16>
 8005510:	6994      	ldr	r4, [r2, #24]
 8005512:	42a3      	cmp	r3, r4
 8005514:	db07      	blt.n	8005526 <__sfputc_r+0x22>
 8005516:	290a      	cmp	r1, #10
 8005518:	d005      	beq.n	8005526 <__sfputc_r+0x22>
 800551a:	6813      	ldr	r3, [r2, #0]
 800551c:	1c58      	adds	r0, r3, #1
 800551e:	6010      	str	r0, [r2, #0]
 8005520:	7019      	strb	r1, [r3, #0]
 8005522:	0008      	movs	r0, r1
 8005524:	bd10      	pop	{r4, pc}
 8005526:	f000 fb2f 	bl	8005b88 <__swbuf_r>
 800552a:	0001      	movs	r1, r0
 800552c:	e7f9      	b.n	8005522 <__sfputc_r+0x1e>

0800552e <__sfputs_r>:
 800552e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005530:	0006      	movs	r6, r0
 8005532:	000f      	movs	r7, r1
 8005534:	0014      	movs	r4, r2
 8005536:	18d5      	adds	r5, r2, r3
 8005538:	42ac      	cmp	r4, r5
 800553a:	d101      	bne.n	8005540 <__sfputs_r+0x12>
 800553c:	2000      	movs	r0, #0
 800553e:	e007      	b.n	8005550 <__sfputs_r+0x22>
 8005540:	7821      	ldrb	r1, [r4, #0]
 8005542:	003a      	movs	r2, r7
 8005544:	0030      	movs	r0, r6
 8005546:	f7ff ffdd 	bl	8005504 <__sfputc_r>
 800554a:	3401      	adds	r4, #1
 800554c:	1c43      	adds	r3, r0, #1
 800554e:	d1f3      	bne.n	8005538 <__sfputs_r+0xa>
 8005550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005554 <_vfiprintf_r>:
 8005554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005556:	b0a1      	sub	sp, #132	; 0x84
 8005558:	0006      	movs	r6, r0
 800555a:	000c      	movs	r4, r1
 800555c:	001f      	movs	r7, r3
 800555e:	9203      	str	r2, [sp, #12]
 8005560:	2800      	cmp	r0, #0
 8005562:	d004      	beq.n	800556e <_vfiprintf_r+0x1a>
 8005564:	6983      	ldr	r3, [r0, #24]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <_vfiprintf_r+0x1a>
 800556a:	f7ff fe8f 	bl	800528c <__sinit>
 800556e:	4b8e      	ldr	r3, [pc, #568]	; (80057a8 <_vfiprintf_r+0x254>)
 8005570:	429c      	cmp	r4, r3
 8005572:	d11c      	bne.n	80055ae <_vfiprintf_r+0x5a>
 8005574:	6874      	ldr	r4, [r6, #4]
 8005576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005578:	07db      	lsls	r3, r3, #31
 800557a:	d405      	bmi.n	8005588 <_vfiprintf_r+0x34>
 800557c:	89a3      	ldrh	r3, [r4, #12]
 800557e:	059b      	lsls	r3, r3, #22
 8005580:	d402      	bmi.n	8005588 <_vfiprintf_r+0x34>
 8005582:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005584:	f7ff ff23 	bl	80053ce <__retarget_lock_acquire_recursive>
 8005588:	89a3      	ldrh	r3, [r4, #12]
 800558a:	071b      	lsls	r3, r3, #28
 800558c:	d502      	bpl.n	8005594 <_vfiprintf_r+0x40>
 800558e:	6923      	ldr	r3, [r4, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d11d      	bne.n	80055d0 <_vfiprintf_r+0x7c>
 8005594:	0021      	movs	r1, r4
 8005596:	0030      	movs	r0, r6
 8005598:	f000 fb60 	bl	8005c5c <__swsetup_r>
 800559c:	2800      	cmp	r0, #0
 800559e:	d017      	beq.n	80055d0 <_vfiprintf_r+0x7c>
 80055a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055a2:	07db      	lsls	r3, r3, #31
 80055a4:	d50d      	bpl.n	80055c2 <_vfiprintf_r+0x6e>
 80055a6:	2001      	movs	r0, #1
 80055a8:	4240      	negs	r0, r0
 80055aa:	b021      	add	sp, #132	; 0x84
 80055ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ae:	4b7f      	ldr	r3, [pc, #508]	; (80057ac <_vfiprintf_r+0x258>)
 80055b0:	429c      	cmp	r4, r3
 80055b2:	d101      	bne.n	80055b8 <_vfiprintf_r+0x64>
 80055b4:	68b4      	ldr	r4, [r6, #8]
 80055b6:	e7de      	b.n	8005576 <_vfiprintf_r+0x22>
 80055b8:	4b7d      	ldr	r3, [pc, #500]	; (80057b0 <_vfiprintf_r+0x25c>)
 80055ba:	429c      	cmp	r4, r3
 80055bc:	d1db      	bne.n	8005576 <_vfiprintf_r+0x22>
 80055be:	68f4      	ldr	r4, [r6, #12]
 80055c0:	e7d9      	b.n	8005576 <_vfiprintf_r+0x22>
 80055c2:	89a3      	ldrh	r3, [r4, #12]
 80055c4:	059b      	lsls	r3, r3, #22
 80055c6:	d4ee      	bmi.n	80055a6 <_vfiprintf_r+0x52>
 80055c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ca:	f7ff ff01 	bl	80053d0 <__retarget_lock_release_recursive>
 80055ce:	e7ea      	b.n	80055a6 <_vfiprintf_r+0x52>
 80055d0:	2300      	movs	r3, #0
 80055d2:	ad08      	add	r5, sp, #32
 80055d4:	616b      	str	r3, [r5, #20]
 80055d6:	3320      	adds	r3, #32
 80055d8:	766b      	strb	r3, [r5, #25]
 80055da:	3310      	adds	r3, #16
 80055dc:	76ab      	strb	r3, [r5, #26]
 80055de:	9707      	str	r7, [sp, #28]
 80055e0:	9f03      	ldr	r7, [sp, #12]
 80055e2:	783b      	ldrb	r3, [r7, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <_vfiprintf_r+0x98>
 80055e8:	2b25      	cmp	r3, #37	; 0x25
 80055ea:	d14e      	bne.n	800568a <_vfiprintf_r+0x136>
 80055ec:	9b03      	ldr	r3, [sp, #12]
 80055ee:	1afb      	subs	r3, r7, r3
 80055f0:	9305      	str	r3, [sp, #20]
 80055f2:	9b03      	ldr	r3, [sp, #12]
 80055f4:	429f      	cmp	r7, r3
 80055f6:	d00d      	beq.n	8005614 <_vfiprintf_r+0xc0>
 80055f8:	9b05      	ldr	r3, [sp, #20]
 80055fa:	0021      	movs	r1, r4
 80055fc:	0030      	movs	r0, r6
 80055fe:	9a03      	ldr	r2, [sp, #12]
 8005600:	f7ff ff95 	bl	800552e <__sfputs_r>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d100      	bne.n	800560a <_vfiprintf_r+0xb6>
 8005608:	e0b5      	b.n	8005776 <_vfiprintf_r+0x222>
 800560a:	696a      	ldr	r2, [r5, #20]
 800560c:	9b05      	ldr	r3, [sp, #20]
 800560e:	4694      	mov	ip, r2
 8005610:	4463      	add	r3, ip
 8005612:	616b      	str	r3, [r5, #20]
 8005614:	783b      	ldrb	r3, [r7, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d100      	bne.n	800561c <_vfiprintf_r+0xc8>
 800561a:	e0ac      	b.n	8005776 <_vfiprintf_r+0x222>
 800561c:	2201      	movs	r2, #1
 800561e:	1c7b      	adds	r3, r7, #1
 8005620:	9303      	str	r3, [sp, #12]
 8005622:	2300      	movs	r3, #0
 8005624:	4252      	negs	r2, r2
 8005626:	606a      	str	r2, [r5, #4]
 8005628:	a904      	add	r1, sp, #16
 800562a:	3254      	adds	r2, #84	; 0x54
 800562c:	1852      	adds	r2, r2, r1
 800562e:	602b      	str	r3, [r5, #0]
 8005630:	60eb      	str	r3, [r5, #12]
 8005632:	60ab      	str	r3, [r5, #8]
 8005634:	7013      	strb	r3, [r2, #0]
 8005636:	65ab      	str	r3, [r5, #88]	; 0x58
 8005638:	9b03      	ldr	r3, [sp, #12]
 800563a:	2205      	movs	r2, #5
 800563c:	7819      	ldrb	r1, [r3, #0]
 800563e:	485d      	ldr	r0, [pc, #372]	; (80057b4 <_vfiprintf_r+0x260>)
 8005640:	f000 fce2 	bl	8006008 <memchr>
 8005644:	9b03      	ldr	r3, [sp, #12]
 8005646:	1c5f      	adds	r7, r3, #1
 8005648:	2800      	cmp	r0, #0
 800564a:	d120      	bne.n	800568e <_vfiprintf_r+0x13a>
 800564c:	682a      	ldr	r2, [r5, #0]
 800564e:	06d3      	lsls	r3, r2, #27
 8005650:	d504      	bpl.n	800565c <_vfiprintf_r+0x108>
 8005652:	2353      	movs	r3, #83	; 0x53
 8005654:	a904      	add	r1, sp, #16
 8005656:	185b      	adds	r3, r3, r1
 8005658:	2120      	movs	r1, #32
 800565a:	7019      	strb	r1, [r3, #0]
 800565c:	0713      	lsls	r3, r2, #28
 800565e:	d504      	bpl.n	800566a <_vfiprintf_r+0x116>
 8005660:	2353      	movs	r3, #83	; 0x53
 8005662:	a904      	add	r1, sp, #16
 8005664:	185b      	adds	r3, r3, r1
 8005666:	212b      	movs	r1, #43	; 0x2b
 8005668:	7019      	strb	r1, [r3, #0]
 800566a:	9b03      	ldr	r3, [sp, #12]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2b2a      	cmp	r3, #42	; 0x2a
 8005670:	d016      	beq.n	80056a0 <_vfiprintf_r+0x14c>
 8005672:	2100      	movs	r1, #0
 8005674:	68eb      	ldr	r3, [r5, #12]
 8005676:	9f03      	ldr	r7, [sp, #12]
 8005678:	783a      	ldrb	r2, [r7, #0]
 800567a:	1c78      	adds	r0, r7, #1
 800567c:	3a30      	subs	r2, #48	; 0x30
 800567e:	4684      	mov	ip, r0
 8005680:	2a09      	cmp	r2, #9
 8005682:	d94f      	bls.n	8005724 <_vfiprintf_r+0x1d0>
 8005684:	2900      	cmp	r1, #0
 8005686:	d111      	bne.n	80056ac <_vfiprintf_r+0x158>
 8005688:	e017      	b.n	80056ba <_vfiprintf_r+0x166>
 800568a:	3701      	adds	r7, #1
 800568c:	e7a9      	b.n	80055e2 <_vfiprintf_r+0x8e>
 800568e:	4b49      	ldr	r3, [pc, #292]	; (80057b4 <_vfiprintf_r+0x260>)
 8005690:	682a      	ldr	r2, [r5, #0]
 8005692:	1ac0      	subs	r0, r0, r3
 8005694:	2301      	movs	r3, #1
 8005696:	4083      	lsls	r3, r0
 8005698:	4313      	orrs	r3, r2
 800569a:	602b      	str	r3, [r5, #0]
 800569c:	9703      	str	r7, [sp, #12]
 800569e:	e7cb      	b.n	8005638 <_vfiprintf_r+0xe4>
 80056a0:	9b07      	ldr	r3, [sp, #28]
 80056a2:	1d19      	adds	r1, r3, #4
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	9107      	str	r1, [sp, #28]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	db01      	blt.n	80056b0 <_vfiprintf_r+0x15c>
 80056ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80056ae:	e004      	b.n	80056ba <_vfiprintf_r+0x166>
 80056b0:	425b      	negs	r3, r3
 80056b2:	60eb      	str	r3, [r5, #12]
 80056b4:	2302      	movs	r3, #2
 80056b6:	4313      	orrs	r3, r2
 80056b8:	602b      	str	r3, [r5, #0]
 80056ba:	783b      	ldrb	r3, [r7, #0]
 80056bc:	2b2e      	cmp	r3, #46	; 0x2e
 80056be:	d10a      	bne.n	80056d6 <_vfiprintf_r+0x182>
 80056c0:	787b      	ldrb	r3, [r7, #1]
 80056c2:	2b2a      	cmp	r3, #42	; 0x2a
 80056c4:	d137      	bne.n	8005736 <_vfiprintf_r+0x1e2>
 80056c6:	9b07      	ldr	r3, [sp, #28]
 80056c8:	3702      	adds	r7, #2
 80056ca:	1d1a      	adds	r2, r3, #4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	9207      	str	r2, [sp, #28]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	db2d      	blt.n	8005730 <_vfiprintf_r+0x1dc>
 80056d4:	9309      	str	r3, [sp, #36]	; 0x24
 80056d6:	2203      	movs	r2, #3
 80056d8:	7839      	ldrb	r1, [r7, #0]
 80056da:	4837      	ldr	r0, [pc, #220]	; (80057b8 <_vfiprintf_r+0x264>)
 80056dc:	f000 fc94 	bl	8006008 <memchr>
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d007      	beq.n	80056f4 <_vfiprintf_r+0x1a0>
 80056e4:	4b34      	ldr	r3, [pc, #208]	; (80057b8 <_vfiprintf_r+0x264>)
 80056e6:	682a      	ldr	r2, [r5, #0]
 80056e8:	1ac0      	subs	r0, r0, r3
 80056ea:	2340      	movs	r3, #64	; 0x40
 80056ec:	4083      	lsls	r3, r0
 80056ee:	4313      	orrs	r3, r2
 80056f0:	3701      	adds	r7, #1
 80056f2:	602b      	str	r3, [r5, #0]
 80056f4:	7839      	ldrb	r1, [r7, #0]
 80056f6:	1c7b      	adds	r3, r7, #1
 80056f8:	2206      	movs	r2, #6
 80056fa:	4830      	ldr	r0, [pc, #192]	; (80057bc <_vfiprintf_r+0x268>)
 80056fc:	9303      	str	r3, [sp, #12]
 80056fe:	7629      	strb	r1, [r5, #24]
 8005700:	f000 fc82 	bl	8006008 <memchr>
 8005704:	2800      	cmp	r0, #0
 8005706:	d045      	beq.n	8005794 <_vfiprintf_r+0x240>
 8005708:	4b2d      	ldr	r3, [pc, #180]	; (80057c0 <_vfiprintf_r+0x26c>)
 800570a:	2b00      	cmp	r3, #0
 800570c:	d127      	bne.n	800575e <_vfiprintf_r+0x20a>
 800570e:	2207      	movs	r2, #7
 8005710:	9b07      	ldr	r3, [sp, #28]
 8005712:	3307      	adds	r3, #7
 8005714:	4393      	bics	r3, r2
 8005716:	3308      	adds	r3, #8
 8005718:	9307      	str	r3, [sp, #28]
 800571a:	696b      	ldr	r3, [r5, #20]
 800571c:	9a04      	ldr	r2, [sp, #16]
 800571e:	189b      	adds	r3, r3, r2
 8005720:	616b      	str	r3, [r5, #20]
 8005722:	e75d      	b.n	80055e0 <_vfiprintf_r+0x8c>
 8005724:	210a      	movs	r1, #10
 8005726:	434b      	muls	r3, r1
 8005728:	4667      	mov	r7, ip
 800572a:	189b      	adds	r3, r3, r2
 800572c:	3909      	subs	r1, #9
 800572e:	e7a3      	b.n	8005678 <_vfiprintf_r+0x124>
 8005730:	2301      	movs	r3, #1
 8005732:	425b      	negs	r3, r3
 8005734:	e7ce      	b.n	80056d4 <_vfiprintf_r+0x180>
 8005736:	2300      	movs	r3, #0
 8005738:	001a      	movs	r2, r3
 800573a:	3701      	adds	r7, #1
 800573c:	606b      	str	r3, [r5, #4]
 800573e:	7839      	ldrb	r1, [r7, #0]
 8005740:	1c78      	adds	r0, r7, #1
 8005742:	3930      	subs	r1, #48	; 0x30
 8005744:	4684      	mov	ip, r0
 8005746:	2909      	cmp	r1, #9
 8005748:	d903      	bls.n	8005752 <_vfiprintf_r+0x1fe>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0c3      	beq.n	80056d6 <_vfiprintf_r+0x182>
 800574e:	9209      	str	r2, [sp, #36]	; 0x24
 8005750:	e7c1      	b.n	80056d6 <_vfiprintf_r+0x182>
 8005752:	230a      	movs	r3, #10
 8005754:	435a      	muls	r2, r3
 8005756:	4667      	mov	r7, ip
 8005758:	1852      	adds	r2, r2, r1
 800575a:	3b09      	subs	r3, #9
 800575c:	e7ef      	b.n	800573e <_vfiprintf_r+0x1ea>
 800575e:	ab07      	add	r3, sp, #28
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	0022      	movs	r2, r4
 8005764:	0029      	movs	r1, r5
 8005766:	0030      	movs	r0, r6
 8005768:	4b16      	ldr	r3, [pc, #88]	; (80057c4 <_vfiprintf_r+0x270>)
 800576a:	e000      	b.n	800576e <_vfiprintf_r+0x21a>
 800576c:	bf00      	nop
 800576e:	9004      	str	r0, [sp, #16]
 8005770:	9b04      	ldr	r3, [sp, #16]
 8005772:	3301      	adds	r3, #1
 8005774:	d1d1      	bne.n	800571a <_vfiprintf_r+0x1c6>
 8005776:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005778:	07db      	lsls	r3, r3, #31
 800577a:	d405      	bmi.n	8005788 <_vfiprintf_r+0x234>
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	059b      	lsls	r3, r3, #22
 8005780:	d402      	bmi.n	8005788 <_vfiprintf_r+0x234>
 8005782:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005784:	f7ff fe24 	bl	80053d0 <__retarget_lock_release_recursive>
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	065b      	lsls	r3, r3, #25
 800578c:	d500      	bpl.n	8005790 <_vfiprintf_r+0x23c>
 800578e:	e70a      	b.n	80055a6 <_vfiprintf_r+0x52>
 8005790:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005792:	e70a      	b.n	80055aa <_vfiprintf_r+0x56>
 8005794:	ab07      	add	r3, sp, #28
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	0022      	movs	r2, r4
 800579a:	0029      	movs	r1, r5
 800579c:	0030      	movs	r0, r6
 800579e:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <_vfiprintf_r+0x270>)
 80057a0:	f000 f882 	bl	80058a8 <_printf_i>
 80057a4:	e7e3      	b.n	800576e <_vfiprintf_r+0x21a>
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	08006610 	.word	0x08006610
 80057ac:	08006630 	.word	0x08006630
 80057b0:	080065f0 	.word	0x080065f0
 80057b4:	08006650 	.word	0x08006650
 80057b8:	08006656 	.word	0x08006656
 80057bc:	0800665a 	.word	0x0800665a
 80057c0:	00000000 	.word	0x00000000
 80057c4:	0800552f 	.word	0x0800552f

080057c8 <_printf_common>:
 80057c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ca:	0015      	movs	r5, r2
 80057cc:	9301      	str	r3, [sp, #4]
 80057ce:	688a      	ldr	r2, [r1, #8]
 80057d0:	690b      	ldr	r3, [r1, #16]
 80057d2:	000c      	movs	r4, r1
 80057d4:	9000      	str	r0, [sp, #0]
 80057d6:	4293      	cmp	r3, r2
 80057d8:	da00      	bge.n	80057dc <_printf_common+0x14>
 80057da:	0013      	movs	r3, r2
 80057dc:	0022      	movs	r2, r4
 80057de:	602b      	str	r3, [r5, #0]
 80057e0:	3243      	adds	r2, #67	; 0x43
 80057e2:	7812      	ldrb	r2, [r2, #0]
 80057e4:	2a00      	cmp	r2, #0
 80057e6:	d001      	beq.n	80057ec <_printf_common+0x24>
 80057e8:	3301      	adds	r3, #1
 80057ea:	602b      	str	r3, [r5, #0]
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	069b      	lsls	r3, r3, #26
 80057f0:	d502      	bpl.n	80057f8 <_printf_common+0x30>
 80057f2:	682b      	ldr	r3, [r5, #0]
 80057f4:	3302      	adds	r3, #2
 80057f6:	602b      	str	r3, [r5, #0]
 80057f8:	6822      	ldr	r2, [r4, #0]
 80057fa:	2306      	movs	r3, #6
 80057fc:	0017      	movs	r7, r2
 80057fe:	401f      	ands	r7, r3
 8005800:	421a      	tst	r2, r3
 8005802:	d027      	beq.n	8005854 <_printf_common+0x8c>
 8005804:	0023      	movs	r3, r4
 8005806:	3343      	adds	r3, #67	; 0x43
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	1e5a      	subs	r2, r3, #1
 800580c:	4193      	sbcs	r3, r2
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	0692      	lsls	r2, r2, #26
 8005812:	d430      	bmi.n	8005876 <_printf_common+0xae>
 8005814:	0022      	movs	r2, r4
 8005816:	9901      	ldr	r1, [sp, #4]
 8005818:	9800      	ldr	r0, [sp, #0]
 800581a:	9e08      	ldr	r6, [sp, #32]
 800581c:	3243      	adds	r2, #67	; 0x43
 800581e:	47b0      	blx	r6
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	d025      	beq.n	8005870 <_printf_common+0xa8>
 8005824:	2306      	movs	r3, #6
 8005826:	6820      	ldr	r0, [r4, #0]
 8005828:	682a      	ldr	r2, [r5, #0]
 800582a:	68e1      	ldr	r1, [r4, #12]
 800582c:	2500      	movs	r5, #0
 800582e:	4003      	ands	r3, r0
 8005830:	2b04      	cmp	r3, #4
 8005832:	d103      	bne.n	800583c <_printf_common+0x74>
 8005834:	1a8d      	subs	r5, r1, r2
 8005836:	43eb      	mvns	r3, r5
 8005838:	17db      	asrs	r3, r3, #31
 800583a:	401d      	ands	r5, r3
 800583c:	68a3      	ldr	r3, [r4, #8]
 800583e:	6922      	ldr	r2, [r4, #16]
 8005840:	4293      	cmp	r3, r2
 8005842:	dd01      	ble.n	8005848 <_printf_common+0x80>
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	18ed      	adds	r5, r5, r3
 8005848:	2700      	movs	r7, #0
 800584a:	42bd      	cmp	r5, r7
 800584c:	d120      	bne.n	8005890 <_printf_common+0xc8>
 800584e:	2000      	movs	r0, #0
 8005850:	e010      	b.n	8005874 <_printf_common+0xac>
 8005852:	3701      	adds	r7, #1
 8005854:	68e3      	ldr	r3, [r4, #12]
 8005856:	682a      	ldr	r2, [r5, #0]
 8005858:	1a9b      	subs	r3, r3, r2
 800585a:	42bb      	cmp	r3, r7
 800585c:	ddd2      	ble.n	8005804 <_printf_common+0x3c>
 800585e:	0022      	movs	r2, r4
 8005860:	2301      	movs	r3, #1
 8005862:	9901      	ldr	r1, [sp, #4]
 8005864:	9800      	ldr	r0, [sp, #0]
 8005866:	9e08      	ldr	r6, [sp, #32]
 8005868:	3219      	adds	r2, #25
 800586a:	47b0      	blx	r6
 800586c:	1c43      	adds	r3, r0, #1
 800586e:	d1f0      	bne.n	8005852 <_printf_common+0x8a>
 8005870:	2001      	movs	r0, #1
 8005872:	4240      	negs	r0, r0
 8005874:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005876:	2030      	movs	r0, #48	; 0x30
 8005878:	18e1      	adds	r1, r4, r3
 800587a:	3143      	adds	r1, #67	; 0x43
 800587c:	7008      	strb	r0, [r1, #0]
 800587e:	0021      	movs	r1, r4
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	3145      	adds	r1, #69	; 0x45
 8005884:	7809      	ldrb	r1, [r1, #0]
 8005886:	18a2      	adds	r2, r4, r2
 8005888:	3243      	adds	r2, #67	; 0x43
 800588a:	3302      	adds	r3, #2
 800588c:	7011      	strb	r1, [r2, #0]
 800588e:	e7c1      	b.n	8005814 <_printf_common+0x4c>
 8005890:	0022      	movs	r2, r4
 8005892:	2301      	movs	r3, #1
 8005894:	9901      	ldr	r1, [sp, #4]
 8005896:	9800      	ldr	r0, [sp, #0]
 8005898:	9e08      	ldr	r6, [sp, #32]
 800589a:	321a      	adds	r2, #26
 800589c:	47b0      	blx	r6
 800589e:	1c43      	adds	r3, r0, #1
 80058a0:	d0e6      	beq.n	8005870 <_printf_common+0xa8>
 80058a2:	3701      	adds	r7, #1
 80058a4:	e7d1      	b.n	800584a <_printf_common+0x82>
	...

080058a8 <_printf_i>:
 80058a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058aa:	b08b      	sub	sp, #44	; 0x2c
 80058ac:	9206      	str	r2, [sp, #24]
 80058ae:	000a      	movs	r2, r1
 80058b0:	3243      	adds	r2, #67	; 0x43
 80058b2:	9307      	str	r3, [sp, #28]
 80058b4:	9005      	str	r0, [sp, #20]
 80058b6:	9204      	str	r2, [sp, #16]
 80058b8:	7e0a      	ldrb	r2, [r1, #24]
 80058ba:	000c      	movs	r4, r1
 80058bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80058be:	2a78      	cmp	r2, #120	; 0x78
 80058c0:	d807      	bhi.n	80058d2 <_printf_i+0x2a>
 80058c2:	2a62      	cmp	r2, #98	; 0x62
 80058c4:	d809      	bhi.n	80058da <_printf_i+0x32>
 80058c6:	2a00      	cmp	r2, #0
 80058c8:	d100      	bne.n	80058cc <_printf_i+0x24>
 80058ca:	e0c1      	b.n	8005a50 <_printf_i+0x1a8>
 80058cc:	2a58      	cmp	r2, #88	; 0x58
 80058ce:	d100      	bne.n	80058d2 <_printf_i+0x2a>
 80058d0:	e08c      	b.n	80059ec <_printf_i+0x144>
 80058d2:	0026      	movs	r6, r4
 80058d4:	3642      	adds	r6, #66	; 0x42
 80058d6:	7032      	strb	r2, [r6, #0]
 80058d8:	e022      	b.n	8005920 <_printf_i+0x78>
 80058da:	0010      	movs	r0, r2
 80058dc:	3863      	subs	r0, #99	; 0x63
 80058de:	2815      	cmp	r0, #21
 80058e0:	d8f7      	bhi.n	80058d2 <_printf_i+0x2a>
 80058e2:	f7fa fc0f 	bl	8000104 <__gnu_thumb1_case_shi>
 80058e6:	0016      	.short	0x0016
 80058e8:	fff6001f 	.word	0xfff6001f
 80058ec:	fff6fff6 	.word	0xfff6fff6
 80058f0:	001ffff6 	.word	0x001ffff6
 80058f4:	fff6fff6 	.word	0xfff6fff6
 80058f8:	fff6fff6 	.word	0xfff6fff6
 80058fc:	003600a8 	.word	0x003600a8
 8005900:	fff6009a 	.word	0xfff6009a
 8005904:	00b9fff6 	.word	0x00b9fff6
 8005908:	0036fff6 	.word	0x0036fff6
 800590c:	fff6fff6 	.word	0xfff6fff6
 8005910:	009e      	.short	0x009e
 8005912:	0026      	movs	r6, r4
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	3642      	adds	r6, #66	; 0x42
 8005918:	1d11      	adds	r1, r2, #4
 800591a:	6019      	str	r1, [r3, #0]
 800591c:	6813      	ldr	r3, [r2, #0]
 800591e:	7033      	strb	r3, [r6, #0]
 8005920:	2301      	movs	r3, #1
 8005922:	e0a7      	b.n	8005a74 <_printf_i+0x1cc>
 8005924:	6808      	ldr	r0, [r1, #0]
 8005926:	6819      	ldr	r1, [r3, #0]
 8005928:	1d0a      	adds	r2, r1, #4
 800592a:	0605      	lsls	r5, r0, #24
 800592c:	d50b      	bpl.n	8005946 <_printf_i+0x9e>
 800592e:	680d      	ldr	r5, [r1, #0]
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	2d00      	cmp	r5, #0
 8005934:	da03      	bge.n	800593e <_printf_i+0x96>
 8005936:	232d      	movs	r3, #45	; 0x2d
 8005938:	9a04      	ldr	r2, [sp, #16]
 800593a:	426d      	negs	r5, r5
 800593c:	7013      	strb	r3, [r2, #0]
 800593e:	4b61      	ldr	r3, [pc, #388]	; (8005ac4 <_printf_i+0x21c>)
 8005940:	270a      	movs	r7, #10
 8005942:	9303      	str	r3, [sp, #12]
 8005944:	e01b      	b.n	800597e <_printf_i+0xd6>
 8005946:	680d      	ldr	r5, [r1, #0]
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	0641      	lsls	r1, r0, #25
 800594c:	d5f1      	bpl.n	8005932 <_printf_i+0x8a>
 800594e:	b22d      	sxth	r5, r5
 8005950:	e7ef      	b.n	8005932 <_printf_i+0x8a>
 8005952:	680d      	ldr	r5, [r1, #0]
 8005954:	6819      	ldr	r1, [r3, #0]
 8005956:	1d08      	adds	r0, r1, #4
 8005958:	6018      	str	r0, [r3, #0]
 800595a:	062e      	lsls	r6, r5, #24
 800595c:	d501      	bpl.n	8005962 <_printf_i+0xba>
 800595e:	680d      	ldr	r5, [r1, #0]
 8005960:	e003      	b.n	800596a <_printf_i+0xc2>
 8005962:	066d      	lsls	r5, r5, #25
 8005964:	d5fb      	bpl.n	800595e <_printf_i+0xb6>
 8005966:	680d      	ldr	r5, [r1, #0]
 8005968:	b2ad      	uxth	r5, r5
 800596a:	4b56      	ldr	r3, [pc, #344]	; (8005ac4 <_printf_i+0x21c>)
 800596c:	2708      	movs	r7, #8
 800596e:	9303      	str	r3, [sp, #12]
 8005970:	2a6f      	cmp	r2, #111	; 0x6f
 8005972:	d000      	beq.n	8005976 <_printf_i+0xce>
 8005974:	3702      	adds	r7, #2
 8005976:	0023      	movs	r3, r4
 8005978:	2200      	movs	r2, #0
 800597a:	3343      	adds	r3, #67	; 0x43
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	6863      	ldr	r3, [r4, #4]
 8005980:	60a3      	str	r3, [r4, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	db03      	blt.n	800598e <_printf_i+0xe6>
 8005986:	2204      	movs	r2, #4
 8005988:	6821      	ldr	r1, [r4, #0]
 800598a:	4391      	bics	r1, r2
 800598c:	6021      	str	r1, [r4, #0]
 800598e:	2d00      	cmp	r5, #0
 8005990:	d102      	bne.n	8005998 <_printf_i+0xf0>
 8005992:	9e04      	ldr	r6, [sp, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00c      	beq.n	80059b2 <_printf_i+0x10a>
 8005998:	9e04      	ldr	r6, [sp, #16]
 800599a:	0028      	movs	r0, r5
 800599c:	0039      	movs	r1, r7
 800599e:	f7fa fc41 	bl	8000224 <__aeabi_uidivmod>
 80059a2:	9b03      	ldr	r3, [sp, #12]
 80059a4:	3e01      	subs	r6, #1
 80059a6:	5c5b      	ldrb	r3, [r3, r1]
 80059a8:	7033      	strb	r3, [r6, #0]
 80059aa:	002b      	movs	r3, r5
 80059ac:	0005      	movs	r5, r0
 80059ae:	429f      	cmp	r7, r3
 80059b0:	d9f3      	bls.n	800599a <_printf_i+0xf2>
 80059b2:	2f08      	cmp	r7, #8
 80059b4:	d109      	bne.n	80059ca <_printf_i+0x122>
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	07db      	lsls	r3, r3, #31
 80059ba:	d506      	bpl.n	80059ca <_printf_i+0x122>
 80059bc:	6863      	ldr	r3, [r4, #4]
 80059be:	6922      	ldr	r2, [r4, #16]
 80059c0:	4293      	cmp	r3, r2
 80059c2:	dc02      	bgt.n	80059ca <_printf_i+0x122>
 80059c4:	2330      	movs	r3, #48	; 0x30
 80059c6:	3e01      	subs	r6, #1
 80059c8:	7033      	strb	r3, [r6, #0]
 80059ca:	9b04      	ldr	r3, [sp, #16]
 80059cc:	1b9b      	subs	r3, r3, r6
 80059ce:	6123      	str	r3, [r4, #16]
 80059d0:	9b07      	ldr	r3, [sp, #28]
 80059d2:	0021      	movs	r1, r4
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	9805      	ldr	r0, [sp, #20]
 80059d8:	9b06      	ldr	r3, [sp, #24]
 80059da:	aa09      	add	r2, sp, #36	; 0x24
 80059dc:	f7ff fef4 	bl	80057c8 <_printf_common>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d14c      	bne.n	8005a7e <_printf_i+0x1d6>
 80059e4:	2001      	movs	r0, #1
 80059e6:	4240      	negs	r0, r0
 80059e8:	b00b      	add	sp, #44	; 0x2c
 80059ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ec:	3145      	adds	r1, #69	; 0x45
 80059ee:	700a      	strb	r2, [r1, #0]
 80059f0:	4a34      	ldr	r2, [pc, #208]	; (8005ac4 <_printf_i+0x21c>)
 80059f2:	9203      	str	r2, [sp, #12]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	6821      	ldr	r1, [r4, #0]
 80059f8:	ca20      	ldmia	r2!, {r5}
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	0608      	lsls	r0, r1, #24
 80059fe:	d516      	bpl.n	8005a2e <_printf_i+0x186>
 8005a00:	07cb      	lsls	r3, r1, #31
 8005a02:	d502      	bpl.n	8005a0a <_printf_i+0x162>
 8005a04:	2320      	movs	r3, #32
 8005a06:	4319      	orrs	r1, r3
 8005a08:	6021      	str	r1, [r4, #0]
 8005a0a:	2710      	movs	r7, #16
 8005a0c:	2d00      	cmp	r5, #0
 8005a0e:	d1b2      	bne.n	8005976 <_printf_i+0xce>
 8005a10:	2320      	movs	r3, #32
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	439a      	bics	r2, r3
 8005a16:	6022      	str	r2, [r4, #0]
 8005a18:	e7ad      	b.n	8005976 <_printf_i+0xce>
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	6809      	ldr	r1, [r1, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	6022      	str	r2, [r4, #0]
 8005a22:	0022      	movs	r2, r4
 8005a24:	2178      	movs	r1, #120	; 0x78
 8005a26:	3245      	adds	r2, #69	; 0x45
 8005a28:	7011      	strb	r1, [r2, #0]
 8005a2a:	4a27      	ldr	r2, [pc, #156]	; (8005ac8 <_printf_i+0x220>)
 8005a2c:	e7e1      	b.n	80059f2 <_printf_i+0x14a>
 8005a2e:	0648      	lsls	r0, r1, #25
 8005a30:	d5e6      	bpl.n	8005a00 <_printf_i+0x158>
 8005a32:	b2ad      	uxth	r5, r5
 8005a34:	e7e4      	b.n	8005a00 <_printf_i+0x158>
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	680d      	ldr	r5, [r1, #0]
 8005a3a:	1d10      	adds	r0, r2, #4
 8005a3c:	6949      	ldr	r1, [r1, #20]
 8005a3e:	6018      	str	r0, [r3, #0]
 8005a40:	6813      	ldr	r3, [r2, #0]
 8005a42:	062e      	lsls	r6, r5, #24
 8005a44:	d501      	bpl.n	8005a4a <_printf_i+0x1a2>
 8005a46:	6019      	str	r1, [r3, #0]
 8005a48:	e002      	b.n	8005a50 <_printf_i+0x1a8>
 8005a4a:	066d      	lsls	r5, r5, #25
 8005a4c:	d5fb      	bpl.n	8005a46 <_printf_i+0x19e>
 8005a4e:	8019      	strh	r1, [r3, #0]
 8005a50:	2300      	movs	r3, #0
 8005a52:	9e04      	ldr	r6, [sp, #16]
 8005a54:	6123      	str	r3, [r4, #16]
 8005a56:	e7bb      	b.n	80059d0 <_printf_i+0x128>
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	1d11      	adds	r1, r2, #4
 8005a5c:	6019      	str	r1, [r3, #0]
 8005a5e:	6816      	ldr	r6, [r2, #0]
 8005a60:	2100      	movs	r1, #0
 8005a62:	0030      	movs	r0, r6
 8005a64:	6862      	ldr	r2, [r4, #4]
 8005a66:	f000 facf 	bl	8006008 <memchr>
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	d001      	beq.n	8005a72 <_printf_i+0x1ca>
 8005a6e:	1b80      	subs	r0, r0, r6
 8005a70:	6060      	str	r0, [r4, #4]
 8005a72:	6863      	ldr	r3, [r4, #4]
 8005a74:	6123      	str	r3, [r4, #16]
 8005a76:	2300      	movs	r3, #0
 8005a78:	9a04      	ldr	r2, [sp, #16]
 8005a7a:	7013      	strb	r3, [r2, #0]
 8005a7c:	e7a8      	b.n	80059d0 <_printf_i+0x128>
 8005a7e:	6923      	ldr	r3, [r4, #16]
 8005a80:	0032      	movs	r2, r6
 8005a82:	9906      	ldr	r1, [sp, #24]
 8005a84:	9805      	ldr	r0, [sp, #20]
 8005a86:	9d07      	ldr	r5, [sp, #28]
 8005a88:	47a8      	blx	r5
 8005a8a:	1c43      	adds	r3, r0, #1
 8005a8c:	d0aa      	beq.n	80059e4 <_printf_i+0x13c>
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	079b      	lsls	r3, r3, #30
 8005a92:	d415      	bmi.n	8005ac0 <_printf_i+0x218>
 8005a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a96:	68e0      	ldr	r0, [r4, #12]
 8005a98:	4298      	cmp	r0, r3
 8005a9a:	daa5      	bge.n	80059e8 <_printf_i+0x140>
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	e7a3      	b.n	80059e8 <_printf_i+0x140>
 8005aa0:	0022      	movs	r2, r4
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	9906      	ldr	r1, [sp, #24]
 8005aa6:	9805      	ldr	r0, [sp, #20]
 8005aa8:	9e07      	ldr	r6, [sp, #28]
 8005aaa:	3219      	adds	r2, #25
 8005aac:	47b0      	blx	r6
 8005aae:	1c43      	adds	r3, r0, #1
 8005ab0:	d098      	beq.n	80059e4 <_printf_i+0x13c>
 8005ab2:	3501      	adds	r5, #1
 8005ab4:	68e3      	ldr	r3, [r4, #12]
 8005ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ab8:	1a9b      	subs	r3, r3, r2
 8005aba:	42ab      	cmp	r3, r5
 8005abc:	dcf0      	bgt.n	8005aa0 <_printf_i+0x1f8>
 8005abe:	e7e9      	b.n	8005a94 <_printf_i+0x1ec>
 8005ac0:	2500      	movs	r5, #0
 8005ac2:	e7f7      	b.n	8005ab4 <_printf_i+0x20c>
 8005ac4:	08006661 	.word	0x08006661
 8005ac8:	08006672 	.word	0x08006672

08005acc <_sbrk_r>:
 8005acc:	2300      	movs	r3, #0
 8005ace:	b570      	push	{r4, r5, r6, lr}
 8005ad0:	4d06      	ldr	r5, [pc, #24]	; (8005aec <_sbrk_r+0x20>)
 8005ad2:	0004      	movs	r4, r0
 8005ad4:	0008      	movs	r0, r1
 8005ad6:	602b      	str	r3, [r5, #0]
 8005ad8:	f7fb ff9e 	bl	8001a18 <_sbrk>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d103      	bne.n	8005ae8 <_sbrk_r+0x1c>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d000      	beq.n	8005ae8 <_sbrk_r+0x1c>
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	bd70      	pop	{r4, r5, r6, pc}
 8005aea:	46c0      	nop			; (mov r8, r8)
 8005aec:	20000424 	.word	0x20000424

08005af0 <__sread>:
 8005af0:	b570      	push	{r4, r5, r6, lr}
 8005af2:	000c      	movs	r4, r1
 8005af4:	250e      	movs	r5, #14
 8005af6:	5f49      	ldrsh	r1, [r1, r5]
 8005af8:	f000 faec 	bl	80060d4 <_read_r>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	db03      	blt.n	8005b08 <__sread+0x18>
 8005b00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005b02:	181b      	adds	r3, r3, r0
 8005b04:	6563      	str	r3, [r4, #84]	; 0x54
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	89a3      	ldrh	r3, [r4, #12]
 8005b0a:	4a02      	ldr	r2, [pc, #8]	; (8005b14 <__sread+0x24>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	81a3      	strh	r3, [r4, #12]
 8005b10:	e7f9      	b.n	8005b06 <__sread+0x16>
 8005b12:	46c0      	nop			; (mov r8, r8)
 8005b14:	ffffefff 	.word	0xffffefff

08005b18 <__swrite>:
 8005b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1a:	001f      	movs	r7, r3
 8005b1c:	898b      	ldrh	r3, [r1, #12]
 8005b1e:	0005      	movs	r5, r0
 8005b20:	000c      	movs	r4, r1
 8005b22:	0016      	movs	r6, r2
 8005b24:	05db      	lsls	r3, r3, #23
 8005b26:	d505      	bpl.n	8005b34 <__swrite+0x1c>
 8005b28:	230e      	movs	r3, #14
 8005b2a:	5ec9      	ldrsh	r1, [r1, r3]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2302      	movs	r3, #2
 8005b30:	f000 f9ea 	bl	8005f08 <_lseek_r>
 8005b34:	89a3      	ldrh	r3, [r4, #12]
 8005b36:	4a05      	ldr	r2, [pc, #20]	; (8005b4c <__swrite+0x34>)
 8005b38:	0028      	movs	r0, r5
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	81a3      	strh	r3, [r4, #12]
 8005b3e:	0032      	movs	r2, r6
 8005b40:	230e      	movs	r3, #14
 8005b42:	5ee1      	ldrsh	r1, [r4, r3]
 8005b44:	003b      	movs	r3, r7
 8005b46:	f000 f875 	bl	8005c34 <_write_r>
 8005b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b4c:	ffffefff 	.word	0xffffefff

08005b50 <__sseek>:
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	000c      	movs	r4, r1
 8005b54:	250e      	movs	r5, #14
 8005b56:	5f49      	ldrsh	r1, [r1, r5]
 8005b58:	f000 f9d6 	bl	8005f08 <_lseek_r>
 8005b5c:	89a3      	ldrh	r3, [r4, #12]
 8005b5e:	1c42      	adds	r2, r0, #1
 8005b60:	d103      	bne.n	8005b6a <__sseek+0x1a>
 8005b62:	4a05      	ldr	r2, [pc, #20]	; (8005b78 <__sseek+0x28>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	81a3      	strh	r3, [r4, #12]
 8005b68:	bd70      	pop	{r4, r5, r6, pc}
 8005b6a:	2280      	movs	r2, #128	; 0x80
 8005b6c:	0152      	lsls	r2, r2, #5
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	81a3      	strh	r3, [r4, #12]
 8005b72:	6560      	str	r0, [r4, #84]	; 0x54
 8005b74:	e7f8      	b.n	8005b68 <__sseek+0x18>
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	ffffefff 	.word	0xffffefff

08005b7c <__sclose>:
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	230e      	movs	r3, #14
 8005b80:	5ec9      	ldrsh	r1, [r1, r3]
 8005b82:	f000 f8e3 	bl	8005d4c <_close_r>
 8005b86:	bd10      	pop	{r4, pc}

08005b88 <__swbuf_r>:
 8005b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8a:	0005      	movs	r5, r0
 8005b8c:	000e      	movs	r6, r1
 8005b8e:	0014      	movs	r4, r2
 8005b90:	2800      	cmp	r0, #0
 8005b92:	d004      	beq.n	8005b9e <__swbuf_r+0x16>
 8005b94:	6983      	ldr	r3, [r0, #24]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <__swbuf_r+0x16>
 8005b9a:	f7ff fb77 	bl	800528c <__sinit>
 8005b9e:	4b22      	ldr	r3, [pc, #136]	; (8005c28 <__swbuf_r+0xa0>)
 8005ba0:	429c      	cmp	r4, r3
 8005ba2:	d12e      	bne.n	8005c02 <__swbuf_r+0x7a>
 8005ba4:	686c      	ldr	r4, [r5, #4]
 8005ba6:	69a3      	ldr	r3, [r4, #24]
 8005ba8:	60a3      	str	r3, [r4, #8]
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	071b      	lsls	r3, r3, #28
 8005bae:	d532      	bpl.n	8005c16 <__swbuf_r+0x8e>
 8005bb0:	6923      	ldr	r3, [r4, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d02f      	beq.n	8005c16 <__swbuf_r+0x8e>
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	6922      	ldr	r2, [r4, #16]
 8005bba:	b2f7      	uxtb	r7, r6
 8005bbc:	1a98      	subs	r0, r3, r2
 8005bbe:	6963      	ldr	r3, [r4, #20]
 8005bc0:	b2f6      	uxtb	r6, r6
 8005bc2:	4283      	cmp	r3, r0
 8005bc4:	dc05      	bgt.n	8005bd2 <__swbuf_r+0x4a>
 8005bc6:	0021      	movs	r1, r4
 8005bc8:	0028      	movs	r0, r5
 8005bca:	f000 f95d 	bl	8005e88 <_fflush_r>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	d127      	bne.n	8005c22 <__swbuf_r+0x9a>
 8005bd2:	68a3      	ldr	r3, [r4, #8]
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	60a3      	str	r3, [r4, #8]
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	6022      	str	r2, [r4, #0]
 8005be0:	701f      	strb	r7, [r3, #0]
 8005be2:	6963      	ldr	r3, [r4, #20]
 8005be4:	4283      	cmp	r3, r0
 8005be6:	d004      	beq.n	8005bf2 <__swbuf_r+0x6a>
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	07db      	lsls	r3, r3, #31
 8005bec:	d507      	bpl.n	8005bfe <__swbuf_r+0x76>
 8005bee:	2e0a      	cmp	r6, #10
 8005bf0:	d105      	bne.n	8005bfe <__swbuf_r+0x76>
 8005bf2:	0021      	movs	r1, r4
 8005bf4:	0028      	movs	r0, r5
 8005bf6:	f000 f947 	bl	8005e88 <_fflush_r>
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	d111      	bne.n	8005c22 <__swbuf_r+0x9a>
 8005bfe:	0030      	movs	r0, r6
 8005c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c02:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <__swbuf_r+0xa4>)
 8005c04:	429c      	cmp	r4, r3
 8005c06:	d101      	bne.n	8005c0c <__swbuf_r+0x84>
 8005c08:	68ac      	ldr	r4, [r5, #8]
 8005c0a:	e7cc      	b.n	8005ba6 <__swbuf_r+0x1e>
 8005c0c:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <__swbuf_r+0xa8>)
 8005c0e:	429c      	cmp	r4, r3
 8005c10:	d1c9      	bne.n	8005ba6 <__swbuf_r+0x1e>
 8005c12:	68ec      	ldr	r4, [r5, #12]
 8005c14:	e7c7      	b.n	8005ba6 <__swbuf_r+0x1e>
 8005c16:	0021      	movs	r1, r4
 8005c18:	0028      	movs	r0, r5
 8005c1a:	f000 f81f 	bl	8005c5c <__swsetup_r>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d0c9      	beq.n	8005bb6 <__swbuf_r+0x2e>
 8005c22:	2601      	movs	r6, #1
 8005c24:	4276      	negs	r6, r6
 8005c26:	e7ea      	b.n	8005bfe <__swbuf_r+0x76>
 8005c28:	08006610 	.word	0x08006610
 8005c2c:	08006630 	.word	0x08006630
 8005c30:	080065f0 	.word	0x080065f0

08005c34 <_write_r>:
 8005c34:	b570      	push	{r4, r5, r6, lr}
 8005c36:	0004      	movs	r4, r0
 8005c38:	0008      	movs	r0, r1
 8005c3a:	0011      	movs	r1, r2
 8005c3c:	001a      	movs	r2, r3
 8005c3e:	2300      	movs	r3, #0
 8005c40:	4d05      	ldr	r5, [pc, #20]	; (8005c58 <_write_r+0x24>)
 8005c42:	602b      	str	r3, [r5, #0]
 8005c44:	f7fb fea0 	bl	8001988 <_write>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d103      	bne.n	8005c54 <_write_r+0x20>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d000      	beq.n	8005c54 <_write_r+0x20>
 8005c52:	6023      	str	r3, [r4, #0]
 8005c54:	bd70      	pop	{r4, r5, r6, pc}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	20000424 	.word	0x20000424

08005c5c <__swsetup_r>:
 8005c5c:	4b37      	ldr	r3, [pc, #220]	; (8005d3c <__swsetup_r+0xe0>)
 8005c5e:	b570      	push	{r4, r5, r6, lr}
 8005c60:	681d      	ldr	r5, [r3, #0]
 8005c62:	0006      	movs	r6, r0
 8005c64:	000c      	movs	r4, r1
 8005c66:	2d00      	cmp	r5, #0
 8005c68:	d005      	beq.n	8005c76 <__swsetup_r+0x1a>
 8005c6a:	69ab      	ldr	r3, [r5, #24]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d102      	bne.n	8005c76 <__swsetup_r+0x1a>
 8005c70:	0028      	movs	r0, r5
 8005c72:	f7ff fb0b 	bl	800528c <__sinit>
 8005c76:	4b32      	ldr	r3, [pc, #200]	; (8005d40 <__swsetup_r+0xe4>)
 8005c78:	429c      	cmp	r4, r3
 8005c7a:	d10f      	bne.n	8005c9c <__swsetup_r+0x40>
 8005c7c:	686c      	ldr	r4, [r5, #4]
 8005c7e:	230c      	movs	r3, #12
 8005c80:	5ee2      	ldrsh	r2, [r4, r3]
 8005c82:	b293      	uxth	r3, r2
 8005c84:	0711      	lsls	r1, r2, #28
 8005c86:	d42d      	bmi.n	8005ce4 <__swsetup_r+0x88>
 8005c88:	06d9      	lsls	r1, r3, #27
 8005c8a:	d411      	bmi.n	8005cb0 <__swsetup_r+0x54>
 8005c8c:	2309      	movs	r3, #9
 8005c8e:	2001      	movs	r0, #1
 8005c90:	6033      	str	r3, [r6, #0]
 8005c92:	3337      	adds	r3, #55	; 0x37
 8005c94:	4313      	orrs	r3, r2
 8005c96:	81a3      	strh	r3, [r4, #12]
 8005c98:	4240      	negs	r0, r0
 8005c9a:	bd70      	pop	{r4, r5, r6, pc}
 8005c9c:	4b29      	ldr	r3, [pc, #164]	; (8005d44 <__swsetup_r+0xe8>)
 8005c9e:	429c      	cmp	r4, r3
 8005ca0:	d101      	bne.n	8005ca6 <__swsetup_r+0x4a>
 8005ca2:	68ac      	ldr	r4, [r5, #8]
 8005ca4:	e7eb      	b.n	8005c7e <__swsetup_r+0x22>
 8005ca6:	4b28      	ldr	r3, [pc, #160]	; (8005d48 <__swsetup_r+0xec>)
 8005ca8:	429c      	cmp	r4, r3
 8005caa:	d1e8      	bne.n	8005c7e <__swsetup_r+0x22>
 8005cac:	68ec      	ldr	r4, [r5, #12]
 8005cae:	e7e6      	b.n	8005c7e <__swsetup_r+0x22>
 8005cb0:	075b      	lsls	r3, r3, #29
 8005cb2:	d513      	bpl.n	8005cdc <__swsetup_r+0x80>
 8005cb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cb6:	2900      	cmp	r1, #0
 8005cb8:	d008      	beq.n	8005ccc <__swsetup_r+0x70>
 8005cba:	0023      	movs	r3, r4
 8005cbc:	3344      	adds	r3, #68	; 0x44
 8005cbe:	4299      	cmp	r1, r3
 8005cc0:	d002      	beq.n	8005cc8 <__swsetup_r+0x6c>
 8005cc2:	0030      	movs	r0, r6
 8005cc4:	f000 f9bc 	bl	8006040 <_free_r>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	6363      	str	r3, [r4, #52]	; 0x34
 8005ccc:	2224      	movs	r2, #36	; 0x24
 8005cce:	89a3      	ldrh	r3, [r4, #12]
 8005cd0:	4393      	bics	r3, r2
 8005cd2:	81a3      	strh	r3, [r4, #12]
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	6063      	str	r3, [r4, #4]
 8005cd8:	6923      	ldr	r3, [r4, #16]
 8005cda:	6023      	str	r3, [r4, #0]
 8005cdc:	2308      	movs	r3, #8
 8005cde:	89a2      	ldrh	r2, [r4, #12]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	81a3      	strh	r3, [r4, #12]
 8005ce4:	6923      	ldr	r3, [r4, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10b      	bne.n	8005d02 <__swsetup_r+0xa6>
 8005cea:	21a0      	movs	r1, #160	; 0xa0
 8005cec:	2280      	movs	r2, #128	; 0x80
 8005cee:	89a3      	ldrh	r3, [r4, #12]
 8005cf0:	0089      	lsls	r1, r1, #2
 8005cf2:	0092      	lsls	r2, r2, #2
 8005cf4:	400b      	ands	r3, r1
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d003      	beq.n	8005d02 <__swsetup_r+0xa6>
 8005cfa:	0021      	movs	r1, r4
 8005cfc:	0030      	movs	r0, r6
 8005cfe:	f000 f93f 	bl	8005f80 <__smakebuf_r>
 8005d02:	220c      	movs	r2, #12
 8005d04:	5ea3      	ldrsh	r3, [r4, r2]
 8005d06:	2001      	movs	r0, #1
 8005d08:	001a      	movs	r2, r3
 8005d0a:	b299      	uxth	r1, r3
 8005d0c:	4002      	ands	r2, r0
 8005d0e:	4203      	tst	r3, r0
 8005d10:	d00f      	beq.n	8005d32 <__swsetup_r+0xd6>
 8005d12:	2200      	movs	r2, #0
 8005d14:	60a2      	str	r2, [r4, #8]
 8005d16:	6962      	ldr	r2, [r4, #20]
 8005d18:	4252      	negs	r2, r2
 8005d1a:	61a2      	str	r2, [r4, #24]
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	6922      	ldr	r2, [r4, #16]
 8005d20:	4282      	cmp	r2, r0
 8005d22:	d1ba      	bne.n	8005c9a <__swsetup_r+0x3e>
 8005d24:	060a      	lsls	r2, r1, #24
 8005d26:	d5b8      	bpl.n	8005c9a <__swsetup_r+0x3e>
 8005d28:	2240      	movs	r2, #64	; 0x40
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	81a3      	strh	r3, [r4, #12]
 8005d2e:	3801      	subs	r0, #1
 8005d30:	e7b3      	b.n	8005c9a <__swsetup_r+0x3e>
 8005d32:	0788      	lsls	r0, r1, #30
 8005d34:	d400      	bmi.n	8005d38 <__swsetup_r+0xdc>
 8005d36:	6962      	ldr	r2, [r4, #20]
 8005d38:	60a2      	str	r2, [r4, #8]
 8005d3a:	e7ef      	b.n	8005d1c <__swsetup_r+0xc0>
 8005d3c:	200001d4 	.word	0x200001d4
 8005d40:	08006610 	.word	0x08006610
 8005d44:	08006630 	.word	0x08006630
 8005d48:	080065f0 	.word	0x080065f0

08005d4c <_close_r>:
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	b570      	push	{r4, r5, r6, lr}
 8005d50:	4d06      	ldr	r5, [pc, #24]	; (8005d6c <_close_r+0x20>)
 8005d52:	0004      	movs	r4, r0
 8005d54:	0008      	movs	r0, r1
 8005d56:	602b      	str	r3, [r5, #0]
 8005d58:	f7fb fe32 	bl	80019c0 <_close>
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	d103      	bne.n	8005d68 <_close_r+0x1c>
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d000      	beq.n	8005d68 <_close_r+0x1c>
 8005d66:	6023      	str	r3, [r4, #0]
 8005d68:	bd70      	pop	{r4, r5, r6, pc}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	20000424 	.word	0x20000424

08005d70 <__sflush_r>:
 8005d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d72:	898b      	ldrh	r3, [r1, #12]
 8005d74:	0005      	movs	r5, r0
 8005d76:	000c      	movs	r4, r1
 8005d78:	071a      	lsls	r2, r3, #28
 8005d7a:	d45f      	bmi.n	8005e3c <__sflush_r+0xcc>
 8005d7c:	684a      	ldr	r2, [r1, #4]
 8005d7e:	2a00      	cmp	r2, #0
 8005d80:	dc04      	bgt.n	8005d8c <__sflush_r+0x1c>
 8005d82:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005d84:	2a00      	cmp	r2, #0
 8005d86:	dc01      	bgt.n	8005d8c <__sflush_r+0x1c>
 8005d88:	2000      	movs	r0, #0
 8005d8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d8c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005d8e:	2f00      	cmp	r7, #0
 8005d90:	d0fa      	beq.n	8005d88 <__sflush_r+0x18>
 8005d92:	2200      	movs	r2, #0
 8005d94:	2180      	movs	r1, #128	; 0x80
 8005d96:	682e      	ldr	r6, [r5, #0]
 8005d98:	602a      	str	r2, [r5, #0]
 8005d9a:	001a      	movs	r2, r3
 8005d9c:	0149      	lsls	r1, r1, #5
 8005d9e:	400a      	ands	r2, r1
 8005da0:	420b      	tst	r3, r1
 8005da2:	d034      	beq.n	8005e0e <__sflush_r+0x9e>
 8005da4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005da6:	89a3      	ldrh	r3, [r4, #12]
 8005da8:	075b      	lsls	r3, r3, #29
 8005daa:	d506      	bpl.n	8005dba <__sflush_r+0x4a>
 8005dac:	6863      	ldr	r3, [r4, #4]
 8005dae:	1ac0      	subs	r0, r0, r3
 8005db0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <__sflush_r+0x4a>
 8005db6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005db8:	1ac0      	subs	r0, r0, r3
 8005dba:	0002      	movs	r2, r0
 8005dbc:	6a21      	ldr	r1, [r4, #32]
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	0028      	movs	r0, r5
 8005dc2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005dc4:	47b8      	blx	r7
 8005dc6:	89a1      	ldrh	r1, [r4, #12]
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	d106      	bne.n	8005dda <__sflush_r+0x6a>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	2b1d      	cmp	r3, #29
 8005dd0:	d831      	bhi.n	8005e36 <__sflush_r+0xc6>
 8005dd2:	4a2c      	ldr	r2, [pc, #176]	; (8005e84 <__sflush_r+0x114>)
 8005dd4:	40da      	lsrs	r2, r3
 8005dd6:	07d3      	lsls	r3, r2, #31
 8005dd8:	d52d      	bpl.n	8005e36 <__sflush_r+0xc6>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	6063      	str	r3, [r4, #4]
 8005dde:	6923      	ldr	r3, [r4, #16]
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	04cb      	lsls	r3, r1, #19
 8005de4:	d505      	bpl.n	8005df2 <__sflush_r+0x82>
 8005de6:	1c43      	adds	r3, r0, #1
 8005de8:	d102      	bne.n	8005df0 <__sflush_r+0x80>
 8005dea:	682b      	ldr	r3, [r5, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d100      	bne.n	8005df2 <__sflush_r+0x82>
 8005df0:	6560      	str	r0, [r4, #84]	; 0x54
 8005df2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005df4:	602e      	str	r6, [r5, #0]
 8005df6:	2900      	cmp	r1, #0
 8005df8:	d0c6      	beq.n	8005d88 <__sflush_r+0x18>
 8005dfa:	0023      	movs	r3, r4
 8005dfc:	3344      	adds	r3, #68	; 0x44
 8005dfe:	4299      	cmp	r1, r3
 8005e00:	d002      	beq.n	8005e08 <__sflush_r+0x98>
 8005e02:	0028      	movs	r0, r5
 8005e04:	f000 f91c 	bl	8006040 <_free_r>
 8005e08:	2000      	movs	r0, #0
 8005e0a:	6360      	str	r0, [r4, #52]	; 0x34
 8005e0c:	e7bd      	b.n	8005d8a <__sflush_r+0x1a>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	0028      	movs	r0, r5
 8005e12:	6a21      	ldr	r1, [r4, #32]
 8005e14:	47b8      	blx	r7
 8005e16:	1c43      	adds	r3, r0, #1
 8005e18:	d1c5      	bne.n	8005da6 <__sflush_r+0x36>
 8005e1a:	682b      	ldr	r3, [r5, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0c2      	beq.n	8005da6 <__sflush_r+0x36>
 8005e20:	2b1d      	cmp	r3, #29
 8005e22:	d001      	beq.n	8005e28 <__sflush_r+0xb8>
 8005e24:	2b16      	cmp	r3, #22
 8005e26:	d101      	bne.n	8005e2c <__sflush_r+0xbc>
 8005e28:	602e      	str	r6, [r5, #0]
 8005e2a:	e7ad      	b.n	8005d88 <__sflush_r+0x18>
 8005e2c:	2340      	movs	r3, #64	; 0x40
 8005e2e:	89a2      	ldrh	r2, [r4, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	81a3      	strh	r3, [r4, #12]
 8005e34:	e7a9      	b.n	8005d8a <__sflush_r+0x1a>
 8005e36:	2340      	movs	r3, #64	; 0x40
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	e7fa      	b.n	8005e32 <__sflush_r+0xc2>
 8005e3c:	690f      	ldr	r7, [r1, #16]
 8005e3e:	2f00      	cmp	r7, #0
 8005e40:	d0a2      	beq.n	8005d88 <__sflush_r+0x18>
 8005e42:	680a      	ldr	r2, [r1, #0]
 8005e44:	600f      	str	r7, [r1, #0]
 8005e46:	1bd2      	subs	r2, r2, r7
 8005e48:	9201      	str	r2, [sp, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	079b      	lsls	r3, r3, #30
 8005e4e:	d100      	bne.n	8005e52 <__sflush_r+0xe2>
 8005e50:	694a      	ldr	r2, [r1, #20]
 8005e52:	60a2      	str	r2, [r4, #8]
 8005e54:	9b01      	ldr	r3, [sp, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	dc00      	bgt.n	8005e5c <__sflush_r+0xec>
 8005e5a:	e795      	b.n	8005d88 <__sflush_r+0x18>
 8005e5c:	003a      	movs	r2, r7
 8005e5e:	0028      	movs	r0, r5
 8005e60:	9b01      	ldr	r3, [sp, #4]
 8005e62:	6a21      	ldr	r1, [r4, #32]
 8005e64:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e66:	47b0      	blx	r6
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	dc06      	bgt.n	8005e7a <__sflush_r+0x10a>
 8005e6c:	2340      	movs	r3, #64	; 0x40
 8005e6e:	2001      	movs	r0, #1
 8005e70:	89a2      	ldrh	r2, [r4, #12]
 8005e72:	4240      	negs	r0, r0
 8005e74:	4313      	orrs	r3, r2
 8005e76:	81a3      	strh	r3, [r4, #12]
 8005e78:	e787      	b.n	8005d8a <__sflush_r+0x1a>
 8005e7a:	9b01      	ldr	r3, [sp, #4]
 8005e7c:	183f      	adds	r7, r7, r0
 8005e7e:	1a1b      	subs	r3, r3, r0
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	e7e7      	b.n	8005e54 <__sflush_r+0xe4>
 8005e84:	20400001 	.word	0x20400001

08005e88 <_fflush_r>:
 8005e88:	690b      	ldr	r3, [r1, #16]
 8005e8a:	b570      	push	{r4, r5, r6, lr}
 8005e8c:	0005      	movs	r5, r0
 8005e8e:	000c      	movs	r4, r1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d102      	bne.n	8005e9a <_fflush_r+0x12>
 8005e94:	2500      	movs	r5, #0
 8005e96:	0028      	movs	r0, r5
 8005e98:	bd70      	pop	{r4, r5, r6, pc}
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	d004      	beq.n	8005ea8 <_fflush_r+0x20>
 8005e9e:	6983      	ldr	r3, [r0, #24]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <_fflush_r+0x20>
 8005ea4:	f7ff f9f2 	bl	800528c <__sinit>
 8005ea8:	4b14      	ldr	r3, [pc, #80]	; (8005efc <_fflush_r+0x74>)
 8005eaa:	429c      	cmp	r4, r3
 8005eac:	d11b      	bne.n	8005ee6 <_fflush_r+0x5e>
 8005eae:	686c      	ldr	r4, [r5, #4]
 8005eb0:	220c      	movs	r2, #12
 8005eb2:	5ea3      	ldrsh	r3, [r4, r2]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0ed      	beq.n	8005e94 <_fflush_r+0xc>
 8005eb8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005eba:	07d2      	lsls	r2, r2, #31
 8005ebc:	d404      	bmi.n	8005ec8 <_fflush_r+0x40>
 8005ebe:	059b      	lsls	r3, r3, #22
 8005ec0:	d402      	bmi.n	8005ec8 <_fflush_r+0x40>
 8005ec2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ec4:	f7ff fa83 	bl	80053ce <__retarget_lock_acquire_recursive>
 8005ec8:	0028      	movs	r0, r5
 8005eca:	0021      	movs	r1, r4
 8005ecc:	f7ff ff50 	bl	8005d70 <__sflush_r>
 8005ed0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ed2:	0005      	movs	r5, r0
 8005ed4:	07db      	lsls	r3, r3, #31
 8005ed6:	d4de      	bmi.n	8005e96 <_fflush_r+0xe>
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	059b      	lsls	r3, r3, #22
 8005edc:	d4db      	bmi.n	8005e96 <_fflush_r+0xe>
 8005ede:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ee0:	f7ff fa76 	bl	80053d0 <__retarget_lock_release_recursive>
 8005ee4:	e7d7      	b.n	8005e96 <_fflush_r+0xe>
 8005ee6:	4b06      	ldr	r3, [pc, #24]	; (8005f00 <_fflush_r+0x78>)
 8005ee8:	429c      	cmp	r4, r3
 8005eea:	d101      	bne.n	8005ef0 <_fflush_r+0x68>
 8005eec:	68ac      	ldr	r4, [r5, #8]
 8005eee:	e7df      	b.n	8005eb0 <_fflush_r+0x28>
 8005ef0:	4b04      	ldr	r3, [pc, #16]	; (8005f04 <_fflush_r+0x7c>)
 8005ef2:	429c      	cmp	r4, r3
 8005ef4:	d1dc      	bne.n	8005eb0 <_fflush_r+0x28>
 8005ef6:	68ec      	ldr	r4, [r5, #12]
 8005ef8:	e7da      	b.n	8005eb0 <_fflush_r+0x28>
 8005efa:	46c0      	nop			; (mov r8, r8)
 8005efc:	08006610 	.word	0x08006610
 8005f00:	08006630 	.word	0x08006630
 8005f04:	080065f0 	.word	0x080065f0

08005f08 <_lseek_r>:
 8005f08:	b570      	push	{r4, r5, r6, lr}
 8005f0a:	0004      	movs	r4, r0
 8005f0c:	0008      	movs	r0, r1
 8005f0e:	0011      	movs	r1, r2
 8005f10:	001a      	movs	r2, r3
 8005f12:	2300      	movs	r3, #0
 8005f14:	4d05      	ldr	r5, [pc, #20]	; (8005f2c <_lseek_r+0x24>)
 8005f16:	602b      	str	r3, [r5, #0]
 8005f18:	f7fb fd73 	bl	8001a02 <_lseek>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	d103      	bne.n	8005f28 <_lseek_r+0x20>
 8005f20:	682b      	ldr	r3, [r5, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d000      	beq.n	8005f28 <_lseek_r+0x20>
 8005f26:	6023      	str	r3, [r4, #0]
 8005f28:	bd70      	pop	{r4, r5, r6, pc}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	20000424 	.word	0x20000424

08005f30 <__swhatbuf_r>:
 8005f30:	b570      	push	{r4, r5, r6, lr}
 8005f32:	000e      	movs	r6, r1
 8005f34:	001d      	movs	r5, r3
 8005f36:	230e      	movs	r3, #14
 8005f38:	5ec9      	ldrsh	r1, [r1, r3]
 8005f3a:	0014      	movs	r4, r2
 8005f3c:	b096      	sub	sp, #88	; 0x58
 8005f3e:	2900      	cmp	r1, #0
 8005f40:	da08      	bge.n	8005f54 <__swhatbuf_r+0x24>
 8005f42:	220c      	movs	r2, #12
 8005f44:	5eb3      	ldrsh	r3, [r6, r2]
 8005f46:	2200      	movs	r2, #0
 8005f48:	602a      	str	r2, [r5, #0]
 8005f4a:	061b      	lsls	r3, r3, #24
 8005f4c:	d411      	bmi.n	8005f72 <__swhatbuf_r+0x42>
 8005f4e:	2380      	movs	r3, #128	; 0x80
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	e00f      	b.n	8005f74 <__swhatbuf_r+0x44>
 8005f54:	466a      	mov	r2, sp
 8005f56:	f000 f8d1 	bl	80060fc <_fstat_r>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	dbf1      	blt.n	8005f42 <__swhatbuf_r+0x12>
 8005f5e:	23f0      	movs	r3, #240	; 0xf0
 8005f60:	9901      	ldr	r1, [sp, #4]
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	4019      	ands	r1, r3
 8005f66:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <__swhatbuf_r+0x4c>)
 8005f68:	18c9      	adds	r1, r1, r3
 8005f6a:	424b      	negs	r3, r1
 8005f6c:	4159      	adcs	r1, r3
 8005f6e:	6029      	str	r1, [r5, #0]
 8005f70:	e7ed      	b.n	8005f4e <__swhatbuf_r+0x1e>
 8005f72:	2340      	movs	r3, #64	; 0x40
 8005f74:	2000      	movs	r0, #0
 8005f76:	6023      	str	r3, [r4, #0]
 8005f78:	b016      	add	sp, #88	; 0x58
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}
 8005f7c:	ffffe000 	.word	0xffffe000

08005f80 <__smakebuf_r>:
 8005f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f82:	2602      	movs	r6, #2
 8005f84:	898b      	ldrh	r3, [r1, #12]
 8005f86:	0005      	movs	r5, r0
 8005f88:	000c      	movs	r4, r1
 8005f8a:	4233      	tst	r3, r6
 8005f8c:	d006      	beq.n	8005f9c <__smakebuf_r+0x1c>
 8005f8e:	0023      	movs	r3, r4
 8005f90:	3347      	adds	r3, #71	; 0x47
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	6123      	str	r3, [r4, #16]
 8005f96:	2301      	movs	r3, #1
 8005f98:	6163      	str	r3, [r4, #20]
 8005f9a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005f9c:	466a      	mov	r2, sp
 8005f9e:	ab01      	add	r3, sp, #4
 8005fa0:	f7ff ffc6 	bl	8005f30 <__swhatbuf_r>
 8005fa4:	9900      	ldr	r1, [sp, #0]
 8005fa6:	0007      	movs	r7, r0
 8005fa8:	0028      	movs	r0, r5
 8005faa:	f7ff fa35 	bl	8005418 <_malloc_r>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d108      	bne.n	8005fc4 <__smakebuf_r+0x44>
 8005fb2:	220c      	movs	r2, #12
 8005fb4:	5ea3      	ldrsh	r3, [r4, r2]
 8005fb6:	059a      	lsls	r2, r3, #22
 8005fb8:	d4ef      	bmi.n	8005f9a <__smakebuf_r+0x1a>
 8005fba:	2203      	movs	r2, #3
 8005fbc:	4393      	bics	r3, r2
 8005fbe:	431e      	orrs	r6, r3
 8005fc0:	81a6      	strh	r6, [r4, #12]
 8005fc2:	e7e4      	b.n	8005f8e <__smakebuf_r+0xe>
 8005fc4:	4b0f      	ldr	r3, [pc, #60]	; (8006004 <__smakebuf_r+0x84>)
 8005fc6:	62ab      	str	r3, [r5, #40]	; 0x28
 8005fc8:	2380      	movs	r3, #128	; 0x80
 8005fca:	89a2      	ldrh	r2, [r4, #12]
 8005fcc:	6020      	str	r0, [r4, #0]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	81a3      	strh	r3, [r4, #12]
 8005fd2:	9b00      	ldr	r3, [sp, #0]
 8005fd4:	6120      	str	r0, [r4, #16]
 8005fd6:	6163      	str	r3, [r4, #20]
 8005fd8:	9b01      	ldr	r3, [sp, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00d      	beq.n	8005ffa <__smakebuf_r+0x7a>
 8005fde:	0028      	movs	r0, r5
 8005fe0:	230e      	movs	r3, #14
 8005fe2:	5ee1      	ldrsh	r1, [r4, r3]
 8005fe4:	f000 f89c 	bl	8006120 <_isatty_r>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	d006      	beq.n	8005ffa <__smakebuf_r+0x7a>
 8005fec:	2203      	movs	r2, #3
 8005fee:	89a3      	ldrh	r3, [r4, #12]
 8005ff0:	4393      	bics	r3, r2
 8005ff2:	001a      	movs	r2, r3
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	81a3      	strh	r3, [r4, #12]
 8005ffa:	89a0      	ldrh	r0, [r4, #12]
 8005ffc:	4307      	orrs	r7, r0
 8005ffe:	81a7      	strh	r7, [r4, #12]
 8006000:	e7cb      	b.n	8005f9a <__smakebuf_r+0x1a>
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	08005211 	.word	0x08005211

08006008 <memchr>:
 8006008:	b2c9      	uxtb	r1, r1
 800600a:	1882      	adds	r2, r0, r2
 800600c:	4290      	cmp	r0, r2
 800600e:	d101      	bne.n	8006014 <memchr+0xc>
 8006010:	2000      	movs	r0, #0
 8006012:	4770      	bx	lr
 8006014:	7803      	ldrb	r3, [r0, #0]
 8006016:	428b      	cmp	r3, r1
 8006018:	d0fb      	beq.n	8006012 <memchr+0xa>
 800601a:	3001      	adds	r0, #1
 800601c:	e7f6      	b.n	800600c <memchr+0x4>
	...

08006020 <__malloc_lock>:
 8006020:	b510      	push	{r4, lr}
 8006022:	4802      	ldr	r0, [pc, #8]	; (800602c <__malloc_lock+0xc>)
 8006024:	f7ff f9d3 	bl	80053ce <__retarget_lock_acquire_recursive>
 8006028:	bd10      	pop	{r4, pc}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	20000418 	.word	0x20000418

08006030 <__malloc_unlock>:
 8006030:	b510      	push	{r4, lr}
 8006032:	4802      	ldr	r0, [pc, #8]	; (800603c <__malloc_unlock+0xc>)
 8006034:	f7ff f9cc 	bl	80053d0 <__retarget_lock_release_recursive>
 8006038:	bd10      	pop	{r4, pc}
 800603a:	46c0      	nop			; (mov r8, r8)
 800603c:	20000418 	.word	0x20000418

08006040 <_free_r>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	0005      	movs	r5, r0
 8006044:	2900      	cmp	r1, #0
 8006046:	d010      	beq.n	800606a <_free_r+0x2a>
 8006048:	1f0c      	subs	r4, r1, #4
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	da00      	bge.n	8006052 <_free_r+0x12>
 8006050:	18e4      	adds	r4, r4, r3
 8006052:	0028      	movs	r0, r5
 8006054:	f7ff ffe4 	bl	8006020 <__malloc_lock>
 8006058:	4a1d      	ldr	r2, [pc, #116]	; (80060d0 <_free_r+0x90>)
 800605a:	6813      	ldr	r3, [r2, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d105      	bne.n	800606c <_free_r+0x2c>
 8006060:	6063      	str	r3, [r4, #4]
 8006062:	6014      	str	r4, [r2, #0]
 8006064:	0028      	movs	r0, r5
 8006066:	f7ff ffe3 	bl	8006030 <__malloc_unlock>
 800606a:	bd70      	pop	{r4, r5, r6, pc}
 800606c:	42a3      	cmp	r3, r4
 800606e:	d908      	bls.n	8006082 <_free_r+0x42>
 8006070:	6821      	ldr	r1, [r4, #0]
 8006072:	1860      	adds	r0, r4, r1
 8006074:	4283      	cmp	r3, r0
 8006076:	d1f3      	bne.n	8006060 <_free_r+0x20>
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	1841      	adds	r1, r0, r1
 800607e:	6021      	str	r1, [r4, #0]
 8006080:	e7ee      	b.n	8006060 <_free_r+0x20>
 8006082:	001a      	movs	r2, r3
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <_free_r+0x4e>
 800608a:	42a3      	cmp	r3, r4
 800608c:	d9f9      	bls.n	8006082 <_free_r+0x42>
 800608e:	6811      	ldr	r1, [r2, #0]
 8006090:	1850      	adds	r0, r2, r1
 8006092:	42a0      	cmp	r0, r4
 8006094:	d10b      	bne.n	80060ae <_free_r+0x6e>
 8006096:	6820      	ldr	r0, [r4, #0]
 8006098:	1809      	adds	r1, r1, r0
 800609a:	1850      	adds	r0, r2, r1
 800609c:	6011      	str	r1, [r2, #0]
 800609e:	4283      	cmp	r3, r0
 80060a0:	d1e0      	bne.n	8006064 <_free_r+0x24>
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	1841      	adds	r1, r0, r1
 80060a8:	6011      	str	r1, [r2, #0]
 80060aa:	6053      	str	r3, [r2, #4]
 80060ac:	e7da      	b.n	8006064 <_free_r+0x24>
 80060ae:	42a0      	cmp	r0, r4
 80060b0:	d902      	bls.n	80060b8 <_free_r+0x78>
 80060b2:	230c      	movs	r3, #12
 80060b4:	602b      	str	r3, [r5, #0]
 80060b6:	e7d5      	b.n	8006064 <_free_r+0x24>
 80060b8:	6821      	ldr	r1, [r4, #0]
 80060ba:	1860      	adds	r0, r4, r1
 80060bc:	4283      	cmp	r3, r0
 80060be:	d103      	bne.n	80060c8 <_free_r+0x88>
 80060c0:	6818      	ldr	r0, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	1841      	adds	r1, r0, r1
 80060c6:	6021      	str	r1, [r4, #0]
 80060c8:	6063      	str	r3, [r4, #4]
 80060ca:	6054      	str	r4, [r2, #4]
 80060cc:	e7ca      	b.n	8006064 <_free_r+0x24>
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	2000041c 	.word	0x2000041c

080060d4 <_read_r>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	0004      	movs	r4, r0
 80060d8:	0008      	movs	r0, r1
 80060da:	0011      	movs	r1, r2
 80060dc:	001a      	movs	r2, r3
 80060de:	2300      	movs	r3, #0
 80060e0:	4d05      	ldr	r5, [pc, #20]	; (80060f8 <_read_r+0x24>)
 80060e2:	602b      	str	r3, [r5, #0]
 80060e4:	f7fb fc33 	bl	800194e <_read>
 80060e8:	1c43      	adds	r3, r0, #1
 80060ea:	d103      	bne.n	80060f4 <_read_r+0x20>
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d000      	beq.n	80060f4 <_read_r+0x20>
 80060f2:	6023      	str	r3, [r4, #0]
 80060f4:	bd70      	pop	{r4, r5, r6, pc}
 80060f6:	46c0      	nop			; (mov r8, r8)
 80060f8:	20000424 	.word	0x20000424

080060fc <_fstat_r>:
 80060fc:	2300      	movs	r3, #0
 80060fe:	b570      	push	{r4, r5, r6, lr}
 8006100:	4d06      	ldr	r5, [pc, #24]	; (800611c <_fstat_r+0x20>)
 8006102:	0004      	movs	r4, r0
 8006104:	0008      	movs	r0, r1
 8006106:	0011      	movs	r1, r2
 8006108:	602b      	str	r3, [r5, #0]
 800610a:	f7fb fc63 	bl	80019d4 <_fstat>
 800610e:	1c43      	adds	r3, r0, #1
 8006110:	d103      	bne.n	800611a <_fstat_r+0x1e>
 8006112:	682b      	ldr	r3, [r5, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d000      	beq.n	800611a <_fstat_r+0x1e>
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	bd70      	pop	{r4, r5, r6, pc}
 800611c:	20000424 	.word	0x20000424

08006120 <_isatty_r>:
 8006120:	2300      	movs	r3, #0
 8006122:	b570      	push	{r4, r5, r6, lr}
 8006124:	4d06      	ldr	r5, [pc, #24]	; (8006140 <_isatty_r+0x20>)
 8006126:	0004      	movs	r4, r0
 8006128:	0008      	movs	r0, r1
 800612a:	602b      	str	r3, [r5, #0]
 800612c:	f7fb fc60 	bl	80019f0 <_isatty>
 8006130:	1c43      	adds	r3, r0, #1
 8006132:	d103      	bne.n	800613c <_isatty_r+0x1c>
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d000      	beq.n	800613c <_isatty_r+0x1c>
 800613a:	6023      	str	r3, [r4, #0]
 800613c:	bd70      	pop	{r4, r5, r6, pc}
 800613e:	46c0      	nop			; (mov r8, r8)
 8006140:	20000424 	.word	0x20000424

08006144 <_init>:
 8006144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006146:	46c0      	nop			; (mov r8, r8)
 8006148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800614a:	bc08      	pop	{r3}
 800614c:	469e      	mov	lr, r3
 800614e:	4770      	bx	lr

08006150 <_fini>:
 8006150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006156:	bc08      	pop	{r3}
 8006158:	469e      	mov	lr, r3
 800615a:	4770      	bx	lr
