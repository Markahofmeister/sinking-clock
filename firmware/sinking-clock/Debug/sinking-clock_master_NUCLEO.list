
sinking-clock_master_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f24  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  08006fe0  08006fe0  00016fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007628  08007628  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08007628  08007628  00017628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007630  08007630  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007630  08007630  00017630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007634  08007634  00017634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08007638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200000a0  080076d8  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  080076d8  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154ce  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000287c  00000000  00000000  00035596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00037e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  000390e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d11  00000000  00000000  0003a2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016599  00000000  00000000  00052fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009db57  00000000  00000000  0006954a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001070a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ca8  00000000  00000000  001070f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000a0 	.word	0x200000a0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006fc8 	.word	0x08006fc8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a4 	.word	0x200000a4
 8000100:	08006fc8 	.word	0x08006fc8

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	469b      	mov	fp, r3
 80002a6:	d433      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a8:	465a      	mov	r2, fp
 80002aa:	4653      	mov	r3, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83a      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e078      	b.n	80003b4 <__udivmoddi4+0x144>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e075      	b.n	80003ba <__udivmoddi4+0x14a>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e028      	b.n	800033a <__udivmoddi4+0xca>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	2320      	movs	r3, #32
 8000314:	1a9b      	subs	r3, r3, r2
 8000316:	4652      	mov	r2, sl
 8000318:	40da      	lsrs	r2, r3
 800031a:	4641      	mov	r1, r8
 800031c:	0013      	movs	r3, r2
 800031e:	464a      	mov	r2, r9
 8000320:	408a      	lsls	r2, r1
 8000322:	0017      	movs	r7, r2
 8000324:	4642      	mov	r2, r8
 8000326:	431f      	orrs	r7, r3
 8000328:	4653      	mov	r3, sl
 800032a:	4093      	lsls	r3, r2
 800032c:	001e      	movs	r6, r3
 800032e:	42af      	cmp	r7, r5
 8000330:	d9c4      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0d9      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000340:	07fb      	lsls	r3, r7, #31
 8000342:	0872      	lsrs	r2, r6, #1
 8000344:	431a      	orrs	r2, r3
 8000346:	4646      	mov	r6, r8
 8000348:	087b      	lsrs	r3, r7, #1
 800034a:	e00e      	b.n	800036a <__udivmoddi4+0xfa>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d101      	bne.n	8000354 <__udivmoddi4+0xe4>
 8000350:	42a2      	cmp	r2, r4
 8000352:	d80c      	bhi.n	800036e <__udivmoddi4+0xfe>
 8000354:	1aa4      	subs	r4, r4, r2
 8000356:	419d      	sbcs	r5, r3
 8000358:	2001      	movs	r0, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2100      	movs	r1, #0
 8000360:	3e01      	subs	r6, #1
 8000362:	1824      	adds	r4, r4, r0
 8000364:	414d      	adcs	r5, r1
 8000366:	2e00      	cmp	r6, #0
 8000368:	d006      	beq.n	8000378 <__udivmoddi4+0x108>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d9ee      	bls.n	800034c <__udivmoddi4+0xdc>
 800036e:	3e01      	subs	r6, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2e00      	cmp	r6, #0
 8000376:	d1f8      	bne.n	800036a <__udivmoddi4+0xfa>
 8000378:	9800      	ldr	r0, [sp, #0]
 800037a:	9901      	ldr	r1, [sp, #4]
 800037c:	465b      	mov	r3, fp
 800037e:	1900      	adds	r0, r0, r4
 8000380:	4169      	adcs	r1, r5
 8000382:	2b00      	cmp	r3, #0
 8000384:	db24      	blt.n	80003d0 <__udivmoddi4+0x160>
 8000386:	002b      	movs	r3, r5
 8000388:	465a      	mov	r2, fp
 800038a:	4644      	mov	r4, r8
 800038c:	40d3      	lsrs	r3, r2
 800038e:	002a      	movs	r2, r5
 8000390:	40e2      	lsrs	r2, r4
 8000392:	001c      	movs	r4, r3
 8000394:	465b      	mov	r3, fp
 8000396:	0015      	movs	r5, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	db2a      	blt.n	80003f2 <__udivmoddi4+0x182>
 800039c:	0026      	movs	r6, r4
 800039e:	409e      	lsls	r6, r3
 80003a0:	0033      	movs	r3, r6
 80003a2:	0026      	movs	r6, r4
 80003a4:	4647      	mov	r7, r8
 80003a6:	40be      	lsls	r6, r7
 80003a8:	0032      	movs	r2, r6
 80003aa:	1a80      	subs	r0, r0, r2
 80003ac:	4199      	sbcs	r1, r3
 80003ae:	9000      	str	r0, [sp, #0]
 80003b0:	9101      	str	r1, [sp, #4]
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b4:	42a3      	cmp	r3, r4
 80003b6:	d8bc      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80003b8:	e783      	b.n	80002c2 <__udivmoddi4+0x52>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	2100      	movs	r1, #0
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	2200      	movs	r2, #0
 80003c4:	9100      	str	r1, [sp, #0]
 80003c6:	9201      	str	r2, [sp, #4]
 80003c8:	2201      	movs	r2, #1
 80003ca:	40da      	lsrs	r2, r3
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	e786      	b.n	80002de <__udivmoddi4+0x6e>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	4646      	mov	r6, r8
 80003da:	409a      	lsls	r2, r3
 80003dc:	0023      	movs	r3, r4
 80003de:	40f3      	lsrs	r3, r6
 80003e0:	4644      	mov	r4, r8
 80003e2:	4313      	orrs	r3, r2
 80003e4:	002a      	movs	r2, r5
 80003e6:	40e2      	lsrs	r2, r4
 80003e8:	001c      	movs	r4, r3
 80003ea:	465b      	mov	r3, fp
 80003ec:	0015      	movs	r5, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dad4      	bge.n	800039c <__udivmoddi4+0x12c>
 80003f2:	4642      	mov	r2, r8
 80003f4:	002f      	movs	r7, r5
 80003f6:	2320      	movs	r3, #32
 80003f8:	0026      	movs	r6, r4
 80003fa:	4097      	lsls	r7, r2
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	40de      	lsrs	r6, r3
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7cd      	b.n	80003a2 <__udivmoddi4+0x132>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000464:	2301      	movs	r3, #1
 8000466:	425b      	negs	r3, r3
 8000468:	1d39      	adds	r1, r7, #4
 800046a:	4804      	ldr	r0, [pc, #16]	; (800047c <__io_putchar+0x20>)
 800046c:	2201      	movs	r2, #1
 800046e:	f005 f8b9 	bl	80055e4 <HAL_UART_Transmit>
  return ch;
 8000472:	687b      	ldr	r3, [r7, #4]
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000188 	.word	0x20000188

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b590      	push	{r4, r7, lr}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000486:	f001 fb27 	bl	8001ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048a:	f000 f835 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048e:	f000 f9dd 	bl	800084c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000492:	f000 f9a7 	bl	80007e4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000496:	f000 f87b 	bl	8000590 <MX_I2C1_Init>
  MX_RTC_Init();
 800049a:	f000 f8b9 	bl	8000610 <MX_RTC_Init>
  MX_TIM16_Init();
 800049e:	f000 f979 	bl	8000794 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  displayToggle = 2; 		// Display at 100% intensity for next display toggle
 80004a2:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <main+0x64>)
 80004a4:	2202      	movs	r2, #2
 80004a6:	701a      	strb	r2, [r3, #0]
  sevSeg_I2C1_Init();		//Initialize 7-seg
 80004a8:	f000 fa94 	bl	80009d4 <sevSeg_I2C1_Init>

  userAlarmToggle = false;			//Default to off
 80004ac:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <main+0x68>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef halRet = HAL_RTC_DeactivateAlarm(&hrtc, userAlarm);	//Initially disable user alarm
 80004b2:	1dfc      	adds	r4, r7, #7
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	009a      	lsls	r2, r3, #2
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <main+0x6c>)
 80004ba:	0011      	movs	r1, r2
 80004bc:	0018      	movs	r0, r3
 80004be:	f004 fc81 	bl	8004dc4 <HAL_RTC_DeactivateAlarm>
 80004c2:	0003      	movs	r3, r0
 80004c4:	7023      	strb	r3, [r4, #0]

  if(halRet != HAL_OK) {
 80004c6:	1dfb      	adds	r3, r7, #7
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d004      	beq.n	80004d8 <main+0x58>
	  printf("Error deactivating user alarm.\n\r");
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <main+0x70>)
 80004d0:	0018      	movs	r0, r3
 80004d2:	f005 fda1 	bl	8006018 <iprintf>
 80004d6:	e003      	b.n	80004e0 <main+0x60>
  } else {
	  printf("User alarm deactivated.\n\r");
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <main+0x74>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f005 fd9c 	bl	8006018 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <main+0x60>
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	20000248 	.word	0x20000248
 80004e8:	20000249 	.word	0x20000249
 80004ec:	20000110 	.word	0x20000110
 80004f0:	08006fe0 	.word	0x08006fe0
 80004f4:	08007004 	.word	0x08007004

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b093      	sub	sp, #76	; 0x4c
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	2410      	movs	r4, #16
 8000500:	193b      	adds	r3, r7, r4
 8000502:	0018      	movs	r0, r3
 8000504:	2338      	movs	r3, #56	; 0x38
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f005 fd7c 	bl	8006006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050e:	003b      	movs	r3, r7
 8000510:	0018      	movs	r0, r3
 8000512:	2310      	movs	r3, #16
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f005 fd75 	bl	8006006 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	0018      	movs	r0, r3
 8000522:	f003 f8af 	bl	8003684 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	220a      	movs	r2, #10
 800052a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	0052      	lsls	r2, r2, #1
 8000532:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000534:	0021      	movs	r1, r4
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2240      	movs	r2, #64	; 0x40
 8000540:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2201      	movs	r2, #1
 8000546:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	187b      	adds	r3, r7, r1
 8000550:	0018      	movs	r0, r3
 8000552:	f003 f90d 	bl	8003770 <HAL_RCC_OscConfig>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800055a:	f001 f83f 	bl	80015dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	003b      	movs	r3, r7
 8000560:	2207      	movs	r2, #7
 8000562:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000564:	003b      	movs	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	003b      	movs	r3, r7
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000570:	003b      	movs	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000576:	003b      	movs	r3, r7
 8000578:	2100      	movs	r1, #0
 800057a:	0018      	movs	r0, r3
 800057c:	f003 fc12 	bl	8003da4 <HAL_RCC_ClockConfig>
 8000580:	1e03      	subs	r3, r0, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000584:	f001 f82a 	bl	80015dc <Error_Handler>
  }
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	b013      	add	sp, #76	; 0x4c
 800058e:	bd90      	pop	{r4, r7, pc}

08000590 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_I2C1_Init+0x74>)
 8000596:	4a1c      	ldr	r2, [pc, #112]	; (8000608 <MX_I2C1_Init+0x78>)
 8000598:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <MX_I2C1_Init+0x74>)
 800059c:	4a1b      	ldr	r2, [pc, #108]	; (800060c <MX_I2C1_Init+0x7c>)
 800059e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <MX_I2C1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a6:	4b17      	ldr	r3, [pc, #92]	; (8000604 <MX_I2C1_Init+0x74>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <MX_I2C1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_I2C1_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <MX_I2C1_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_I2C1_Init+0x74>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_I2C1_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_I2C1_Init+0x74>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fe2f 	bl	8002230 <HAL_I2C_Init>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005d6:	f001 f801 	bl	80015dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <MX_I2C1_Init+0x74>)
 80005dc:	2100      	movs	r1, #0
 80005de:	0018      	movs	r0, r3
 80005e0:	f002 ffb8 	bl	8003554 <HAL_I2CEx_ConfigAnalogFilter>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d001      	beq.n	80005ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005e8:	f000 fff8 	bl	80015dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <MX_I2C1_Init+0x74>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	0018      	movs	r0, r3
 80005f2:	f002 fffb 	bl	80035ec <HAL_I2CEx_ConfigDigitalFilter>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005fa:	f000 ffef 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200000bc 	.word	0x200000bc
 8000608:	40005400 	.word	0x40005400
 800060c:	0010061a 	.word	0x0010061a

08000610 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b090      	sub	sp, #64	; 0x40
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000616:	232c      	movs	r3, #44	; 0x2c
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	0018      	movs	r0, r3
 800061c:	2314      	movs	r3, #20
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f005 fcf0 	bl	8006006 <memset>
  RTC_DateTypeDef sDate = {0};
 8000626:	2328      	movs	r3, #40	; 0x28
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800062e:	003b      	movs	r3, r7
 8000630:	0018      	movs	r0, r3
 8000632:	2328      	movs	r3, #40	; 0x28
 8000634:	001a      	movs	r2, r3
 8000636:	2100      	movs	r1, #0
 8000638:	f005 fce5 	bl	8006006 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800063c:	4b51      	ldr	r3, [pc, #324]	; (8000784 <MX_RTC_Init+0x174>)
 800063e:	4a52      	ldr	r2, [pc, #328]	; (8000788 <MX_RTC_Init+0x178>)
 8000640:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000642:	4b50      	ldr	r3, [pc, #320]	; (8000784 <MX_RTC_Init+0x174>)
 8000644:	2240      	movs	r2, #64	; 0x40
 8000646:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000648:	4b4e      	ldr	r3, [pc, #312]	; (8000784 <MX_RTC_Init+0x174>)
 800064a:	227f      	movs	r2, #127	; 0x7f
 800064c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800064e:	4b4d      	ldr	r3, [pc, #308]	; (8000784 <MX_RTC_Init+0x174>)
 8000650:	22ff      	movs	r2, #255	; 0xff
 8000652:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000654:	4b4b      	ldr	r3, [pc, #300]	; (8000784 <MX_RTC_Init+0x174>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800065a:	4b4a      	ldr	r3, [pc, #296]	; (8000784 <MX_RTC_Init+0x174>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000660:	4b48      	ldr	r3, [pc, #288]	; (8000784 <MX_RTC_Init+0x174>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000666:	4b47      	ldr	r3, [pc, #284]	; (8000784 <MX_RTC_Init+0x174>)
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	05d2      	lsls	r2, r2, #23
 800066c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800066e:	4b45      	ldr	r3, [pc, #276]	; (8000784 <MX_RTC_Init+0x174>)
 8000670:	2200      	movs	r2, #0
 8000672:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000674:	4b43      	ldr	r3, [pc, #268]	; (8000784 <MX_RTC_Init+0x174>)
 8000676:	0018      	movs	r0, r3
 8000678:	f003 feb8 	bl	80043ec <HAL_RTC_Init>
 800067c:	1e03      	subs	r3, r0, #0
 800067e:	d001      	beq.n	8000684 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000680:	f000 ffac 	bl	80015dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000684:	212c      	movs	r1, #44	; 0x2c
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x50;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2250      	movs	r2, #80	; 0x50
 8000696:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006b0:	1879      	adds	r1, r7, r1
 80006b2:	4b34      	ldr	r3, [pc, #208]	; (8000784 <MX_RTC_Init+0x174>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	0018      	movs	r0, r3
 80006b8:	f003 ff3a 	bl	8004530 <HAL_RTC_SetTime>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d001      	beq.n	80006c4 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 80006c0:	f000 ff8c 	bl	80015dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006c4:	2128      	movs	r1, #40	; 0x28
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2201      	movs	r2, #1
 80006d0:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2201      	movs	r2, #1
 80006d6:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006de:	1879      	adds	r1, r7, r1
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_RTC_Init+0x174>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	0018      	movs	r0, r3
 80006e6:	f004 f827 	bl	8004738 <HAL_RTC_SetDate>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 80006ee:	f000 ff75 	bl	80015dc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 80006f2:	003b      	movs	r3, r7
 80006f4:	2201      	movs	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80006f8:	003b      	movs	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80006fe:	003b      	movs	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000704:	003b      	movs	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800070a:	003b      	movs	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000710:	003b      	movs	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000716:	003b      	movs	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 800071c:	003b      	movs	r3, r7
 800071e:	4a1b      	ldr	r2, [pc, #108]	; (800078c <MX_RTC_Init+0x17c>)
 8000720:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000722:	003b      	movs	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000728:	003b      	movs	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800072e:	003b      	movs	r3, r7
 8000730:	2220      	movs	r2, #32
 8000732:	2101      	movs	r1, #1
 8000734:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000736:	003b      	movs	r3, r7
 8000738:	2280      	movs	r2, #128	; 0x80
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800073e:	0039      	movs	r1, r7
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_RTC_Init+0x174>)
 8000742:	2201      	movs	r2, #1
 8000744:	0018      	movs	r0, r3
 8000746:	f004 f9fd 	bl	8004b44 <HAL_RTC_SetAlarm_IT>
 800074a:	1e03      	subs	r3, r0, #0
 800074c:	d001      	beq.n	8000752 <MX_RTC_Init+0x142>
  {
    Error_Handler();
 800074e:	f000 ff45 	bl	80015dc <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Hours = 0x2;
 8000752:	003b      	movs	r3, r7
 8000754:	2202      	movs	r2, #2
 8000756:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8000758:	003b      	movs	r3, r7
 800075a:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <MX_RTC_Init+0x180>)
 800075c:	615a      	str	r2, [r3, #20]
  sAlarm.Alarm = RTC_ALARM_B;
 800075e:	003b      	movs	r3, r7
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	0092      	lsls	r2, r2, #2
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000766:	0039      	movs	r1, r7
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_RTC_Init+0x174>)
 800076a:	2201      	movs	r2, #1
 800076c:	0018      	movs	r0, r3
 800076e:	f004 f9e9 	bl	8004b44 <HAL_RTC_SetAlarm_IT>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_RTC_Init+0x16a>
  {
    Error_Handler();
 8000776:	f000 ff31 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b010      	add	sp, #64	; 0x40
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	20000110 	.word	0x20000110
 8000788:	40002800 	.word	0x40002800
 800078c:	80800080 	.word	0x80800080
 8000790:	80808080 	.word	0x80808080

08000794 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_TIM16_Init+0x44>)
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <MX_TIM16_Init+0x48>)
 800079c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 244;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007a0:	22f4      	movs	r2, #244	; 0xf4
 80007a2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007ac:	4a0c      	ldr	r2, [pc, #48]	; (80007e0 <MX_TIM16_Init+0x4c>)
 80007ae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007be:	2280      	movs	r2, #128	; 0x80
 80007c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007c4:	0018      	movs	r0, r3
 80007c6:	f004 fd9c 	bl	8005302 <HAL_TIM_Base_Init>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80007ce:	f000 ff05 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2000013c 	.word	0x2000013c
 80007dc:	40014400 	.word	0x40014400
 80007e0:	0000ffff 	.word	0x0000ffff

080007e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_USART2_UART_Init+0x60>)
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <MX_USART2_UART_Init+0x64>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_USART2_UART_Init+0x60>)
 80007f0:	22e1      	movs	r2, #225	; 0xe1
 80007f2:	0252      	lsls	r2, r2, #9
 80007f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_USART2_UART_Init+0x60>)
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	0152      	lsls	r2, r2, #5
 80007fc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_USART2_UART_Init+0x60>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_USART2_UART_Init+0x60>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_USART2_UART_Init+0x60>)
 800080c:	220c      	movs	r2, #12
 800080e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USART2_UART_Init+0x60>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_USART2_UART_Init+0x60>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_USART2_UART_Init+0x60>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_USART2_UART_Init+0x60>)
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_USART2_UART_Init+0x60>)
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <MX_USART2_UART_Init+0x60>)
 8000830:	0018      	movs	r0, r3
 8000832:	f004 fe81 	bl	8005538 <HAL_UART_Init>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800083a:	f000 fecf 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000188 	.word	0x20000188
 8000848:	40004400 	.word	0x40004400

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b08b      	sub	sp, #44	; 0x2c
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	2414      	movs	r4, #20
 8000854:	193b      	adds	r3, r7, r4
 8000856:	0018      	movs	r0, r3
 8000858:	2314      	movs	r3, #20
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f005 fbd2 	bl	8006006 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b57      	ldr	r3, [pc, #348]	; (80009c0 <MX_GPIO_Init+0x174>)
 8000864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000866:	4b56      	ldr	r3, [pc, #344]	; (80009c0 <MX_GPIO_Init+0x174>)
 8000868:	2102      	movs	r1, #2
 800086a:	430a      	orrs	r2, r1
 800086c:	635a      	str	r2, [r3, #52]	; 0x34
 800086e:	4b54      	ldr	r3, [pc, #336]	; (80009c0 <MX_GPIO_Init+0x174>)
 8000870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000872:	2202      	movs	r2, #2
 8000874:	4013      	ands	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b51      	ldr	r3, [pc, #324]	; (80009c0 <MX_GPIO_Init+0x174>)
 800087c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800087e:	4b50      	ldr	r3, [pc, #320]	; (80009c0 <MX_GPIO_Init+0x174>)
 8000880:	2104      	movs	r1, #4
 8000882:	430a      	orrs	r2, r1
 8000884:	635a      	str	r2, [r3, #52]	; 0x34
 8000886:	4b4e      	ldr	r3, [pc, #312]	; (80009c0 <MX_GPIO_Init+0x174>)
 8000888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800088a:	2204      	movs	r2, #4
 800088c:	4013      	ands	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000892:	4b4b      	ldr	r3, [pc, #300]	; (80009c0 <MX_GPIO_Init+0x174>)
 8000894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000896:	4b4a      	ldr	r3, [pc, #296]	; (80009c0 <MX_GPIO_Init+0x174>)
 8000898:	2120      	movs	r1, #32
 800089a:	430a      	orrs	r2, r1
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
 800089e:	4b48      	ldr	r3, [pc, #288]	; (80009c0 <MX_GPIO_Init+0x174>)
 80008a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008a2:	2220      	movs	r2, #32
 80008a4:	4013      	ands	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b45      	ldr	r3, [pc, #276]	; (80009c0 <MX_GPIO_Init+0x174>)
 80008ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ae:	4b44      	ldr	r3, [pc, #272]	; (80009c0 <MX_GPIO_Init+0x174>)
 80008b0:	2101      	movs	r1, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	635a      	str	r2, [r3, #52]	; 0x34
 80008b6:	4b42      	ldr	r3, [pc, #264]	; (80009c0 <MX_GPIO_Init+0x174>)
 80008b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ba:	2201      	movs	r2, #1
 80008bc:	4013      	ands	r3, r2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Output_Pin|PM_LED_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);
 80008c2:	4b40      	ldr	r3, [pc, #256]	; (80009c4 <MX_GPIO_Init+0x178>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	21c2      	movs	r1, #194	; 0xc2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f001 fc60 	bl	800218e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008ce:	4b3e      	ldr	r3, [pc, #248]	; (80009c8 <MX_GPIO_Init+0x17c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	2140      	movs	r1, #64	; 0x40
 80008d4:	0018      	movs	r0, r3
 80008d6:	f001 fc5a 	bl	800218e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2204      	movs	r2, #4
 80008de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2288      	movs	r2, #136	; 0x88
 80008e4:	0352      	lsls	r2, r2, #13
 80008e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	4a36      	ldr	r2, [pc, #216]	; (80009cc <MX_GPIO_Init+0x180>)
 80008f2:	0019      	movs	r1, r3
 80008f4:	0010      	movs	r0, r2
 80008f6:	f001 fac9 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_Button_Pin Alarm_Enable_Button_Pin Alarm_Set_Button_Pin Hour_Set_Button_Pin
                           Minute_Set_Button_Pin */
  GPIO_InitStruct.Pin = Display_Button_Pin|Alarm_Enable_Button_Pin|Alarm_Set_Button_Pin|Hour_Set_Button_Pin
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	4a34      	ldr	r2, [pc, #208]	; (80009d0 <MX_GPIO_Init+0x184>)
 80008fe:	601a      	str	r2, [r3, #0]
                          |Minute_Set_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2284      	movs	r2, #132	; 0x84
 8000904:	0392      	lsls	r2, r2, #14
 8000906:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	2201      	movs	r2, #1
 800090c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	193a      	adds	r2, r7, r4
 8000910:	23a0      	movs	r3, #160	; 0xa0
 8000912:	05db      	lsls	r3, r3, #23
 8000914:	0011      	movs	r1, r2
 8000916:	0018      	movs	r0, r3
 8000918:	f001 fab8 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Output_Pin PM_LED_Pin Alarm_LED_Pin */
  GPIO_InitStruct.Pin = Buzzer_Output_Pin|PM_LED_Pin|Alarm_LED_Pin;
 800091c:	193b      	adds	r3, r7, r4
 800091e:	22c2      	movs	r2, #194	; 0xc2
 8000920:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	193b      	adds	r3, r7, r4
 8000924:	2201      	movs	r2, #1
 8000926:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	193b      	adds	r3, r7, r4
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	193b      	adds	r3, r7, r4
 8000936:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <MX_GPIO_Init+0x178>)
 8000938:	0019      	movs	r1, r3
 800093a:	0010      	movs	r0, r2
 800093c:	f001 faa6 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000940:	193b      	adds	r3, r7, r4
 8000942:	2240      	movs	r2, #64	; 0x40
 8000944:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	193b      	adds	r3, r7, r4
 8000948:	2201      	movs	r2, #1
 800094a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000958:	193b      	adds	r3, r7, r4
 800095a:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <MX_GPIO_Init+0x17c>)
 800095c:	0019      	movs	r1, r3
 800095e:	0010      	movs	r0, r2
 8000960:	f001 fa94 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : Snooze_Button_Pin */
  GPIO_InitStruct.Pin = Snooze_Button_Pin;
 8000964:	0021      	movs	r1, r4
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	0112      	lsls	r2, r2, #4
 800096c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2201      	movs	r2, #1
 8000978:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Snooze_Button_GPIO_Port, &GPIO_InitStruct);
 800097a:	187a      	adds	r2, r7, r1
 800097c:	23a0      	movs	r3, #160	; 0xa0
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	0011      	movs	r1, r2
 8000982:	0018      	movs	r0, r3
 8000984:	f001 fa82 	bl	8001e8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2005      	movs	r0, #5
 800098e:	f001 f9d5 	bl	8001d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000992:	2005      	movs	r0, #5
 8000994:	f001 f9e7 	bl	8001d66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	2006      	movs	r0, #6
 800099e:	f001 f9cd 	bl	8001d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80009a2:	2006      	movs	r0, #6
 80009a4:	f001 f9df 	bl	8001d66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	2007      	movs	r0, #7
 80009ae:	f001 f9c5 	bl	8001d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80009b2:	2007      	movs	r0, #7
 80009b4:	f001 f9d7 	bl	8001d66 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b00b      	add	sp, #44	; 0x2c
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	40021000 	.word	0x40021000
 80009c4:	50000400 	.word	0x50000400
 80009c8:	50000800 	.word	0x50000800
 80009cc:	50001400 	.word	0x50001400
 80009d0:	00001033 	.word	0x00001033

080009d4 <sevSeg_I2C1_Init>:

/* USER CODE BEGIN 4 */

void sevSeg_I2C1_Init(void) {
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af02      	add	r7, sp, #8
	 */

	HAL_StatusTypeDef halRet;

	//Set display to decode hex data inputs
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_decodeBuffer, 2, HAL_MAX_DELAY);
 80009da:	4b66      	ldr	r3, [pc, #408]	; (8000b74 <sevSeg_I2C1_Init+0x1a0>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b299      	uxth	r1, r3
 80009e0:	1dfc      	adds	r4, r7, #7
 80009e2:	4a65      	ldr	r2, [pc, #404]	; (8000b78 <sevSeg_I2C1_Init+0x1a4>)
 80009e4:	4865      	ldr	r0, [pc, #404]	; (8000b7c <sevSeg_I2C1_Init+0x1a8>)
 80009e6:	2301      	movs	r3, #1
 80009e8:	425b      	negs	r3, r3
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2302      	movs	r3, #2
 80009ee:	f001 fcb5 	bl	800235c <HAL_I2C_Master_Transmit>
 80009f2:	0003      	movs	r3, r0
 80009f4:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d004      	beq.n	8000a08 <sevSeg_I2C1_Init+0x34>
		printf("HAL Error - TX decode mode\n\r");
 80009fe:	4b60      	ldr	r3, [pc, #384]	; (8000b80 <sevSeg_I2C1_Init+0x1ac>)
 8000a00:	0018      	movs	r0, r3
 8000a02:	f005 fb09 	bl	8006018 <iprintf>
 8000a06:	e003      	b.n	8000a10 <sevSeg_I2C1_Init+0x3c>
	} else{
		printf("Display set to decode mode\n\r");
 8000a08:	4b5e      	ldr	r3, [pc, #376]	; (8000b84 <sevSeg_I2C1_Init+0x1b0>)
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f005 fb04 	bl	8006018 <iprintf>
	}

	//Disable shutdown mode
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_SD_ONBuff, 2, HAL_MAX_DELAY);
 8000a10:	4b58      	ldr	r3, [pc, #352]	; (8000b74 <sevSeg_I2C1_Init+0x1a0>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b299      	uxth	r1, r3
 8000a16:	1dfc      	adds	r4, r7, #7
 8000a18:	4a5b      	ldr	r2, [pc, #364]	; (8000b88 <sevSeg_I2C1_Init+0x1b4>)
 8000a1a:	4858      	ldr	r0, [pc, #352]	; (8000b7c <sevSeg_I2C1_Init+0x1a8>)
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	425b      	negs	r3, r3
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	2302      	movs	r3, #2
 8000a24:	f001 fc9a 	bl	800235c <HAL_I2C_Master_Transmit>
 8000a28:	0003      	movs	r3, r0
 8000a2a:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d004      	beq.n	8000a3e <sevSeg_I2C1_Init+0x6a>
		printf("HAL Error - TX disable shutdown mode\n\r");
 8000a34:	4b55      	ldr	r3, [pc, #340]	; (8000b8c <sevSeg_I2C1_Init+0x1b8>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f005 faee 	bl	8006018 <iprintf>
 8000a3c:	e003      	b.n	8000a46 <sevSeg_I2C1_Init+0x72>
	} else {
		printf("Display shutdown mode disabled\n\r");
 8000a3e:	4b54      	ldr	r3, [pc, #336]	; (8000b90 <sevSeg_I2C1_Init+0x1bc>)
 8000a40:	0018      	movs	r0, r3
 8000a42:	f005 fae9 	bl	8006018 <iprintf>
	}

	//Set to test mode
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_testONBuff, 2, HAL_MAX_DELAY);
 8000a46:	4b4b      	ldr	r3, [pc, #300]	; (8000b74 <sevSeg_I2C1_Init+0x1a0>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	b299      	uxth	r1, r3
 8000a4c:	1dfc      	adds	r4, r7, #7
 8000a4e:	4a51      	ldr	r2, [pc, #324]	; (8000b94 <sevSeg_I2C1_Init+0x1c0>)
 8000a50:	484a      	ldr	r0, [pc, #296]	; (8000b7c <sevSeg_I2C1_Init+0x1a8>)
 8000a52:	2301      	movs	r3, #1
 8000a54:	425b      	negs	r3, r3
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	2302      	movs	r3, #2
 8000a5a:	f001 fc7f 	bl	800235c <HAL_I2C_Master_Transmit>
 8000a5e:	0003      	movs	r3, r0
 8000a60:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d004      	beq.n	8000a74 <sevSeg_I2C1_Init+0xa0>
		printf("HAL Error - TX test mode ON data\n\r");
 8000a6a:	4b4b      	ldr	r3, [pc, #300]	; (8000b98 <sevSeg_I2C1_Init+0x1c4>)
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f005 fad3 	bl	8006018 <iprintf>
 8000a72:	e003      	b.n	8000a7c <sevSeg_I2C1_Init+0xa8>
	} else {
		printf("Test mode enabled - all LEDs on\n\r");
 8000a74:	4b49      	ldr	r3, [pc, #292]	; (8000b9c <sevSeg_I2C1_Init+0x1c8>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f005 face 	bl	8006018 <iprintf>
	}

	// Disable test mode
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_testOFFBuff, 2, HAL_MAX_DELAY);
 8000a7c:	4b3d      	ldr	r3, [pc, #244]	; (8000b74 <sevSeg_I2C1_Init+0x1a0>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b299      	uxth	r1, r3
 8000a82:	1dfc      	adds	r4, r7, #7
 8000a84:	4a46      	ldr	r2, [pc, #280]	; (8000ba0 <sevSeg_I2C1_Init+0x1cc>)
 8000a86:	483d      	ldr	r0, [pc, #244]	; (8000b7c <sevSeg_I2C1_Init+0x1a8>)
 8000a88:	2301      	movs	r3, #1
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2302      	movs	r3, #2
 8000a90:	f001 fc64 	bl	800235c <HAL_I2C_Master_Transmit>
 8000a94:	0003      	movs	r3, r0
 8000a96:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d004      	beq.n	8000aaa <sevSeg_I2C1_Init+0xd6>
		printf("HAL Error - TX test mode OFF data\n\r");
 8000aa0:	4b40      	ldr	r3, [pc, #256]	; (8000ba4 <sevSeg_I2C1_Init+0x1d0>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f005 fab8 	bl	8006018 <iprintf>
 8000aa8:	e003      	b.n	8000ab2 <sevSeg_I2C1_Init+0xde>
	} else {
		printf("Test mode disabled - all LEDs off\n\r");
 8000aaa:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <sevSeg_I2C1_Init+0x1d4>)
 8000aac:	0018      	movs	r0, r3
 8000aae:	f005 fab3 	bl	8006018 <iprintf>
	}

	sevSeg_intensityBuff[1] = sevSeg_intensityDuty[1];		// Initialize to 50% duty cycle
 8000ab2:	2231      	movs	r2, #49	; 0x31
 8000ab4:	4b3d      	ldr	r3, [pc, #244]	; (8000bac <sevSeg_I2C1_Init+0x1d8>)
 8000ab6:	705a      	strb	r2, [r3, #1]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_intensityBuff, 2, HAL_MAX_DELAY);
 8000ab8:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <sevSeg_I2C1_Init+0x1a0>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b299      	uxth	r1, r3
 8000abe:	1dfc      	adds	r4, r7, #7
 8000ac0:	4a3a      	ldr	r2, [pc, #232]	; (8000bac <sevSeg_I2C1_Init+0x1d8>)
 8000ac2:	482e      	ldr	r0, [pc, #184]	; (8000b7c <sevSeg_I2C1_Init+0x1a8>)
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2302      	movs	r3, #2
 8000acc:	f001 fc46 	bl	800235c <HAL_I2C_Master_Transmit>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000ad4:	1dfb      	adds	r3, r7, #7
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d004      	beq.n	8000ae6 <sevSeg_I2C1_Init+0x112>
		printf("HAL Error - TX intensity level data\n\r");
 8000adc:	4b34      	ldr	r3, [pc, #208]	; (8000bb0 <sevSeg_I2C1_Init+0x1dc>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f005 fa9a 	bl	8006018 <iprintf>
 8000ae4:	e003      	b.n	8000aee <sevSeg_I2C1_Init+0x11a>
	} else {
		printf("Intensity Set\n\r");
 8000ae6:	4b33      	ldr	r3, [pc, #204]	; (8000bb4 <sevSeg_I2C1_Init+0x1e0>)
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f005 fa95 	bl	8006018 <iprintf>
	}

	// Set and display current time (12:00 A.M.)

	currTime.Hours = 12;
 8000aee:	4b32      	ldr	r3, [pc, #200]	; (8000bb8 <sevSeg_I2C1_Init+0x1e4>)
 8000af0:	220c      	movs	r2, #12
 8000af2:	701a      	strb	r2, [r3, #0]
	currTime.Minutes = 58;
 8000af4:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <sevSeg_I2C1_Init+0x1e4>)
 8000af6:	223a      	movs	r2, #58	; 0x3a
 8000af8:	705a      	strb	r2, [r3, #1]
	currTime.Seconds = 50;
 8000afa:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <sevSeg_I2C1_Init+0x1e4>)
 8000afc:	2232      	movs	r2, #50	; 0x32
 8000afe:	709a      	strb	r2, [r3, #2]
	currTime.TimeFormat = RTC_HOURFORMAT12_AM;			//This is initially in the A.M., so P.M. LED is off.
 8000b00:	4b2d      	ldr	r3, [pc, #180]	; (8000bb8 <sevSeg_I2C1_Init+0x1e4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	70da      	strb	r2, [r3, #3]

	currDate.Year = 0;
 8000b06:	4b2d      	ldr	r3, [pc, #180]	; (8000bbc <sevSeg_I2C1_Init+0x1e8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	70da      	strb	r2, [r3, #3]
	currDate.Month = RTC_MONTH_JANUARY;
 8000b0c:	4b2b      	ldr	r3, [pc, #172]	; (8000bbc <sevSeg_I2C1_Init+0x1e8>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	705a      	strb	r2, [r3, #1]
	currDate.Date = 0;
 8000b12:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <sevSeg_I2C1_Init+0x1e8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8000b18:	4927      	ldr	r1, [pc, #156]	; (8000bb8 <sevSeg_I2C1_Init+0x1e4>)
 8000b1a:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <sevSeg_I2C1_Init+0x1ec>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f003 fd06 	bl	8004530 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 8000b24:	4925      	ldr	r1, [pc, #148]	; (8000bbc <sevSeg_I2C1_Init+0x1e8>)
 8000b26:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <sevSeg_I2C1_Init+0x1ec>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f003 fe04 	bl	8004738 <HAL_RTC_SetDate>

	printf("Current time defaulted to: %d:%d:%d\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000b30:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <sevSeg_I2C1_Init+0x1e4>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	0019      	movs	r1, r3
 8000b36:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <sevSeg_I2C1_Init+0x1e4>)
 8000b38:	785b      	ldrb	r3, [r3, #1]
 8000b3a:	001a      	movs	r2, r3
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <sevSeg_I2C1_Init+0x1e4>)
 8000b3e:	789b      	ldrb	r3, [r3, #2]
 8000b40:	4820      	ldr	r0, [pc, #128]	; (8000bc4 <sevSeg_I2C1_Init+0x1f0>)
 8000b42:	f005 fa69 	bl	8006018 <iprintf>

	halRet = updateAndDisplayTime();
 8000b46:	1dfc      	adds	r4, r7, #7
 8000b48:	f000 f842 	bl	8000bd0 <updateAndDisplayTime>
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d004      	beq.n	8000b62 <sevSeg_I2C1_Init+0x18e>
		printf("HAL Error - TX current time\n\r");
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <sevSeg_I2C1_Init+0x1f4>)
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f005 fa5c 	bl	8006018 <iprintf>
	} else {
		printf("Display Updated with current time\n\r");
	}

	return;
 8000b60:	e004      	b.n	8000b6c <sevSeg_I2C1_Init+0x198>
		printf("Display Updated with current time\n\r");
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <sevSeg_I2C1_Init+0x1f8>)
 8000b64:	0018      	movs	r0, r3
 8000b66:	f005 fa57 	bl	8006018 <iprintf>
	return;
 8000b6a:	46c0      	nop			; (mov r8, r8)

}
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b003      	add	sp, #12
 8000b70:	bd90      	pop	{r4, r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000004 	.word	0x20000004
 8000b7c:	200000bc 	.word	0x200000bc
 8000b80:	08007020 	.word	0x08007020
 8000b84:	08007040 	.word	0x08007040
 8000b88:	2000000c 	.word	0x2000000c
 8000b8c:	08007060 	.word	0x08007060
 8000b90:	08007088 	.word	0x08007088
 8000b94:	2000001c 	.word	0x2000001c
 8000b98:	080070ac 	.word	0x080070ac
 8000b9c:	080070d0 	.word	0x080070d0
 8000ba0:	20000018 	.word	0x20000018
 8000ba4:	080070f4 	.word	0x080070f4
 8000ba8:	08007118 	.word	0x08007118
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	0800713c 	.word	0x0800713c
 8000bb4:	08007164 	.word	0x08007164
 8000bb8:	2000021c 	.word	0x2000021c
 8000bbc:	20000230 	.word	0x20000230
 8000bc0:	20000110 	.word	0x20000110
 8000bc4:	08007174 	.word	0x08007174
 8000bc8:	0800719c 	.word	0x0800719c
 8000bcc:	080071bc 	.word	0x080071bc

08000bd0 <updateAndDisplayTime>:

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af02      	add	r7, sp, #8

	HAL_StatusTypeDef halRet = HAL_OK;
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]

	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8000bdc:	4941      	ldr	r1, [pc, #260]	; (8000ce4 <updateAndDisplayTime+0x114>)
 8000bde:	4b42      	ldr	r3, [pc, #264]	; (8000ce8 <updateAndDisplayTime+0x118>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	0018      	movs	r0, r3
 8000be4:	f003 fd4c 	bl	8004680 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 8000be8:	4940      	ldr	r1, [pc, #256]	; (8000cec <updateAndDisplayTime+0x11c>)
 8000bea:	4b3f      	ldr	r3, [pc, #252]	; (8000ce8 <updateAndDisplayTime+0x118>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f003 fe34 	bl	800485c <HAL_RTC_GetDate>

	sevSeg_digit0Buff[1] = currTime.Hours / 10;
 8000bf4:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <updateAndDisplayTime+0x114>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	210a      	movs	r1, #10
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff fa8c 	bl	8000118 <__udivsi3>
 8000c00:	0003      	movs	r3, r0
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b3a      	ldr	r3, [pc, #232]	; (8000cf0 <updateAndDisplayTime+0x120>)
 8000c06:	705a      	strb	r2, [r3, #1]
	sevSeg_digit1Buff[1] = currTime.Hours % 10;
 8000c08:	4b36      	ldr	r3, [pc, #216]	; (8000ce4 <updateAndDisplayTime+0x114>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	210a      	movs	r1, #10
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff fb08 	bl	8000224 <__aeabi_uidivmod>
 8000c14:	000b      	movs	r3, r1
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	4b36      	ldr	r3, [pc, #216]	; (8000cf4 <updateAndDisplayTime+0x124>)
 8000c1a:	705a      	strb	r2, [r3, #1]
	sevSeg_digit2Buff[1] = currTime.Minutes / 10;
 8000c1c:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <updateAndDisplayTime+0x114>)
 8000c1e:	785b      	ldrb	r3, [r3, #1]
 8000c20:	210a      	movs	r1, #10
 8000c22:	0018      	movs	r0, r3
 8000c24:	f7ff fa78 	bl	8000118 <__udivsi3>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b32      	ldr	r3, [pc, #200]	; (8000cf8 <updateAndDisplayTime+0x128>)
 8000c2e:	705a      	strb	r2, [r3, #1]
	sevSeg_digit3Buff[1] = currTime.Minutes % 10;
 8000c30:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <updateAndDisplayTime+0x114>)
 8000c32:	785b      	ldrb	r3, [r3, #1]
 8000c34:	210a      	movs	r1, #10
 8000c36:	0018      	movs	r0, r3
 8000c38:	f7ff faf4 	bl	8000224 <__aeabi_uidivmod>
 8000c3c:	000b      	movs	r3, r1
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <updateAndDisplayTime+0x12c>)
 8000c42:	705a      	strb	r2, [r3, #1]

	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit0Buff, 2, HAL_MAX_DELAY);
 8000c44:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <updateAndDisplayTime+0x130>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b299      	uxth	r1, r3
 8000c4a:	1dfc      	adds	r4, r7, #7
 8000c4c:	4a28      	ldr	r2, [pc, #160]	; (8000cf0 <updateAndDisplayTime+0x120>)
 8000c4e:	482d      	ldr	r0, [pc, #180]	; (8000d04 <updateAndDisplayTime+0x134>)
 8000c50:	2301      	movs	r3, #1
 8000c52:	425b      	negs	r3, r3
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2302      	movs	r3, #2
 8000c58:	f001 fb80 	bl	800235c <HAL_I2C_Master_Transmit>
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit1Buff, 2, HAL_MAX_DELAY);
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <updateAndDisplayTime+0x130>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b299      	uxth	r1, r3
 8000c66:	1dfc      	adds	r4, r7, #7
 8000c68:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <updateAndDisplayTime+0x124>)
 8000c6a:	4826      	ldr	r0, [pc, #152]	; (8000d04 <updateAndDisplayTime+0x134>)
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	425b      	negs	r3, r3
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2302      	movs	r3, #2
 8000c74:	f001 fb72 	bl	800235c <HAL_I2C_Master_Transmit>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit2Buff, 2, HAL_MAX_DELAY);
 8000c7c:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <updateAndDisplayTime+0x130>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b299      	uxth	r1, r3
 8000c82:	1dfc      	adds	r4, r7, #7
 8000c84:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <updateAndDisplayTime+0x128>)
 8000c86:	481f      	ldr	r0, [pc, #124]	; (8000d04 <updateAndDisplayTime+0x134>)
 8000c88:	2301      	movs	r3, #1
 8000c8a:	425b      	negs	r3, r3
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2302      	movs	r3, #2
 8000c90:	f001 fb64 	bl	800235c <HAL_I2C_Master_Transmit>
 8000c94:	0003      	movs	r3, r0
 8000c96:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit3Buff, 2, HAL_MAX_DELAY);
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <updateAndDisplayTime+0x130>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b299      	uxth	r1, r3
 8000c9e:	1dfc      	adds	r4, r7, #7
 8000ca0:	4a16      	ldr	r2, [pc, #88]	; (8000cfc <updateAndDisplayTime+0x12c>)
 8000ca2:	4818      	ldr	r0, [pc, #96]	; (8000d04 <updateAndDisplayTime+0x134>)
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2302      	movs	r3, #2
 8000cac:	f001 fb56 	bl	800235c <HAL_I2C_Master_Transmit>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	7023      	strb	r3, [r4, #0]

	if(currTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <updateAndDisplayTime+0x114>)
 8000cb6:	78db      	ldrb	r3, [r3, #3]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d106      	bne.n	8000cca <updateAndDisplayTime+0xfa>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000cbc:	2140      	movs	r1, #64	; 0x40
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <updateAndDisplayTime+0x138>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f001 fa63 	bl	800218e <HAL_GPIO_WritePin>
 8000cc8:	e005      	b.n	8000cd6 <updateAndDisplayTime+0x106>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000cca:	2140      	movs	r1, #64	; 0x40
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <updateAndDisplayTime+0x138>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f001 fa5c 	bl	800218e <HAL_GPIO_WritePin>
	}

	return halRet;
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	781b      	ldrb	r3, [r3, #0]

}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b003      	add	sp, #12
 8000ce0:	bd90      	pop	{r4, r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	2000021c 	.word	0x2000021c
 8000ce8:	20000110 	.word	0x20000110
 8000cec:	20000230 	.word	0x20000230
 8000cf0:	20000020 	.word	0x20000020
 8000cf4:	20000024 	.word	0x20000024
 8000cf8:	20000028 	.word	0x20000028
 8000cfc:	2000002c 	.word	0x2000002c
 8000d00:	20000000 	.word	0x20000000
 8000d04:	200000bc 	.word	0x200000bc
 8000d08:	50000400 	.word	0x50000400

08000d0c <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8000d0c:	b5b0      	push	{r4, r5, r7, lr}
 8000d0e:	b08e      	sub	sp, #56	; 0x38
 8000d10:	af02      	add	r7, sp, #8

	HAL_StatusTypeDef halRet = HAL_OK;
 8000d12:	242f      	movs	r4, #47	; 0x2f
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef userAlarmObj;
	HAL_RTC_GetAlarm(&hrtc, &userAlarmObj, userAlarm, RTC_FORMAT_BCD);
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	009a      	lsls	r2, r3, #2
 8000d1e:	1d39      	adds	r1, r7, #4
 8000d20:	4841      	ldr	r0, [pc, #260]	; (8000e28 <updateAndDisplayAlarm+0x11c>)
 8000d22:	2301      	movs	r3, #1
 8000d24:	f004 f8ee 	bl	8004f04 <HAL_RTC_GetAlarm>
	userAlarmTime = userAlarmObj.AlarmTime;
 8000d28:	4b40      	ldr	r3, [pc, #256]	; (8000e2c <updateAndDisplayAlarm+0x120>)
 8000d2a:	1d3a      	adds	r2, r7, #4
 8000d2c:	ca23      	ldmia	r2!, {r0, r1, r5}
 8000d2e:	c323      	stmia	r3!, {r0, r1, r5}
 8000d30:	ca03      	ldmia	r2!, {r0, r1}
 8000d32:	c303      	stmia	r3!, {r0, r1}

	sevSeg_digit0Buff[1] = userAlarmTime.Hours / 10;
 8000d34:	4b3d      	ldr	r3, [pc, #244]	; (8000e2c <updateAndDisplayAlarm+0x120>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	210a      	movs	r1, #10
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff f9ec 	bl	8000118 <__udivsi3>
 8000d40:	0003      	movs	r3, r0
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <updateAndDisplayAlarm+0x124>)
 8000d46:	705a      	strb	r2, [r3, #1]
	sevSeg_digit1Buff[1] = userAlarmTime.Hours % 10;
 8000d48:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <updateAndDisplayAlarm+0x120>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	210a      	movs	r1, #10
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff fa68 	bl	8000224 <__aeabi_uidivmod>
 8000d54:	000b      	movs	r3, r1
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b36      	ldr	r3, [pc, #216]	; (8000e34 <updateAndDisplayAlarm+0x128>)
 8000d5a:	705a      	strb	r2, [r3, #1]
	sevSeg_digit2Buff[1] = userAlarmTime.Minutes / 10;
 8000d5c:	4b33      	ldr	r3, [pc, #204]	; (8000e2c <updateAndDisplayAlarm+0x120>)
 8000d5e:	785b      	ldrb	r3, [r3, #1]
 8000d60:	210a      	movs	r1, #10
 8000d62:	0018      	movs	r0, r3
 8000d64:	f7ff f9d8 	bl	8000118 <__udivsi3>
 8000d68:	0003      	movs	r3, r0
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b32      	ldr	r3, [pc, #200]	; (8000e38 <updateAndDisplayAlarm+0x12c>)
 8000d6e:	705a      	strb	r2, [r3, #1]
	sevSeg_digit3Buff[1] = userAlarmTime.Minutes % 10;
 8000d70:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <updateAndDisplayAlarm+0x120>)
 8000d72:	785b      	ldrb	r3, [r3, #1]
 8000d74:	210a      	movs	r1, #10
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff fa54 	bl	8000224 <__aeabi_uidivmod>
 8000d7c:	000b      	movs	r3, r1
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <updateAndDisplayAlarm+0x130>)
 8000d82:	705a      	strb	r2, [r3, #1]

	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit0Buff, 2, HAL_MAX_DELAY);
 8000d84:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <updateAndDisplayAlarm+0x134>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b299      	uxth	r1, r3
 8000d8a:	0025      	movs	r5, r4
 8000d8c:	197c      	adds	r4, r7, r5
 8000d8e:	4a28      	ldr	r2, [pc, #160]	; (8000e30 <updateAndDisplayAlarm+0x124>)
 8000d90:	482c      	ldr	r0, [pc, #176]	; (8000e44 <updateAndDisplayAlarm+0x138>)
 8000d92:	2301      	movs	r3, #1
 8000d94:	425b      	negs	r3, r3
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2302      	movs	r3, #2
 8000d9a:	f001 fadf 	bl	800235c <HAL_I2C_Master_Transmit>
 8000d9e:	0003      	movs	r3, r0
 8000da0:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit1Buff, 2, HAL_MAX_DELAY);
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <updateAndDisplayAlarm+0x134>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b299      	uxth	r1, r3
 8000da8:	197c      	adds	r4, r7, r5
 8000daa:	4a22      	ldr	r2, [pc, #136]	; (8000e34 <updateAndDisplayAlarm+0x128>)
 8000dac:	4825      	ldr	r0, [pc, #148]	; (8000e44 <updateAndDisplayAlarm+0x138>)
 8000dae:	2301      	movs	r3, #1
 8000db0:	425b      	negs	r3, r3
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2302      	movs	r3, #2
 8000db6:	f001 fad1 	bl	800235c <HAL_I2C_Master_Transmit>
 8000dba:	0003      	movs	r3, r0
 8000dbc:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit2Buff, 2, HAL_MAX_DELAY);
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <updateAndDisplayAlarm+0x134>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b299      	uxth	r1, r3
 8000dc4:	197c      	adds	r4, r7, r5
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <updateAndDisplayAlarm+0x12c>)
 8000dc8:	481e      	ldr	r0, [pc, #120]	; (8000e44 <updateAndDisplayAlarm+0x138>)
 8000dca:	2301      	movs	r3, #1
 8000dcc:	425b      	negs	r3, r3
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	f001 fac3 	bl	800235c <HAL_I2C_Master_Transmit>
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit3Buff, 2, HAL_MAX_DELAY);
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <updateAndDisplayAlarm+0x134>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b299      	uxth	r1, r3
 8000de0:	197c      	adds	r4, r7, r5
 8000de2:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <updateAndDisplayAlarm+0x130>)
 8000de4:	4817      	ldr	r0, [pc, #92]	; (8000e44 <updateAndDisplayAlarm+0x138>)
 8000de6:	2301      	movs	r3, #1
 8000de8:	425b      	negs	r3, r3
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2302      	movs	r3, #2
 8000dee:	f001 fab5 	bl	800235c <HAL_I2C_Master_Transmit>
 8000df2:	0003      	movs	r3, r0
 8000df4:	7023      	strb	r3, [r4, #0]

	if(currTime.TimeFormat == RTC_HOURFORMAT12_PM) {			// If we are in the PM hours
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <updateAndDisplayAlarm+0x13c>)
 8000df8:	78db      	ldrb	r3, [r3, #3]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d106      	bne.n	8000e0c <updateAndDisplayAlarm+0x100>
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_SET);			// Turn on PM LED
 8000dfe:	2140      	movs	r1, #64	; 0x40
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <updateAndDisplayAlarm+0x140>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	0018      	movs	r0, r3
 8000e06:	f001 f9c2 	bl	800218e <HAL_GPIO_WritePin>
 8000e0a:	e005      	b.n	8000e18 <updateAndDisplayAlarm+0x10c>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// Else, it is A.M.
 8000e0c:	2140      	movs	r1, #64	; 0x40
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <updateAndDisplayAlarm+0x140>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	0018      	movs	r0, r3
 8000e14:	f001 f9bb 	bl	800218e <HAL_GPIO_WritePin>
	}

	return halRet;
 8000e18:	232f      	movs	r3, #47	; 0x2f
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	781b      	ldrb	r3, [r3, #0]

}
 8000e1e:	0018      	movs	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b00c      	add	sp, #48	; 0x30
 8000e24:	bdb0      	pop	{r4, r5, r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	20000110 	.word	0x20000110
 8000e2c:	20000234 	.word	0x20000234
 8000e30:	20000020 	.word	0x20000020
 8000e34:	20000024 	.word	0x20000024
 8000e38:	20000028 	.word	0x20000028
 8000e3c:	2000002c 	.word	0x2000002c
 8000e40:	20000000 	.word	0x20000000
 8000e44:	200000bc 	.word	0x200000bc
 8000e48:	2000021c 	.word	0x2000021c
 8000e4c:	50000400 	.word	0x50000400

08000e50 <HAL_RTC_AlarmAEventCallback>:



void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000e50:	b590      	push	{r4, r7, lr}
 8000e52:	b093      	sub	sp, #76	; 0x4c
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

	  printf("Enter alarm minute increment interrupt\n\r");
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <HAL_RTC_AlarmAEventCallback+0x94>)
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f005 f8dc 	bl	8006018 <iprintf>

	  RTC_AlarmTypeDef sAlarm;
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, FORMAT_BIN);
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	005a      	lsls	r2, r3, #1
 8000e64:	2420      	movs	r4, #32
 8000e66:	1939      	adds	r1, r7, r4
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f004 f84a 	bl	8004f04 <HAL_RTC_GetAlarm>

	  RTC_TimeTypeDef currTime;
	  RTC_DateTypeDef currDate;
	  HAL_RTC_GetTime(hrtc, &currTime, RTC_FORMAT_BIN);
 8000e70:	230c      	movs	r3, #12
 8000e72:	18f9      	adds	r1, r7, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f003 fc01 	bl	8004680 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(hrtc, &currDate, RTC_FORMAT_BIN);		//get date is necessary, else RTC will not update time
 8000e7e:	2308      	movs	r3, #8
 8000e80:	18f9      	adds	r1, r7, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	0018      	movs	r0, r3
 8000e88:	f003 fce8 	bl	800485c <HAL_RTC_GetDate>

	  if(sAlarm.AlarmTime.Minutes>58) {
 8000e8c:	193b      	adds	r3, r7, r4
 8000e8e:	785b      	ldrb	r3, [r3, #1]
 8000e90:	2b3a      	cmp	r3, #58	; 0x3a
 8000e92:	d903      	bls.n	8000e9c <HAL_RTC_AlarmAEventCallback+0x4c>
		sAlarm.AlarmTime.Minutes=0;
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	2200      	movs	r2, #0
 8000e98:	705a      	strb	r2, [r3, #1]
 8000e9a:	e006      	b.n	8000eaa <HAL_RTC_AlarmAEventCallback+0x5a>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8000e9c:	2120      	movs	r1, #32
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	785b      	ldrb	r3, [r3, #1]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	2320      	movs	r3, #32
 8000eae:	18f9      	adds	r1, r7, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f003 fe45 	bl	8004b44 <HAL_RTC_SetAlarm_IT>
 8000eba:	1e03      	subs	r3, r0, #0
 8000ebc:	d1f6      	bne.n	8000eac <HAL_RTC_AlarmAEventCallback+0x5c>

	  updateAndDisplayTime();
 8000ebe:	f7ff fe87 	bl	8000bd0 <updateAndDisplayTime>

	  printf("Current time: %d : %d : %d\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000ec2:	200c      	movs	r0, #12
 8000ec4:	183b      	adds	r3, r7, r0
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	0019      	movs	r1, r3
 8000eca:	183b      	adds	r3, r7, r0
 8000ecc:	785b      	ldrb	r3, [r3, #1]
 8000ece:	001a      	movs	r2, r3
 8000ed0:	183b      	adds	r3, r7, r0
 8000ed2:	789b      	ldrb	r3, [r3, #2]
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <HAL_RTC_AlarmAEventCallback+0x98>)
 8000ed6:	f005 f89f 	bl	8006018 <iprintf>

}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b013      	add	sp, #76	; 0x4c
 8000ee0:	bd90      	pop	{r4, r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	080071e0 	.word	0x080071e0
 8000ee8:	0800720c 	.word	0x0800720c

08000eec <HAL_GPIO_EXTI_Falling_Callback>:



}

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	1dbb      	adds	r3, r7, #6
 8000ef6:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8000ef8:	2201      	movs	r2, #1
 8000efa:	1dbb      	adds	r3, r7, #6
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d113      	bne.n	8000f2a <HAL_GPIO_EXTI_Falling_Callback+0x3e>
		halRet = displayButtonISR();
 8000f02:	250f      	movs	r5, #15
 8000f04:	197c      	adds	r4, r7, r5
 8000f06:	f000 f88f 	bl	8001028 <displayButtonISR>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000f0e:	197b      	adds	r3, r7, r5
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d004      	beq.n	8000f20 <HAL_GPIO_EXTI_Falling_Callback+0x34>
			printf("Error toggling display.\n\r");
 8000f16:	4b3a      	ldr	r3, [pc, #232]	; (8001000 <HAL_GPIO_EXTI_Falling_Callback+0x114>)
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f005 f87d 	bl	8006018 <iprintf>
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8000f1e:	e06a      	b.n	8000ff6 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Display intensity toggled.\n\r");
 8000f20:	4b38      	ldr	r3, [pc, #224]	; (8001004 <HAL_GPIO_EXTI_Falling_Callback+0x118>)
 8000f22:	0018      	movs	r0, r3
 8000f24:	f005 f878 	bl	8006018 <iprintf>
}
 8000f28:	e065      	b.n	8000ff6 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	1dbb      	adds	r3, r7, #6
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d113      	bne.n	8000f5c <HAL_GPIO_EXTI_Falling_Callback+0x70>
		halRet = alarmEnableISR();
 8000f34:	250f      	movs	r5, #15
 8000f36:	197c      	adds	r4, r7, r5
 8000f38:	f000 f8b6 	bl	80010a8 <alarmEnableISR>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000f40:	197b      	adds	r3, r7, r5
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d004      	beq.n	8000f52 <HAL_GPIO_EXTI_Falling_Callback+0x66>
			printf("Error toggling user alarm.\n\r");
 8000f48:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <HAL_GPIO_EXTI_Falling_Callback+0x11c>)
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f005 f864 	bl	8006018 <iprintf>
}
 8000f50:	e051      	b.n	8000ff6 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm toggled.\n\r");
 8000f52:	4b2e      	ldr	r3, [pc, #184]	; (800100c <HAL_GPIO_EXTI_Falling_Callback+0x120>)
 8000f54:	0018      	movs	r0, r3
 8000f56:	f005 f85f 	bl	8006018 <iprintf>
}
 8000f5a:	e04c      	b.n	8000ff6 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8000f5c:	2210      	movs	r2, #16
 8000f5e:	1dbb      	adds	r3, r7, #6
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d113      	bne.n	8000f8e <HAL_GPIO_EXTI_Falling_Callback+0xa2>
		halRet = alarmSetISR();
 8000f66:	250f      	movs	r5, #15
 8000f68:	197c      	adds	r4, r7, r5
 8000f6a:	f000 f90d 	bl	8001188 <alarmSetISR>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000f72:	197b      	adds	r3, r7, r5
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d004      	beq.n	8000f84 <HAL_GPIO_EXTI_Falling_Callback+0x98>
			printf("Error setting user alarm.\n\r");
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <HAL_GPIO_EXTI_Falling_Callback+0x124>)
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f005 f84b 	bl	8006018 <iprintf>
}
 8000f82:	e038      	b.n	8000ff6 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm set.\n\r");
 8000f84:	4b23      	ldr	r3, [pc, #140]	; (8001014 <HAL_GPIO_EXTI_Falling_Callback+0x128>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f005 f846 	bl	8006018 <iprintf>
}
 8000f8c:	e033      	b.n	8000ff6 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == hourSetButtonPin) {
 8000f8e:	2220      	movs	r2, #32
 8000f90:	1dbb      	adds	r3, r7, #6
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d113      	bne.n	8000fc0 <HAL_GPIO_EXTI_Falling_Callback+0xd4>
		halRet = hourSetISR();
 8000f98:	250f      	movs	r5, #15
 8000f9a:	197c      	adds	r4, r7, r5
 8000f9c:	f000 f978 	bl	8001290 <hourSetISR>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000fa4:	197b      	adds	r3, r7, r5
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d004      	beq.n	8000fb6 <HAL_GPIO_EXTI_Falling_Callback+0xca>
			printf("Error incrementing hour.\n\r");
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f005 f832 	bl	8006018 <iprintf>
}
 8000fb4:	e01f      	b.n	8000ff6 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Hour increment ISR success.\n\r");
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_GPIO_EXTI_Falling_Callback+0x130>)
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f005 f82d 	bl	8006018 <iprintf>
}
 8000fbe:	e01a      	b.n	8000ff6 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	015b      	lsls	r3, r3, #5
 8000fc4:	1dba      	adds	r2, r7, #6
 8000fc6:	8812      	ldrh	r2, [r2, #0]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d113      	bne.n	8000ff4 <HAL_GPIO_EXTI_Falling_Callback+0x108>
		halRet = minuteSetISR();
 8000fcc:	250f      	movs	r5, #15
 8000fce:	197c      	adds	r4, r7, r5
 8000fd0:	f000 fa16 	bl	8001400 <minuteSetISR>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000fd8:	197b      	adds	r3, r7, r5
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d004      	beq.n	8000fea <HAL_GPIO_EXTI_Falling_Callback+0xfe>
			printf("Error incrementing minute.\n\r");
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_GPIO_EXTI_Falling_Callback+0x134>)
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f005 f818 	bl	8006018 <iprintf>
}
 8000fe8:	e005      	b.n	8000ff6 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Minute increment ISR success.\n\r");
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_GPIO_EXTI_Falling_Callback+0x138>)
 8000fec:	0018      	movs	r0, r3
 8000fee:	f005 f813 	bl	8006018 <iprintf>
}
 8000ff2:	e000      	b.n	8000ff6 <HAL_GPIO_EXTI_Falling_Callback+0x10a>
		__NOP();
 8000ff4:	46c0      	nop			; (mov r8, r8)
}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b004      	add	sp, #16
 8000ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	0800724c 	.word	0x0800724c
 8001004:	08007268 	.word	0x08007268
 8001008:	08007288 	.word	0x08007288
 800100c:	080072a8 	.word	0x080072a8
 8001010:	080072c0 	.word	0x080072c0
 8001014:	080072dc 	.word	0x080072dc
 8001018:	080072f0 	.word	0x080072f0
 800101c:	0800730c 	.word	0x0800730c
 8001020:	0800732c 	.word	0x0800732c
 8001024:	0800734c 	.word	0x0800734c

08001028 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b085      	sub	sp, #20
 800102c:	af02      	add	r7, sp, #8

	printf("Entered display toggle ISR\n\r");
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <displayButtonISR+0x68>)
 8001030:	0018      	movs	r0, r3
 8001032:	f004 fff1 	bl	8006018 <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]

	sevSeg_intensityBuff[1] = sevSeg_intensityDuty[displayToggle];			//Turn display to proper duty cycle
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <displayButtonISR+0x6c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	001a      	movs	r2, r3
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <displayButtonISR+0x70>)
 8001044:	5c9a      	ldrb	r2, [r3, r2]
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <displayButtonISR+0x74>)
 8001048:	705a      	strb	r2, [r3, #1]

	// TX new intensity to 7-seg driver
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_intensityBuff, 2, HAL_MAX_DELAY);
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <displayButtonISR+0x78>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b299      	uxth	r1, r3
 8001050:	1dfc      	adds	r4, r7, #7
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <displayButtonISR+0x74>)
 8001054:	4813      	ldr	r0, [pc, #76]	; (80010a4 <displayButtonISR+0x7c>)
 8001056:	2301      	movs	r3, #1
 8001058:	425b      	negs	r3, r3
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2302      	movs	r3, #2
 800105e:	f001 f97d 	bl	800235c <HAL_I2C_Master_Transmit>
 8001062:	0003      	movs	r3, r0
 8001064:	7023      	strb	r3, [r4, #0]

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <displayButtonISR+0x6c>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d903      	bls.n	8001076 <displayButtonISR+0x4e>
		displayToggle = 0;
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <displayButtonISR+0x6c>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
 8001074:	e005      	b.n	8001082 <displayButtonISR+0x5a>
	} else {
		displayToggle++;
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <displayButtonISR+0x6c>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <displayButtonISR+0x6c>)
 8001080:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	781b      	ldrb	r3, [r3, #0]

}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b003      	add	sp, #12
 800108c:	bd90      	pop	{r4, r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	0800736c 	.word	0x0800736c
 8001094:	20000248 	.word	0x20000248
 8001098:	08007514 	.word	0x08007514
 800109c:	20000008 	.word	0x20000008
 80010a0:	20000000 	.word	0x20000000
 80010a4:	200000bc 	.word	0x200000bc

080010a8 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b093      	sub	sp, #76	; 0x4c
 80010ac:	af02      	add	r7, sp, #8

	printf("Entered alarm toggle ISR\n\r");
 80010ae:	4b30      	ldr	r3, [pc, #192]	; (8001170 <alarmEnableISR+0xc8>)
 80010b0:	0018      	movs	r0, r3
 80010b2:	f004 ffb1 	bl	8006018 <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 80010b6:	233f      	movs	r3, #63	; 0x3f
 80010b8:	18fb      	adds	r3, r7, r3
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <alarmEnableISR+0xcc>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2201      	movs	r2, #1
 80010c4:	4053      	eors	r3, r2
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d030      	beq.n	800112e <alarmEnableISR+0x86>

		// Use object to get current user alarm time and set/enable the user alarm to that time.
		RTC_AlarmTypeDef userAlarmObj;
		HAL_RTC_GetAlarm(&hrtc, &userAlarmObj, userAlarm, RTC_FORMAT_BCD);
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	009a      	lsls	r2, r3, #2
 80010d0:	0039      	movs	r1, r7
 80010d2:	4829      	ldr	r0, [pc, #164]	; (8001178 <alarmEnableISR+0xd0>)
 80010d4:	2301      	movs	r3, #1
 80010d6:	f003 ff15 	bl	8004f04 <HAL_RTC_GetAlarm>
		HAL_RTC_SetAlarm(&hrtc, &userAlarmObj, RTC_FORMAT_BCD);
 80010da:	0039      	movs	r1, r7
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <alarmEnableISR+0xd0>)
 80010de:	2201      	movs	r2, #1
 80010e0:	0018      	movs	r0, r3
 80010e2:	f003 fc09 	bl	80048f8 <HAL_RTC_SetAlarm>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_SET);			// Turn on alarm LED
 80010e6:	2180      	movs	r1, #128	; 0x80
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <alarmEnableISR+0xd4>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	0018      	movs	r0, r3
 80010ee:	f001 f84e 	bl	800218e <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <alarmEnableISR+0xcc>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]

		RTC_TimeTypeDef alarmTime = userAlarmObj.AlarmTime;
 80010f8:	2428      	movs	r4, #40	; 0x28
 80010fa:	193a      	adds	r2, r7, r4
 80010fc:	003b      	movs	r3, r7
 80010fe:	0010      	movs	r0, r2
 8001100:	0019      	movs	r1, r3
 8001102:	2314      	movs	r3, #20
 8001104:	001a      	movs	r2, r3
 8001106:	f004 ff75 	bl	8005ff4 <memcpy>
		printf("User alarm set to: %d:%d:%d on alarm %d.\n\r", alarmTime.Hours,
 800110a:	0020      	movs	r0, r4
 800110c:	183b      	adds	r3, r7, r0
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	0019      	movs	r1, r3
								alarmTime.Minutes, alarmTime.Seconds, userAlarmObj.Alarm);
 8001112:	183b      	adds	r3, r7, r0
 8001114:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm set to: %d:%d:%d on alarm %d.\n\r", alarmTime.Hours,
 8001116:	001a      	movs	r2, r3
								alarmTime.Minutes, alarmTime.Seconds, userAlarmObj.Alarm);
 8001118:	183b      	adds	r3, r7, r0
 800111a:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm set to: %d:%d:%d on alarm %d.\n\r", alarmTime.Hours,
 800111c:	001c      	movs	r4, r3
 800111e:	003b      	movs	r3, r7
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	4817      	ldr	r0, [pc, #92]	; (8001180 <alarmEnableISR+0xd8>)
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	0023      	movs	r3, r4
 8001128:	f004 ff76 	bl	8006018 <iprintf>
 800112c:	e019      	b.n	8001162 <alarmEnableISR+0xba>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <alarmEnableISR+0xcc>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d014      	beq.n	8001160 <alarmEnableISR+0xb8>

		HAL_RTC_DeactivateAlarm(&hrtc, userAlarm);				// Deactivate alarm
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	009a      	lsls	r2, r3, #2
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <alarmEnableISR+0xd0>)
 800113c:	0011      	movs	r1, r2
 800113e:	0018      	movs	r0, r3
 8001140:	f003 fe40 	bl	8004dc4 <HAL_RTC_DeactivateAlarm>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_RESET);			// Turn off alarm LED
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <alarmEnableISR+0xd4>)
 8001148:	2200      	movs	r2, #0
 800114a:	0018      	movs	r0, r3
 800114c:	f001 f81f 	bl	800218e <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <alarmEnableISR+0xcc>)
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]

		printf("User alarm disabled.\n\r");
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <alarmEnableISR+0xdc>)
 8001158:	0018      	movs	r0, r3
 800115a:	f004 ff5d 	bl	8006018 <iprintf>
 800115e:	e000      	b.n	8001162 <alarmEnableISR+0xba>
	}
	else {
		__NOP();							//Code should never reach here.
 8001160:	46c0      	nop			; (mov r8, r8)
	}

	return halRet;
 8001162:	233f      	movs	r3, #63	; 0x3f
 8001164:	18fb      	adds	r3, r7, r3
 8001166:	781b      	ldrb	r3, [r3, #0]

}
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	b011      	add	sp, #68	; 0x44
 800116e:	bd90      	pop	{r4, r7, pc}
 8001170:	0800738c 	.word	0x0800738c
 8001174:	20000249 	.word	0x20000249
 8001178:	20000110 	.word	0x20000110
 800117c:	50000400 	.word	0x50000400
 8001180:	080073a8 	.word	0x080073a8
 8001184:	080073d4 	.word	0x080073d4

08001188 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af02      	add	r7, sp, #8

	printf("Enter user alarm set ISR.\n\r");
 800118e:	4b39      	ldr	r3, [pc, #228]	; (8001274 <alarmSetISR+0xec>)
 8001190:	0018      	movs	r0, r3
 8001192:	f004 ff41 	bl	8006018 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 8001196:	1cfb      	adds	r3, r7, #3
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim16);						// Begin timer 16 counting (to 500 ms)
 800119c:	4b36      	ldr	r3, [pc, #216]	; (8001278 <alarmSetISR+0xf0>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f004 f908 	bl	80053b4 <HAL_TIM_Base_Start>
	int16_t timerVal = __HAL_TIM_GET_COUNTER(&htim16);	// Get initial timer value to compare to
 80011a4:	4b34      	ldr	r3, [pc, #208]	; (8001278 <alarmSetISR+0xf0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011aa:	1dbb      	adds	r3, r7, #6
 80011ac:	801a      	strh	r2, [r3, #0]
	bool displayBlink = false;
 80011ae:	1d7b      	adds	r3, r7, #5
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]

	uint8_t count = 0;
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
//		}
//		if(HAL_GPIO_ReadPin(GPIOA, minuteSetButtonPin) == GPIO_PIN_RESET ) {
//			halRet = hourSetISR();
//		}

		if(__HAL_TIM_GET_COUNTER(&htim16) - timerVal >= (65536 / 2)) {
 80011ba:	4b2f      	ldr	r3, [pc, #188]	; (8001278 <alarmSetISR+0xf0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011c0:	1dbb      	adds	r3, r7, #6
 80011c2:	2100      	movs	r1, #0
 80011c4:	5e5b      	ldrsh	r3, [r3, r1]
 80011c6:	1ad2      	subs	r2, r2, r3
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d332      	bcc.n	8001236 <alarmSetISR+0xae>

			count++;
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	3201      	adds	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
			printf("Toggling 7-seg on count %d\n\r", count);
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	781a      	ldrb	r2, [r3, #0]
 80011de:	4b27      	ldr	r3, [pc, #156]	; (800127c <alarmSetISR+0xf4>)
 80011e0:	0011      	movs	r1, r2
 80011e2:	0018      	movs	r0, r3
 80011e4:	f004 ff18 	bl	8006018 <iprintf>

			updateAndDisplayAlarm();
 80011e8:	f7ff fd90 	bl	8000d0c <updateAndDisplayAlarm>

			sevSeg_intensityBuff[1] = sevSeg_intensityDuty[displayBlink];		// Initialize to whatever duty cycle
 80011ec:	1d7b      	adds	r3, r7, #5
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4a23      	ldr	r2, [pc, #140]	; (8001280 <alarmSetISR+0xf8>)
 80011f2:	5cd2      	ldrb	r2, [r2, r3]
 80011f4:	4b23      	ldr	r3, [pc, #140]	; (8001284 <alarmSetISR+0xfc>)
 80011f6:	705a      	strb	r2, [r3, #1]
			HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_intensityBuff, 2, HAL_MAX_DELAY);
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <alarmSetISR+0x100>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b299      	uxth	r1, r3
 80011fe:	4a21      	ldr	r2, [pc, #132]	; (8001284 <alarmSetISR+0xfc>)
 8001200:	4822      	ldr	r0, [pc, #136]	; (800128c <alarmSetISR+0x104>)
 8001202:	2301      	movs	r3, #1
 8001204:	425b      	negs	r3, r3
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2302      	movs	r3, #2
 800120a:	f001 f8a7 	bl	800235c <HAL_I2C_Master_Transmit>

			timerVal = __HAL_TIM_GET_COUNTER(&htim16);
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <alarmSetISR+0xf0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001214:	1dbb      	adds	r3, r7, #6
 8001216:	801a      	strh	r2, [r3, #0]
			displayBlink = !displayBlink;
 8001218:	1d7b      	adds	r3, r7, #5
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	1e5a      	subs	r2, r3, #1
 800121e:	4193      	sbcs	r3, r2
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2201      	movs	r2, #1
 8001224:	4053      	eors	r3, r2
 8001226:	b2db      	uxtb	r3, r3
 8001228:	001a      	movs	r2, r3
 800122a:	1d7b      	adds	r3, r7, #5
 800122c:	701a      	strb	r2, [r3, #0]
 800122e:	781a      	ldrb	r2, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	400a      	ands	r2, r1
 8001234:	701a      	strb	r2, [r3, #0]

		}

	}while(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == GPIO_PIN_RESET);
 8001236:	2210      	movs	r2, #16
 8001238:	23a0      	movs	r3, #160	; 0xa0
 800123a:	05db      	lsls	r3, r3, #23
 800123c:	0011      	movs	r1, r2
 800123e:	0018      	movs	r0, r3
 8001240:	f000 ff88 	bl	8002154 <HAL_GPIO_ReadPin>
 8001244:	1e03      	subs	r3, r0, #0
 8001246:	d0b8      	beq.n	80011ba <alarmSetISR+0x32>

	sevSeg_intensityBuff[1] = sevSeg_intensityDuty[2];
 8001248:	2263      	movs	r2, #99	; 0x63
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <alarmSetISR+0xfc>)
 800124c:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_intensityBuff, 2, HAL_MAX_DELAY);
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <alarmSetISR+0x100>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b299      	uxth	r1, r3
 8001254:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <alarmSetISR+0xfc>)
 8001256:	480d      	ldr	r0, [pc, #52]	; (800128c <alarmSetISR+0x104>)
 8001258:	2301      	movs	r3, #1
 800125a:	425b      	negs	r3, r3
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2302      	movs	r3, #2
 8001260:	f001 f87c 	bl	800235c <HAL_I2C_Master_Transmit>

	updateAndDisplayTime();
 8001264:	f7ff fcb4 	bl	8000bd0 <updateAndDisplayTime>

	return halRet;
 8001268:	1cfb      	adds	r3, r7, #3
 800126a:	781b      	ldrb	r3, [r3, #0]

}
 800126c:	0018      	movs	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	b002      	add	sp, #8
 8001272:	bd80      	pop	{r7, pc}
 8001274:	080073ec 	.word	0x080073ec
 8001278:	2000013c 	.word	0x2000013c
 800127c:	08007408 	.word	0x08007408
 8001280:	08007514 	.word	0x08007514
 8001284:	20000008 	.word	0x20000008
 8001288:	20000000 	.word	0x20000000
 800128c:	200000bc 	.word	0x200000bc

08001290 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b08d      	sub	sp, #52	; 0x34
 8001294:	af00      	add	r7, sp, #0

	printf("Entered hour set ISR.\n\r");
 8001296:	4b53      	ldr	r3, [pc, #332]	; (80013e4 <hourSetISR+0x154>)
 8001298:	0018      	movs	r0, r3
 800129a:	f004 febd 	bl	8006018 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 800129e:	232f      	movs	r3, #47	; 0x2f
 80012a0:	18fb      	adds	r3, r7, r3
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) != GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 80012a6:	2210      	movs	r2, #16
 80012a8:	23a0      	movs	r3, #160	; 0xa0
 80012aa:	05db      	lsls	r3, r3, #23
 80012ac:	0011      	movs	r1, r2
 80012ae:	0018      	movs	r0, r3
 80012b0:	f000 ff50 	bl	8002154 <HAL_GPIO_ReadPin>
 80012b4:	0003      	movs	r3, r0
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d043      	beq.n	8001342 <hourSetISR+0xb2>

		RTC_AlarmTypeDef userAlarmObj;
		HAL_RTC_GetAlarm(&hrtc, &userAlarmObj, userAlarm, RTC_FORMAT_BCD);
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	009a      	lsls	r2, r3, #2
 80012be:	1d39      	adds	r1, r7, #4
 80012c0:	4849      	ldr	r0, [pc, #292]	; (80013e8 <hourSetISR+0x158>)
 80012c2:	2301      	movs	r3, #1
 80012c4:	f003 fe1e 	bl	8004f04 <HAL_RTC_GetAlarm>
		userAlarmTime = userAlarmObj.AlarmTime;
 80012c8:	4b48      	ldr	r3, [pc, #288]	; (80013ec <hourSetISR+0x15c>)
 80012ca:	1d3a      	adds	r2, r7, #4
 80012cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012ce:	c313      	stmia	r3!, {r0, r1, r4}
 80012d0:	ca03      	ldmia	r2!, {r0, r1}
 80012d2:	c303      	stmia	r3!, {r0, r1}

		if(userAlarmTime.Hours >= 12) {
 80012d4:	4b45      	ldr	r3, [pc, #276]	; (80013ec <hourSetISR+0x15c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b0b      	cmp	r3, #11
 80012da:	d90e      	bls.n	80012fa <hourSetISR+0x6a>
			userAlarmTime.Hours = 1;
 80012dc:	4b43      	ldr	r3, [pc, #268]	; (80013ec <hourSetISR+0x15c>)
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80012e2:	4b42      	ldr	r3, [pc, #264]	; (80013ec <hourSetISR+0x15c>)
 80012e4:	78db      	ldrb	r3, [r3, #3]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d103      	bne.n	80012f2 <hourSetISR+0x62>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80012ea:	4b40      	ldr	r3, [pc, #256]	; (80013ec <hourSetISR+0x15c>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	70da      	strb	r2, [r3, #3]
 80012f0:	e00f      	b.n	8001312 <hourSetISR+0x82>
			} else {
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80012f2:	4b3e      	ldr	r3, [pc, #248]	; (80013ec <hourSetISR+0x15c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	70da      	strb	r2, [r3, #3]
 80012f8:	e00b      	b.n	8001312 <hourSetISR+0x82>
			}
		}
		else if(userAlarmTime.Hours < 12) {
 80012fa:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <hourSetISR+0x15c>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b0b      	cmp	r3, #11
 8001300:	d806      	bhi.n	8001310 <hourSetISR+0x80>
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001302:	4b3a      	ldr	r3, [pc, #232]	; (80013ec <hourSetISR+0x15c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	3301      	adds	r3, #1
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b38      	ldr	r3, [pc, #224]	; (80013ec <hourSetISR+0x15c>)
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	e000      	b.n	8001312 <hourSetISR+0x82>
		}
		else {
			__NOP();
 8001310:	46c0      	nop			; (mov r8, r8)
		}

		userAlarmObj.AlarmTime = userAlarmTime;
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4a35      	ldr	r2, [pc, #212]	; (80013ec <hourSetISR+0x15c>)
 8001316:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001318:	c313      	stmia	r3!, {r0, r1, r4}
 800131a:	ca03      	ldmia	r2!, {r0, r1}
 800131c:	c303      	stmia	r3!, {r0, r1}

		HAL_RTC_SetAlarm(&hrtc, &userAlarmObj, RTC_FORMAT_BCD);
 800131e:	1d39      	adds	r1, r7, #4
 8001320:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <hourSetISR+0x158>)
 8001322:	2201      	movs	r2, #1
 8001324:	0018      	movs	r0, r3
 8001326:	f003 fae7 	bl	80048f8 <HAL_RTC_SetAlarm>

		printf("User alarm hour incremented to %d:%d:%d\n\r", userAlarmObj.AlarmTime.Hours,
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	0019      	movs	r1, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm hour incremented to %d:%d:%d\n\r", userAlarmObj.AlarmTime.Hours,
 8001334:	001a      	movs	r2, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm hour incremented to %d:%d:%d\n\r", userAlarmObj.AlarmTime.Hours,
 800133a:	482d      	ldr	r0, [pc, #180]	; (80013f0 <hourSetISR+0x160>)
 800133c:	f004 fe6c 	bl	8006018 <iprintf>
 8001340:	e049      	b.n	80013d6 <hourSetISR+0x146>

	}
	else {									// Otherwise, change current time hour.

		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8001342:	492c      	ldr	r1, [pc, #176]	; (80013f4 <hourSetISR+0x164>)
 8001344:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <hourSetISR+0x158>)
 8001346:	2201      	movs	r2, #1
 8001348:	0018      	movs	r0, r3
 800134a:	f003 f999 	bl	8004680 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 800134e:	492a      	ldr	r1, [pc, #168]	; (80013f8 <hourSetISR+0x168>)
 8001350:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <hourSetISR+0x158>)
 8001352:	2201      	movs	r2, #1
 8001354:	0018      	movs	r0, r3
 8001356:	f003 fa81 	bl	800485c <HAL_RTC_GetDate>
		if(currTime.Hours >= 12) {
 800135a:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <hourSetISR+0x164>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b0b      	cmp	r3, #11
 8001360:	d90e      	bls.n	8001380 <hourSetISR+0xf0>
			currTime.Hours = 1;
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <hourSetISR+0x164>)
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
			if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001368:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <hourSetISR+0x164>)
 800136a:	78db      	ldrb	r3, [r3, #3]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d103      	bne.n	8001378 <hourSetISR+0xe8>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001370:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <hourSetISR+0x164>)
 8001372:	2201      	movs	r2, #1
 8001374:	70da      	strb	r2, [r3, #3]
 8001376:	e00f      	b.n	8001398 <hourSetISR+0x108>
			} else {
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <hourSetISR+0x164>)
 800137a:	2200      	movs	r2, #0
 800137c:	70da      	strb	r2, [r3, #3]
 800137e:	e00b      	b.n	8001398 <hourSetISR+0x108>
			}
		}
		else if(currTime.Hours < 12) {
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <hourSetISR+0x164>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b0b      	cmp	r3, #11
 8001386:	d806      	bhi.n	8001396 <hourSetISR+0x106>
			currTime.Hours = currTime.Hours + 1;
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <hourSetISR+0x164>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <hourSetISR+0x164>)
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	e000      	b.n	8001398 <hourSetISR+0x108>
		}
		else {
			__NOP();
 8001396:	46c0      	nop			; (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8001398:	4916      	ldr	r1, [pc, #88]	; (80013f4 <hourSetISR+0x164>)
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <hourSetISR+0x158>)
 800139c:	2201      	movs	r2, #1
 800139e:	0018      	movs	r0, r3
 80013a0:	f003 f8c6 	bl	8004530 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80013a4:	f7ff fc14 	bl	8000bd0 <updateAndDisplayTime>

		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 80013a8:	4912      	ldr	r1, [pc, #72]	; (80013f4 <hourSetISR+0x164>)
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <hourSetISR+0x158>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	0018      	movs	r0, r3
 80013b0:	f003 f966 	bl	8004680 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 80013b4:	4910      	ldr	r1, [pc, #64]	; (80013f8 <hourSetISR+0x168>)
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <hourSetISR+0x158>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	0018      	movs	r0, r3
 80013bc:	f003 fa4e 	bl	800485c <HAL_RTC_GetDate>

		printf("Current time hour incremented to %d:%d:%d.\n\r", currTime.Hours,
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <hourSetISR+0x164>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <hourSetISR+0x164>)
 80013c8:	785b      	ldrb	r3, [r3, #1]
		printf("Current time hour incremented to %d:%d:%d.\n\r", currTime.Hours,
 80013ca:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <hourSetISR+0x164>)
 80013ce:	789b      	ldrb	r3, [r3, #2]
		printf("Current time hour incremented to %d:%d:%d.\n\r", currTime.Hours,
 80013d0:	480a      	ldr	r0, [pc, #40]	; (80013fc <hourSetISR+0x16c>)
 80013d2:	f004 fe21 	bl	8006018 <iprintf>
	}

	return halRet;
 80013d6:	232f      	movs	r3, #47	; 0x2f
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	781b      	ldrb	r3, [r3, #0]
}
 80013dc:	0018      	movs	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	b00d      	add	sp, #52	; 0x34
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	08007428 	.word	0x08007428
 80013e8:	20000110 	.word	0x20000110
 80013ec:	20000234 	.word	0x20000234
 80013f0:	08007440 	.word	0x08007440
 80013f4:	2000021c 	.word	0x2000021c
 80013f8:	20000230 	.word	0x20000230
 80013fc:	0800746c 	.word	0x0800746c

08001400 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b08d      	sub	sp, #52	; 0x34
 8001404:	af00      	add	r7, sp, #0

	printf("Entered minute set ISR.\n\r");
 8001406:	4b6e      	ldr	r3, [pc, #440]	; (80015c0 <minuteSetISR+0x1c0>)
 8001408:	0018      	movs	r0, r3
 800140a:	f004 fe05 	bl	8006018 <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 800140e:	232f      	movs	r3, #47	; 0x2f
 8001410:	18fb      	adds	r3, r7, r3
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOA, alarmSetButtonPin) == !GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 8001416:	2210      	movs	r2, #16
 8001418:	23a0      	movs	r3, #160	; 0xa0
 800141a:	05db      	lsls	r3, r3, #23
 800141c:	0011      	movs	r1, r2
 800141e:	0018      	movs	r0, r3
 8001420:	f000 fe98 	bl	8002154 <HAL_GPIO_ReadPin>
 8001424:	1e03      	subs	r3, r0, #0
 8001426:	d15e      	bne.n	80014e6 <minuteSetISR+0xe6>

		RTC_AlarmTypeDef userAlarmObj;
		HAL_RTC_GetAlarm(&hrtc, &userAlarmObj, userAlarm, RTC_FORMAT_BCD);
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	009a      	lsls	r2, r3, #2
 800142c:	1d39      	adds	r1, r7, #4
 800142e:	4865      	ldr	r0, [pc, #404]	; (80015c4 <minuteSetISR+0x1c4>)
 8001430:	2301      	movs	r3, #1
 8001432:	f003 fd67 	bl	8004f04 <HAL_RTC_GetAlarm>
		userAlarmTime = userAlarmObj.AlarmTime;
 8001436:	4b64      	ldr	r3, [pc, #400]	; (80015c8 <minuteSetISR+0x1c8>)
 8001438:	1d3a      	adds	r2, r7, #4
 800143a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800143c:	c313      	stmia	r3!, {r0, r1, r4}
 800143e:	ca03      	ldmia	r2!, {r0, r1}
 8001440:	c303      	stmia	r3!, {r0, r1}

		if(userAlarmTime.Minutes >= 59) {
 8001442:	4b61      	ldr	r3, [pc, #388]	; (80015c8 <minuteSetISR+0x1c8>)
 8001444:	785b      	ldrb	r3, [r3, #1]
 8001446:	2b3a      	cmp	r3, #58	; 0x3a
 8001448:	d929      	bls.n	800149e <minuteSetISR+0x9e>
			userAlarmTime.Minutes = 0;
 800144a:	4b5f      	ldr	r3, [pc, #380]	; (80015c8 <minuteSetISR+0x1c8>)
 800144c:	2200      	movs	r2, #0
 800144e:	705a      	strb	r2, [r3, #1]
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001450:	4b5d      	ldr	r3, [pc, #372]	; (80015c8 <minuteSetISR+0x1c8>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b5b      	ldr	r3, [pc, #364]	; (80015c8 <minuteSetISR+0x1c8>)
 800145a:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.Hours > 12) {
 800145c:	4b5a      	ldr	r3, [pc, #360]	; (80015c8 <minuteSetISR+0x1c8>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b0c      	cmp	r3, #12
 8001462:	d902      	bls.n	800146a <minuteSetISR+0x6a>
				userAlarmTime.Hours = 1;
 8001464:	4b58      	ldr	r3, [pc, #352]	; (80015c8 <minuteSetISR+0x1c8>)
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
			}
			if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800146a:	4b57      	ldr	r3, [pc, #348]	; (80015c8 <minuteSetISR+0x1c8>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b0c      	cmp	r3, #12
 8001470:	d107      	bne.n	8001482 <minuteSetISR+0x82>
 8001472:	4b55      	ldr	r3, [pc, #340]	; (80015c8 <minuteSetISR+0x1c8>)
 8001474:	78db      	ldrb	r3, [r3, #3]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d103      	bne.n	8001482 <minuteSetISR+0x82>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800147a:	4b53      	ldr	r3, [pc, #332]	; (80015c8 <minuteSetISR+0x1c8>)
 800147c:	2201      	movs	r2, #1
 800147e:	70da      	strb	r2, [r3, #3]
 8001480:	e019      	b.n	80014b6 <minuteSetISR+0xb6>
			} else if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 8001482:	4b51      	ldr	r3, [pc, #324]	; (80015c8 <minuteSetISR+0x1c8>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b0c      	cmp	r3, #12
 8001488:	d107      	bne.n	800149a <minuteSetISR+0x9a>
 800148a:	4b4f      	ldr	r3, [pc, #316]	; (80015c8 <minuteSetISR+0x1c8>)
 800148c:	78db      	ldrb	r3, [r3, #3]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d103      	bne.n	800149a <minuteSetISR+0x9a>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001492:	4b4d      	ldr	r3, [pc, #308]	; (80015c8 <minuteSetISR+0x1c8>)
 8001494:	2200      	movs	r2, #0
 8001496:	70da      	strb	r2, [r3, #3]
 8001498:	e00d      	b.n	80014b6 <minuteSetISR+0xb6>
			}
			else {
				__NOP();
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	e00b      	b.n	80014b6 <minuteSetISR+0xb6>
			}
		}
		else if(userAlarmTime.Minutes < 59) {
 800149e:	4b4a      	ldr	r3, [pc, #296]	; (80015c8 <minuteSetISR+0x1c8>)
 80014a0:	785b      	ldrb	r3, [r3, #1]
 80014a2:	2b3a      	cmp	r3, #58	; 0x3a
 80014a4:	d806      	bhi.n	80014b4 <minuteSetISR+0xb4>
			userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 80014a6:	4b48      	ldr	r3, [pc, #288]	; (80015c8 <minuteSetISR+0x1c8>)
 80014a8:	785b      	ldrb	r3, [r3, #1]
 80014aa:	3301      	adds	r3, #1
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4b46      	ldr	r3, [pc, #280]	; (80015c8 <minuteSetISR+0x1c8>)
 80014b0:	705a      	strb	r2, [r3, #1]
 80014b2:	e000      	b.n	80014b6 <minuteSetISR+0xb6>
		}
		else {
			__NOP();
 80014b4:	46c0      	nop			; (mov r8, r8)
		}

		userAlarmObj.AlarmTime = userAlarmTime;
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	4a43      	ldr	r2, [pc, #268]	; (80015c8 <minuteSetISR+0x1c8>)
 80014ba:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014bc:	c313      	stmia	r3!, {r0, r1, r4}
 80014be:	ca03      	ldmia	r2!, {r0, r1}
 80014c0:	c303      	stmia	r3!, {r0, r1}

		HAL_RTC_SetAlarm(&hrtc, &userAlarmObj, RTC_FORMAT_BCD);
 80014c2:	1d39      	adds	r1, r7, #4
 80014c4:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <minuteSetISR+0x1c4>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	0018      	movs	r0, r3
 80014ca:	f003 fa15 	bl	80048f8 <HAL_RTC_SetAlarm>

		printf("User alarm minute incremented to %d:%d:%d\n\r", userAlarmObj.AlarmTime.Hours,
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	0019      	movs	r1, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm minute incremented to %d:%d:%d\n\r", userAlarmObj.AlarmTime.Hours,
 80014d8:	001a      	movs	r2, r3
				userAlarmObj.AlarmTime.Minutes, userAlarmObj.AlarmTime.Seconds);
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm minute incremented to %d:%d:%d\n\r", userAlarmObj.AlarmTime.Hours,
 80014de:	483b      	ldr	r0, [pc, #236]	; (80015cc <minuteSetISR+0x1cc>)
 80014e0:	f004 fd9a 	bl	8006018 <iprintf>
 80014e4:	e064      	b.n	80015b0 <minuteSetISR+0x1b0>

	}
	else {									// Otherwise, change current time hour.

		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 80014e6:	493a      	ldr	r1, [pc, #232]	; (80015d0 <minuteSetISR+0x1d0>)
 80014e8:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <minuteSetISR+0x1c4>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	0018      	movs	r0, r3
 80014ee:	f003 f8c7 	bl	8004680 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 80014f2:	4938      	ldr	r1, [pc, #224]	; (80015d4 <minuteSetISR+0x1d4>)
 80014f4:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <minuteSetISR+0x1c4>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	0018      	movs	r0, r3
 80014fa:	f003 f9af 	bl	800485c <HAL_RTC_GetDate>

		if(currTime.Minutes >= 59) {
 80014fe:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <minuteSetISR+0x1d0>)
 8001500:	785b      	ldrb	r3, [r3, #1]
 8001502:	2b3a      	cmp	r3, #58	; 0x3a
 8001504:	d929      	bls.n	800155a <minuteSetISR+0x15a>
			currTime.Minutes = 0;
 8001506:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <minuteSetISR+0x1d0>)
 8001508:	2200      	movs	r2, #0
 800150a:	705a      	strb	r2, [r3, #1]
			currTime.Hours = currTime.Hours + 1;
 800150c:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <minuteSetISR+0x1d0>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <minuteSetISR+0x1d0>)
 8001516:	701a      	strb	r2, [r3, #0]
			if(currTime.Hours > 12) {
 8001518:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <minuteSetISR+0x1d0>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b0c      	cmp	r3, #12
 800151e:	d902      	bls.n	8001526 <minuteSetISR+0x126>
				currTime.Hours = 1;
 8001520:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <minuteSetISR+0x1d0>)
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
			}
			if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001526:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <minuteSetISR+0x1d0>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b0c      	cmp	r3, #12
 800152c:	d107      	bne.n	800153e <minuteSetISR+0x13e>
 800152e:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <minuteSetISR+0x1d0>)
 8001530:	78db      	ldrb	r3, [r3, #3]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d103      	bne.n	800153e <minuteSetISR+0x13e>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001536:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <minuteSetISR+0x1d0>)
 8001538:	2201      	movs	r2, #1
 800153a:	70da      	strb	r2, [r3, #3]
 800153c:	e019      	b.n	8001572 <minuteSetISR+0x172>
			} else if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 800153e:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <minuteSetISR+0x1d0>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b0c      	cmp	r3, #12
 8001544:	d107      	bne.n	8001556 <minuteSetISR+0x156>
 8001546:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <minuteSetISR+0x1d0>)
 8001548:	78db      	ldrb	r3, [r3, #3]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d103      	bne.n	8001556 <minuteSetISR+0x156>
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800154e:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <minuteSetISR+0x1d0>)
 8001550:	2200      	movs	r2, #0
 8001552:	70da      	strb	r2, [r3, #3]
 8001554:	e00d      	b.n	8001572 <minuteSetISR+0x172>
			}
			else {
				__NOP();
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	e00b      	b.n	8001572 <minuteSetISR+0x172>
			}
		}
		else if(currTime.Minutes < 59) {
 800155a:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <minuteSetISR+0x1d0>)
 800155c:	785b      	ldrb	r3, [r3, #1]
 800155e:	2b3a      	cmp	r3, #58	; 0x3a
 8001560:	d806      	bhi.n	8001570 <minuteSetISR+0x170>
			currTime.Minutes = currTime.Minutes + 1;
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <minuteSetISR+0x1d0>)
 8001564:	785b      	ldrb	r3, [r3, #1]
 8001566:	3301      	adds	r3, #1
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <minuteSetISR+0x1d0>)
 800156c:	705a      	strb	r2, [r3, #1]
 800156e:	e000      	b.n	8001572 <minuteSetISR+0x172>
		}
		else {
			__NOP();
 8001570:	46c0      	nop			; (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8001572:	4917      	ldr	r1, [pc, #92]	; (80015d0 <minuteSetISR+0x1d0>)
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <minuteSetISR+0x1c4>)
 8001576:	2201      	movs	r2, #1
 8001578:	0018      	movs	r0, r3
 800157a:	f002 ffd9 	bl	8004530 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 800157e:	f7ff fb27 	bl	8000bd0 <updateAndDisplayTime>

		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8001582:	4913      	ldr	r1, [pc, #76]	; (80015d0 <minuteSetISR+0x1d0>)
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <minuteSetISR+0x1c4>)
 8001586:	2201      	movs	r2, #1
 8001588:	0018      	movs	r0, r3
 800158a:	f003 f879 	bl	8004680 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 800158e:	4911      	ldr	r1, [pc, #68]	; (80015d4 <minuteSetISR+0x1d4>)
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <minuteSetISR+0x1c4>)
 8001592:	2201      	movs	r2, #1
 8001594:	0018      	movs	r0, r3
 8001596:	f003 f961 	bl	800485c <HAL_RTC_GetDate>

		printf("Current time minute incremented to %d:%d:%d.\n\r", currTime.Hours,
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <minuteSetISR+0x1d0>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <minuteSetISR+0x1d0>)
 80015a2:	785b      	ldrb	r3, [r3, #1]
		printf("Current time minute incremented to %d:%d:%d.\n\r", currTime.Hours,
 80015a4:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <minuteSetISR+0x1d0>)
 80015a8:	789b      	ldrb	r3, [r3, #2]
		printf("Current time minute incremented to %d:%d:%d.\n\r", currTime.Hours,
 80015aa:	480b      	ldr	r0, [pc, #44]	; (80015d8 <minuteSetISR+0x1d8>)
 80015ac:	f004 fd34 	bl	8006018 <iprintf>
	}

	return halRet;
 80015b0:	232f      	movs	r3, #47	; 0x2f
 80015b2:	18fb      	adds	r3, r7, r3
 80015b4:	781b      	ldrb	r3, [r3, #0]
}
 80015b6:	0018      	movs	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b00d      	add	sp, #52	; 0x34
 80015bc:	bd90      	pop	{r4, r7, pc}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	0800749c 	.word	0x0800749c
 80015c4:	20000110 	.word	0x20000110
 80015c8:	20000234 	.word	0x20000234
 80015cc:	080074b8 	.word	0x080074b8
 80015d0:	2000021c 	.word	0x2000021c
 80015d4:	20000230 	.word	0x20000230
 80015d8:	080074e4 	.word	0x080074e4

080015dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i
}
 80015e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <Error_Handler+0x8>
	...

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <HAL_MspInit+0x54>)
 80015f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_MspInit+0x54>)
 80015f4:	2101      	movs	r1, #1
 80015f6:	430a      	orrs	r2, r1
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_MspInit+0x54>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	2201      	movs	r2, #1
 8001600:	4013      	ands	r3, r2
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_MspInit+0x54>)
 8001608:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_MspInit+0x54>)
 800160c:	2180      	movs	r1, #128	; 0x80
 800160e:	0549      	lsls	r1, r1, #21
 8001610:	430a      	orrs	r2, r1
 8001612:	63da      	str	r2, [r3, #60]	; 0x3c
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_MspInit+0x54>)
 8001616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	055b      	lsls	r3, r3, #21
 800161c:	4013      	ands	r3, r2
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	2001      	movs	r0, #1
 8001628:	f000 fb88 	bl	8001d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800162c:	2001      	movs	r0, #1
 800162e:	f000 fb9a 	bl	8001d66 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	46bd      	mov	sp, r7
 8001636:	b002      	add	sp, #8
 8001638:	bd80      	pop	{r7, pc}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	40021000 	.word	0x40021000

08001640 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b095      	sub	sp, #84	; 0x54
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	233c      	movs	r3, #60	; 0x3c
 800164a:	18fb      	adds	r3, r7, r3
 800164c:	0018      	movs	r0, r3
 800164e:	2314      	movs	r3, #20
 8001650:	001a      	movs	r2, r3
 8001652:	2100      	movs	r1, #0
 8001654:	f004 fcd7 	bl	8006006 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001658:	2414      	movs	r4, #20
 800165a:	193b      	adds	r3, r7, r4
 800165c:	0018      	movs	r0, r3
 800165e:	2328      	movs	r3, #40	; 0x28
 8001660:	001a      	movs	r2, r3
 8001662:	2100      	movs	r1, #0
 8001664:	f004 fccf 	bl	8006006 <memset>
  if(hi2c->Instance==I2C1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a26      	ldr	r2, [pc, #152]	; (8001708 <HAL_I2C_MspInit+0xc8>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d146      	bne.n	8001700 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001672:	193b      	adds	r3, r7, r4
 8001674:	2220      	movs	r2, #32
 8001676:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001678:	193b      	adds	r3, r7, r4
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800167e:	193b      	adds	r3, r7, r4
 8001680:	0018      	movs	r0, r3
 8001682:	f002 fd39 	bl	80040f8 <HAL_RCCEx_PeriphCLKConfig>
 8001686:	1e03      	subs	r3, r0, #0
 8001688:	d001      	beq.n	800168e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800168a:	f7ff ffa7 	bl	80015dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	4b1f      	ldr	r3, [pc, #124]	; (800170c <HAL_I2C_MspInit+0xcc>)
 8001690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <HAL_I2C_MspInit+0xcc>)
 8001694:	2102      	movs	r1, #2
 8001696:	430a      	orrs	r2, r1
 8001698:	635a      	str	r2, [r3, #52]	; 0x34
 800169a:	4b1c      	ldr	r3, [pc, #112]	; (800170c <HAL_I2C_MspInit+0xcc>)
 800169c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169e:	2202      	movs	r2, #2
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80016a6:	213c      	movs	r1, #60	; 0x3c
 80016a8:	187b      	adds	r3, r7, r1
 80016aa:	22c0      	movs	r2, #192	; 0xc0
 80016ac:	0092      	lsls	r2, r2, #2
 80016ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	2212      	movs	r2, #18
 80016b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	187b      	adds	r3, r7, r1
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80016c2:	187b      	adds	r3, r7, r1
 80016c4:	2206      	movs	r2, #6
 80016c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	187b      	adds	r3, r7, r1
 80016ca:	4a11      	ldr	r2, [pc, #68]	; (8001710 <HAL_I2C_MspInit+0xd0>)
 80016cc:	0019      	movs	r1, r3
 80016ce:	0010      	movs	r0, r2
 80016d0:	f000 fbdc 	bl	8001e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HAL_I2C_MspInit+0xcc>)
 80016d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_I2C_MspInit+0xcc>)
 80016da:	2180      	movs	r1, #128	; 0x80
 80016dc:	0389      	lsls	r1, r1, #14
 80016de:	430a      	orrs	r2, r1
 80016e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_I2C_MspInit+0xcc>)
 80016e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	039b      	lsls	r3, r3, #14
 80016ea:	4013      	ands	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2100      	movs	r1, #0
 80016f4:	2017      	movs	r0, #23
 80016f6:	f000 fb21 	bl	8001d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80016fa:	2017      	movs	r0, #23
 80016fc:	f000 fb33 	bl	8001d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001700:	46c0      	nop			; (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b015      	add	sp, #84	; 0x54
 8001706:	bd90      	pop	{r4, r7, pc}
 8001708:	40005400 	.word	0x40005400
 800170c:	40021000 	.word	0x40021000
 8001710:	50000400 	.word	0x50000400

08001714 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b08f      	sub	sp, #60	; 0x3c
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800171c:	2410      	movs	r4, #16
 800171e:	193b      	adds	r3, r7, r4
 8001720:	0018      	movs	r0, r3
 8001722:	2328      	movs	r3, #40	; 0x28
 8001724:	001a      	movs	r2, r3
 8001726:	2100      	movs	r1, #0
 8001728:	f004 fc6d 	bl	8006006 <memset>
  if(hrtc->Instance==RTC)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a19      	ldr	r2, [pc, #100]	; (8001798 <HAL_RTC_MspInit+0x84>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d12c      	bne.n	8001790 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001736:	193b      	adds	r3, r7, r4
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	0292      	lsls	r2, r2, #10
 800173c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800173e:	193b      	adds	r3, r7, r4
 8001740:	2280      	movs	r2, #128	; 0x80
 8001742:	0092      	lsls	r2, r2, #2
 8001744:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001746:	193b      	adds	r3, r7, r4
 8001748:	0018      	movs	r0, r3
 800174a:	f002 fcd5 	bl	80040f8 <HAL_RCCEx_PeriphCLKConfig>
 800174e:	1e03      	subs	r3, r0, #0
 8001750:	d001      	beq.n	8001756 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001752:	f7ff ff43 	bl	80015dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_RTC_MspInit+0x88>)
 8001758:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_RTC_MspInit+0x88>)
 800175c:	2180      	movs	r1, #128	; 0x80
 800175e:	0209      	lsls	r1, r1, #8
 8001760:	430a      	orrs	r2, r1
 8001762:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HAL_RTC_MspInit+0x88>)
 8001766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_RTC_MspInit+0x88>)
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	00c9      	lsls	r1, r1, #3
 800176e:	430a      	orrs	r2, r1
 8001770:	63da      	str	r2, [r3, #60]	; 0x3c
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_RTC_MspInit+0x88>)
 8001774:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4013      	ands	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	2100      	movs	r1, #0
 8001784:	2002      	movs	r0, #2
 8001786:	f000 fad9 	bl	8001d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800178a:	2002      	movs	r0, #2
 800178c:	f000 faeb 	bl	8001d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b00f      	add	sp, #60	; 0x3c
 8001796:	bd90      	pop	{r4, r7, pc}
 8001798:	40002800 	.word	0x40002800
 800179c:	40021000 	.word	0x40021000

080017a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <HAL_TIM_Base_MspInit+0x38>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d10d      	bne.n	80017ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_TIM_Base_MspInit+0x3c>)
 80017b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_TIM_Base_MspInit+0x3c>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	0289      	lsls	r1, r1, #10
 80017bc:	430a      	orrs	r2, r1
 80017be:	641a      	str	r2, [r3, #64]	; 0x40
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_TIM_Base_MspInit+0x3c>)
 80017c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	029b      	lsls	r3, r3, #10
 80017c8:	4013      	ands	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b004      	add	sp, #16
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	40014400 	.word	0x40014400
 80017dc:	40021000 	.word	0x40021000

080017e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b08b      	sub	sp, #44	; 0x2c
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	2414      	movs	r4, #20
 80017ea:	193b      	adds	r3, r7, r4
 80017ec:	0018      	movs	r0, r3
 80017ee:	2314      	movs	r3, #20
 80017f0:	001a      	movs	r2, r3
 80017f2:	2100      	movs	r1, #0
 80017f4:	f004 fc07 	bl	8006006 <memset>
  if(huart->Instance==USART2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a1b      	ldr	r2, [pc, #108]	; (800186c <HAL_UART_MspInit+0x8c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d130      	bne.n	8001864 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001802:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <HAL_UART_MspInit+0x90>)
 8001804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_UART_MspInit+0x90>)
 8001808:	2180      	movs	r1, #128	; 0x80
 800180a:	0289      	lsls	r1, r1, #10
 800180c:	430a      	orrs	r2, r1
 800180e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_UART_MspInit+0x90>)
 8001812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	029b      	lsls	r3, r3, #10
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_UART_MspInit+0x90>)
 8001820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_UART_MspInit+0x90>)
 8001824:	2101      	movs	r1, #1
 8001826:	430a      	orrs	r2, r1
 8001828:	635a      	str	r2, [r3, #52]	; 0x34
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_UART_MspInit+0x90>)
 800182c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182e:	2201      	movs	r2, #1
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001836:	0021      	movs	r1, r4
 8001838:	187b      	adds	r3, r7, r1
 800183a:	220c      	movs	r2, #12
 800183c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	187b      	adds	r3, r7, r1
 8001840:	2202      	movs	r2, #2
 8001842:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001844:	187b      	adds	r3, r7, r1
 8001846:	2201      	movs	r2, #1
 8001848:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	187b      	adds	r3, r7, r1
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001850:	187b      	adds	r3, r7, r1
 8001852:	2201      	movs	r2, #1
 8001854:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	187a      	adds	r2, r7, r1
 8001858:	23a0      	movs	r3, #160	; 0xa0
 800185a:	05db      	lsls	r3, r3, #23
 800185c:	0011      	movs	r1, r2
 800185e:	0018      	movs	r0, r3
 8001860:	f000 fb14 	bl	8001e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001864:	46c0      	nop			; (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b00b      	add	sp, #44	; 0x2c
 800186a:	bd90      	pop	{r4, r7, pc}
 800186c:	40004400 	.word	0x40004400
 8001870:	40021000 	.word	0x40021000

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <NMI_Handler+0x4>

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001898:	f000 f988 	bl	8001bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80018a6:	f001 ff2d 	bl	8003704 <HAL_PWREx_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <RTC_TAMP_IRQHandler+0x14>)
 80018b6:	0018      	movs	r0, r3
 80018b8:	f003 fbea 	bl	8005090 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	20000110 	.word	0x20000110

080018c8 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Display_Button_Pin);
 80018cc:	2001      	movs	r0, #1
 80018ce:	f000 fc7b 	bl	80021c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Enable_Button_Pin);
 80018d2:	2002      	movs	r0, #2
 80018d4:	f000 fc78 	bl	80021c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80018d8:	46c0      	nop			; (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_NRST_Pin);
 80018e2:	2004      	movs	r0, #4
 80018e4:	f000 fc70 	bl	80021c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80018e8:	46c0      	nop			; (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alarm_Set_Button_Pin);
 80018f2:	2010      	movs	r0, #16
 80018f4:	f000 fc68 	bl	80021c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Hour_Set_Button_Pin);
 80018f8:	2020      	movs	r0, #32
 80018fa:	f000 fc65 	bl	80021c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Minute_Set_Button_Pin);
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	015b      	lsls	r3, r3, #5
 8001902:	0018      	movs	r0, r3
 8001904:	f000 fc60 	bl	80021c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001908:	46c0      	nop			; (mov r8, r8)
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <I2C1_IRQHandler+0x2c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699a      	ldr	r2, [r3, #24]
 800191a:	23e0      	movs	r3, #224	; 0xe0
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4013      	ands	r3, r2
 8001920:	d004      	beq.n	800192c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <I2C1_IRQHandler+0x2c>)
 8001924:	0018      	movs	r0, r3
 8001926:	f000 fe3b 	bl	80025a0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800192a:	e003      	b.n	8001934 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <I2C1_IRQHandler+0x2c>)
 800192e:	0018      	movs	r0, r3
 8001930:	f000 fe1c 	bl	800256c <HAL_I2C_EV_IRQHandler>
}
 8001934:	46c0      	nop			; (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	200000bc 	.word	0x200000bc

08001940 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	e00a      	b.n	8001968 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001952:	e000      	b.n	8001956 <_read+0x16>
 8001954:	bf00      	nop
 8001956:	0001      	movs	r1, r0
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	b2ca      	uxtb	r2, r1
 8001960:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	429a      	cmp	r2, r3
 800196e:	dbf0      	blt.n	8001952 <_read+0x12>
  }

  return len;
 8001970:	687b      	ldr	r3, [r7, #4]
}
 8001972:	0018      	movs	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	b006      	add	sp, #24
 8001978:	bd80      	pop	{r7, pc}

0800197a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	e009      	b.n	80019a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	60ba      	str	r2, [r7, #8]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	0018      	movs	r0, r3
 8001996:	f7fe fd61 	bl	800045c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbf1      	blt.n	800198c <_write+0x12>
  }
  return len;
 80019a8:	687b      	ldr	r3, [r7, #4]
}
 80019aa:	0018      	movs	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b006      	add	sp, #24
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_close>:

int _close(int file)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ba:	2301      	movs	r3, #1
 80019bc:	425b      	negs	r3, r3
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	2280      	movs	r2, #128	; 0x80
 80019d4:	0192      	lsls	r2, r2, #6
 80019d6:	605a      	str	r2, [r3, #4]
  return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	b002      	add	sp, #8
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <_isatty>:

int _isatty(int file)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b002      	add	sp, #8
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	0018      	movs	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b004      	add	sp, #16
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a14:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <_sbrk+0x5c>)
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <_sbrk+0x60>)
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d102      	bne.n	8001a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <_sbrk+0x64>)
 8001a2a:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <_sbrk+0x68>)
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	18d3      	adds	r3, r2, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d207      	bcs.n	8001a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a3c:	f004 fab0 	bl	8005fa0 <__errno>
 8001a40:	0003      	movs	r3, r0
 8001a42:	220c      	movs	r2, #12
 8001a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a46:	2301      	movs	r3, #1
 8001a48:	425b      	negs	r3, r3
 8001a4a:	e009      	b.n	8001a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	18d2      	adds	r2, r2, r3
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <_sbrk+0x64>)
 8001a5c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
}
 8001a60:	0018      	movs	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b006      	add	sp, #24
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20002000 	.word	0x20002000
 8001a6c:	00000400 	.word	0x00000400
 8001a70:	2000024c 	.word	0x2000024c
 8001a74:	20000268 	.word	0x20000268

08001a78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a84:	480d      	ldr	r0, [pc, #52]	; (8001abc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a86:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a88:	f7ff fff6 	bl	8001a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a8c:	480c      	ldr	r0, [pc, #48]	; (8001ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a8e:	490d      	ldr	r1, [pc, #52]	; (8001ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a90:	4a0d      	ldr	r2, [pc, #52]	; (8001ac8 <LoopForever+0xe>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a94:	e002      	b.n	8001a9c <LoopCopyDataInit>

08001a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9a:	3304      	adds	r3, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa0:	d3f9      	bcc.n	8001a96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aa4:	4c0a      	ldr	r4, [pc, #40]	; (8001ad0 <LoopForever+0x16>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa8:	e001      	b.n	8001aae <LoopFillZerobss>

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aac:	3204      	adds	r2, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ab2:	f004 fa7b 	bl	8005fac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001ab6:	f7fe fce3 	bl	8000480 <main>

08001aba <LoopForever>:

LoopForever:
  b LoopForever
 8001aba:	e7fe      	b.n	8001aba <LoopForever>
  ldr   r0, =_estack
 8001abc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001ac8:	08007638 	.word	0x08007638
  ldr r2, =_sbss
 8001acc:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001ad0:	20000264 	.word	0x20000264

08001ad4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC1_IRQHandler>
	...

08001ad8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ade:	1dfb      	adds	r3, r7, #7
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_Init+0x3c>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_Init+0x3c>)
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	0049      	lsls	r1, r1, #1
 8001aee:	430a      	orrs	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001af2:	2000      	movs	r0, #0
 8001af4:	f000 f810 	bl	8001b18 <HAL_InitTick>
 8001af8:	1e03      	subs	r3, r0, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001afc:	1dfb      	adds	r3, r7, #7
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	e001      	b.n	8001b08 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001b04:	f7ff fd70 	bl	80015e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b08:	1dfb      	adds	r3, r7, #7
 8001b0a:	781b      	ldrb	r3, [r3, #0]
}
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40022000 	.word	0x40022000

08001b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b20:	230f      	movs	r3, #15
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001b28:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <HAL_InitTick+0x88>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d02b      	beq.n	8001b88 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <HAL_InitTick+0x8c>)
 8001b32:	681c      	ldr	r4, [r3, #0]
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_InitTick+0x88>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	0019      	movs	r1, r3
 8001b3a:	23fa      	movs	r3, #250	; 0xfa
 8001b3c:	0098      	lsls	r0, r3, #2
 8001b3e:	f7fe faeb 	bl	8000118 <__udivsi3>
 8001b42:	0003      	movs	r3, r0
 8001b44:	0019      	movs	r1, r3
 8001b46:	0020      	movs	r0, r4
 8001b48:	f7fe fae6 	bl	8000118 <__udivsi3>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f000 f919 	bl	8001d86 <HAL_SYSTICK_Config>
 8001b54:	1e03      	subs	r3, r0, #0
 8001b56:	d112      	bne.n	8001b7e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d80a      	bhi.n	8001b74 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	2301      	movs	r3, #1
 8001b62:	425b      	negs	r3, r3
 8001b64:	2200      	movs	r2, #0
 8001b66:	0018      	movs	r0, r3
 8001b68:	f000 f8e8 	bl	8001d3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_InitTick+0x90>)
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e00d      	b.n	8001b90 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001b74:	230f      	movs	r3, #15
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	2201      	movs	r2, #1
 8001b7a:	701a      	strb	r2, [r3, #0]
 8001b7c:	e008      	b.n	8001b90 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b7e:	230f      	movs	r3, #15
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
 8001b86:	e003      	b.n	8001b90 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b88:	230f      	movs	r3, #15
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001b90:	230f      	movs	r3, #15
 8001b92:	18fb      	adds	r3, r7, r3
 8001b94:	781b      	ldrb	r3, [r3, #0]
}
 8001b96:	0018      	movs	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b005      	add	sp, #20
 8001b9c:	bd90      	pop	{r4, r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	20000038 	.word	0x20000038
 8001ba4:	20000030 	.word	0x20000030
 8001ba8:	20000034 	.word	0x20000034

08001bac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_IncTick+0x1c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_IncTick+0x20>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	18d2      	adds	r2, r2, r3
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <HAL_IncTick+0x20>)
 8001bbe:	601a      	str	r2, [r3, #0]
}
 8001bc0:	46c0      	nop			; (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	20000038 	.word	0x20000038
 8001bcc:	20000250 	.word	0x20000250

08001bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd4:	4b02      	ldr	r3, [pc, #8]	; (8001be0 <HAL_GetTick+0x10>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	20000250 	.word	0x20000250

08001be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	0002      	movs	r2, r0
 8001bec:	1dfb      	adds	r3, r7, #7
 8001bee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bf0:	1dfb      	adds	r3, r7, #7
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8001bf6:	d809      	bhi.n	8001c0c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf8:	1dfb      	adds	r3, r7, #7
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	001a      	movs	r2, r3
 8001bfe:	231f      	movs	r3, #31
 8001c00:	401a      	ands	r2, r3
 8001c02:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <__NVIC_EnableIRQ+0x30>)
 8001c04:	2101      	movs	r1, #1
 8001c06:	4091      	lsls	r1, r2
 8001c08:	000a      	movs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001c0c:	46c0      	nop			; (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b002      	add	sp, #8
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	e000e100 	.word	0xe000e100

08001c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	0002      	movs	r2, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	1dfb      	adds	r3, r7, #7
 8001c24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c26:	1dfb      	adds	r3, r7, #7
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8001c2c:	d828      	bhi.n	8001c80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c2e:	4a2f      	ldr	r2, [pc, #188]	; (8001cec <__NVIC_SetPriority+0xd4>)
 8001c30:	1dfb      	adds	r3, r7, #7
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	33c0      	adds	r3, #192	; 0xc0
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	589b      	ldr	r3, [r3, r2]
 8001c3e:	1dfa      	adds	r2, r7, #7
 8001c40:	7812      	ldrb	r2, [r2, #0]
 8001c42:	0011      	movs	r1, r2
 8001c44:	2203      	movs	r2, #3
 8001c46:	400a      	ands	r2, r1
 8001c48:	00d2      	lsls	r2, r2, #3
 8001c4a:	21ff      	movs	r1, #255	; 0xff
 8001c4c:	4091      	lsls	r1, r2
 8001c4e:	000a      	movs	r2, r1
 8001c50:	43d2      	mvns	r2, r2
 8001c52:	401a      	ands	r2, r3
 8001c54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	019b      	lsls	r3, r3, #6
 8001c5a:	22ff      	movs	r2, #255	; 0xff
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	1dfb      	adds	r3, r7, #7
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	0018      	movs	r0, r3
 8001c64:	2303      	movs	r3, #3
 8001c66:	4003      	ands	r3, r0
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c6c:	481f      	ldr	r0, [pc, #124]	; (8001cec <__NVIC_SetPriority+0xd4>)
 8001c6e:	1dfb      	adds	r3, r7, #7
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	b25b      	sxtb	r3, r3
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	430a      	orrs	r2, r1
 8001c78:	33c0      	adds	r3, #192	; 0xc0
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c7e:	e031      	b.n	8001ce4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c80:	4a1b      	ldr	r2, [pc, #108]	; (8001cf0 <__NVIC_SetPriority+0xd8>)
 8001c82:	1dfb      	adds	r3, r7, #7
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	0019      	movs	r1, r3
 8001c88:	230f      	movs	r3, #15
 8001c8a:	400b      	ands	r3, r1
 8001c8c:	3b08      	subs	r3, #8
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3306      	adds	r3, #6
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	18d3      	adds	r3, r2, r3
 8001c96:	3304      	adds	r3, #4
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	1dfa      	adds	r2, r7, #7
 8001c9c:	7812      	ldrb	r2, [r2, #0]
 8001c9e:	0011      	movs	r1, r2
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	400a      	ands	r2, r1
 8001ca4:	00d2      	lsls	r2, r2, #3
 8001ca6:	21ff      	movs	r1, #255	; 0xff
 8001ca8:	4091      	lsls	r1, r2
 8001caa:	000a      	movs	r2, r1
 8001cac:	43d2      	mvns	r2, r2
 8001cae:	401a      	ands	r2, r3
 8001cb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	019b      	lsls	r3, r3, #6
 8001cb6:	22ff      	movs	r2, #255	; 0xff
 8001cb8:	401a      	ands	r2, r3
 8001cba:	1dfb      	adds	r3, r7, #7
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	4003      	ands	r3, r0
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cc8:	4809      	ldr	r0, [pc, #36]	; (8001cf0 <__NVIC_SetPriority+0xd8>)
 8001cca:	1dfb      	adds	r3, r7, #7
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	001c      	movs	r4, r3
 8001cd0:	230f      	movs	r3, #15
 8001cd2:	4023      	ands	r3, r4
 8001cd4:	3b08      	subs	r3, #8
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	3306      	adds	r3, #6
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	18c3      	adds	r3, r0, r3
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	601a      	str	r2, [r3, #0]
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b003      	add	sp, #12
 8001cea:	bd90      	pop	{r4, r7, pc}
 8001cec:	e000e100 	.word	0xe000e100
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	1e5a      	subs	r2, r3, #1
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	045b      	lsls	r3, r3, #17
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d301      	bcc.n	8001d0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e010      	b.n	8001d2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <SysTick_Config+0x44>)
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	3a01      	subs	r2, #1
 8001d12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d14:	2301      	movs	r3, #1
 8001d16:	425b      	negs	r3, r3
 8001d18:	2103      	movs	r1, #3
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f7ff ff7c 	bl	8001c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <SysTick_Config+0x44>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <SysTick_Config+0x44>)
 8001d28:	2207      	movs	r2, #7
 8001d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	0018      	movs	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b002      	add	sp, #8
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	e000e010 	.word	0xe000e010

08001d3c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	210f      	movs	r1, #15
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	1c02      	adds	r2, r0, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b25b      	sxtb	r3, r3
 8001d56:	0011      	movs	r1, r2
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f7ff ff5d 	bl	8001c18 <__NVIC_SetPriority>
}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b004      	add	sp, #16
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	1dfb      	adds	r3, r7, #7
 8001d70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d72:	1dfb      	adds	r3, r7, #7
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	b25b      	sxtb	r3, r3
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f7ff ff33 	bl	8001be4 <__NVIC_EnableIRQ>
}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b002      	add	sp, #8
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	0018      	movs	r0, r3
 8001d92:	f7ff ffaf 	bl	8001cf4 <SysTick_Config>
 8001d96:	0003      	movs	r3, r0
}
 8001d98:	0018      	movs	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b002      	add	sp, #8
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da8:	210f      	movs	r1, #15
 8001daa:	187b      	adds	r3, r7, r1
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2225      	movs	r2, #37	; 0x25
 8001db4:	5c9b      	ldrb	r3, [r3, r2]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d006      	beq.n	8001dca <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	e049      	b.n	8001e5e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	210e      	movs	r1, #14
 8001dd6:	438a      	bics	r2, r1
 8001dd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2101      	movs	r1, #1
 8001de6:	438a      	bics	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df4:	491d      	ldr	r1, [pc, #116]	; (8001e6c <HAL_DMA_Abort_IT+0xcc>)
 8001df6:	400a      	ands	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <HAL_DMA_Abort_IT+0xd0>)
 8001dfc:	6859      	ldr	r1, [r3, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	221c      	movs	r2, #28
 8001e04:	4013      	ands	r3, r2
 8001e06:	2201      	movs	r2, #1
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_DMA_Abort_IT+0xd0>)
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e18:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00c      	beq.n	8001e3c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2c:	490f      	ldr	r1, [pc, #60]	; (8001e6c <HAL_DMA_Abort_IT+0xcc>)
 8001e2e:	400a      	ands	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001e3a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2225      	movs	r2, #37	; 0x25
 8001e40:	2101      	movs	r1, #1
 8001e42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2224      	movs	r2, #36	; 0x24
 8001e48:	2100      	movs	r1, #0
 8001e4a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d004      	beq.n	8001e5e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	0010      	movs	r0, r2
 8001e5c:	4798      	blx	r3
    }
  }
  return status;
 8001e5e:	230f      	movs	r3, #15
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	781b      	ldrb	r3, [r3, #0]
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b004      	add	sp, #16
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	fffffeff 	.word	0xfffffeff
 8001e70:	40020000 	.word	0x40020000

08001e74 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2225      	movs	r2, #37	; 0x25
 8001e80:	5c9b      	ldrb	r3, [r3, r2]
 8001e82:	b2db      	uxtb	r3, r3
}
 8001e84:	0018      	movs	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b002      	add	sp, #8
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9a:	e147      	b.n	800212c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4091      	lsls	r1, r2
 8001ea6:	000a      	movs	r2, r1
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d100      	bne.n	8001eb4 <HAL_GPIO_Init+0x28>
 8001eb2:	e138      	b.n	8002126 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2203      	movs	r2, #3
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d005      	beq.n	8001ecc <HAL_GPIO_Init+0x40>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d130      	bne.n	8001f2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	0013      	movs	r3, r2
 8001edc:	43da      	mvns	r2, r3
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	409a      	lsls	r2, r3
 8001eee:	0013      	movs	r3, r2
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f02:	2201      	movs	r2, #1
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	409a      	lsls	r2, r3
 8001f08:	0013      	movs	r3, r2
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	2201      	movs	r2, #1
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	0013      	movs	r3, r2
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2203      	movs	r2, #3
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d017      	beq.n	8001f6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	2203      	movs	r2, #3
 8001f46:	409a      	lsls	r2, r3
 8001f48:	0013      	movs	r3, r2
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	0013      	movs	r3, r2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2203      	movs	r2, #3
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d123      	bne.n	8001fbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	08da      	lsrs	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3208      	adds	r2, #8
 8001f7e:	0092      	lsls	r2, r2, #2
 8001f80:	58d3      	ldr	r3, [r2, r3]
 8001f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2207      	movs	r2, #7
 8001f88:	4013      	ands	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	0013      	movs	r3, r2
 8001f92:	43da      	mvns	r2, r3
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2107      	movs	r1, #7
 8001fa2:	400b      	ands	r3, r1
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	0013      	movs	r3, r2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	08da      	lsrs	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3208      	adds	r2, #8
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	6939      	ldr	r1, [r7, #16]
 8001fbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	2203      	movs	r2, #3
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	0013      	movs	r3, r2
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2203      	movs	r2, #3
 8001fdc:	401a      	ands	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	0013      	movs	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	23c0      	movs	r3, #192	; 0xc0
 8001ff8:	029b      	lsls	r3, r3, #10
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d100      	bne.n	8002000 <HAL_GPIO_Init+0x174>
 8001ffe:	e092      	b.n	8002126 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002000:	4a50      	ldr	r2, [pc, #320]	; (8002144 <HAL_GPIO_Init+0x2b8>)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	3318      	adds	r3, #24
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	589b      	ldr	r3, [r3, r2]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2203      	movs	r2, #3
 8002012:	4013      	ands	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	220f      	movs	r2, #15
 8002018:	409a      	lsls	r2, r3
 800201a:	0013      	movs	r3, r2
 800201c:	43da      	mvns	r2, r3
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	23a0      	movs	r3, #160	; 0xa0
 8002028:	05db      	lsls	r3, r3, #23
 800202a:	429a      	cmp	r2, r3
 800202c:	d013      	beq.n	8002056 <HAL_GPIO_Init+0x1ca>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a45      	ldr	r2, [pc, #276]	; (8002148 <HAL_GPIO_Init+0x2bc>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00d      	beq.n	8002052 <HAL_GPIO_Init+0x1c6>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a44      	ldr	r2, [pc, #272]	; (800214c <HAL_GPIO_Init+0x2c0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <HAL_GPIO_Init+0x1c2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a43      	ldr	r2, [pc, #268]	; (8002150 <HAL_GPIO_Init+0x2c4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d101      	bne.n	800204a <HAL_GPIO_Init+0x1be>
 8002046:	2303      	movs	r3, #3
 8002048:	e006      	b.n	8002058 <HAL_GPIO_Init+0x1cc>
 800204a:	2305      	movs	r3, #5
 800204c:	e004      	b.n	8002058 <HAL_GPIO_Init+0x1cc>
 800204e:	2302      	movs	r3, #2
 8002050:	e002      	b.n	8002058 <HAL_GPIO_Init+0x1cc>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_GPIO_Init+0x1cc>
 8002056:	2300      	movs	r3, #0
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	2103      	movs	r1, #3
 800205c:	400a      	ands	r2, r1
 800205e:	00d2      	lsls	r2, r2, #3
 8002060:	4093      	lsls	r3, r2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002068:	4936      	ldr	r1, [pc, #216]	; (8002144 <HAL_GPIO_Init+0x2b8>)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	3318      	adds	r3, #24
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002076:	4b33      	ldr	r3, [pc, #204]	; (8002144 <HAL_GPIO_Init+0x2b8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	43da      	mvns	r2, r3
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4013      	ands	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	2380      	movs	r3, #128	; 0x80
 800208c:	035b      	lsls	r3, r3, #13
 800208e:	4013      	ands	r3, r2
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800209a:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <HAL_GPIO_Init+0x2b8>)
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80020a0:	4b28      	ldr	r3, [pc, #160]	; (8002144 <HAL_GPIO_Init+0x2b8>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	43da      	mvns	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	039b      	lsls	r3, r3, #14
 80020b8:	4013      	ands	r3, r2
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <HAL_GPIO_Init+0x2b8>)
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020ca:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <HAL_GPIO_Init+0x2b8>)
 80020cc:	2384      	movs	r3, #132	; 0x84
 80020ce:	58d3      	ldr	r3, [r2, r3]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	43da      	mvns	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	029b      	lsls	r3, r3, #10
 80020e4:	4013      	ands	r3, r2
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020f0:	4914      	ldr	r1, [pc, #80]	; (8002144 <HAL_GPIO_Init+0x2b8>)
 80020f2:	2284      	movs	r2, #132	; 0x84
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80020f8:	4a12      	ldr	r2, [pc, #72]	; (8002144 <HAL_GPIO_Init+0x2b8>)
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	58d3      	ldr	r3, [r2, r3]
 80020fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	43da      	mvns	r2, r3
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	025b      	lsls	r3, r3, #9
 8002112:	4013      	ands	r3, r2
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800211e:	4909      	ldr	r1, [pc, #36]	; (8002144 <HAL_GPIO_Init+0x2b8>)
 8002120:	2280      	movs	r2, #128	; 0x80
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	3301      	adds	r3, #1
 800212a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	40da      	lsrs	r2, r3
 8002134:	1e13      	subs	r3, r2, #0
 8002136:	d000      	beq.n	800213a <HAL_GPIO_Init+0x2ae>
 8002138:	e6b0      	b.n	8001e9c <HAL_GPIO_Init+0x10>
  }
}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b006      	add	sp, #24
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021800 	.word	0x40021800
 8002148:	50000400 	.word	0x50000400
 800214c:	50000800 	.word	0x50000800
 8002150:	50000c00 	.word	0x50000c00

08002154 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	000a      	movs	r2, r1
 800215e:	1cbb      	adds	r3, r7, #2
 8002160:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	1cba      	adds	r2, r7, #2
 8002168:	8812      	ldrh	r2, [r2, #0]
 800216a:	4013      	ands	r3, r2
 800216c:	d004      	beq.n	8002178 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800216e:	230f      	movs	r3, #15
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	e003      	b.n	8002180 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002178:	230f      	movs	r3, #15
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002180:	230f      	movs	r3, #15
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	781b      	ldrb	r3, [r3, #0]
}
 8002186:	0018      	movs	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	b004      	add	sp, #16
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	0008      	movs	r0, r1
 8002198:	0011      	movs	r1, r2
 800219a:	1cbb      	adds	r3, r7, #2
 800219c:	1c02      	adds	r2, r0, #0
 800219e:	801a      	strh	r2, [r3, #0]
 80021a0:	1c7b      	adds	r3, r7, #1
 80021a2:	1c0a      	adds	r2, r1, #0
 80021a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021a6:	1c7b      	adds	r3, r7, #1
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d004      	beq.n	80021b8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ae:	1cbb      	adds	r3, r7, #2
 80021b0:	881a      	ldrh	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021b6:	e003      	b.n	80021c0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021b8:	1cbb      	adds	r3, r7, #2
 80021ba:	881a      	ldrh	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b002      	add	sp, #8
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	0002      	movs	r2, r0
 80021d0:	1dbb      	adds	r3, r7, #6
 80021d2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80021d4:	4b10      	ldr	r3, [pc, #64]	; (8002218 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	1dba      	adds	r2, r7, #6
 80021da:	8812      	ldrh	r2, [r2, #0]
 80021dc:	4013      	ands	r3, r2
 80021de:	d008      	beq.n	80021f2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80021e0:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021e2:	1dba      	adds	r2, r7, #6
 80021e4:	8812      	ldrh	r2, [r2, #0]
 80021e6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80021e8:	1dbb      	adds	r3, r7, #6
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	0018      	movs	r0, r3
 80021ee:	f000 f815 	bl	800221c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	1dba      	adds	r2, r7, #6
 80021f8:	8812      	ldrh	r2, [r2, #0]
 80021fa:	4013      	ands	r3, r2
 80021fc:	d008      	beq.n	8002210 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002200:	1dba      	adds	r2, r7, #6
 8002202:	8812      	ldrh	r2, [r2, #0]
 8002204:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002206:	1dbb      	adds	r3, r7, #6
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	0018      	movs	r0, r3
 800220c:	f7fe fe6e 	bl	8000eec <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	b002      	add	sp, #8
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021800 	.word	0x40021800

0800221c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	0002      	movs	r2, r0
 8002224:	1dbb      	adds	r3, r7, #6
 8002226:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002228:	46c0      	nop			; (mov r8, r8)
 800222a:	46bd      	mov	sp, r7
 800222c:	b002      	add	sp, #8
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e082      	b.n	8002348 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2241      	movs	r2, #65	; 0x41
 8002246:	5c9b      	ldrb	r3, [r3, r2]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d107      	bne.n	800225e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2240      	movs	r2, #64	; 0x40
 8002252:	2100      	movs	r1, #0
 8002254:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	0018      	movs	r0, r3
 800225a:	f7ff f9f1 	bl	8001640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2241      	movs	r2, #65	; 0x41
 8002262:	2124      	movs	r1, #36	; 0x24
 8002264:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2101      	movs	r1, #1
 8002272:	438a      	bics	r2, r1
 8002274:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4934      	ldr	r1, [pc, #208]	; (8002350 <HAL_I2C_Init+0x120>)
 8002280:	400a      	ands	r2, r1
 8002282:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4931      	ldr	r1, [pc, #196]	; (8002354 <HAL_I2C_Init+0x124>)
 8002290:	400a      	ands	r2, r1
 8002292:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d108      	bne.n	80022ae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2180      	movs	r1, #128	; 0x80
 80022a6:	0209      	lsls	r1, r1, #8
 80022a8:	430a      	orrs	r2, r1
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	e007      	b.n	80022be <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2184      	movs	r1, #132	; 0x84
 80022b8:	0209      	lsls	r1, r1, #8
 80022ba:	430a      	orrs	r2, r1
 80022bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d104      	bne.n	80022d0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2280      	movs	r2, #128	; 0x80
 80022cc:	0112      	lsls	r2, r2, #4
 80022ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	491f      	ldr	r1, [pc, #124]	; (8002358 <HAL_I2C_Init+0x128>)
 80022dc:	430a      	orrs	r2, r1
 80022de:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	491a      	ldr	r1, [pc, #104]	; (8002354 <HAL_I2C_Init+0x124>)
 80022ec:	400a      	ands	r2, r1
 80022ee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	431a      	orrs	r2, r3
 80022fa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69d9      	ldr	r1, [r3, #28]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1a      	ldr	r2, [r3, #32]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2101      	movs	r1, #1
 8002326:	430a      	orrs	r2, r1
 8002328:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2241      	movs	r2, #65	; 0x41
 8002334:	2120      	movs	r1, #32
 8002336:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2242      	movs	r2, #66	; 0x42
 8002342:	2100      	movs	r1, #0
 8002344:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}
 8002350:	f0ffffff 	.word	0xf0ffffff
 8002354:	ffff7fff 	.word	0xffff7fff
 8002358:	02008000 	.word	0x02008000

0800235c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	0008      	movs	r0, r1
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	0019      	movs	r1, r3
 800236a:	230a      	movs	r3, #10
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	1c02      	adds	r2, r0, #0
 8002370:	801a      	strh	r2, [r3, #0]
 8002372:	2308      	movs	r3, #8
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	1c0a      	adds	r2, r1, #0
 8002378:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2241      	movs	r2, #65	; 0x41
 800237e:	5c9b      	ldrb	r3, [r3, r2]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b20      	cmp	r3, #32
 8002384:	d000      	beq.n	8002388 <HAL_I2C_Master_Transmit+0x2c>
 8002386:	e0e7      	b.n	8002558 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2240      	movs	r2, #64	; 0x40
 800238c:	5c9b      	ldrb	r3, [r3, r2]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_I2C_Master_Transmit+0x3a>
 8002392:	2302      	movs	r3, #2
 8002394:	e0e1      	b.n	800255a <HAL_I2C_Master_Transmit+0x1fe>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2240      	movs	r2, #64	; 0x40
 800239a:	2101      	movs	r1, #1
 800239c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800239e:	f7ff fc17 	bl	8001bd0 <HAL_GetTick>
 80023a2:	0003      	movs	r3, r0
 80023a4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	0219      	lsls	r1, r3, #8
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2319      	movs	r3, #25
 80023b2:	2201      	movs	r2, #1
 80023b4:	f000 fe76 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 80023b8:	1e03      	subs	r3, r0, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0cc      	b.n	800255a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2241      	movs	r2, #65	; 0x41
 80023c4:	2121      	movs	r1, #33	; 0x21
 80023c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2242      	movs	r2, #66	; 0x42
 80023cc:	2110      	movs	r1, #16
 80023ce:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2208      	movs	r2, #8
 80023e0:	18ba      	adds	r2, r7, r2
 80023e2:	8812      	ldrh	r2, [r2, #0]
 80023e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2bff      	cmp	r3, #255	; 0xff
 80023f4:	d911      	bls.n	800241a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	22ff      	movs	r2, #255	; 0xff
 80023fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002400:	b2da      	uxtb	r2, r3
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	045c      	lsls	r4, r3, #17
 8002406:	230a      	movs	r3, #10
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	8819      	ldrh	r1, [r3, #0]
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	4b55      	ldr	r3, [pc, #340]	; (8002564 <HAL_I2C_Master_Transmit+0x208>)
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	0023      	movs	r3, r4
 8002414:	f001 f800 	bl	8003418 <I2C_TransferConfig>
 8002418:	e075      	b.n	8002506 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002428:	b2da      	uxtb	r2, r3
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	049c      	lsls	r4, r3, #18
 800242e:	230a      	movs	r3, #10
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	8819      	ldrh	r1, [r3, #0]
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	4b4b      	ldr	r3, [pc, #300]	; (8002564 <HAL_I2C_Master_Transmit+0x208>)
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	0023      	movs	r3, r4
 800243c:	f000 ffec 	bl	8003418 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002440:	e061      	b.n	8002506 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	0018      	movs	r0, r3
 800244a:	f000 fe6a 	bl	8003122 <I2C_WaitOnTXISFlagUntilTimeout>
 800244e:	1e03      	subs	r3, r0, #0
 8002450:	d001      	beq.n	8002456 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e081      	b.n	800255a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	781a      	ldrb	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d03a      	beq.n	8002506 <HAL_I2C_Master_Transmit+0x1aa>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002494:	2b00      	cmp	r3, #0
 8002496:	d136      	bne.n	8002506 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	0013      	movs	r3, r2
 80024a2:	2200      	movs	r2, #0
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	f000 fdfd 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 80024aa:	1e03      	subs	r3, r0, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e053      	b.n	800255a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2bff      	cmp	r3, #255	; 0xff
 80024ba:	d911      	bls.n	80024e0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	22ff      	movs	r2, #255	; 0xff
 80024c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	045c      	lsls	r4, r3, #17
 80024cc:	230a      	movs	r3, #10
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	8819      	ldrh	r1, [r3, #0]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	2300      	movs	r3, #0
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	0023      	movs	r3, r4
 80024da:	f000 ff9d 	bl	8003418 <I2C_TransferConfig>
 80024de:	e012      	b.n	8002506 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	049c      	lsls	r4, r3, #18
 80024f4:	230a      	movs	r3, #10
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	8819      	ldrh	r1, [r3, #0]
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	2300      	movs	r3, #0
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	0023      	movs	r3, r4
 8002502:	f000 ff89 	bl	8003418 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d198      	bne.n	8002442 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	0018      	movs	r0, r3
 8002518:	f000 fe42 	bl	80031a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800251c:	1e03      	subs	r3, r0, #0
 800251e:	d001      	beq.n	8002524 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e01a      	b.n	800255a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2220      	movs	r2, #32
 800252a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	490c      	ldr	r1, [pc, #48]	; (8002568 <HAL_I2C_Master_Transmit+0x20c>)
 8002538:	400a      	ands	r2, r1
 800253a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2241      	movs	r2, #65	; 0x41
 8002540:	2120      	movs	r1, #32
 8002542:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2242      	movs	r2, #66	; 0x42
 8002548:	2100      	movs	r1, #0
 800254a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2240      	movs	r2, #64	; 0x40
 8002550:	2100      	movs	r1, #0
 8002552:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	e000      	b.n	800255a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002558:	2302      	movs	r3, #2
  }
}
 800255a:	0018      	movs	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	b007      	add	sp, #28
 8002560:	bd90      	pop	{r4, r7, pc}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	80002000 	.word	0x80002000
 8002568:	fe00e800 	.word	0xfe00e800

0800256c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	68f9      	ldr	r1, [r7, #12]
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4798      	blx	r3
  }
}
 8002598:	46c0      	nop			; (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b004      	add	sp, #16
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	001a      	movs	r2, r3
 80025be:	2301      	movs	r3, #1
 80025c0:	4013      	ands	r3, r2
 80025c2:	d010      	beq.n	80025e6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	09db      	lsrs	r3, r3, #7
 80025c8:	001a      	movs	r2, r3
 80025ca:	2301      	movs	r3, #1
 80025cc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80025ce:	d00a      	beq.n	80025e6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	2201      	movs	r2, #1
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2280      	movs	r2, #128	; 0x80
 80025e2:	0052      	lsls	r2, r2, #1
 80025e4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	0a9b      	lsrs	r3, r3, #10
 80025ea:	001a      	movs	r2, r3
 80025ec:	2301      	movs	r3, #1
 80025ee:	4013      	ands	r3, r2
 80025f0:	d010      	beq.n	8002614 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	09db      	lsrs	r3, r3, #7
 80025f6:	001a      	movs	r2, r3
 80025f8:	2301      	movs	r3, #1
 80025fa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80025fc:	d00a      	beq.n	8002614 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	2208      	movs	r2, #8
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2280      	movs	r2, #128	; 0x80
 8002610:	00d2      	lsls	r2, r2, #3
 8002612:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	0a5b      	lsrs	r3, r3, #9
 8002618:	001a      	movs	r2, r3
 800261a:	2301      	movs	r3, #1
 800261c:	4013      	ands	r3, r2
 800261e:	d010      	beq.n	8002642 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	09db      	lsrs	r3, r3, #7
 8002624:	001a      	movs	r2, r3
 8002626:	2301      	movs	r3, #1
 8002628:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800262a:	d00a      	beq.n	8002642 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	2202      	movs	r2, #2
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2280      	movs	r2, #128	; 0x80
 800263e:	0092      	lsls	r2, r2, #2
 8002640:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	220b      	movs	r2, #11
 800264c:	4013      	ands	r3, r2
 800264e:	d005      	beq.n	800265c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	0011      	movs	r1, r2
 8002656:	0018      	movs	r0, r3
 8002658:	f000 fbd8 	bl	8002e0c <I2C_ITError>
  }
}
 800265c:	46c0      	nop			; (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b006      	add	sp, #24
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800266c:	46c0      	nop			; (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b002      	add	sp, #8
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b002      	add	sp, #8
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	0008      	movs	r0, r1
 800268e:	0011      	movs	r1, r2
 8002690:	1cfb      	adds	r3, r7, #3
 8002692:	1c02      	adds	r2, r0, #0
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	003b      	movs	r3, r7
 8002698:	1c0a      	adds	r2, r1, #0
 800269a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b002      	add	sp, #8
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80026bc:	46c0      	nop			; (mov r8, r8)
 80026be:	46bd      	mov	sp, r7
 80026c0:	b002      	add	sp, #8
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b002      	add	sp, #8
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2240      	movs	r2, #64	; 0x40
 80026ee:	5c9b      	ldrb	r3, [r3, r2]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <I2C_Slave_ISR_IT+0x24>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e0fa      	b.n	80028ee <I2C_Slave_ISR_IT+0x21a>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2240      	movs	r2, #64	; 0x40
 80026fc:	2101      	movs	r1, #1
 80026fe:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	001a      	movs	r2, r3
 8002706:	2301      	movs	r3, #1
 8002708:	4013      	ands	r3, r2
 800270a:	d00b      	beq.n	8002724 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	001a      	movs	r2, r3
 8002712:	2301      	movs	r3, #1
 8002714:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002716:	d005      	beq.n	8002724 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	0011      	movs	r1, r2
 800271e:	0018      	movs	r0, r3
 8002720:	f000 f9f6 	bl	8002b10 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	001a      	movs	r2, r3
 800272a:	2301      	movs	r3, #1
 800272c:	4013      	ands	r3, r2
 800272e:	d054      	beq.n	80027da <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	001a      	movs	r2, r3
 8002736:	2301      	movs	r3, #1
 8002738:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800273a:	d04e      	beq.n	80027da <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d12d      	bne.n	80027a2 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2241      	movs	r2, #65	; 0x41
 800274a:	5c9b      	ldrb	r3, [r3, r2]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b28      	cmp	r3, #40	; 0x28
 8002750:	d10b      	bne.n	800276a <I2C_Slave_ISR_IT+0x96>
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	049b      	lsls	r3, r3, #18
 8002758:	429a      	cmp	r2, r3
 800275a:	d106      	bne.n	800276a <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	0011      	movs	r1, r2
 8002762:	0018      	movs	r0, r3
 8002764:	f000 faf8 	bl	8002d58 <I2C_ITListenCplt>
 8002768:	e036      	b.n	80027d8 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2241      	movs	r2, #65	; 0x41
 800276e:	5c9b      	ldrb	r3, [r3, r2]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b29      	cmp	r3, #41	; 0x29
 8002774:	d110      	bne.n	8002798 <I2C_Slave_ISR_IT+0xc4>
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	4a5f      	ldr	r2, [pc, #380]	; (80028f8 <I2C_Slave_ISR_IT+0x224>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00c      	beq.n	8002798 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2210      	movs	r2, #16
 8002784:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	0018      	movs	r0, r3
 800278a:	f000 fc4a 	bl	8003022 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	0018      	movs	r0, r3
 8002792:	f000 f957 	bl	8002a44 <I2C_ITSlaveSeqCplt>
 8002796:	e01f      	b.n	80027d8 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2210      	movs	r2, #16
 800279e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80027a0:	e09d      	b.n	80028de <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2210      	movs	r2, #16
 80027a8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	2204      	movs	r2, #4
 80027b0:	431a      	orrs	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <I2C_Slave_ISR_IT+0xf4>
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	045b      	lsls	r3, r3, #17
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d000      	beq.n	80027c8 <I2C_Slave_ISR_IT+0xf4>
 80027c6:	e08a      	b.n	80028de <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	0011      	movs	r1, r2
 80027d0:	0018      	movs	r0, r3
 80027d2:	f000 fb1b 	bl	8002e0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80027d6:	e082      	b.n	80028de <I2C_Slave_ISR_IT+0x20a>
 80027d8:	e081      	b.n	80028de <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	001a      	movs	r2, r3
 80027e0:	2301      	movs	r3, #1
 80027e2:	4013      	ands	r3, r2
 80027e4:	d031      	beq.n	800284a <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	089b      	lsrs	r3, r3, #2
 80027ea:	001a      	movs	r2, r3
 80027ec:	2301      	movs	r3, #1
 80027ee:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027f0:	d02b      	beq.n	800284a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d018      	beq.n	800282e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d154      	bne.n	80028e2 <I2C_Slave_ISR_IT+0x20e>
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	4a2f      	ldr	r2, [pc, #188]	; (80028f8 <I2C_Slave_ISR_IT+0x224>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d050      	beq.n	80028e2 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	0018      	movs	r0, r3
 8002844:	f000 f8fe 	bl	8002a44 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002848:	e04b      	b.n	80028e2 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	08db      	lsrs	r3, r3, #3
 800284e:	001a      	movs	r2, r3
 8002850:	2301      	movs	r3, #1
 8002852:	4013      	ands	r3, r2
 8002854:	d00c      	beq.n	8002870 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	08db      	lsrs	r3, r3, #3
 800285a:	001a      	movs	r2, r3
 800285c:	2301      	movs	r3, #1
 800285e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002860:	d006      	beq.n	8002870 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	0011      	movs	r1, r2
 8002868:	0018      	movs	r0, r3
 800286a:	f000 f847 	bl	80028fc <I2C_ITAddrCplt>
 800286e:	e039      	b.n	80028e4 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	085b      	lsrs	r3, r3, #1
 8002874:	001a      	movs	r2, r3
 8002876:	2301      	movs	r3, #1
 8002878:	4013      	ands	r3, r2
 800287a:	d033      	beq.n	80028e4 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	085b      	lsrs	r3, r3, #1
 8002880:	001a      	movs	r2, r3
 8002882:	2301      	movs	r3, #1
 8002884:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002886:	d02d      	beq.n	80028e4 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d018      	beq.n	80028c4 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	781a      	ldrb	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	; 0x28
 80028c2:	e00f      	b.n	80028e4 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	045b      	lsls	r3, r3, #17
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d002      	beq.n	80028d4 <I2C_Slave_ISR_IT+0x200>
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d107      	bne.n	80028e4 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	0018      	movs	r0, r3
 80028d8:	f000 f8b4 	bl	8002a44 <I2C_ITSlaveSeqCplt>
 80028dc:	e002      	b.n	80028e4 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	e000      	b.n	80028e4 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80028e2:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2240      	movs	r2, #64	; 0x40
 80028e8:	2100      	movs	r1, #0
 80028ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	0018      	movs	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b006      	add	sp, #24
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	ffff0000 	.word	0xffff0000

080028fc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028fc:	b5b0      	push	{r4, r5, r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2241      	movs	r2, #65	; 0x41
 800290a:	5c9b      	ldrb	r3, [r3, r2]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	001a      	movs	r2, r3
 8002910:	2328      	movs	r3, #40	; 0x28
 8002912:	4013      	ands	r3, r2
 8002914:	2b28      	cmp	r3, #40	; 0x28
 8002916:	d000      	beq.n	800291a <I2C_ITAddrCplt+0x1e>
 8002918:	e088      	b.n	8002a2c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	b2da      	uxtb	r2, r3
 8002924:	250f      	movs	r5, #15
 8002926:	197b      	adds	r3, r7, r5
 8002928:	2101      	movs	r1, #1
 800292a:	400a      	ands	r2, r1
 800292c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	0c1b      	lsrs	r3, r3, #16
 8002936:	b29a      	uxth	r2, r3
 8002938:	200c      	movs	r0, #12
 800293a:	183b      	adds	r3, r7, r0
 800293c:	21fe      	movs	r1, #254	; 0xfe
 800293e:	400a      	ands	r2, r1
 8002940:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	b29a      	uxth	r2, r3
 800294a:	240a      	movs	r4, #10
 800294c:	193b      	adds	r3, r7, r4
 800294e:	0592      	lsls	r2, r2, #22
 8002950:	0d92      	lsrs	r2, r2, #22
 8002952:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	b29a      	uxth	r2, r3
 800295c:	2308      	movs	r3, #8
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	21fe      	movs	r1, #254	; 0xfe
 8002962:	400a      	ands	r2, r1
 8002964:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d148      	bne.n	8002a00 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800296e:	0021      	movs	r1, r4
 8002970:	187b      	adds	r3, r7, r1
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	09db      	lsrs	r3, r3, #7
 8002976:	b29a      	uxth	r2, r3
 8002978:	183b      	adds	r3, r7, r0
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	4053      	eors	r3, r2
 800297e:	b29b      	uxth	r3, r3
 8002980:	001a      	movs	r2, r3
 8002982:	2306      	movs	r3, #6
 8002984:	4013      	ands	r3, r2
 8002986:	d120      	bne.n	80029ca <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8002988:	183b      	adds	r3, r7, r0
 800298a:	187a      	adds	r2, r7, r1
 800298c:	8812      	ldrh	r2, [r2, #0]
 800298e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d14c      	bne.n	8002a3c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2208      	movs	r2, #8
 80029ae:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2240      	movs	r2, #64	; 0x40
 80029b4:	2100      	movs	r1, #0
 80029b6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029b8:	183b      	adds	r3, r7, r0
 80029ba:	881a      	ldrh	r2, [r3, #0]
 80029bc:	197b      	adds	r3, r7, r5
 80029be:	7819      	ldrb	r1, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	0018      	movs	r0, r3
 80029c4:	f7ff fe5e 	bl	8002684 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80029c8:	e038      	b.n	8002a3c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80029ca:	240c      	movs	r4, #12
 80029cc:	193b      	adds	r3, r7, r4
 80029ce:	2208      	movs	r2, #8
 80029d0:	18ba      	adds	r2, r7, r2
 80029d2:	8812      	ldrh	r2, [r2, #0]
 80029d4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	021a      	lsls	r2, r3, #8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	0011      	movs	r1, r2
 80029de:	0018      	movs	r0, r3
 80029e0:	f000 fd54 	bl	800348c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2240      	movs	r2, #64	; 0x40
 80029e8:	2100      	movs	r1, #0
 80029ea:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029ec:	193b      	adds	r3, r7, r4
 80029ee:	881a      	ldrh	r2, [r3, #0]
 80029f0:	230f      	movs	r3, #15
 80029f2:	18fb      	adds	r3, r7, r3
 80029f4:	7819      	ldrb	r1, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	0018      	movs	r0, r3
 80029fa:	f7ff fe43 	bl	8002684 <HAL_I2C_AddrCallback>
}
 80029fe:	e01d      	b.n	8002a3c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	021a      	lsls	r2, r3, #8
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	0011      	movs	r1, r2
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f000 fd3f 	bl	800348c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2240      	movs	r2, #64	; 0x40
 8002a12:	2100      	movs	r1, #0
 8002a14:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a16:	230c      	movs	r3, #12
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	881a      	ldrh	r2, [r3, #0]
 8002a1c:	230f      	movs	r3, #15
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	7819      	ldrb	r1, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	0018      	movs	r0, r3
 8002a26:	f7ff fe2d 	bl	8002684 <HAL_I2C_AddrCallback>
}
 8002a2a:	e007      	b.n	8002a3c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2208      	movs	r2, #8
 8002a32:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2240      	movs	r2, #64	; 0x40
 8002a38:	2100      	movs	r1, #0
 8002a3a:	5499      	strb	r1, [r3, r2]
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b004      	add	sp, #16
 8002a42:	bdb0      	pop	{r4, r5, r7, pc}

08002a44 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2242      	movs	r2, #66	; 0x42
 8002a58:	2100      	movs	r1, #0
 8002a5a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	0b9b      	lsrs	r3, r3, #14
 8002a60:	001a      	movs	r2, r3
 8002a62:	2301      	movs	r3, #1
 8002a64:	4013      	ands	r3, r2
 8002a66:	d008      	beq.n	8002a7a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4925      	ldr	r1, [pc, #148]	; (8002b08 <I2C_ITSlaveSeqCplt+0xc4>)
 8002a74:	400a      	ands	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	e00d      	b.n	8002a96 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	0bdb      	lsrs	r3, r3, #15
 8002a7e:	001a      	movs	r2, r3
 8002a80:	2301      	movs	r3, #1
 8002a82:	4013      	ands	r3, r2
 8002a84:	d007      	beq.n	8002a96 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	491e      	ldr	r1, [pc, #120]	; (8002b0c <I2C_ITSlaveSeqCplt+0xc8>)
 8002a92:	400a      	ands	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2241      	movs	r2, #65	; 0x41
 8002a9a:	5c9b      	ldrb	r3, [r3, r2]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b29      	cmp	r3, #41	; 0x29
 8002aa0:	d114      	bne.n	8002acc <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2241      	movs	r2, #65	; 0x41
 8002aa6:	2128      	movs	r1, #40	; 0x28
 8002aa8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2221      	movs	r2, #33	; 0x21
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f000 fce9 	bl	800348c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2240      	movs	r2, #64	; 0x40
 8002abe:	2100      	movs	r1, #0
 8002ac0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7ff fdcd 	bl	8002664 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002aca:	e019      	b.n	8002b00 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2241      	movs	r2, #65	; 0x41
 8002ad0:	5c9b      	ldrb	r3, [r3, r2]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ad6:	d113      	bne.n	8002b00 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2241      	movs	r2, #65	; 0x41
 8002adc:	2128      	movs	r1, #40	; 0x28
 8002ade:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2222      	movs	r2, #34	; 0x22
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2102      	movs	r1, #2
 8002aea:	0018      	movs	r0, r3
 8002aec:	f000 fcce 	bl	800348c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2240      	movs	r2, #64	; 0x40
 8002af4:	2100      	movs	r1, #0
 8002af6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	0018      	movs	r0, r3
 8002afc:	f7ff fdba 	bl	8002674 <HAL_I2C_SlaveRxCpltCallback>
}
 8002b00:	46c0      	nop			; (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b004      	add	sp, #16
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	ffffbfff 	.word	0xffffbfff
 8002b0c:	ffff7fff 	.word	0xffff7fff

08002b10 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002b26:	200f      	movs	r0, #15
 8002b28:	183b      	adds	r3, r7, r0
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	2141      	movs	r1, #65	; 0x41
 8002b2e:	5c52      	ldrb	r2, [r2, r1]
 8002b30:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2220      	movs	r2, #32
 8002b38:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b3a:	183b      	adds	r3, r7, r0
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b21      	cmp	r3, #33	; 0x21
 8002b40:	d003      	beq.n	8002b4a <I2C_ITSlaveCplt+0x3a>
 8002b42:	183b      	adds	r3, r7, r0
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b29      	cmp	r3, #41	; 0x29
 8002b48:	d109      	bne.n	8002b5e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002b4a:	4a7d      	ldr	r2, [pc, #500]	; (8002d40 <I2C_ITSlaveCplt+0x230>)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	0011      	movs	r1, r2
 8002b50:	0018      	movs	r0, r3
 8002b52:	f000 fc9b 	bl	800348c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2221      	movs	r2, #33	; 0x21
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b5c:	e011      	b.n	8002b82 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b5e:	220f      	movs	r2, #15
 8002b60:	18bb      	adds	r3, r7, r2
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b22      	cmp	r3, #34	; 0x22
 8002b66:	d003      	beq.n	8002b70 <I2C_ITSlaveCplt+0x60>
 8002b68:	18bb      	adds	r3, r7, r2
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8002b6e:	d108      	bne.n	8002b82 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002b70:	4a74      	ldr	r2, [pc, #464]	; (8002d44 <I2C_ITSlaveCplt+0x234>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	0011      	movs	r1, r2
 8002b76:	0018      	movs	r0, r3
 8002b78:	f000 fc88 	bl	800348c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2222      	movs	r2, #34	; 0x22
 8002b80:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2180      	movs	r1, #128	; 0x80
 8002b8e:	0209      	lsls	r1, r1, #8
 8002b90:	430a      	orrs	r2, r1
 8002b92:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	496a      	ldr	r1, [pc, #424]	; (8002d48 <I2C_ITSlaveCplt+0x238>)
 8002ba0:	400a      	ands	r2, r1
 8002ba2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 fa3b 	bl	8003022 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	0b9b      	lsrs	r3, r3, #14
 8002bb0:	001a      	movs	r2, r3
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d013      	beq.n	8002be0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4962      	ldr	r1, [pc, #392]	; (8002d4c <I2C_ITSlaveCplt+0x23c>)
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d020      	beq.n	8002c12 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bde:	e018      	b.n	8002c12 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	0bdb      	lsrs	r3, r3, #15
 8002be4:	001a      	movs	r2, r3
 8002be6:	2301      	movs	r3, #1
 8002be8:	4013      	ands	r3, r2
 8002bea:	d012      	beq.n	8002c12 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4956      	ldr	r1, [pc, #344]	; (8002d50 <I2C_ITSlaveCplt+0x240>)
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d006      	beq.n	8002c12 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	001a      	movs	r2, r3
 8002c18:	2301      	movs	r3, #1
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d020      	beq.n	8002c60 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2204      	movs	r2, #4
 8002c22:	4393      	bics	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00c      	beq.n	8002c60 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	2204      	movs	r2, #4
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2242      	movs	r2, #66	; 0x42
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	0011      	movs	r1, r2
 8002c94:	0018      	movs	r0, r3
 8002c96:	f000 f8b9 	bl	8002e0c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2241      	movs	r2, #65	; 0x41
 8002c9e:	5c9b      	ldrb	r3, [r3, r2]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b28      	cmp	r3, #40	; 0x28
 8002ca4:	d147      	bne.n	8002d36 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	0011      	movs	r1, r2
 8002cac:	0018      	movs	r0, r3
 8002cae:	f000 f853 	bl	8002d58 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cb2:	e040      	b.n	8002d36 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	4a26      	ldr	r2, [pc, #152]	; (8002d54 <I2C_ITSlaveCplt+0x244>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d016      	beq.n	8002cec <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7ff febf 	bl	8002a44 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a22      	ldr	r2, [pc, #136]	; (8002d54 <I2C_ITSlaveCplt+0x244>)
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2241      	movs	r2, #65	; 0x41
 8002cd0:	2120      	movs	r1, #32
 8002cd2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2240      	movs	r2, #64	; 0x40
 8002cde:	2100      	movs	r1, #0
 8002ce0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7ff fcdd 	bl	80026a4 <HAL_I2C_ListenCpltCallback>
}
 8002cea:	e024      	b.n	8002d36 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2241      	movs	r2, #65	; 0x41
 8002cf0:	5c9b      	ldrb	r3, [r3, r2]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b22      	cmp	r3, #34	; 0x22
 8002cf6:	d10f      	bne.n	8002d18 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2241      	movs	r2, #65	; 0x41
 8002cfc:	2120      	movs	r1, #32
 8002cfe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2240      	movs	r2, #64	; 0x40
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7ff fcaf 	bl	8002674 <HAL_I2C_SlaveRxCpltCallback>
}
 8002d16:	e00e      	b.n	8002d36 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2241      	movs	r2, #65	; 0x41
 8002d1c:	2120      	movs	r1, #32
 8002d1e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2240      	movs	r2, #64	; 0x40
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	0018      	movs	r0, r3
 8002d32:	f7ff fc97 	bl	8002664 <HAL_I2C_SlaveTxCpltCallback>
}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b006      	add	sp, #24
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	00008001 	.word	0x00008001
 8002d44:	00008002 	.word	0x00008002
 8002d48:	fe00e800 	.word	0xfe00e800
 8002d4c:	ffffbfff 	.word	0xffffbfff
 8002d50:	ffff7fff 	.word	0xffff7fff
 8002d54:	ffff0000 	.word	0xffff0000

08002d58 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a27      	ldr	r2, [pc, #156]	; (8002e04 <I2C_ITListenCplt+0xac>)
 8002d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2241      	movs	r2, #65	; 0x41
 8002d72:	2120      	movs	r1, #32
 8002d74:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2242      	movs	r2, #66	; 0x42
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	001a      	movs	r2, r3
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d022      	beq.n	8002dd6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d012      	beq.n	8002dd6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	2204      	movs	r2, #4
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002dd6:	4a0c      	ldr	r2, [pc, #48]	; (8002e08 <I2C_ITListenCplt+0xb0>)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	0011      	movs	r1, r2
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f000 fb55 	bl	800348c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2210      	movs	r2, #16
 8002de8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2240      	movs	r2, #64	; 0x40
 8002dee:	2100      	movs	r1, #0
 8002df0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	0018      	movs	r0, r3
 8002df6:	f7ff fc55 	bl	80026a4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b002      	add	sp, #8
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	ffff0000 	.word	0xffff0000
 8002e08:	00008003 	.word	0x00008003

08002e0c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e16:	200f      	movs	r0, #15
 8002e18:	183b      	adds	r3, r7, r0
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	2141      	movs	r1, #65	; 0x41
 8002e1e:	5c52      	ldrb	r2, [r2, r1]
 8002e20:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2242      	movs	r2, #66	; 0x42
 8002e26:	2100      	movs	r1, #0
 8002e28:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a62      	ldr	r2, [pc, #392]	; (8002fb8 <I2C_ITError+0x1ac>)
 8002e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002e42:	183b      	adds	r3, r7, r0
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b28      	cmp	r3, #40	; 0x28
 8002e48:	d007      	beq.n	8002e5a <I2C_ITError+0x4e>
 8002e4a:	183b      	adds	r3, r7, r0
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b29      	cmp	r3, #41	; 0x29
 8002e50:	d003      	beq.n	8002e5a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002e52:	183b      	adds	r3, r7, r0
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b2a      	cmp	r3, #42	; 0x2a
 8002e58:	d10c      	bne.n	8002e74 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2103      	movs	r1, #3
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f000 fb14 	bl	800348c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2241      	movs	r2, #65	; 0x41
 8002e68:	2128      	movs	r1, #40	; 0x28
 8002e6a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a53      	ldr	r2, [pc, #332]	; (8002fbc <I2C_ITError+0x1b0>)
 8002e70:	635a      	str	r2, [r3, #52]	; 0x34
 8002e72:	e012      	b.n	8002e9a <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e74:	4a52      	ldr	r2, [pc, #328]	; (8002fc0 <I2C_ITError+0x1b4>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	0011      	movs	r1, r2
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 fb06 	bl	800348c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2241      	movs	r2, #65	; 0x41
 8002e84:	5c9b      	ldrb	r3, [r3, r2]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b60      	cmp	r3, #96	; 0x60
 8002e8a:	d003      	beq.n	8002e94 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2241      	movs	r2, #65	; 0x41
 8002e90:	2120      	movs	r1, #32
 8002e92:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d03b      	beq.n	8002f20 <I2C_ITError+0x114>
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b11      	cmp	r3, #17
 8002eac:	d002      	beq.n	8002eb4 <I2C_ITError+0xa8>
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b21      	cmp	r3, #33	; 0x21
 8002eb2:	d135      	bne.n	8002f20 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	2380      	movs	r3, #128	; 0x80
 8002ebc:	01db      	lsls	r3, r3, #7
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	01db      	lsls	r3, r3, #7
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d107      	bne.n	8002ed8 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	493c      	ldr	r1, [pc, #240]	; (8002fc4 <I2C_ITError+0x1b8>)
 8002ed4:	400a      	ands	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	0018      	movs	r0, r3
 8002ede:	f7fe ffc9 	bl	8001e74 <HAL_DMA_GetState>
 8002ee2:	0003      	movs	r3, r0
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d016      	beq.n	8002f16 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	4a36      	ldr	r2, [pc, #216]	; (8002fc8 <I2C_ITError+0x1bc>)
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2240      	movs	r2, #64	; 0x40
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	0018      	movs	r0, r3
 8002efe:	f7fe ff4f 	bl	8001da0 <HAL_DMA_Abort_IT>
 8002f02:	1e03      	subs	r3, r0, #0
 8002f04:	d051      	beq.n	8002faa <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	0018      	movs	r0, r3
 8002f12:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f14:	e049      	b.n	8002faa <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f000 f859 	bl	8002fd0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f1e:	e044      	b.n	8002faa <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d03b      	beq.n	8002fa0 <I2C_ITError+0x194>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b12      	cmp	r3, #18
 8002f2c:	d002      	beq.n	8002f34 <I2C_ITError+0x128>
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b22      	cmp	r3, #34	; 0x22
 8002f32:	d135      	bne.n	8002fa0 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	401a      	ands	r2, r3
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d107      	bne.n	8002f58 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	491e      	ldr	r1, [pc, #120]	; (8002fcc <I2C_ITError+0x1c0>)
 8002f54:	400a      	ands	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f7fe ff89 	bl	8001e74 <HAL_DMA_GetState>
 8002f62:	0003      	movs	r3, r0
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d016      	beq.n	8002f96 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6c:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <I2C_ITError+0x1bc>)
 8002f6e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2240      	movs	r2, #64	; 0x40
 8002f74:	2100      	movs	r1, #0
 8002f76:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f7fe ff0f 	bl	8001da0 <HAL_DMA_Abort_IT>
 8002f82:	1e03      	subs	r3, r0, #0
 8002f84:	d013      	beq.n	8002fae <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	0018      	movs	r0, r3
 8002f92:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f94:	e00b      	b.n	8002fae <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f000 f819 	bl	8002fd0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f9e:	e006      	b.n	8002fae <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f000 f814 	bl	8002fd0 <I2C_TreatErrorCallback>
  }
}
 8002fa8:	e002      	b.n	8002fb0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	e000      	b.n	8002fb0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fae:	46c0      	nop			; (mov r8, r8)
}
 8002fb0:	46c0      	nop			; (mov r8, r8)
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b004      	add	sp, #16
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	ffff0000 	.word	0xffff0000
 8002fbc:	080026d5 	.word	0x080026d5
 8002fc0:	00008003 	.word	0x00008003
 8002fc4:	ffffbfff 	.word	0xffffbfff
 8002fc8:	08003067 	.word	0x08003067
 8002fcc:	ffff7fff 	.word	0xffff7fff

08002fd0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2241      	movs	r2, #65	; 0x41
 8002fdc:	5c9b      	ldrb	r3, [r3, r2]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b60      	cmp	r3, #96	; 0x60
 8002fe2:	d10f      	bne.n	8003004 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2241      	movs	r2, #65	; 0x41
 8002fe8:	2120      	movs	r1, #32
 8002fea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2240      	movs	r2, #64	; 0x40
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f7ff fb61 	bl	80026c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003002:	e00a      	b.n	800301a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2240      	movs	r2, #64	; 0x40
 800300e:	2100      	movs	r1, #0
 8003010:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	0018      	movs	r0, r3
 8003016:	f7ff fb4d 	bl	80026b4 <HAL_I2C_ErrorCallback>
}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	46bd      	mov	sp, r7
 800301e:	b002      	add	sp, #8
 8003020:	bd80      	pop	{r7, pc}

08003022 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2202      	movs	r2, #2
 8003032:	4013      	ands	r3, r2
 8003034:	2b02      	cmp	r3, #2
 8003036:	d103      	bne.n	8003040 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2200      	movs	r2, #0
 800303e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2201      	movs	r2, #1
 8003048:	4013      	ands	r3, r2
 800304a:	2b01      	cmp	r3, #1
 800304c:	d007      	beq.n	800305e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699a      	ldr	r2, [r3, #24]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2101      	movs	r1, #1
 800305a:	430a      	orrs	r2, r1
 800305c:	619a      	str	r2, [r3, #24]
  }
}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	46bd      	mov	sp, r7
 8003062:	b002      	add	sp, #8
 8003064:	bd80      	pop	{r7, pc}

08003066 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	2200      	movs	r2, #0
 8003082:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003090:	2200      	movs	r2, #0
 8003092:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	0018      	movs	r0, r3
 8003098:	f7ff ff9a 	bl	8002fd0 <I2C_TreatErrorCallback>
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b004      	add	sp, #16
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	1dfb      	adds	r3, r7, #7
 80030b2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b4:	e021      	b.n	80030fa <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	3301      	adds	r3, #1
 80030ba:	d01e      	beq.n	80030fa <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030bc:	f7fe fd88 	bl	8001bd0 <HAL_GetTick>
 80030c0:	0002      	movs	r2, r0
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d302      	bcc.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d113      	bne.n	80030fa <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	2220      	movs	r2, #32
 80030d8:	431a      	orrs	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2241      	movs	r2, #65	; 0x41
 80030e2:	2120      	movs	r1, #32
 80030e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2242      	movs	r2, #66	; 0x42
 80030ea:	2100      	movs	r1, #0
 80030ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2240      	movs	r2, #64	; 0x40
 80030f2:	2100      	movs	r1, #0
 80030f4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e00f      	b.n	800311a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	4013      	ands	r3, r2
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	425a      	negs	r2, r3
 800310a:	4153      	adcs	r3, r2
 800310c:	b2db      	uxtb	r3, r3
 800310e:	001a      	movs	r2, r3
 8003110:	1dfb      	adds	r3, r7, #7
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d0ce      	beq.n	80030b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b004      	add	sp, #16
 8003120:	bd80      	pop	{r7, pc}

08003122 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800312e:	e02b      	b.n	8003188 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	0018      	movs	r0, r3
 8003138:	f000 f86e 	bl	8003218 <I2C_IsErrorOccurred>
 800313c:	1e03      	subs	r3, r0, #0
 800313e:	d001      	beq.n	8003144 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e029      	b.n	8003198 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	3301      	adds	r3, #1
 8003148:	d01e      	beq.n	8003188 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314a:	f7fe fd41 	bl	8001bd0 <HAL_GetTick>
 800314e:	0002      	movs	r2, r0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	429a      	cmp	r2, r3
 8003158:	d302      	bcc.n	8003160 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d113      	bne.n	8003188 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	2220      	movs	r2, #32
 8003166:	431a      	orrs	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2241      	movs	r2, #65	; 0x41
 8003170:	2120      	movs	r1, #32
 8003172:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2242      	movs	r2, #66	; 0x42
 8003178:	2100      	movs	r1, #0
 800317a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2240      	movs	r2, #64	; 0x40
 8003180:	2100      	movs	r1, #0
 8003182:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e007      	b.n	8003198 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2202      	movs	r2, #2
 8003190:	4013      	ands	r3, r2
 8003192:	2b02      	cmp	r3, #2
 8003194:	d1cc      	bne.n	8003130 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	0018      	movs	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	b004      	add	sp, #16
 800319e:	bd80      	pop	{r7, pc}

080031a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031ac:	e028      	b.n	8003200 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	0018      	movs	r0, r3
 80031b6:	f000 f82f 	bl	8003218 <I2C_IsErrorOccurred>
 80031ba:	1e03      	subs	r3, r0, #0
 80031bc:	d001      	beq.n	80031c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e026      	b.n	8003210 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c2:	f7fe fd05 	bl	8001bd0 <HAL_GetTick>
 80031c6:	0002      	movs	r2, r0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d302      	bcc.n	80031d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d113      	bne.n	8003200 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031dc:	2220      	movs	r2, #32
 80031de:	431a      	orrs	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2241      	movs	r2, #65	; 0x41
 80031e8:	2120      	movs	r1, #32
 80031ea:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2242      	movs	r2, #66	; 0x42
 80031f0:	2100      	movs	r1, #0
 80031f2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2240      	movs	r2, #64	; 0x40
 80031f8:	2100      	movs	r1, #0
 80031fa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e007      	b.n	8003210 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2220      	movs	r2, #32
 8003208:	4013      	ands	r3, r2
 800320a:	2b20      	cmp	r3, #32
 800320c:	d1cf      	bne.n	80031ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	0018      	movs	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	b004      	add	sp, #16
 8003216:	bd80      	pop	{r7, pc}

08003218 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b08b      	sub	sp, #44	; 0x2c
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003224:	2327      	movs	r3, #39	; 0x27
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	2210      	movs	r2, #16
 8003240:	4013      	ands	r3, r2
 8003242:	d100      	bne.n	8003246 <I2C_IsErrorOccurred+0x2e>
 8003244:	e082      	b.n	800334c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2210      	movs	r2, #16
 800324c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800324e:	e060      	b.n	8003312 <I2C_IsErrorOccurred+0xfa>
 8003250:	2427      	movs	r4, #39	; 0x27
 8003252:	193b      	adds	r3, r7, r4
 8003254:	193a      	adds	r2, r7, r4
 8003256:	7812      	ldrb	r2, [r2, #0]
 8003258:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	3301      	adds	r3, #1
 800325e:	d058      	beq.n	8003312 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003260:	f7fe fcb6 	bl	8001bd0 <HAL_GetTick>
 8003264:	0002      	movs	r2, r0
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	429a      	cmp	r2, r3
 800326e:	d306      	bcc.n	800327e <I2C_IsErrorOccurred+0x66>
 8003270:	193b      	adds	r3, r7, r4
 8003272:	193a      	adds	r2, r7, r4
 8003274:	7812      	ldrb	r2, [r2, #0]
 8003276:	701a      	strb	r2, [r3, #0]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d149      	bne.n	8003312 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	01db      	lsls	r3, r3, #7
 8003288:	4013      	ands	r3, r2
 800328a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800328c:	2013      	movs	r0, #19
 800328e:	183b      	adds	r3, r7, r0
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	2142      	movs	r1, #66	; 0x42
 8003294:	5c52      	ldrb	r2, [r2, r1]
 8003296:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	021b      	lsls	r3, r3, #8
 80032a2:	401a      	ands	r2, r3
 80032a4:	2380      	movs	r3, #128	; 0x80
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d126      	bne.n	80032fa <I2C_IsErrorOccurred+0xe2>
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	01db      	lsls	r3, r3, #7
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d021      	beq.n	80032fa <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80032b6:	183b      	adds	r3, r7, r0
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d01d      	beq.n	80032fa <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2180      	movs	r1, #128	; 0x80
 80032ca:	01c9      	lsls	r1, r1, #7
 80032cc:	430a      	orrs	r2, r1
 80032ce:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80032d0:	f7fe fc7e 	bl	8001bd0 <HAL_GetTick>
 80032d4:	0003      	movs	r3, r0
 80032d6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032d8:	e00f      	b.n	80032fa <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032da:	f7fe fc79 	bl	8001bd0 <HAL_GetTick>
 80032de:	0002      	movs	r2, r0
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b19      	cmp	r3, #25
 80032e6:	d908      	bls.n	80032fa <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	2220      	movs	r2, #32
 80032ec:	4313      	orrs	r3, r2
 80032ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80032f0:	2327      	movs	r3, #39	; 0x27
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	2201      	movs	r2, #1
 80032f6:	701a      	strb	r2, [r3, #0]

              break;
 80032f8:	e00b      	b.n	8003312 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2220      	movs	r2, #32
 8003302:	4013      	ands	r3, r2
 8003304:	2127      	movs	r1, #39	; 0x27
 8003306:	187a      	adds	r2, r7, r1
 8003308:	1879      	adds	r1, r7, r1
 800330a:	7809      	ldrb	r1, [r1, #0]
 800330c:	7011      	strb	r1, [r2, #0]
 800330e:	2b20      	cmp	r3, #32
 8003310:	d1e3      	bne.n	80032da <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	2220      	movs	r2, #32
 800331a:	4013      	ands	r3, r2
 800331c:	2b20      	cmp	r3, #32
 800331e:	d004      	beq.n	800332a <I2C_IsErrorOccurred+0x112>
 8003320:	2327      	movs	r3, #39	; 0x27
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d092      	beq.n	8003250 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800332a:	2327      	movs	r3, #39	; 0x27
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d103      	bne.n	800333c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2220      	movs	r2, #32
 800333a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	2204      	movs	r2, #4
 8003340:	4313      	orrs	r3, r2
 8003342:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003344:	2327      	movs	r3, #39	; 0x27
 8003346:	18fb      	adds	r3, r7, r3
 8003348:	2201      	movs	r2, #1
 800334a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	2380      	movs	r3, #128	; 0x80
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4013      	ands	r3, r2
 800335c:	d00c      	beq.n	8003378 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	2201      	movs	r2, #1
 8003362:	4313      	orrs	r3, r2
 8003364:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2280      	movs	r2, #128	; 0x80
 800336c:	0052      	lsls	r2, r2, #1
 800336e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003370:	2327      	movs	r3, #39	; 0x27
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	2201      	movs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4013      	ands	r3, r2
 8003380:	d00c      	beq.n	800339c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	2208      	movs	r2, #8
 8003386:	4313      	orrs	r3, r2
 8003388:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2280      	movs	r2, #128	; 0x80
 8003390:	00d2      	lsls	r2, r2, #3
 8003392:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003394:	2327      	movs	r3, #39	; 0x27
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4013      	ands	r3, r2
 80033a4:	d00c      	beq.n	80033c0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	2202      	movs	r2, #2
 80033aa:	4313      	orrs	r3, r2
 80033ac:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2280      	movs	r2, #128	; 0x80
 80033b4:	0092      	lsls	r2, r2, #2
 80033b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033b8:	2327      	movs	r3, #39	; 0x27
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80033c0:	2327      	movs	r3, #39	; 0x27
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d01d      	beq.n	8003406 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7ff fe28 	bl	8003022 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	490d      	ldr	r1, [pc, #52]	; (8003414 <I2C_IsErrorOccurred+0x1fc>)
 80033de:	400a      	ands	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	431a      	orrs	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2241      	movs	r2, #65	; 0x41
 80033f2:	2120      	movs	r1, #32
 80033f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2242      	movs	r2, #66	; 0x42
 80033fa:	2100      	movs	r1, #0
 80033fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2240      	movs	r2, #64	; 0x40
 8003402:	2100      	movs	r1, #0
 8003404:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003406:	2327      	movs	r3, #39	; 0x27
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	781b      	ldrb	r3, [r3, #0]
}
 800340c:	0018      	movs	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	b00b      	add	sp, #44	; 0x2c
 8003412:	bd90      	pop	{r4, r7, pc}
 8003414:	fe00e800 	.word	0xfe00e800

08003418 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	0008      	movs	r0, r1
 8003422:	0011      	movs	r1, r2
 8003424:	607b      	str	r3, [r7, #4]
 8003426:	240a      	movs	r4, #10
 8003428:	193b      	adds	r3, r7, r4
 800342a:	1c02      	adds	r2, r0, #0
 800342c:	801a      	strh	r2, [r3, #0]
 800342e:	2009      	movs	r0, #9
 8003430:	183b      	adds	r3, r7, r0
 8003432:	1c0a      	adds	r2, r1, #0
 8003434:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003436:	193b      	adds	r3, r7, r4
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	059b      	lsls	r3, r3, #22
 800343c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800343e:	183b      	adds	r3, r7, r0
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	0419      	lsls	r1, r3, #16
 8003444:	23ff      	movs	r3, #255	; 0xff
 8003446:	041b      	lsls	r3, r3, #16
 8003448:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800344a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	4313      	orrs	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003462:	0d51      	lsrs	r1, r2, #21
 8003464:	2280      	movs	r2, #128	; 0x80
 8003466:	00d2      	lsls	r2, r2, #3
 8003468:	400a      	ands	r2, r1
 800346a:	4907      	ldr	r1, [pc, #28]	; (8003488 <I2C_TransferConfig+0x70>)
 800346c:	430a      	orrs	r2, r1
 800346e:	43d2      	mvns	r2, r2
 8003470:	401a      	ands	r2, r3
 8003472:	0011      	movs	r1, r2
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	430a      	orrs	r2, r1
 800347c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	b007      	add	sp, #28
 8003484:	bd90      	pop	{r4, r7, pc}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	03ff63ff 	.word	0x03ff63ff

0800348c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	000a      	movs	r2, r1
 8003496:	1cbb      	adds	r3, r7, #2
 8003498:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800349e:	1cbb      	adds	r3, r7, #2
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	2201      	movs	r2, #1
 80034a4:	4013      	ands	r3, r2
 80034a6:	d010      	beq.n	80034ca <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2242      	movs	r2, #66	; 0x42
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2241      	movs	r2, #65	; 0x41
 80034b4:	5c9b      	ldrb	r3, [r3, r2]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	001a      	movs	r2, r3
 80034ba:	2328      	movs	r3, #40	; 0x28
 80034bc:	4013      	ands	r3, r2
 80034be:	2b28      	cmp	r3, #40	; 0x28
 80034c0:	d003      	beq.n	80034ca <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	22b0      	movs	r2, #176	; 0xb0
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80034ca:	1cbb      	adds	r3, r7, #2
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	2202      	movs	r2, #2
 80034d0:	4013      	ands	r3, r2
 80034d2:	d010      	beq.n	80034f6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2244      	movs	r2, #68	; 0x44
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2241      	movs	r2, #65	; 0x41
 80034e0:	5c9b      	ldrb	r3, [r3, r2]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	001a      	movs	r2, r3
 80034e6:	2328      	movs	r3, #40	; 0x28
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b28      	cmp	r3, #40	; 0x28
 80034ec:	d003      	beq.n	80034f6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	22b0      	movs	r2, #176	; 0xb0
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80034f6:	1cbb      	adds	r3, r7, #2
 80034f8:	2200      	movs	r2, #0
 80034fa:	5e9b      	ldrsh	r3, [r3, r2]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	da03      	bge.n	8003508 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	22b8      	movs	r2, #184	; 0xb8
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003508:	1cbb      	adds	r3, r7, #2
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	2b10      	cmp	r3, #16
 800350e:	d103      	bne.n	8003518 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2290      	movs	r2, #144	; 0x90
 8003514:	4313      	orrs	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003518:	1cbb      	adds	r3, r7, #2
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	2b20      	cmp	r3, #32
 800351e:	d103      	bne.n	8003528 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003528:	1cbb      	adds	r3, r7, #2
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	2b40      	cmp	r3, #64	; 0x40
 800352e:	d103      	bne.n	8003538 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2240      	movs	r2, #64	; 0x40
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	43d9      	mvns	r1, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	400a      	ands	r2, r1
 8003548:	601a      	str	r2, [r3, #0]
}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	46bd      	mov	sp, r7
 800354e:	b004      	add	sp, #16
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2241      	movs	r2, #65	; 0x41
 8003562:	5c9b      	ldrb	r3, [r3, r2]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b20      	cmp	r3, #32
 8003568:	d138      	bne.n	80035dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2240      	movs	r2, #64	; 0x40
 800356e:	5c9b      	ldrb	r3, [r3, r2]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003574:	2302      	movs	r3, #2
 8003576:	e032      	b.n	80035de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2240      	movs	r2, #64	; 0x40
 800357c:	2101      	movs	r1, #1
 800357e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2241      	movs	r2, #65	; 0x41
 8003584:	2124      	movs	r1, #36	; 0x24
 8003586:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2101      	movs	r1, #1
 8003594:	438a      	bics	r2, r1
 8003596:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4911      	ldr	r1, [pc, #68]	; (80035e8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80035a4:	400a      	ands	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6819      	ldr	r1, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2101      	movs	r1, #1
 80035c4:	430a      	orrs	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2241      	movs	r2, #65	; 0x41
 80035cc:	2120      	movs	r1, #32
 80035ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2240      	movs	r2, #64	; 0x40
 80035d4:	2100      	movs	r1, #0
 80035d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	e000      	b.n	80035de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035dc:	2302      	movs	r3, #2
  }
}
 80035de:	0018      	movs	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b002      	add	sp, #8
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	ffffefff 	.word	0xffffefff

080035ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2241      	movs	r2, #65	; 0x41
 80035fa:	5c9b      	ldrb	r3, [r3, r2]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d139      	bne.n	8003676 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2240      	movs	r2, #64	; 0x40
 8003606:	5c9b      	ldrb	r3, [r3, r2]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800360c:	2302      	movs	r3, #2
 800360e:	e033      	b.n	8003678 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2240      	movs	r2, #64	; 0x40
 8003614:	2101      	movs	r1, #1
 8003616:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2241      	movs	r2, #65	; 0x41
 800361c:	2124      	movs	r1, #36	; 0x24
 800361e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2101      	movs	r1, #1
 800362c:	438a      	bics	r2, r1
 800362e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4a11      	ldr	r2, [pc, #68]	; (8003680 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800363c:	4013      	ands	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	021b      	lsls	r3, r3, #8
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2101      	movs	r1, #1
 800365e:	430a      	orrs	r2, r1
 8003660:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2241      	movs	r2, #65	; 0x41
 8003666:	2120      	movs	r1, #32
 8003668:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2240      	movs	r2, #64	; 0x40
 800366e:	2100      	movs	r1, #0
 8003670:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e000      	b.n	8003678 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003676:	2302      	movs	r3, #2
  }
}
 8003678:	0018      	movs	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	b004      	add	sp, #16
 800367e:	bd80      	pop	{r7, pc}
 8003680:	fffff0ff 	.word	0xfffff0ff

08003684 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800368c:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a19      	ldr	r2, [pc, #100]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003692:	4013      	ands	r3, r2
 8003694:	0019      	movs	r1, r3
 8003696:	4b17      	ldr	r3, [pc, #92]	; (80036f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	430a      	orrs	r2, r1
 800369c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	2380      	movs	r3, #128	; 0x80
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d11f      	bne.n	80036e8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80036a8:	4b14      	ldr	r3, [pc, #80]	; (80036fc <HAL_PWREx_ControlVoltageScaling+0x78>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	0013      	movs	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	189b      	adds	r3, r3, r2
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4912      	ldr	r1, [pc, #72]	; (8003700 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80036b6:	0018      	movs	r0, r3
 80036b8:	f7fc fd2e 	bl	8000118 <__udivsi3>
 80036bc:	0003      	movs	r3, r0
 80036be:	3301      	adds	r3, #1
 80036c0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036c2:	e008      	b.n	80036d6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	e001      	b.n	80036d6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e009      	b.n	80036ea <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036d6:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	401a      	ands	r2, r3
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d0ed      	beq.n	80036c4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b004      	add	sp, #16
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	40007000 	.word	0x40007000
 80036f8:	fffff9ff 	.word	0xfffff9ff
 80036fc:	20000030 	.word	0x20000030
 8003700:	000f4240 	.word	0x000f4240

08003704 <HAL_PWREx_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_IRQHandler(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Check PWR exti Rising flag */
  if (__HAL_PWR_PVD_EXTI_GET_RISING_FLAG() != 0x0U)
 8003708:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	025b      	lsls	r3, r3, #9
 8003710:	4013      	ands	r3, r2
 8003712:	d005      	beq.n	8003720 <HAL_PWREx_PVD_IRQHandler+0x1c>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_RISING_FLAG();
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8003716:	2280      	movs	r2, #128	; 0x80
 8003718:	0252      	lsls	r2, r2, #9
 800371a:	60da      	str	r2, [r3, #12]

    /* PWR PVD interrupt rising user callback */
    HAL_PWREx_PVD_Rising_Callback();
 800371c:	f000 f812 	bl	8003744 <HAL_PWREx_PVD_Rising_Callback>
  }

  /* Check PWR exti fallling flag */
  if (__HAL_PWR_PVD_EXTI_GET_FALLING_FLAG() != 0x0U)
 8003720:	4b07      	ldr	r3, [pc, #28]	; (8003740 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	025b      	lsls	r3, r3, #9
 8003728:	4013      	ands	r3, r2
 800372a:	d005      	beq.n	8003738 <HAL_PWREx_PVD_IRQHandler+0x34>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FALLING_FLAG();
 800372c:	4b04      	ldr	r3, [pc, #16]	; (8003740 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 800372e:	2280      	movs	r2, #128	; 0x80
 8003730:	0252      	lsls	r2, r2, #9
 8003732:	611a      	str	r2, [r3, #16]

    /* PWR PVD interrupt falling user callback */
    HAL_PWREx_PVD_Falling_Callback();
 8003734:	f000 f80b 	bl	800374e <HAL_PWREx_PVD_Falling_Callback>
  }
}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	40021800 	.word	0x40021800

08003744 <HAL_PWREx_PVD_Rising_Callback>:
/**
  * @brief  PWR PVD interrupt rising callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Rising_Callback(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Rising_Callback can be implemented in the user file
  */
}
 8003748:	46c0      	nop			; (mov r8, r8)
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_PWREx_PVD_Falling_Callback>:
/**
  * @brief  PWR PVD interrupt Falling callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Falling_Callback(void)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Falling_Callback can be implemented in the user file
  */
}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800375c:	4b03      	ldr	r3, [pc, #12]	; (800376c <LL_RCC_GetAPB1Prescaler+0x14>)
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	23e0      	movs	r3, #224	; 0xe0
 8003762:	01db      	lsls	r3, r3, #7
 8003764:	4013      	ands	r3, r2
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40021000 	.word	0x40021000

08003770 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e2fe      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2201      	movs	r2, #1
 8003788:	4013      	ands	r3, r2
 800378a:	d100      	bne.n	800378e <HAL_RCC_OscConfig+0x1e>
 800378c:	e07c      	b.n	8003888 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800378e:	4bc3      	ldr	r3, [pc, #780]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2238      	movs	r2, #56	; 0x38
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003798:	4bc0      	ldr	r3, [pc, #768]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	2203      	movs	r2, #3
 800379e:	4013      	ands	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b10      	cmp	r3, #16
 80037a6:	d102      	bne.n	80037ae <HAL_RCC_OscConfig+0x3e>
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d002      	beq.n	80037b4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d10b      	bne.n	80037cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b4:	4bb9      	ldr	r3, [pc, #740]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	2380      	movs	r3, #128	; 0x80
 80037ba:	029b      	lsls	r3, r3, #10
 80037bc:	4013      	ands	r3, r2
 80037be:	d062      	beq.n	8003886 <HAL_RCC_OscConfig+0x116>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d15e      	bne.n	8003886 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e2d9      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	2380      	movs	r3, #128	; 0x80
 80037d2:	025b      	lsls	r3, r3, #9
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d107      	bne.n	80037e8 <HAL_RCC_OscConfig+0x78>
 80037d8:	4bb0      	ldr	r3, [pc, #704]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4baf      	ldr	r3, [pc, #700]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80037de:	2180      	movs	r1, #128	; 0x80
 80037e0:	0249      	lsls	r1, r1, #9
 80037e2:	430a      	orrs	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e020      	b.n	800382a <HAL_RCC_OscConfig+0xba>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	23a0      	movs	r3, #160	; 0xa0
 80037ee:	02db      	lsls	r3, r3, #11
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d10e      	bne.n	8003812 <HAL_RCC_OscConfig+0xa2>
 80037f4:	4ba9      	ldr	r3, [pc, #676]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	4ba8      	ldr	r3, [pc, #672]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80037fa:	2180      	movs	r1, #128	; 0x80
 80037fc:	02c9      	lsls	r1, r1, #11
 80037fe:	430a      	orrs	r2, r1
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	4ba6      	ldr	r3, [pc, #664]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4ba5      	ldr	r3, [pc, #660]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003808:	2180      	movs	r1, #128	; 0x80
 800380a:	0249      	lsls	r1, r1, #9
 800380c:	430a      	orrs	r2, r1
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	e00b      	b.n	800382a <HAL_RCC_OscConfig+0xba>
 8003812:	4ba2      	ldr	r3, [pc, #648]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	4ba1      	ldr	r3, [pc, #644]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003818:	49a1      	ldr	r1, [pc, #644]	; (8003aa0 <HAL_RCC_OscConfig+0x330>)
 800381a:	400a      	ands	r2, r1
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	4b9f      	ldr	r3, [pc, #636]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4b9e      	ldr	r3, [pc, #632]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003824:	499f      	ldr	r1, [pc, #636]	; (8003aa4 <HAL_RCC_OscConfig+0x334>)
 8003826:	400a      	ands	r2, r1
 8003828:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d014      	beq.n	800385c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003832:	f7fe f9cd 	bl	8001bd0 <HAL_GetTick>
 8003836:	0003      	movs	r3, r0
 8003838:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383c:	f7fe f9c8 	bl	8001bd0 <HAL_GetTick>
 8003840:	0002      	movs	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	; 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e298      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800384e:	4b93      	ldr	r3, [pc, #588]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	2380      	movs	r3, #128	; 0x80
 8003854:	029b      	lsls	r3, r3, #10
 8003856:	4013      	ands	r3, r2
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0xcc>
 800385a:	e015      	b.n	8003888 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe f9b8 	bl	8001bd0 <HAL_GetTick>
 8003860:	0003      	movs	r3, r0
 8003862:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003866:	f7fe f9b3 	bl	8001bd0 <HAL_GetTick>
 800386a:	0002      	movs	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b64      	cmp	r3, #100	; 0x64
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e283      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003878:	4b88      	ldr	r3, [pc, #544]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	029b      	lsls	r3, r3, #10
 8003880:	4013      	ands	r3, r2
 8003882:	d1f0      	bne.n	8003866 <HAL_RCC_OscConfig+0xf6>
 8003884:	e000      	b.n	8003888 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003886:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2202      	movs	r2, #2
 800388e:	4013      	ands	r3, r2
 8003890:	d100      	bne.n	8003894 <HAL_RCC_OscConfig+0x124>
 8003892:	e099      	b.n	80039c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003894:	4b81      	ldr	r3, [pc, #516]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2238      	movs	r2, #56	; 0x38
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800389e:	4b7f      	ldr	r3, [pc, #508]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2203      	movs	r2, #3
 80038a4:	4013      	ands	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d102      	bne.n	80038b4 <HAL_RCC_OscConfig+0x144>
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d002      	beq.n	80038ba <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d135      	bne.n	8003926 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038ba:	4b78      	ldr	r3, [pc, #480]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4013      	ands	r3, r2
 80038c4:	d005      	beq.n	80038d2 <HAL_RCC_OscConfig+0x162>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e256      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d2:	4b72      	ldr	r3, [pc, #456]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4a74      	ldr	r2, [pc, #464]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80038d8:	4013      	ands	r3, r2
 80038da:	0019      	movs	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	021a      	lsls	r2, r3, #8
 80038e2:	4b6e      	ldr	r3, [pc, #440]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80038e4:	430a      	orrs	r2, r1
 80038e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d112      	bne.n	8003914 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80038ee:	4b6b      	ldr	r3, [pc, #428]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a6e      	ldr	r2, [pc, #440]	; (8003aac <HAL_RCC_OscConfig+0x33c>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	0019      	movs	r1, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	4b67      	ldr	r3, [pc, #412]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80038fe:	430a      	orrs	r2, r1
 8003900:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003902:	4b66      	ldr	r3, [pc, #408]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	0adb      	lsrs	r3, r3, #11
 8003908:	2207      	movs	r2, #7
 800390a:	4013      	ands	r3, r2
 800390c:	4a68      	ldr	r2, [pc, #416]	; (8003ab0 <HAL_RCC_OscConfig+0x340>)
 800390e:	40da      	lsrs	r2, r3
 8003910:	4b68      	ldr	r3, [pc, #416]	; (8003ab4 <HAL_RCC_OscConfig+0x344>)
 8003912:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003914:	4b68      	ldr	r3, [pc, #416]	; (8003ab8 <HAL_RCC_OscConfig+0x348>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	0018      	movs	r0, r3
 800391a:	f7fe f8fd 	bl	8001b18 <HAL_InitTick>
 800391e:	1e03      	subs	r3, r0, #0
 8003920:	d051      	beq.n	80039c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e22c      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d030      	beq.n	8003990 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800392e:	4b5b      	ldr	r3, [pc, #364]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a5e      	ldr	r2, [pc, #376]	; (8003aac <HAL_RCC_OscConfig+0x33c>)
 8003934:	4013      	ands	r3, r2
 8003936:	0019      	movs	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	4b57      	ldr	r3, [pc, #348]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 800393e:	430a      	orrs	r2, r1
 8003940:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003942:	4b56      	ldr	r3, [pc, #344]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	4b55      	ldr	r3, [pc, #340]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003948:	2180      	movs	r1, #128	; 0x80
 800394a:	0049      	lsls	r1, r1, #1
 800394c:	430a      	orrs	r2, r1
 800394e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fe f93e 	bl	8001bd0 <HAL_GetTick>
 8003954:	0003      	movs	r3, r0
 8003956:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800395a:	f7fe f939 	bl	8001bd0 <HAL_GetTick>
 800395e:	0002      	movs	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e209      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800396c:	4b4b      	ldr	r3, [pc, #300]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4013      	ands	r3, r2
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003978:	4b48      	ldr	r3, [pc, #288]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4a4a      	ldr	r2, [pc, #296]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 800397e:	4013      	ands	r3, r2
 8003980:	0019      	movs	r1, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	021a      	lsls	r2, r3, #8
 8003988:	4b44      	ldr	r3, [pc, #272]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	e01b      	b.n	80039c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003990:	4b42      	ldr	r3, [pc, #264]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4b41      	ldr	r3, [pc, #260]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003996:	4949      	ldr	r1, [pc, #292]	; (8003abc <HAL_RCC_OscConfig+0x34c>)
 8003998:	400a      	ands	r2, r1
 800399a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fe f918 	bl	8001bd0 <HAL_GetTick>
 80039a0:	0003      	movs	r3, r0
 80039a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a6:	f7fe f913 	bl	8001bd0 <HAL_GetTick>
 80039aa:	0002      	movs	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e1e3      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039b8:	4b38      	ldr	r3, [pc, #224]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	2380      	movs	r3, #128	; 0x80
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4013      	ands	r3, r2
 80039c2:	d1f0      	bne.n	80039a6 <HAL_RCC_OscConfig+0x236>
 80039c4:	e000      	b.n	80039c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2208      	movs	r2, #8
 80039ce:	4013      	ands	r3, r2
 80039d0:	d047      	beq.n	8003a62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80039d2:	4b32      	ldr	r3, [pc, #200]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2238      	movs	r2, #56	; 0x38
 80039d8:	4013      	ands	r3, r2
 80039da:	2b18      	cmp	r3, #24
 80039dc:	d10a      	bne.n	80039f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80039de:	4b2f      	ldr	r3, [pc, #188]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80039e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e2:	2202      	movs	r2, #2
 80039e4:	4013      	ands	r3, r2
 80039e6:	d03c      	beq.n	8003a62 <HAL_RCC_OscConfig+0x2f2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d138      	bne.n	8003a62 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e1c5      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d019      	beq.n	8003a30 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80039fc:	4b27      	ldr	r3, [pc, #156]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80039fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a00:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003a02:	2101      	movs	r1, #1
 8003a04:	430a      	orrs	r2, r1
 8003a06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fe f8e2 	bl	8001bd0 <HAL_GetTick>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a12:	f7fe f8dd 	bl	8001bd0 <HAL_GetTick>
 8003a16:	0002      	movs	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e1ad      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a24:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a28:	2202      	movs	r2, #2
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d0f1      	beq.n	8003a12 <HAL_RCC_OscConfig+0x2a2>
 8003a2e:	e018      	b.n	8003a62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003a30:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003a32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a34:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003a36:	2101      	movs	r1, #1
 8003a38:	438a      	bics	r2, r1
 8003a3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7fe f8c8 	bl	8001bd0 <HAL_GetTick>
 8003a40:	0003      	movs	r3, r0
 8003a42:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a46:	f7fe f8c3 	bl	8001bd0 <HAL_GetTick>
 8003a4a:	0002      	movs	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e193      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a58:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d1f1      	bne.n	8003a46 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2204      	movs	r2, #4
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d100      	bne.n	8003a6e <HAL_RCC_OscConfig+0x2fe>
 8003a6c:	e0c6      	b.n	8003bfc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6e:	231f      	movs	r3, #31
 8003a70:	18fb      	adds	r3, r7, r3
 8003a72:	2200      	movs	r2, #0
 8003a74:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2238      	movs	r2, #56	; 0x38
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	d11e      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003a82:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a86:	2202      	movs	r2, #2
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d100      	bne.n	8003a8e <HAL_RCC_OscConfig+0x31e>
 8003a8c:	e0b6      	b.n	8003bfc <HAL_RCC_OscConfig+0x48c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d000      	beq.n	8003a98 <HAL_RCC_OscConfig+0x328>
 8003a96:	e0b1      	b.n	8003bfc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e171      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	fffeffff 	.word	0xfffeffff
 8003aa4:	fffbffff 	.word	0xfffbffff
 8003aa8:	ffff80ff 	.word	0xffff80ff
 8003aac:	ffffc7ff 	.word	0xffffc7ff
 8003ab0:	00f42400 	.word	0x00f42400
 8003ab4:	20000030 	.word	0x20000030
 8003ab8:	20000034 	.word	0x20000034
 8003abc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ac0:	4bb1      	ldr	r3, [pc, #708]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac4:	2380      	movs	r3, #128	; 0x80
 8003ac6:	055b      	lsls	r3, r3, #21
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x360>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <HAL_RCC_OscConfig+0x362>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d011      	beq.n	8003afa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003ad6:	4bac      	ldr	r3, [pc, #688]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003ad8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ada:	4bab      	ldr	r3, [pc, #684]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003adc:	2180      	movs	r1, #128	; 0x80
 8003ade:	0549      	lsls	r1, r1, #21
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ae4:	4ba8      	ldr	r3, [pc, #672]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	055b      	lsls	r3, r3, #21
 8003aec:	4013      	ands	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003af2:	231f      	movs	r3, #31
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003afa:	4ba4      	ldr	r3, [pc, #656]	; (8003d8c <HAL_RCC_OscConfig+0x61c>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	2380      	movs	r3, #128	; 0x80
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4013      	ands	r3, r2
 8003b04:	d11a      	bne.n	8003b3c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b06:	4ba1      	ldr	r3, [pc, #644]	; (8003d8c <HAL_RCC_OscConfig+0x61c>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4ba0      	ldr	r3, [pc, #640]	; (8003d8c <HAL_RCC_OscConfig+0x61c>)
 8003b0c:	2180      	movs	r1, #128	; 0x80
 8003b0e:	0049      	lsls	r1, r1, #1
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003b14:	f7fe f85c 	bl	8001bd0 <HAL_GetTick>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1e:	f7fe f857 	bl	8001bd0 <HAL_GetTick>
 8003b22:	0002      	movs	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e127      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b30:	4b96      	ldr	r3, [pc, #600]	; (8003d8c <HAL_RCC_OscConfig+0x61c>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d106      	bne.n	8003b52 <HAL_RCC_OscConfig+0x3e2>
 8003b44:	4b90      	ldr	r3, [pc, #576]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b48:	4b8f      	ldr	r3, [pc, #572]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b50:	e01c      	b.n	8003b8c <HAL_RCC_OscConfig+0x41c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b05      	cmp	r3, #5
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x404>
 8003b5a:	4b8b      	ldr	r3, [pc, #556]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b5e:	4b8a      	ldr	r3, [pc, #552]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b60:	2104      	movs	r1, #4
 8003b62:	430a      	orrs	r2, r1
 8003b64:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b66:	4b88      	ldr	r3, [pc, #544]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b6a:	4b87      	ldr	r3, [pc, #540]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b72:	e00b      	b.n	8003b8c <HAL_RCC_OscConfig+0x41c>
 8003b74:	4b84      	ldr	r3, [pc, #528]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b78:	4b83      	ldr	r3, [pc, #524]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	438a      	bics	r2, r1
 8003b7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b80:	4b81      	ldr	r3, [pc, #516]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b84:	4b80      	ldr	r3, [pc, #512]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b86:	2104      	movs	r1, #4
 8003b88:	438a      	bics	r2, r1
 8003b8a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d014      	beq.n	8003bbe <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fe f81c 	bl	8001bd0 <HAL_GetTick>
 8003b98:	0003      	movs	r3, r0
 8003b9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b9c:	e009      	b.n	8003bb2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9e:	f7fe f817 	bl	8001bd0 <HAL_GetTick>
 8003ba2:	0002      	movs	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	4a79      	ldr	r2, [pc, #484]	; (8003d90 <HAL_RCC_OscConfig+0x620>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e0e6      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb2:	4b75      	ldr	r3, [pc, #468]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x42e>
 8003bbc:	e013      	b.n	8003be6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbe:	f7fe f807 	bl	8001bd0 <HAL_GetTick>
 8003bc2:	0003      	movs	r3, r0
 8003bc4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bc6:	e009      	b.n	8003bdc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc8:	f7fe f802 	bl	8001bd0 <HAL_GetTick>
 8003bcc:	0002      	movs	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	4a6f      	ldr	r2, [pc, #444]	; (8003d90 <HAL_RCC_OscConfig+0x620>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e0d1      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bdc:	4b6a      	ldr	r3, [pc, #424]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be0:	2202      	movs	r2, #2
 8003be2:	4013      	ands	r3, r2
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003be6:	231f      	movs	r3, #31
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d105      	bne.n	8003bfc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003bf0:	4b65      	ldr	r3, [pc, #404]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf4:	4b64      	ldr	r3, [pc, #400]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003bf6:	4967      	ldr	r1, [pc, #412]	; (8003d94 <HAL_RCC_OscConfig+0x624>)
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d100      	bne.n	8003c06 <HAL_RCC_OscConfig+0x496>
 8003c04:	e0bb      	b.n	8003d7e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c06:	4b60      	ldr	r3, [pc, #384]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2238      	movs	r2, #56	; 0x38
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b10      	cmp	r3, #16
 8003c10:	d100      	bne.n	8003c14 <HAL_RCC_OscConfig+0x4a4>
 8003c12:	e07b      	b.n	8003d0c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d156      	bne.n	8003cca <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1c:	4b5a      	ldr	r3, [pc, #360]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b59      	ldr	r3, [pc, #356]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c22:	495d      	ldr	r1, [pc, #372]	; (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003c24:	400a      	ands	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fd ffd2 	bl	8001bd0 <HAL_GetTick>
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c32:	f7fd ffcd 	bl	8001bd0 <HAL_GetTick>
 8003c36:	0002      	movs	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e09d      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c44:	4b50      	ldr	r3, [pc, #320]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	049b      	lsls	r3, r3, #18
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d1f0      	bne.n	8003c32 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c50:	4b4d      	ldr	r3, [pc, #308]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4a51      	ldr	r2, [pc, #324]	; (8003d9c <HAL_RCC_OscConfig+0x62c>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	0019      	movs	r1, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1a      	ldr	r2, [r3, #32]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	4b42      	ldr	r3, [pc, #264]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c80:	430a      	orrs	r2, r1
 8003c82:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c84:	4b40      	ldr	r3, [pc, #256]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	4b3f      	ldr	r3, [pc, #252]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c8a:	2180      	movs	r1, #128	; 0x80
 8003c8c:	0449      	lsls	r1, r1, #17
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003c92:	4b3d      	ldr	r3, [pc, #244]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	4b3c      	ldr	r3, [pc, #240]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c98:	2180      	movs	r1, #128	; 0x80
 8003c9a:	0549      	lsls	r1, r1, #21
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fd ff96 	bl	8001bd0 <HAL_GetTick>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003caa:	f7fd ff91 	bl	8001bd0 <HAL_GetTick>
 8003cae:	0002      	movs	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e061      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbc:	4b32      	ldr	r3, [pc, #200]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	049b      	lsls	r3, r3, #18
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x53a>
 8003cc8:	e059      	b.n	8003d7e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b2f      	ldr	r3, [pc, #188]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4b2e      	ldr	r3, [pc, #184]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003cd0:	4931      	ldr	r1, [pc, #196]	; (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003cd2:	400a      	ands	r2, r1
 8003cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7fd ff7b 	bl	8001bd0 <HAL_GetTick>
 8003cda:	0003      	movs	r3, r0
 8003cdc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7fd ff76 	bl	8001bd0 <HAL_GetTick>
 8003ce4:	0002      	movs	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e046      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf2:	4b25      	ldr	r3, [pc, #148]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	049b      	lsls	r3, r3, #18
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003cfe:	4b22      	ldr	r3, [pc, #136]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003d04:	4926      	ldr	r1, [pc, #152]	; (8003da0 <HAL_RCC_OscConfig+0x630>)
 8003d06:	400a      	ands	r2, r1
 8003d08:	60da      	str	r2, [r3, #12]
 8003d0a:	e038      	b.n	8003d7e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e033      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003d18:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2203      	movs	r2, #3
 8003d22:	401a      	ands	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d126      	bne.n	8003d7a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2270      	movs	r2, #112	; 0x70
 8003d30:	401a      	ands	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d11f      	bne.n	8003d7a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	23fe      	movs	r3, #254	; 0xfe
 8003d3e:	01db      	lsls	r3, r3, #7
 8003d40:	401a      	ands	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d116      	bne.n	8003d7a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	23f8      	movs	r3, #248	; 0xf8
 8003d50:	039b      	lsls	r3, r3, #14
 8003d52:	401a      	ands	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d10e      	bne.n	8003d7a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	23e0      	movs	r3, #224	; 0xe0
 8003d60:	051b      	lsls	r3, r3, #20
 8003d62:	401a      	ands	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	0f5b      	lsrs	r3, r3, #29
 8003d70:	075a      	lsls	r2, r3, #29
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d001      	beq.n	8003d7e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	0018      	movs	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b008      	add	sp, #32
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40007000 	.word	0x40007000
 8003d90:	00001388 	.word	0x00001388
 8003d94:	efffffff 	.word	0xefffffff
 8003d98:	feffffff 	.word	0xfeffffff
 8003d9c:	11c1808c 	.word	0x11c1808c
 8003da0:	eefefffc 	.word	0xeefefffc

08003da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0e9      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003db8:	4b76      	ldr	r3, [pc, #472]	; (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2207      	movs	r2, #7
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d91e      	bls.n	8003e04 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b73      	ldr	r3, [pc, #460]	; (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2207      	movs	r2, #7
 8003dcc:	4393      	bics	r3, r2
 8003dce:	0019      	movs	r1, r3
 8003dd0:	4b70      	ldr	r3, [pc, #448]	; (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003dd8:	f7fd fefa 	bl	8001bd0 <HAL_GetTick>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003de0:	e009      	b.n	8003df6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de2:	f7fd fef5 	bl	8001bd0 <HAL_GetTick>
 8003de6:	0002      	movs	r2, r0
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	4a6a      	ldr	r2, [pc, #424]	; (8003f98 <HAL_RCC_ClockConfig+0x1f4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e0ca      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003df6:	4b67      	ldr	r3, [pc, #412]	; (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2207      	movs	r2, #7
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d1ee      	bne.n	8003de2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d015      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2204      	movs	r2, #4
 8003e14:	4013      	ands	r3, r2
 8003e16:	d006      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e18:	4b60      	ldr	r3, [pc, #384]	; (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	4b5f      	ldr	r3, [pc, #380]	; (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003e1e:	21e0      	movs	r1, #224	; 0xe0
 8003e20:	01c9      	lsls	r1, r1, #7
 8003e22:	430a      	orrs	r2, r1
 8003e24:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e26:	4b5d      	ldr	r3, [pc, #372]	; (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	4a5d      	ldr	r2, [pc, #372]	; (8003fa0 <HAL_RCC_ClockConfig+0x1fc>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	0019      	movs	r1, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	4b59      	ldr	r3, [pc, #356]	; (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003e36:	430a      	orrs	r2, r1
 8003e38:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	4013      	ands	r3, r2
 8003e42:	d057      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d107      	bne.n	8003e5c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e4c:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	2380      	movs	r3, #128	; 0x80
 8003e52:	029b      	lsls	r3, r3, #10
 8003e54:	4013      	ands	r3, r2
 8003e56:	d12b      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e097      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d107      	bne.n	8003e74 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e64:	4b4d      	ldr	r3, [pc, #308]	; (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	2380      	movs	r3, #128	; 0x80
 8003e6a:	049b      	lsls	r3, r3, #18
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d11f      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e08b      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e7c:	4b47      	ldr	r3, [pc, #284]	; (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4013      	ands	r3, r2
 8003e86:	d113      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e07f      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d106      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e94:	4b41      	ldr	r3, [pc, #260]	; (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e98:	2202      	movs	r2, #2
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d108      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e074      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea2:	4b3e      	ldr	r3, [pc, #248]	; (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e06d      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eb0:	4b3a      	ldr	r3, [pc, #232]	; (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2207      	movs	r2, #7
 8003eb6:	4393      	bics	r3, r2
 8003eb8:	0019      	movs	r1, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec4:	f7fd fe84 	bl	8001bd0 <HAL_GetTick>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ecc:	e009      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ece:	f7fd fe7f 	bl	8001bd0 <HAL_GetTick>
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	4a2f      	ldr	r2, [pc, #188]	; (8003f98 <HAL_RCC_ClockConfig+0x1f4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e054      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	4b2e      	ldr	r3, [pc, #184]	; (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2238      	movs	r2, #56	; 0x38
 8003ee8:	401a      	ands	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d1ec      	bne.n	8003ece <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef4:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2207      	movs	r2, #7
 8003efa:	4013      	ands	r3, r2
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d21e      	bcs.n	8003f40 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2207      	movs	r2, #7
 8003f08:	4393      	bics	r3, r2
 8003f0a:	0019      	movs	r1, r3
 8003f0c:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f14:	f7fd fe5c 	bl	8001bd0 <HAL_GetTick>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f1c:	e009      	b.n	8003f32 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f1e:	f7fd fe57 	bl	8001bd0 <HAL_GetTick>
 8003f22:	0002      	movs	r2, r0
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	4a1b      	ldr	r2, [pc, #108]	; (8003f98 <HAL_RCC_ClockConfig+0x1f4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e02c      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f32:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2207      	movs	r2, #7
 8003f38:	4013      	ands	r3, r2
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d1ee      	bne.n	8003f1e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2204      	movs	r2, #4
 8003f46:	4013      	ands	r3, r2
 8003f48:	d009      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003f4a:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	4a15      	ldr	r2, [pc, #84]	; (8003fa4 <HAL_RCC_ClockConfig+0x200>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	0019      	movs	r1, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003f5e:	f000 f829 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8003f62:	0001      	movs	r1, r0
 8003f64:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	0a1b      	lsrs	r3, r3, #8
 8003f6a:	220f      	movs	r2, #15
 8003f6c:	401a      	ands	r2, r3
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <HAL_RCC_ClockConfig+0x204>)
 8003f70:	0092      	lsls	r2, r2, #2
 8003f72:	58d3      	ldr	r3, [r2, r3]
 8003f74:	221f      	movs	r2, #31
 8003f76:	4013      	ands	r3, r2
 8003f78:	000a      	movs	r2, r1
 8003f7a:	40da      	lsrs	r2, r3
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <HAL_RCC_ClockConfig+0x208>)
 8003f7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_RCC_ClockConfig+0x20c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	0018      	movs	r0, r3
 8003f86:	f7fd fdc7 	bl	8001b18 <HAL_InitTick>
 8003f8a:	0003      	movs	r3, r0
}
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b004      	add	sp, #16
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40022000 	.word	0x40022000
 8003f98:	00001388 	.word	0x00001388
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	fffff0ff 	.word	0xfffff0ff
 8003fa4:	ffff8fff 	.word	0xffff8fff
 8003fa8:	08007518 	.word	0x08007518
 8003fac:	20000030 	.word	0x20000030
 8003fb0:	20000034 	.word	0x20000034

08003fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fba:	4b3c      	ldr	r3, [pc, #240]	; (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2238      	movs	r2, #56	; 0x38
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d10f      	bne.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003fc4:	4b39      	ldr	r3, [pc, #228]	; (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	0adb      	lsrs	r3, r3, #11
 8003fca:	2207      	movs	r2, #7
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2201      	movs	r2, #1
 8003fd0:	409a      	lsls	r2, r3
 8003fd2:	0013      	movs	r3, r2
 8003fd4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003fd6:	6839      	ldr	r1, [r7, #0]
 8003fd8:	4835      	ldr	r0, [pc, #212]	; (80040b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003fda:	f7fc f89d 	bl	8000118 <__udivsi3>
 8003fde:	0003      	movs	r3, r0
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	e05d      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fe4:	4b31      	ldr	r3, [pc, #196]	; (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2238      	movs	r2, #56	; 0x38
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d102      	bne.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ff0:	4b30      	ldr	r3, [pc, #192]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	e054      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ff6:	4b2d      	ldr	r3, [pc, #180]	; (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2238      	movs	r2, #56	; 0x38
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	d138      	bne.n	8004074 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004002:	4b2a      	ldr	r3, [pc, #168]	; (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	2203      	movs	r2, #3
 8004008:	4013      	ands	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800400c:	4b27      	ldr	r3, [pc, #156]	; (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	2207      	movs	r2, #7
 8004014:	4013      	ands	r3, r2
 8004016:	3301      	adds	r3, #1
 8004018:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b03      	cmp	r3, #3
 800401e:	d10d      	bne.n	800403c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004020:	68b9      	ldr	r1, [r7, #8]
 8004022:	4824      	ldr	r0, [pc, #144]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004024:	f7fc f878 	bl	8000118 <__udivsi3>
 8004028:	0003      	movs	r3, r0
 800402a:	0019      	movs	r1, r3
 800402c:	4b1f      	ldr	r3, [pc, #124]	; (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	0a1b      	lsrs	r3, r3, #8
 8004032:	227f      	movs	r2, #127	; 0x7f
 8004034:	4013      	ands	r3, r2
 8004036:	434b      	muls	r3, r1
 8004038:	617b      	str	r3, [r7, #20]
        break;
 800403a:	e00d      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	481c      	ldr	r0, [pc, #112]	; (80040b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004040:	f7fc f86a 	bl	8000118 <__udivsi3>
 8004044:	0003      	movs	r3, r0
 8004046:	0019      	movs	r1, r3
 8004048:	4b18      	ldr	r3, [pc, #96]	; (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	0a1b      	lsrs	r3, r3, #8
 800404e:	227f      	movs	r2, #127	; 0x7f
 8004050:	4013      	ands	r3, r2
 8004052:	434b      	muls	r3, r1
 8004054:	617b      	str	r3, [r7, #20]
        break;
 8004056:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004058:	4b14      	ldr	r3, [pc, #80]	; (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	0f5b      	lsrs	r3, r3, #29
 800405e:	2207      	movs	r2, #7
 8004060:	4013      	ands	r3, r2
 8004062:	3301      	adds	r3, #1
 8004064:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	6978      	ldr	r0, [r7, #20]
 800406a:	f7fc f855 	bl	8000118 <__udivsi3>
 800406e:	0003      	movs	r3, r0
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	e015      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004074:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	2238      	movs	r2, #56	; 0x38
 800407a:	4013      	ands	r3, r2
 800407c:	2b20      	cmp	r3, #32
 800407e:	d103      	bne.n	8004088 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	e00b      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004088:	4b08      	ldr	r3, [pc, #32]	; (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2238      	movs	r2, #56	; 0x38
 800408e:	4013      	ands	r3, r2
 8004090:	2b18      	cmp	r3, #24
 8004092:	d103      	bne.n	800409c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004094:	23fa      	movs	r3, #250	; 0xfa
 8004096:	01db      	lsls	r3, r3, #7
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	e001      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040a0:	693b      	ldr	r3, [r7, #16]
}
 80040a2:	0018      	movs	r0, r3
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b006      	add	sp, #24
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	40021000 	.word	0x40021000
 80040b0:	00f42400 	.word	0x00f42400
 80040b4:	007a1200 	.word	0x007a1200

080040b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040bc:	4b02      	ldr	r3, [pc, #8]	; (80040c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80040be:	681b      	ldr	r3, [r3, #0]
}
 80040c0:	0018      	movs	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	20000030 	.word	0x20000030

080040cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040cc:	b5b0      	push	{r4, r5, r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80040d0:	f7ff fff2 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 80040d4:	0004      	movs	r4, r0
 80040d6:	f7ff fb3f 	bl	8003758 <LL_RCC_GetAPB1Prescaler>
 80040da:	0003      	movs	r3, r0
 80040dc:	0b1a      	lsrs	r2, r3, #12
 80040de:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040e0:	0092      	lsls	r2, r2, #2
 80040e2:	58d3      	ldr	r3, [r2, r3]
 80040e4:	221f      	movs	r2, #31
 80040e6:	4013      	ands	r3, r2
 80040e8:	40dc      	lsrs	r4, r3
 80040ea:	0023      	movs	r3, r4
}
 80040ec:	0018      	movs	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bdb0      	pop	{r4, r5, r7, pc}
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	08007558 	.word	0x08007558

080040f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004100:	2313      	movs	r3, #19
 8004102:	18fb      	adds	r3, r7, r3
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004108:	2312      	movs	r3, #18
 800410a:	18fb      	adds	r3, r7, r3
 800410c:	2200      	movs	r2, #0
 800410e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	029b      	lsls	r3, r3, #10
 8004118:	4013      	ands	r3, r2
 800411a:	d100      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800411c:	e0a3      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800411e:	2011      	movs	r0, #17
 8004120:	183b      	adds	r3, r7, r0
 8004122:	2200      	movs	r2, #0
 8004124:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004126:	4ba5      	ldr	r3, [pc, #660]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004128:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	055b      	lsls	r3, r3, #21
 800412e:	4013      	ands	r3, r2
 8004130:	d110      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004132:	4ba2      	ldr	r3, [pc, #648]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004134:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004136:	4ba1      	ldr	r3, [pc, #644]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004138:	2180      	movs	r1, #128	; 0x80
 800413a:	0549      	lsls	r1, r1, #21
 800413c:	430a      	orrs	r2, r1
 800413e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004140:	4b9e      	ldr	r3, [pc, #632]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	055b      	lsls	r3, r3, #21
 8004148:	4013      	ands	r3, r2
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800414e:	183b      	adds	r3, r7, r0
 8004150:	2201      	movs	r2, #1
 8004152:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004154:	4b9a      	ldr	r3, [pc, #616]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	4b99      	ldr	r3, [pc, #612]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800415a:	2180      	movs	r1, #128	; 0x80
 800415c:	0049      	lsls	r1, r1, #1
 800415e:	430a      	orrs	r2, r1
 8004160:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004162:	f7fd fd35 	bl	8001bd0 <HAL_GetTick>
 8004166:	0003      	movs	r3, r0
 8004168:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800416a:	e00b      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800416c:	f7fd fd30 	bl	8001bd0 <HAL_GetTick>
 8004170:	0002      	movs	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d904      	bls.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800417a:	2313      	movs	r3, #19
 800417c:	18fb      	adds	r3, r7, r3
 800417e:	2203      	movs	r2, #3
 8004180:	701a      	strb	r2, [r3, #0]
        break;
 8004182:	e005      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004184:	4b8e      	ldr	r3, [pc, #568]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	4013      	ands	r3, r2
 800418e:	d0ed      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004190:	2313      	movs	r3, #19
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d154      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800419a:	4b88      	ldr	r3, [pc, #544]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800419c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800419e:	23c0      	movs	r3, #192	; 0xc0
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4013      	ands	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d019      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d014      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041b6:	4b81      	ldr	r3, [pc, #516]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ba:	4a82      	ldr	r2, [pc, #520]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80041bc:	4013      	ands	r3, r2
 80041be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041c0:	4b7e      	ldr	r3, [pc, #504]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041c4:	4b7d      	ldr	r3, [pc, #500]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041c6:	2180      	movs	r1, #128	; 0x80
 80041c8:	0249      	lsls	r1, r1, #9
 80041ca:	430a      	orrs	r2, r1
 80041cc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041ce:	4b7b      	ldr	r3, [pc, #492]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041d2:	4b7a      	ldr	r3, [pc, #488]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041d4:	497c      	ldr	r1, [pc, #496]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80041d6:	400a      	ands	r2, r1
 80041d8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041da:	4b78      	ldr	r3, [pc, #480]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2201      	movs	r2, #1
 80041e4:	4013      	ands	r3, r2
 80041e6:	d016      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7fd fcf2 	bl	8001bd0 <HAL_GetTick>
 80041ec:	0003      	movs	r3, r0
 80041ee:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041f0:	e00c      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f2:	f7fd fced 	bl	8001bd0 <HAL_GetTick>
 80041f6:	0002      	movs	r2, r0
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	4a73      	ldr	r2, [pc, #460]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d904      	bls.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004202:	2313      	movs	r3, #19
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	2203      	movs	r2, #3
 8004208:	701a      	strb	r2, [r3, #0]
            break;
 800420a:	e004      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800420c:	4b6b      	ldr	r3, [pc, #428]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004210:	2202      	movs	r2, #2
 8004212:	4013      	ands	r3, r2
 8004214:	d0ed      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004216:	2313      	movs	r3, #19
 8004218:	18fb      	adds	r3, r7, r3
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004220:	4b66      	ldr	r3, [pc, #408]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004224:	4a67      	ldr	r2, [pc, #412]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004226:	4013      	ands	r3, r2
 8004228:	0019      	movs	r1, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800422e:	4b63      	ldr	r3, [pc, #396]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004230:	430a      	orrs	r2, r1
 8004232:	65da      	str	r2, [r3, #92]	; 0x5c
 8004234:	e00c      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004236:	2312      	movs	r3, #18
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	2213      	movs	r2, #19
 800423c:	18ba      	adds	r2, r7, r2
 800423e:	7812      	ldrb	r2, [r2, #0]
 8004240:	701a      	strb	r2, [r3, #0]
 8004242:	e005      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004244:	2312      	movs	r3, #18
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	2213      	movs	r2, #19
 800424a:	18ba      	adds	r2, r7, r2
 800424c:	7812      	ldrb	r2, [r2, #0]
 800424e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004250:	2311      	movs	r3, #17
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d105      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800425a:	4b58      	ldr	r3, [pc, #352]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800425c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800425e:	4b57      	ldr	r3, [pc, #348]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004260:	495b      	ldr	r1, [pc, #364]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004262:	400a      	ands	r2, r1
 8004264:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2201      	movs	r2, #1
 800426c:	4013      	ands	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004270:	4b52      	ldr	r3, [pc, #328]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	2203      	movs	r2, #3
 8004276:	4393      	bics	r3, r2
 8004278:	0019      	movs	r1, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	4b4f      	ldr	r3, [pc, #316]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004280:	430a      	orrs	r2, r1
 8004282:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2210      	movs	r2, #16
 800428a:	4013      	ands	r3, r2
 800428c:	d009      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800428e:	4b4b      	ldr	r3, [pc, #300]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	4a50      	ldr	r2, [pc, #320]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004294:	4013      	ands	r3, r2
 8004296:	0019      	movs	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	4b47      	ldr	r3, [pc, #284]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800429e:	430a      	orrs	r2, r1
 80042a0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	2380      	movs	r3, #128	; 0x80
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4013      	ands	r3, r2
 80042ac:	d009      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042ae:	4b43      	ldr	r3, [pc, #268]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b2:	4a49      	ldr	r2, [pc, #292]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	0019      	movs	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	4b3f      	ldr	r3, [pc, #252]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042be:	430a      	orrs	r2, r1
 80042c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	2380      	movs	r3, #128	; 0x80
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	4013      	ands	r3, r2
 80042cc:	d009      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042ce:	4b3b      	ldr	r3, [pc, #236]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d2:	4a42      	ldr	r2, [pc, #264]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	0019      	movs	r1, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699a      	ldr	r2, [r3, #24]
 80042dc:	4b37      	ldr	r3, [pc, #220]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042de:	430a      	orrs	r2, r1
 80042e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2220      	movs	r2, #32
 80042e8:	4013      	ands	r3, r2
 80042ea:	d009      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042ec:	4b33      	ldr	r3, [pc, #204]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f0:	4a3b      	ldr	r2, [pc, #236]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	0019      	movs	r1, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	4b30      	ldr	r3, [pc, #192]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042fc:	430a      	orrs	r2, r1
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	01db      	lsls	r3, r3, #7
 8004308:	4013      	ands	r3, r2
 800430a:	d015      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800430c:	4b2b      	ldr	r3, [pc, #172]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800430e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	0899      	lsrs	r1, r3, #2
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69da      	ldr	r2, [r3, #28]
 8004318:	4b28      	ldr	r3, [pc, #160]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800431a:	430a      	orrs	r2, r1
 800431c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69da      	ldr	r2, [r3, #28]
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	05db      	lsls	r3, r3, #23
 8004326:	429a      	cmp	r2, r3
 8004328:	d106      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800432a:	4b24      	ldr	r3, [pc, #144]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	4b23      	ldr	r3, [pc, #140]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004330:	2180      	movs	r1, #128	; 0x80
 8004332:	0249      	lsls	r1, r1, #9
 8004334:	430a      	orrs	r2, r1
 8004336:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	2380      	movs	r3, #128	; 0x80
 800433e:	039b      	lsls	r3, r3, #14
 8004340:	4013      	ands	r3, r2
 8004342:	d016      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004344:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004348:	4a26      	ldr	r2, [pc, #152]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800434a:	4013      	ands	r3, r2
 800434c:	0019      	movs	r1, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1a      	ldr	r2, [r3, #32]
 8004352:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004354:	430a      	orrs	r2, r1
 8004356:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1a      	ldr	r2, [r3, #32]
 800435c:	2380      	movs	r3, #128	; 0x80
 800435e:	03db      	lsls	r3, r3, #15
 8004360:	429a      	cmp	r2, r3
 8004362:	d106      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004364:	4b15      	ldr	r3, [pc, #84]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	4b14      	ldr	r3, [pc, #80]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800436a:	2180      	movs	r1, #128	; 0x80
 800436c:	0449      	lsls	r1, r1, #17
 800436e:	430a      	orrs	r2, r1
 8004370:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	4013      	ands	r3, r2
 800437c:	d016      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800437e:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	4a19      	ldr	r2, [pc, #100]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004384:	4013      	ands	r3, r2
 8004386:	0019      	movs	r1, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800438e:	430a      	orrs	r2, r1
 8004390:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	2380      	movs	r3, #128	; 0x80
 8004398:	01db      	lsls	r3, r3, #7
 800439a:	429a      	cmp	r2, r3
 800439c:	d106      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800439e:	4b07      	ldr	r3, [pc, #28]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	4b06      	ldr	r3, [pc, #24]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043a4:	2180      	movs	r1, #128	; 0x80
 80043a6:	0249      	lsls	r1, r1, #9
 80043a8:	430a      	orrs	r2, r1
 80043aa:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80043ac:	2312      	movs	r3, #18
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	781b      	ldrb	r3, [r3, #0]
}
 80043b2:	0018      	movs	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b006      	add	sp, #24
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40007000 	.word	0x40007000
 80043c4:	fffffcff 	.word	0xfffffcff
 80043c8:	fffeffff 	.word	0xfffeffff
 80043cc:	00001388 	.word	0x00001388
 80043d0:	efffffff 	.word	0xefffffff
 80043d4:	fffff3ff 	.word	0xfffff3ff
 80043d8:	fff3ffff 	.word	0xfff3ffff
 80043dc:	ffcfffff 	.word	0xffcfffff
 80043e0:	ffffcfff 	.word	0xffffcfff
 80043e4:	ffbfffff 	.word	0xffbfffff
 80043e8:	ffff3fff 	.word	0xffff3fff

080043ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043ec:	b5b0      	push	{r4, r5, r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043f4:	230f      	movs	r3, #15
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d100      	bne.n	8004404 <HAL_RTC_Init+0x18>
 8004402:	e08c      	b.n	800451e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2229      	movs	r2, #41	; 0x29
 8004408:	5c9b      	ldrb	r3, [r3, r2]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2228      	movs	r2, #40	; 0x28
 8004414:	2100      	movs	r1, #0
 8004416:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2288      	movs	r2, #136	; 0x88
 800441c:	0212      	lsls	r2, r2, #8
 800441e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	0018      	movs	r0, r3
 8004424:	f7fd f976 	bl	8001714 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2229      	movs	r2, #41	; 0x29
 800442c:	2102      	movs	r1, #2
 800442e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	2210      	movs	r2, #16
 8004438:	4013      	ands	r3, r2
 800443a:	2b10      	cmp	r3, #16
 800443c:	d062      	beq.n	8004504 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	22ca      	movs	r2, #202	; 0xca
 8004444:	625a      	str	r2, [r3, #36]	; 0x24
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2253      	movs	r2, #83	; 0x53
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800444e:	250f      	movs	r5, #15
 8004450:	197c      	adds	r4, r7, r5
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	0018      	movs	r0, r3
 8004456:	f000 fe80 	bl	800515a <RTC_EnterInitMode>
 800445a:	0003      	movs	r3, r0
 800445c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800445e:	0028      	movs	r0, r5
 8004460:	183b      	adds	r3, r7, r0
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d12c      	bne.n	80044c2 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	492e      	ldr	r1, [pc, #184]	; (800452c <HAL_RTC_Init+0x140>)
 8004474:	400a      	ands	r2, r1
 8004476:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6999      	ldr	r1, [r3, #24]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6912      	ldr	r2, [r2, #16]
 800449e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6919      	ldr	r1, [r3, #16]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	041a      	lsls	r2, r3, #16
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80044b4:	183c      	adds	r4, r7, r0
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	0018      	movs	r0, r3
 80044ba:	f000 fe91 	bl	80051e0 <RTC_ExitInitMode>
 80044be:	0003      	movs	r3, r0
 80044c0:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80044c2:	230f      	movs	r3, #15
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d116      	bne.n	80044fa <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	00d2      	lsls	r2, r2, #3
 80044d8:	08d2      	lsrs	r2, r2, #3
 80044da:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6999      	ldr	r1, [r3, #24]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	22ff      	movs	r2, #255	; 0xff
 8004500:	625a      	str	r2, [r3, #36]	; 0x24
 8004502:	e003      	b.n	800450c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004504:	230f      	movs	r3, #15
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	2200      	movs	r2, #0
 800450a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800450c:	230f      	movs	r3, #15
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d103      	bne.n	800451e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2229      	movs	r2, #41	; 0x29
 800451a:	2101      	movs	r1, #1
 800451c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800451e:	230f      	movs	r3, #15
 8004520:	18fb      	adds	r3, r7, r3
 8004522:	781b      	ldrb	r3, [r3, #0]
}
 8004524:	0018      	movs	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	b004      	add	sp, #16
 800452a:	bdb0      	pop	{r4, r5, r7, pc}
 800452c:	fb8fffbf 	.word	0xfb8fffbf

08004530 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004530:	b5b0      	push	{r4, r5, r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2228      	movs	r2, #40	; 0x28
 8004540:	5c9b      	ldrb	r3, [r3, r2]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_RTC_SetTime+0x1a>
 8004546:	2302      	movs	r3, #2
 8004548:	e092      	b.n	8004670 <HAL_RTC_SetTime+0x140>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2228      	movs	r2, #40	; 0x28
 800454e:	2101      	movs	r1, #1
 8004550:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2229      	movs	r2, #41	; 0x29
 8004556:	2102      	movs	r1, #2
 8004558:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	22ca      	movs	r2, #202	; 0xca
 8004560:	625a      	str	r2, [r3, #36]	; 0x24
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2253      	movs	r2, #83	; 0x53
 8004568:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800456a:	2513      	movs	r5, #19
 800456c:	197c      	adds	r4, r7, r5
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	0018      	movs	r0, r3
 8004572:	f000 fdf2 	bl	800515a <RTC_EnterInitMode>
 8004576:	0003      	movs	r3, r0
 8004578:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800457a:	197b      	adds	r3, r7, r5
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d162      	bne.n	8004648 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d125      	bne.n	80045d4 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2240      	movs	r2, #64	; 0x40
 8004590:	4013      	ands	r3, r2
 8004592:	d102      	bne.n	800459a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2200      	movs	r2, #0
 8004598:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	0018      	movs	r0, r3
 80045a0:	f000 fe62 	bl	8005268 <RTC_ByteToBcd2>
 80045a4:	0003      	movs	r3, r0
 80045a6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	785b      	ldrb	r3, [r3, #1]
 80045ac:	0018      	movs	r0, r3
 80045ae:	f000 fe5b 	bl	8005268 <RTC_ByteToBcd2>
 80045b2:	0003      	movs	r3, r0
 80045b4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045b6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	789b      	ldrb	r3, [r3, #2]
 80045bc:	0018      	movs	r0, r3
 80045be:	f000 fe53 	bl	8005268 <RTC_ByteToBcd2>
 80045c2:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045c4:	0022      	movs	r2, r4
 80045c6:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	78db      	ldrb	r3, [r3, #3]
 80045cc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	e017      	b.n	8004604 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	2240      	movs	r2, #64	; 0x40
 80045dc:	4013      	ands	r3, r2
 80045de:	d102      	bne.n	80045e6 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2200      	movs	r2, #0
 80045e4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	785b      	ldrb	r3, [r3, #1]
 80045f0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045f2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045f8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	78db      	ldrb	r3, [r3, #3]
 80045fe:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	491b      	ldr	r1, [pc, #108]	; (8004678 <HAL_RTC_SetTime+0x148>)
 800460c:	400a      	ands	r2, r1
 800460e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4918      	ldr	r1, [pc, #96]	; (800467c <HAL_RTC_SetTime+0x14c>)
 800461c:	400a      	ands	r2, r1
 800461e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6999      	ldr	r1, [r3, #24]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	431a      	orrs	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004638:	2313      	movs	r3, #19
 800463a:	18fc      	adds	r4, r7, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	0018      	movs	r0, r3
 8004640:	f000 fdce 	bl	80051e0 <RTC_ExitInitMode>
 8004644:	0003      	movs	r3, r0
 8004646:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	22ff      	movs	r2, #255	; 0xff
 800464e:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004650:	2313      	movs	r3, #19
 8004652:	18fb      	adds	r3, r7, r3
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d103      	bne.n	8004662 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2229      	movs	r2, #41	; 0x29
 800465e:	2101      	movs	r1, #1
 8004660:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2228      	movs	r2, #40	; 0x28
 8004666:	2100      	movs	r1, #0
 8004668:	5499      	strb	r1, [r3, r2]

  return status;
 800466a:	2313      	movs	r3, #19
 800466c:	18fb      	adds	r3, r7, r3
 800466e:	781b      	ldrb	r3, [r3, #0]
}
 8004670:	0018      	movs	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	b006      	add	sp, #24
 8004676:	bdb0      	pop	{r4, r5, r7, pc}
 8004678:	007f7f7f 	.word	0x007f7f7f
 800467c:	fffbffff 	.word	0xfffbffff

08004680 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	045b      	lsls	r3, r3, #17
 800469e:	0c5a      	lsrs	r2, r3, #17
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a22      	ldr	r2, [pc, #136]	; (8004734 <HAL_RTC_GetTime+0xb4>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	0c1b      	lsrs	r3, r3, #16
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	223f      	movs	r2, #63	; 0x3f
 80046b8:	4013      	ands	r3, r2
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	0a1b      	lsrs	r3, r3, #8
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	227f      	movs	r2, #127	; 0x7f
 80046c8:	4013      	ands	r3, r2
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	227f      	movs	r2, #127	; 0x7f
 80046d6:	4013      	ands	r3, r2
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	0d9b      	lsrs	r3, r3, #22
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2201      	movs	r2, #1
 80046e6:	4013      	ands	r3, r2
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d11a      	bne.n	800472a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	0018      	movs	r0, r3
 80046fa:	f000 fddd 	bl	80052b8 <RTC_Bcd2ToByte>
 80046fe:	0003      	movs	r3, r0
 8004700:	001a      	movs	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	785b      	ldrb	r3, [r3, #1]
 800470a:	0018      	movs	r0, r3
 800470c:	f000 fdd4 	bl	80052b8 <RTC_Bcd2ToByte>
 8004710:	0003      	movs	r3, r0
 8004712:	001a      	movs	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	789b      	ldrb	r3, [r3, #2]
 800471c:	0018      	movs	r0, r3
 800471e:	f000 fdcb 	bl	80052b8 <RTC_Bcd2ToByte>
 8004722:	0003      	movs	r3, r0
 8004724:	001a      	movs	r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	0018      	movs	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	b006      	add	sp, #24
 8004732:	bd80      	pop	{r7, pc}
 8004734:	007f7f7f 	.word	0x007f7f7f

08004738 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004738:	b5b0      	push	{r4, r5, r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2228      	movs	r2, #40	; 0x28
 8004748:	5c9b      	ldrb	r3, [r3, r2]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_RTC_SetDate+0x1a>
 800474e:	2302      	movs	r3, #2
 8004750:	e07e      	b.n	8004850 <HAL_RTC_SetDate+0x118>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2228      	movs	r2, #40	; 0x28
 8004756:	2101      	movs	r1, #1
 8004758:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2229      	movs	r2, #41	; 0x29
 800475e:	2102      	movs	r1, #2
 8004760:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10e      	bne.n	8004786 <HAL_RTC_SetDate+0x4e>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	785b      	ldrb	r3, [r3, #1]
 800476c:	001a      	movs	r2, r3
 800476e:	2310      	movs	r3, #16
 8004770:	4013      	ands	r3, r2
 8004772:	d008      	beq.n	8004786 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	785b      	ldrb	r3, [r3, #1]
 8004778:	2210      	movs	r2, #16
 800477a:	4393      	bics	r3, r2
 800477c:	b2db      	uxtb	r3, r3
 800477e:	330a      	adds	r3, #10
 8004780:	b2da      	uxtb	r2, r3
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d11c      	bne.n	80047c6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	78db      	ldrb	r3, [r3, #3]
 8004790:	0018      	movs	r0, r3
 8004792:	f000 fd69 	bl	8005268 <RTC_ByteToBcd2>
 8004796:	0003      	movs	r3, r0
 8004798:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	785b      	ldrb	r3, [r3, #1]
 800479e:	0018      	movs	r0, r3
 80047a0:	f000 fd62 	bl	8005268 <RTC_ByteToBcd2>
 80047a4:	0003      	movs	r3, r0
 80047a6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80047a8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	789b      	ldrb	r3, [r3, #2]
 80047ae:	0018      	movs	r0, r3
 80047b0:	f000 fd5a 	bl	8005268 <RTC_ByteToBcd2>
 80047b4:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80047b6:	0022      	movs	r2, r4
 80047b8:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	e00e      	b.n	80047e4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	78db      	ldrb	r3, [r3, #3]
 80047ca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	785b      	ldrb	r3, [r3, #1]
 80047d0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80047d2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80047d8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	22ca      	movs	r2, #202	; 0xca
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2253      	movs	r2, #83	; 0x53
 80047f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80047f4:	2513      	movs	r5, #19
 80047f6:	197c      	adds	r4, r7, r5
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	0018      	movs	r0, r3
 80047fc:	f000 fcad 	bl	800515a <RTC_EnterInitMode>
 8004800:	0003      	movs	r3, r0
 8004802:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004804:	0028      	movs	r0, r5
 8004806:	183b      	adds	r3, r7, r0
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10c      	bne.n	8004828 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4910      	ldr	r1, [pc, #64]	; (8004858 <HAL_RTC_SetDate+0x120>)
 8004816:	400a      	ands	r2, r1
 8004818:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800481a:	183c      	adds	r4, r7, r0
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	0018      	movs	r0, r3
 8004820:	f000 fcde 	bl	80051e0 <RTC_ExitInitMode>
 8004824:	0003      	movs	r3, r0
 8004826:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	22ff      	movs	r2, #255	; 0xff
 800482e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004830:	2313      	movs	r3, #19
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d103      	bne.n	8004842 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2229      	movs	r2, #41	; 0x29
 800483e:	2101      	movs	r1, #1
 8004840:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2228      	movs	r2, #40	; 0x28
 8004846:	2100      	movs	r1, #0
 8004848:	5499      	strb	r1, [r3, r2]

  return status;
 800484a:	2313      	movs	r3, #19
 800484c:	18fb      	adds	r3, r7, r3
 800484e:	781b      	ldrb	r3, [r3, #0]
}
 8004850:	0018      	movs	r0, r3
 8004852:	46bd      	mov	sp, r7
 8004854:	b006      	add	sp, #24
 8004856:	bdb0      	pop	{r4, r5, r7, pc}
 8004858:	00ffff3f 	.word	0x00ffff3f

0800485c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	4a21      	ldr	r2, [pc, #132]	; (80048f4 <HAL_RTC_GetDate+0x98>)
 8004870:	4013      	ands	r3, r2
 8004872:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	0c1b      	lsrs	r3, r3, #16
 8004878:	b2da      	uxtb	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	0a1b      	lsrs	r3, r3, #8
 8004882:	b2db      	uxtb	r3, r3
 8004884:	221f      	movs	r2, #31
 8004886:	4013      	ands	r3, r2
 8004888:	b2da      	uxtb	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	223f      	movs	r2, #63	; 0x3f
 8004894:	4013      	ands	r3, r2
 8004896:	b2da      	uxtb	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	0b5b      	lsrs	r3, r3, #13
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2207      	movs	r2, #7
 80048a4:	4013      	ands	r3, r2
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d11a      	bne.n	80048e8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	78db      	ldrb	r3, [r3, #3]
 80048b6:	0018      	movs	r0, r3
 80048b8:	f000 fcfe 	bl	80052b8 <RTC_Bcd2ToByte>
 80048bc:	0003      	movs	r3, r0
 80048be:	001a      	movs	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	785b      	ldrb	r3, [r3, #1]
 80048c8:	0018      	movs	r0, r3
 80048ca:	f000 fcf5 	bl	80052b8 <RTC_Bcd2ToByte>
 80048ce:	0003      	movs	r3, r0
 80048d0:	001a      	movs	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	789b      	ldrb	r3, [r3, #2]
 80048da:	0018      	movs	r0, r3
 80048dc:	f000 fcec 	bl	80052b8 <RTC_Bcd2ToByte>
 80048e0:	0003      	movs	r3, r0
 80048e2:	001a      	movs	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	0018      	movs	r0, r3
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b006      	add	sp, #24
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	00ffff3f 	.word	0x00ffff3f

080048f8 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80048f8:	b590      	push	{r4, r7, lr}
 80048fa:	b089      	sub	sp, #36	; 0x24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2228      	movs	r2, #40	; 0x28
 8004908:	5c9b      	ldrb	r3, [r3, r2]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_RTC_SetAlarm+0x1a>
 800490e:	2302      	movs	r3, #2
 8004910:	e10c      	b.n	8004b2c <HAL_RTC_SetAlarm+0x234>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2228      	movs	r2, #40	; 0x28
 8004916:	2101      	movs	r1, #1
 8004918:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2229      	movs	r2, #41	; 0x29
 800491e:	2102      	movs	r1, #2
 8004920:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d136      	bne.n	8004996 <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2240      	movs	r2, #64	; 0x40
 8004930:	4013      	ands	r3, r2
 8004932:	d102      	bne.n	800493a <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2200      	movs	r2, #0
 8004938:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	0018      	movs	r0, r3
 8004940:	f000 fc92 	bl	8005268 <RTC_ByteToBcd2>
 8004944:	0003      	movs	r3, r0
 8004946:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	785b      	ldrb	r3, [r3, #1]
 800494c:	0018      	movs	r0, r3
 800494e:	f000 fc8b 	bl	8005268 <RTC_ByteToBcd2>
 8004952:	0003      	movs	r3, r0
 8004954:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004956:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	789b      	ldrb	r3, [r3, #2]
 800495c:	0018      	movs	r0, r3
 800495e:	f000 fc83 	bl	8005268 <RTC_ByteToBcd2>
 8004962:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004964:	0022      	movs	r2, r4
 8004966:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	78db      	ldrb	r3, [r3, #3]
 800496c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800496e:	431a      	orrs	r2, r3
 8004970:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2220      	movs	r2, #32
 8004976:	5c9b      	ldrb	r3, [r3, r2]
 8004978:	0018      	movs	r0, r3
 800497a:	f000 fc75 	bl	8005268 <RTC_ByteToBcd2>
 800497e:	0003      	movs	r3, r0
 8004980:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004982:	0022      	movs	r2, r4
 8004984:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800498a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004990:	4313      	orrs	r3, r2
 8004992:	61fb      	str	r3, [r7, #28]
 8004994:	e022      	b.n	80049dc <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	2240      	movs	r2, #64	; 0x40
 800499e:	4013      	ands	r3, r2
 80049a0:	d102      	bne.n	80049a8 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2200      	movs	r2, #0
 80049a6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	785b      	ldrb	r3, [r3, #1]
 80049b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049b4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80049ba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	78db      	ldrb	r3, [r3, #3]
 80049c0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80049c2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2120      	movs	r1, #32
 80049c8:	5c5b      	ldrb	r3, [r3, r1]
 80049ca:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80049cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80049d2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049d8:	4313      	orrs	r3, r2
 80049da:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	22ca      	movs	r2, #202	; 0xca
 80049ee:	625a      	str	r2, [r3, #36]	; 0x24
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2253      	movs	r2, #83	; 0x53
 80049f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049fc:	2380      	movs	r3, #128	; 0x80
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d143      	bne.n	8004a8c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4949      	ldr	r1, [pc, #292]	; (8004b34 <HAL_RTC_SetAlarm+0x23c>)
 8004a10:	400a      	ands	r2, r1
 8004a12:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4946      	ldr	r1, [pc, #280]	; (8004b38 <HAL_RTC_SetAlarm+0x240>)
 8004a20:	400a      	ands	r2, r1
 8004a22:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004a24:	f7fd f8d4 	bl	8001bd0 <HAL_GetTick>
 8004a28:	0003      	movs	r3, r0
 8004a2a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004a2c:	e016      	b.n	8004a5c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a2e:	f7fd f8cf 	bl	8001bd0 <HAL_GetTick>
 8004a32:	0002      	movs	r2, r0
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	1ad2      	subs	r2, r2, r3
 8004a38:	23fa      	movs	r3, #250	; 0xfa
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d90d      	bls.n	8004a5c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	22ff      	movs	r2, #255	; 0xff
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2229      	movs	r2, #41	; 0x29
 8004a4c:	2103      	movs	r1, #3
 8004a4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2228      	movs	r2, #40	; 0x28
 8004a54:	2100      	movs	r1, #0
 8004a56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e067      	b.n	8004b2c <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	4013      	ands	r3, r2
 8004a66:	d0e2      	beq.n	8004a2e <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2180      	movs	r1, #128	; 0x80
 8004a84:	0049      	lsls	r1, r1, #1
 8004a86:	430a      	orrs	r2, r1
 8004a88:	619a      	str	r2, [r3, #24]
 8004a8a:	e042      	b.n	8004b12 <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4929      	ldr	r1, [pc, #164]	; (8004b3c <HAL_RTC_SetAlarm+0x244>)
 8004a98:	400a      	ands	r2, r1
 8004a9a:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4926      	ldr	r1, [pc, #152]	; (8004b40 <HAL_RTC_SetAlarm+0x248>)
 8004aa8:	400a      	ands	r2, r1
 8004aaa:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004aac:	f7fd f890 	bl	8001bd0 <HAL_GetTick>
 8004ab0:	0003      	movs	r3, r0
 8004ab2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004ab4:	e016      	b.n	8004ae4 <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ab6:	f7fd f88b 	bl	8001bd0 <HAL_GetTick>
 8004aba:	0002      	movs	r2, r0
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	1ad2      	subs	r2, r2, r3
 8004ac0:	23fa      	movs	r3, #250	; 0xfa
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d90d      	bls.n	8004ae4 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	22ff      	movs	r2, #255	; 0xff
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2229      	movs	r2, #41	; 0x29
 8004ad4:	2103      	movs	r1, #3
 8004ad6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2228      	movs	r2, #40	; 0x28
 8004adc:	2100      	movs	r1, #0
 8004ade:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e023      	b.n	8004b2c <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	2202      	movs	r2, #2
 8004aec:	4013      	ands	r3, r2
 8004aee:	d0e2      	beq.n	8004ab6 <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	69fa      	ldr	r2, [r7, #28]
 8004af6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2180      	movs	r1, #128	; 0x80
 8004b0c:	0089      	lsls	r1, r1, #2
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	22ff      	movs	r2, #255	; 0xff
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2229      	movs	r2, #41	; 0x29
 8004b1e:	2101      	movs	r1, #1
 8004b20:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2228      	movs	r2, #40	; 0x28
 8004b26:	2100      	movs	r1, #0
 8004b28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b009      	add	sp, #36	; 0x24
 8004b32:	bd90      	pop	{r4, r7, pc}
 8004b34:	fffffeff 	.word	0xfffffeff
 8004b38:	ffffefff 	.word	0xffffefff
 8004b3c:	fffffdff 	.word	0xfffffdff
 8004b40:	ffffdfff 	.word	0xffffdfff

08004b44 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004b44:	b590      	push	{r4, r7, lr}
 8004b46:	b089      	sub	sp, #36	; 0x24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2228      	movs	r2, #40	; 0x28
 8004b54:	5c9b      	ldrb	r3, [r3, r2]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <HAL_RTC_SetAlarm_IT+0x1a>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e127      	b.n	8004dae <HAL_RTC_SetAlarm_IT+0x26a>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2228      	movs	r2, #40	; 0x28
 8004b62:	2101      	movs	r1, #1
 8004b64:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2229      	movs	r2, #41	; 0x29
 8004b6a:	2102      	movs	r1, #2
 8004b6c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d136      	bne.n	8004be2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	2240      	movs	r2, #64	; 0x40
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d102      	bne.n	8004b86 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2200      	movs	r2, #0
 8004b84:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f000 fb6c 	bl	8005268 <RTC_ByteToBcd2>
 8004b90:	0003      	movs	r3, r0
 8004b92:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	785b      	ldrb	r3, [r3, #1]
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f000 fb65 	bl	8005268 <RTC_ByteToBcd2>
 8004b9e:	0003      	movs	r3, r0
 8004ba0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ba2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	789b      	ldrb	r3, [r3, #2]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f000 fb5d 	bl	8005268 <RTC_ByteToBcd2>
 8004bae:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004bb0:	0022      	movs	r2, r4
 8004bb2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	78db      	ldrb	r3, [r3, #3]
 8004bb8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	5c9b      	ldrb	r3, [r3, r2]
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f000 fb4f 	bl	8005268 <RTC_ByteToBcd2>
 8004bca:	0003      	movs	r3, r0
 8004bcc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004bce:	0022      	movs	r2, r4
 8004bd0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004bd6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	61fb      	str	r3, [r7, #28]
 8004be0:	e022      	b.n	8004c28 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	2240      	movs	r2, #64	; 0x40
 8004bea:	4013      	ands	r3, r2
 8004bec:	d102      	bne.n	8004bf4 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	785b      	ldrb	r3, [r3, #1]
 8004bfe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c00:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004c06:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	78db      	ldrb	r3, [r3, #3]
 8004c0c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c0e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2120      	movs	r1, #32
 8004c14:	5c5b      	ldrb	r3, [r3, r1]
 8004c16:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004c18:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004c1e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c24:	4313      	orrs	r3, r2
 8004c26:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	22ca      	movs	r2, #202	; 0xca
 8004c3a:	625a      	str	r2, [r3, #36]	; 0x24
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2253      	movs	r2, #83	; 0x53
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d14c      	bne.n	8004cea <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4957      	ldr	r1, [pc, #348]	; (8004db8 <HAL_RTC_SetAlarm_IT+0x274>)
 8004c5c:	400a      	ands	r2, r1
 8004c5e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8004c70:	f7fc ffae 	bl	8001bd0 <HAL_GetTick>
 8004c74:	0003      	movs	r3, r0
 8004c76:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004c78:	e016      	b.n	8004ca8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c7a:	f7fc ffa9 	bl	8001bd0 <HAL_GetTick>
 8004c7e:	0002      	movs	r2, r0
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	1ad2      	subs	r2, r2, r3
 8004c84:	23fa      	movs	r3, #250	; 0xfa
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d90d      	bls.n	8004ca8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	22ff      	movs	r2, #255	; 0xff
 8004c92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2229      	movs	r2, #41	; 0x29
 8004c98:	2103      	movs	r1, #3
 8004c9a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2228      	movs	r2, #40	; 0x28
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e082      	b.n	8004dae <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d0e2      	beq.n	8004c7a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2180      	movs	r1, #128	; 0x80
 8004cd0:	0049      	lsls	r1, r1, #1
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699a      	ldr	r2, [r3, #24]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2180      	movs	r1, #128	; 0x80
 8004ce2:	0149      	lsls	r1, r1, #5
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	619a      	str	r2, [r3, #24]
 8004ce8:	e04b      	b.n	8004d82 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4931      	ldr	r1, [pc, #196]	; (8004dbc <HAL_RTC_SetAlarm_IT+0x278>)
 8004cf6:	400a      	ands	r2, r1
 8004cf8:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2102      	movs	r1, #2
 8004d06:	430a      	orrs	r2, r1
 8004d08:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8004d0a:	f7fc ff61 	bl	8001bd0 <HAL_GetTick>
 8004d0e:	0003      	movs	r3, r0
 8004d10:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004d12:	e016      	b.n	8004d42 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d14:	f7fc ff5c 	bl	8001bd0 <HAL_GetTick>
 8004d18:	0002      	movs	r2, r0
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	1ad2      	subs	r2, r2, r3
 8004d1e:	23fa      	movs	r3, #250	; 0xfa
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d90d      	bls.n	8004d42 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	22ff      	movs	r2, #255	; 0xff
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2229      	movs	r2, #41	; 0x29
 8004d32:	2103      	movs	r1, #3
 8004d34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2228      	movs	r2, #40	; 0x28
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e035      	b.n	8004dae <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d0e2      	beq.n	8004d14 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699a      	ldr	r2, [r3, #24]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2180      	movs	r1, #128	; 0x80
 8004d6a:	0089      	lsls	r1, r1, #2
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699a      	ldr	r2, [r3, #24]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2180      	movs	r1, #128	; 0x80
 8004d7c:	0189      	lsls	r1, r1, #6
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004d82:	4a0f      	ldr	r2, [pc, #60]	; (8004dc0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	58d3      	ldr	r3, [r2, r3]
 8004d88:	490d      	ldr	r1, [pc, #52]	; (8004dc0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004d8a:	2280      	movs	r2, #128	; 0x80
 8004d8c:	0312      	lsls	r2, r2, #12
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	2280      	movs	r2, #128	; 0x80
 8004d92:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	22ff      	movs	r2, #255	; 0xff
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2229      	movs	r2, #41	; 0x29
 8004da0:	2101      	movs	r1, #1
 8004da2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2228      	movs	r2, #40	; 0x28
 8004da8:	2100      	movs	r1, #0
 8004daa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	0018      	movs	r0, r3
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b009      	add	sp, #36	; 0x24
 8004db4:	bd90      	pop	{r4, r7, pc}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	fffffeff 	.word	0xfffffeff
 8004dbc:	fffffdff 	.word	0xfffffdff
 8004dc0:	40021800 	.word	0x40021800

08004dc4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2228      	movs	r2, #40	; 0x28
 8004dd2:	5c9b      	ldrb	r3, [r3, r2]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_RTC_DeactivateAlarm+0x18>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e086      	b.n	8004eea <HAL_RTC_DeactivateAlarm+0x126>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2228      	movs	r2, #40	; 0x28
 8004de0:	2101      	movs	r1, #1
 8004de2:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2229      	movs	r2, #41	; 0x29
 8004de8:	2102      	movs	r1, #2
 8004dea:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	22ca      	movs	r2, #202	; 0xca
 8004df2:	625a      	str	r2, [r3, #36]	; 0x24
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2253      	movs	r2, #83	; 0x53
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	2380      	movs	r3, #128	; 0x80
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d132      	bne.n	8004e6c <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699a      	ldr	r2, [r3, #24]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4938      	ldr	r1, [pc, #224]	; (8004ef4 <HAL_RTC_DeactivateAlarm+0x130>)
 8004e12:	400a      	ands	r2, r1
 8004e14:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699a      	ldr	r2, [r3, #24]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4935      	ldr	r1, [pc, #212]	; (8004ef8 <HAL_RTC_DeactivateAlarm+0x134>)
 8004e22:	400a      	ands	r2, r1
 8004e24:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004e26:	f7fc fed3 	bl	8001bd0 <HAL_GetTick>
 8004e2a:	0003      	movs	r3, r0
 8004e2c:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004e2e:	e016      	b.n	8004e5e <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if( (HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e30:	f7fc fece 	bl	8001bd0 <HAL_GetTick>
 8004e34:	0002      	movs	r2, r0
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1ad2      	subs	r2, r2, r3
 8004e3a:	23fa      	movs	r3, #250	; 0xfa
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d90d      	bls.n	8004e5e <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	22ff      	movs	r2, #255	; 0xff
 8004e48:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2229      	movs	r2, #41	; 0x29
 8004e4e:	2103      	movs	r1, #3
 8004e50:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2228      	movs	r2, #40	; 0x28
 8004e56:	2100      	movs	r1, #0
 8004e58:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e045      	b.n	8004eea <HAL_RTC_DeactivateAlarm+0x126>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	4013      	ands	r3, r2
 8004e68:	d0e2      	beq.n	8004e30 <HAL_RTC_DeactivateAlarm+0x6c>
 8004e6a:	e031      	b.n	8004ed0 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4921      	ldr	r1, [pc, #132]	; (8004efc <HAL_RTC_DeactivateAlarm+0x138>)
 8004e78:	400a      	ands	r2, r1
 8004e7a:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	491e      	ldr	r1, [pc, #120]	; (8004f00 <HAL_RTC_DeactivateAlarm+0x13c>)
 8004e88:	400a      	ands	r2, r1
 8004e8a:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004e8c:	f7fc fea0 	bl	8001bd0 <HAL_GetTick>
 8004e90:	0003      	movs	r3, r0
 8004e92:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004e94:	e016      	b.n	8004ec4 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e96:	f7fc fe9b 	bl	8001bd0 <HAL_GetTick>
 8004e9a:	0002      	movs	r2, r0
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	1ad2      	subs	r2, r2, r3
 8004ea0:	23fa      	movs	r3, #250	; 0xfa
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d90d      	bls.n	8004ec4 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	22ff      	movs	r2, #255	; 0xff
 8004eae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2229      	movs	r2, #41	; 0x29
 8004eb4:	2103      	movs	r1, #3
 8004eb6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2228      	movs	r2, #40	; 0x28
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e012      	b.n	8004eea <HAL_RTC_DeactivateAlarm+0x126>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	4013      	ands	r3, r2
 8004ece:	d0e2      	beq.n	8004e96 <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	22ff      	movs	r2, #255	; 0xff
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2229      	movs	r2, #41	; 0x29
 8004edc:	2101      	movs	r1, #1
 8004ede:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2228      	movs	r2, #40	; 0x28
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	0018      	movs	r0, r3
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b004      	add	sp, #16
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	fffffeff 	.word	0xfffffeff
 8004ef8:	ffffefff 	.word	0xffffefff
 8004efc:	fffffdff 	.word	0xfffffdff
 8004f00:	ffffdfff 	.word	0xffffdfff

08004f04 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	2380      	movs	r3, #128	; 0x80
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d144      	bne.n	8004fa6 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2280      	movs	r2, #128	; 0x80
 8004f20:	0052      	lsls	r2, r2, #1
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f32:	045b      	lsls	r3, r3, #17
 8004f34:	0c5b      	lsrs	r3, r3, #17
 8004f36:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	0c1b      	lsrs	r3, r3, #16
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	223f      	movs	r2, #63	; 0x3f
 8004f40:	4013      	ands	r3, r2
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	0a1b      	lsrs	r3, r3, #8
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	227f      	movs	r2, #127	; 0x7f
 8004f50:	4013      	ands	r3, r2
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	227f      	movs	r2, #127	; 0x7f
 8004f5e:	4013      	ands	r3, r2
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	0d9b      	lsrs	r3, r3, #22
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	4013      	ands	r3, r2
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	0e1b      	lsrs	r3, r3, #24
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	223f      	movs	r2, #63	; 0x3f
 8004f84:	4013      	ands	r3, r2
 8004f86:	b2d9      	uxtb	r1, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	05db      	lsls	r3, r3, #23
 8004f94:	401a      	ands	r2, r3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	4a3b      	ldr	r2, [pc, #236]	; (800508c <HAL_RTC_GetAlarm+0x188>)
 8004f9e:	401a      	ands	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	615a      	str	r2, [r3, #20]
 8004fa4:	e043      	b.n	800502e <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2280      	movs	r2, #128	; 0x80
 8004faa:	0092      	lsls	r2, r2, #2
 8004fac:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fb4:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fbc:	045b      	lsls	r3, r3, #17
 8004fbe:	0c5b      	lsrs	r3, r3, #17
 8004fc0:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	0c1b      	lsrs	r3, r3, #16
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	223f      	movs	r2, #63	; 0x3f
 8004fca:	4013      	ands	r3, r2
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	0a1b      	lsrs	r3, r3, #8
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	227f      	movs	r2, #127	; 0x7f
 8004fda:	4013      	ands	r3, r2
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	227f      	movs	r2, #127	; 0x7f
 8004fe8:	4013      	ands	r3, r2
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	0d9b      	lsrs	r3, r3, #22
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	0e1b      	lsrs	r3, r3, #24
 800500a:	b2db      	uxtb	r3, r3
 800500c:	223f      	movs	r2, #63	; 0x3f
 800500e:	4013      	ands	r3, r2
 8005010:	b2d9      	uxtb	r1, r3
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2220      	movs	r2, #32
 8005016:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	2380      	movs	r3, #128	; 0x80
 800501c:	05db      	lsls	r3, r3, #23
 800501e:	401a      	ands	r2, r3
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	4a19      	ldr	r2, [pc, #100]	; (800508c <HAL_RTC_GetAlarm+0x188>)
 8005028:	401a      	ands	r2, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d125      	bne.n	8005080 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	0018      	movs	r0, r3
 800503a:	f000 f93d 	bl	80052b8 <RTC_Bcd2ToByte>
 800503e:	0003      	movs	r3, r0
 8005040:	001a      	movs	r2, r3
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	785b      	ldrb	r3, [r3, #1]
 800504a:	0018      	movs	r0, r3
 800504c:	f000 f934 	bl	80052b8 <RTC_Bcd2ToByte>
 8005050:	0003      	movs	r3, r0
 8005052:	001a      	movs	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	789b      	ldrb	r3, [r3, #2]
 800505c:	0018      	movs	r0, r3
 800505e:	f000 f92b 	bl	80052b8 <RTC_Bcd2ToByte>
 8005062:	0003      	movs	r3, r0
 8005064:	001a      	movs	r2, r3
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2220      	movs	r2, #32
 800506e:	5c9b      	ldrb	r3, [r3, r2]
 8005070:	0018      	movs	r0, r3
 8005072:	f000 f921 	bl	80052b8 <RTC_Bcd2ToByte>
 8005076:	0003      	movs	r3, r0
 8005078:	0019      	movs	r1, r3
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2220      	movs	r2, #32
 800507e:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	0018      	movs	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	b006      	add	sp, #24
 8005088:	bd80      	pop	{r7, pc}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	80808080 	.word	0x80808080

08005090 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	2380      	movs	r3, #128	; 0x80
 80050a0:	015b      	lsls	r3, r3, #5
 80050a2:	4013      	ands	r3, r2
 80050a4:	d011      	beq.n	80050ca <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ac:	2201      	movs	r2, #1
 80050ae:	4013      	ands	r3, r2
 80050b0:	d00b      	beq.n	80050ca <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2101      	movs	r1, #1
 80050be:	430a      	orrs	r2, r1
 80050c0:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	0018      	movs	r0, r3
 80050c6:	f7fb fec3 	bl	8000e50 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	699a      	ldr	r2, [r3, #24]
 80050d0:	2380      	movs	r3, #128	; 0x80
 80050d2:	019b      	lsls	r3, r3, #6
 80050d4:	4013      	ands	r3, r2
 80050d6:	d011      	beq.n	80050fc <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050de:	2202      	movs	r2, #2
 80050e0:	4013      	ands	r3, r2
 80050e2:	d00b      	beq.n	80050fc <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2102      	movs	r1, #2
 80050f0:	430a      	orrs	r2, r1
 80050f2:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	0018      	movs	r0, r3
 80050f8:	f000 f8fb 	bl	80052f2 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2229      	movs	r2, #41	; 0x29
 8005100:	2101      	movs	r1, #1
 8005102:	5499      	strb	r1, [r3, r2]
}
 8005104:	46c0      	nop			; (mov r8, r8)
 8005106:	46bd      	mov	sp, r7
 8005108:	b002      	add	sp, #8
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	21a0      	movs	r1, #160	; 0xa0
 8005120:	438a      	bics	r2, r1
 8005122:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005124:	f7fc fd54 	bl	8001bd0 <HAL_GetTick>
 8005128:	0003      	movs	r3, r0
 800512a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800512c:	e00a      	b.n	8005144 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800512e:	f7fc fd4f 	bl	8001bd0 <HAL_GetTick>
 8005132:	0002      	movs	r2, r0
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	1ad2      	subs	r2, r2, r3
 8005138:	23fa      	movs	r3, #250	; 0xfa
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	429a      	cmp	r2, r3
 800513e:	d901      	bls.n	8005144 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e006      	b.n	8005152 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	4013      	ands	r3, r2
 800514e:	d0ee      	beq.n	800512e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	0018      	movs	r0, r3
 8005154:	46bd      	mov	sp, r7
 8005156:	b004      	add	sp, #16
 8005158:	bd80      	pop	{r7, pc}

0800515a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005162:	230f      	movs	r3, #15
 8005164:	18fb      	adds	r3, r7, r3
 8005166:	2200      	movs	r2, #0
 8005168:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	2240      	movs	r2, #64	; 0x40
 8005172:	4013      	ands	r3, r2
 8005174:	d12c      	bne.n	80051d0 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2180      	movs	r1, #128	; 0x80
 8005182:	430a      	orrs	r2, r1
 8005184:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005186:	f7fc fd23 	bl	8001bd0 <HAL_GetTick>
 800518a:	0003      	movs	r3, r0
 800518c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800518e:	e014      	b.n	80051ba <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005190:	f7fc fd1e 	bl	8001bd0 <HAL_GetTick>
 8005194:	0002      	movs	r2, r0
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	1ad2      	subs	r2, r2, r3
 800519a:	200f      	movs	r0, #15
 800519c:	183b      	adds	r3, r7, r0
 800519e:	1839      	adds	r1, r7, r0
 80051a0:	7809      	ldrb	r1, [r1, #0]
 80051a2:	7019      	strb	r1, [r3, #0]
 80051a4:	23fa      	movs	r3, #250	; 0xfa
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d906      	bls.n	80051ba <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80051ac:	183b      	adds	r3, r7, r0
 80051ae:	2203      	movs	r2, #3
 80051b0:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2229      	movs	r2, #41	; 0x29
 80051b6:	2103      	movs	r1, #3
 80051b8:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	2240      	movs	r2, #64	; 0x40
 80051c2:	4013      	ands	r3, r2
 80051c4:	d104      	bne.n	80051d0 <RTC_EnterInitMode+0x76>
 80051c6:	230f      	movs	r3, #15
 80051c8:	18fb      	adds	r3, r7, r3
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	d1df      	bne.n	8005190 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80051d0:	230f      	movs	r3, #15
 80051d2:	18fb      	adds	r3, r7, r3
 80051d4:	781b      	ldrb	r3, [r3, #0]
}
 80051d6:	0018      	movs	r0, r3
 80051d8:	46bd      	mov	sp, r7
 80051da:	b004      	add	sp, #16
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80051e0:	b590      	push	{r4, r7, lr}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051e8:	240f      	movs	r4, #15
 80051ea:	193b      	adds	r3, r7, r4
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80051f0:	4b1c      	ldr	r3, [pc, #112]	; (8005264 <RTC_ExitInitMode+0x84>)
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <RTC_ExitInitMode+0x84>)
 80051f6:	2180      	movs	r1, #128	; 0x80
 80051f8:	438a      	bics	r2, r1
 80051fa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80051fc:	4b19      	ldr	r3, [pc, #100]	; (8005264 <RTC_ExitInitMode+0x84>)
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	2220      	movs	r2, #32
 8005202:	4013      	ands	r3, r2
 8005204:	d10d      	bne.n	8005222 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	0018      	movs	r0, r3
 800520a:	f7ff ff7f 	bl	800510c <HAL_RTC_WaitForSynchro>
 800520e:	1e03      	subs	r3, r0, #0
 8005210:	d021      	beq.n	8005256 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2229      	movs	r2, #41	; 0x29
 8005216:	2103      	movs	r1, #3
 8005218:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800521a:	193b      	adds	r3, r7, r4
 800521c:	2203      	movs	r2, #3
 800521e:	701a      	strb	r2, [r3, #0]
 8005220:	e019      	b.n	8005256 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005222:	4b10      	ldr	r3, [pc, #64]	; (8005264 <RTC_ExitInitMode+0x84>)
 8005224:	699a      	ldr	r2, [r3, #24]
 8005226:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <RTC_ExitInitMode+0x84>)
 8005228:	2120      	movs	r1, #32
 800522a:	438a      	bics	r2, r1
 800522c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	0018      	movs	r0, r3
 8005232:	f7ff ff6b 	bl	800510c <HAL_RTC_WaitForSynchro>
 8005236:	1e03      	subs	r3, r0, #0
 8005238:	d007      	beq.n	800524a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2229      	movs	r2, #41	; 0x29
 800523e:	2103      	movs	r1, #3
 8005240:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005242:	230f      	movs	r3, #15
 8005244:	18fb      	adds	r3, r7, r3
 8005246:	2203      	movs	r2, #3
 8005248:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800524a:	4b06      	ldr	r3, [pc, #24]	; (8005264 <RTC_ExitInitMode+0x84>)
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	4b05      	ldr	r3, [pc, #20]	; (8005264 <RTC_ExitInitMode+0x84>)
 8005250:	2120      	movs	r1, #32
 8005252:	430a      	orrs	r2, r1
 8005254:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005256:	230f      	movs	r3, #15
 8005258:	18fb      	adds	r3, r7, r3
 800525a:	781b      	ldrb	r3, [r3, #0]
}
 800525c:	0018      	movs	r0, r3
 800525e:	46bd      	mov	sp, r7
 8005260:	b005      	add	sp, #20
 8005262:	bd90      	pop	{r4, r7, pc}
 8005264:	40002800 	.word	0x40002800

08005268 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	0002      	movs	r2, r0
 8005270:	1dfb      	adds	r3, r7, #7
 8005272:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005278:	230b      	movs	r3, #11
 800527a:	18fb      	adds	r3, r7, r3
 800527c:	1dfa      	adds	r2, r7, #7
 800527e:	7812      	ldrb	r2, [r2, #0]
 8005280:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005282:	e008      	b.n	8005296 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3301      	adds	r3, #1
 8005288:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800528a:	220b      	movs	r2, #11
 800528c:	18bb      	adds	r3, r7, r2
 800528e:	18ba      	adds	r2, r7, r2
 8005290:	7812      	ldrb	r2, [r2, #0]
 8005292:	3a0a      	subs	r2, #10
 8005294:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005296:	210b      	movs	r1, #11
 8005298:	187b      	adds	r3, r7, r1
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b09      	cmp	r3, #9
 800529e:	d8f1      	bhi.n	8005284 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	187b      	adds	r3, r7, r1
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	b2db      	uxtb	r3, r3
}
 80052b0:	0018      	movs	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b004      	add	sp, #16
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	0002      	movs	r2, r0
 80052c0:	1dfb      	adds	r3, r7, #7
 80052c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80052c4:	1dfb      	adds	r3, r7, #7
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	091b      	lsrs	r3, r3, #4
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	001a      	movs	r2, r3
 80052ce:	0013      	movs	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	189b      	adds	r3, r3, r2
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	1dfb      	adds	r3, r7, #7
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	210f      	movs	r1, #15
 80052e2:	400b      	ands	r3, r1
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	18d3      	adds	r3, r2, r3
 80052e8:	b2db      	uxtb	r3, r3
}
 80052ea:	0018      	movs	r0, r3
 80052ec:	46bd      	mov	sp, r7
 80052ee:	b004      	add	sp, #16
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	46bd      	mov	sp, r7
 80052fe:	b002      	add	sp, #8
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e04a      	b.n	80053aa <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	223d      	movs	r2, #61	; 0x3d
 8005318:	5c9b      	ldrb	r3, [r3, r2]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d107      	bne.n	8005330 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	223c      	movs	r2, #60	; 0x3c
 8005324:	2100      	movs	r1, #0
 8005326:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	0018      	movs	r0, r3
 800532c:	f7fc fa38 	bl	80017a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	223d      	movs	r2, #61	; 0x3d
 8005334:	2102      	movs	r1, #2
 8005336:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3304      	adds	r3, #4
 8005340:	0019      	movs	r1, r3
 8005342:	0010      	movs	r0, r2
 8005344:	f000 f882 	bl	800544c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2248      	movs	r2, #72	; 0x48
 800534c:	2101      	movs	r1, #1
 800534e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	223e      	movs	r2, #62	; 0x3e
 8005354:	2101      	movs	r1, #1
 8005356:	5499      	strb	r1, [r3, r2]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	223f      	movs	r2, #63	; 0x3f
 800535c:	2101      	movs	r1, #1
 800535e:	5499      	strb	r1, [r3, r2]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2240      	movs	r2, #64	; 0x40
 8005364:	2101      	movs	r1, #1
 8005366:	5499      	strb	r1, [r3, r2]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2241      	movs	r2, #65	; 0x41
 800536c:	2101      	movs	r1, #1
 800536e:	5499      	strb	r1, [r3, r2]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2242      	movs	r2, #66	; 0x42
 8005374:	2101      	movs	r1, #1
 8005376:	5499      	strb	r1, [r3, r2]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2243      	movs	r2, #67	; 0x43
 800537c:	2101      	movs	r1, #1
 800537e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2244      	movs	r2, #68	; 0x44
 8005384:	2101      	movs	r1, #1
 8005386:	5499      	strb	r1, [r3, r2]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2245      	movs	r2, #69	; 0x45
 800538c:	2101      	movs	r1, #1
 800538e:	5499      	strb	r1, [r3, r2]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2246      	movs	r2, #70	; 0x46
 8005394:	2101      	movs	r1, #1
 8005396:	5499      	strb	r1, [r3, r2]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2247      	movs	r2, #71	; 0x47
 800539c:	2101      	movs	r1, #1
 800539e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	223d      	movs	r2, #61	; 0x3d
 80053a4:	2101      	movs	r1, #1
 80053a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	0018      	movs	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	b002      	add	sp, #8
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	223d      	movs	r2, #61	; 0x3d
 80053c0:	5c9b      	ldrb	r3, [r3, r2]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d001      	beq.n	80053cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e035      	b.n	8005438 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	223d      	movs	r2, #61	; 0x3d
 80053d0:	2102      	movs	r1, #2
 80053d2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a19      	ldr	r2, [pc, #100]	; (8005440 <HAL_TIM_Base_Start+0x8c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00a      	beq.n	80053f4 <HAL_TIM_Base_Start+0x40>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	2380      	movs	r3, #128	; 0x80
 80053e4:	05db      	lsls	r3, r3, #23
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d004      	beq.n	80053f4 <HAL_TIM_Base_Start+0x40>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a15      	ldr	r2, [pc, #84]	; (8005444 <HAL_TIM_Base_Start+0x90>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d116      	bne.n	8005422 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	4a13      	ldr	r2, [pc, #76]	; (8005448 <HAL_TIM_Base_Start+0x94>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b06      	cmp	r3, #6
 8005404:	d016      	beq.n	8005434 <HAL_TIM_Base_Start+0x80>
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	2380      	movs	r3, #128	; 0x80
 800540a:	025b      	lsls	r3, r3, #9
 800540c:	429a      	cmp	r2, r3
 800540e:	d011      	beq.n	8005434 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2101      	movs	r1, #1
 800541c:	430a      	orrs	r2, r1
 800541e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005420:	e008      	b.n	8005434 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2101      	movs	r1, #1
 800542e:	430a      	orrs	r2, r1
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e000      	b.n	8005436 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005434:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	0018      	movs	r0, r3
 800543a:	46bd      	mov	sp, r7
 800543c:	b004      	add	sp, #16
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40012c00 	.word	0x40012c00
 8005444:	40000400 	.word	0x40000400
 8005448:	00010007 	.word	0x00010007

0800544c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a30      	ldr	r2, [pc, #192]	; (8005520 <TIM_Base_SetConfig+0xd4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d008      	beq.n	8005476 <TIM_Base_SetConfig+0x2a>
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	2380      	movs	r3, #128	; 0x80
 8005468:	05db      	lsls	r3, r3, #23
 800546a:	429a      	cmp	r2, r3
 800546c:	d003      	beq.n	8005476 <TIM_Base_SetConfig+0x2a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a2c      	ldr	r2, [pc, #176]	; (8005524 <TIM_Base_SetConfig+0xd8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d108      	bne.n	8005488 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2270      	movs	r2, #112	; 0x70
 800547a:	4393      	bics	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a25      	ldr	r2, [pc, #148]	; (8005520 <TIM_Base_SetConfig+0xd4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d014      	beq.n	80054ba <TIM_Base_SetConfig+0x6e>
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	2380      	movs	r3, #128	; 0x80
 8005494:	05db      	lsls	r3, r3, #23
 8005496:	429a      	cmp	r2, r3
 8005498:	d00f      	beq.n	80054ba <TIM_Base_SetConfig+0x6e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a21      	ldr	r2, [pc, #132]	; (8005524 <TIM_Base_SetConfig+0xd8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00b      	beq.n	80054ba <TIM_Base_SetConfig+0x6e>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a20      	ldr	r2, [pc, #128]	; (8005528 <TIM_Base_SetConfig+0xdc>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d007      	beq.n	80054ba <TIM_Base_SetConfig+0x6e>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a1f      	ldr	r2, [pc, #124]	; (800552c <TIM_Base_SetConfig+0xe0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d003      	beq.n	80054ba <TIM_Base_SetConfig+0x6e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a1e      	ldr	r2, [pc, #120]	; (8005530 <TIM_Base_SetConfig+0xe4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d108      	bne.n	80054cc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4a1d      	ldr	r2, [pc, #116]	; (8005534 <TIM_Base_SetConfig+0xe8>)
 80054be:	4013      	ands	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2280      	movs	r2, #128	; 0x80
 80054d0:	4393      	bics	r3, r2
 80054d2:	001a      	movs	r2, r3
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a0a      	ldr	r2, [pc, #40]	; (8005520 <TIM_Base_SetConfig+0xd4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d007      	beq.n	800550a <TIM_Base_SetConfig+0xbe>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a0b      	ldr	r2, [pc, #44]	; (800552c <TIM_Base_SetConfig+0xe0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d003      	beq.n	800550a <TIM_Base_SetConfig+0xbe>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a0a      	ldr	r2, [pc, #40]	; (8005530 <TIM_Base_SetConfig+0xe4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d103      	bne.n	8005512 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	691a      	ldr	r2, [r3, #16]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	615a      	str	r2, [r3, #20]
}
 8005518:	46c0      	nop			; (mov r8, r8)
 800551a:	46bd      	mov	sp, r7
 800551c:	b004      	add	sp, #16
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40000400 	.word	0x40000400
 8005528:	40002000 	.word	0x40002000
 800552c:	40014400 	.word	0x40014400
 8005530:	40014800 	.word	0x40014800
 8005534:	fffffcff 	.word	0xfffffcff

08005538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e046      	b.n	80055d8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2288      	movs	r2, #136	; 0x88
 800554e:	589b      	ldr	r3, [r3, r2]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d107      	bne.n	8005564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2284      	movs	r2, #132	; 0x84
 8005558:	2100      	movs	r1, #0
 800555a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	0018      	movs	r0, r3
 8005560:	f7fc f93e 	bl	80017e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2288      	movs	r2, #136	; 0x88
 8005568:	2124      	movs	r1, #36	; 0x24
 800556a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2101      	movs	r1, #1
 8005578:	438a      	bics	r2, r1
 800557a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	0018      	movs	r0, r3
 8005580:	f000 f8cc 	bl	800571c <UART_SetConfig>
 8005584:	0003      	movs	r3, r0
 8005586:	2b01      	cmp	r3, #1
 8005588:	d101      	bne.n	800558e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e024      	b.n	80055d8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	0018      	movs	r0, r3
 800559a:	f000 fb37 	bl	8005c0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	490d      	ldr	r1, [pc, #52]	; (80055e0 <HAL_UART_Init+0xa8>)
 80055aa:	400a      	ands	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	212a      	movs	r1, #42	; 0x2a
 80055ba:	438a      	bics	r2, r1
 80055bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2101      	movs	r1, #1
 80055ca:	430a      	orrs	r2, r1
 80055cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	0018      	movs	r0, r3
 80055d2:	f000 fbcf 	bl	8005d74 <UART_CheckIdleState>
 80055d6:	0003      	movs	r3, r0
}
 80055d8:	0018      	movs	r0, r3
 80055da:	46bd      	mov	sp, r7
 80055dc:	b002      	add	sp, #8
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	ffffb7ff 	.word	0xffffb7ff

080055e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08a      	sub	sp, #40	; 0x28
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	1dbb      	adds	r3, r7, #6
 80055f2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2288      	movs	r2, #136	; 0x88
 80055f8:	589b      	ldr	r3, [r3, r2]
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d000      	beq.n	8005600 <HAL_UART_Transmit+0x1c>
 80055fe:	e088      	b.n	8005712 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_UART_Transmit+0x2a>
 8005606:	1dbb      	adds	r3, r7, #6
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e080      	b.n	8005714 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	2380      	movs	r3, #128	; 0x80
 8005618:	015b      	lsls	r3, r3, #5
 800561a:	429a      	cmp	r2, r3
 800561c:	d109      	bne.n	8005632 <HAL_UART_Transmit+0x4e>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d105      	bne.n	8005632 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2201      	movs	r2, #1
 800562a:	4013      	ands	r3, r2
 800562c:	d001      	beq.n	8005632 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e070      	b.n	8005714 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2290      	movs	r2, #144	; 0x90
 8005636:	2100      	movs	r1, #0
 8005638:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2288      	movs	r2, #136	; 0x88
 800563e:	2121      	movs	r1, #33	; 0x21
 8005640:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005642:	f7fc fac5 	bl	8001bd0 <HAL_GetTick>
 8005646:	0003      	movs	r3, r0
 8005648:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	1dba      	adds	r2, r7, #6
 800564e:	2154      	movs	r1, #84	; 0x54
 8005650:	8812      	ldrh	r2, [r2, #0]
 8005652:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	1dba      	adds	r2, r7, #6
 8005658:	2156      	movs	r1, #86	; 0x56
 800565a:	8812      	ldrh	r2, [r2, #0]
 800565c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	2380      	movs	r3, #128	; 0x80
 8005664:	015b      	lsls	r3, r3, #5
 8005666:	429a      	cmp	r2, r3
 8005668:	d108      	bne.n	800567c <HAL_UART_Transmit+0x98>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d104      	bne.n	800567c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	e003      	b.n	8005684 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005680:	2300      	movs	r3, #0
 8005682:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005684:	e02c      	b.n	80056e0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	0013      	movs	r3, r2
 8005690:	2200      	movs	r2, #0
 8005692:	2180      	movs	r1, #128	; 0x80
 8005694:	f000 fbbc 	bl	8005e10 <UART_WaitOnFlagUntilTimeout>
 8005698:	1e03      	subs	r3, r0, #0
 800569a:	d001      	beq.n	80056a0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e039      	b.n	8005714 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10b      	bne.n	80056be <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	001a      	movs	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	05d2      	lsls	r2, r2, #23
 80056b2:	0dd2      	lsrs	r2, r2, #23
 80056b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	3302      	adds	r3, #2
 80056ba:	61bb      	str	r3, [r7, #24]
 80056bc:	e007      	b.n	80056ce <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	781a      	ldrb	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	3301      	adds	r3, #1
 80056cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2256      	movs	r2, #86	; 0x56
 80056d2:	5a9b      	ldrh	r3, [r3, r2]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b299      	uxth	r1, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2256      	movs	r2, #86	; 0x56
 80056de:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2256      	movs	r2, #86	; 0x56
 80056e4:	5a9b      	ldrh	r3, [r3, r2]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1cc      	bne.n	8005686 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	0013      	movs	r3, r2
 80056f6:	2200      	movs	r2, #0
 80056f8:	2140      	movs	r1, #64	; 0x40
 80056fa:	f000 fb89 	bl	8005e10 <UART_WaitOnFlagUntilTimeout>
 80056fe:	1e03      	subs	r3, r0, #0
 8005700:	d001      	beq.n	8005706 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e006      	b.n	8005714 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2288      	movs	r2, #136	; 0x88
 800570a:	2120      	movs	r1, #32
 800570c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	e000      	b.n	8005714 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8005712:	2302      	movs	r3, #2
  }
}
 8005714:	0018      	movs	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	b008      	add	sp, #32
 800571a:	bd80      	pop	{r7, pc}

0800571c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800571c:	b5b0      	push	{r4, r5, r7, lr}
 800571e:	b090      	sub	sp, #64	; 0x40
 8005720:	af00      	add	r7, sp, #0
 8005722:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005724:	231a      	movs	r3, #26
 8005726:	2220      	movs	r2, #32
 8005728:	189b      	adds	r3, r3, r2
 800572a:	19db      	adds	r3, r3, r7
 800572c:	2200      	movs	r2, #0
 800572e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	431a      	orrs	r2, r3
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	431a      	orrs	r2, r3
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	4313      	orrs	r3, r2
 8005746:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4ac4      	ldr	r2, [pc, #784]	; (8005a60 <UART_SetConfig+0x344>)
 8005750:	4013      	ands	r3, r2
 8005752:	0019      	movs	r1, r3
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575a:	430b      	orrs	r3, r1
 800575c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	4abf      	ldr	r2, [pc, #764]	; (8005a64 <UART_SetConfig+0x348>)
 8005766:	4013      	ands	r3, r2
 8005768:	0018      	movs	r0, r3
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	68d9      	ldr	r1, [r3, #12]
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	0003      	movs	r3, r0
 8005774:	430b      	orrs	r3, r1
 8005776:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4ab9      	ldr	r2, [pc, #740]	; (8005a68 <UART_SetConfig+0x34c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d004      	beq.n	8005792 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800578e:	4313      	orrs	r3, r2
 8005790:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	4ab4      	ldr	r2, [pc, #720]	; (8005a6c <UART_SetConfig+0x350>)
 800579a:	4013      	ands	r3, r2
 800579c:	0019      	movs	r1, r3
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a4:	430b      	orrs	r3, r1
 80057a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	220f      	movs	r2, #15
 80057b0:	4393      	bics	r3, r2
 80057b2:	0018      	movs	r0, r3
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	0003      	movs	r3, r0
 80057be:	430b      	orrs	r3, r1
 80057c0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4aaa      	ldr	r2, [pc, #680]	; (8005a70 <UART_SetConfig+0x354>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d131      	bne.n	8005830 <UART_SetConfig+0x114>
 80057cc:	4ba9      	ldr	r3, [pc, #676]	; (8005a74 <UART_SetConfig+0x358>)
 80057ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d0:	2203      	movs	r2, #3
 80057d2:	4013      	ands	r3, r2
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d01d      	beq.n	8005814 <UART_SetConfig+0xf8>
 80057d8:	d823      	bhi.n	8005822 <UART_SetConfig+0x106>
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d00c      	beq.n	80057f8 <UART_SetConfig+0xdc>
 80057de:	d820      	bhi.n	8005822 <UART_SetConfig+0x106>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <UART_SetConfig+0xce>
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d00e      	beq.n	8005806 <UART_SetConfig+0xea>
 80057e8:	e01b      	b.n	8005822 <UART_SetConfig+0x106>
 80057ea:	231b      	movs	r3, #27
 80057ec:	2220      	movs	r2, #32
 80057ee:	189b      	adds	r3, r3, r2
 80057f0:	19db      	adds	r3, r3, r7
 80057f2:	2200      	movs	r2, #0
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	e071      	b.n	80058dc <UART_SetConfig+0x1c0>
 80057f8:	231b      	movs	r3, #27
 80057fa:	2220      	movs	r2, #32
 80057fc:	189b      	adds	r3, r3, r2
 80057fe:	19db      	adds	r3, r3, r7
 8005800:	2202      	movs	r2, #2
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	e06a      	b.n	80058dc <UART_SetConfig+0x1c0>
 8005806:	231b      	movs	r3, #27
 8005808:	2220      	movs	r2, #32
 800580a:	189b      	adds	r3, r3, r2
 800580c:	19db      	adds	r3, r3, r7
 800580e:	2204      	movs	r2, #4
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	e063      	b.n	80058dc <UART_SetConfig+0x1c0>
 8005814:	231b      	movs	r3, #27
 8005816:	2220      	movs	r2, #32
 8005818:	189b      	adds	r3, r3, r2
 800581a:	19db      	adds	r3, r3, r7
 800581c:	2208      	movs	r2, #8
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e05c      	b.n	80058dc <UART_SetConfig+0x1c0>
 8005822:	231b      	movs	r3, #27
 8005824:	2220      	movs	r2, #32
 8005826:	189b      	adds	r3, r3, r2
 8005828:	19db      	adds	r3, r3, r7
 800582a:	2210      	movs	r2, #16
 800582c:	701a      	strb	r2, [r3, #0]
 800582e:	e055      	b.n	80058dc <UART_SetConfig+0x1c0>
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a90      	ldr	r2, [pc, #576]	; (8005a78 <UART_SetConfig+0x35c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d106      	bne.n	8005848 <UART_SetConfig+0x12c>
 800583a:	231b      	movs	r3, #27
 800583c:	2220      	movs	r2, #32
 800583e:	189b      	adds	r3, r3, r2
 8005840:	19db      	adds	r3, r3, r7
 8005842:	2200      	movs	r2, #0
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	e049      	b.n	80058dc <UART_SetConfig+0x1c0>
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a86      	ldr	r2, [pc, #536]	; (8005a68 <UART_SetConfig+0x34c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d13e      	bne.n	80058d0 <UART_SetConfig+0x1b4>
 8005852:	4b88      	ldr	r3, [pc, #544]	; (8005a74 <UART_SetConfig+0x358>)
 8005854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005856:	23c0      	movs	r3, #192	; 0xc0
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	4013      	ands	r3, r2
 800585c:	22c0      	movs	r2, #192	; 0xc0
 800585e:	0112      	lsls	r2, r2, #4
 8005860:	4293      	cmp	r3, r2
 8005862:	d027      	beq.n	80058b4 <UART_SetConfig+0x198>
 8005864:	22c0      	movs	r2, #192	; 0xc0
 8005866:	0112      	lsls	r2, r2, #4
 8005868:	4293      	cmp	r3, r2
 800586a:	d82a      	bhi.n	80058c2 <UART_SetConfig+0x1a6>
 800586c:	2280      	movs	r2, #128	; 0x80
 800586e:	0112      	lsls	r2, r2, #4
 8005870:	4293      	cmp	r3, r2
 8005872:	d011      	beq.n	8005898 <UART_SetConfig+0x17c>
 8005874:	2280      	movs	r2, #128	; 0x80
 8005876:	0112      	lsls	r2, r2, #4
 8005878:	4293      	cmp	r3, r2
 800587a:	d822      	bhi.n	80058c2 <UART_SetConfig+0x1a6>
 800587c:	2b00      	cmp	r3, #0
 800587e:	d004      	beq.n	800588a <UART_SetConfig+0x16e>
 8005880:	2280      	movs	r2, #128	; 0x80
 8005882:	00d2      	lsls	r2, r2, #3
 8005884:	4293      	cmp	r3, r2
 8005886:	d00e      	beq.n	80058a6 <UART_SetConfig+0x18a>
 8005888:	e01b      	b.n	80058c2 <UART_SetConfig+0x1a6>
 800588a:	231b      	movs	r3, #27
 800588c:	2220      	movs	r2, #32
 800588e:	189b      	adds	r3, r3, r2
 8005890:	19db      	adds	r3, r3, r7
 8005892:	2200      	movs	r2, #0
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	e021      	b.n	80058dc <UART_SetConfig+0x1c0>
 8005898:	231b      	movs	r3, #27
 800589a:	2220      	movs	r2, #32
 800589c:	189b      	adds	r3, r3, r2
 800589e:	19db      	adds	r3, r3, r7
 80058a0:	2202      	movs	r2, #2
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	e01a      	b.n	80058dc <UART_SetConfig+0x1c0>
 80058a6:	231b      	movs	r3, #27
 80058a8:	2220      	movs	r2, #32
 80058aa:	189b      	adds	r3, r3, r2
 80058ac:	19db      	adds	r3, r3, r7
 80058ae:	2204      	movs	r2, #4
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	e013      	b.n	80058dc <UART_SetConfig+0x1c0>
 80058b4:	231b      	movs	r3, #27
 80058b6:	2220      	movs	r2, #32
 80058b8:	189b      	adds	r3, r3, r2
 80058ba:	19db      	adds	r3, r3, r7
 80058bc:	2208      	movs	r2, #8
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	e00c      	b.n	80058dc <UART_SetConfig+0x1c0>
 80058c2:	231b      	movs	r3, #27
 80058c4:	2220      	movs	r2, #32
 80058c6:	189b      	adds	r3, r3, r2
 80058c8:	19db      	adds	r3, r3, r7
 80058ca:	2210      	movs	r2, #16
 80058cc:	701a      	strb	r2, [r3, #0]
 80058ce:	e005      	b.n	80058dc <UART_SetConfig+0x1c0>
 80058d0:	231b      	movs	r3, #27
 80058d2:	2220      	movs	r2, #32
 80058d4:	189b      	adds	r3, r3, r2
 80058d6:	19db      	adds	r3, r3, r7
 80058d8:	2210      	movs	r2, #16
 80058da:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a61      	ldr	r2, [pc, #388]	; (8005a68 <UART_SetConfig+0x34c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d000      	beq.n	80058e8 <UART_SetConfig+0x1cc>
 80058e6:	e092      	b.n	8005a0e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058e8:	231b      	movs	r3, #27
 80058ea:	2220      	movs	r2, #32
 80058ec:	189b      	adds	r3, r3, r2
 80058ee:	19db      	adds	r3, r3, r7
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d015      	beq.n	8005922 <UART_SetConfig+0x206>
 80058f6:	dc18      	bgt.n	800592a <UART_SetConfig+0x20e>
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d00d      	beq.n	8005918 <UART_SetConfig+0x1fc>
 80058fc:	dc15      	bgt.n	800592a <UART_SetConfig+0x20e>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <UART_SetConfig+0x1ec>
 8005902:	2b02      	cmp	r3, #2
 8005904:	d005      	beq.n	8005912 <UART_SetConfig+0x1f6>
 8005906:	e010      	b.n	800592a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005908:	f7fe fbe0 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 800590c:	0003      	movs	r3, r0
 800590e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005910:	e014      	b.n	800593c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005912:	4b5a      	ldr	r3, [pc, #360]	; (8005a7c <UART_SetConfig+0x360>)
 8005914:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005916:	e011      	b.n	800593c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005918:	f7fe fb4c 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 800591c:	0003      	movs	r3, r0
 800591e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005920:	e00c      	b.n	800593c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005922:	2380      	movs	r3, #128	; 0x80
 8005924:	021b      	lsls	r3, r3, #8
 8005926:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005928:	e008      	b.n	800593c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800592e:	231a      	movs	r3, #26
 8005930:	2220      	movs	r2, #32
 8005932:	189b      	adds	r3, r3, r2
 8005934:	19db      	adds	r3, r3, r7
 8005936:	2201      	movs	r2, #1
 8005938:	701a      	strb	r2, [r3, #0]
        break;
 800593a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800593c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593e:	2b00      	cmp	r3, #0
 8005940:	d100      	bne.n	8005944 <UART_SetConfig+0x228>
 8005942:	e147      	b.n	8005bd4 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005948:	4b4d      	ldr	r3, [pc, #308]	; (8005a80 <UART_SetConfig+0x364>)
 800594a:	0052      	lsls	r2, r2, #1
 800594c:	5ad3      	ldrh	r3, [r2, r3]
 800594e:	0019      	movs	r1, r3
 8005950:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005952:	f7fa fbe1 	bl	8000118 <__udivsi3>
 8005956:	0003      	movs	r3, r0
 8005958:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	0013      	movs	r3, r2
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	189b      	adds	r3, r3, r2
 8005964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005966:	429a      	cmp	r2, r3
 8005968:	d305      	bcc.n	8005976 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005972:	429a      	cmp	r2, r3
 8005974:	d906      	bls.n	8005984 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8005976:	231a      	movs	r3, #26
 8005978:	2220      	movs	r2, #32
 800597a:	189b      	adds	r3, r3, r2
 800597c:	19db      	adds	r3, r3, r7
 800597e:	2201      	movs	r2, #1
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	e127      	b.n	8005bd4 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005986:	61bb      	str	r3, [r7, #24]
 8005988:	2300      	movs	r3, #0
 800598a:	61fb      	str	r3, [r7, #28]
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005990:	4b3b      	ldr	r3, [pc, #236]	; (8005a80 <UART_SetConfig+0x364>)
 8005992:	0052      	lsls	r2, r2, #1
 8005994:	5ad3      	ldrh	r3, [r2, r3]
 8005996:	613b      	str	r3, [r7, #16]
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	69b8      	ldr	r0, [r7, #24]
 80059a2:	69f9      	ldr	r1, [r7, #28]
 80059a4:	f7fa fc44 	bl	8000230 <__aeabi_uldivmod>
 80059a8:	0002      	movs	r2, r0
 80059aa:	000b      	movs	r3, r1
 80059ac:	0e11      	lsrs	r1, r2, #24
 80059ae:	021d      	lsls	r5, r3, #8
 80059b0:	430d      	orrs	r5, r1
 80059b2:	0214      	lsls	r4, r2, #8
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	085b      	lsrs	r3, r3, #1
 80059ba:	60bb      	str	r3, [r7, #8]
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	68b8      	ldr	r0, [r7, #8]
 80059c2:	68f9      	ldr	r1, [r7, #12]
 80059c4:	1900      	adds	r0, r0, r4
 80059c6:	4169      	adcs	r1, r5
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	2300      	movs	r3, #0
 80059d0:	607b      	str	r3, [r7, #4]
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f7fa fc2b 	bl	8000230 <__aeabi_uldivmod>
 80059da:	0002      	movs	r2, r0
 80059dc:	000b      	movs	r3, r1
 80059de:	0013      	movs	r3, r2
 80059e0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059e4:	23c0      	movs	r3, #192	; 0xc0
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d309      	bcc.n	8005a00 <UART_SetConfig+0x2e4>
 80059ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ee:	2380      	movs	r3, #128	; 0x80
 80059f0:	035b      	lsls	r3, r3, #13
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d204      	bcs.n	8005a00 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059fc:	60da      	str	r2, [r3, #12]
 80059fe:	e0e9      	b.n	8005bd4 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8005a00:	231a      	movs	r3, #26
 8005a02:	2220      	movs	r2, #32
 8005a04:	189b      	adds	r3, r3, r2
 8005a06:	19db      	adds	r3, r3, r7
 8005a08:	2201      	movs	r2, #1
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	e0e2      	b.n	8005bd4 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	69da      	ldr	r2, [r3, #28]
 8005a12:	2380      	movs	r3, #128	; 0x80
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d000      	beq.n	8005a1c <UART_SetConfig+0x300>
 8005a1a:	e083      	b.n	8005b24 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005a1c:	231b      	movs	r3, #27
 8005a1e:	2220      	movs	r2, #32
 8005a20:	189b      	adds	r3, r3, r2
 8005a22:	19db      	adds	r3, r3, r7
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d015      	beq.n	8005a56 <UART_SetConfig+0x33a>
 8005a2a:	dc2b      	bgt.n	8005a84 <UART_SetConfig+0x368>
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d00d      	beq.n	8005a4c <UART_SetConfig+0x330>
 8005a30:	dc28      	bgt.n	8005a84 <UART_SetConfig+0x368>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <UART_SetConfig+0x320>
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d005      	beq.n	8005a46 <UART_SetConfig+0x32a>
 8005a3a:	e023      	b.n	8005a84 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a3c:	f7fe fb46 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 8005a40:	0003      	movs	r3, r0
 8005a42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a44:	e027      	b.n	8005a96 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a46:	4b0d      	ldr	r3, [pc, #52]	; (8005a7c <UART_SetConfig+0x360>)
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a4a:	e024      	b.n	8005a96 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a4c:	f7fe fab2 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8005a50:	0003      	movs	r3, r0
 8005a52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a54:	e01f      	b.n	8005a96 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a56:	2380      	movs	r3, #128	; 0x80
 8005a58:	021b      	lsls	r3, r3, #8
 8005a5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a5c:	e01b      	b.n	8005a96 <UART_SetConfig+0x37a>
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	cfff69f3 	.word	0xcfff69f3
 8005a64:	ffffcfff 	.word	0xffffcfff
 8005a68:	40008000 	.word	0x40008000
 8005a6c:	11fff4ff 	.word	0x11fff4ff
 8005a70:	40013800 	.word	0x40013800
 8005a74:	40021000 	.word	0x40021000
 8005a78:	40004400 	.word	0x40004400
 8005a7c:	00f42400 	.word	0x00f42400
 8005a80:	08007578 	.word	0x08007578
      default:
        pclk = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005a88:	231a      	movs	r3, #26
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	189b      	adds	r3, r3, r2
 8005a8e:	19db      	adds	r3, r3, r7
 8005a90:	2201      	movs	r2, #1
 8005a92:	701a      	strb	r2, [r3, #0]
        break;
 8005a94:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d100      	bne.n	8005a9e <UART_SetConfig+0x382>
 8005a9c:	e09a      	b.n	8005bd4 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aa2:	4b58      	ldr	r3, [pc, #352]	; (8005c04 <UART_SetConfig+0x4e8>)
 8005aa4:	0052      	lsls	r2, r2, #1
 8005aa6:	5ad3      	ldrh	r3, [r2, r3]
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005aac:	f7fa fb34 	bl	8000118 <__udivsi3>
 8005ab0:	0003      	movs	r3, r0
 8005ab2:	005a      	lsls	r2, r3, #1
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	085b      	lsrs	r3, r3, #1
 8005aba:	18d2      	adds	r2, r2, r3
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	0019      	movs	r1, r3
 8005ac2:	0010      	movs	r0, r2
 8005ac4:	f7fa fb28 	bl	8000118 <__udivsi3>
 8005ac8:	0003      	movs	r3, r0
 8005aca:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	2b0f      	cmp	r3, #15
 8005ad0:	d921      	bls.n	8005b16 <UART_SetConfig+0x3fa>
 8005ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ad4:	2380      	movs	r3, #128	; 0x80
 8005ad6:	025b      	lsls	r3, r3, #9
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d21c      	bcs.n	8005b16 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	200e      	movs	r0, #14
 8005ae2:	2420      	movs	r4, #32
 8005ae4:	1903      	adds	r3, r0, r4
 8005ae6:	19db      	adds	r3, r3, r7
 8005ae8:	210f      	movs	r1, #15
 8005aea:	438a      	bics	r2, r1
 8005aec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	085b      	lsrs	r3, r3, #1
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2207      	movs	r2, #7
 8005af6:	4013      	ands	r3, r2
 8005af8:	b299      	uxth	r1, r3
 8005afa:	1903      	adds	r3, r0, r4
 8005afc:	19db      	adds	r3, r3, r7
 8005afe:	1902      	adds	r2, r0, r4
 8005b00:	19d2      	adds	r2, r2, r7
 8005b02:	8812      	ldrh	r2, [r2, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	1902      	adds	r2, r0, r4
 8005b0e:	19d2      	adds	r2, r2, r7
 8005b10:	8812      	ldrh	r2, [r2, #0]
 8005b12:	60da      	str	r2, [r3, #12]
 8005b14:	e05e      	b.n	8005bd4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005b16:	231a      	movs	r3, #26
 8005b18:	2220      	movs	r2, #32
 8005b1a:	189b      	adds	r3, r3, r2
 8005b1c:	19db      	adds	r3, r3, r7
 8005b1e:	2201      	movs	r2, #1
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	e057      	b.n	8005bd4 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b24:	231b      	movs	r3, #27
 8005b26:	2220      	movs	r2, #32
 8005b28:	189b      	adds	r3, r3, r2
 8005b2a:	19db      	adds	r3, r3, r7
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d015      	beq.n	8005b5e <UART_SetConfig+0x442>
 8005b32:	dc18      	bgt.n	8005b66 <UART_SetConfig+0x44a>
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d00d      	beq.n	8005b54 <UART_SetConfig+0x438>
 8005b38:	dc15      	bgt.n	8005b66 <UART_SetConfig+0x44a>
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <UART_SetConfig+0x428>
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d005      	beq.n	8005b4e <UART_SetConfig+0x432>
 8005b42:	e010      	b.n	8005b66 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b44:	f7fe fac2 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 8005b48:	0003      	movs	r3, r0
 8005b4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b4c:	e014      	b.n	8005b78 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b4e:	4b2e      	ldr	r3, [pc, #184]	; (8005c08 <UART_SetConfig+0x4ec>)
 8005b50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b52:	e011      	b.n	8005b78 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b54:	f7fe fa2e 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8005b58:	0003      	movs	r3, r0
 8005b5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b5c:	e00c      	b.n	8005b78 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b5e:	2380      	movs	r3, #128	; 0x80
 8005b60:	021b      	lsls	r3, r3, #8
 8005b62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b64:	e008      	b.n	8005b78 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005b6a:	231a      	movs	r3, #26
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	189b      	adds	r3, r3, r2
 8005b70:	19db      	adds	r3, r3, r7
 8005b72:	2201      	movs	r2, #1
 8005b74:	701a      	strb	r2, [r3, #0]
        break;
 8005b76:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d02a      	beq.n	8005bd4 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b82:	4b20      	ldr	r3, [pc, #128]	; (8005c04 <UART_SetConfig+0x4e8>)
 8005b84:	0052      	lsls	r2, r2, #1
 8005b86:	5ad3      	ldrh	r3, [r2, r3]
 8005b88:	0019      	movs	r1, r3
 8005b8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005b8c:	f7fa fac4 	bl	8000118 <__udivsi3>
 8005b90:	0003      	movs	r3, r0
 8005b92:	001a      	movs	r2, r3
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	085b      	lsrs	r3, r3, #1
 8005b9a:	18d2      	adds	r2, r2, r3
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	0019      	movs	r1, r3
 8005ba2:	0010      	movs	r0, r2
 8005ba4:	f7fa fab8 	bl	8000118 <__udivsi3>
 8005ba8:	0003      	movs	r3, r0
 8005baa:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	2b0f      	cmp	r3, #15
 8005bb0:	d90a      	bls.n	8005bc8 <UART_SetConfig+0x4ac>
 8005bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb4:	2380      	movs	r3, #128	; 0x80
 8005bb6:	025b      	lsls	r3, r3, #9
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d205      	bcs.n	8005bc8 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	60da      	str	r2, [r3, #12]
 8005bc6:	e005      	b.n	8005bd4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005bc8:	231a      	movs	r3, #26
 8005bca:	2220      	movs	r2, #32
 8005bcc:	189b      	adds	r3, r3, r2
 8005bce:	19db      	adds	r3, r3, r7
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	226a      	movs	r2, #106	; 0x6a
 8005bd8:	2101      	movs	r1, #1
 8005bda:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	2268      	movs	r2, #104	; 0x68
 8005be0:	2101      	movs	r1, #1
 8005be2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	2200      	movs	r2, #0
 8005be8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	2200      	movs	r2, #0
 8005bee:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005bf0:	231a      	movs	r3, #26
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	189b      	adds	r3, r3, r2
 8005bf6:	19db      	adds	r3, r3, r7
 8005bf8:	781b      	ldrb	r3, [r3, #0]
}
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	b010      	add	sp, #64	; 0x40
 8005c00:	bdb0      	pop	{r4, r5, r7, pc}
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	08007578 	.word	0x08007578
 8005c08:	00f42400 	.word	0x00f42400

08005c0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c18:	2201      	movs	r2, #1
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d00b      	beq.n	8005c36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	4a4a      	ldr	r2, [pc, #296]	; (8005d50 <UART_AdvFeatureConfig+0x144>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	0019      	movs	r1, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	d00b      	beq.n	8005c58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4a43      	ldr	r2, [pc, #268]	; (8005d54 <UART_AdvFeatureConfig+0x148>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	0019      	movs	r1, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5c:	2204      	movs	r2, #4
 8005c5e:	4013      	ands	r3, r2
 8005c60:	d00b      	beq.n	8005c7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	4a3b      	ldr	r2, [pc, #236]	; (8005d58 <UART_AdvFeatureConfig+0x14c>)
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	0019      	movs	r1, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7e:	2208      	movs	r2, #8
 8005c80:	4013      	ands	r3, r2
 8005c82:	d00b      	beq.n	8005c9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	4a34      	ldr	r2, [pc, #208]	; (8005d5c <UART_AdvFeatureConfig+0x150>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	0019      	movs	r1, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	2210      	movs	r2, #16
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d00b      	beq.n	8005cbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	4a2c      	ldr	r2, [pc, #176]	; (8005d60 <UART_AdvFeatureConfig+0x154>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	0019      	movs	r1, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	d00b      	beq.n	8005ce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	4a25      	ldr	r2, [pc, #148]	; (8005d64 <UART_AdvFeatureConfig+0x158>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	0019      	movs	r1, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	2240      	movs	r2, #64	; 0x40
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d01d      	beq.n	8005d26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	4a1d      	ldr	r2, [pc, #116]	; (8005d68 <UART_AdvFeatureConfig+0x15c>)
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	0019      	movs	r1, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d06:	2380      	movs	r3, #128	; 0x80
 8005d08:	035b      	lsls	r3, r3, #13
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d10b      	bne.n	8005d26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	4a15      	ldr	r2, [pc, #84]	; (8005d6c <UART_AdvFeatureConfig+0x160>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	0019      	movs	r1, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	2280      	movs	r2, #128	; 0x80
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d00b      	beq.n	8005d48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	4a0e      	ldr	r2, [pc, #56]	; (8005d70 <UART_AdvFeatureConfig+0x164>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	0019      	movs	r1, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	605a      	str	r2, [r3, #4]
  }
}
 8005d48:	46c0      	nop			; (mov r8, r8)
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b002      	add	sp, #8
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	fffdffff 	.word	0xfffdffff
 8005d54:	fffeffff 	.word	0xfffeffff
 8005d58:	fffbffff 	.word	0xfffbffff
 8005d5c:	ffff7fff 	.word	0xffff7fff
 8005d60:	ffffefff 	.word	0xffffefff
 8005d64:	ffffdfff 	.word	0xffffdfff
 8005d68:	ffefffff 	.word	0xffefffff
 8005d6c:	ff9fffff 	.word	0xff9fffff
 8005d70:	fff7ffff 	.word	0xfff7ffff

08005d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2290      	movs	r2, #144	; 0x90
 8005d80:	2100      	movs	r1, #0
 8005d82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d84:	f7fb ff24 	bl	8001bd0 <HAL_GetTick>
 8005d88:	0003      	movs	r3, r0
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2208      	movs	r2, #8
 8005d94:	4013      	ands	r3, r2
 8005d96:	2b08      	cmp	r3, #8
 8005d98:	d10c      	bne.n	8005db4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2280      	movs	r2, #128	; 0x80
 8005d9e:	0391      	lsls	r1, r2, #14
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	4a1a      	ldr	r2, [pc, #104]	; (8005e0c <UART_CheckIdleState+0x98>)
 8005da4:	9200      	str	r2, [sp, #0]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f000 f832 	bl	8005e10 <UART_WaitOnFlagUntilTimeout>
 8005dac:	1e03      	subs	r3, r0, #0
 8005dae:	d001      	beq.n	8005db4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e026      	b.n	8005e02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2204      	movs	r2, #4
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d10c      	bne.n	8005ddc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2280      	movs	r2, #128	; 0x80
 8005dc6:	03d1      	lsls	r1, r2, #15
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	4a10      	ldr	r2, [pc, #64]	; (8005e0c <UART_CheckIdleState+0x98>)
 8005dcc:	9200      	str	r2, [sp, #0]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f000 f81e 	bl	8005e10 <UART_WaitOnFlagUntilTimeout>
 8005dd4:	1e03      	subs	r3, r0, #0
 8005dd6:	d001      	beq.n	8005ddc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e012      	b.n	8005e02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2288      	movs	r2, #136	; 0x88
 8005de0:	2120      	movs	r1, #32
 8005de2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	228c      	movs	r2, #140	; 0x8c
 8005de8:	2120      	movs	r1, #32
 8005dea:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2284      	movs	r2, #132	; 0x84
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	0018      	movs	r0, r3
 8005e04:	46bd      	mov	sp, r7
 8005e06:	b004      	add	sp, #16
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	46c0      	nop			; (mov r8, r8)
 8005e0c:	01ffffff 	.word	0x01ffffff

08005e10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b094      	sub	sp, #80	; 0x50
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	1dfb      	adds	r3, r7, #7
 8005e1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e20:	e0a7      	b.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e24:	3301      	adds	r3, #1
 8005e26:	d100      	bne.n	8005e2a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005e28:	e0a3      	b.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2a:	f7fb fed1 	bl	8001bd0 <HAL_GetTick>
 8005e2e:	0002      	movs	r2, r0
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d302      	bcc.n	8005e40 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d13f      	bne.n	8005ec0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e40:	f3ef 8310 	mrs	r3, PRIMASK
 8005e44:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e48:	647b      	str	r3, [r7, #68]	; 0x44
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e50:	f383 8810 	msr	PRIMASK, r3
}
 8005e54:	46c0      	nop			; (mov r8, r8)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	494e      	ldr	r1, [pc, #312]	; (8005f9c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005e62:	400a      	ands	r2, r1
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e68:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	f383 8810 	msr	PRIMASK, r3
}
 8005e70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e72:	f3ef 8310 	mrs	r3, PRIMASK
 8005e76:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e82:	f383 8810 	msr	PRIMASK, r3
}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2101      	movs	r1, #1
 8005e94:	438a      	bics	r2, r1
 8005e96:	609a      	str	r2, [r3, #8]
 8005e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9e:	f383 8810 	msr	PRIMASK, r3
}
 8005ea2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2288      	movs	r2, #136	; 0x88
 8005ea8:	2120      	movs	r1, #32
 8005eaa:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	228c      	movs	r2, #140	; 0x8c
 8005eb0:	2120      	movs	r1, #32
 8005eb2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2284      	movs	r2, #132	; 0x84
 8005eb8:	2100      	movs	r1, #0
 8005eba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e069      	b.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2204      	movs	r2, #4
 8005ec8:	4013      	ands	r3, r2
 8005eca:	d052      	beq.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69da      	ldr	r2, [r3, #28]
 8005ed2:	2380      	movs	r3, #128	; 0x80
 8005ed4:	011b      	lsls	r3, r3, #4
 8005ed6:	401a      	ands	r2, r3
 8005ed8:	2380      	movs	r3, #128	; 0x80
 8005eda:	011b      	lsls	r3, r3, #4
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d148      	bne.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2280      	movs	r2, #128	; 0x80
 8005ee6:	0112      	lsls	r2, r2, #4
 8005ee8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eea:	f3ef 8310 	mrs	r3, PRIMASK
 8005eee:	613b      	str	r3, [r7, #16]
  return(result);
 8005ef0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f383 8810 	msr	PRIMASK, r3
}
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4924      	ldr	r1, [pc, #144]	; (8005f9c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005f0c:	400a      	ands	r2, r1
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	f383 8810 	msr	PRIMASK, r3
}
 8005f1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f20:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f22:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f24:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f26:	2301      	movs	r3, #1
 8005f28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	f383 8810 	msr	PRIMASK, r3
}
 8005f30:	46c0      	nop			; (mov r8, r8)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	438a      	bics	r2, r1
 8005f40:	609a      	str	r2, [r3, #8]
 8005f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	f383 8810 	msr	PRIMASK, r3
}
 8005f4c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2288      	movs	r2, #136	; 0x88
 8005f52:	2120      	movs	r1, #32
 8005f54:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	228c      	movs	r2, #140	; 0x8c
 8005f5a:	2120      	movs	r1, #32
 8005f5c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2290      	movs	r2, #144	; 0x90
 8005f62:	2120      	movs	r1, #32
 8005f64:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2284      	movs	r2, #132	; 0x84
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e010      	b.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	425a      	negs	r2, r3
 8005f82:	4153      	adcs	r3, r2
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	001a      	movs	r2, r3
 8005f88:	1dfb      	adds	r3, r7, #7
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d100      	bne.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x182>
 8005f90:	e747      	b.n	8005e22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	0018      	movs	r0, r3
 8005f96:	46bd      	mov	sp, r7
 8005f98:	b014      	add	sp, #80	; 0x50
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	fffffe5f 	.word	0xfffffe5f

08005fa0 <__errno>:
 8005fa0:	4b01      	ldr	r3, [pc, #4]	; (8005fa8 <__errno+0x8>)
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	4770      	bx	lr
 8005fa6:	46c0      	nop			; (mov r8, r8)
 8005fa8:	2000003c 	.word	0x2000003c

08005fac <__libc_init_array>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	2600      	movs	r6, #0
 8005fb0:	4d0c      	ldr	r5, [pc, #48]	; (8005fe4 <__libc_init_array+0x38>)
 8005fb2:	4c0d      	ldr	r4, [pc, #52]	; (8005fe8 <__libc_init_array+0x3c>)
 8005fb4:	1b64      	subs	r4, r4, r5
 8005fb6:	10a4      	asrs	r4, r4, #2
 8005fb8:	42a6      	cmp	r6, r4
 8005fba:	d109      	bne.n	8005fd0 <__libc_init_array+0x24>
 8005fbc:	2600      	movs	r6, #0
 8005fbe:	f001 f803 	bl	8006fc8 <_init>
 8005fc2:	4d0a      	ldr	r5, [pc, #40]	; (8005fec <__libc_init_array+0x40>)
 8005fc4:	4c0a      	ldr	r4, [pc, #40]	; (8005ff0 <__libc_init_array+0x44>)
 8005fc6:	1b64      	subs	r4, r4, r5
 8005fc8:	10a4      	asrs	r4, r4, #2
 8005fca:	42a6      	cmp	r6, r4
 8005fcc:	d105      	bne.n	8005fda <__libc_init_array+0x2e>
 8005fce:	bd70      	pop	{r4, r5, r6, pc}
 8005fd0:	00b3      	lsls	r3, r6, #2
 8005fd2:	58eb      	ldr	r3, [r5, r3]
 8005fd4:	4798      	blx	r3
 8005fd6:	3601      	adds	r6, #1
 8005fd8:	e7ee      	b.n	8005fb8 <__libc_init_array+0xc>
 8005fda:	00b3      	lsls	r3, r6, #2
 8005fdc:	58eb      	ldr	r3, [r5, r3]
 8005fde:	4798      	blx	r3
 8005fe0:	3601      	adds	r6, #1
 8005fe2:	e7f2      	b.n	8005fca <__libc_init_array+0x1e>
 8005fe4:	08007630 	.word	0x08007630
 8005fe8:	08007630 	.word	0x08007630
 8005fec:	08007630 	.word	0x08007630
 8005ff0:	08007634 	.word	0x08007634

08005ff4 <memcpy>:
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	b510      	push	{r4, lr}
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d100      	bne.n	8005ffe <memcpy+0xa>
 8005ffc:	bd10      	pop	{r4, pc}
 8005ffe:	5ccc      	ldrb	r4, [r1, r3]
 8006000:	54c4      	strb	r4, [r0, r3]
 8006002:	3301      	adds	r3, #1
 8006004:	e7f8      	b.n	8005ff8 <memcpy+0x4>

08006006 <memset>:
 8006006:	0003      	movs	r3, r0
 8006008:	1882      	adds	r2, r0, r2
 800600a:	4293      	cmp	r3, r2
 800600c:	d100      	bne.n	8006010 <memset+0xa>
 800600e:	4770      	bx	lr
 8006010:	7019      	strb	r1, [r3, #0]
 8006012:	3301      	adds	r3, #1
 8006014:	e7f9      	b.n	800600a <memset+0x4>
	...

08006018 <iprintf>:
 8006018:	b40f      	push	{r0, r1, r2, r3}
 800601a:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <iprintf+0x30>)
 800601c:	b513      	push	{r0, r1, r4, lr}
 800601e:	681c      	ldr	r4, [r3, #0]
 8006020:	2c00      	cmp	r4, #0
 8006022:	d005      	beq.n	8006030 <iprintf+0x18>
 8006024:	69a3      	ldr	r3, [r4, #24]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d102      	bne.n	8006030 <iprintf+0x18>
 800602a:	0020      	movs	r0, r4
 800602c:	f000 f870 	bl	8006110 <__sinit>
 8006030:	ab05      	add	r3, sp, #20
 8006032:	0020      	movs	r0, r4
 8006034:	9a04      	ldr	r2, [sp, #16]
 8006036:	68a1      	ldr	r1, [r4, #8]
 8006038:	9301      	str	r3, [sp, #4]
 800603a:	f000 f9cd 	bl	80063d8 <_vfiprintf_r>
 800603e:	bc16      	pop	{r1, r2, r4}
 8006040:	bc08      	pop	{r3}
 8006042:	b004      	add	sp, #16
 8006044:	4718      	bx	r3
 8006046:	46c0      	nop			; (mov r8, r8)
 8006048:	2000003c 	.word	0x2000003c

0800604c <std>:
 800604c:	2300      	movs	r3, #0
 800604e:	b510      	push	{r4, lr}
 8006050:	0004      	movs	r4, r0
 8006052:	6003      	str	r3, [r0, #0]
 8006054:	6043      	str	r3, [r0, #4]
 8006056:	6083      	str	r3, [r0, #8]
 8006058:	8181      	strh	r1, [r0, #12]
 800605a:	6643      	str	r3, [r0, #100]	; 0x64
 800605c:	0019      	movs	r1, r3
 800605e:	81c2      	strh	r2, [r0, #14]
 8006060:	6103      	str	r3, [r0, #16]
 8006062:	6143      	str	r3, [r0, #20]
 8006064:	6183      	str	r3, [r0, #24]
 8006066:	2208      	movs	r2, #8
 8006068:	305c      	adds	r0, #92	; 0x5c
 800606a:	f7ff ffcc 	bl	8006006 <memset>
 800606e:	4b05      	ldr	r3, [pc, #20]	; (8006084 <std+0x38>)
 8006070:	6224      	str	r4, [r4, #32]
 8006072:	6263      	str	r3, [r4, #36]	; 0x24
 8006074:	4b04      	ldr	r3, [pc, #16]	; (8006088 <std+0x3c>)
 8006076:	62a3      	str	r3, [r4, #40]	; 0x28
 8006078:	4b04      	ldr	r3, [pc, #16]	; (800608c <std+0x40>)
 800607a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800607c:	4b04      	ldr	r3, [pc, #16]	; (8006090 <std+0x44>)
 800607e:	6323      	str	r3, [r4, #48]	; 0x30
 8006080:	bd10      	pop	{r4, pc}
 8006082:	46c0      	nop			; (mov r8, r8)
 8006084:	08006975 	.word	0x08006975
 8006088:	0800699d 	.word	0x0800699d
 800608c:	080069d5 	.word	0x080069d5
 8006090:	08006a01 	.word	0x08006a01

08006094 <_cleanup_r>:
 8006094:	b510      	push	{r4, lr}
 8006096:	4902      	ldr	r1, [pc, #8]	; (80060a0 <_cleanup_r+0xc>)
 8006098:	f000 f8ba 	bl	8006210 <_fwalk_reent>
 800609c:	bd10      	pop	{r4, pc}
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	08006d0d 	.word	0x08006d0d

080060a4 <__sfmoreglue>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	2568      	movs	r5, #104	; 0x68
 80060a8:	1e4a      	subs	r2, r1, #1
 80060aa:	4355      	muls	r5, r2
 80060ac:	000e      	movs	r6, r1
 80060ae:	0029      	movs	r1, r5
 80060b0:	3174      	adds	r1, #116	; 0x74
 80060b2:	f000 f8f3 	bl	800629c <_malloc_r>
 80060b6:	1e04      	subs	r4, r0, #0
 80060b8:	d008      	beq.n	80060cc <__sfmoreglue+0x28>
 80060ba:	2100      	movs	r1, #0
 80060bc:	002a      	movs	r2, r5
 80060be:	6001      	str	r1, [r0, #0]
 80060c0:	6046      	str	r6, [r0, #4]
 80060c2:	300c      	adds	r0, #12
 80060c4:	60a0      	str	r0, [r4, #8]
 80060c6:	3268      	adds	r2, #104	; 0x68
 80060c8:	f7ff ff9d 	bl	8006006 <memset>
 80060cc:	0020      	movs	r0, r4
 80060ce:	bd70      	pop	{r4, r5, r6, pc}

080060d0 <__sfp_lock_acquire>:
 80060d0:	b510      	push	{r4, lr}
 80060d2:	4802      	ldr	r0, [pc, #8]	; (80060dc <__sfp_lock_acquire+0xc>)
 80060d4:	f000 f8bd 	bl	8006252 <__retarget_lock_acquire_recursive>
 80060d8:	bd10      	pop	{r4, pc}
 80060da:	46c0      	nop			; (mov r8, r8)
 80060dc:	20000255 	.word	0x20000255

080060e0 <__sfp_lock_release>:
 80060e0:	b510      	push	{r4, lr}
 80060e2:	4802      	ldr	r0, [pc, #8]	; (80060ec <__sfp_lock_release+0xc>)
 80060e4:	f000 f8b6 	bl	8006254 <__retarget_lock_release_recursive>
 80060e8:	bd10      	pop	{r4, pc}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	20000255 	.word	0x20000255

080060f0 <__sinit_lock_acquire>:
 80060f0:	b510      	push	{r4, lr}
 80060f2:	4802      	ldr	r0, [pc, #8]	; (80060fc <__sinit_lock_acquire+0xc>)
 80060f4:	f000 f8ad 	bl	8006252 <__retarget_lock_acquire_recursive>
 80060f8:	bd10      	pop	{r4, pc}
 80060fa:	46c0      	nop			; (mov r8, r8)
 80060fc:	20000256 	.word	0x20000256

08006100 <__sinit_lock_release>:
 8006100:	b510      	push	{r4, lr}
 8006102:	4802      	ldr	r0, [pc, #8]	; (800610c <__sinit_lock_release+0xc>)
 8006104:	f000 f8a6 	bl	8006254 <__retarget_lock_release_recursive>
 8006108:	bd10      	pop	{r4, pc}
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	20000256 	.word	0x20000256

08006110 <__sinit>:
 8006110:	b513      	push	{r0, r1, r4, lr}
 8006112:	0004      	movs	r4, r0
 8006114:	f7ff ffec 	bl	80060f0 <__sinit_lock_acquire>
 8006118:	69a3      	ldr	r3, [r4, #24]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <__sinit+0x14>
 800611e:	f7ff ffef 	bl	8006100 <__sinit_lock_release>
 8006122:	bd13      	pop	{r0, r1, r4, pc}
 8006124:	64a3      	str	r3, [r4, #72]	; 0x48
 8006126:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006128:	6523      	str	r3, [r4, #80]	; 0x50
 800612a:	4b13      	ldr	r3, [pc, #76]	; (8006178 <__sinit+0x68>)
 800612c:	4a13      	ldr	r2, [pc, #76]	; (800617c <__sinit+0x6c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	62a2      	str	r2, [r4, #40]	; 0x28
 8006132:	9301      	str	r3, [sp, #4]
 8006134:	42a3      	cmp	r3, r4
 8006136:	d101      	bne.n	800613c <__sinit+0x2c>
 8006138:	2301      	movs	r3, #1
 800613a:	61a3      	str	r3, [r4, #24]
 800613c:	0020      	movs	r0, r4
 800613e:	f000 f81f 	bl	8006180 <__sfp>
 8006142:	6060      	str	r0, [r4, #4]
 8006144:	0020      	movs	r0, r4
 8006146:	f000 f81b 	bl	8006180 <__sfp>
 800614a:	60a0      	str	r0, [r4, #8]
 800614c:	0020      	movs	r0, r4
 800614e:	f000 f817 	bl	8006180 <__sfp>
 8006152:	2200      	movs	r2, #0
 8006154:	2104      	movs	r1, #4
 8006156:	60e0      	str	r0, [r4, #12]
 8006158:	6860      	ldr	r0, [r4, #4]
 800615a:	f7ff ff77 	bl	800604c <std>
 800615e:	2201      	movs	r2, #1
 8006160:	2109      	movs	r1, #9
 8006162:	68a0      	ldr	r0, [r4, #8]
 8006164:	f7ff ff72 	bl	800604c <std>
 8006168:	2202      	movs	r2, #2
 800616a:	2112      	movs	r1, #18
 800616c:	68e0      	ldr	r0, [r4, #12]
 800616e:	f7ff ff6d 	bl	800604c <std>
 8006172:	2301      	movs	r3, #1
 8006174:	61a3      	str	r3, [r4, #24]
 8006176:	e7d2      	b.n	800611e <__sinit+0xe>
 8006178:	08007590 	.word	0x08007590
 800617c:	08006095 	.word	0x08006095

08006180 <__sfp>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	0007      	movs	r7, r0
 8006184:	f7ff ffa4 	bl	80060d0 <__sfp_lock_acquire>
 8006188:	4b1f      	ldr	r3, [pc, #124]	; (8006208 <__sfp+0x88>)
 800618a:	681e      	ldr	r6, [r3, #0]
 800618c:	69b3      	ldr	r3, [r6, #24]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d102      	bne.n	8006198 <__sfp+0x18>
 8006192:	0030      	movs	r0, r6
 8006194:	f7ff ffbc 	bl	8006110 <__sinit>
 8006198:	3648      	adds	r6, #72	; 0x48
 800619a:	68b4      	ldr	r4, [r6, #8]
 800619c:	6873      	ldr	r3, [r6, #4]
 800619e:	3b01      	subs	r3, #1
 80061a0:	d504      	bpl.n	80061ac <__sfp+0x2c>
 80061a2:	6833      	ldr	r3, [r6, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d022      	beq.n	80061ee <__sfp+0x6e>
 80061a8:	6836      	ldr	r6, [r6, #0]
 80061aa:	e7f6      	b.n	800619a <__sfp+0x1a>
 80061ac:	220c      	movs	r2, #12
 80061ae:	5ea5      	ldrsh	r5, [r4, r2]
 80061b0:	2d00      	cmp	r5, #0
 80061b2:	d11a      	bne.n	80061ea <__sfp+0x6a>
 80061b4:	0020      	movs	r0, r4
 80061b6:	4b15      	ldr	r3, [pc, #84]	; (800620c <__sfp+0x8c>)
 80061b8:	3058      	adds	r0, #88	; 0x58
 80061ba:	60e3      	str	r3, [r4, #12]
 80061bc:	6665      	str	r5, [r4, #100]	; 0x64
 80061be:	f000 f847 	bl	8006250 <__retarget_lock_init_recursive>
 80061c2:	f7ff ff8d 	bl	80060e0 <__sfp_lock_release>
 80061c6:	0020      	movs	r0, r4
 80061c8:	2208      	movs	r2, #8
 80061ca:	0029      	movs	r1, r5
 80061cc:	6025      	str	r5, [r4, #0]
 80061ce:	60a5      	str	r5, [r4, #8]
 80061d0:	6065      	str	r5, [r4, #4]
 80061d2:	6125      	str	r5, [r4, #16]
 80061d4:	6165      	str	r5, [r4, #20]
 80061d6:	61a5      	str	r5, [r4, #24]
 80061d8:	305c      	adds	r0, #92	; 0x5c
 80061da:	f7ff ff14 	bl	8006006 <memset>
 80061de:	6365      	str	r5, [r4, #52]	; 0x34
 80061e0:	63a5      	str	r5, [r4, #56]	; 0x38
 80061e2:	64a5      	str	r5, [r4, #72]	; 0x48
 80061e4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80061e6:	0020      	movs	r0, r4
 80061e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ea:	3468      	adds	r4, #104	; 0x68
 80061ec:	e7d7      	b.n	800619e <__sfp+0x1e>
 80061ee:	2104      	movs	r1, #4
 80061f0:	0038      	movs	r0, r7
 80061f2:	f7ff ff57 	bl	80060a4 <__sfmoreglue>
 80061f6:	1e04      	subs	r4, r0, #0
 80061f8:	6030      	str	r0, [r6, #0]
 80061fa:	d1d5      	bne.n	80061a8 <__sfp+0x28>
 80061fc:	f7ff ff70 	bl	80060e0 <__sfp_lock_release>
 8006200:	230c      	movs	r3, #12
 8006202:	603b      	str	r3, [r7, #0]
 8006204:	e7ef      	b.n	80061e6 <__sfp+0x66>
 8006206:	46c0      	nop			; (mov r8, r8)
 8006208:	08007590 	.word	0x08007590
 800620c:	ffff0001 	.word	0xffff0001

08006210 <_fwalk_reent>:
 8006210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006212:	0004      	movs	r4, r0
 8006214:	0006      	movs	r6, r0
 8006216:	2700      	movs	r7, #0
 8006218:	9101      	str	r1, [sp, #4]
 800621a:	3448      	adds	r4, #72	; 0x48
 800621c:	6863      	ldr	r3, [r4, #4]
 800621e:	68a5      	ldr	r5, [r4, #8]
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	9b00      	ldr	r3, [sp, #0]
 8006224:	3b01      	subs	r3, #1
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	d504      	bpl.n	8006234 <_fwalk_reent+0x24>
 800622a:	6824      	ldr	r4, [r4, #0]
 800622c:	2c00      	cmp	r4, #0
 800622e:	d1f5      	bne.n	800621c <_fwalk_reent+0xc>
 8006230:	0038      	movs	r0, r7
 8006232:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006234:	89ab      	ldrh	r3, [r5, #12]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d908      	bls.n	800624c <_fwalk_reent+0x3c>
 800623a:	220e      	movs	r2, #14
 800623c:	5eab      	ldrsh	r3, [r5, r2]
 800623e:	3301      	adds	r3, #1
 8006240:	d004      	beq.n	800624c <_fwalk_reent+0x3c>
 8006242:	0029      	movs	r1, r5
 8006244:	0030      	movs	r0, r6
 8006246:	9b01      	ldr	r3, [sp, #4]
 8006248:	4798      	blx	r3
 800624a:	4307      	orrs	r7, r0
 800624c:	3568      	adds	r5, #104	; 0x68
 800624e:	e7e8      	b.n	8006222 <_fwalk_reent+0x12>

08006250 <__retarget_lock_init_recursive>:
 8006250:	4770      	bx	lr

08006252 <__retarget_lock_acquire_recursive>:
 8006252:	4770      	bx	lr

08006254 <__retarget_lock_release_recursive>:
 8006254:	4770      	bx	lr
	...

08006258 <sbrk_aligned>:
 8006258:	b570      	push	{r4, r5, r6, lr}
 800625a:	4e0f      	ldr	r6, [pc, #60]	; (8006298 <sbrk_aligned+0x40>)
 800625c:	000d      	movs	r5, r1
 800625e:	6831      	ldr	r1, [r6, #0]
 8006260:	0004      	movs	r4, r0
 8006262:	2900      	cmp	r1, #0
 8006264:	d102      	bne.n	800626c <sbrk_aligned+0x14>
 8006266:	f000 fb73 	bl	8006950 <_sbrk_r>
 800626a:	6030      	str	r0, [r6, #0]
 800626c:	0029      	movs	r1, r5
 800626e:	0020      	movs	r0, r4
 8006270:	f000 fb6e 	bl	8006950 <_sbrk_r>
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	d00a      	beq.n	800628e <sbrk_aligned+0x36>
 8006278:	2303      	movs	r3, #3
 800627a:	1cc5      	adds	r5, r0, #3
 800627c:	439d      	bics	r5, r3
 800627e:	42a8      	cmp	r0, r5
 8006280:	d007      	beq.n	8006292 <sbrk_aligned+0x3a>
 8006282:	1a29      	subs	r1, r5, r0
 8006284:	0020      	movs	r0, r4
 8006286:	f000 fb63 	bl	8006950 <_sbrk_r>
 800628a:	1c43      	adds	r3, r0, #1
 800628c:	d101      	bne.n	8006292 <sbrk_aligned+0x3a>
 800628e:	2501      	movs	r5, #1
 8006290:	426d      	negs	r5, r5
 8006292:	0028      	movs	r0, r5
 8006294:	bd70      	pop	{r4, r5, r6, pc}
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	2000025c 	.word	0x2000025c

0800629c <_malloc_r>:
 800629c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800629e:	2203      	movs	r2, #3
 80062a0:	1ccb      	adds	r3, r1, #3
 80062a2:	4393      	bics	r3, r2
 80062a4:	3308      	adds	r3, #8
 80062a6:	0006      	movs	r6, r0
 80062a8:	001f      	movs	r7, r3
 80062aa:	2b0c      	cmp	r3, #12
 80062ac:	d232      	bcs.n	8006314 <_malloc_r+0x78>
 80062ae:	270c      	movs	r7, #12
 80062b0:	42b9      	cmp	r1, r7
 80062b2:	d831      	bhi.n	8006318 <_malloc_r+0x7c>
 80062b4:	0030      	movs	r0, r6
 80062b6:	f000 fdf5 	bl	8006ea4 <__malloc_lock>
 80062ba:	4d32      	ldr	r5, [pc, #200]	; (8006384 <_malloc_r+0xe8>)
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	001c      	movs	r4, r3
 80062c0:	2c00      	cmp	r4, #0
 80062c2:	d12e      	bne.n	8006322 <_malloc_r+0x86>
 80062c4:	0039      	movs	r1, r7
 80062c6:	0030      	movs	r0, r6
 80062c8:	f7ff ffc6 	bl	8006258 <sbrk_aligned>
 80062cc:	0004      	movs	r4, r0
 80062ce:	1c43      	adds	r3, r0, #1
 80062d0:	d11e      	bne.n	8006310 <_malloc_r+0x74>
 80062d2:	682c      	ldr	r4, [r5, #0]
 80062d4:	0025      	movs	r5, r4
 80062d6:	2d00      	cmp	r5, #0
 80062d8:	d14a      	bne.n	8006370 <_malloc_r+0xd4>
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	0029      	movs	r1, r5
 80062de:	18e3      	adds	r3, r4, r3
 80062e0:	0030      	movs	r0, r6
 80062e2:	9301      	str	r3, [sp, #4]
 80062e4:	f000 fb34 	bl	8006950 <_sbrk_r>
 80062e8:	9b01      	ldr	r3, [sp, #4]
 80062ea:	4283      	cmp	r3, r0
 80062ec:	d143      	bne.n	8006376 <_malloc_r+0xda>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	3703      	adds	r7, #3
 80062f2:	1aff      	subs	r7, r7, r3
 80062f4:	2303      	movs	r3, #3
 80062f6:	439f      	bics	r7, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	2f0c      	cmp	r7, #12
 80062fc:	d200      	bcs.n	8006300 <_malloc_r+0x64>
 80062fe:	270c      	movs	r7, #12
 8006300:	0039      	movs	r1, r7
 8006302:	0030      	movs	r0, r6
 8006304:	f7ff ffa8 	bl	8006258 <sbrk_aligned>
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	d034      	beq.n	8006376 <_malloc_r+0xda>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	19df      	adds	r7, r3, r7
 8006310:	6027      	str	r7, [r4, #0]
 8006312:	e013      	b.n	800633c <_malloc_r+0xa0>
 8006314:	2b00      	cmp	r3, #0
 8006316:	dacb      	bge.n	80062b0 <_malloc_r+0x14>
 8006318:	230c      	movs	r3, #12
 800631a:	2500      	movs	r5, #0
 800631c:	6033      	str	r3, [r6, #0]
 800631e:	0028      	movs	r0, r5
 8006320:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006322:	6822      	ldr	r2, [r4, #0]
 8006324:	1bd1      	subs	r1, r2, r7
 8006326:	d420      	bmi.n	800636a <_malloc_r+0xce>
 8006328:	290b      	cmp	r1, #11
 800632a:	d917      	bls.n	800635c <_malloc_r+0xc0>
 800632c:	19e2      	adds	r2, r4, r7
 800632e:	6027      	str	r7, [r4, #0]
 8006330:	42a3      	cmp	r3, r4
 8006332:	d111      	bne.n	8006358 <_malloc_r+0xbc>
 8006334:	602a      	str	r2, [r5, #0]
 8006336:	6863      	ldr	r3, [r4, #4]
 8006338:	6011      	str	r1, [r2, #0]
 800633a:	6053      	str	r3, [r2, #4]
 800633c:	0030      	movs	r0, r6
 800633e:	0025      	movs	r5, r4
 8006340:	f000 fdb8 	bl	8006eb4 <__malloc_unlock>
 8006344:	2207      	movs	r2, #7
 8006346:	350b      	adds	r5, #11
 8006348:	1d23      	adds	r3, r4, #4
 800634a:	4395      	bics	r5, r2
 800634c:	1aea      	subs	r2, r5, r3
 800634e:	429d      	cmp	r5, r3
 8006350:	d0e5      	beq.n	800631e <_malloc_r+0x82>
 8006352:	1b5b      	subs	r3, r3, r5
 8006354:	50a3      	str	r3, [r4, r2]
 8006356:	e7e2      	b.n	800631e <_malloc_r+0x82>
 8006358:	605a      	str	r2, [r3, #4]
 800635a:	e7ec      	b.n	8006336 <_malloc_r+0x9a>
 800635c:	6862      	ldr	r2, [r4, #4]
 800635e:	42a3      	cmp	r3, r4
 8006360:	d101      	bne.n	8006366 <_malloc_r+0xca>
 8006362:	602a      	str	r2, [r5, #0]
 8006364:	e7ea      	b.n	800633c <_malloc_r+0xa0>
 8006366:	605a      	str	r2, [r3, #4]
 8006368:	e7e8      	b.n	800633c <_malloc_r+0xa0>
 800636a:	0023      	movs	r3, r4
 800636c:	6864      	ldr	r4, [r4, #4]
 800636e:	e7a7      	b.n	80062c0 <_malloc_r+0x24>
 8006370:	002c      	movs	r4, r5
 8006372:	686d      	ldr	r5, [r5, #4]
 8006374:	e7af      	b.n	80062d6 <_malloc_r+0x3a>
 8006376:	230c      	movs	r3, #12
 8006378:	0030      	movs	r0, r6
 800637a:	6033      	str	r3, [r6, #0]
 800637c:	f000 fd9a 	bl	8006eb4 <__malloc_unlock>
 8006380:	e7cd      	b.n	800631e <_malloc_r+0x82>
 8006382:	46c0      	nop			; (mov r8, r8)
 8006384:	20000258 	.word	0x20000258

08006388 <__sfputc_r>:
 8006388:	6893      	ldr	r3, [r2, #8]
 800638a:	b510      	push	{r4, lr}
 800638c:	3b01      	subs	r3, #1
 800638e:	6093      	str	r3, [r2, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	da04      	bge.n	800639e <__sfputc_r+0x16>
 8006394:	6994      	ldr	r4, [r2, #24]
 8006396:	42a3      	cmp	r3, r4
 8006398:	db07      	blt.n	80063aa <__sfputc_r+0x22>
 800639a:	290a      	cmp	r1, #10
 800639c:	d005      	beq.n	80063aa <__sfputc_r+0x22>
 800639e:	6813      	ldr	r3, [r2, #0]
 80063a0:	1c58      	adds	r0, r3, #1
 80063a2:	6010      	str	r0, [r2, #0]
 80063a4:	7019      	strb	r1, [r3, #0]
 80063a6:	0008      	movs	r0, r1
 80063a8:	bd10      	pop	{r4, pc}
 80063aa:	f000 fb2f 	bl	8006a0c <__swbuf_r>
 80063ae:	0001      	movs	r1, r0
 80063b0:	e7f9      	b.n	80063a6 <__sfputc_r+0x1e>

080063b2 <__sfputs_r>:
 80063b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b4:	0006      	movs	r6, r0
 80063b6:	000f      	movs	r7, r1
 80063b8:	0014      	movs	r4, r2
 80063ba:	18d5      	adds	r5, r2, r3
 80063bc:	42ac      	cmp	r4, r5
 80063be:	d101      	bne.n	80063c4 <__sfputs_r+0x12>
 80063c0:	2000      	movs	r0, #0
 80063c2:	e007      	b.n	80063d4 <__sfputs_r+0x22>
 80063c4:	7821      	ldrb	r1, [r4, #0]
 80063c6:	003a      	movs	r2, r7
 80063c8:	0030      	movs	r0, r6
 80063ca:	f7ff ffdd 	bl	8006388 <__sfputc_r>
 80063ce:	3401      	adds	r4, #1
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	d1f3      	bne.n	80063bc <__sfputs_r+0xa>
 80063d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063d8 <_vfiprintf_r>:
 80063d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063da:	b0a1      	sub	sp, #132	; 0x84
 80063dc:	0006      	movs	r6, r0
 80063de:	000c      	movs	r4, r1
 80063e0:	001f      	movs	r7, r3
 80063e2:	9203      	str	r2, [sp, #12]
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d004      	beq.n	80063f2 <_vfiprintf_r+0x1a>
 80063e8:	6983      	ldr	r3, [r0, #24]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <_vfiprintf_r+0x1a>
 80063ee:	f7ff fe8f 	bl	8006110 <__sinit>
 80063f2:	4b8e      	ldr	r3, [pc, #568]	; (800662c <_vfiprintf_r+0x254>)
 80063f4:	429c      	cmp	r4, r3
 80063f6:	d11c      	bne.n	8006432 <_vfiprintf_r+0x5a>
 80063f8:	6874      	ldr	r4, [r6, #4]
 80063fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063fc:	07db      	lsls	r3, r3, #31
 80063fe:	d405      	bmi.n	800640c <_vfiprintf_r+0x34>
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	059b      	lsls	r3, r3, #22
 8006404:	d402      	bmi.n	800640c <_vfiprintf_r+0x34>
 8006406:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006408:	f7ff ff23 	bl	8006252 <__retarget_lock_acquire_recursive>
 800640c:	89a3      	ldrh	r3, [r4, #12]
 800640e:	071b      	lsls	r3, r3, #28
 8006410:	d502      	bpl.n	8006418 <_vfiprintf_r+0x40>
 8006412:	6923      	ldr	r3, [r4, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d11d      	bne.n	8006454 <_vfiprintf_r+0x7c>
 8006418:	0021      	movs	r1, r4
 800641a:	0030      	movs	r0, r6
 800641c:	f000 fb60 	bl	8006ae0 <__swsetup_r>
 8006420:	2800      	cmp	r0, #0
 8006422:	d017      	beq.n	8006454 <_vfiprintf_r+0x7c>
 8006424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006426:	07db      	lsls	r3, r3, #31
 8006428:	d50d      	bpl.n	8006446 <_vfiprintf_r+0x6e>
 800642a:	2001      	movs	r0, #1
 800642c:	4240      	negs	r0, r0
 800642e:	b021      	add	sp, #132	; 0x84
 8006430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006432:	4b7f      	ldr	r3, [pc, #508]	; (8006630 <_vfiprintf_r+0x258>)
 8006434:	429c      	cmp	r4, r3
 8006436:	d101      	bne.n	800643c <_vfiprintf_r+0x64>
 8006438:	68b4      	ldr	r4, [r6, #8]
 800643a:	e7de      	b.n	80063fa <_vfiprintf_r+0x22>
 800643c:	4b7d      	ldr	r3, [pc, #500]	; (8006634 <_vfiprintf_r+0x25c>)
 800643e:	429c      	cmp	r4, r3
 8006440:	d1db      	bne.n	80063fa <_vfiprintf_r+0x22>
 8006442:	68f4      	ldr	r4, [r6, #12]
 8006444:	e7d9      	b.n	80063fa <_vfiprintf_r+0x22>
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	059b      	lsls	r3, r3, #22
 800644a:	d4ee      	bmi.n	800642a <_vfiprintf_r+0x52>
 800644c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800644e:	f7ff ff01 	bl	8006254 <__retarget_lock_release_recursive>
 8006452:	e7ea      	b.n	800642a <_vfiprintf_r+0x52>
 8006454:	2300      	movs	r3, #0
 8006456:	ad08      	add	r5, sp, #32
 8006458:	616b      	str	r3, [r5, #20]
 800645a:	3320      	adds	r3, #32
 800645c:	766b      	strb	r3, [r5, #25]
 800645e:	3310      	adds	r3, #16
 8006460:	76ab      	strb	r3, [r5, #26]
 8006462:	9707      	str	r7, [sp, #28]
 8006464:	9f03      	ldr	r7, [sp, #12]
 8006466:	783b      	ldrb	r3, [r7, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <_vfiprintf_r+0x98>
 800646c:	2b25      	cmp	r3, #37	; 0x25
 800646e:	d14e      	bne.n	800650e <_vfiprintf_r+0x136>
 8006470:	9b03      	ldr	r3, [sp, #12]
 8006472:	1afb      	subs	r3, r7, r3
 8006474:	9305      	str	r3, [sp, #20]
 8006476:	9b03      	ldr	r3, [sp, #12]
 8006478:	429f      	cmp	r7, r3
 800647a:	d00d      	beq.n	8006498 <_vfiprintf_r+0xc0>
 800647c:	9b05      	ldr	r3, [sp, #20]
 800647e:	0021      	movs	r1, r4
 8006480:	0030      	movs	r0, r6
 8006482:	9a03      	ldr	r2, [sp, #12]
 8006484:	f7ff ff95 	bl	80063b2 <__sfputs_r>
 8006488:	1c43      	adds	r3, r0, #1
 800648a:	d100      	bne.n	800648e <_vfiprintf_r+0xb6>
 800648c:	e0b5      	b.n	80065fa <_vfiprintf_r+0x222>
 800648e:	696a      	ldr	r2, [r5, #20]
 8006490:	9b05      	ldr	r3, [sp, #20]
 8006492:	4694      	mov	ip, r2
 8006494:	4463      	add	r3, ip
 8006496:	616b      	str	r3, [r5, #20]
 8006498:	783b      	ldrb	r3, [r7, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d100      	bne.n	80064a0 <_vfiprintf_r+0xc8>
 800649e:	e0ac      	b.n	80065fa <_vfiprintf_r+0x222>
 80064a0:	2201      	movs	r2, #1
 80064a2:	1c7b      	adds	r3, r7, #1
 80064a4:	9303      	str	r3, [sp, #12]
 80064a6:	2300      	movs	r3, #0
 80064a8:	4252      	negs	r2, r2
 80064aa:	606a      	str	r2, [r5, #4]
 80064ac:	a904      	add	r1, sp, #16
 80064ae:	3254      	adds	r2, #84	; 0x54
 80064b0:	1852      	adds	r2, r2, r1
 80064b2:	602b      	str	r3, [r5, #0]
 80064b4:	60eb      	str	r3, [r5, #12]
 80064b6:	60ab      	str	r3, [r5, #8]
 80064b8:	7013      	strb	r3, [r2, #0]
 80064ba:	65ab      	str	r3, [r5, #88]	; 0x58
 80064bc:	9b03      	ldr	r3, [sp, #12]
 80064be:	2205      	movs	r2, #5
 80064c0:	7819      	ldrb	r1, [r3, #0]
 80064c2:	485d      	ldr	r0, [pc, #372]	; (8006638 <_vfiprintf_r+0x260>)
 80064c4:	f000 fce2 	bl	8006e8c <memchr>
 80064c8:	9b03      	ldr	r3, [sp, #12]
 80064ca:	1c5f      	adds	r7, r3, #1
 80064cc:	2800      	cmp	r0, #0
 80064ce:	d120      	bne.n	8006512 <_vfiprintf_r+0x13a>
 80064d0:	682a      	ldr	r2, [r5, #0]
 80064d2:	06d3      	lsls	r3, r2, #27
 80064d4:	d504      	bpl.n	80064e0 <_vfiprintf_r+0x108>
 80064d6:	2353      	movs	r3, #83	; 0x53
 80064d8:	a904      	add	r1, sp, #16
 80064da:	185b      	adds	r3, r3, r1
 80064dc:	2120      	movs	r1, #32
 80064de:	7019      	strb	r1, [r3, #0]
 80064e0:	0713      	lsls	r3, r2, #28
 80064e2:	d504      	bpl.n	80064ee <_vfiprintf_r+0x116>
 80064e4:	2353      	movs	r3, #83	; 0x53
 80064e6:	a904      	add	r1, sp, #16
 80064e8:	185b      	adds	r3, r3, r1
 80064ea:	212b      	movs	r1, #43	; 0x2b
 80064ec:	7019      	strb	r1, [r3, #0]
 80064ee:	9b03      	ldr	r3, [sp, #12]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b2a      	cmp	r3, #42	; 0x2a
 80064f4:	d016      	beq.n	8006524 <_vfiprintf_r+0x14c>
 80064f6:	2100      	movs	r1, #0
 80064f8:	68eb      	ldr	r3, [r5, #12]
 80064fa:	9f03      	ldr	r7, [sp, #12]
 80064fc:	783a      	ldrb	r2, [r7, #0]
 80064fe:	1c78      	adds	r0, r7, #1
 8006500:	3a30      	subs	r2, #48	; 0x30
 8006502:	4684      	mov	ip, r0
 8006504:	2a09      	cmp	r2, #9
 8006506:	d94f      	bls.n	80065a8 <_vfiprintf_r+0x1d0>
 8006508:	2900      	cmp	r1, #0
 800650a:	d111      	bne.n	8006530 <_vfiprintf_r+0x158>
 800650c:	e017      	b.n	800653e <_vfiprintf_r+0x166>
 800650e:	3701      	adds	r7, #1
 8006510:	e7a9      	b.n	8006466 <_vfiprintf_r+0x8e>
 8006512:	4b49      	ldr	r3, [pc, #292]	; (8006638 <_vfiprintf_r+0x260>)
 8006514:	682a      	ldr	r2, [r5, #0]
 8006516:	1ac0      	subs	r0, r0, r3
 8006518:	2301      	movs	r3, #1
 800651a:	4083      	lsls	r3, r0
 800651c:	4313      	orrs	r3, r2
 800651e:	602b      	str	r3, [r5, #0]
 8006520:	9703      	str	r7, [sp, #12]
 8006522:	e7cb      	b.n	80064bc <_vfiprintf_r+0xe4>
 8006524:	9b07      	ldr	r3, [sp, #28]
 8006526:	1d19      	adds	r1, r3, #4
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	9107      	str	r1, [sp, #28]
 800652c:	2b00      	cmp	r3, #0
 800652e:	db01      	blt.n	8006534 <_vfiprintf_r+0x15c>
 8006530:	930b      	str	r3, [sp, #44]	; 0x2c
 8006532:	e004      	b.n	800653e <_vfiprintf_r+0x166>
 8006534:	425b      	negs	r3, r3
 8006536:	60eb      	str	r3, [r5, #12]
 8006538:	2302      	movs	r3, #2
 800653a:	4313      	orrs	r3, r2
 800653c:	602b      	str	r3, [r5, #0]
 800653e:	783b      	ldrb	r3, [r7, #0]
 8006540:	2b2e      	cmp	r3, #46	; 0x2e
 8006542:	d10a      	bne.n	800655a <_vfiprintf_r+0x182>
 8006544:	787b      	ldrb	r3, [r7, #1]
 8006546:	2b2a      	cmp	r3, #42	; 0x2a
 8006548:	d137      	bne.n	80065ba <_vfiprintf_r+0x1e2>
 800654a:	9b07      	ldr	r3, [sp, #28]
 800654c:	3702      	adds	r7, #2
 800654e:	1d1a      	adds	r2, r3, #4
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	9207      	str	r2, [sp, #28]
 8006554:	2b00      	cmp	r3, #0
 8006556:	db2d      	blt.n	80065b4 <_vfiprintf_r+0x1dc>
 8006558:	9309      	str	r3, [sp, #36]	; 0x24
 800655a:	2203      	movs	r2, #3
 800655c:	7839      	ldrb	r1, [r7, #0]
 800655e:	4837      	ldr	r0, [pc, #220]	; (800663c <_vfiprintf_r+0x264>)
 8006560:	f000 fc94 	bl	8006e8c <memchr>
 8006564:	2800      	cmp	r0, #0
 8006566:	d007      	beq.n	8006578 <_vfiprintf_r+0x1a0>
 8006568:	4b34      	ldr	r3, [pc, #208]	; (800663c <_vfiprintf_r+0x264>)
 800656a:	682a      	ldr	r2, [r5, #0]
 800656c:	1ac0      	subs	r0, r0, r3
 800656e:	2340      	movs	r3, #64	; 0x40
 8006570:	4083      	lsls	r3, r0
 8006572:	4313      	orrs	r3, r2
 8006574:	3701      	adds	r7, #1
 8006576:	602b      	str	r3, [r5, #0]
 8006578:	7839      	ldrb	r1, [r7, #0]
 800657a:	1c7b      	adds	r3, r7, #1
 800657c:	2206      	movs	r2, #6
 800657e:	4830      	ldr	r0, [pc, #192]	; (8006640 <_vfiprintf_r+0x268>)
 8006580:	9303      	str	r3, [sp, #12]
 8006582:	7629      	strb	r1, [r5, #24]
 8006584:	f000 fc82 	bl	8006e8c <memchr>
 8006588:	2800      	cmp	r0, #0
 800658a:	d045      	beq.n	8006618 <_vfiprintf_r+0x240>
 800658c:	4b2d      	ldr	r3, [pc, #180]	; (8006644 <_vfiprintf_r+0x26c>)
 800658e:	2b00      	cmp	r3, #0
 8006590:	d127      	bne.n	80065e2 <_vfiprintf_r+0x20a>
 8006592:	2207      	movs	r2, #7
 8006594:	9b07      	ldr	r3, [sp, #28]
 8006596:	3307      	adds	r3, #7
 8006598:	4393      	bics	r3, r2
 800659a:	3308      	adds	r3, #8
 800659c:	9307      	str	r3, [sp, #28]
 800659e:	696b      	ldr	r3, [r5, #20]
 80065a0:	9a04      	ldr	r2, [sp, #16]
 80065a2:	189b      	adds	r3, r3, r2
 80065a4:	616b      	str	r3, [r5, #20]
 80065a6:	e75d      	b.n	8006464 <_vfiprintf_r+0x8c>
 80065a8:	210a      	movs	r1, #10
 80065aa:	434b      	muls	r3, r1
 80065ac:	4667      	mov	r7, ip
 80065ae:	189b      	adds	r3, r3, r2
 80065b0:	3909      	subs	r1, #9
 80065b2:	e7a3      	b.n	80064fc <_vfiprintf_r+0x124>
 80065b4:	2301      	movs	r3, #1
 80065b6:	425b      	negs	r3, r3
 80065b8:	e7ce      	b.n	8006558 <_vfiprintf_r+0x180>
 80065ba:	2300      	movs	r3, #0
 80065bc:	001a      	movs	r2, r3
 80065be:	3701      	adds	r7, #1
 80065c0:	606b      	str	r3, [r5, #4]
 80065c2:	7839      	ldrb	r1, [r7, #0]
 80065c4:	1c78      	adds	r0, r7, #1
 80065c6:	3930      	subs	r1, #48	; 0x30
 80065c8:	4684      	mov	ip, r0
 80065ca:	2909      	cmp	r1, #9
 80065cc:	d903      	bls.n	80065d6 <_vfiprintf_r+0x1fe>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0c3      	beq.n	800655a <_vfiprintf_r+0x182>
 80065d2:	9209      	str	r2, [sp, #36]	; 0x24
 80065d4:	e7c1      	b.n	800655a <_vfiprintf_r+0x182>
 80065d6:	230a      	movs	r3, #10
 80065d8:	435a      	muls	r2, r3
 80065da:	4667      	mov	r7, ip
 80065dc:	1852      	adds	r2, r2, r1
 80065de:	3b09      	subs	r3, #9
 80065e0:	e7ef      	b.n	80065c2 <_vfiprintf_r+0x1ea>
 80065e2:	ab07      	add	r3, sp, #28
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	0022      	movs	r2, r4
 80065e8:	0029      	movs	r1, r5
 80065ea:	0030      	movs	r0, r6
 80065ec:	4b16      	ldr	r3, [pc, #88]	; (8006648 <_vfiprintf_r+0x270>)
 80065ee:	e000      	b.n	80065f2 <_vfiprintf_r+0x21a>
 80065f0:	bf00      	nop
 80065f2:	9004      	str	r0, [sp, #16]
 80065f4:	9b04      	ldr	r3, [sp, #16]
 80065f6:	3301      	adds	r3, #1
 80065f8:	d1d1      	bne.n	800659e <_vfiprintf_r+0x1c6>
 80065fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065fc:	07db      	lsls	r3, r3, #31
 80065fe:	d405      	bmi.n	800660c <_vfiprintf_r+0x234>
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	059b      	lsls	r3, r3, #22
 8006604:	d402      	bmi.n	800660c <_vfiprintf_r+0x234>
 8006606:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006608:	f7ff fe24 	bl	8006254 <__retarget_lock_release_recursive>
 800660c:	89a3      	ldrh	r3, [r4, #12]
 800660e:	065b      	lsls	r3, r3, #25
 8006610:	d500      	bpl.n	8006614 <_vfiprintf_r+0x23c>
 8006612:	e70a      	b.n	800642a <_vfiprintf_r+0x52>
 8006614:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006616:	e70a      	b.n	800642e <_vfiprintf_r+0x56>
 8006618:	ab07      	add	r3, sp, #28
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	0022      	movs	r2, r4
 800661e:	0029      	movs	r1, r5
 8006620:	0030      	movs	r0, r6
 8006622:	4b09      	ldr	r3, [pc, #36]	; (8006648 <_vfiprintf_r+0x270>)
 8006624:	f000 f882 	bl	800672c <_printf_i>
 8006628:	e7e3      	b.n	80065f2 <_vfiprintf_r+0x21a>
 800662a:	46c0      	nop			; (mov r8, r8)
 800662c:	080075b4 	.word	0x080075b4
 8006630:	080075d4 	.word	0x080075d4
 8006634:	08007594 	.word	0x08007594
 8006638:	080075f4 	.word	0x080075f4
 800663c:	080075fa 	.word	0x080075fa
 8006640:	080075fe 	.word	0x080075fe
 8006644:	00000000 	.word	0x00000000
 8006648:	080063b3 	.word	0x080063b3

0800664c <_printf_common>:
 800664c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800664e:	0015      	movs	r5, r2
 8006650:	9301      	str	r3, [sp, #4]
 8006652:	688a      	ldr	r2, [r1, #8]
 8006654:	690b      	ldr	r3, [r1, #16]
 8006656:	000c      	movs	r4, r1
 8006658:	9000      	str	r0, [sp, #0]
 800665a:	4293      	cmp	r3, r2
 800665c:	da00      	bge.n	8006660 <_printf_common+0x14>
 800665e:	0013      	movs	r3, r2
 8006660:	0022      	movs	r2, r4
 8006662:	602b      	str	r3, [r5, #0]
 8006664:	3243      	adds	r2, #67	; 0x43
 8006666:	7812      	ldrb	r2, [r2, #0]
 8006668:	2a00      	cmp	r2, #0
 800666a:	d001      	beq.n	8006670 <_printf_common+0x24>
 800666c:	3301      	adds	r3, #1
 800666e:	602b      	str	r3, [r5, #0]
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	069b      	lsls	r3, r3, #26
 8006674:	d502      	bpl.n	800667c <_printf_common+0x30>
 8006676:	682b      	ldr	r3, [r5, #0]
 8006678:	3302      	adds	r3, #2
 800667a:	602b      	str	r3, [r5, #0]
 800667c:	6822      	ldr	r2, [r4, #0]
 800667e:	2306      	movs	r3, #6
 8006680:	0017      	movs	r7, r2
 8006682:	401f      	ands	r7, r3
 8006684:	421a      	tst	r2, r3
 8006686:	d027      	beq.n	80066d8 <_printf_common+0x8c>
 8006688:	0023      	movs	r3, r4
 800668a:	3343      	adds	r3, #67	; 0x43
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	1e5a      	subs	r2, r3, #1
 8006690:	4193      	sbcs	r3, r2
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	0692      	lsls	r2, r2, #26
 8006696:	d430      	bmi.n	80066fa <_printf_common+0xae>
 8006698:	0022      	movs	r2, r4
 800669a:	9901      	ldr	r1, [sp, #4]
 800669c:	9800      	ldr	r0, [sp, #0]
 800669e:	9e08      	ldr	r6, [sp, #32]
 80066a0:	3243      	adds	r2, #67	; 0x43
 80066a2:	47b0      	blx	r6
 80066a4:	1c43      	adds	r3, r0, #1
 80066a6:	d025      	beq.n	80066f4 <_printf_common+0xa8>
 80066a8:	2306      	movs	r3, #6
 80066aa:	6820      	ldr	r0, [r4, #0]
 80066ac:	682a      	ldr	r2, [r5, #0]
 80066ae:	68e1      	ldr	r1, [r4, #12]
 80066b0:	2500      	movs	r5, #0
 80066b2:	4003      	ands	r3, r0
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d103      	bne.n	80066c0 <_printf_common+0x74>
 80066b8:	1a8d      	subs	r5, r1, r2
 80066ba:	43eb      	mvns	r3, r5
 80066bc:	17db      	asrs	r3, r3, #31
 80066be:	401d      	ands	r5, r3
 80066c0:	68a3      	ldr	r3, [r4, #8]
 80066c2:	6922      	ldr	r2, [r4, #16]
 80066c4:	4293      	cmp	r3, r2
 80066c6:	dd01      	ble.n	80066cc <_printf_common+0x80>
 80066c8:	1a9b      	subs	r3, r3, r2
 80066ca:	18ed      	adds	r5, r5, r3
 80066cc:	2700      	movs	r7, #0
 80066ce:	42bd      	cmp	r5, r7
 80066d0:	d120      	bne.n	8006714 <_printf_common+0xc8>
 80066d2:	2000      	movs	r0, #0
 80066d4:	e010      	b.n	80066f8 <_printf_common+0xac>
 80066d6:	3701      	adds	r7, #1
 80066d8:	68e3      	ldr	r3, [r4, #12]
 80066da:	682a      	ldr	r2, [r5, #0]
 80066dc:	1a9b      	subs	r3, r3, r2
 80066de:	42bb      	cmp	r3, r7
 80066e0:	ddd2      	ble.n	8006688 <_printf_common+0x3c>
 80066e2:	0022      	movs	r2, r4
 80066e4:	2301      	movs	r3, #1
 80066e6:	9901      	ldr	r1, [sp, #4]
 80066e8:	9800      	ldr	r0, [sp, #0]
 80066ea:	9e08      	ldr	r6, [sp, #32]
 80066ec:	3219      	adds	r2, #25
 80066ee:	47b0      	blx	r6
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d1f0      	bne.n	80066d6 <_printf_common+0x8a>
 80066f4:	2001      	movs	r0, #1
 80066f6:	4240      	negs	r0, r0
 80066f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066fa:	2030      	movs	r0, #48	; 0x30
 80066fc:	18e1      	adds	r1, r4, r3
 80066fe:	3143      	adds	r1, #67	; 0x43
 8006700:	7008      	strb	r0, [r1, #0]
 8006702:	0021      	movs	r1, r4
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	3145      	adds	r1, #69	; 0x45
 8006708:	7809      	ldrb	r1, [r1, #0]
 800670a:	18a2      	adds	r2, r4, r2
 800670c:	3243      	adds	r2, #67	; 0x43
 800670e:	3302      	adds	r3, #2
 8006710:	7011      	strb	r1, [r2, #0]
 8006712:	e7c1      	b.n	8006698 <_printf_common+0x4c>
 8006714:	0022      	movs	r2, r4
 8006716:	2301      	movs	r3, #1
 8006718:	9901      	ldr	r1, [sp, #4]
 800671a:	9800      	ldr	r0, [sp, #0]
 800671c:	9e08      	ldr	r6, [sp, #32]
 800671e:	321a      	adds	r2, #26
 8006720:	47b0      	blx	r6
 8006722:	1c43      	adds	r3, r0, #1
 8006724:	d0e6      	beq.n	80066f4 <_printf_common+0xa8>
 8006726:	3701      	adds	r7, #1
 8006728:	e7d1      	b.n	80066ce <_printf_common+0x82>
	...

0800672c <_printf_i>:
 800672c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800672e:	b08b      	sub	sp, #44	; 0x2c
 8006730:	9206      	str	r2, [sp, #24]
 8006732:	000a      	movs	r2, r1
 8006734:	3243      	adds	r2, #67	; 0x43
 8006736:	9307      	str	r3, [sp, #28]
 8006738:	9005      	str	r0, [sp, #20]
 800673a:	9204      	str	r2, [sp, #16]
 800673c:	7e0a      	ldrb	r2, [r1, #24]
 800673e:	000c      	movs	r4, r1
 8006740:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006742:	2a78      	cmp	r2, #120	; 0x78
 8006744:	d807      	bhi.n	8006756 <_printf_i+0x2a>
 8006746:	2a62      	cmp	r2, #98	; 0x62
 8006748:	d809      	bhi.n	800675e <_printf_i+0x32>
 800674a:	2a00      	cmp	r2, #0
 800674c:	d100      	bne.n	8006750 <_printf_i+0x24>
 800674e:	e0c1      	b.n	80068d4 <_printf_i+0x1a8>
 8006750:	2a58      	cmp	r2, #88	; 0x58
 8006752:	d100      	bne.n	8006756 <_printf_i+0x2a>
 8006754:	e08c      	b.n	8006870 <_printf_i+0x144>
 8006756:	0026      	movs	r6, r4
 8006758:	3642      	adds	r6, #66	; 0x42
 800675a:	7032      	strb	r2, [r6, #0]
 800675c:	e022      	b.n	80067a4 <_printf_i+0x78>
 800675e:	0010      	movs	r0, r2
 8006760:	3863      	subs	r0, #99	; 0x63
 8006762:	2815      	cmp	r0, #21
 8006764:	d8f7      	bhi.n	8006756 <_printf_i+0x2a>
 8006766:	f7f9 fccd 	bl	8000104 <__gnu_thumb1_case_shi>
 800676a:	0016      	.short	0x0016
 800676c:	fff6001f 	.word	0xfff6001f
 8006770:	fff6fff6 	.word	0xfff6fff6
 8006774:	001ffff6 	.word	0x001ffff6
 8006778:	fff6fff6 	.word	0xfff6fff6
 800677c:	fff6fff6 	.word	0xfff6fff6
 8006780:	003600a8 	.word	0x003600a8
 8006784:	fff6009a 	.word	0xfff6009a
 8006788:	00b9fff6 	.word	0x00b9fff6
 800678c:	0036fff6 	.word	0x0036fff6
 8006790:	fff6fff6 	.word	0xfff6fff6
 8006794:	009e      	.short	0x009e
 8006796:	0026      	movs	r6, r4
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	3642      	adds	r6, #66	; 0x42
 800679c:	1d11      	adds	r1, r2, #4
 800679e:	6019      	str	r1, [r3, #0]
 80067a0:	6813      	ldr	r3, [r2, #0]
 80067a2:	7033      	strb	r3, [r6, #0]
 80067a4:	2301      	movs	r3, #1
 80067a6:	e0a7      	b.n	80068f8 <_printf_i+0x1cc>
 80067a8:	6808      	ldr	r0, [r1, #0]
 80067aa:	6819      	ldr	r1, [r3, #0]
 80067ac:	1d0a      	adds	r2, r1, #4
 80067ae:	0605      	lsls	r5, r0, #24
 80067b0:	d50b      	bpl.n	80067ca <_printf_i+0x9e>
 80067b2:	680d      	ldr	r5, [r1, #0]
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	2d00      	cmp	r5, #0
 80067b8:	da03      	bge.n	80067c2 <_printf_i+0x96>
 80067ba:	232d      	movs	r3, #45	; 0x2d
 80067bc:	9a04      	ldr	r2, [sp, #16]
 80067be:	426d      	negs	r5, r5
 80067c0:	7013      	strb	r3, [r2, #0]
 80067c2:	4b61      	ldr	r3, [pc, #388]	; (8006948 <_printf_i+0x21c>)
 80067c4:	270a      	movs	r7, #10
 80067c6:	9303      	str	r3, [sp, #12]
 80067c8:	e01b      	b.n	8006802 <_printf_i+0xd6>
 80067ca:	680d      	ldr	r5, [r1, #0]
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	0641      	lsls	r1, r0, #25
 80067d0:	d5f1      	bpl.n	80067b6 <_printf_i+0x8a>
 80067d2:	b22d      	sxth	r5, r5
 80067d4:	e7ef      	b.n	80067b6 <_printf_i+0x8a>
 80067d6:	680d      	ldr	r5, [r1, #0]
 80067d8:	6819      	ldr	r1, [r3, #0]
 80067da:	1d08      	adds	r0, r1, #4
 80067dc:	6018      	str	r0, [r3, #0]
 80067de:	062e      	lsls	r6, r5, #24
 80067e0:	d501      	bpl.n	80067e6 <_printf_i+0xba>
 80067e2:	680d      	ldr	r5, [r1, #0]
 80067e4:	e003      	b.n	80067ee <_printf_i+0xc2>
 80067e6:	066d      	lsls	r5, r5, #25
 80067e8:	d5fb      	bpl.n	80067e2 <_printf_i+0xb6>
 80067ea:	680d      	ldr	r5, [r1, #0]
 80067ec:	b2ad      	uxth	r5, r5
 80067ee:	4b56      	ldr	r3, [pc, #344]	; (8006948 <_printf_i+0x21c>)
 80067f0:	2708      	movs	r7, #8
 80067f2:	9303      	str	r3, [sp, #12]
 80067f4:	2a6f      	cmp	r2, #111	; 0x6f
 80067f6:	d000      	beq.n	80067fa <_printf_i+0xce>
 80067f8:	3702      	adds	r7, #2
 80067fa:	0023      	movs	r3, r4
 80067fc:	2200      	movs	r2, #0
 80067fe:	3343      	adds	r3, #67	; 0x43
 8006800:	701a      	strb	r2, [r3, #0]
 8006802:	6863      	ldr	r3, [r4, #4]
 8006804:	60a3      	str	r3, [r4, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	db03      	blt.n	8006812 <_printf_i+0xe6>
 800680a:	2204      	movs	r2, #4
 800680c:	6821      	ldr	r1, [r4, #0]
 800680e:	4391      	bics	r1, r2
 8006810:	6021      	str	r1, [r4, #0]
 8006812:	2d00      	cmp	r5, #0
 8006814:	d102      	bne.n	800681c <_printf_i+0xf0>
 8006816:	9e04      	ldr	r6, [sp, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00c      	beq.n	8006836 <_printf_i+0x10a>
 800681c:	9e04      	ldr	r6, [sp, #16]
 800681e:	0028      	movs	r0, r5
 8006820:	0039      	movs	r1, r7
 8006822:	f7f9 fcff 	bl	8000224 <__aeabi_uidivmod>
 8006826:	9b03      	ldr	r3, [sp, #12]
 8006828:	3e01      	subs	r6, #1
 800682a:	5c5b      	ldrb	r3, [r3, r1]
 800682c:	7033      	strb	r3, [r6, #0]
 800682e:	002b      	movs	r3, r5
 8006830:	0005      	movs	r5, r0
 8006832:	429f      	cmp	r7, r3
 8006834:	d9f3      	bls.n	800681e <_printf_i+0xf2>
 8006836:	2f08      	cmp	r7, #8
 8006838:	d109      	bne.n	800684e <_printf_i+0x122>
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	07db      	lsls	r3, r3, #31
 800683e:	d506      	bpl.n	800684e <_printf_i+0x122>
 8006840:	6863      	ldr	r3, [r4, #4]
 8006842:	6922      	ldr	r2, [r4, #16]
 8006844:	4293      	cmp	r3, r2
 8006846:	dc02      	bgt.n	800684e <_printf_i+0x122>
 8006848:	2330      	movs	r3, #48	; 0x30
 800684a:	3e01      	subs	r6, #1
 800684c:	7033      	strb	r3, [r6, #0]
 800684e:	9b04      	ldr	r3, [sp, #16]
 8006850:	1b9b      	subs	r3, r3, r6
 8006852:	6123      	str	r3, [r4, #16]
 8006854:	9b07      	ldr	r3, [sp, #28]
 8006856:	0021      	movs	r1, r4
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	9805      	ldr	r0, [sp, #20]
 800685c:	9b06      	ldr	r3, [sp, #24]
 800685e:	aa09      	add	r2, sp, #36	; 0x24
 8006860:	f7ff fef4 	bl	800664c <_printf_common>
 8006864:	1c43      	adds	r3, r0, #1
 8006866:	d14c      	bne.n	8006902 <_printf_i+0x1d6>
 8006868:	2001      	movs	r0, #1
 800686a:	4240      	negs	r0, r0
 800686c:	b00b      	add	sp, #44	; 0x2c
 800686e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006870:	3145      	adds	r1, #69	; 0x45
 8006872:	700a      	strb	r2, [r1, #0]
 8006874:	4a34      	ldr	r2, [pc, #208]	; (8006948 <_printf_i+0x21c>)
 8006876:	9203      	str	r2, [sp, #12]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	6821      	ldr	r1, [r4, #0]
 800687c:	ca20      	ldmia	r2!, {r5}
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	0608      	lsls	r0, r1, #24
 8006882:	d516      	bpl.n	80068b2 <_printf_i+0x186>
 8006884:	07cb      	lsls	r3, r1, #31
 8006886:	d502      	bpl.n	800688e <_printf_i+0x162>
 8006888:	2320      	movs	r3, #32
 800688a:	4319      	orrs	r1, r3
 800688c:	6021      	str	r1, [r4, #0]
 800688e:	2710      	movs	r7, #16
 8006890:	2d00      	cmp	r5, #0
 8006892:	d1b2      	bne.n	80067fa <_printf_i+0xce>
 8006894:	2320      	movs	r3, #32
 8006896:	6822      	ldr	r2, [r4, #0]
 8006898:	439a      	bics	r2, r3
 800689a:	6022      	str	r2, [r4, #0]
 800689c:	e7ad      	b.n	80067fa <_printf_i+0xce>
 800689e:	2220      	movs	r2, #32
 80068a0:	6809      	ldr	r1, [r1, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	6022      	str	r2, [r4, #0]
 80068a6:	0022      	movs	r2, r4
 80068a8:	2178      	movs	r1, #120	; 0x78
 80068aa:	3245      	adds	r2, #69	; 0x45
 80068ac:	7011      	strb	r1, [r2, #0]
 80068ae:	4a27      	ldr	r2, [pc, #156]	; (800694c <_printf_i+0x220>)
 80068b0:	e7e1      	b.n	8006876 <_printf_i+0x14a>
 80068b2:	0648      	lsls	r0, r1, #25
 80068b4:	d5e6      	bpl.n	8006884 <_printf_i+0x158>
 80068b6:	b2ad      	uxth	r5, r5
 80068b8:	e7e4      	b.n	8006884 <_printf_i+0x158>
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	680d      	ldr	r5, [r1, #0]
 80068be:	1d10      	adds	r0, r2, #4
 80068c0:	6949      	ldr	r1, [r1, #20]
 80068c2:	6018      	str	r0, [r3, #0]
 80068c4:	6813      	ldr	r3, [r2, #0]
 80068c6:	062e      	lsls	r6, r5, #24
 80068c8:	d501      	bpl.n	80068ce <_printf_i+0x1a2>
 80068ca:	6019      	str	r1, [r3, #0]
 80068cc:	e002      	b.n	80068d4 <_printf_i+0x1a8>
 80068ce:	066d      	lsls	r5, r5, #25
 80068d0:	d5fb      	bpl.n	80068ca <_printf_i+0x19e>
 80068d2:	8019      	strh	r1, [r3, #0]
 80068d4:	2300      	movs	r3, #0
 80068d6:	9e04      	ldr	r6, [sp, #16]
 80068d8:	6123      	str	r3, [r4, #16]
 80068da:	e7bb      	b.n	8006854 <_printf_i+0x128>
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	1d11      	adds	r1, r2, #4
 80068e0:	6019      	str	r1, [r3, #0]
 80068e2:	6816      	ldr	r6, [r2, #0]
 80068e4:	2100      	movs	r1, #0
 80068e6:	0030      	movs	r0, r6
 80068e8:	6862      	ldr	r2, [r4, #4]
 80068ea:	f000 facf 	bl	8006e8c <memchr>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	d001      	beq.n	80068f6 <_printf_i+0x1ca>
 80068f2:	1b80      	subs	r0, r0, r6
 80068f4:	6060      	str	r0, [r4, #4]
 80068f6:	6863      	ldr	r3, [r4, #4]
 80068f8:	6123      	str	r3, [r4, #16]
 80068fa:	2300      	movs	r3, #0
 80068fc:	9a04      	ldr	r2, [sp, #16]
 80068fe:	7013      	strb	r3, [r2, #0]
 8006900:	e7a8      	b.n	8006854 <_printf_i+0x128>
 8006902:	6923      	ldr	r3, [r4, #16]
 8006904:	0032      	movs	r2, r6
 8006906:	9906      	ldr	r1, [sp, #24]
 8006908:	9805      	ldr	r0, [sp, #20]
 800690a:	9d07      	ldr	r5, [sp, #28]
 800690c:	47a8      	blx	r5
 800690e:	1c43      	adds	r3, r0, #1
 8006910:	d0aa      	beq.n	8006868 <_printf_i+0x13c>
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	079b      	lsls	r3, r3, #30
 8006916:	d415      	bmi.n	8006944 <_printf_i+0x218>
 8006918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691a:	68e0      	ldr	r0, [r4, #12]
 800691c:	4298      	cmp	r0, r3
 800691e:	daa5      	bge.n	800686c <_printf_i+0x140>
 8006920:	0018      	movs	r0, r3
 8006922:	e7a3      	b.n	800686c <_printf_i+0x140>
 8006924:	0022      	movs	r2, r4
 8006926:	2301      	movs	r3, #1
 8006928:	9906      	ldr	r1, [sp, #24]
 800692a:	9805      	ldr	r0, [sp, #20]
 800692c:	9e07      	ldr	r6, [sp, #28]
 800692e:	3219      	adds	r2, #25
 8006930:	47b0      	blx	r6
 8006932:	1c43      	adds	r3, r0, #1
 8006934:	d098      	beq.n	8006868 <_printf_i+0x13c>
 8006936:	3501      	adds	r5, #1
 8006938:	68e3      	ldr	r3, [r4, #12]
 800693a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800693c:	1a9b      	subs	r3, r3, r2
 800693e:	42ab      	cmp	r3, r5
 8006940:	dcf0      	bgt.n	8006924 <_printf_i+0x1f8>
 8006942:	e7e9      	b.n	8006918 <_printf_i+0x1ec>
 8006944:	2500      	movs	r5, #0
 8006946:	e7f7      	b.n	8006938 <_printf_i+0x20c>
 8006948:	08007605 	.word	0x08007605
 800694c:	08007616 	.word	0x08007616

08006950 <_sbrk_r>:
 8006950:	2300      	movs	r3, #0
 8006952:	b570      	push	{r4, r5, r6, lr}
 8006954:	4d06      	ldr	r5, [pc, #24]	; (8006970 <_sbrk_r+0x20>)
 8006956:	0004      	movs	r4, r0
 8006958:	0008      	movs	r0, r1
 800695a:	602b      	str	r3, [r5, #0]
 800695c:	f7fb f856 	bl	8001a0c <_sbrk>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d103      	bne.n	800696c <_sbrk_r+0x1c>
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d000      	beq.n	800696c <_sbrk_r+0x1c>
 800696a:	6023      	str	r3, [r4, #0]
 800696c:	bd70      	pop	{r4, r5, r6, pc}
 800696e:	46c0      	nop			; (mov r8, r8)
 8006970:	20000260 	.word	0x20000260

08006974 <__sread>:
 8006974:	b570      	push	{r4, r5, r6, lr}
 8006976:	000c      	movs	r4, r1
 8006978:	250e      	movs	r5, #14
 800697a:	5f49      	ldrsh	r1, [r1, r5]
 800697c:	f000 faec 	bl	8006f58 <_read_r>
 8006980:	2800      	cmp	r0, #0
 8006982:	db03      	blt.n	800698c <__sread+0x18>
 8006984:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006986:	181b      	adds	r3, r3, r0
 8006988:	6563      	str	r3, [r4, #84]	; 0x54
 800698a:	bd70      	pop	{r4, r5, r6, pc}
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	4a02      	ldr	r2, [pc, #8]	; (8006998 <__sread+0x24>)
 8006990:	4013      	ands	r3, r2
 8006992:	81a3      	strh	r3, [r4, #12]
 8006994:	e7f9      	b.n	800698a <__sread+0x16>
 8006996:	46c0      	nop			; (mov r8, r8)
 8006998:	ffffefff 	.word	0xffffefff

0800699c <__swrite>:
 800699c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699e:	001f      	movs	r7, r3
 80069a0:	898b      	ldrh	r3, [r1, #12]
 80069a2:	0005      	movs	r5, r0
 80069a4:	000c      	movs	r4, r1
 80069a6:	0016      	movs	r6, r2
 80069a8:	05db      	lsls	r3, r3, #23
 80069aa:	d505      	bpl.n	80069b8 <__swrite+0x1c>
 80069ac:	230e      	movs	r3, #14
 80069ae:	5ec9      	ldrsh	r1, [r1, r3]
 80069b0:	2200      	movs	r2, #0
 80069b2:	2302      	movs	r3, #2
 80069b4:	f000 f9ea 	bl	8006d8c <_lseek_r>
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	4a05      	ldr	r2, [pc, #20]	; (80069d0 <__swrite+0x34>)
 80069bc:	0028      	movs	r0, r5
 80069be:	4013      	ands	r3, r2
 80069c0:	81a3      	strh	r3, [r4, #12]
 80069c2:	0032      	movs	r2, r6
 80069c4:	230e      	movs	r3, #14
 80069c6:	5ee1      	ldrsh	r1, [r4, r3]
 80069c8:	003b      	movs	r3, r7
 80069ca:	f000 f875 	bl	8006ab8 <_write_r>
 80069ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069d0:	ffffefff 	.word	0xffffefff

080069d4 <__sseek>:
 80069d4:	b570      	push	{r4, r5, r6, lr}
 80069d6:	000c      	movs	r4, r1
 80069d8:	250e      	movs	r5, #14
 80069da:	5f49      	ldrsh	r1, [r1, r5]
 80069dc:	f000 f9d6 	bl	8006d8c <_lseek_r>
 80069e0:	89a3      	ldrh	r3, [r4, #12]
 80069e2:	1c42      	adds	r2, r0, #1
 80069e4:	d103      	bne.n	80069ee <__sseek+0x1a>
 80069e6:	4a05      	ldr	r2, [pc, #20]	; (80069fc <__sseek+0x28>)
 80069e8:	4013      	ands	r3, r2
 80069ea:	81a3      	strh	r3, [r4, #12]
 80069ec:	bd70      	pop	{r4, r5, r6, pc}
 80069ee:	2280      	movs	r2, #128	; 0x80
 80069f0:	0152      	lsls	r2, r2, #5
 80069f2:	4313      	orrs	r3, r2
 80069f4:	81a3      	strh	r3, [r4, #12]
 80069f6:	6560      	str	r0, [r4, #84]	; 0x54
 80069f8:	e7f8      	b.n	80069ec <__sseek+0x18>
 80069fa:	46c0      	nop			; (mov r8, r8)
 80069fc:	ffffefff 	.word	0xffffefff

08006a00 <__sclose>:
 8006a00:	b510      	push	{r4, lr}
 8006a02:	230e      	movs	r3, #14
 8006a04:	5ec9      	ldrsh	r1, [r1, r3]
 8006a06:	f000 f8e3 	bl	8006bd0 <_close_r>
 8006a0a:	bd10      	pop	{r4, pc}

08006a0c <__swbuf_r>:
 8006a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0e:	0005      	movs	r5, r0
 8006a10:	000e      	movs	r6, r1
 8006a12:	0014      	movs	r4, r2
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d004      	beq.n	8006a22 <__swbuf_r+0x16>
 8006a18:	6983      	ldr	r3, [r0, #24]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <__swbuf_r+0x16>
 8006a1e:	f7ff fb77 	bl	8006110 <__sinit>
 8006a22:	4b22      	ldr	r3, [pc, #136]	; (8006aac <__swbuf_r+0xa0>)
 8006a24:	429c      	cmp	r4, r3
 8006a26:	d12e      	bne.n	8006a86 <__swbuf_r+0x7a>
 8006a28:	686c      	ldr	r4, [r5, #4]
 8006a2a:	69a3      	ldr	r3, [r4, #24]
 8006a2c:	60a3      	str	r3, [r4, #8]
 8006a2e:	89a3      	ldrh	r3, [r4, #12]
 8006a30:	071b      	lsls	r3, r3, #28
 8006a32:	d532      	bpl.n	8006a9a <__swbuf_r+0x8e>
 8006a34:	6923      	ldr	r3, [r4, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d02f      	beq.n	8006a9a <__swbuf_r+0x8e>
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	6922      	ldr	r2, [r4, #16]
 8006a3e:	b2f7      	uxtb	r7, r6
 8006a40:	1a98      	subs	r0, r3, r2
 8006a42:	6963      	ldr	r3, [r4, #20]
 8006a44:	b2f6      	uxtb	r6, r6
 8006a46:	4283      	cmp	r3, r0
 8006a48:	dc05      	bgt.n	8006a56 <__swbuf_r+0x4a>
 8006a4a:	0021      	movs	r1, r4
 8006a4c:	0028      	movs	r0, r5
 8006a4e:	f000 f95d 	bl	8006d0c <_fflush_r>
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d127      	bne.n	8006aa6 <__swbuf_r+0x9a>
 8006a56:	68a3      	ldr	r3, [r4, #8]
 8006a58:	3001      	adds	r0, #1
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	60a3      	str	r3, [r4, #8]
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	6022      	str	r2, [r4, #0]
 8006a64:	701f      	strb	r7, [r3, #0]
 8006a66:	6963      	ldr	r3, [r4, #20]
 8006a68:	4283      	cmp	r3, r0
 8006a6a:	d004      	beq.n	8006a76 <__swbuf_r+0x6a>
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	07db      	lsls	r3, r3, #31
 8006a70:	d507      	bpl.n	8006a82 <__swbuf_r+0x76>
 8006a72:	2e0a      	cmp	r6, #10
 8006a74:	d105      	bne.n	8006a82 <__swbuf_r+0x76>
 8006a76:	0021      	movs	r1, r4
 8006a78:	0028      	movs	r0, r5
 8006a7a:	f000 f947 	bl	8006d0c <_fflush_r>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d111      	bne.n	8006aa6 <__swbuf_r+0x9a>
 8006a82:	0030      	movs	r0, r6
 8006a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a86:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <__swbuf_r+0xa4>)
 8006a88:	429c      	cmp	r4, r3
 8006a8a:	d101      	bne.n	8006a90 <__swbuf_r+0x84>
 8006a8c:	68ac      	ldr	r4, [r5, #8]
 8006a8e:	e7cc      	b.n	8006a2a <__swbuf_r+0x1e>
 8006a90:	4b08      	ldr	r3, [pc, #32]	; (8006ab4 <__swbuf_r+0xa8>)
 8006a92:	429c      	cmp	r4, r3
 8006a94:	d1c9      	bne.n	8006a2a <__swbuf_r+0x1e>
 8006a96:	68ec      	ldr	r4, [r5, #12]
 8006a98:	e7c7      	b.n	8006a2a <__swbuf_r+0x1e>
 8006a9a:	0021      	movs	r1, r4
 8006a9c:	0028      	movs	r0, r5
 8006a9e:	f000 f81f 	bl	8006ae0 <__swsetup_r>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d0c9      	beq.n	8006a3a <__swbuf_r+0x2e>
 8006aa6:	2601      	movs	r6, #1
 8006aa8:	4276      	negs	r6, r6
 8006aaa:	e7ea      	b.n	8006a82 <__swbuf_r+0x76>
 8006aac:	080075b4 	.word	0x080075b4
 8006ab0:	080075d4 	.word	0x080075d4
 8006ab4:	08007594 	.word	0x08007594

08006ab8 <_write_r>:
 8006ab8:	b570      	push	{r4, r5, r6, lr}
 8006aba:	0004      	movs	r4, r0
 8006abc:	0008      	movs	r0, r1
 8006abe:	0011      	movs	r1, r2
 8006ac0:	001a      	movs	r2, r3
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	4d05      	ldr	r5, [pc, #20]	; (8006adc <_write_r+0x24>)
 8006ac6:	602b      	str	r3, [r5, #0]
 8006ac8:	f7fa ff57 	bl	800197a <_write>
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	d103      	bne.n	8006ad8 <_write_r+0x20>
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d000      	beq.n	8006ad8 <_write_r+0x20>
 8006ad6:	6023      	str	r3, [r4, #0]
 8006ad8:	bd70      	pop	{r4, r5, r6, pc}
 8006ada:	46c0      	nop			; (mov r8, r8)
 8006adc:	20000260 	.word	0x20000260

08006ae0 <__swsetup_r>:
 8006ae0:	4b37      	ldr	r3, [pc, #220]	; (8006bc0 <__swsetup_r+0xe0>)
 8006ae2:	b570      	push	{r4, r5, r6, lr}
 8006ae4:	681d      	ldr	r5, [r3, #0]
 8006ae6:	0006      	movs	r6, r0
 8006ae8:	000c      	movs	r4, r1
 8006aea:	2d00      	cmp	r5, #0
 8006aec:	d005      	beq.n	8006afa <__swsetup_r+0x1a>
 8006aee:	69ab      	ldr	r3, [r5, #24]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d102      	bne.n	8006afa <__swsetup_r+0x1a>
 8006af4:	0028      	movs	r0, r5
 8006af6:	f7ff fb0b 	bl	8006110 <__sinit>
 8006afa:	4b32      	ldr	r3, [pc, #200]	; (8006bc4 <__swsetup_r+0xe4>)
 8006afc:	429c      	cmp	r4, r3
 8006afe:	d10f      	bne.n	8006b20 <__swsetup_r+0x40>
 8006b00:	686c      	ldr	r4, [r5, #4]
 8006b02:	230c      	movs	r3, #12
 8006b04:	5ee2      	ldrsh	r2, [r4, r3]
 8006b06:	b293      	uxth	r3, r2
 8006b08:	0711      	lsls	r1, r2, #28
 8006b0a:	d42d      	bmi.n	8006b68 <__swsetup_r+0x88>
 8006b0c:	06d9      	lsls	r1, r3, #27
 8006b0e:	d411      	bmi.n	8006b34 <__swsetup_r+0x54>
 8006b10:	2309      	movs	r3, #9
 8006b12:	2001      	movs	r0, #1
 8006b14:	6033      	str	r3, [r6, #0]
 8006b16:	3337      	adds	r3, #55	; 0x37
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	81a3      	strh	r3, [r4, #12]
 8006b1c:	4240      	negs	r0, r0
 8006b1e:	bd70      	pop	{r4, r5, r6, pc}
 8006b20:	4b29      	ldr	r3, [pc, #164]	; (8006bc8 <__swsetup_r+0xe8>)
 8006b22:	429c      	cmp	r4, r3
 8006b24:	d101      	bne.n	8006b2a <__swsetup_r+0x4a>
 8006b26:	68ac      	ldr	r4, [r5, #8]
 8006b28:	e7eb      	b.n	8006b02 <__swsetup_r+0x22>
 8006b2a:	4b28      	ldr	r3, [pc, #160]	; (8006bcc <__swsetup_r+0xec>)
 8006b2c:	429c      	cmp	r4, r3
 8006b2e:	d1e8      	bne.n	8006b02 <__swsetup_r+0x22>
 8006b30:	68ec      	ldr	r4, [r5, #12]
 8006b32:	e7e6      	b.n	8006b02 <__swsetup_r+0x22>
 8006b34:	075b      	lsls	r3, r3, #29
 8006b36:	d513      	bpl.n	8006b60 <__swsetup_r+0x80>
 8006b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b3a:	2900      	cmp	r1, #0
 8006b3c:	d008      	beq.n	8006b50 <__swsetup_r+0x70>
 8006b3e:	0023      	movs	r3, r4
 8006b40:	3344      	adds	r3, #68	; 0x44
 8006b42:	4299      	cmp	r1, r3
 8006b44:	d002      	beq.n	8006b4c <__swsetup_r+0x6c>
 8006b46:	0030      	movs	r0, r6
 8006b48:	f000 f9bc 	bl	8006ec4 <_free_r>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	6363      	str	r3, [r4, #52]	; 0x34
 8006b50:	2224      	movs	r2, #36	; 0x24
 8006b52:	89a3      	ldrh	r3, [r4, #12]
 8006b54:	4393      	bics	r3, r2
 8006b56:	81a3      	strh	r3, [r4, #12]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	6063      	str	r3, [r4, #4]
 8006b5c:	6923      	ldr	r3, [r4, #16]
 8006b5e:	6023      	str	r3, [r4, #0]
 8006b60:	2308      	movs	r3, #8
 8006b62:	89a2      	ldrh	r2, [r4, #12]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	81a3      	strh	r3, [r4, #12]
 8006b68:	6923      	ldr	r3, [r4, #16]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10b      	bne.n	8006b86 <__swsetup_r+0xa6>
 8006b6e:	21a0      	movs	r1, #160	; 0xa0
 8006b70:	2280      	movs	r2, #128	; 0x80
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	0089      	lsls	r1, r1, #2
 8006b76:	0092      	lsls	r2, r2, #2
 8006b78:	400b      	ands	r3, r1
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d003      	beq.n	8006b86 <__swsetup_r+0xa6>
 8006b7e:	0021      	movs	r1, r4
 8006b80:	0030      	movs	r0, r6
 8006b82:	f000 f93f 	bl	8006e04 <__smakebuf_r>
 8006b86:	220c      	movs	r2, #12
 8006b88:	5ea3      	ldrsh	r3, [r4, r2]
 8006b8a:	2001      	movs	r0, #1
 8006b8c:	001a      	movs	r2, r3
 8006b8e:	b299      	uxth	r1, r3
 8006b90:	4002      	ands	r2, r0
 8006b92:	4203      	tst	r3, r0
 8006b94:	d00f      	beq.n	8006bb6 <__swsetup_r+0xd6>
 8006b96:	2200      	movs	r2, #0
 8006b98:	60a2      	str	r2, [r4, #8]
 8006b9a:	6962      	ldr	r2, [r4, #20]
 8006b9c:	4252      	negs	r2, r2
 8006b9e:	61a2      	str	r2, [r4, #24]
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	6922      	ldr	r2, [r4, #16]
 8006ba4:	4282      	cmp	r2, r0
 8006ba6:	d1ba      	bne.n	8006b1e <__swsetup_r+0x3e>
 8006ba8:	060a      	lsls	r2, r1, #24
 8006baa:	d5b8      	bpl.n	8006b1e <__swsetup_r+0x3e>
 8006bac:	2240      	movs	r2, #64	; 0x40
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	81a3      	strh	r3, [r4, #12]
 8006bb2:	3801      	subs	r0, #1
 8006bb4:	e7b3      	b.n	8006b1e <__swsetup_r+0x3e>
 8006bb6:	0788      	lsls	r0, r1, #30
 8006bb8:	d400      	bmi.n	8006bbc <__swsetup_r+0xdc>
 8006bba:	6962      	ldr	r2, [r4, #20]
 8006bbc:	60a2      	str	r2, [r4, #8]
 8006bbe:	e7ef      	b.n	8006ba0 <__swsetup_r+0xc0>
 8006bc0:	2000003c 	.word	0x2000003c
 8006bc4:	080075b4 	.word	0x080075b4
 8006bc8:	080075d4 	.word	0x080075d4
 8006bcc:	08007594 	.word	0x08007594

08006bd0 <_close_r>:
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	b570      	push	{r4, r5, r6, lr}
 8006bd4:	4d06      	ldr	r5, [pc, #24]	; (8006bf0 <_close_r+0x20>)
 8006bd6:	0004      	movs	r4, r0
 8006bd8:	0008      	movs	r0, r1
 8006bda:	602b      	str	r3, [r5, #0]
 8006bdc:	f7fa fee9 	bl	80019b2 <_close>
 8006be0:	1c43      	adds	r3, r0, #1
 8006be2:	d103      	bne.n	8006bec <_close_r+0x1c>
 8006be4:	682b      	ldr	r3, [r5, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d000      	beq.n	8006bec <_close_r+0x1c>
 8006bea:	6023      	str	r3, [r4, #0]
 8006bec:	bd70      	pop	{r4, r5, r6, pc}
 8006bee:	46c0      	nop			; (mov r8, r8)
 8006bf0:	20000260 	.word	0x20000260

08006bf4 <__sflush_r>:
 8006bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bf6:	898b      	ldrh	r3, [r1, #12]
 8006bf8:	0005      	movs	r5, r0
 8006bfa:	000c      	movs	r4, r1
 8006bfc:	071a      	lsls	r2, r3, #28
 8006bfe:	d45f      	bmi.n	8006cc0 <__sflush_r+0xcc>
 8006c00:	684a      	ldr	r2, [r1, #4]
 8006c02:	2a00      	cmp	r2, #0
 8006c04:	dc04      	bgt.n	8006c10 <__sflush_r+0x1c>
 8006c06:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006c08:	2a00      	cmp	r2, #0
 8006c0a:	dc01      	bgt.n	8006c10 <__sflush_r+0x1c>
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c10:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006c12:	2f00      	cmp	r7, #0
 8006c14:	d0fa      	beq.n	8006c0c <__sflush_r+0x18>
 8006c16:	2200      	movs	r2, #0
 8006c18:	2180      	movs	r1, #128	; 0x80
 8006c1a:	682e      	ldr	r6, [r5, #0]
 8006c1c:	602a      	str	r2, [r5, #0]
 8006c1e:	001a      	movs	r2, r3
 8006c20:	0149      	lsls	r1, r1, #5
 8006c22:	400a      	ands	r2, r1
 8006c24:	420b      	tst	r3, r1
 8006c26:	d034      	beq.n	8006c92 <__sflush_r+0x9e>
 8006c28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c2a:	89a3      	ldrh	r3, [r4, #12]
 8006c2c:	075b      	lsls	r3, r3, #29
 8006c2e:	d506      	bpl.n	8006c3e <__sflush_r+0x4a>
 8006c30:	6863      	ldr	r3, [r4, #4]
 8006c32:	1ac0      	subs	r0, r0, r3
 8006c34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <__sflush_r+0x4a>
 8006c3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c3c:	1ac0      	subs	r0, r0, r3
 8006c3e:	0002      	movs	r2, r0
 8006c40:	6a21      	ldr	r1, [r4, #32]
 8006c42:	2300      	movs	r3, #0
 8006c44:	0028      	movs	r0, r5
 8006c46:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006c48:	47b8      	blx	r7
 8006c4a:	89a1      	ldrh	r1, [r4, #12]
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d106      	bne.n	8006c5e <__sflush_r+0x6a>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	2b1d      	cmp	r3, #29
 8006c54:	d831      	bhi.n	8006cba <__sflush_r+0xc6>
 8006c56:	4a2c      	ldr	r2, [pc, #176]	; (8006d08 <__sflush_r+0x114>)
 8006c58:	40da      	lsrs	r2, r3
 8006c5a:	07d3      	lsls	r3, r2, #31
 8006c5c:	d52d      	bpl.n	8006cba <__sflush_r+0xc6>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	6063      	str	r3, [r4, #4]
 8006c62:	6923      	ldr	r3, [r4, #16]
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	04cb      	lsls	r3, r1, #19
 8006c68:	d505      	bpl.n	8006c76 <__sflush_r+0x82>
 8006c6a:	1c43      	adds	r3, r0, #1
 8006c6c:	d102      	bne.n	8006c74 <__sflush_r+0x80>
 8006c6e:	682b      	ldr	r3, [r5, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d100      	bne.n	8006c76 <__sflush_r+0x82>
 8006c74:	6560      	str	r0, [r4, #84]	; 0x54
 8006c76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c78:	602e      	str	r6, [r5, #0]
 8006c7a:	2900      	cmp	r1, #0
 8006c7c:	d0c6      	beq.n	8006c0c <__sflush_r+0x18>
 8006c7e:	0023      	movs	r3, r4
 8006c80:	3344      	adds	r3, #68	; 0x44
 8006c82:	4299      	cmp	r1, r3
 8006c84:	d002      	beq.n	8006c8c <__sflush_r+0x98>
 8006c86:	0028      	movs	r0, r5
 8006c88:	f000 f91c 	bl	8006ec4 <_free_r>
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	6360      	str	r0, [r4, #52]	; 0x34
 8006c90:	e7bd      	b.n	8006c0e <__sflush_r+0x1a>
 8006c92:	2301      	movs	r3, #1
 8006c94:	0028      	movs	r0, r5
 8006c96:	6a21      	ldr	r1, [r4, #32]
 8006c98:	47b8      	blx	r7
 8006c9a:	1c43      	adds	r3, r0, #1
 8006c9c:	d1c5      	bne.n	8006c2a <__sflush_r+0x36>
 8006c9e:	682b      	ldr	r3, [r5, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d0c2      	beq.n	8006c2a <__sflush_r+0x36>
 8006ca4:	2b1d      	cmp	r3, #29
 8006ca6:	d001      	beq.n	8006cac <__sflush_r+0xb8>
 8006ca8:	2b16      	cmp	r3, #22
 8006caa:	d101      	bne.n	8006cb0 <__sflush_r+0xbc>
 8006cac:	602e      	str	r6, [r5, #0]
 8006cae:	e7ad      	b.n	8006c0c <__sflush_r+0x18>
 8006cb0:	2340      	movs	r3, #64	; 0x40
 8006cb2:	89a2      	ldrh	r2, [r4, #12]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	81a3      	strh	r3, [r4, #12]
 8006cb8:	e7a9      	b.n	8006c0e <__sflush_r+0x1a>
 8006cba:	2340      	movs	r3, #64	; 0x40
 8006cbc:	430b      	orrs	r3, r1
 8006cbe:	e7fa      	b.n	8006cb6 <__sflush_r+0xc2>
 8006cc0:	690f      	ldr	r7, [r1, #16]
 8006cc2:	2f00      	cmp	r7, #0
 8006cc4:	d0a2      	beq.n	8006c0c <__sflush_r+0x18>
 8006cc6:	680a      	ldr	r2, [r1, #0]
 8006cc8:	600f      	str	r7, [r1, #0]
 8006cca:	1bd2      	subs	r2, r2, r7
 8006ccc:	9201      	str	r2, [sp, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	079b      	lsls	r3, r3, #30
 8006cd2:	d100      	bne.n	8006cd6 <__sflush_r+0xe2>
 8006cd4:	694a      	ldr	r2, [r1, #20]
 8006cd6:	60a2      	str	r2, [r4, #8]
 8006cd8:	9b01      	ldr	r3, [sp, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	dc00      	bgt.n	8006ce0 <__sflush_r+0xec>
 8006cde:	e795      	b.n	8006c0c <__sflush_r+0x18>
 8006ce0:	003a      	movs	r2, r7
 8006ce2:	0028      	movs	r0, r5
 8006ce4:	9b01      	ldr	r3, [sp, #4]
 8006ce6:	6a21      	ldr	r1, [r4, #32]
 8006ce8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006cea:	47b0      	blx	r6
 8006cec:	2800      	cmp	r0, #0
 8006cee:	dc06      	bgt.n	8006cfe <__sflush_r+0x10a>
 8006cf0:	2340      	movs	r3, #64	; 0x40
 8006cf2:	2001      	movs	r0, #1
 8006cf4:	89a2      	ldrh	r2, [r4, #12]
 8006cf6:	4240      	negs	r0, r0
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	81a3      	strh	r3, [r4, #12]
 8006cfc:	e787      	b.n	8006c0e <__sflush_r+0x1a>
 8006cfe:	9b01      	ldr	r3, [sp, #4]
 8006d00:	183f      	adds	r7, r7, r0
 8006d02:	1a1b      	subs	r3, r3, r0
 8006d04:	9301      	str	r3, [sp, #4]
 8006d06:	e7e7      	b.n	8006cd8 <__sflush_r+0xe4>
 8006d08:	20400001 	.word	0x20400001

08006d0c <_fflush_r>:
 8006d0c:	690b      	ldr	r3, [r1, #16]
 8006d0e:	b570      	push	{r4, r5, r6, lr}
 8006d10:	0005      	movs	r5, r0
 8006d12:	000c      	movs	r4, r1
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d102      	bne.n	8006d1e <_fflush_r+0x12>
 8006d18:	2500      	movs	r5, #0
 8006d1a:	0028      	movs	r0, r5
 8006d1c:	bd70      	pop	{r4, r5, r6, pc}
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d004      	beq.n	8006d2c <_fflush_r+0x20>
 8006d22:	6983      	ldr	r3, [r0, #24]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <_fflush_r+0x20>
 8006d28:	f7ff f9f2 	bl	8006110 <__sinit>
 8006d2c:	4b14      	ldr	r3, [pc, #80]	; (8006d80 <_fflush_r+0x74>)
 8006d2e:	429c      	cmp	r4, r3
 8006d30:	d11b      	bne.n	8006d6a <_fflush_r+0x5e>
 8006d32:	686c      	ldr	r4, [r5, #4]
 8006d34:	220c      	movs	r2, #12
 8006d36:	5ea3      	ldrsh	r3, [r4, r2]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d0ed      	beq.n	8006d18 <_fflush_r+0xc>
 8006d3c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d3e:	07d2      	lsls	r2, r2, #31
 8006d40:	d404      	bmi.n	8006d4c <_fflush_r+0x40>
 8006d42:	059b      	lsls	r3, r3, #22
 8006d44:	d402      	bmi.n	8006d4c <_fflush_r+0x40>
 8006d46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d48:	f7ff fa83 	bl	8006252 <__retarget_lock_acquire_recursive>
 8006d4c:	0028      	movs	r0, r5
 8006d4e:	0021      	movs	r1, r4
 8006d50:	f7ff ff50 	bl	8006bf4 <__sflush_r>
 8006d54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d56:	0005      	movs	r5, r0
 8006d58:	07db      	lsls	r3, r3, #31
 8006d5a:	d4de      	bmi.n	8006d1a <_fflush_r+0xe>
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	059b      	lsls	r3, r3, #22
 8006d60:	d4db      	bmi.n	8006d1a <_fflush_r+0xe>
 8006d62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d64:	f7ff fa76 	bl	8006254 <__retarget_lock_release_recursive>
 8006d68:	e7d7      	b.n	8006d1a <_fflush_r+0xe>
 8006d6a:	4b06      	ldr	r3, [pc, #24]	; (8006d84 <_fflush_r+0x78>)
 8006d6c:	429c      	cmp	r4, r3
 8006d6e:	d101      	bne.n	8006d74 <_fflush_r+0x68>
 8006d70:	68ac      	ldr	r4, [r5, #8]
 8006d72:	e7df      	b.n	8006d34 <_fflush_r+0x28>
 8006d74:	4b04      	ldr	r3, [pc, #16]	; (8006d88 <_fflush_r+0x7c>)
 8006d76:	429c      	cmp	r4, r3
 8006d78:	d1dc      	bne.n	8006d34 <_fflush_r+0x28>
 8006d7a:	68ec      	ldr	r4, [r5, #12]
 8006d7c:	e7da      	b.n	8006d34 <_fflush_r+0x28>
 8006d7e:	46c0      	nop			; (mov r8, r8)
 8006d80:	080075b4 	.word	0x080075b4
 8006d84:	080075d4 	.word	0x080075d4
 8006d88:	08007594 	.word	0x08007594

08006d8c <_lseek_r>:
 8006d8c:	b570      	push	{r4, r5, r6, lr}
 8006d8e:	0004      	movs	r4, r0
 8006d90:	0008      	movs	r0, r1
 8006d92:	0011      	movs	r1, r2
 8006d94:	001a      	movs	r2, r3
 8006d96:	2300      	movs	r3, #0
 8006d98:	4d05      	ldr	r5, [pc, #20]	; (8006db0 <_lseek_r+0x24>)
 8006d9a:	602b      	str	r3, [r5, #0]
 8006d9c:	f7fa fe2a 	bl	80019f4 <_lseek>
 8006da0:	1c43      	adds	r3, r0, #1
 8006da2:	d103      	bne.n	8006dac <_lseek_r+0x20>
 8006da4:	682b      	ldr	r3, [r5, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d000      	beq.n	8006dac <_lseek_r+0x20>
 8006daa:	6023      	str	r3, [r4, #0]
 8006dac:	bd70      	pop	{r4, r5, r6, pc}
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	20000260 	.word	0x20000260

08006db4 <__swhatbuf_r>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	000e      	movs	r6, r1
 8006db8:	001d      	movs	r5, r3
 8006dba:	230e      	movs	r3, #14
 8006dbc:	5ec9      	ldrsh	r1, [r1, r3]
 8006dbe:	0014      	movs	r4, r2
 8006dc0:	b096      	sub	sp, #88	; 0x58
 8006dc2:	2900      	cmp	r1, #0
 8006dc4:	da08      	bge.n	8006dd8 <__swhatbuf_r+0x24>
 8006dc6:	220c      	movs	r2, #12
 8006dc8:	5eb3      	ldrsh	r3, [r6, r2]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	602a      	str	r2, [r5, #0]
 8006dce:	061b      	lsls	r3, r3, #24
 8006dd0:	d411      	bmi.n	8006df6 <__swhatbuf_r+0x42>
 8006dd2:	2380      	movs	r3, #128	; 0x80
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	e00f      	b.n	8006df8 <__swhatbuf_r+0x44>
 8006dd8:	466a      	mov	r2, sp
 8006dda:	f000 f8d1 	bl	8006f80 <_fstat_r>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	dbf1      	blt.n	8006dc6 <__swhatbuf_r+0x12>
 8006de2:	23f0      	movs	r3, #240	; 0xf0
 8006de4:	9901      	ldr	r1, [sp, #4]
 8006de6:	021b      	lsls	r3, r3, #8
 8006de8:	4019      	ands	r1, r3
 8006dea:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <__swhatbuf_r+0x4c>)
 8006dec:	18c9      	adds	r1, r1, r3
 8006dee:	424b      	negs	r3, r1
 8006df0:	4159      	adcs	r1, r3
 8006df2:	6029      	str	r1, [r5, #0]
 8006df4:	e7ed      	b.n	8006dd2 <__swhatbuf_r+0x1e>
 8006df6:	2340      	movs	r3, #64	; 0x40
 8006df8:	2000      	movs	r0, #0
 8006dfa:	6023      	str	r3, [r4, #0]
 8006dfc:	b016      	add	sp, #88	; 0x58
 8006dfe:	bd70      	pop	{r4, r5, r6, pc}
 8006e00:	ffffe000 	.word	0xffffe000

08006e04 <__smakebuf_r>:
 8006e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e06:	2602      	movs	r6, #2
 8006e08:	898b      	ldrh	r3, [r1, #12]
 8006e0a:	0005      	movs	r5, r0
 8006e0c:	000c      	movs	r4, r1
 8006e0e:	4233      	tst	r3, r6
 8006e10:	d006      	beq.n	8006e20 <__smakebuf_r+0x1c>
 8006e12:	0023      	movs	r3, r4
 8006e14:	3347      	adds	r3, #71	; 0x47
 8006e16:	6023      	str	r3, [r4, #0]
 8006e18:	6123      	str	r3, [r4, #16]
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	6163      	str	r3, [r4, #20]
 8006e1e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006e20:	466a      	mov	r2, sp
 8006e22:	ab01      	add	r3, sp, #4
 8006e24:	f7ff ffc6 	bl	8006db4 <__swhatbuf_r>
 8006e28:	9900      	ldr	r1, [sp, #0]
 8006e2a:	0007      	movs	r7, r0
 8006e2c:	0028      	movs	r0, r5
 8006e2e:	f7ff fa35 	bl	800629c <_malloc_r>
 8006e32:	2800      	cmp	r0, #0
 8006e34:	d108      	bne.n	8006e48 <__smakebuf_r+0x44>
 8006e36:	220c      	movs	r2, #12
 8006e38:	5ea3      	ldrsh	r3, [r4, r2]
 8006e3a:	059a      	lsls	r2, r3, #22
 8006e3c:	d4ef      	bmi.n	8006e1e <__smakebuf_r+0x1a>
 8006e3e:	2203      	movs	r2, #3
 8006e40:	4393      	bics	r3, r2
 8006e42:	431e      	orrs	r6, r3
 8006e44:	81a6      	strh	r6, [r4, #12]
 8006e46:	e7e4      	b.n	8006e12 <__smakebuf_r+0xe>
 8006e48:	4b0f      	ldr	r3, [pc, #60]	; (8006e88 <__smakebuf_r+0x84>)
 8006e4a:	62ab      	str	r3, [r5, #40]	; 0x28
 8006e4c:	2380      	movs	r3, #128	; 0x80
 8006e4e:	89a2      	ldrh	r2, [r4, #12]
 8006e50:	6020      	str	r0, [r4, #0]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	81a3      	strh	r3, [r4, #12]
 8006e56:	9b00      	ldr	r3, [sp, #0]
 8006e58:	6120      	str	r0, [r4, #16]
 8006e5a:	6163      	str	r3, [r4, #20]
 8006e5c:	9b01      	ldr	r3, [sp, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00d      	beq.n	8006e7e <__smakebuf_r+0x7a>
 8006e62:	0028      	movs	r0, r5
 8006e64:	230e      	movs	r3, #14
 8006e66:	5ee1      	ldrsh	r1, [r4, r3]
 8006e68:	f000 f89c 	bl	8006fa4 <_isatty_r>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d006      	beq.n	8006e7e <__smakebuf_r+0x7a>
 8006e70:	2203      	movs	r2, #3
 8006e72:	89a3      	ldrh	r3, [r4, #12]
 8006e74:	4393      	bics	r3, r2
 8006e76:	001a      	movs	r2, r3
 8006e78:	2301      	movs	r3, #1
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	81a3      	strh	r3, [r4, #12]
 8006e7e:	89a0      	ldrh	r0, [r4, #12]
 8006e80:	4307      	orrs	r7, r0
 8006e82:	81a7      	strh	r7, [r4, #12]
 8006e84:	e7cb      	b.n	8006e1e <__smakebuf_r+0x1a>
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	08006095 	.word	0x08006095

08006e8c <memchr>:
 8006e8c:	b2c9      	uxtb	r1, r1
 8006e8e:	1882      	adds	r2, r0, r2
 8006e90:	4290      	cmp	r0, r2
 8006e92:	d101      	bne.n	8006e98 <memchr+0xc>
 8006e94:	2000      	movs	r0, #0
 8006e96:	4770      	bx	lr
 8006e98:	7803      	ldrb	r3, [r0, #0]
 8006e9a:	428b      	cmp	r3, r1
 8006e9c:	d0fb      	beq.n	8006e96 <memchr+0xa>
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	e7f6      	b.n	8006e90 <memchr+0x4>
	...

08006ea4 <__malloc_lock>:
 8006ea4:	b510      	push	{r4, lr}
 8006ea6:	4802      	ldr	r0, [pc, #8]	; (8006eb0 <__malloc_lock+0xc>)
 8006ea8:	f7ff f9d3 	bl	8006252 <__retarget_lock_acquire_recursive>
 8006eac:	bd10      	pop	{r4, pc}
 8006eae:	46c0      	nop			; (mov r8, r8)
 8006eb0:	20000254 	.word	0x20000254

08006eb4 <__malloc_unlock>:
 8006eb4:	b510      	push	{r4, lr}
 8006eb6:	4802      	ldr	r0, [pc, #8]	; (8006ec0 <__malloc_unlock+0xc>)
 8006eb8:	f7ff f9cc 	bl	8006254 <__retarget_lock_release_recursive>
 8006ebc:	bd10      	pop	{r4, pc}
 8006ebe:	46c0      	nop			; (mov r8, r8)
 8006ec0:	20000254 	.word	0x20000254

08006ec4 <_free_r>:
 8006ec4:	b570      	push	{r4, r5, r6, lr}
 8006ec6:	0005      	movs	r5, r0
 8006ec8:	2900      	cmp	r1, #0
 8006eca:	d010      	beq.n	8006eee <_free_r+0x2a>
 8006ecc:	1f0c      	subs	r4, r1, #4
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	da00      	bge.n	8006ed6 <_free_r+0x12>
 8006ed4:	18e4      	adds	r4, r4, r3
 8006ed6:	0028      	movs	r0, r5
 8006ed8:	f7ff ffe4 	bl	8006ea4 <__malloc_lock>
 8006edc:	4a1d      	ldr	r2, [pc, #116]	; (8006f54 <_free_r+0x90>)
 8006ede:	6813      	ldr	r3, [r2, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d105      	bne.n	8006ef0 <_free_r+0x2c>
 8006ee4:	6063      	str	r3, [r4, #4]
 8006ee6:	6014      	str	r4, [r2, #0]
 8006ee8:	0028      	movs	r0, r5
 8006eea:	f7ff ffe3 	bl	8006eb4 <__malloc_unlock>
 8006eee:	bd70      	pop	{r4, r5, r6, pc}
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	d908      	bls.n	8006f06 <_free_r+0x42>
 8006ef4:	6821      	ldr	r1, [r4, #0]
 8006ef6:	1860      	adds	r0, r4, r1
 8006ef8:	4283      	cmp	r3, r0
 8006efa:	d1f3      	bne.n	8006ee4 <_free_r+0x20>
 8006efc:	6818      	ldr	r0, [r3, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	1841      	adds	r1, r0, r1
 8006f02:	6021      	str	r1, [r4, #0]
 8006f04:	e7ee      	b.n	8006ee4 <_free_r+0x20>
 8006f06:	001a      	movs	r2, r3
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <_free_r+0x4e>
 8006f0e:	42a3      	cmp	r3, r4
 8006f10:	d9f9      	bls.n	8006f06 <_free_r+0x42>
 8006f12:	6811      	ldr	r1, [r2, #0]
 8006f14:	1850      	adds	r0, r2, r1
 8006f16:	42a0      	cmp	r0, r4
 8006f18:	d10b      	bne.n	8006f32 <_free_r+0x6e>
 8006f1a:	6820      	ldr	r0, [r4, #0]
 8006f1c:	1809      	adds	r1, r1, r0
 8006f1e:	1850      	adds	r0, r2, r1
 8006f20:	6011      	str	r1, [r2, #0]
 8006f22:	4283      	cmp	r3, r0
 8006f24:	d1e0      	bne.n	8006ee8 <_free_r+0x24>
 8006f26:	6818      	ldr	r0, [r3, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	1841      	adds	r1, r0, r1
 8006f2c:	6011      	str	r1, [r2, #0]
 8006f2e:	6053      	str	r3, [r2, #4]
 8006f30:	e7da      	b.n	8006ee8 <_free_r+0x24>
 8006f32:	42a0      	cmp	r0, r4
 8006f34:	d902      	bls.n	8006f3c <_free_r+0x78>
 8006f36:	230c      	movs	r3, #12
 8006f38:	602b      	str	r3, [r5, #0]
 8006f3a:	e7d5      	b.n	8006ee8 <_free_r+0x24>
 8006f3c:	6821      	ldr	r1, [r4, #0]
 8006f3e:	1860      	adds	r0, r4, r1
 8006f40:	4283      	cmp	r3, r0
 8006f42:	d103      	bne.n	8006f4c <_free_r+0x88>
 8006f44:	6818      	ldr	r0, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	1841      	adds	r1, r0, r1
 8006f4a:	6021      	str	r1, [r4, #0]
 8006f4c:	6063      	str	r3, [r4, #4]
 8006f4e:	6054      	str	r4, [r2, #4]
 8006f50:	e7ca      	b.n	8006ee8 <_free_r+0x24>
 8006f52:	46c0      	nop			; (mov r8, r8)
 8006f54:	20000258 	.word	0x20000258

08006f58 <_read_r>:
 8006f58:	b570      	push	{r4, r5, r6, lr}
 8006f5a:	0004      	movs	r4, r0
 8006f5c:	0008      	movs	r0, r1
 8006f5e:	0011      	movs	r1, r2
 8006f60:	001a      	movs	r2, r3
 8006f62:	2300      	movs	r3, #0
 8006f64:	4d05      	ldr	r5, [pc, #20]	; (8006f7c <_read_r+0x24>)
 8006f66:	602b      	str	r3, [r5, #0]
 8006f68:	f7fa fcea 	bl	8001940 <_read>
 8006f6c:	1c43      	adds	r3, r0, #1
 8006f6e:	d103      	bne.n	8006f78 <_read_r+0x20>
 8006f70:	682b      	ldr	r3, [r5, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d000      	beq.n	8006f78 <_read_r+0x20>
 8006f76:	6023      	str	r3, [r4, #0]
 8006f78:	bd70      	pop	{r4, r5, r6, pc}
 8006f7a:	46c0      	nop			; (mov r8, r8)
 8006f7c:	20000260 	.word	0x20000260

08006f80 <_fstat_r>:
 8006f80:	2300      	movs	r3, #0
 8006f82:	b570      	push	{r4, r5, r6, lr}
 8006f84:	4d06      	ldr	r5, [pc, #24]	; (8006fa0 <_fstat_r+0x20>)
 8006f86:	0004      	movs	r4, r0
 8006f88:	0008      	movs	r0, r1
 8006f8a:	0011      	movs	r1, r2
 8006f8c:	602b      	str	r3, [r5, #0]
 8006f8e:	f7fa fd1a 	bl	80019c6 <_fstat>
 8006f92:	1c43      	adds	r3, r0, #1
 8006f94:	d103      	bne.n	8006f9e <_fstat_r+0x1e>
 8006f96:	682b      	ldr	r3, [r5, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d000      	beq.n	8006f9e <_fstat_r+0x1e>
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	20000260 	.word	0x20000260

08006fa4 <_isatty_r>:
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	b570      	push	{r4, r5, r6, lr}
 8006fa8:	4d06      	ldr	r5, [pc, #24]	; (8006fc4 <_isatty_r+0x20>)
 8006faa:	0004      	movs	r4, r0
 8006fac:	0008      	movs	r0, r1
 8006fae:	602b      	str	r3, [r5, #0]
 8006fb0:	f7fa fd17 	bl	80019e2 <_isatty>
 8006fb4:	1c43      	adds	r3, r0, #1
 8006fb6:	d103      	bne.n	8006fc0 <_isatty_r+0x1c>
 8006fb8:	682b      	ldr	r3, [r5, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d000      	beq.n	8006fc0 <_isatty_r+0x1c>
 8006fbe:	6023      	str	r3, [r4, #0]
 8006fc0:	bd70      	pop	{r4, r5, r6, pc}
 8006fc2:	46c0      	nop			; (mov r8, r8)
 8006fc4:	20000260 	.word	0x20000260

08006fc8 <_init>:
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fca:	46c0      	nop			; (mov r8, r8)
 8006fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fce:	bc08      	pop	{r3}
 8006fd0:	469e      	mov	lr, r3
 8006fd2:	4770      	bx	lr

08006fd4 <_fini>:
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fda:	bc08      	pop	{r3}
 8006fdc:	469e      	mov	lr, r3
 8006fde:	4770      	bx	lr
